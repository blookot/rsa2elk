# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "postgresql"
			"[observer][name]" => "PostgreSQL"
			"[observer][type]" => "Database"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0004
	# line in RSA: <hmonth><hday><htime><hhost><hfld1>[<hfld2>]: [<hfld3>-<hfld4>] #PostGreSQL: <messageid>^^<hfld5> <!payload:hfld1>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0001
	# line in RSA: <hfld1>[<hfld2>]: [<hfld3>-<hfld4>] #PostGreSQL: <messageid>^^<hfld5> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+\[(?<hfld3>[^\-]*)\-(?<hfld4>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<messageid>[^\^]*)\^\^(?<hfld5>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <messageid>[<hfld2>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth><hday><htime><hhost><messageid>[<hprocess_id>]:<!payload:messageid>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-postgresqlmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "idle" {
		# MESSAGE idle
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <fld10>^^<severity>:  statement: <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\^]*)\^\^(?<severity>[^:]*):[\s]+statement:[\s]+(?<action>.*)$" }
				id => "message-idle"
				add_field => {
				"ec_subject" => "Database"
				"ec_theme" => "ALM"
				"ec_outcome" => "Unknown"
					"[event][id]" => "idle"
					"[rsa][message][id1]" => "idle"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE idle:01
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <severity>:  disconnection: session time:<fld10> user=<fld11> database=<fld12> host=[<shost>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<severity>[^:]*):[\s]+disconnection:[\s]+session[\s]+time:(?<fld10>[^\s]*)[\s]+user=(?<fld11>[^\s]*)[\s]+database=(?<fld12>[^\s]*)[\s]+host=\[(?<shost>[^\]]*)\]$" }
				id => "message-idle:01"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "idle:01"
					"[rsa][message][id1]" => "idle:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "authentication" {
		# MESSAGE authentication
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> CETLOG:  connection authorized: user=<fld11> database=<fld12>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+CETLOG:[\s]+connection[\s]+authorized:[\s]+user=(?<fld11>[^\s]*)[\s]+database=(?<fld12>.*)$" }
				id => "message-authentication"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "connection authorized"
					"[event][id]" => "authentication"
					"[rsa][message][id1]" => "authentication"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE authentication:01
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>] #PostGreSQL:<fld7>^^<fld5><fld6><timezone>^^<username>^^<db_name>^^{<saddr>(<sport>)|<saddr>}^^<sessionid>^^<fld8><fld9>CETFATAL:  no pg_hba.conf entry for host "<shost>", user "<fld11>", database "<fld12>", SSL<disposition>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	}
	else if [logstash][msgparser][id] == "SELECT" {
		# MESSAGE SELECT:01
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <fld10>^^STATEMENT:  <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\^]*)\^\^STATEMENT:[\s]+(?<action>.*)$" }
				id => "message-SELECT:01"
				add_field => {
				"ec_subject" => "Database"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"ec_outcome" => "Unknown"
					"[event][id]" => "SELECT:01"
					"[rsa][message][id1]" => "SELECT:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SELECT:02
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <fld10>^^HINT:  <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\^]*)\^\^HINT:[\s]+(?<event_description>.*)$" }
				id => "message-SELECT:02"
				add_field => {
				"ec_subject" => "Database"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
					"[event][id]" => "SELECT:02"
					"[rsa][message][id1]" => "SELECT:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SELECT:03
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <fld10>^^ERROR:  <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\^]*)\^\^ERROR:[\s]+(?<event_description>.*)$" }
				id => "message-SELECT:03"
				add_field => {
				"ec_subject" => "Database"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
				"severity" => " Error"
					"[event][id]" => "SELECT:03"
					"[rsa][message][id1]" => "SELECT:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SELECT
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <fld10>^^<severity>:  duration: <processing_time> ms
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\^]*)\^\^(?<severity>[^:]*):[\s]+duration:[\s]+(?<processing_time>[^\s]*)[\s]+ms$" }
				id => "message-SELECT"
				add_field => {
				"ec_subject" => "Database"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"ec_outcome" => "Unknown"
					"[event][id]" => "SELECT"
					"[rsa][message][id1]" => "SELECT"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <fld10>^^<severity>:  duration: <processing_time> ms
	else if [logstash][msgparser][id] == "msgParserId8" {
		grok {
			match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\^]*)\^\^(?<severity>[^:]*):[\s]+duration:[\s]+(?<processing_time>[^\s]*)[\s]+ms$" }
			id => "msgParserId8"
			add_field => {
				"ec_subject" => "Database"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"ec_outcome" => "Unknown"
				"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SHOW" {
		# MESSAGE SHOW
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <fld10>^^STATEMENT:  <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\^]*)\^\^STATEMENT:[\s]+(?<action>.*)$" }
				id => "message-SHOW"
				add_field => {
				"ec_subject" => "Database"
				"ec_theme" => "ALM"
				"ec_outcome" => "Unknown"
					"[event][id]" => "SHOW"
					"[rsa][message][id1]" => "SHOW"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SHOW:01
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: <fld4>^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld6> <fld9> <fld10>^^<severity>:  unrecognized configuration parameter <fld7>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld2>[^\-]*)\-(?<fld3>[^\]]*)\][\s]+#PostGreSQL:[\s]+(?<fld4>[^\^]*)\^\^(?<fld5>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^(?<username>[^\^]*)\^\^(?<db_name>[^\^]*)\^\^([\s]*\[(?<saddr>[^\]]*)\]\^\^[\s]+|[\s]*(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)\^\^[\s]+)(?<sessionid>[^\^]*)\^\^(?<fld6>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\^]*)\^\^(?<severity>[^:]*):[\s]+unrecognized[\s]+configuration[\s]+parameter[\s]+(?<fld7>.*)$" }
				id => "message-SHOW:01"
				add_field => {
				"ec_subject" => "Database"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
				"event_description" => " Unknown configuation parameter"
					"[event][id]" => "SHOW:01"
					"[rsa][message][id1]" => "SHOW:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "postgres" {
		# MESSAGE postgres:01
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] #PostGreSQL: ^^<fld5> <fld8> <timezone>^^<username>^^<db_name>^^<sessionid>^^<fld6> <fld9> <fld10>^^<severity>:  database system was shut down at <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld2}-%{fld3}] #PostGreSQL: ^^%{fld5} %{fld8} %{timezone}^^%{username}^^%{db_name}^^%{sessionid}^^%{fld6} %{fld9} %{fld10}^^%{severity}:  database system was shut down at %{info}" }
				id => "message-postgres:01"
				add_field => {
				"event_description" => " Database system shutdown"
					"[event][id]" => "postgres:01"
					"[rsa][message][id1]" => "postgres:01"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld8}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres:09
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>] #PostGreSQL: ^^<fld5> <fld6> <timezone>^^[<username>]^^[<db_name>]^^^^<sessionid>^^<fld10> CETLOG: <event_description>: {host=<shost> port=<sport>|host=[<shost>]|host=<shost>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<fld3>[^\-]*)\-(?<fld4>[^\]]*)\][\s]+#PostGreSQL:[\s]+\^\^(?<fld5>[^\s]*)[\s]+(?<fld6>[^\s]*)[\s]+(?<timezone>[^\^]*)\^\^\[(?<username>[^\]]*)\]\^\^\[(?<db_name>[^\]]*)\]\^\^\^\^(?<sessionid>[^\^]*)\^\^(?<fld10>[^\s]*)[\s]+CETLOG:[\s]+(?<event_description>[^:]*):[\s]+(host=(?<shost>[^\s]*)[\s]+port=(?<sport>.*)|host=\[(?<shost>[^\]]*)\]|host=(?<shost>.*))$" }
				id => "message-postgres:09"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "postgres:09"
					"[rsa][message][id1]" => "postgres:09"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres:02
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>]<fld5><fld6><timezone> LOG:  connection received: {host=<shost> port=<sport>|host=<shost>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE postgres:03
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>]<fld5><fld6><timezone> FATAL:  password authentication failed for user <fld7>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld3}-%{fld4}]%{fld5}%{fld6}%{timezone} FATAL:  password authentication failed for user %{fld7}" }
				id => "message-postgres:03"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "password authentication failed"
					"[event][id]" => "postgres:03"
					"[rsa][message][id1]" => "postgres:03"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres:04
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>]<fld5><fld6><timezone> FATAL:  database <fld7> does not exist
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld3}-%{fld4}]%{fld5}%{fld6}%{timezone} FATAL:  database %{fld7} does not exist" }
				id => "message-postgres:04"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "database doen't exists"
					"[event][id]" => "postgres:04"
					"[rsa][message][id1]" => "postgres:04"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres:05
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>]<fld5><fld6><timezone> LOG:  connection authorized: user=<username> database=<db_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld3}-%{fld4}]%{fld5}%{fld6}%{timezone} LOG:  connection authorized: user=%{username} database=%{db_name}" }
				id => "message-postgres:05"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "connection authorized"
					"[event][id]" => "postgres:05"
					"[rsa][message][id1]" => "postgres:05"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres:10
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>] #PostGreSQL: <fld7>^^<fld5><fld6><timezone>^^<username>^^<db_name>^^[<saddr>]^^<sessionid>^^<fld8> <fld9> CETLOG:  disconnection: session time:<fld10> user=<fld11> database=<fld12> host=[<shost>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld3}-%{fld4}] #PostGreSQL: %{fld7}^^%{fld5}%{fld6}%{timezone}^^%{username}^^%{db_name}^^[%{saddr}]^^%{sessionid}^^%{fld8} %{fld9} CETLOG:  disconnection: session time:%{fld10} user=%{fld11} database=%{fld12} host=[%{shost}]" }
				id => "message-postgres:10"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "disconnection"
					"[event][id]" => "postgres:10"
					"[rsa][message][id1]" => "postgres:10"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres:11
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>] #PostGreSQL: <fld7>^^<fld5><fld6><timezone>^^<username>^^<db_name>^^{ [<saddr>]^^ | <saddr>(<sport>)^^ }<sessionid>^^<fld10> <fld9> CETLOG: <info>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE postgres:06
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>]<fld5><fld6><timezone> LOG:  disconnection: session time: <fld7> user=<username> database=<db_name> host=<shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld3}-%{fld4}]%{fld5}%{fld6}%{timezone} LOG:  disconnection: session time: %{fld7} user=%{username} database=%{db_name} host=%{shost}" }
				id => "message-postgres:06"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "disconnection"
					"[event][id]" => "postgres:06"
					"[rsa][message][id1]" => "postgres:06"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres:08
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>]<fld5><fld6><timezone>FATAL:  no pg_hba.conf entry for host "<shost>", user "<username>", database "<db_name>", SSL<disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld3}-%{fld4}]%{fld5}%{fld6}%{timezone}FATAL:  no pg_hba.conf entry for host \"%{shost}\", user \"%{username}\", database \"%{db_name}\", SSL%{disposition}" }
				id => "message-postgres:08"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "no pg_hba.conf entry"
					"[event][id]" => "postgres:08"
					"[rsa][message][id1]" => "postgres:08"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres:07
		# line in RSA: <fld1>[<process_id>]: [<fld3>-<fld4>] <fld5> <fld6>:<fld7>:<fld8> <timezone> <fld9>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld3}-%{fld4}] %{fld5} %{fld6}:%{fld7}:%{fld8} %{timezone} %{fld9}: %{event_description}" }
				id => "message-postgres:07"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "postgres:07"
					"[rsa][message][id1]" => "postgres:07"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld10}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE postgres
		# line in RSA: <fld1>[<process_id>]: [<fld2>-<fld3>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}[%{process_id}]: [%{fld2}-%{fld3}] %{event_description}" }
				id => "message-postgres"
				add_field => {
				"hostname" => "%{hhost}"
				"ec_subject" => "Database"
				"ec_theme" => "ALM"
				"ec_outcome" => "Unknown"
					"[event][id]" => "postgres"
					"[rsa][message][id1]" => "postgres"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-postgresqlmsg.json"
#			template_name => "postgresql_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

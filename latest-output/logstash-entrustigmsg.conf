# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "entrustig"
			"[observer][name]" => "Entrust Identity Guard"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: [<date> <time>,<hfld1>] [<hfld2>] [<hseverity>] [<hfld3>] [<messageid>] <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^\[(?<date>[^\s]*)[\s]+(?<time>[^,]*),(?<hfld1>[^\]]*)\][\s]+\[(?<message>(?<hfld2>[^\]]*)\][\s]+\[(?<hseverity>[^\]]*)\][\s]+\[(?<hfld3>[^\]]*)\][\s]+\[(?<messageid>[^\]]*)\][\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: [<date> <time>,<hfld1>] [<hfld2>] [<hseverity>] [<hfld3>] <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^\[(?<date>[^\s]*)[\s]+(?<time>[^,]*),(?<hfld1>[^\]]*)\][\s]+\[(?<message>(?<hfld2>[^\]]*)\][\s]+\[(?<hseverity>[^\]]*)\][\s]+\[(?<hfld3>[^\]]*)\][\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "EntrustIG_SystemLog"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-entrustigmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "AUD2302" {
		# MESSAGE AUD2302
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token {entrust|OATH Token} <fld3> for user <c_username> has been updated. Reset: <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Token[\s]+(entrust|OATH[\s]+Token)[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+updated\.[\s]+Reset:[\s]+(?<fld4>.*)$" }
				id => "message-AUD2302"
				add_field => {
				"event_description" => "user has been updated"
				"ec_activity" => "Modify"
				"ec_subject" => "User"
					"[event][id]" => "AUD2302"
					"[rsa][message][id1]" => "AUD2302"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD2302:01
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] {Token Entrust Soft Token|Token entrust} <fld3> for user <c_username> has been updated. {null|No changes}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+(Token[\s]+Entrust[\s]+Soft[\s]+Token|Token[\s]+entrust)[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+updated\.[\s]+(null|No[\s]+changes)$" }
				id => "message-AUD2302:01"
				add_field => {
				"event_description" => "user has been updated"
				"ec_activity" => "Modify"
				"ec_subject" => "User"
					"[event][id]" => "AUD2302:01"
					"[rsa][message][id1]" => "AUD2302:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD2302:02
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token {Entrust Soft Token| softtoken } <fld3> for user <c_username> has been updated. Token Supports Delivery and Signature: <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Token[\s]+(Entrust[\s]+Soft[\s]+Token|[\s]*softtoken[\s]+)[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+updated\.[\s]+Token[\s]+Supports[\s]+Delivery[\s]+and[\s]+Signature:[\s]+(?<fld4>.*)$" }
				id => "message-AUD2302:02"
				add_field => {
				"event_description" => "user has been updated"
				"ec_activity" => "Modify"
				"ec_subject" => "User"
					"[event][id]" => "AUD2302:02"
					"[rsa][message][id1]" => "AUD2302:02"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD2302:03
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token entrust <fld3> for user <c_username> has been updated. { State: <disposition> | Token Set: <fld4> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Token[\s]+entrust[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+updated\.[\s]+([\s]*State:[\s]+(?<disposition>[^\s]*)[\s]+|[\s]*Token[\s]+Set:[\s]+(?<fld4>[^\s]*)[\s]+)$" }
				id => "message-AUD2302:03"
				add_field => {
				"event_description" => "user has been updated"
				"ec_activity" => "Modify"
				"ec_subject" => "User"
					"[event][id]" => "AUD2302:03"
					"[rsa][message][id1]" => "AUD2302:03"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD2302:04
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token { Entrust Soft Token | softtoken } <fld3> for user <c_username> has been updated. State: <disposition>, { Comment:<fld5>, Token | Token } Supports Delivery and Signature: <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Token[\s]+([\s]*Entrust[\s]+Soft[\s]+Token[\s]+|[\s]*softtoken[\s]+)[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+updated\.[\s]+State:[\s]+(?<disposition>[^,]*),[\s]+([\s]*Comment:(?<fld5>[^,]*),[\s]+Token[\s]+|[\s]*Token[\s]+)[\s]+Supports[\s]+Delivery[\s]+and[\s]+Signature:[\s]+(?<fld4>.*)$" }
				id => "message-AUD2302:04"
				add_field => {
				"event_description" => "user has been updated"
				"ec_activity" => "Modify"
				"ec_subject" => "User"
					"[event][id]" => "AUD2302:04"
					"[rsa][message][id1]" => "AUD2302:04"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Machine secret <fld3> to user <c_username>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Machine secret %{fld3} to user %{c_username}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Temporary PIN created for user <c_username> Expiry Date: <fld3>, Number Of Uses Left: <fld4>, Comment:<fld5>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Temporary PIN created for user %{c_username} Expiry Date: %{fld3}, Number Of Uses Left: %{fld4}, Comment:%{fld5}" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Temporary PIN deleted for user <c_username>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Temporary PIN deleted for user %{c_username}" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Administrator {logged in. Remote Address: <saddr>|logged in.}
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Administrator[\s]+(logged[\s]+in\.[\s]+Remote[\s]+Address:[\s]+(?<saddr>.*)|logged[\s]+in\.)$" }
			id => "msgParserId4"
			add_field => {
				"event_description" => "Administrator logged in"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Administrator logged out.
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Administrator logged out." }
			id => "msgParserId5"
			add_field => {
				"event_description" => "Administrator logged out"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] {[<group>/<username>]|[<username>]} Administrator <fld3> failed external authentication.
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+(\[(?<group>[^/]*)/(?<username>[^\]]*)\]|\[(?<username>[^\]]*)\])[\s]+Administrator[\s]+(?<fld3>[^\s]*)[\s]+failed[\s]+external[\s]+authentication\.$" }
			id => "msgParserId6"
			add_field => {
				"event_description" => "Administrator failed external authentication"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Smart Credential license is near expiry date <fld3>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Smart Credential license is near expiry date %{fld3}" }
			id => "msgParserId7"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "AUD6000" {
		# MESSAGE AUD6000
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> successfully authenticated a challenge. Authentication Type: <authmethod>, Remote Address: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} successfully authenticated a challenge. Authentication Type: %{authmethod}, Remote Address: %{saddr}" }
				id => "message-AUD6000"
				add_field => {
				"event_description" => "User successfully authenticated a challenge"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
					"[event][id]" => "AUD6000"
					"[rsa][message][id1]" => "AUD6000"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD6000:01
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> successfully authenticated a challenge. Authentication Type: <authmethod>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} successfully authenticated a challenge. Authentication Type: %{authmethod}" }
				id => "message-AUD6000:01"
				add_field => {
				"event_description" => "User successfully authenticated a challenge"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
					"[event][id]" => "AUD6000:01"
					"[rsa][message][id1]" => "AUD6000:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "AUD6001" {
		# MESSAGE AUD6001
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> failed authentication. Authentication Type: <authmethod>, Remote Address: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} failed authentication. Authentication Type: %{authmethod}, Remote Address: %{saddr}" }
				id => "message-AUD6001"
				add_field => {
				"event_description" => "failed authentication"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
					"[event][id]" => "AUD6001"
					"[rsa][message][id1]" => "AUD6001"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD6001:01
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> failed authentication. Authentication Type: <authmethod>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} failed authentication. Authentication Type: %{authmethod}" }
				id => "message-AUD6001:01"
				add_field => {
				"event_description" => "failed authentication"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
					"[event][id]" => "AUD6001:01"
					"[rsa][message][id1]" => "AUD6001:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> failed authentication and is now locked.
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} failed authentication and is now locked." }
			id => "msgParserId12"
			add_field => {
				"event_description" => "failed authentication"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
				"ec_activity" => "Lockout"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] New machine registered for user <c_username>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] New machine registered for user %{c_username}" }
			id => "msgParserId13"
			add_field => {
				"event_description" => "New machine registered for user"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> challenge request was challenged. Authentication Type: <authmethod>, Security Level: <fld6>, Machine Authentication: <fld7>, IP Authentication: <fld8>, Certificate Authentication: <fld9>, External Risk: <fld10>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} challenge request was challenged. Authentication Type: %{authmethod}, Security Level: %{fld6}, Machine Authentication: %{fld7}, IP Authentication: %{fld8}, Certificate Authentication: %{fld9}, External Risk: %{fld10}" }
			id => "msgParserId14"
			add_field => {
				"event_description" => "User challenge request was challenged"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "AUD1000" {
		# MESSAGE AUD1000
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <fld3>/<fld4> created. Internal ID: cn=<c_username>, Searchbase: <user_org>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{fld3}/%{fld4} created. Internal ID: cn=%{c_username}, Searchbase: %{user_org}" }
				id => "message-AUD1000"
				add_field => {
				"event_description" => "User created"
				"ec_subject" => "User"
				"ec_activity" => "Create"
					"[event][id]" => "AUD1000"
					"[rsa][message][id1]" => "AUD1000"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD1000:01
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> created. {Full Name: <user_fullname>|Roles: <fld51>}, {Comment: "<fld3>"|Comment: <fld3>}, Internal ID: {cn|CN}=<fld4>, {OU=<fld52>,OU=<fld52>,OU=<fld53>, Searchbase: <user_dept>|Searchbase: <user_dept>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+User[\s]+(?<c_username>[^\s]*)[\s]+created\.[\s]+(Full[\s]+Name:[\s]+(?<user_fullname>[^,]*)|Roles:[\s]+(?<fld51>[^,]*)),[\s]+(Comment:[\s]+\"(?<fld3>[^\"]*)\"|Comment:[\s]+(?<fld3>[^,]*)),[\s]+Internal[\s]+ID:[\s]+(cn|CN)=(?<fld4>[^,]*),[\s]+(OU=(?<fld52>[^,]*),OU=(?<fld52>[^,]*),OU=(?<fld53>[^,]*),[\s]+Searchbase:[\s]+(?<user_dept>.*)|Searchbase:[\s]+(?<user_dept>.*))$" }
				id => "message-AUD1000:01"
				add_field => {
				"event_description" => "User created"
				"ec_subject" => "User"
				"ec_activity" => "Create"
					"[event][id]" => "AUD1000:01"
					"[rsa][message][id1]" => "AUD1000:01"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD1000:02
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> created. Comment: "<fld4>", Internal ID: cn=<fld5>, Searchbase: <user_dept>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} created. Comment: \"%{fld4}\", Internal ID: cn=%{fld5}, Searchbase: %{user_dept}" }
				id => "message-AUD1000:02"
				add_field => {
				"event_description" => "User created"
				"ec_subject" => "User"
				"ec_activity" => "Create"
					"[event][id]" => "AUD1000:02"
					"[rsa][message][id1]" => "AUD1000:02"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD1000:03
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> created. Internal ID: CN=<fld5>, Searchbase: <user_dept>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} created. Internal ID: CN=%{fld5}, Searchbase: %{user_dept}" }
				id => "message-AUD1000:03"
				add_field => {
				"event_description" => "User created"
				"ec_subject" => "User"
				"ec_activity" => "Create"
					"[event][id]" => "AUD1000:03"
					"[rsa][message][id1]" => "AUD1000:03"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD1000:04
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> created. Full Name: <user_fullname>, Comment: <fld4>, Internal ID: CN=<fld5>, Searchbase: <user_dept>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} created. Full Name: %{user_fullname}, Comment: %{fld4}, Internal ID: CN=%{fld5}, Searchbase: %{user_dept}" }
				id => "message-AUD1000:04"
				add_field => {
				"event_description" => "User created"
				"ec_subject" => "User"
				"ec_activity" => "Create"
					"[event][id]" => "AUD1000:04"
					"[rsa][message][id1]" => "AUD1000:04"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD1000:05
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> created. Comment: <fld3>, Internal ID: <fld4>, Searchbase: <user_dept>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} created. Comment: %{fld3}, Internal ID: %{fld4}, Searchbase: %{user_dept}" }
				id => "message-AUD1000:05"
				add_field => {
				"event_description" => "User created"
				"ec_subject" => "User"
				"ec_activity" => "Create"
					"[event][id]" => "AUD1000:05"
					"[rsa][message][id1]" => "AUD1000:05"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "AUD1002" {
		# MESSAGE AUD1002
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> {updated. QA Values: <fld5>,|updated.} {Authentication Secrets: <fld6>| Reset Lockout: <fld7>| Lockout: <fld8>| QA Values: <fld9>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+User[\s]+(?<c_username>[^\s]*)[\s]+(updated\.[\s]+QA[\s]+Values:[\s]+(?<fld5>[^,]*),|updated\.)[\s]+(Authentication[\s]+Secrets:[\s]+(?<fld6>.*)|[\s]*Reset[\s]+Lockout:[\s]+(?<fld7>.*)|[\s]*Lockout:[\s]+(?<fld8>.*)|[\s]*QA[\s]+Values:[\s]+(?<fld9>.*))$" }
				id => "message-AUD1002"
				add_field => {
				"event_description" => "User updated"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
					"[event][id]" => "AUD1002"
					"[rsa][message][id1]" => "AUD1002"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD1002:01
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> updated. Full Name: <user_fullname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} updated. Full Name: %{user_fullname}" }
				id => "message-AUD1002:01"
				add_field => {
				"event_description" => "User updated"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
					"[event][id]" => "AUD1002:01"
					"[rsa][message][id1]" => "AUD1002:01"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD1002:02
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> updated.<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} updated.%{fld5}" }
				id => "message-AUD1002:02"
				add_field => {
				"event_description" => "User updated"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
					"[event][id]" => "AUD1002:02"
					"[rsa][message][id1]" => "AUD1002:02"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD1002:03
		# line in RSA: <fld1>] [<severity> ] [<fld2>] [<id>] User <username> updated.<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity} ] [%{fld2}] [%{id}] User %{username} updated.%{fld5}" }
				id => "message-AUD1002:03"
				add_field => {
				"event_description" => "User updated"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
					"[event][id]" => "AUD1002:03"
					"[rsa][message][id1]" => "AUD1002:03"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "AUD150" {
		# MESSAGE AUD150
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Failed to connect to repository default with URL: <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Failed to connect to repository default with URL: %{url}" }
				id => "message-AUD150"
				add_field => {
				"event_description" => "Failed to connect to repository"
				"ec_theme" => "Communication"
				"ec_outcome" => "Failure"
					"[event][id]" => "AUD150"
					"[rsa][message][id1]" => "AUD150"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD150:01
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Failed to connect to repository database with URL: <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Failed to connect to repository database with URL: %{url}" }
				id => "message-AUD150:01"
				add_field => {
				"event_description" => "Failed to connect to repository database with URL"
				"ec_theme" => "Communication"
				"ec_outcome" => "Failure"
					"[event][id]" => "AUD150:01"
					"[rsa][message][id1]" => "AUD150:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD150:02
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Failed to connect to repository <db_name> with URL: <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Failed to connect to repository %{db_name} with URL: %{url}" }
				id => "message-AUD150:02"
				add_field => {
				"event_description" => "Failed to connect to repository"
				"ec_theme" => "Communication"
				"ec_outcome" => "Failure"
					"[event][id]" => "AUD150:02"
					"[rsa][message][id1]" => "AUD150:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] <service> service started. <fld10>
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] %{service} service started. %{fld10}" }
			id => "msgParserId20"
			add_field => {
				"event_description" => "service started"
				"ec_subject" => "Service"
				"ec_activity" => "Start"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] <service> service stopped.
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] %{service} service stopped." }
			id => "msgParserId21"
			add_field => {
				"event_description" => "service stopped"
				"ec_subject" => "Service"
				"ec_activity" => "Stop"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<fld3>] The key protection file binding has changed;  run 'system bind' again.
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{fld3}] The key protection file binding has changed;  run 'system bind' again." }
			id => "msgParserId22"
			add_field => {
				"event_description" => "The key protection file binding has changed"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "EntrustIG_SystemLog" {
		# MESSAGE EntrustIG_SystemLog:01
		# line in RSA: <fld1>] [<severity>] [IG.SYSTEM.<fld2>.API] Retrieved user from entry cn=<fld3>,ou=<fld4>,o=<fld5> in repository appids
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [IG.SYSTEM.%{fld2}.API] Retrieved user from entry cn=%{fld3},ou=%{fld4},o=%{fld5} in repository appids" }
				id => "message-EntrustIG_SystemLog:01"
				add_field => {
				"event_description" => "Retrieved user from entry"
					"[event][id]" => "EntrustIG_SystemLog:01"
					"[rsa][message][id1]" => "EntrustIG_SystemLog:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EntrustIG_SystemLog:02
		# line in RSA: <fld1>] [<severity>] [IG.SYSTEM.<fld2>.API] Updating user info for user <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [IG.SYSTEM.%{fld2}.API] Updating user info for user %{c_username}" }
				id => "message-EntrustIG_SystemLog:02"
				add_field => {
				"event_description" => "Updating user info"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
					"[event][id]" => "EntrustIG_SystemLog:02"
					"[rsa][message][id1]" => "EntrustIG_SystemLog:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EntrustIG_SystemLog:03
		# line in RSA: <fld1>] [<severity>] [IG.<fld2>.<fld3>.ws] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [IG.%{fld2}.%{fld3}.ws] %{event_description}" }
				id => "message-EntrustIG_SystemLog:03"
				add_field => {
					"[event][id]" => "EntrustIG_SystemLog:03"
					"[rsa][message][id1]" => "EntrustIG_SystemLog:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EntrustIG_SystemLog
		# line in RSA: <fld1>] [<severity>] [<fld2>.<fld3>.<fld4>.<fld5>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}.%{fld3}.%{fld4}.%{fld5}] %{event_description}" }
				id => "message-EntrustIG_SystemLog"
				add_field => {
					"[event][id]" => "EntrustIG_SystemLog"
					"[rsa][message][id1]" => "EntrustIG_SystemLog"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EntrustIG_SystemLog:04
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<fld3>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{fld3}] %{event_description}" }
				id => "message-EntrustIG_SystemLog:04"
				add_field => {
					"[event][id]" => "EntrustIG_SystemLog:04"
					"[rsa][message][id1]" => "EntrustIG_SystemLog:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] One time password with index <fld5> created for user <c_username>. Expiry Date: <fld4>
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] One time password with index %{fld5} created for user %{c_username}. Expiry Date: %{fld4}" }
			id => "msgParserId40"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId41
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token Entrust Soft Token <fld3> has been created for user <c_username>. State: <disposition>, Serial Number: <fld5>, Token Set: "<fld6>", Token Supports Delivery and Signature: <fld7>
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Token Entrust Soft Token %{fld3} has been created for user %{c_username}. State: %{disposition}, Serial Number: %{fld5}, Token Set: \"%{fld6}\", Token Supports Delivery and Signature: %{fld7}" }
			id => "msgParserId41"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "AUD2352" {
		# MESSAGE AUD2352
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Smart Credential <fld3> for user <c_username> has been updated. Issue State: <action>, Issue Date: <fld4>, Issue Info: <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Smart Credential %{fld3} for user %{c_username} has been updated. Issue State: %{action}, Issue Date: %{fld4}, Issue Info: %{fld5}" }
				id => "message-AUD2352"
				add_field => {
					"[event][id]" => "AUD2352"
					"[rsa][message][id1]" => "AUD2352"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD2352:01
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Smart Credential <fld3> for user <c_username> has been updated. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Smart Credential %{fld3} for user %{c_username} has been updated. %{info}" }
				id => "message-AUD2352:01"
				add_field => {
					"[event][id]" => "AUD2352:01"
					"[rsa][message][id1]" => "AUD2352:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "AUD151" {
		# MESSAGE AUD151
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Repository Commercial connection failed to URL <url> switching to URL <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Repository Commercial connection failed to URL %{url} switching to URL %{fld5}" }
				id => "message-AUD151"
				add_field => {
					"[event][id]" => "AUD151"
					"[rsa][message][id1]" => "AUD151"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD151:01
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Repository WMSS connection failed to URL <url> switching to URL <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Repository WMSS connection failed to URL %{url} switching to URL %{fld5}" }
				id => "message-AUD151:01"
				add_field => {
					"[event][id]" => "AUD151:01"
					"[rsa][message][id1]" => "AUD151:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD151:02
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Repository default connection failed to URL <url> switching to URL <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Repository default connection failed to URL %{url} switching to URL %{fld5}" }
				id => "message-AUD151:02"
				add_field => {
					"[event][id]" => "AUD151:02"
					"[rsa][message][id1]" => "AUD151:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD151:03
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Repository appids connection failed to URL <url> switching to URL <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Repository appids connection failed to URL %{url} switching to URL %{fld5}" }
				id => "message-AUD151:03"
				add_field => {
					"[event][id]" => "AUD151:03"
					"[rsa][message][id1]" => "AUD151:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUD151:04
		# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Repository <db_name> connection failed to URL <url> switching to URL <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Repository %{db_name} connection failed to URL %{url} switching to URL %{fld5}" }
				id => "message-AUD151:04"
				add_field => {
				"event_description" => "Repository connection to URL failed"
					"[event][id]" => "AUD151:04"
					"[rsa][message][id1]" => "AUD151:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{date} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] The Entrust IdentityGuard Radius Proxy received an invalid Radius message from /<saddr>:<sport>.
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] The Entrust IdentityGuard Radius Proxy received an invalid Radius message from /%{saddr}:%{sport}." }
			id => "msgParserId49"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId50
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] One time password with index <fld5> deleted for user <c_username>.
	else if [logstash][msgparser][id] == "msgParserId50" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] One time password with index %{fld5} deleted for user %{c_username}." }
			id => "msgParserId50"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId51
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] {Token entrust|Token OATH Token} <fld3> has been assigned to user <c_username>. Token Set: <fld4>, State: <disposition>, Current Activation Type: <fld5>, Available Activation Types: <fld6>, Token Supports Delivery and Signature: <fld7>, Comment: <fld8>
	else if [logstash][msgparser][id] == "msgParserId51" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+(Token[\s]+entrust|Token[\s]+OATH[\s]+Token)[\s]+(?<fld3>[^\s]*)[\s]+has[\s]+been[\s]+assigned[\s]+to[\s]+user[\s]+(?<c_username>[^\.]*)\.[\s]+Token[\s]+Set:[\s]+(?<fld4>[^,]*),[\s]+State:[\s]+(?<disposition>[^,]*),[\s]+Current[\s]+Activation[\s]+Type:[\s]+(?<fld5>[^,]*),[\s]+Available[\s]+Activation[\s]+Types:[\s]+(?<fld6>[^,]*),[\s]+Token[\s]+Supports[\s]+Delivery[\s]+and[\s]+Signature:[\s]+(?<fld7>[^,]*),[\s]+Comment:[\s]+(?<fld8>.*)$" }
			id => "msgParserId51"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId52
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> authenticated with pending token. Token <fld4> updated. State: <disposition>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} authenticated with pending token. Token %{fld4} updated. State: %{disposition}" }
			id => "msgParserId52"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId53
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Activation codes for token Entrust Soft Token <fld3> for user <c_username> have been generated.
	else if [logstash][msgparser][id] == "msgParserId53" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Activation codes for token Entrust Soft Token %{fld3} for user %{c_username} have been generated." }
			id => "msgParserId53"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId54
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token {E | e}ntrust {Soft Token <fld3> | <fld3> } for user <c_username> has been deleted.
	else if [logstash][msgparser][id] == "msgParserId54" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Token[\s]+(E[\s]+|[\s]*e)ntrust[\s]+(Soft[\s]+Token[\s]+(?<fld3>[^\s]*)[\s]+|[\s]*(?<fld3>[^\s]*)[\s]+)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+deleted\.$" }
			id => "msgParserId54"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId55
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Personal Verification Number updated for user <c_username>.
	else if [logstash][msgparser][id] == "msgParserId55" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Personal Verification Number updated for user %{c_username}." }
			id => "msgParserId55"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId56
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token Entrust Soft Token <fld3> for user <c_username> has been successfully activated.
	else if [logstash][msgparser][id] == "msgParserId56" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Token Entrust Soft Token %{fld3} for user %{c_username} has been successfully activated." }
			id => "msgParserId56"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId57
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token {entrust|OATH Token} <fld3> for user <c_username> has been unassigned.
	else if [logstash][msgparser][id] == "msgParserId57" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Token[\s]+(entrust|OATH[\s]+Token)[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+unassigned\.$" }
			id => "msgParserId57"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId58
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User registration password created for user <c_username>.
	else if [logstash][msgparser][id] == "msgParserId58" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User registration password created for user %{c_username}." }
			id => "msgParserId58"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId59
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] {[<group>/<username>] Smart Credential|Smart Credential} <fld3> has been created for user <c_username>. Smart Credential Id: <fld4>, State: <disposition>, Smart Credential Definition: <fld5>, Valid: <fld6>, Approved: <fld7>,{Enrollment Values Set:<fld18> | Enrollment Values: <fld8>}, Supports Unblock: <fld9>, Friendly Name: <fld10>
	else if [logstash][msgparser][id] == "msgParserId59" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+(\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Smart[\s]+Credential|Smart[\s]+Credential)[\s]+(?<fld3>[^\s]*)[\s]+has[\s]+been[\s]+created[\s]+for[\s]+user[\s]+(?<c_username>[^\.]*)\.[\s]+Smart[\s]+Credential[\s]+Id:[\s]+(?<fld4>[^,]*),[\s]+State:[\s]+(?<disposition>[^,]*),[\s]+Smart[\s]+Credential[\s]+Definition:[\s]+(?<fld5>[^,]*),[\s]+Valid:[\s]+(?<fld6>[^,]*),[\s]+Approved:[\s]+(?<fld7>[^,]*),(Enrollment[\s]+Values[\s]+Set:(?<fld18>[^\s]*)[\s]+|[\s]*Enrollment[\s]+Values:[\s]+(?<fld8>[^,]*)),[\s]+Supports[\s]+Unblock:[\s]+(?<fld9>[^,]*),[\s]+Friendly[\s]+Name:[\s]+(?<fld10>.*)$" }
			id => "msgParserId59"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId60
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User registration password authenticated for user <c_username>.
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User registration password authenticated for user %{c_username}." }
			id => "msgParserId60"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId61
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Digital Id <c_username> has been created for user <info>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Digital Id %{c_username} has been created for user %{info}" }
			id => "msgParserId61"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId62
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> deleted.
	else if [logstash][msgparser][id] == "msgParserId62" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} deleted." }
			id => "msgParserId62"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId63
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<username>] Administrator <fld3> attempted to access the administration service, but their account is locked.
	else if [logstash][msgparser][id] == "msgParserId63" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{username}] Administrator %{fld3} attempted to access the administration service, but their account is locked." }
			id => "msgParserId63"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId64
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Administrator has been locked out until unlocked by administrator.
	else if [logstash][msgparser][id] == "msgParserId64" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Administrator has been locked out until unlocked by administrator." }
			id => "msgParserId64"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId65
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Challenge for smart credential <fld3> for user <c_username> have been successfully delivered.
	else if [logstash][msgparser][id] == "msgParserId65" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Challenge for smart credential %{fld3} for user %{c_username} have been successfully delivered." }
			id => "msgParserId65"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId66
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Failed delivery of challenge for smartcredential <fld3> for user <c_username>.
	else if [logstash][msgparser][id] == "msgParserId66" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Failed delivery of challenge for smartcredential %{fld3} for user %{c_username}." }
			id => "msgParserId66"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId67
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Administrator attempted to perform an operation but their role(s) did not permit it.
	else if [logstash][msgparser][id] == "msgParserId67" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Administrator attempted to perform an operation but their role(s) did not permit it." }
			id => "msgParserId67"
			add_field => {
				"event_description" => "Administrator attempted to perform an operation but their role(s) did not permit it"
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId68
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<username>] User <c_username> attempted to access the administration service, but does not have any roles that grant administrative privileges.
	else if [logstash][msgparser][id] == "msgParserId68" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{username}] User %{c_username} attempted to access the administration service, but does not have any roles that grant administrative privileges." }
			id => "msgParserId68"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId69
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] Failed to establish a connection to any supplied URLs for repository <user_dept>.
	else if [logstash][msgparser][id] == "msgParserId69" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] Failed to establish a connection to any supplied URLs for repository %{user_dept}." }
			id => "msgParserId69"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId70
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Token Entrust Soft Token <fld41> for user <c_username> has been unlocked.
	else if [logstash][msgparser][id] == "msgParserId70" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Token Entrust Soft Token %{fld41} for user %{c_username} has been unlocked." }
			id => "msgParserId70"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId71
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] { [<group>/<username>] Smart | Smart } Credential <fld3> for user <c_username> has been deleted.
	else if [logstash][msgparser][id] == "msgParserId71" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+([\s]*\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Smart[\s]+|[\s]*Smart[\s]+)[\s]+Credential[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+deleted\.$" }
			id => "msgParserId71"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId72
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Smart Credential <fld3> for user <c_username> has been approved.
	else if [logstash][msgparser][id] == "msgParserId72" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Smart Credential %{fld3} for user %{c_username} has been approved." }
			id => "msgParserId72"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId73
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] { [<group>/<username>] Smart | Smart } Credential <fld3> with Serial Number <fld42> for user <c_username> has been unassigned. <fld41>
	else if [logstash][msgparser][id] == "msgParserId73" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+([\s]*\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Smart[\s]+|[\s]*Smart[\s]+)[\s]+Credential[\s]+(?<fld3>[^\s]*)[\s]+with[\s]+Serial[\s]+Number[\s]+(?<fld42>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+unassigned\.[\s]+(?<fld41>.*)$" }
			id => "msgParserId73"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId74
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] { [<group>/<username>] Smart | Smart } Credential <fld3> for user <c_username> has been canceled.<fld41>
	else if [logstash][msgparser][id] == "msgParserId74" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+([\s]*\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Smart[\s]+|[\s]*Smart[\s]+)[\s]+Credential[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+canceled\.(?<fld41>.*)$" }
			id => "msgParserId74"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId75
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] { [<group>/<username>] Digital | Digital } Id <info> for user <c_username> has been deleted.<context>
	else if [logstash][msgparser][id] == "msgParserId75" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+([\s]*\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Digital[\s]+|[\s]*Digital[\s]+)[\s]+Id[\s]+(?<info>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+deleted\.(?<context>.*)$" }
			id => "msgParserId75"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId76
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] { [<group>/<username>] Digital | Digital } Id <info> for user <c_username> has been canceled.<context>
	else if [logstash][msgparser][id] == "msgParserId76" {
		grok {
			match => { "message" => "^(?<fld1>[^\]]*)\][\s]+\[(?<severity>[^\]]*)\][\s]+\[(?<fld2>[^\]]*)\][\s]+\[(?<id>[^\]]*)\][\s]+([\s]*\[(?<group>[^/]*)/(?<username>[^\]]*)\][\s]+Digital[\s]+|[\s]*Digital[\s]+)[\s]+Id[\s]+(?<info>[^\s]*)[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+has[\s]+been[\s]+canceled\.(?<context>.*)$" }
			id => "msgParserId76"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId77
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Personal Verification Number created for user <c_username>.<info>
	else if [logstash][msgparser][id] == "msgParserId77" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Personal Verification Number created for user %{c_username}.%{info}" }
			id => "msgParserId77"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId78
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] Personal Verification Number deleted for user <c_username>.
	else if [logstash][msgparser][id] == "msgParserId78" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] Personal Verification Number deleted for user %{c_username}." }
			id => "msgParserId78"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId79
	# line in RSA: <fld1>] [<severity>] [<fld2>] [<id>] [<group>/<username>] User <c_username> was challenged but has no second factor authenticators available.
	else if [logstash][msgparser][id] == "msgParserId79" {
		dissect {
			mapping => { "message" => "%{fld1}] [%{severity}] [%{fld2}] [%{id}] [%{group}/%{username}] User %{c_username} was challenged but has no second factor authenticators available." }
			id => "msgParserId79"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-entrustigmsg.json"
#			template_name => "entrustig_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "netasqutm"
			"[observer][name]" => "Netasq Unified Threat Manager"
			"[observer][type]" => "Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: id=<hfld1> time="<hdate>" fw="<hfld2>" tz=<hfld3> startime="<hfld4>" logtype="<messageid>" <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^id=(?<hfld1>[^\s]*)[\s]+time=\"(?<hdate>[^\"]*)\"[\s]+fw=\"(?<hfld2>[^\"]*)\"[\s]+tz=(?<hfld3>[^\s]*)[\s]+startime=\"(?<hfld4>[^\"]*)\"[\s]+logtype=\"(?<messageid>[^\"]*)\"[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-netasqutmmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> error=<resultcode> user=<username> address=<hostip> sessionid=<sessionid> msg=<event_description>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} error=%{resultcode} user=%{username} address=%{hostip} sessionid=%{sessionid} msg=%{event_description}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> user=<username> srcif=<fld8> srcifname=<fld9> ipproto=<protocol> dstif=<fld11> dstifname=<fld12> icmptype=<icmptype> icmpcode=<icmpcode> proto=<fld15> src=<saddr> srcport=<sport> srcportname=<fld35> srcname=<shost> dst=<daddr> dstport=<dport> dstportname=<fld36> dstname=<dhost> action=<action> msg=<event_description> class=<event_type> classification=<fld22> pktdumplen=<fld23> pktlen=<fld24> pktdump=<fld25> alarmid=<operation_id> repeat=<fld27> confid=<fld28> slotlevel=<fld29> ruleid=<fld30> modsrc=<fld31> modsrcport=<fld32> origdst=<fld33> origdstport=<fld34>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} user=%{username} srcif=%{fld8} srcifname=%{fld9} ipproto=%{protocol} dstif=%{fld11} dstifname=%{fld12} icmptype=%{icmptype} icmpcode=%{icmpcode} proto=%{fld15} src=%{saddr} srcport=%{sport} srcportname=%{fld35} srcname=%{shost} dst=%{daddr} dstport=%{dport} dstportname=%{fld36} dstname=%{dhost} action=%{action} msg=%{event_description} class=%{event_type} classification=%{fld22} pktdumplen=%{fld23} pktlen=%{fld24} pktdump=%{fld25} alarmid=%{operation_id} repeat=%{fld27} confid=%{fld28} slotlevel=%{fld29} ruleid=%{fld30} modsrc=%{fld31} modsrcport=%{fld32} origdst=%{fld33} origdstport=%{fld34}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> slotlevel=<fld8> ruleid=<fld9> user=<username> srcif=<fld10> srcifname=<fld11> ipproto=<protocol> dstif=<fld13> dstifname=<fld14> proto=<fld15> src=<saddr> srcport=<sport> srcportname=<fld30> srcname=<shost> dst=<daddr> dstport=<dport> dstportname=<fld21> dstname=<dhost> sent=<fld23> rcvd=<fld24> duration=<duration> alarmid=<operation_id> confid=<fld25> modsrc=<fld26> modsrcport=<fld27> origdst=<fld28> origdstport=<fld29> 
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} slotlevel=%{fld8} ruleid=%{fld9} user=%{username} srcif=%{fld10} srcifname=%{fld11} ipproto=%{protocol} dstif=%{fld13} dstifname=%{fld14} proto=%{fld15} src=%{saddr} srcport=%{sport} srcportname=%{fld30} srcname=%{shost} dst=%{daddr} dstport=%{dport} dstportname=%{fld21} dstname=%{dhost} sent=%{fld23} rcvd=%{fld24} duration=%{duration} alarmid=%{operation_id} confid=%{fld25} modsrc=%{fld26} modsrcport=%{fld27} origdst=%{fld28} origdstport=%{fld29}" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> security=<fld7> system=<fld8> CPU=<fld9> Pvm=<fld10> Ethernet5=<fld11> Ethernet1=<fld12> Ethernet0=<fld13> Qid0=<fld14>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} security=%{fld7} system=%{fld8} CPU=%{fld9} Pvm=%{fld10} Ethernet5=%{fld11} Ethernet1=%{fld12} Ethernet0=%{fld13} Qid0=%{fld14}" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> proto=<protocol> op=<web_method> user=<username> groupid=<fld11> src=<saddr> srcport=<sport> dst=<daddr> dstport=<dport> duration=<duration> sent=<fld17> rcvd=<fld18> arg=<filename> virus=<result> action=<action> msg=<event_description> dstname=<fld19> srcname=<fld20> srcportname=<fld21> dstportname=<fld22> modsrc=<fld23> modsrcport=<fld24> origdst=<fld25> origdstport=<fld26>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} proto=%{protocol} op=%{web_method} user=%{username} groupid=%{fld11} src=%{saddr} srcport=%{sport} dst=%{daddr} dstport=%{dport} duration=%{duration} sent=%{fld17} rcvd=%{fld18} arg=%{filename} virus=%{result} action=%{action} msg=%{event_description} dstname=%{fld19} srcname=%{fld20} srcportname=%{fld21} dstportname=%{fld22} modsrc=%{fld23} modsrcport=%{fld24} origdst=%{fld25} origdstport=%{fld26}" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> ruleid=<fld8> proto=<protocol> op=<web_method> result=<fld40> user=<username> src=<saddr> srcport=<sport> dst=<daddr> dstport=<dport> srcname=<shost> dstname=<dhost> sent=<fld19> rcvd=<fld20> duration=<duration> virus=<result> action=<action> cat_site=<filter> arg=<filename> msg=<event_description> contentpolicy=<fld10> modsrc=<fld13> modsrcport=<fld14> origdst=<fld15> origdstport=<fld16> srcportname=<fld17> dstportname=<fld18>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} ruleid=%{fld8} proto=%{protocol} op=%{web_method} result=%{fld40} user=%{username} src=%{saddr} srcport=%{sport} dst=%{daddr} dstport=%{dport} srcname=%{shost} dstname=%{dhost} sent=%{fld19} rcvd=%{fld20} duration=%{duration} virus=%{result} action=%{action} cat_site=%{filter} arg=%{filename} msg=%{event_description} contentpolicy=%{fld10} modsrc=%{fld13} modsrcport=%{fld14} origdst=%{fld15} origdstport=%{fld16} srcportname=%{fld17} dstportname=%{fld18}" }
			id => "msgParserId5"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> proto=<protocol> user=<username> src=<saddr> srcport=<sport> dst=<daddr> dstport=<dport> srcname=<shost> sent=<fld15> rcvd=<fld16> duration=<duration> virus=<result> action=<action> dstname=<dhost> msg=<event_description> srcportname=<fld20> dstportname=<fld21> modsrc=<fld22> modsrcport=<fld23> origdst=<fld24> origdstport=<fld25> spamlevel=<fld26>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} proto=%{protocol} user=%{username} src=%{saddr} srcport=%{sport} dst=%{daddr} dstport=%{dport} srcname=%{shost} sent=%{fld15} rcvd=%{fld16} duration=%{duration} virus=%{result} action=%{action} dstname=%{dhost} msg=%{event_description} srcportname=%{fld20} dstportname=%{fld21} modsrc=%{fld22} modsrcport=%{fld23} origdst=%{fld24} origdstport=%{fld25} spamlevel=%{fld26}" }
			id => "msgParserId6"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> proto=<protocol> op=<web_method> user=<username> src=<saddr> srcport=<sport> dst=<daddr> dstport=<dport> srcname=<shost> dstname=<dhost> sent=<fld16> rcvd=<fld17> duration=<duration> spamlevel=<threat_val> virus=<result> action=<action> msg=<event_description>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} proto=%{protocol} op=%{web_method} user=%{username} src=%{saddr} srcport=%{sport} dst=%{daddr} dstport=%{dport} srcname=%{shost} dstname=%{dhost} sent=%{fld16} rcvd=%{fld17} duration=%{duration} spamlevel=%{threat_val} virus=%{result} action=%{action} msg=%{event_description}" }
			id => "msgParserId7"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> slotlevel=<fld8> ruleid=<fld9> user=<username> srcif=<fld10> srcifname=<fld11> ipproto=<protocol> icmptype=<icmptype> icmpcode=<icmpcode> proto=<fld13> src=<saddr> srcport=<sport> srcportname=<fld16> srcname=<shost> dst=<daddr> dstport=<dport> dstportname=<fld20> dstname=<dhost> action=<action>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} slotlevel=%{fld8} ruleid=%{fld9} user=%{username} srcif=%{fld10} srcifname=%{fld11} ipproto=%{protocol} icmptype=%{icmptype} icmpcode=%{icmpcode} proto=%{fld13} src=%{saddr} srcport=%{sport} srcportname=%{fld16} srcname=%{shost} dst=%{daddr} dstport=%{dport} dstportname=%{fld20} dstname=%{dhost} action=%{action}" }
			id => "msgParserId8"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> slotlevel=<fld8> ruleid=<fld9> user=<username> srcif=<fld10> srcifname=<fld11> ipproto=<protocol> proto=<fld13> src=<saddr> srcport=<sport> srcportname=<fld31> srcname=<shost> dst=<daddr> dstport=<dport> dstportname=<fld32> dstname=<dhost> sent=<fld20> rcvd=<fld21> duration=<duration> op=<web_method> result=<result> arg=<filename> confid=<fld33> modsrc=<fld34> modsrcport=<fld35> origdst=<fld36> origdstport=<fld37> dstif=<fld38> dstifname=<fld39>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} slotlevel=%{fld8} ruleid=%{fld9} user=%{username} srcif=%{fld10} srcifname=%{fld11} ipproto=%{protocol} proto=%{fld13} src=%{saddr} srcport=%{sport} srcportname=%{fld31} srcname=%{shost} dst=%{daddr} dstport=%{dport} dstportname=%{fld32} dstname=%{dhost} sent=%{fld20} rcvd=%{fld21} duration=%{duration} op=%{web_method} result=%{result} arg=%{filename} confid=%{fld33} modsrc=%{fld34} modsrcport=%{fld35} origdst=%{fld36} origdstport=%{fld37} dstif=%{fld38} dstifname=%{fld39}" }
			id => "msgParserId9"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> error=<resultcode> phase=<ike> src=<saddr> srcname=<shost> dst=<daddr> side=<fld12> cookie_i=<fld13>  cookie_r=<fld14>  localnet=<fld15> remotenet=<fld16> spi_in=<src_spi> spi_out=<dst_spi> user=<username> msg=<event_description>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} error=%{resultcode} phase=%{ike} src=%{saddr} srcname=%{shost} dst=%{daddr} side=%{fld12} cookie_i=%{fld13}  cookie_r=%{fld14}  localnet=%{fld15} remotenet=%{fld16} spi_in=%{src_spi} spi_out=%{dst_spi} user=%{username} msg=%{event_description}" }
			id => "msgParserId10"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> user=<username> name=<fld20> arg=<filename> dstname=<dhost> dstport=<dport> dstportname=<fld21> src=<saddr> srcname=<shost> error=<resultcode> msg=<event_description> dstportname=<fld14>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} user=%{username} name=%{fld20} arg=%{filename} dstname=%{dhost} dstport=%{dport} dstportname=%{fld21} src=%{saddr} srcname=%{shost} error=%{resultcode} msg=%{event_description} dstportname=%{fld14}" }
			id => "msgParserId11"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> src=<saddr> srcname=<shost> vulnid=<id> msg=<threat_name> product=<application> detail=<info> arg=<fld25> family=<fld15> severity=<fld26> solution=<fld17> remote=<fld18> targetclient=<fld19> targetserver=<fld20> discovery=<fld21>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} src=%{saddr} srcname=%{shost} vulnid=%{id} msg=%{threat_name} product=%{application} detail=%{info} arg=%{fld25} family=%{fld15} severity=%{fld26} solution=%{fld17} remote=%{fld18} targetclient=%{fld19} targetserver=%{fld20} discovery=%{fld21}" }
			id => "msgParserId12"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> user=<username> src=<saddr> method=<authmethod> error=<resultcode> msg=<event_description>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} user=%{username} src=%{saddr} method=%{authmethod} error=%{resultcode} msg=%{event_description}" }
			id => "msgParserId13"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> msg=<event_description> service=<service>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} msg=%{event_description} service=%{service}" }
			id => "msgParserId14"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA:  id=<fld1> time=<fld2> fw=<instance> tz=<timezone> startime=<starttime> logtype=<event_source> pri=<severity> proto=<protocol> contentpolicy=<fld30> ruleid=<fld31> src=<saddr> srcport=<sport> srcportname=<fld32> dst= <daddr> dstport=<dport> dstportname=<fld33> srcname=<shost> modsrc=<fld34> modsrcport=<fld35> origdst=<fld36> origdstport=<fld37> sent=<fld38> rcvd=<fld39> duration=<duration> action=<action> dstname=<dhost> msg=<event_description>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "id=%{fld1} time=%{fld2} fw=%{instance} tz=%{timezone} startime=%{starttime} logtype=%{event_source} pri=%{severity} proto=%{protocol} contentpolicy=%{fld30} ruleid=%{fld31} src=%{saddr} srcport=%{sport} srcportname=%{fld32} dst= %{daddr} dstport=%{dport} dstportname=%{fld33} srcname=%{shost} modsrc=%{fld34} modsrcport=%{fld35} origdst=%{fld36} origdstport=%{fld37} sent=%{fld38} rcvd=%{fld39} duration=%{duration} action=%{action} dstname=%{dhost} msg=%{event_description}" }
			id => "msgParserId15"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-netasqutmmsg.json"
#			template_name => "netasqutm_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

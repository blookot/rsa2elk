# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "appsecdbprotect"
			"[observer][name]" => "AppSec DbProtect"
			"[observer][type]" => "Database"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %DBProtect: <hid>^^<messageid>^<!payload:hid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%DBProtect:[\s]+(?<message>(?<hid>[^\^]*)\^\^(?<messageid>[^\^]*)\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_appsecdbprotectmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "SecurityAlert" {
		# MESSAGE SecurityAlert
		# line in RSA: <operation_id>^^<info>^^<fld1>^^<fld2>^^<instance>^^<sensor>^^<event_type>^^<fld3>^^<hostname>^^<username>^^<logon_id>^^<fld4>^^<application>^^<product>^^<fld5>. [CLIENT: <saddr>] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{operation_id}^^%{info}^^%{fld1}^^%{fld2}^^%{instance}^^%{sensor}^^%{event_type}^^%{fld3}^^%{hostname}^^%{username}^^%{logon_id}^^%{fld4}^^%{application}^^%{product}^^%{fld5}. [CLIENT: %{saddr}]" }
				id => "message-SecurityAlert"
				add_field => {
					"[event][id]" => "SecurityAlert"
					"[rsa][message][id1]" => "SecurityAlert"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SecurityAlert:01
		# line in RSA: <operation_id>^^<info>^^<fld1>^^<fld2>^^<instance>^^<sensor>^^<event_type>^^<fld3>^^<hostname>^^<username>^^<logon_id>^^<fld4>^^<application>^^<product>^^<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{operation_id}^^%{info}^^%{fld1}^^%{fld2}^^%{instance}^^%{sensor}^^%{event_type}^^%{fld3}^^%{hostname}^^%{username}^^%{logon_id}^^%{fld4}^^%{application}^^%{product}^^%{fld5}" }
				id => "message-SecurityAlert:01"
				add_field => {
					"[event][id]" => "SecurityAlert:01"
					"[rsa][message][id1]" => "SecurityAlert:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "InformationalAlert" {
		# MESSAGE InformationalAlert:01
		# line in RSA: <operation_id>^^<info>^^<fld1>^^<fld2>^^<instance>^^<sensor>^^Login attempt - successful^^<fld3>^^<hostname>^^<username>^^<logon_id>^^<fld4>^^<application>^^<product>^^<dclass_counter1>^^<action> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{operation_id}^^%{info}^^%{fld1}^^%{fld2}^^%{instance}^^%{sensor}^^Login attempt - successful^^%{fld3}^^%{hostname}^^%{username}^^%{logon_id}^^%{fld4}^^%{application}^^%{product}^^%{dclass_counter1}^^%{action}" }
				id => "message-InformationalAlert:01"
				add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => " Login attempt - successful"
					"[event][id]" => "InformationalAlert:01"
					"[rsa][message][id1]" => "InformationalAlert:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE InformationalAlert
		# line in RSA: <operation_id>^^<info>^^<fld1>^^<fld2>^^<instance>^^<sensor>^^<event_type>^^<fld3>^^<hostname>^^<username>^^<logon_id>^^<fld4>^^<application>^^<product>^^<dclass_counter1>^^<action> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{operation_id}^^%{info}^^%{fld1}^^%{fld2}^^%{instance}^^%{sensor}^^%{event_type}^^%{fld3}^^%{hostname}^^%{username}^^%{logon_id}^^%{fld4}^^%{application}^^%{product}^^%{dclass_counter1}^^%{action}" }
				id => "message-InformationalAlert"
				add_field => {
					"[event][id]" => "InformationalAlert"
					"[rsa][message][id1]" => "InformationalAlert"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: <operation_id>^^<info>^^<hostip>^^<network_port>^^<instance>^^<hostname>^^<os>^^<product>^^<group_object>^^<event_type>^^<result>^^<fld6>^^<fld4>^^<fld5>^^<action>^^<context>^^<risk_num>^^<risk>^^<event_description>^^<version>^^<cve> 
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{operation_id}^^%{info}^^%{hostip}^^%{network_port}^^%{instance}^^%{hostname}^^%{os}^^%{product}^^%{group_object}^^%{event_type}^^%{result}^^%{fld6}^^%{fld4}^^%{fld5}^^%{action}^^%{context}^^%{risk_num}^^%{risk}^^%{event_description}^^%{version}^^%{cve}" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[fld2]"
		destination => "[risk]"
		dictionary => {
			"Info_4" => "Debug"
			"Info_3" => "Debug"
			"Info_2" => "Debug"
			"Info_1" => "Debug"
			"Auditing" => "Informational"
			"Info" => "Informational"
			"Low" => "Warning"
			"Medium" => "Error"
			"High" => "Critical"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[fld1]"
		destination => "[risk_num]"
		dictionary => {
			"9" => "7"
			"8" => "7"
			"7" => "7"
			"6" => "7"
			"5" => "6"
			"4" => "6"
			"3" => "4"
			"2" => "3"
			"1" => "2"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_appsecdbprotectmsg.json"
#			template_name => "appsecdbprotect_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

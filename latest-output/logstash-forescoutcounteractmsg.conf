# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "forescoutcounteract"
			"[observer][name]" => "Forescout CounterAct"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0009
	# line in RSA: <month><day><time><hostip>CounterACT[<hfld2>]: log_sec=<hfld3>, log_time=<hfld4>, log_sub_component=<event_source>, log_group=<group>, log_status=<resultcode>, log_user=<username>.<messageid>:<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month}%{day}%{time}%{hostip}CounterACT[%{hfld2}]: log_sec=%{hfld3}, log_time=%{hfld4}, log_sub_component=%{event_source}, log_group=%{group}, log_status=%{resultcode}, log_user=%{username}.%{messageid}:%{message}" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <month><day><time><hostip>CounterACT[<hfld2>]:<msgIdPart1><msgIdPart2><msgIdPart3>:<!payload:msgIdPart1>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0011
	# line in RSA: <month><day><time><hostname>CounterACT<hfld1>[<hfld2>]:<msgIdPart1><msgIdPart2><msgIdPart3>:<!payload:msgIdPart1>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0001
	# line in RSA: <hfld1>[<hfld2>]: <msgIdPart1> <msgIdPart2> <msgIdPart3>: <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<msgIdPart3>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <month> <day> <time> <hostname> CounterACT <fld1>[<hfld2>]: Block Event: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hostname} CounterACT %{fld1}[%{hfld2}]: Block Event: %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "Block_Event"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1>[<hfld2>]: <msgIdPart1> <msgIdPart2>: <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hfld1>[<hfld2>]: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hfld1>[<hfld2>]: <messageid>, <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<messageid>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hfld1>[<hfld2>]: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: CounterACT[<hfld2>]: %NACLOG <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "CounterACT[%{hfld2}]: %NACLOG %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "NAC_LOG"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <month> <day> <time> <hostname> CounterACT[<hfld2>]: %NACLOG <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hostname} CounterACT[%{hfld2}]: %NACLOG %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "NAC_LOG"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-forescoutcounteractmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "NAC_LOG" {
		# MESSAGE NAC_LOG:10
		# line in RSA: <shost>, "<user_lname>, <user_fname>", <username>, <saddr>, <smacaddr>,  {{<result>}, <fld4>, <fld5>, <fld6>, MTS:<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<user_lname>[^,]*),[\s]+(?<user_fname>[^\"]*)\",[\s]+(?<username>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\},[\s]+(?<fld4>[^,]*),[\s]+(?<fld5>[^,]*),[\s]+(?<fld6>[^,]*),[\s]+MTS:(?<info>.*)$" }
				id => "message-NAC_LOG:10"
				add_field => {
					"[event][id]" => "NAC_LOG:10"
					"[rsa][message][id1]" => "NAC_LOG:10"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:09
		# line in RSA: <shost>, "<fld1>", <username>,_<fld2>, <saddr>, <smacaddr>, <result>, <fld4>, <fld5>, <fld6> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{shost}, \"%{fld1}\", %{username},_%{fld2}, %{saddr}, %{smacaddr}, %{result}, %{fld4}, %{fld5}, %{fld6}" }
				id => "message-NAC_LOG:09"
				add_field => {
					"[event][id]" => "NAC_LOG:09"
					"[rsa][message][id1]" => "NAC_LOG:09"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:08
		# line in RSA: <shost>, "<fld1>", <fld2>, <username>,_<fld3>, <saddr>, <smacaddr>, <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{shost}, \"%{fld1}\", %{fld2}, %{username},_%{fld3}, %{saddr}, %{smacaddr}, %{result}" }
				id => "message-NAC_LOG:08"
				add_field => {
					"[event][id]" => "NAC_LOG:08"
					"[rsa][message][id1]" => "NAC_LOG:08"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:14
		# line in RSA: <shost>, "<user_lname>, <user_fname> (<fld1>)", <username>, <saddr>, <smacaddr>, {{<result>}, <fld4>, <fld5>, <fld6> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<user_lname>[^,]*),[\s]+(?<user_fname>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)\",[\s]+(?<username>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\},[\s]+(?<fld4>[^,]*),[\s]+(?<fld5>[^,]*),[\s]+(?<fld6>[^\s]*)[\s]+$" }
				id => "message-NAC_LOG:14"
				add_field => {
					"[event][id]" => "NAC_LOG:14"
					"[rsa][message][id1]" => "NAC_LOG:14"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:13
		# line in RSA: <shost>, "<fld1>", <username>,<fld2>, <saddr>, <smacaddr>, {{<result>}, <fld4>, <fld5>, <fld6> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<fld1>[^\"]*)\",[\s]+(?<username>[^,]*),(?<fld2>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\},[\s]+(?<fld4>[^,]*),[\s]+(?<fld5>[^,]*),[\s]+(?<fld6>[^\s]*)[\s]+$" }
				id => "message-NAC_LOG:13"
				add_field => {
					"[event][id]" => "NAC_LOG:13"
					"[rsa][message][id1]" => "NAC_LOG:13"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:07
		# line in RSA: <shost>, "<fld1>", <username>, <saddr>, <smacaddr>, {{<result>}, <fld4>, <fld5>, {<fld6>, MTS:<info> | <fld6>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<fld1>[^\"]*)\",[\s]+(?<username>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\},[\s]+(?<fld4>[^,]*),[\s]+(?<fld5>[^,]*),[\s]+((?<fld6>[^,]*),[\s]+MTS:(?<info>[^\s]*)[\s]+|[\s]*(?<fld6>[^\s]*))[\s]+$" }
				id => "message-NAC_LOG:07"
				add_field => {
					"[event][id]" => "NAC_LOG:07"
					"[rsa][message][id1]" => "NAC_LOG:07"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:06
		# line in RSA: <shost>, "<user_lname>, <user_fname>", <username>, <saddr>, <smacaddr>, {{<result>}, MTS:<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<user_lname>[^,]*),[\s]+(?<user_fname>[^\"]*)\",[\s]+(?<username>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\},[\s]+MTS:(?<info>.*)$" }
				id => "message-NAC_LOG:06"
				add_field => {
					"[event][id]" => "NAC_LOG:06"
					"[rsa][message][id1]" => "NAC_LOG:06"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:05
		# line in RSA: <shost>, "<user_lname>, <user_fname>", <saddr>, <smacaddr>, <fld4>, <username>, {{Pivotal User}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<user_lname>[^,]*),[\s]+(?<user_fname>[^\"]*)\",[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+(?<fld4>[^,]*),[\s]+(?<username>[^,]*),[\s]+\{Pivotal[\s]+User\}$" }
				id => "message-NAC_LOG:05"
				add_field => {
				"result" => "Pivotal User"
					"[event][id]" => "NAC_LOG:05"
					"[rsa][message][id1]" => "NAC_LOG:05"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:12
		# line in RSA: <shost>, "<username>", Unknown, <mail_id>, <saddr>, <smacaddr>, {{<result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<username>[^\"]*)\",[\s]+Unknown,[\s]+(?<mail_id>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\}$" }
				id => "message-NAC_LOG:12"
				add_field => {
					"[event][id]" => "NAC_LOG:12"
					"[rsa][message][id1]" => "NAC_LOG:12"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:11
		# line in RSA: <shost>, "<fld2>", Irresolvable, <fld3>, <saddr>, <smacaddr>, {{<result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<fld2>[^\"]*)\",[\s]+Irresolvable,[\s]+(?<fld3>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\}$" }
				id => "message-NAC_LOG:11"
				add_field => {
					"[event][id]" => "NAC_LOG:11"
					"[rsa][message][id1]" => "NAC_LOG:11"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:04
		# line in RSA: {<shost>, "<user_lname>, <user_fname>"| <shost>, "<fld1>"}, <mail_id>, <fld5>, <saddr>, <smacaddr>, {{<result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<shost>[^,]*),[\s]+\"(?<user_lname>[^,]*),[\s]+(?<user_fname>[^\"]*)\"|[\s]*(?<shost>[^,]*),[\s]+\"(?<fld1>[^\"]*)\"),[\s]+(?<mail_id>[^,]*),[\s]+(?<fld5>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\}$" }
				id => "message-NAC_LOG:04"
				add_field => {
					"[event][id]" => "NAC_LOG:04"
					"[rsa][message][id1]" => "NAC_LOG:04"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:03
		# line in RSA: <shost>, "<fld2>", <fld3>, <saddr>, <smacaddr>, {{<result>}, MTS:<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<shost>[^,]*),[\s]+\"(?<fld2>[^\"]*)\",[\s]+(?<fld3>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<smacaddr>[^,]*),[\s]+\{(?<result>[^\}]*)\},[\s]+MTS:(?<info>.*)$" }
				id => "message-NAC_LOG:03"
				add_field => {
					"[event][id]" => "NAC_LOG:03"
					"[rsa][message][id1]" => "NAC_LOG:03"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:01
		# line in RSA: {<shost>, "<user_lname>, <user_fname>"| <shost>, "<fld2>"}, <mail_id>, <username>, <saddr>, <fld1>, <result> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<shost>[^,]*),[\s]+\"(?<user_lname>[^,]*),[\s]+(?<user_fname>[^\"]*)\"|[\s]*(?<shost>[^,]*),[\s]+\"(?<fld2>[^\"]*)\"),[\s]+(?<mail_id>[^,]*),[\s]+(?<username>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<fld1>[^,]*),[\s]+(?<result>[^\s]*)[\s]+$" }
				id => "message-NAC_LOG:01"
				add_field => {
					"[event][id]" => "NAC_LOG:01"
					"[rsa][message][id1]" => "NAC_LOG:01"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG:02
		# line in RSA: <shost>, "<user_lname>, <user_fname>", <username>, <saddr>, <fld1>, <result> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{shost}, \"%{user_lname}, %{user_fname}\", %{username}, %{saddr}, %{fld1}, %{result}" }
				id => "message-NAC_LOG:02"
				add_field => {
					"[event][id]" => "NAC_LOG:02"
					"[rsa][message][id1]" => "NAC_LOG:02"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_LOG
		# line in RSA: <shost>, "<username>",<saddr>,<smacaddr>,<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{shost}, \"%{username}\",%{saddr},%{smacaddr},%{result}" }
				id => "message-NAC_LOG"
				add_field => {
					"[event][id]" => "NAC_LOG"
					"[rsa][message][id1]" => "NAC_LOG"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "NAC_Policy_Log" {
		# MESSAGE NAC_Policy_Log:01
		# line in RSA: NAC Policy Log: Source:<saddr>, Rule:<policyname>, Match:{"<rulename>"|<rulename>}, Category:<fld2>, Details:<info> {Reason:<result> Duration:<fld9>|Reason:<result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NAC[\s]+Policy[\s]+Log:[\s]+Source:(?<saddr>[^,]*),[\s]+Rule:(?<policyname>[^,]*),[\s]+Match:(\"(?<rulename>[^\"]*)\"|(?<rulename>[^,]*)),[\s]+Category:(?<fld2>[^,]*),[\s]+Details:(?<info>[^\s]*)[\s]+(Reason:(?<result>[^\s]*)[\s]+Duration:(?<fld9>.*)|Reason:(?<result>.*))$" }
				id => "message-NAC_Policy_Log:01"
				add_field => {
					"[event][id]" => "NAC_Policy_Log:01"
					"[rsa][message][id1]" => "NAC_Policy_Log:01"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:mm:ss" ] }
			}
		}
		# MESSAGE NAC_Policy_Log:02
		# line in RSA: NAC Policy Log: Source:<saddr>, Rule: Policy "<policyname>"  Rule "<rulename>" , Details: Executing action -<action>Details: Send Message to Syslog: Message to Syslog : device_category="<category>", ip="<fld1>", mac="<smacaddr>", dns_hn="<fld3>", netbios_hn="<fld4>", dhcp_hn=<fld5>, network_fn="<fld6>", os_fingerprint="<os>", os_cpe="<fld7>", is_manageable="<fld8>", geoloc="<fld9>", nic_vendor="<fld10>", compliance="<fld11>", online="<fld12>", system_desc="<fld13>", div="<fld14>", segment="<fld15>",, Message Identity :<id>, Syslog Server Address :<daddr>, Syslog Server Port :<dport>, Syslog Server Protocol :<protocol>, Syslog Facility :<fld16>, Syslog Severity :<severity>; Schedule:<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NAC Policy Log: Source:%{saddr}, Rule: Policy \"%{policyname}\"  Rule \"%{rulename}\" , Details: Executing action -%{action}Details: Send Message to Syslog: Message to Syslog : device_category=\"%{category}\", ip=\"%{fld1}\", mac=\"%{smacaddr}\", dns_hn=\"%{fld3}\", netbios_hn=\"%{fld4}\", dhcp_hn=%{fld5}, network_fn=\"%{fld6}\", os_fingerprint=\"%{os}\", os_cpe=\"%{fld7}\", is_manageable=\"%{fld8}\", geoloc=\"%{fld9}\", nic_vendor=\"%{fld10}\", compliance=\"%{fld11}\", online=\"%{fld12}\", system_desc=\"%{fld13}\", div=\"%{fld14}\", segment=\"%{fld15}\",, Message Identity :%{id}, Syslog Server Address :%{daddr}, Syslog Server Port :%{dport}, Syslog Server Protocol :%{protocol}, Syslog Facility :%{fld16}, Syslog Severity :%{severity}; Schedule:%{event_description}" }
				id => "message-NAC_Policy_Log:02"
				add_field => {
					"[event][id]" => "NAC_Policy_Log:02"
					"[rsa][message][id1]" => "NAC_Policy_Log:02"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_Policy_Log:03
		# line in RSA: NAC Policy Log: Source: <saddr>, Rule: Policy "<policyname>"  Rule "<rulename>" , Details: Action completed  - <action>: Message to Syslog : device_category="<category>",ip="<fld1>",mac="<smacaddr>",dns_hn="<fld2>",netbios_domain="<domain>",netbios_hn="<fld4>",network_fn="<fld5>",os_fingerprint="<os>",os_cpe="<fld6>",is_manageable="<fld7>",geoloc="<fld8>",nic_vendor="<fld9>",compliance="<fld10>",online="<fld11>",system_desc="<fld12>",div="<fld13>",id="<id1>", segment="<fld14>", Message Identity : <id>, Syslog Server Address : <daddr>, Syslog Server Port : <dport>, Syslog Server Protocol : <protocol>, Syslog Facility : <fld15>, Syslog Severity : <severity>; Schedule: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NAC Policy Log: Source: %{saddr}, Rule: Policy \"%{policyname}\"  Rule \"%{rulename}\" , Details: Action completed  - %{action}: Message to Syslog : device_category=\"%{category}\",ip=\"%{fld1}\",mac=\"%{smacaddr}\",dns_hn=\"%{fld2}\",netbios_domain=\"%{domain}\",netbios_hn=\"%{fld4}\",network_fn=\"%{fld5}\",os_fingerprint=\"%{os}\",os_cpe=\"%{fld6}\",is_manageable=\"%{fld7}\",geoloc=\"%{fld8}\",nic_vendor=\"%{fld9}\",compliance=\"%{fld10}\",online=\"%{fld11}\",system_desc=\"%{fld12}\",div=\"%{fld13}\",id=\"%{id1}\", segment=\"%{fld14}\", Message Identity : %{id}, Syslog Server Address : %{daddr}, Syslog Server Port : %{dport}, Syslog Server Protocol : %{protocol}, Syslog Facility : %{fld15}, Syslog Severity : %{severity}; Schedule: %{event_description}" }
				id => "message-NAC_Policy_Log:03"
				add_field => {
					"[event][id]" => "NAC_Policy_Log:03"
					"[rsa][message][id1]" => "NAC_Policy_Log:03"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NAC_Policy_Log
		# line in RSA: NAC Policy Log: Source:<saddr>, Rule:<policyname>, {Details:<info> Reason:<result> Duration:<fld9>|Details:<info>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NAC[\s]+Policy[\s]+Log:[\s]+Source:(?<saddr>[^,]*),[\s]+Rule:(?<policyname>[^,]*),[\s]+(Details:(?<info>[^\s]*)[\s]+Reason:(?<result>[^\s]*)[\s]+Duration:(?<fld9>.*)|Details:(?<info>.*))$" }
				id => "message-NAC_Policy_Log"
				add_field => {
					"[event][id]" => "NAC_Policy_Log"
					"[rsa][message][id1]" => "NAC_Policy_Log"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:mm:ss" ] }
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA: System statistics: CPU usage: <fld11>, Available memory : <fld12>, Used memory: <fld13>, Available swap: <fld14>, Used swap: <fld15>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "System statistics: CPU usage: %{fld11}, Available memory : %{fld12}, Used memory: %{fld13}, Available swap: %{fld14}, Used swap: %{fld15}" }
			id => "msgParserId19"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA: Application status: <fld11>;Connected clients: <fld12>;Hosts: <fld14>;Attacked Services: <fld15>;Installed Plugins: <fld16>;Stopped Plugins: <fld17>;Assigned ips: <fld18>
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "Application status: %{fld11};Connected clients: %{fld12};Hosts: %{fld14};Attacked Services: %{fld15};Installed Plugins: %{fld16};Stopped Plugins: %{fld17};Assigned ips: %{fld18}" }
			id => "msgParserId20"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA:  Uptime <duration_string> seconds
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "Uptime %{duration_string} seconds" }
			id => "msgParserId21"
			add_field => {
				"event_description" => "uptime in seconds"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Log" {
		# MESSAGE Log
		# line in RSA:  Log: Login success by <fld11>. Details: User <username> logged in from <hostip>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Login success by %{fld11}. Details: User %{username} logged in from %{hostip}. Severity: %{severity}" }
				id => "message-Log"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Log"
					"[rsa][message][id1]" => "Log"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:01
		# line in RSA:  Log: CounterACT Appliance stopped by user. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: CounterACT Appliance stopped by user. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:01"
				add_field => {
				"event_description" => "CounterACT Appliance stopped by user"
					"[event][id]" => "Log:01"
					"[rsa][message][id1]" => "Log:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:02
		# line in RSA:  Log: PE params auto-refresh. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: PE params auto-refresh. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:02"
				add_field => {
				"event_description" => "PE params auto-refresh"
					"[event][id]" => "Log:02"
					"[rsa][message][id1]" => "Log:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:03
		# line in RSA:  Log: The Legitimate Traffic Rule Reset action completed successfully. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: The Legitimate Traffic Rule Reset action completed successfully. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:03"
				add_field => {
				"event_description" => "The Legitimate Traffic Rule Reset action completed successfully"
					"[event][id]" => "Log:03"
					"[rsa][message][id1]" => "Log:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:04
		# line in RSA:  Log: Database vacuum started. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Database vacuum started. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:04"
				add_field => {
				"event_description" => "Database vacuum started"
					"[event][id]" => "Log:04"
					"[rsa][message][id1]" => "Log:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:05
		# line in RSA:  Log: Database vacuumed. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Database vacuumed. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:05"
				add_field => {
				"event_description" => "Database vacuumed"
					"[event][id]" => "Log:05"
					"[rsa][message][id1]" => "Log:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:06
		# line in RSA:  Log: The demo license is going to expire. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: The demo license is going to expire. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:06"
				add_field => {
				"event_description" => "The demo license is going to expire"
					"[event][id]" => "Log:06"
					"[rsa][message][id1]" => "Log:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:07
		# line in RSA:  Log: CounterACT Appliance backup. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: CounterACT Appliance backup. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:07"
				add_field => {
				"event_description" => "CounterACT Appliance backup"
					"[event][id]" => "Log:07"
					"[rsa][message][id1]" => "Log:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:08
		# line in RSA:  Log: Symmetric traffic test failed. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Symmetric traffic test failed. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:08"
				add_field => {
				"event_description" => "Symmetric traffic test failed"
					"[event][id]" => "Log:08"
					"[rsa][message][id1]" => "Log:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:09
		# line in RSA:  Log: Symmetric traffic test succeeded. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Symmetric traffic test succeeded. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:09"
				add_field => {
				"event_description" => "Symmetric traffic test succeeded"
					"[event][id]" => "Log:09"
					"[rsa][message][id1]" => "Log:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:10
		# line in RSA:  Log: Valid Mirror Traffic. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Valid Mirror Traffic. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:10"
				add_field => {
				"event_description" => "Valid Mirror Traffic"
					"[event][id]" => "Log:10"
					"[rsa][message][id1]" => "Log:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:11
		# line in RSA:  Log: Low Mirror Traffic. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Low Mirror Traffic. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:11"
				add_field => {
				"event_description" => "Low Mirror Traffic"
					"[event][id]" => "Log:11"
					"[rsa][message][id1]" => "Log:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:12
		# line in RSA:  Log: Enterprise Manager backup. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Enterprise Manager backup. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:12"
				add_field => {
				"event_description" => "Enterprise Manager backup"
					"[event][id]" => "Log:12"
					"[rsa][message][id1]" => "Log:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:13
		# line in RSA:  Log: Built-in firewall reset. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Built-in firewall reset. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:13"
				add_field => {
				"event_description" => "Built-in firewall reset"
					"[event][id]" => "Log:13"
					"[rsa][message][id1]" => "Log:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:14
		# line in RSA:  Log: Connected to CounterACT Appliance at <hostip>. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Connected to CounterACT Appliance at %{hostip}. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:14"
				add_field => {
				"event_description" => "Connected to CounterACT Appliance"
					"[event][id]" => "Log:14"
					"[rsa][message][id1]" => "Log:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:15
		# line in RSA:  Log: Failed to connect to CounterACT Appliance at <hostip>. Details: <info>. Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log: Failed to connect to CounterACT Appliance at %{hostip}. Details: %{info}. Severity: %{severity}" }
				id => "message-Log:15"
				add_field => {
				"event_description" => " Failed to connect to CounterACT Appliance"
					"[event][id]" => "Log:15"
					"[rsa][message][id1]" => "Log:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:16
		# line in RSA: <context>Details: Connection Status:<result>. Type: <network_service>, Source:<saddr>, Target:<daddr>, Vendor: <product>. Severity:<severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{context}Details: Connection Status:%{result}. Type: %{network_service}, Source:%{saddr}, Target:%{daddr}, Vendor: %{product}. Severity:%{severity}" }
				id => "message-Log:16"
				add_field => {
				"ec_subject" => "User"
					"[event][id]" => "Log:16"
					"[rsa][message][id1]" => "Log:16"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:mm:ss" ] }
			}
		}
		# MESSAGE Log:17
		# line in RSA: <context>Details: Login Status :<result>. Type: <network_service>, Source:<saddr>, Target:<daddr>, Vendor: <product>. Severity:<severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{context}Details: Login Status :%{result}. Type: %{network_service}, Source:%{saddr}, Target:%{daddr}, Vendor: %{product}. Severity:%{severity}" }
				id => "message-Log:17"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Log:17"
					"[rsa][message][id1]" => "Log:17"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:mm:ss" ] }
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA:  Port bite. Source: <saddr>. Destination: <daddr>:<dport>
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "Port bite. Source: %{saddr}. Destination: %{daddr}:%{dport}" }
			id => "msgParserId40"
			add_field => {
				"event_description" => "port bite"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA:  Scan event. Source: <saddr>
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "Scan event. Source: %{saddr}" }
			id => "msgParserId41"
			add_field => {
				"event_description" => "scan event"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId42
	# line in RSA:  Manual event. Source: <saddr>
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "Manual event. Source: %{saddr}" }
			id => "msgParserId42"
			add_field => {
				"event_description" => "manual event"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId43
	# line in RSA:  User <username> changed <fld1>. Details: <info> 
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "User %{username} changed %{fld1}. Details: %{info}" }
			id => "msgParserId43"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Configuration"
				"event_description" => "user changed configuration"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId44
	# line in RSA: Windows,<username>,<fld1>,<fld2>,<fld3>,<fld4>,<fld5>,<info>
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "Windows,%{username},%{fld1},%{fld2},%{fld3},%{fld4},%{fld5},%{info}" }
			id => "msgParserId44"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId45
	# line in RSA: Host: <hostip>, Target: <daddr>, Time <fld1>, Service: <fld2>/<service>, Is Virtual Firewall blocking rule: <fld3>, Reason: <rulename>
	else if [logstash][msgparser][id] == "msgParserId45" {
		dissect {
			mapping => { "message" => "Host: %{hostip}, Target: %{daddr}, Time %{fld1}, Service: %{fld2}/%{service}, Is Virtual Firewall blocking rule: %{fld3}, Reason: %{rulename}" }
			id => "msgParserId45"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:mm:ss" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[result]"
		destination => "[event_cat]"
		dictionary => {
			"Closed connection" => "1801030000"
			"Failed to connect" => "1801010000"
			"Lost connection" => "1801010000"
			"Successful connection" => "1801020000"
		}
		fallback => "1901000000"
		override => true
	}
}
filter {
	translate {
		field => "[event_cat]"
		destination => "[event_cat_name]"
		dictionary => {
			"1801010000" => "Network.Connections.Errors"
			"1801020000" => "Network.Connections.Successful"
			"1801030000" => "Network.Connections.Terminations"
		}
		fallback => "Other.Default"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-forescoutcounteractmsg.json"
#			template_name => "forescoutcounteract_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ciscoacsxp"
			"[observer][name]" => "Cisco Secure ACS Express"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %ACSXP-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%ACSXP-%{level}-%{messageid}: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_ciscoacsxpmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "acsxp_server" {
		# MESSAGE acsxp_server:04
		# line in RSA: Server: Authentication for user <fld5> failed for reason = <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server: Authentication for user %{fld5} failed for reason = %{result}" }
				id => "message-acsxp_server:04"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "acsxp_server:04"
					"[rsa][message][id1]" => "acsxp_server:04"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE acsxp_server:08
		# line in RSA: Configuration: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuration: %{info}" }
				id => "message-acsxp_server:08"
				add_field => {
					"[event][id]" => "acsxp_server:08"
					"[rsa][message][id1]" => "acsxp_server:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE acsxp_server:07
		# line in RSA: Server: Dropping packets
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server: Dropping packets" }
				id => "message-acsxp_server:07"
				add_field => {
					"[event][id]" => "acsxp_server:07"
					"[rsa][message][id1]" => "acsxp_server:07"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE acsxp_server:06
		# line in RSA: Server: Service <service> has no active remote servers available
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server: Service %{service} has no active remote servers available" }
				id => "message-acsxp_server:06"
				add_field => {
					"[event][id]" => "acsxp_server:06"
					"[rsa][message][id1]" => "acsxp_server:06"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE acsxp_server:05
		# line in RSA: Server: AD Agent <authmethod> Failed for user: <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server: AD Agent %{authmethod} Failed for user: %{username}" }
				id => "message-acsxp_server:05"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "acsxp_server:05"
					"[rsa][message][id1]" => "acsxp_server:05"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE acsxp_server:03
		# line in RSA: Protocol: Request from  <saddr>: User <username> rejected <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Protocol: Request from  %{saddr}: User %{username} rejected %{result}" }
				id => "message-acsxp_server:03"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "acsxp_server:03"
					"[rsa][message][id1]" => "acsxp_server:03"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE acsxp_server:02
		# line in RSA: Protocol: Request from  <saddr>: User <username> <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Protocol: Request from  %{saddr}: User %{username} %{disposition}" }
				id => "message-acsxp_server:02"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "acsxp_server:02"
					"[rsa][message][id1]" => "acsxp_server:02"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE acsxp_server:01
		# line in RSA: Protocol: Packet from  <saddr>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Protocol: Packet from  %{saddr}: %{info}" }
				id => "message-acsxp_server:01"
				add_field => {
					"[event][id]" => "acsxp_server:01"
					"[rsa][message][id1]" => "acsxp_server:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "acsxp_agent_server" {
		# MESSAGE acsxp_agent_server:01
		# line in RSA: Server: remote user <username> - authenticated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server: remote user %{username} - authenticated" }
				id => "message-acsxp_agent_server:01"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "acsxp_agent_server:01"
					"[rsa][message][id1]" => "acsxp_agent_server:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE acsxp_agent_server
		# line in RSA: Server: server agent <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server: server agent %{info}" }
				id => "message-acsxp_agent_server"
				add_field => {
					"[event][id]" => "acsxp_agent_server"
					"[rsa][message][id1]" => "acsxp_agent_server"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: Configuration: <info>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "Configuration: %{info}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_ciscoacsxpmsg.json"
#			template_name => "ciscoacsxp_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "oracleiplanetweb"
			"[observer][name]" => "Oracle iPlanet Web Server"
			"[observer][type]" => "Web Logs"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %ORACLEIPLANETWEB-<hfld29>: <hshost> <husername> [<hdatetime> <hfld25>] "<hfld31>" <hresultcode> <hsbytes> "<hweb_referer>" "<huser_agent>" <messageid> <!payload:hshost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ORACLEIPLANETWEB\-(?<hfld29>[^:]*):[\s]+(?<message>(?<hshost>[^\s]*)[\s]+(?<husername>[^\s]*)[\s]+\[(?<hdatetime>[^\s]*)[\s]+(?<hfld25>[^\]]*)\][\s]+\"(?<hfld31>[^\"]*)\"[\s]+(?<hresultcode>[^\s]*)[\s]+(?<hsbytes>[^\s]*)[\s]+\"(?<hweb_referer>[^\"]*)\"[\s]+\"(?<huser_agent>[^\"]*)\"[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %ORACLEIPLANETWEB-<hfld29>: [<hdatetime>] <messageid> (<hfld30>): <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ORACLEIPLANETWEB\-(?<hfld29>[^:]*):[\s]+\[(?<hdatetime>[^\]]*)\][\s]+(?<message>(?<messageid>[^\s]*)[\s]+\((?<hfld30>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %ORACLEIPLANETWEB-<hfld29>: <messageid>=<hfld40> [%SYSDATE%] <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ORACLEIPLANETWEB\-(?<hfld29>[^:]*):[\s]+(?<message>(?<messageid>[^=]*)=(?<hfld40>[^\s]*)[\s]+\[%SYSDATE%\][\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-oracleiplanetwebmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  <shost> <username> [<fld26> <fld25>] "<fld31>" <resultcode> <sbytes> "<web_referer>" "<user_agent>" <web_method> <url> <web_query> <protocol> <dhost>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{shost} %{username} [%{fld26} %{fld25}] \"%{fld31}\" %{resultcode} %{sbytes} \"%{web_referer}\" \"%{user_agent}\" %{web_method} %{url} %{web_query} %{protocol} %{dhost}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld26}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "info" {
		# MESSAGE info
		# line in RSA:  <severity> (<process_id>): for host <shost> trying to <web_method> <url>, <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity} (%{process_id}): for host %{shost} trying to %{web_method} %{url}, %{result}" }
				id => "message-info"
				add_field => {
					"[event][id]" => "info"
					"[rsa][message][id1]" => "info"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE info:01
		# line in RSA:  <severity> (<process_id>): <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity} (%{process_id}): %{result}" }
				id => "message-info:01"
				add_field => {
					"[event][id]" => "info:01"
					"[rsa][message][id1]" => "info:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "warning" {
		# MESSAGE warning
		# line in RSA:  <severity> (<process_id>): for host <shost> trying to <web_method> <url>, <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity} (%{process_id}): for host %{shost} trying to %{web_method} %{url}, %{result}" }
				id => "message-warning"
				add_field => {
					"[event][id]" => "warning"
					"[rsa][message][id1]" => "warning"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE warning:01
		# line in RSA:  <severity> (<process_id>): Stats connection with instance <instance> may be lost
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity} (%{process_id}): Stats connection with instance %{instance} may be lost" }
				id => "message-warning:01"
				add_field => {
					"[event][id]" => "warning:01"
					"[rsa][message][id1]" => "warning:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "failure" {
		# MESSAGE failure
		# line in RSA:  <severity> (<process_id>): for host <shost> trying to <web_method> <url>, <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity} (%{process_id}): for host %{shost} trying to %{web_method} %{url}, %{result}" }
				id => "message-failure"
				add_field => {
					"[event][id]" => "failure"
					"[rsa][message][id1]" => "failure"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE failure:01
		# line in RSA:  <severity> (<process_id>): <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity} (%{process_id}): %{result}" }
				id => "message-failure:01"
				add_field => {
					"[event][id]" => "failure:01"
					"[rsa][message][id1]" => "failure:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "config" {
		# MESSAGE config
		# line in RSA:  <severity> (<process_id>): for host <shost> trying to <web_method> <url>, <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity} (%{process_id}): for host %{shost} trying to %{web_method} %{url}, %{result}" }
				id => "message-config"
				add_field => {
					"[event][id]" => "config"
					"[rsa][message][id1]" => "config"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE config:01
		# line in RSA:  <severity> (<process_id>): <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity} (%{process_id}): %{result}" }
				id => "message-config:01"
				add_field => {
					"[event][id]" => "config:01"
					"[rsa][message][id1]" => "config:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA:  <severity> (<process_id>): for host <shost> trying to <web_method> <url>, <result>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{severity} (%{process_id}): for host %{shost} trying to %{web_method} %{url}, %{result}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:  format=<fld40> [%SYSDATE%] <fld41>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "format=%{fld40} [%SYSDATE%] %{fld41}" }
			id => "msgParserId4"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA:  <severity> (<process_id>): <result>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{severity} (%{process_id}): %{result}" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA:  <shost> <username> [<fld26> <fld25>] "<fld31>" <resultcode> <sbytes> "<web_referer>" "<fld32>" <web_method> <url> <fld33> <protocol> <dhost>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{shost} %{username} [%{fld26} %{fld25}] \"%{fld31}\" %{resultcode} %{sbytes} \"%{web_referer}\" \"%{fld32}\" %{web_method} %{url} %{fld33} %{protocol} %{dhost}" }
			id => "msgParserId5"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld26}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA:  <shost> <username> [<fld26> <fld25>] "<fld31>" <resultcode> <sbytes> "<fld32>" "<fld33>" - / - <protocol> <dhost>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{shost} %{username} [%{fld26} %{fld25}] \"%{fld31}\" %{resultcode} %{sbytes} \"%{fld32}\" \"%{fld33}\" - / - %{protocol} %{dhost}" }
			id => "msgParserId6"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld26}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-oracleiplanetwebmsg.json"
#			template_name => "oracleiplanetweb_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "guardium"
			"[observer][name]" => "Guardium"
			"[observer][type]" => "Application Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0002
	# line in RSA: <month> <day> <time> <hserver> <hfld2>[<hfld1>]: <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hserver} %{hfld2}[%{hfld1}]: %{messageid}: %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: <month> <day> <time> <hserver> <messageid>[<hfld1>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hserver} %{messageid}[%{hfld1}]: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <month> <day> <time> <hserver> <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hserver} %{messageid}: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-guardiummsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: rule-id=<rule>^^category=<category>^^classification=<fld3>^^severity=<severity>^^session-start-time=<event_time_string>^^client-hostname=<shost>^^client-ip=<saddr>^^server-type=<obj_type>^^server-ip=<daddr>^^src-program=<application>^^os-user=<c_username>^^db-user=<username>^^app-user=<fld4>^^service-name=<service>^^req-type=<application>^^rule-desc=<rulename>^^sql=<action>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "rule-id=%{rule}^^category=%{category}^^classification=%{fld3}^^severity=%{severity}^^session-start-time=%{event_time_string}^^client-hostname=%{shost}^^client-ip=%{saddr}^^server-type=%{obj_type}^^server-ip=%{daddr}^^src-program=%{application}^^os-user=%{c_username}^^db-user=%{username}^^app-user=%{fld4}^^service-name=%{service}^^req-type=%{application}^^rule-desc=%{rulename}^^sql=%{action}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{event_time_string}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "guard_sender" {
		# MESSAGE GUARD_SENDER_POLICY_VIOLATION:01
		# line in RSA: Alert based on rule ID <rulename>|Category: <category>|Classification: <fld3>|Severity: <severity>|Rule #: <rule> [<fld77>]|Request Info: [Session start:<fld12> <fld13>]|Server Type: <fld2>|Client IP: <saddr>|ServerIP: <daddr>|Client PORT: <sport>|Server Port: <dport>|Net Protocol: <protocol>|DB Name: <db_name>|DB Protocol: <protocol_detail>|DB Protocol Version: <version>|DB User: <username>|Application User Name: <fld4>|Source Program: <application>|Request Type: <content_type>|Last Error: <result>|SQL: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert based on rule ID %{rulename}|Category: %{category}|Classification: %{fld3}|Severity: %{severity}|Rule #: %{rule} [%{fld77}]|Request Info: [Session start:%{fld12} %{fld13}]|Server Type: %{fld2}|Client IP: %{saddr}|ServerIP: %{daddr}|Client PORT: %{sport}|Server Port: %{dport}|Net Protocol: %{protocol}|DB Name: %{db_name}|DB Protocol: %{protocol_detail}|DB Protocol Version: %{version}|DB User: %{username}|Application User Name: %{fld4}|Source Program: %{application}|Request Type: %{content_type}|Last Error: %{result}|SQL: %{action}" }
				id => "message-GUARD_SENDER_POLICY_VIOLATION:01"
				add_field => {
				"event_description" => "Alert based on rule ID"
					"[event][id]" => "GUARD_SENDER_POLICY_VIOLATION:01"
					"[rsa][message][id1]" => "GUARD_SENDER_POLICY_VIOLATION:01"
					"[event][categoryid]" => "1502010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_POLICY_VIOLATION
		# line in RSA: Alert based on rule ID <rulename>|Category: <category>|Classification: <fld3>|Severity: <severity>|Rule #: <rule> [<fld77>]|Request Info: [Session start:<info>]|Server Type: <fld2>|Client IP: <saddr>|ServerIP: <daddr>|Client PORT: <sport>|Server Port: <dport>|Net Protocol: <protocol>|DB Protocol: <protocol_detail>|DB Protocol Version: <version>|DB User: <username>|Application User Name: <fld4>|Source Program: <application>|Request Type: <content_type>|Last Error: <result>|SQL: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert based on rule ID %{rulename}|Category: %{category}|Classification: %{fld3}|Severity: %{severity}|Rule #: %{rule} [%{fld77}]|Request Info: [Session start:%{info}]|Server Type: %{fld2}|Client IP: %{saddr}|ServerIP: %{daddr}|Client PORT: %{sport}|Server Port: %{dport}|Net Protocol: %{protocol}|DB Protocol: %{protocol_detail}|DB Protocol Version: %{version}|DB User: %{username}|Application User Name: %{fld4}|Source Program: %{application}|Request Type: %{content_type}|Last Error: %{result}|SQL: %{action}" }
				id => "message-GUARD_SENDER_POLICY_VIOLATION"
				add_field => {
				"event_description" => "Alert based on rule ID"
					"[event][id]" => "GUARD_SENDER_POLICY_VIOLATION"
					"[rsa][message][id1]" => "GUARD_SENDER_POLICY_VIOLATION"
					"[event][categoryid]" => "1502010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_POLICY_VIOLATION_REPEAT
		# line in RSA: last message repeated <fld1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "last message repeated %{fld1} times" }
				id => "message-GUARD_SENDER_POLICY_VIOLATION_REPEAT"
				add_field => {
				"event_description" => "last message repeated"
					"[event][id]" => "GUARD_SENDER_POLICY_VIOLATION_REPEAT"
					"[rsa][message][id1]" => "GUARD_SENDER_POLICY_VIOLATION_REPEAT"
					"[event][categoryid]" => "1901000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_ERROR_ALERT
		# line in RSA: Alert Failed Logins to Guardium - <rulename> :  current value <trigger_val> , <trigger_desc> , query period <fld77> - <fld78>#012Alert Classification:<fld3>#012Category: <category>#012Severity: <severity>#012#012<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert Failed Logins to Guardium - %{rulename} :  current value %{trigger_val} , %{trigger_desc} , query period %{fld77} - %{fld78}#012Alert Classification:%{fld3}#012Category: %{category}#012Severity: %{severity}#012#012%{info}" }
				id => "message-GUARD_SENDER_ERROR_ALERT"
				add_field => {
				"event_description" => "Alert Failed Logins to Guardium"
					"[event][id]" => "GUARD_SENDER_ERROR_ALERT"
					"[rsa][message][id1]" => "GUARD_SENDER_ERROR_ALERT"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_THRESHOLD_ALERT
		# line in RSA: Alert Inactive STAPs Since - <rulename> :  current value <trigger_val> , <trigger_desc> , query period <fld77> - <fld78>#012Alert Classification:<fld3>#012Category: <category>#012Severity: <severity>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert Inactive STAPs Since - %{rulename} :  current value %{trigger_val} , %{trigger_desc} , query period %{fld77} - %{fld78}#012Alert Classification:%{fld3}#012Category: %{category}#012Severity: %{severity}" }
				id => "message-GUARD_SENDER_THRESHOLD_ALERT"
				add_field => {
				"event_description" => "Alert Inactive STAPs Since"
					"[event][id]" => "GUARD_SENDER_THRESHOLD_ALERT"
					"[rsa][message][id1]" => "GUARD_SENDER_THRESHOLD_ALERT"
					"[event][categoryid]" => "1604000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_NO_TRAFFIC_ALERT
		# line in RSA: Alert No Traffic - <rulename> :  current value <trigger_val> , <trigger_desc> , query period <fld77> - <fld78>#012Alert Classification:<fld3>#012Category: <category>#012Severity: <severity>#012#012<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert No Traffic - %{rulename} :  current value %{trigger_val} , %{trigger_desc} , query period %{fld77} - %{fld78}#012Alert Classification:%{fld3}#012Category: %{category}#012Severity: %{severity}#012#012%{info}" }
				id => "message-GUARD_SENDER_NO_TRAFFIC_ALERT"
				add_field => {
				"event_description" => "Alert No Traffic"
					"[event][id]" => "GUARD_SENDER_NO_TRAFFIC_ALERT"
					"[rsa][message][id1]" => "GUARD_SENDER_NO_TRAFFIC_ALERT"
					"[event][categoryid]" => "1604000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_ERROR:04
		# line in RSA: Alert based on rule ID <rulename>#015#012Category: <category> Classification: <fld3> Severity <severity>#015#012Rule # <rule> [<fld77>]#015#012Request Info: [ Session start:<info> Server Type: <fld2> Client IP <saddr> ServerIP: <daddr> Client PORT: <sport> Server Port: <dport> Net Protocol: <protocol> DB Protocol: <protocol_detail> DB Protocol Version: <version> DB User: <username>#015#012Application User Name <fld4>#015#012Source Program: <application> Authorization Code: <fld5> Request Type: <content_type> Last Error: <result>#015#012SQL: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert based on rule ID %{rulename}#015#012Category: %{category} Classification: %{fld3} Severity %{severity}#015#012Rule # %{rule} [%{fld77}]#015#012Request Info: [ Session start:%{info} Server Type: %{fld2} Client IP %{saddr} ServerIP: %{daddr} Client PORT: %{sport} Server Port: %{dport} Net Protocol: %{protocol} DB Protocol: %{protocol_detail} DB Protocol Version: %{version} DB User: %{username}#015#012Application User Name %{fld4}#015#012Source Program: %{application} Authorization Code: %{fld5} Request Type: %{content_type} Last Error: %{result}#015#012SQL: %{action}" }
				id => "message-GUARD_SENDER_ERROR:04"
				add_field => {
				"event_description" => "Alert based on rule ID"
					"[event][id]" => "GUARD_SENDER_ERROR:04"
					"[rsa][message][id1]" => "GUARD_SENDER_ERROR:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_ERROR:03
		# line in RSA: Alert based on rule ID <rulename>#015#012Category: <category> Classification: <fld3> Severity <severity>#015#012Rule # <rule> [<fld77>]#015#012Request Info: [ Session start:<info> Server Type: <fld2> Client IP <saddr> ServerIP: <daddr> Client PORT: <sport> Server Port: <dport> Net Protocol: <protocol> DB Protocol: <protocol_detail> DB Protocol Version: <version> DB User: <username>#015#012Application User Name <fld4>#015#012Source Program: <application> Authorization Code: <fld5> Request Type: <content_type> Last Error: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert based on rule ID %{rulename}#015#012Category: %{category} Classification: %{fld3} Severity %{severity}#015#012Rule # %{rule} [%{fld77}]#015#012Request Info: [ Session start:%{info} Server Type: %{fld2} Client IP %{saddr} ServerIP: %{daddr} Client PORT: %{sport} Server Port: %{dport} Net Protocol: %{protocol} DB Protocol: %{protocol_detail} DB Protocol Version: %{version} DB User: %{username}#015#012Application User Name %{fld4}#015#012Source Program: %{application} Authorization Code: %{fld5} Request Type: %{content_type} Last Error: %{result}" }
				id => "message-GUARD_SENDER_ERROR:03"
				add_field => {
				"event_description" => "Alert based on rule ID"
					"[event][id]" => "GUARD_SENDER_ERROR:03"
					"[rsa][message][id1]" => "GUARD_SENDER_ERROR:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_ERROR:02
		# line in RSA: Alert based on rule ID <rulename>#015#012Category: <category> Classification: <fld3> Severity <severity>#015#012Rule # <rule> [<fld77>]#015#012Request Info: [ Session start:<info> Server Type: <fld2> Client IP <saddr> ServerIP: <daddr> Client PORT: <sport> Server Port: <dport> Net Protocol: <protocol> DB Protocol: <protocol_detail> DB Protocol Version: <version> DB User: <username>#015#012Application User Name <fld4>#015#012Source Program: <application> Authorization Code: <fld5> Request Type: <content_type>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert based on rule ID %{rulename}#015#012Category: %{category} Classification: %{fld3} Severity %{severity}#015#012Rule # %{rule} [%{fld77}]#015#012Request Info: [ Session start:%{info} Server Type: %{fld2} Client IP %{saddr} ServerIP: %{daddr} Client PORT: %{sport} Server Port: %{dport} Net Protocol: %{protocol} DB Protocol: %{protocol_detail} DB Protocol Version: %{version} DB User: %{username}#015#012Application User Name %{fld4}#015#012Source Program: %{application} Authorization Code: %{fld5} Request Type: %{content_type}" }
				id => "message-GUARD_SENDER_ERROR:02"
				add_field => {
				"event_description" => "Alert based on rule ID"
					"[event][id]" => "GUARD_SENDER_ERROR:02"
					"[rsa][message][id1]" => "GUARD_SENDER_ERROR:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_ERROR:01
		# line in RSA: Alert based on rule ID <rulename>#015#012Category: <category> Classification: <fld3> Severity <severity>#015#012Rule # <rule> [<fld77>]#015#012Request Info: [ Session start:<info> Server Type: <fld2> Client IP <saddr> ServerIP: <daddr> Client PORT: <sport> Server Port: <dport> Net Protocol: <protocol> DB Protocol: <protocol_detail> DB Protocol Version: <version> DB User: <username>#015#012Application User Name <fld4>#015#012Source Program: <application> Authorization Code: <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Alert based on rule ID %{rulename}#015#012Category: %{category} Classification: %{fld3} Severity %{severity}#015#012Rule # %{rule} [%{fld77}]#015#012Request Info: [ Session start:%{info} Server Type: %{fld2} Client IP %{saddr} ServerIP: %{daddr} Client PORT: %{sport} Server Port: %{dport} Net Protocol: %{protocol} DB Protocol: %{protocol_detail} DB Protocol Version: %{version} DB User: %{username}#015#012Application User Name %{fld4}#015#012Source Program: %{application} Authorization Code: %{fld5}" }
				id => "message-GUARD_SENDER_ERROR:01"
				add_field => {
				"event_description" => "Alert based on rule ID"
					"[event][id]" => "GUARD_SENDER_ERROR:01"
					"[rsa][message][id1]" => "GUARD_SENDER_ERROR:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GUARD_SENDER_ERROR
		# line in RSA: <event_description>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}." }
				id => "message-GUARD_SENDER_ERROR"
				add_field => {
					"[event][id]" => "GUARD_SENDER_ERROR"
					"[rsa][message][id1]" => "GUARD_SENDER_ERROR"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "GuardiumSniffer" {
		# MESSAGE GuardiumSniffer
		# line in RSA:  Guardium Sniffer license verified.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Guardium Sniffer license verified." }
				id => "message-GuardiumSniffer"
				add_field => {
				"event_description" => "Guardium Sniffer license verified"
					"[event][id]" => "GuardiumSniffer"
					"[rsa][message][id1]" => "GuardiumSniffer"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GuardiumSniffer:01
		# line in RSA:  <hostname>: Started at <fld1>_<fld2>_<hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}: Started at %{fld1}_%{fld2}_%{hostip}" }
				id => "message-GuardiumSniffer:01"
				add_field => {
					"[event][id]" => "GuardiumSniffer:01"
					"[rsa][message][id1]" => "GuardiumSniffer:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GuardiumSniffer:02
		# line in RSA: subject "<event_type>", "Alert based on rule ID <rulename>|Category: <category>|Classification: <fld3>|Severity: <severity>|Rule #: <rule> [<fld77>]|Request Info: [Session start:<info>]|Server Type: <fld2>|Client IP: <saddr>|ServerIP: <daddr>|Client PORT: <sport>|Server Port: <dport>|Net Protocol: <protocol>|DB Name: <db_name>|DB Protocol: <protocol_detail>|DB Protocol Version: <version>|DB User: <username>|Application User Name: <fld4>|Source Program: <application>|Request Type: <content_type>|Last Error: <result>|SQL: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "subject \"%{event_type}\", \"Alert based on rule ID %{rulename}|Category: %{category}|Classification: %{fld3}|Severity: %{severity}|Rule #: %{rule} [%{fld77}]|Request Info: [Session start:%{info}]|Server Type: %{fld2}|Client IP: %{saddr}|ServerIP: %{daddr}|Client PORT: %{sport}|Server Port: %{dport}|Net Protocol: %{protocol}|DB Name: %{db_name}|DB Protocol: %{protocol_detail}|DB Protocol Version: %{version}|DB User: %{username}|Application User Name: %{fld4}|Source Program: %{application}|Request Type: %{content_type}|Last Error: %{result}|SQL: %{action}" }
				id => "message-GuardiumSniffer:02"
				add_field => {
				"event_description" => "Alert based on rule ID"
					"[event][id]" => "GuardiumSniffer:02"
					"[rsa][message][id1]" => "GuardiumSniffer:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA:  Guardium Sniffer Started
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "Guardium Sniffer Started" }
			id => "msgParserId13"
			add_field => {
				"event_description" => "Guardium Sniffer Started"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-guardiummsg.json"
#			template_name => "guardium_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "hpprocurvesw"
			"[observer][name]" => "HP ProCurve Switch"
			"[observer][type]" => "Switch"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <month> <day> <time> <hostip> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hostip>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <month> <day> <time> <hostip> <hfld1> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hostip>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <month> <day> <time> <year> <hhost> {%%10<messageid>|<messageid>}/<hseverity>/<hfld2>:<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<year>[^\s]*)[\s]+(?<hhost>[^\s]*)[\s]+(%%10(?<messageid>[^/]*)|(?<messageid>[^/]*))/(?<hseverity>[^/]*)/(?<hfld2>[^:]*):(?<message>.*)$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_hpprocurveswmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  auth:  Invalid user name/password on <network_service> session
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "auth:  Invalid user name/password on %{network_service} session" }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_source" => "%{hostip}"
				"event_description" => "Invalid user name/password"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "FFI" {
		# MESSAGE 000002
		# line in RSA:  FFI:  port <interface>-Excessive CRC/alignment errors. <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FFI:  port %{interface}-Excessive CRC/alignment errors. %{info}." }
				id => "message-000002"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Excessive CRC/alignment errors."
					"[event][id]" => "000002"
					"[rsa][message][id1]" => "000002"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000003
		# line in RSA:  FFI:  port <interface>-Excessive undersized/giant packets. <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FFI:  port %{interface}-Excessive undersized/giant packets. %{info}." }
				id => "message-000003"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Excessive undersized/giant packets."
					"[event][id]" => "000003"
					"[rsa][message][id1]" => "000003"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000004
		# line in RSA:  FFI:  port <interface>-Excessive Broadcasts. <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FFI:  port %{interface}-Excessive Broadcasts. %{info}." }
				id => "message-000004"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Excessive Broadcasts."
					"[event][id]" => "000004"
					"[rsa][message][id1]" => "000004"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000005
		# line in RSA:  FFI:  port <interface> Duplex Mismatch. <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FFI:  port %{interface} Duplex Mismatch. %{info}." }
				id => "message-000005"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Duplex Mismatch."
					"[event][id]" => "000005"
					"[rsa][message][id1]" => "000005"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000006
		# line in RSA:  FFI:  port <interface>-Excessive late collisions.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FFI:  port %{interface}-Excessive late collisions." }
				id => "message-000006"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Excessive late collisions."
					"[event][id]" => "000006"
					"[rsa][message][id1]" => "000006"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000007
		# line in RSA:  FFI:  port <interface>-High collision or drop rate. <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FFI:  port %{interface}-High collision or drop rate. %{info}." }
				id => "message-000007"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "High collision or drop rate."
					"[event][id]" => "000007"
					"[rsa][message][id1]" => "000007"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA:  ip:  <protocol>: Unsolicited Echo Reply from <saddr>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "ip:  %{protocol}: Unsolicited Echo Reply from %{saddr}" }
			id => "msgParserId7"
			add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Unsolicited Echo Reply"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA:  lacp:  Port <interface> is in Half Duplex - <info>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "lacp:  Port %{interface} is in Half Duplex - %{info}" }
			id => "msgParserId8"
			add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Port is in Half Duplex"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "mgr" {
		# MESSAGE 000010
		# line in RSA:  mgr:  changing time
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "mgr:  changing time" }
				id => "message-000010"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_source" => "%{hostip}"
				"event_description" => "changing time"
					"[event][id]" => "000010"
					"[rsa][message][id1]" => "000010"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000011
		# line in RSA:  mgr:  new time set
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "mgr:  new time set" }
				id => "message-000011"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_source" => "%{hostip}"
				"event_description" => "new time set"
					"[event][id]" => "000011"
					"[rsa][message][id1]" => "000011"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000012
		# line in RSA:  mgr:  SME <network_service> from <saddr> - <logon_type> Mode
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "mgr:  SME %{network_service} from %{saddr} - %{logon_type} Mode" }
				id => "message-000012"
				add_field => {
				"event_source" => "%{hostip}"
					"[event][id]" => "000012"
					"[rsa][message][id1]" => "000012"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000013
		# line in RSA:  mgr:  SME <network_service> Session - <logon_type> Mode <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "mgr:  SME %{network_service} Session - %{logon_type} Mode %{result}" }
				id => "message-000013"
				add_field => {
				"event_source" => "%{hostip}"
					"[event][id]" => "000013"
					"[rsa][message][id1]" => "000013"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ports" {
		# MESSAGE 000014
		# line in RSA:  ports:  port <interface> is now off-line
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ports:  port %{interface} is now off-line" }
				id => "message-000014"
				add_field => {
				"event_source" => "%{hostip}"
					"[event][id]" => "000014"
					"[rsa][message][id1]" => "000014"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000015
		# line in RSA:  ports:  port <interface> is now on-line
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ports:  port %{interface} is now on-line" }
				id => "message-000015"
				add_field => {
				"event_source" => "%{hostip}"
					"[event][id]" => "000015"
					"[rsa][message][id1]" => "000015"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000016
		# line in RSA:  ports:  port <interface> is Blocked by <service>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ports:  port %{interface} is Blocked by %{service}" }
				id => "message-000016"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "port is Blocked"
					"[event][id]" => "000016"
					"[rsa][message][id1]" => "000016"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA:  snmp:  SNMP Security access violation from <saddr>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "snmp:  SNMP Security access violation from %{saddr}" }
			id => "msgParserId16"
			add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "SNMP Security access violation"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "SNTP" {
		# MESSAGE 000018
		# line in RSA:  SNTP:  { updated | Updated } time by <fld1> seconds
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*SNTP:[\s]+([\s]*updated[\s]+|[\s]*Updated[\s]+)[\s]+time[\s]+by[\s]+(?<fld1>[^\s]*)[\s]+seconds$" }
				id => "message-000018"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "updated time"
					"[event][id]" => "000018"
					"[rsa][message][id1]" => "000018"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000022
		# line in RSA:  SNTP:  Server not found at <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNTP:  Server not found at %{saddr}" }
				id => "message-000022"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Server not found"
					"[event][id]" => "000022"
					"[rsa][message][id1]" => "000022"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000023
		# line in RSA:  SNTP:  Unable to reach configured SNTP servers
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNTP:  Unable to reach configured SNTP servers" }
				id => "message-000023"
				add_field => {
				"event_source" => "%{hostip}"
				"event_description" => "Unable to reach configured SNTP servers"
					"[event][id]" => "000023"
					"[rsa][message][id1]" => "000023"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA:  tftp:  SENT error:<resultcode>, msg: <result>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "tftp:  SENT error:%{resultcode}, msg: %{result}" }
			id => "msgParserId19"
			add_field => {
				"event_source" => "%{hostip}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "vlan" {
		# MESSAGE 000020
		# line in RSA:  vlan:  <vlan> virtual LAN disabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "vlan:  %{vlan} virtual LAN disabled" }
				id => "message-000020"
				add_field => {
				"ec_activity" => "Disable"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_source" => "%{hostip}"
				"event_description" => "virtual LAN disabled"
					"[event][id]" => "000020"
					"[rsa][message][id1]" => "000020"
					"[event][categoryid]" => "1701070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000021
		# line in RSA:  vlan:  <vlan> virtual LAN enabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "vlan:  %{vlan} virtual LAN enabled" }
				id => "message-000021"
				add_field => {
				"ec_activity" => "Enable"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_source" => "%{hostip}"
				"event_description" => "virtual LAN enabled"
					"[event][id]" => "000021"
					"[rsa][message][id1]" => "000021"
					"[event][categoryid]" => "1701060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA:  ssh:  read error <result>
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "ssh:  read error %{result}" }
			id => "msgParserId23"
			add_field => {
				"event_source" => "%{hostip}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA: <protocol> {user failed to log in | user <username> failed to log in} from {<saddr>(<fld3>) | <saddr>} on {<terminal> due to<disposition> | <terminal> <info> | <terminal>}
	else if [logstash][msgparser][id] == "msgParserId24" {
		grok {
			match => { "message" => "^(?<protocol>[^\s]*)[\s]+(user[\s]+failed[\s]+to[\s]+log[\s]+in[\s]+|[\s]*user[\s]+(?<username>[^\s]*)[\s]+failed[\s]+to[\s]+log[\s]+in)[\s]+from[\s]+((?<saddr>[^\(]*)\((?<fld3>[^\)]*)\)[\s]+|[\s]*(?<saddr>[^\s]*))[\s]+on[\s]+((?<terminal>[^\s]*)[\s]+due[\s]+to(?<disposition>[^\s]*)[\s]+|[\s]*(?<terminal>[^\s]*)[\s]+(?<info>[^\s]*)[\s]+|[\s]*(?<terminal>.*))$" }
			id => "msgParserId24"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhost}"
				"severity" => "%{hseverity}"
				"event_description" => "User failed to log in"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time} %{year}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId25"
			add_field => {
				"event_source" => "%{hhost}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time} %{year}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_hpprocurveswmsg.json"
#			template_name => "hpprocurvesw_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "sophos"
			"[observer][name]" => "Sophos Enterprise Console"
			"[observer][type]" => "Anti Virus"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %sophoses: <hfld1>^^<hfld2>^^<hfld3>^^<messageid>^^<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%sophoses:[\s]+(?<message>(?<hfld1>[^\^]*)\^\^(?<hfld2>[^\^]*)\^\^(?<hfld3>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %SOPHOS <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SOPHOS[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %sophosestvm: <id1>^^<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%sophosestvm: %{id1}^^%{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "SOPHOSES_TVM"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %sophoses: EventID=<id1>^^<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%sophoses: EventID=%{id1}^^%{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "SOPHOSES_TVM"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %sophoses: ThreatID=<id1>^^<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%sophoses: ThreatID=%{id1}^^%{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "SOPHOSES_TVM"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_sophosmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: Infected file \"<filename>" has been <action>...
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "Infected file \\"%{filename}\" has been %{action}..." }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "File"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: On-access <event_description> \"<filename>" for user <username>..
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "On-access %{event_description} \\"%{filename}\" for user %{username}.." }
			id => "msgParserId1"
			add_field => {
				"ec_subject" => "User"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: Process '<obj_name>' <event_description> pattern '<rule>'. ...<action>. ...<info>...
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "Process '%{obj_name}' %{event_description} pattern '%{rule}'. ...%{action}. ...%{info}..." }
			id => "msgParserId2"
			add_field => {
				"ec_theme" => "TEV"
				"obj_type" => "Process"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: Virus/spyware '<threat_name>' has been detected in \"<filename>"<info>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "Virus/spyware '%{threat_name}' has been detected in \\"%{filename}\"%{info}" }
			id => "msgParserId3"
			add_field => {
				"ec_theme" => "TEV"
				"action" => "Virus Detected"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "1" {
		# MESSAGE Virus
		# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>^^<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}^^%{filename}" }
				id => "message-Virus"
				add_field => {
				"ec_theme" => "TEV"
				"threat_name" => "%{obj_name}"
				"obj_type" => "ThreatName"
					"[event][id]" => "Virus"
					"[rsa][message][id1]" => "Virus"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Virus:01
		# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}" }
				id => "message-Virus:01"
				add_field => {
				"ec_theme" => "TEV"
				"threat_name" => "%{obj_name}"
				"obj_type" => "ThreatName"
					"[event][id]" => "Virus:01"
					"[rsa][message][id1]" => "Virus:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "2" {
		# MESSAGE PUA
		# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>^^<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}^^%{filename}" }
				id => "message-PUA"
				add_field => {
				"obj_type" => "ThreatName"
					"[event][id]" => "PUA"
					"[rsa][message][id1]" => "PUA"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE PUA_01
		# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}" }
				id => "message-PUA_01"
				add_field => {
				"obj_type" => "ThreatName"
					"[event][id]" => "PUA_01"
					"[rsa][message][id1]" => "PUA_01"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "3" {
		# MESSAGE Firewall
		# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>^^<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}^^%{filename}" }
				id => "message-Firewall"
				add_field => {
				"obj_type" => "ThreatName"
					"[event][id]" => "Firewall"
					"[rsa][message][id1]" => "Firewall"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Firewall_01
		# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}" }
				id => "message-Firewall_01"
				add_field => {
				"obj_type" => "ThreatName"
					"[event][id]" => "Firewall_01"
					"[rsa][message][id1]" => "Firewall_01"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "4" {
		# MESSAGE Suspicious_Behaviour
		# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>^^<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}^^%{filename}" }
				id => "message-Suspicious_Behaviour"
				add_field => {
				"ec_theme" => "TEV"
				"obj_type" => "ThreatName"
					"[event][id]" => "Suspicious_Behaviour"
					"[rsa][message][id1]" => "Suspicious_Behaviour"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Suspicious_Behaviour_01
		# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}" }
				id => "message-Suspicious_Behaviour_01"
				add_field => {
				"ec_theme" => "TEV"
				"obj_type" => "ThreatName"
					"[event][id]" => "Suspicious_Behaviour_01"
					"[rsa][message][id1]" => "Suspicious_Behaviour_01"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>^^<filename>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}^^%{filename}" }
			id => "msgParserId8"
			add_field => {
				"ec_theme" => "TEV"
				"obj_type" => "ThreatName"
				"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <id>^^<fld53>^^<hostname>^^<fld52>^^<fld51>^^<obj_name>^^<fld10> <fld11>.<fld12>^^<action>^^<filename>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{id}^^%{fld53}^^%{hostname}^^%{fld52}^^%{fld51}^^%{obj_name}^^%{fld10} %{fld11}.%{fld12}^^%{action}^^%{filename}" }
			id => "msgParserId6"
			add_field => {
				"obj_type" => "ThreatName"
				"[logstash][fullDateTimeString]" => "%{fld10} %{fld11}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: ComputerID=<agent.id>^^EventTime=<fld1>^^AlertType=<threat_name>^^UserName=<username>^^FamilyID=<id2>^^Thumbprint=<fld2>^^ProcessName=<process>^^FileVersion=<version>^^FilePath=<directory>^^Pid=<process_id>^^Status=<disposition>^^InsertedAt=<fld4>^^ComputerName=<hostname>^^EventTypeID=<id2>^^EventTypeName=<event_type>^^Name=<hostname>^^ReportingName=<fld47>^^ActionID=<fld46>^^ActionName=<action>^^ScanTypeID=<fld45>^^ScanTypeName=<context>^^SubTypeID=<fld44>^^SubTypeName=<fld43>^^ThreatTypeID=<id2>^^ThreatTypeName=<category>^^ThreatSubTypeID=<fld42>^^ThreatSubTypeName=<fld41>^^Priority=<fld40>^^ThreatName=<threat_name>^^FullFilePath=<directory>^^CheckSum=<checksum>^^FirstDetectedAt=<fld50>^^ActionTakenName=<action>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "ComputerID=%{agent.id}^^EventTime=%{fld1}^^AlertType=%{threat_name}^^UserName=%{username}^^FamilyID=%{id2}^^Thumbprint=%{fld2}^^ProcessName=%{process}^^FileVersion=%{version}^^FilePath=%{directory}^^Pid=%{process_id}^^Status=%{disposition}^^InsertedAt=%{fld4}^^ComputerName=%{hostname}^^EventTypeID=%{id2}^^EventTypeName=%{event_type}^^Name=%{hostname}^^ReportingName=%{fld47}^^ActionID=%{fld46}^^ActionName=%{action}^^ScanTypeID=%{fld45}^^ScanTypeName=%{context}^^SubTypeID=%{fld44}^^SubTypeName=%{fld43}^^ThreatTypeID=%{id2}^^ThreatTypeName=%{category}^^ThreatSubTypeID=%{fld42}^^ThreatSubTypeName=%{fld41}^^Priority=%{fld40}^^ThreatName=%{threat_name}^^FullFilePath=%{directory}^^CheckSum=%{checksum}^^FirstDetectedAt=%{fld50}^^ActionTakenName=%{action}" }
			id => "msgParserId10"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s", "MMM d yyyy H:ma" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[fld52]"
		destination => "[event_type]"
		dictionary => {
			"1" => "Virus"
			"2" => "PUA"
			"3" => "Firewall"
			"4" => "Suspicious Behavior"
			"5" => "Suspicious_Files"
			"6" => "Controlled_App"
		}
		fallback => "undefined"
		override => true
	}
}

# Rename fields
filter {
	mutate {
		rename => {
			"agent.id" => "agent_id"
		}
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_sophosmsg.json"
#			template_name => "sophos_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

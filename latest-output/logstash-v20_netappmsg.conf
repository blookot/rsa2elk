# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "netapp"
			"[observer][name]" => "Netapp"
			"[observer][type]" => "Storage"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hweekday> <month> <day> <time> <htzone> [<hhost>: <messageid>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hweekday} %{month} %{day} %{time} %{htzone} [%{hhost}: %{messageid}]: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hday> <hyear> <htime> <htzone> [<messageid>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{hyear} %{htime} %{htzone} [%{messageid}]: %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hweekday> <month> <day> <time> <htzone> [<hhost>: <messageid> <data>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hweekday} %{month} %{day} %{time} %{htzone} [%{hhost}: %{messageid} %{data}]: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hweekday> <month> <day> <time> <htzone> [<messageid> <data>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hweekday} %{month} %{day} %{time} %{htzone} [%{messageid} %{data}]: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <month> <day> <time> [<hhost>: <messageid>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} [%{hhost}: %{messageid}]: %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0051
	# line in RSA: <month> <day> <time> [<hhost>@<messageid>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} [%{hhost}@%{messageid}]: %{message}" }
			id => "header-0051"
			add_field => {
				"[rsa][header][id]" => "0051"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <month> <day> <time> [<messageid>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} [%{messageid}]: %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <month> <day> <time> [<hhost>: <messageid> <data>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} [%{hhost}: %{messageid} %{data}]: %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <month> <day> <time> [<messageid> <data>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} [%{messageid} %{data}]: %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <month> <day> <time> <messageid> message repeated  <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+message[\s]+repeated[\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <hmonth> <hday> <htime> <hhost> NetApp: <hfld1> [<htype>] <hweekday> <month> <day> <time> <year>: <hevent_user>/<msgIdPart1>/<hfld3>/<msgIdPart3> <hfld2> (<msgIdPart2>) <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhost>[^\s]*)[\s]+NetApp:[\s]+(?<hfld1>[^\s]*)[\s]+\[(?<htype>[^\]]*)\][\s]+(?<hweekday>[^\s]*)[\s]+(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<year>[^:]*):[\s]+(?<hevent_user>[^/]*)/(?<msgIdPart1>[^/]*)/(?<hfld3>[^/]*)/(?<msgIdPart3>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+\((?<msgIdPart2>[^\)]*)\)[\s]+(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: <hmonth> <hday> <htime> <hhost> NetApp: <hfld1> [<htype>] <hweekday> <month> <day> <time> <year>: <hevent_user>/<msgIdPart1>/<hfld3>/<msgIdPart3> (<msgIdPart2>) <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhost>[^\s]*)[\s]+NetApp:[\s]+(?<hfld1>[^\s]*)[\s]+\[(?<htype>[^\]]*)\][\s]+(?<hweekday>[^\s]*)[\s]+(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<year>[^:]*):[\s]+(?<hevent_user>[^/]*)/(?<msgIdPart1>[^/]*)/(?<hfld3>[^/]*)/(?<msgIdPart3>[^\s]*)[\s]+\((?<msgIdPart2>[^\)]*)\)[\s]+(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: <hmonth> <hday> <htime> <hhost> NetApp <hfld1> [<htype>] <hweekday> <month> <day> <time> <year>: <hevent_user>/<msgIdPart1>/<hfld3>/<msgIdPart3> <hfld2> (<msgIdPart2>) <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhost>[^\s]*)[\s]+NetApp[\s]+(?<hfld1>[^\s]*)[\s]+\[(?<htype>[^\]]*)\][\s]+(?<hweekday>[^\s]*)[\s]+(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<year>[^:]*):[\s]+(?<hevent_user>[^/]*)/(?<msgIdPart1>[^/]*)/(?<hfld3>[^/]*)/(?<msgIdPart3>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+\((?<msgIdPart2>[^\)]*)\)[\s]+(?<payload>.*))$" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0013
	# line in RSA: <hmonth> <hday> <htime> <hhost> NetApp <hfld1> [<htype>] <hweekday> <month> <day> <time> <year>: <hevent_user>/<msgIdPart1>/<hfld3>/<msgIdPart3> (<msgIdPart2>) <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhost>[^\s]*)[\s]+NetApp[\s]+(?<hfld1>[^\s]*)[\s]+\[(?<htype>[^\]]*)\][\s]+(?<hweekday>[^\s]*)[\s]+(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<year>[^:]*):[\s]+(?<hevent_user>[^/]*)/(?<msgIdPart1>[^/]*)/(?<hfld3>[^/]*)/(?<msgIdPart3>[^\s]*)[\s]+\((?<msgIdPart2>[^\)]*)\)[\s]+(?<payload>.*))$" }
			id => "header-0013"
			add_field => {
				"[rsa][header][id]" => "0013"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_netappmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  Correcting quota for user <fld1> tree <fld2> in volume <fld3> 
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "Correcting quota for user %{fld1} tree %{fld2} in volume %{fld3}" }
			id => "msgParserId0"
			add_field => {
				"result" => "Correcting quota for user , tree  in volume vol"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA:  arplookup <fld1> failed: host is not on local network.  Please verify netmask.
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "arplookup %{fld1} failed: host is not on local network.  Please verify netmask." }
			id => "msgParserId1"
			add_field => {
				"result" => "arplookup  failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA:  Removing too-old iterator file: <fld1>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "Removing too-old iterator file: %{fld1}" }
			id => "msgParserId2"
			add_field => {
				"result" => "Removing too-old iterator file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA:  Multicreation of snapshot named {{ <id> } successful. <info> 
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^[\s]*Multicreation[\s]+of[\s]+snapshot[\s]+named[\s]+\{[\s]+(?<id>[^\s]*)[\s]+\}[\s]+successful\.[\s]+(?<info>[^\s]*)[\s]+$" }
			id => "msgParserId3"
			add_field => {
				"result" => "Multicreation of snapshot successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId4"
			add_field => {
				"result" => "oem lang metadata not set on vol toto"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA:  Core file <fld1> sent to Network Appliance 
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "Core file %{fld1} sent to Network Appliance" }
			id => "msgParserId5"
			add_field => {
				"result" => "Core file 'mini-core..--.__' sent to Network Appliance"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA:  Call home for CLIENT APP ERROR <application>: <product>: (<resultcode>) on <obj_server>: <result>. <info>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "Call home for CLIENT APP ERROR %{application}: %{product}: (%{resultcode}) on %{obj_server}: %{result}. %{info}" }
			id => "msgParserId6"
			add_field => {
				"event_description" => "Call home for CLIENT APP ERROR"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA:  Call home for DISK SCRUB SUMMARY - <info>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "Call home for DISK SCRUB SUMMARY - %{info}" }
			id => "msgParserId7"
			add_field => {
				"event_description" => "Call home for DISK SCRUB SUMMARY"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA:  Call home for FCP PARTNER PATH MISCONFIGURED
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "Call home for FCP PARTNER PATH MISCONFIGURED" }
			id => "msgParserId8"
			add_field => {
				"event_description" => "Call home for FCP PARTNER PATH MISCONFIGURED"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA:  User triggered complete call home for <policy_value> (<result>)
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "User triggered complete call home for %{policy_value} (%{result})" }
			id => "msgParserId9"
			add_field => {
				"event_description" => "User triggered complete call home"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA:  Call home for <policy_value>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "Call home for %{policy_value}" }
			id => "msgParserId10"
			add_field => {
				"event_description" => "Call home for MANAGEMENT_LOG"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA:  Call home for SCHEDULED SNAPSHOT CREATE FAILED
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "Call home for SCHEDULED SNAPSHOT CREATE FAILED" }
			id => "msgParserId11"
			add_field => {
				"event_description" => "Call home failed for SCHEDULED SNAPSHOT CREATE"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA:  Call home for PERFORMANCE DATA
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "Call home for PERFORMANCE DATA" }
			id => "msgParserId12"
			add_field => {
				"event_description" => "Call home for PERFORMANCE DATA"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA:  Call home for <policy_value>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "Call home for %{policy_value}" }
			id => "msgParserId13"
			add_field => {
				"event_description" => "Call home for PERFORMANCE SNAPSHOT"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId14
	# line in RSA:  Call home for <policy_value> (<result>)
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "Call home for %{policy_value} (%{result})" }
			id => "msgParserId14"
			add_field => {
				"event_description" => "Call home for REBOOT"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA:  Call home for <policy_value>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "Call home for %{policy_value}" }
			id => "msgParserId15"
			add_field => {
				"event_description" => "Call home for WEEKLY_LOG"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA:  Disk <id> is attached to the same Fibre Channel loop. <event_description>.
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "Disk %{id} is attached to the same Fibre Channel loop. %{event_description}." }
			id => "msgParserId16"
			add_field => {
				"result" => "Disk attached to the same Fibre Channel loop"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA:  Disk <id> and other disks on this loop are not multipathed and should be for synchronous mirroring configuration. 
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "Disk %{id} and other disks on this loop are not multipathed and should be for synchronous mirroring configuration." }
			id => "msgParserId17"
			add_field => {
				"result" => "disks on this loop should be for synchronous mirroring configuration"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId18
	# line in RSA:  Disk <id> and other disks on this loop are not { dual-attached | multipathed } and <event_description>.
	else if [logstash][msgparser][id] == "msgParserId18" {
		grok {
			match => { "message" => "^[\s]*Disk[\s]+(?<id>[^\s]*)[\s]+and[\s]+other[\s]+disks[\s]+on[\s]+this[\s]+loop[\s]+are[\s]+not[\s]+([\s]*dual\-attached[\s]+|[\s]*multipathed[\s]+)[\s]+and[\s]+(?<event_description>[^\.]*)\.$" }
			id => "msgParserId18"
			add_field => {
				"result" => "disks on this loop should be dual attached or multipathed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA:  Disk <fld1> and other disks on this loop are only connected to one switch. For availability reasons, it should be connnected to two separate switches. 
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "Disk %{fld1} and other disks on this loop are only connected to one switch. For availability reasons, it should be connnected to two separate switches." }
			id => "msgParserId19"
			add_field => {
				"result" => "Disk McData:.L and other disks on this loop are only connected to one switch. For availability reasons, it should be connnected to two separate switches."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA:  Disk <id> and other disks on this loop are dual-attached to the same adapter. <event_description>.
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "Disk %{id} and other disks on this loop are dual-attached to the same adapter. %{event_description}." }
			id => "msgParserId20"
			add_field => {
				"result" => "Disk and other disks on this loop are dual-attached to the same adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA:  Content fill of <fld1> to mms: <fld2> (<fld3>).
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "Content fill of %{fld1} to mms: %{fld2} (%{fld3})." }
			id => "msgParserId21"
			add_field => {
				"result" => "Content fill completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "disk.failmsg:error" {
		# MESSAGE 040578
		# line in RSA:  Disk <id> (<interface>): exceeded threshold of medium errors on same block
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk %{id} (%{interface}): exceeded threshold of medium errors on same block" }
				id => "message-040578"
				add_field => {
				"result" => "Disk exceeded threshold of medium errors on same block"
					"[event][id]" => "040578"
					"[rsa][message][id1]" => "040578"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040655
		# line in RSA:  Disk <id> (<interface>): Predictive Failure <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk %{id} (%{interface}): Predictive Failure %{event_description}" }
				id => "message-040655"
				add_field => {
				"result" => "Disk predictive failure"
					"[event][id]" => "040655"
					"[rsa][message][id1]" => "040655"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA:  <fld0> disks have downrev firmware. They will be updated automatically using background disk firmware update if the correct firmware file is available in the /etc/disk_fw/ directory.
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{fld0} disks have downrev firmware. They will be updated automatically using background disk firmware update if the correct firmware file is available in the /etc/disk_fw/ directory." }
			id => "msgParserId24"
			add_field => {
				"result" => "downrev firmware"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId25
	# line in RSA:  Disk <fld1> op <fld2> sector <fld3> SCSI:hardware error -  <fld4> <fld5> <fld6> <fld7> 
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "Disk %{fld1} op %{fld2} sector %{fld3} SCSI:hardware error -  %{fld4} %{fld5} %{fld6} %{fld7}" }
			id => "msgParserId25"
			add_field => {
				"result" => "Disk b. op xad sector  SCSIhardware error -  (   )"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId26
	# line in RSA:  Disk <fld1> sense data information field is not valid. 
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "Disk %{fld1} sense data information field is not valid." }
			id => "msgParserId26"
			add_field => {
				"result" => "Disk a.: sense data information field is not valid."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId27
	# line in RSA:  Unable to locate snapshot needed by dump context ID (<device>).
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "Unable to locate snapshot needed by dump context ID (%{device})." }
			id => "msgParserId27"
			add_field => {
				"result" => "Unable to locate snapshot needed by dump"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId28
	# line in RSA:  Terminating dump(<device>)
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "Terminating dump(%{device})" }
			id => "msgParserId28"
			add_field => {
				"result" => "Terminating dump"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId29
	# line in RSA:  Terminating restartable dump(<device>)
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "Terminating restartable dump(%{device})" }
			id => "msgParserId29"
			add_field => {
				"result" => "Terminating restartable dump"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "esh.auto.term.error:error" {
		# MESSAGE 040418
		# line in RSA:  AUTO TERMINATION ERROR: TERM switch set improperly to ESH A on channels <fld1> shelf id <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTO TERMINATION ERROR: TERM switch set improperly to ESH A on channels %{fld1} shelf id %{fld2}" }
				id => "message-040418"
				add_field => {
				"result" => "AUTO TERMINATION ERROR TERM switch set improperly to ESH A on channels PARTNER/b shelf id "
					"[event][id]" => "040418"
					"[rsa][message][id1]" => "040418"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040418:01
		# line in RSA:  AUTO TERMINATION ERROR: TERM switch set improperly to ESH B on channels <fld1> shelf id <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTO TERMINATION ERROR: TERM switch set improperly to ESH B on channels %{fld1} shelf id %{fld2}" }
				id => "message-040418:01"
				add_field => {
				"result" => "AUTO TERMINATION ERROR TERM switch set improperly to ESH B on channels PARTNER/b shelf id "
					"[event][id]" => "040418:01"
					"[rsa][message][id1]" => "040418:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "esh.speed.error:error" {
		# MESSAGE 040419
		# line in RSA:  Shelf previously connected to OUT port of ESH A on channels <fld1> shelf id <fld2> is now inaccessible!! (check cables, speed selection) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Shelf previously connected to OUT port of ESH A on channels %{fld1} shelf id %{fld2} is now inaccessible!! (check cables, speed selection)" }
				id => "message-040419"
				add_field => {
				"result" => "Shelf previously connected to OUT port of ESH A on channels 'PARTNER/b' or 'b/PARTNER' shelf id  is now inaccessible!! (check cables, speed selection)"
					"[event][id]" => "040419"
					"[rsa][message][id1]" => "040419"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040419:01
		# line in RSA:  Shelf previously connected to OUT port of ESH B on channels <fld1> shelf id <fld2> is now inaccessible!! (check cables, speed selection) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Shelf previously connected to OUT port of ESH B on channels %{fld1} shelf id %{fld2} is now inaccessible!! (check cables, speed selection)" }
				id => "message-040419:01"
				add_field => {
				"result" => "Shelf previously connected to OUT port of ESH B on channels 'PARTNER/b' or 'b/PARTNER' shelf id  is now inaccessible!! (check cables, speed selection)"
					"[event][id]" => "040419:01"
					"[rsa][message][id1]" => "040419:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId34
	# line in RSA:  disk_release_done:Disk release failed on <fld1> (return code <fld2> 
	else if [logstash][msgparser][id] == "msgParserId34" {
		dissect {
			mapping => { "message" => "disk_release_done:Disk release failed on %{fld1} (return code %{fld2}" }
			id => "msgParserId34"
			add_field => {
				"result" => "disk_release_done:Disk release failed on a. (return code )"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA:  last message repeated <fld1> time
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "last message repeated %{fld1} time" }
			id => "msgParserId35"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId36
	# line in RSA:  <info>
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId36"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId37
	# line in RSA:  Ethernet <interface>: Link up
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "Ethernet %{interface}: Link up" }
			id => "msgParserId37"
			add_field => {
				"result" => "Link up"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId38
	# line in RSA: Client <saddr> (xid <fld1>) is trying to access an unexported mount (<fld2>) 
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "Client %{saddr} (xid %{fld1}) is trying to access an unexported mount (%{fld2})" }
			id => "msgParserId38"
			add_field => {
				"result" => "Client is trying to access an unexported mount"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA:  Client <saddr> (xid <fld1>) is trying to access an unexported mount (<fld2> on volume <fld30> [<fld3>])
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "Client %{saddr} (xid %{fld1}) is trying to access an unexported mount (%{fld2} on volume %{fld30} [%{fld3}])" }
			id => "msgParserId39"
			add_field => {
				"result" => "Client trying to access an unexported mount"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA:  arplookup <hostname> failed: host is not on local network.  Please verify netmask.
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "arplookup %{hostname} failed: host is not on local network.  Please verify netmask." }
			id => "msgParserId40"
			add_field => {
				"result" => "arplookup failed - host is not on local network"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA:  <info> 
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId41"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId42
	# line in RSA:  Client <saddr> (xid <fld1>) is trying to access an unexported mount (<info>) 
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "Client %{saddr} (xid %{fld1}) is trying to access an unexported mount (%{info})" }
			id => "msgParserId42"
			add_field => {
				"event_description" => "trying to access an unexported mount"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId43
	# line in RSA:  Configuration changed by host <daddr>, user <username>.
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "Configuration changed by host %{daddr}, user %{username}." }
			id => "msgParserId43"
			add_field => {
				"result" => "Configuration changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId44
	# line in RSA:  Failed <dclass_counter1> login attempt for user <username> from <daddr> port <dport>.
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "Failed %{dclass_counter1} login attempt for user %{username} from %{daddr} port %{dport}." }
			id => "msgParserId44"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Failed login"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId45
	# line in RSA:  [code=<fld1>] This file failed to open
	else if [logstash][msgparser][id] == "msgParserId45" {
		dissect {
			mapping => { "message" => "[code=%{fld1}] This file failed to open" }
			id => "msgParserId45"
			add_field => {
				"result" => "file failed open"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "admin_worker:info" {
		# MESSAGE 000401
		# line in RSA:  Fail to pull <fld1>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Fail to pull %{fld1}." }
				id => "message-000401"
				add_field => {
					"[event][id]" => "000401"
					"[rsa][message][id1]" => "000401"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000401:01
		# line in RSA:  [code=<fld1>] A configuration file refreshing error occurred. Configuration not changed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[code=%{fld1}] A configuration file refreshing error occurred. Configuration not changed." }
				id => "message-000401:01"
				add_field => {
				"result" => "file refreshing error"
					"[event][id]" => "000401:01"
					"[rsa][message][id1]" => "000401:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId48
	# line in RSA:  adpch_timeoutd: 8b: unquiescing bus
	else if [logstash][msgparser][id] == "msgParserId48" {
		dissect {
			mapping => { "message" => "adpch_timeoutd: 8b: unquiescing bus" }
			id => "msgParserId48"
			add_field => {
				"result" => "unquiescing bus timeout"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA:  adpch_timeoutd: <fld1>(<fld2>): <info>, quiescing bus to allow outstanding I/O to complete(ticks = <fld3>).
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "adpch_timeoutd: %{fld1}(%{fld2}): %{info}, quiescing bus to allow outstanding I/O to complete(ticks = %{fld3})." }
			id => "msgParserId49"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "APIPool00:warning" {
		# MESSAGE 00560
		# line in RSA:  Error in writing value to iterator file: tag=<fld1> err=<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error in writing value to iterator file: tag=%{fld1} err=%{fld2}" }
				id => "message-00560"
				add_field => {
				"result" => "Error in writing value to iterator file - Permission denied"
					"[event][id]" => "00560"
					"[rsa][message][id1]" => "00560"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00560:01
		# line in RSA:  Unable to read iterator value file: tag=<fld1>, error=<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to read iterator value file: tag=%{fld1}, error=%{fld2}" }
				id => "message-00560:01"
				add_field => {
				"result" => "Unable to read iterator value file"
					"[event][id]" => "00560:01"
					"[rsa][message][id1]" => "00560:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA:  Error in writing value to iterator file: tag=<fld1> err=<fld2>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "Error in writing value to iterator file: tag=%{fld1} err=%{fld2}" }
			id => "msgParserId52"
			add_field => {
				"result" => "Error in writing value to iterator file "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId51
	# line in RSA:  Unable to read iterator value file: tag=<fld1>, error=<fld2>
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "Unable to read iterator value file: tag=%{fld1}, error=%{fld2}" }
			id => "msgParserId51"
			add_field => {
				"result" => "Unable to read iterator value file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId53
	# line in RSA:  Removing too-old iterator file: <interface>
	else if [logstash][msgparser][id] == "msgParserId53" {
		dissect {
			mapping => { "message" => "Removing too-old iterator file: %{interface}" }
			id => "msgParserId53"
			add_field => {
				"result" => "Removing file"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "app.log.err:error" {
		# MESSAGE 030153
		# line in RSA:  <id> SnapBackup: SnapManager for SQL Server online { snapshot based full | full } database backup failed. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+SnapBackup:[\s]+SnapManager[\s]+for[\s]+SQL[\s]+Server[\s]+online[\s]+([\s]*snapshot[\s]+based[\s]+full[\s]+|[\s]*full[\s]+)[\s]+database[\s]+backup[\s]+failed\.[\s]+$" }
				id => "message-030153"
				add_field => {
				"result" => "SnapBackup - SQL Server full database backup failed"
					"[event][id]" => "030153"
					"[rsa][message][id1]" => "030153"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030153:01
		# line in RSA: <fld1>: SME Version <version>: (<id>) General: Verification of the Exchange databases failed.  (Exchange Version <fld3> (<info>)) Verification failed. Error code: <fld2>, LUN: <lun> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: SME Version %{version}: (%{id}) General: Verification of the Exchange databases failed.  (Exchange Version %{fld3} (%{info})) Verification failed. Error code: %{fld2}, LUN: %{lun}" }
				id => "message-030153:01"
				add_field => {
				"event_description" => "Verification of the Exchange databases failed"
					"[event][id]" => "030153:01"
					"[rsa][message][id1]" => "030153:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030153:02
		# line in RSA: <fld1>: SME Version <version>: (<id>) Backup: SnapManager for Exchange online backup failed.  (Exchange Version <fld3> (<info>)) Error code: <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: SME Version %{version}: (%{id}) Backup: SnapManager for Exchange online backup failed.  (Exchange Version %{fld3} (%{info})) Error code: %{fld2}" }
				id => "message-030153:02"
				add_field => {
				"result" => "SnapManager for Exchange online backup failed"
					"[event][id]" => "030153:02"
					"[rsa][message][id1]" => "030153:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030153:03
		# line in RSA: <fld1>: SMSQL Version <version>: (<id>) SnapBackup: SnapManager for SQL Server online { snapshot based full | full } backup partially completed. <info> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^:]*):[\s]+SMSQL[\s]+Version[\s]+(?<version>[^:]*):[\s]+\((?<id>[^\)]*)\)[\s]+SnapBackup:[\s]+SnapManager[\s]+for[\s]+SQL[\s]+Server[\s]+online[\s]+([\s]*snapshot[\s]+based[\s]+full[\s]+|[\s]*full[\s]+)[\s]+backup[\s]+partially[\s]+completed\.[\s]+(?<info>[^\s]*)[\s]+$" }
				id => "message-030153:03"
				add_field => {
				"result" => "SnapBackup - SQL Server database backup partially completed"
					"[event][id]" => "030153:03"
					"[rsa][message][id1]" => "030153:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030153:04
		# line in RSA: <fld1>: SMSQL Version <version>: (<id>) SnapBackup: SnapManager for SQL Server transaction log backup failed. <info> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: SMSQL Version %{version}: (%{id}) SnapBackup: SnapManager for SQL Server transaction log backup failed. %{info}" }
				id => "message-030153:04"
				add_field => {
				"result" => "SnapBackup - SQL Server database backup failed"
					"[event][id]" => "030153:04"
					"[rsa][message][id1]" => "030153:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "app.log.info:info" {
		# MESSAGE 030156
		# line in RSA:  <id> SnapBackup: SnapManager for SQL Server online { snapshot based full | full } backup completed successfully. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+SnapBackup:[\s]+SnapManager[\s]+for[\s]+SQL[\s]+Server[\s]+online[\s]+([\s]*snapshot[\s]+based[\s]+full[\s]+|[\s]*full[\s]+)[\s]+backup[\s]+completed[\s]+successfully\.[\s]+$" }
				id => "message-030156"
				add_field => {
				"result" => "SnapBackup - SQL Server full database backup completed successfully"
					"[event][id]" => "030156"
					"[rsa][message][id1]" => "030156"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030156:01
		# line in RSA:  <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}" }
				id => "message-030156:01"
				add_field => {
				"result" => "SnapDrive Service execution started"
					"[event][id]" => "030156:01"
					"[rsa][message][id1]" => "030156:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId61
	# line in RSA:  Unable to find file: <filename>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "Unable to find file: %{filename}" }
			id => "msgParserId61"
			add_field => {
				"event_description" => "Unable to find file"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "asup.general.reminder:info" {
		# MESSAGE 001011
		# line in RSA: Autosupport is not configured to send to Network Appliance. Enabling Autosupport can significantly speed problem determination and resolution should a problem occur on your system. For further information on Autosupport, please see: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Autosupport is not configured to send to Network Appliance. Enabling Autosupport can significantly speed problem determination and resolution should a problem occur on your system. For further information on Autosupport, please see: %{fld1}" }
				id => "message-001011"
				add_field => {
					"[event][id]" => "001011"
					"[rsa][message][id1]" => "001011"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001013
		# line in RSA: AutoSupport is not configured to send to NetApp. Enabling AutoSupport can significantly speed problem determination and resolution should a problem occur on your system. For further information on AutoSupport, please see: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AutoSupport is not configured to send to NetApp. Enabling AutoSupport can significantly speed problem determination and resolution should a problem occur on your system. For further information on AutoSupport, please see: %{fld1}" }
				id => "message-001013"
				add_field => {
					"[event][id]" => "001013"
					"[rsa][message][id1]" => "001013"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId63
	# line in RSA:  Unable to create autosupport spool file named:<fld1>
	else if [logstash][msgparser][id] == "msgParserId63" {
		dissect {
			mapping => { "message" => "Unable to create autosupport spool file named:%{fld1}" }
			id => "msgParserId63"
			add_field => {
				"result" => "Unable to create autosupport spool file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId64
	# line in RSA:  giveback AutoSupport delayed <fld1> minutes (until after the giveback process is complete).
	else if [logstash][msgparser][id] == "msgParserId64" {
		dissect {
			mapping => { "message" => "giveback AutoSupport delayed %{fld1} minutes (until after the giveback process is complete)." }
			id => "msgParserId64"
			add_field => {
				"result" => "giveback AutoSupport delayed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId65
	# line in RSA:  Autosupport was not posted because there was an invalid or missing url specified (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId65" {
		dissect {
			mapping => { "message" => "Autosupport was not posted because there was an invalid or missing url specified (%{fld1})" }
			id => "msgParserId65"
			add_field => {
				"result" => "Invalid or missing url specified"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId66
	# line in RSA:  Autosupport was disconnected during transmission (<event_description>)
	else if [logstash][msgparser][id] == "msgParserId66" {
		dissect {
			mapping => { "message" => "Autosupport was disconnected during transmission (%{event_description})" }
			id => "msgParserId66"
			add_field => {
				"result" => "Autosupport was disconnected during transmission"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId67
	# line in RSA:  { Autosupport message (<fld1>) | AutoSupport message (<fld1>) is corrupted and <info>) }  for host (<hostname>) was not posted to { Network Appliance.| NetApp. }  The system will drop the message
	else if [logstash][msgparser][id] == "msgParserId67" {
		grok {
			match => { "message" => "^[\s]*([\s]*Autosupport[\s]+message[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*AutoSupport[\s]+message[\s]+\((?<fld1>[^\)]*)\)[\s]+is[\s]+corrupted[\s]+and[\s]+(?<info>[^\)]*)\)[\s]+)[\s]+for[\s]+host[\s]+\((?<hostname>[^\)]*)\)[\s]+was[\s]+not[\s]+posted[\s]+to[\s]+([\s]*Network[\s]+Appliance\.|[\s]*NetApp\.[\s]+)[\s]+The[\s]+system[\s]+will[\s]+drop[\s]+the[\s]+message$" }
			id => "msgParserId67"
			add_field => {
				"result" => "Dropped message"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId68
	# line in RSA:  Autosupport message (<fld1>) was not posted for host (<fld2>), it was dropped from queue due to lack of space
	else if [logstash][msgparser][id] == "msgParserId68" {
		dissect {
			mapping => { "message" => "Autosupport message (%{fld1}) was not posted for host (%{fld2}), it was dropped from queue due to lack of space" }
			id => "msgParserId68"
			add_field => {
				"result" => "Dropped from queue"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId69
	# line in RSA:  { Cluster | System } Notification message posted to { Network Appliance: | NetApp: } { Cluster | System } Notification from <hostname> <event_description>
	else if [logstash][msgparser][id] == "msgParserId69" {
		grok {
			match => { "message" => "^[\s]*([\s]*Cluster[\s]+|[\s]*System[\s]+)[\s]+Notification[\s]+message[\s]+posted[\s]+to[\s]+([\s]*Network[\s]+Appliance:[\s]+|[\s]*NetApp:[\s]+)[\s]+([\s]*Cluster[\s]+|[\s]*System[\s]+)[\s]+Notification[\s]+from[\s]+(?<hostname>[^\s]*)[\s]+(?<event_description>.*)$" }
			id => "msgParserId69"
			add_field => {
				"result" => "System/Cluster Notification message posted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId70
	# line in RSA: Autosupport mail to <username> failed (<info>)
	else if [logstash][msgparser][id] == "msgParserId70" {
		dissect {
			mapping => { "message" => "Autosupport mail to %{username} failed (%{info})" }
			id => "msgParserId70"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "asup.smtp.drop:error" {
		# MESSAGE 001001
		# line in RSA:   Autosupport mail (<interface>) was not sent for host (<hostname>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Autosupport mail (%{interface}) was not sent for host (%{hostname})." }
				id => "message-001001"
				add_field => {
				"result" => "Autosupport mail was not sent for host"
					"[event][id]" => "001001"
					"[rsa][message][id1]" => "001001"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040748
		# line in RSA:  AutoSupport mail (<interface>) is corrupted and cannot be delivered) <result>(<resultcode>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AutoSupport mail (%{interface}) is corrupted and cannot be delivered) %{result}(%{resultcode}). %{info}" }
				id => "message-040748"
				add_field => {
				"event_description" => "AutoSupport mail is corrupted and cannot be delivered"
					"[event][id]" => "040748"
					"[rsa][message][id1]" => "040748"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001003
		# line in RSA:   AutoSupport mail (<interface>) was not sent for host (<hostname>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AutoSupport mail (%{interface}) was not sent for host (%{hostname}). %{info}" }
				id => "message-001003"
				add_field => {
				"result" => "AutoSupport mail was not sent for host"
					"[event][id]" => "001003"
					"[rsa][message][id1]" => "001003"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId73
	# line in RSA:  Autosupport cannot connect to host <hostname> (<info>) for message: <fld1>
	else if [logstash][msgparser][id] == "msgParserId73" {
		dissect {
			mapping => { "message" => "Autosupport cannot connect to host %{hostname} (%{info}) for message: %{fld1}" }
			id => "msgParserId73"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId74
	# line in RSA:  <message>
	else if [logstash][msgparser][id] == "msgParserId74" {
		dissect {
			mapping => { "message" => "%{message}" }
			id => "msgParserId74"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId75
	# line in RSA: Detailed autosupport mail not sent because there are no autosupport.to recipients specified (<policy_value>)
	else if [logstash][msgparser][id] == "msgParserId75" {
		dissect {
			mapping => { "message" => "Detailed autosupport mail not sent because there are no autosupport.to recipients specified (%{policy_value})" }
			id => "msgParserId75"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId76
	# line in RSA:  Autosupport mail was not sent because there are no mail hosts specified. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId76" {
		dissect {
			mapping => { "message" => "Autosupport mail was not sent because there are no mail hosts specified. (%{fld1})" }
			id => "msgParserId76"
			add_field => {
				"result" => "no mail hosts specified"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId77
	# line in RSA:  Autosupport mail was not sent because the mail host rejected the FROM section (Protocol error) for message: <username>
	else if [logstash][msgparser][id] == "msgParserId77" {
		dissect {
			mapping => { "message" => "Autosupport mail was not sent because the mail host rejected the FROM section (Protocol error) for message: %{username}" }
			id => "msgParserId77"
			add_field => {
				"result" => "Autosupport mail not sent - Protocol error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "asup.smtp.sent:notice" {
		# MESSAGE 001005
		# line in RSA:  Cluster Notification mail sent: Cluster Notification from <hostname> <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster Notification mail sent: Cluster Notification from %{hostname} %{fld1}" }
				id => "message-001005"
				add_field => {
				"result" => "Cluster Notification mail sent"
					"[event][id]" => "001005"
					"[rsa][message][id1]" => "001005"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001005:01
		# line in RSA:  Cluster Notification mail sent: Cluster Alert from <hostname> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster Notification mail sent: Cluster Alert from %{hostname}" }
				id => "message-001005:01"
				add_field => {
				"result" => "Cluster Notification mail sent"
					"[event][id]" => "001005:01"
					"[rsa][message][id1]" => "001005:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001010
		# line in RSA: System Notification mail sent 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System Notification mail sent" }
				id => "message-001010"
				add_field => {
				"result" => "System Notification mail sent"
					"[event][id]" => "001010"
					"[rsa][message][id1]" => "001010"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId81
	# line in RSA:  System Notification mail sent without file spool: System Notification from <hostname> <fld1>
	else if [logstash][msgparser][id] == "msgParserId81" {
		dissect {
			mapping => { "message" => "System Notification mail sent without file spool: System Notification from %{hostname} %{fld1}" }
			id => "msgParserId81"
			add_field => {
				"result" => "System Notification mail sent without file spool"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId82
	# line in RSA:  Autosupport is already being sent via <hostname>, skipping 
	else if [logstash][msgparser][id] == "msgParserId82" {
		dissect {
			mapping => { "message" => "Autosupport is already being sent via %{hostname}, skipping" }
			id => "msgParserId82"
			add_field => {
				"result" => "Autosupport already being sent"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId83
	# line in RSA:  Autosupport mail was not sent because <info> from the <hostname> option. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId83" {
		dissect {
			mapping => { "message" => "Autosupport mail was not sent because %{info} from the %{hostname} option. (%{fld1})" }
			id => "msgParserId83"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId84
	# line in RSA:  Too many autosupport messages in too short a time, throttling autosupport: <id>
	else if [logstash][msgparser][id] == "msgParserId84" {
		dissect {
			mapping => { "message" => "Too many autosupport messages in too short a time, throttling autosupport: %{id}" }
			id => "msgParserId84"
			add_field => {
				"result" => "Too many autosupport messages in too short a time"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId85
	# line in RSA:  Problems tracking message for throttling: <id>
	else if [logstash][msgparser][id] == "msgParserId85" {
		dissect {
			mapping => { "message" => "Problems tracking message for throttling: %{id}" }
			id => "msgParserId85"
			add_field => {
				"result" => "Problems tracking message for throttling:"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId80
	# line in RSA: System Notification mail sent 
	else if [logstash][msgparser][id] == "msgParserId80" {
		dissect {
			mapping => { "message" => "System Notification mail sent" }
			id => "msgParserId80"
			add_field => {
				"result" => "System Notification mail sent"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId86
	# line in RSA:  sysconfig: <info> 
	else if [logstash][msgparser][id] == "msgParserId86" {
		dissect {
			mapping => { "message" => "sysconfig: %{info}" }
			id => "msgParserId86"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "asup_main:error" {
		# MESSAGE 001021
		# line in RSA:  registry: <info> - No space left on device
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: %{info} - No space left on device" }
				id => "message-001021"
				add_field => {
					"[event][id]" => "001021"
					"[rsa][message][id1]" => "001021"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001021:01
		# line in RSA:  registry: error return from registry_dump!  Registry has not been updated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: error return from registry_dump!  Registry has not been updated." }
				id => "message-001021:01"
				add_field => {
				"result" => " Registry has not been updated"
					"[event][id]" => "001021:01"
					"[rsa][message][id1]" => "001021:01"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId89
	# line in RSA:  AUTH: Login attempt by null user from <service> rejected: <daddr>. Error <fld1>: STATUS_NONE_MAPPED. 
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "AUTH: Login attempt by null user from %{service} rejected: %{daddr}. Error %{fld1}: STATUS_NONE_MAPPED." }
			id => "msgParserId89"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"action" => "null user login rejected - STATUS_NONE_MAPPED"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId90
	# line in RSA:  AUTH: Error <fld1> while trying to get Domain Controller name for <hostname>: Timed out waiting for reply.
	else if [logstash][msgparser][id] == "msgParserId90" {
		dissect {
			mapping => { "message" => "AUTH: Error %{fld1} while trying to get Domain Controller name for %{hostname}: Timed out waiting for reply." }
			id => "msgParserId90"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Error trying to get Domain Controller name - reply timeout"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId91
	# line in RSA:  AUTH: Unable to connect to any Domain Controller for the <username> domain. <event_description>
	else if [logstash][msgparser][id] == "msgParserId91" {
		dissect {
			mapping => { "message" => "AUTH: Unable to connect to any Domain Controller for the %{username} domain. %{event_description}" }
			id => "msgParserId91"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Unable to connect to any Domain Controller"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId92
	# line in RSA:  AUTH: Domain Controller error: NetLogon error <fld>: { - <action> | <action>. } 
	else if [logstash][msgparser][id] == "msgParserId92" {
		grok {
			match => { "message" => "^[\s]*AUTH:[\s]+Domain[\s]+Controller[\s]+error:[\s]+NetLogon[\s]+error[\s]+(?<fld>[^:]*):[\s]+([\s]*\-[\s]+(?<action>[^\s]*)[\s]+|[\s]*(?<action>[^\.]*)\.[\s]+)[\s]+$" }
			id => "msgParserId92"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId93
	# line in RSA:  AUTH: <interface>- <event_description>.
	else if [logstash][msgparser][id] == "msgParserId93" {
		dissect {
			mapping => { "message" => "AUTH: %{interface}- %{event_description}." }
			id => "msgParserId93"
			add_field => {
				"result" => "DC Connection Status Message"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId94
	# line in RSA:  <interface>: The filer's local user definition for administrator is missing or incomplete.
	else if [logstash][msgparser][id] == "msgParserId94" {
		dissect {
			mapping => { "message" => "%{interface}: The filer's local user definition for administrator is missing or incomplete." }
			id => "msgParserId94"
			add_field => {
				"result" => "filer's local user definition for administrator is missing or incomplete"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId95
	# line in RSA:  AUTH: <interface>- <event_description>.
	else if [logstash][msgparser][id] == "msgParserId95" {
		dissect {
			mapping => { "message" => "AUTH: %{interface}- %{event_description}." }
			id => "msgParserId95"
			add_field => {
				"result" => "Ldap connection Status Message"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId96
	# line in RSA:  AUTH: Login by <username> from <saddr> accepted. 
	else if [logstash][msgparser][id] == "msgParserId96" {
		dissect {
			mapping => { "message" => "AUTH: Login by %{username} from %{saddr} accepted." }
			id => "msgParserId96"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"action" => "user login accepted"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "auth.trace.authenticateUser.loginRejected:info" {
		# MESSAGE 030025
		# line in RSA:  AUTH: Login attempt by user rejected by the domain controller with error <fld1>: DC indicates user is not from a trusted domain. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: Login attempt by user rejected by the domain controller with error %{fld1}: DC indicates user is not from a trusted domain." }
				id => "message-030025"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"action" => "user login rejected - user not from trusted domain"
					"[event][id]" => "030025"
					"[rsa][message][id1]" => "030025"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030030
		# line in RSA:  AUTH: Login attempt by user rejected by the domain controller with error <fld1>: STATUS_ACCESS_DENIED. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: Login attempt by user rejected by the domain controller with error %{fld1}: STATUS_ACCESS_DENIED." }
				id => "message-030030"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"action" => "user login rejected - STATUS_ACCESS_DENIED"
					"[event][id]" => "030030"
					"[rsa][message][id1]" => "030030"
					"[event][categoryid]" => "1301020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 031330
		# line in RSA:  AUTH: Login attempt by user rejected by the domain controller with error <fld1>: STATUS_WRONG_PASSWORD. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: Login attempt by user rejected by the domain controller with error %{fld1}: STATUS_WRONG_PASSWORD." }
				id => "message-031330"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"action" => "user login rejected - STATUS_WRONG_PASSWORD"
					"[event][id]" => "031330"
					"[rsa][message][id1]" => "031330"
					"[event][categoryid]" => "1301020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId99
	# line in RSA:  AUTH: Login attempt by user <username> of domain <domain> from client machine <saddr>. 
	else if [logstash][msgparser][id] == "msgParserId99" {
		dissect {
			mapping => { "message" => "AUTH: Login attempt by user %{username} of domain %{domain} from client machine %{saddr}." }
			id => "msgParserId99"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"action" => "login attempt"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId100
	# line in RSA:  AUTH: Login attempt by user <username> of domain <domain> from client machine <shost> (<saddr>). 
	else if [logstash][msgparser][id] == "msgParserId100" {
		dissect {
			mapping => { "message" => "AUTH: Login attempt by user %{username} of domain %{domain} from client machine %{shost} (%{saddr})." }
			id => "msgParserId100"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"action" => "login attempt"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "auth.trace.authenticateUser.loginTraceMsg:info" {
		# MESSAGE 001034
		# line in RSA:  AUTH: { login | User } from <saddr> authenticated { by | as } <username>. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AUTH:[\s]+([\s]*login[\s]+|[\s]*User[\s]+)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+authenticated[\s]+([\s]*by[\s]+|[\s]*as[\s]+)[\s]+(?<username>[^\.]*)\.[\s]+$" }
				id => "message-001034"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"action" => "user authenticated"
					"[event][id]" => "001034"
					"[rsa][message][id1]" => "001034"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030026
		# line in RSA:  AUTH: login from <daddr> rejected because bad local user password. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: login from %{daddr} rejected because bad local user password." }
				id => "message-030026"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"action" => "user login rejected - bad local password"
					"[event][id]" => "030026"
					"[rsa][message][id1]" => "030026"
					"[event][categoryid]" => "1301020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030027
		# line in RSA:  AUTH: login from <daddr> rejected because guest account not set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: login from %{daddr} rejected because guest account not set." }
				id => "message-030027"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"action" => "user login rejected - guest account not set"
					"[event][id]" => "030027"
					"[rsa][message][id1]" => "030027"
					"[event][categoryid]" => "1301020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030029
		# line in RSA: AUTH: User <username> home directory is set to <fld30>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: User %{username} home directory is set to %{fld30}." }
				id => "message-030029"
				add_field => {
				"result" => "user home directory set"
					"[event][id]" => "030029"
					"[rsa][message][id1]" => "030029"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId105
	# line in RSA: AUTH: Mapping Windows user <vsys> to Unix user <username>. 
	else if [logstash][msgparser][id] == "msgParserId105" {
		dissect {
			mapping => { "message" => "AUTH: Mapping Windows user %{vsys} to Unix user %{username}." }
			id => "msgParserId105"
			add_field => {
				"action" => "mapping Windows user to Unix user"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId106
	# line in RSA: AUTH: Mapping Windows user <vsys> to Unix user <username> due to the filer option <service>: mapping succeeds. 
	else if [logstash][msgparser][id] == "msgParserId106" {
		dissect {
			mapping => { "message" => "AUTH: Mapping Windows user %{vsys} to Unix user %{username} due to the filer option %{service}: mapping succeeds." }
			id => "msgParserId106"
			add_field => {
				"action" => "mapping Windows user to Unix user successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId107
	# line in RSA: AUTH: SPNEGO- Attempting to map PC user to UNIX user <username>. 
	else if [logstash][msgparser][id] == "msgParserId107" {
		dissect {
			mapping => { "message" => "AUTH: SPNEGO- Attempting to map PC user to UNIX user %{username}." }
			id => "msgParserId107"
			add_field => {
				"action" => "PC to Unix mapping"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId108
	# line in RSA: CIFS - Filer's security information differs from domain controller.
	else if [logstash][msgparser][id] == "msgParserId108" {
		dissect {
			mapping => { "message" => "CIFS - Filer's security information differs from domain controller." }
			id => "msgParserId108"
			add_field => {
				"result" => "CIFS - Filer's security information differs from domain controller"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId109
	# line in RSA:  Lookup of <hostname> failed with DNS server <saddr>: <info>.
	else if [logstash][msgparser][id] == "msgParserId109" {
		dissect {
			mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{saddr}: %{info}." }
			id => "msgParserId109"
			add_field => {
				"event_description" => "DNS lookup failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId110
	# line in RSA: CIFS: Vscan server <saddr> attempted to register but had insufficient privilege.
	else if [logstash][msgparser][id] == "msgParserId110" {
		dissect {
			mapping => { "message" => "CIFS: Vscan server %{saddr} attempted to register but had insufficient privilege." }
			id => "msgParserId110"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "rc:info" {
		# MESSAGE 014010:07
		# line in RSA:  Lookup of <hostname> failed with DNS server <saddr>: <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{saddr}: %{info}." }
				id => "message-014010:07"
				add_field => {
				"event_description" => "DNS lookup failure"
					"[event][id]" => "014010:07"
					"[rsa][message][id1]" => "014010:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014010
		# line in RSA: Connection with DC <shost> terminated 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connection with DC %{shost} terminated" }
				id => "message-014010"
				add_field => {
				"result" => "Connection with DC host terminated"
					"[event][id]" => "014010"
					"[rsa][message][id1]" => "014010"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014010:01
		# line in RSA:  relog syslog <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "relog syslog %{fld1}" }
				id => "message-014010:01"
				add_field => {
					"[event][id]" => "014010:01"
					"[rsa][message][id1]" => "014010:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014010:02
		# line in RSA:  Taking adapter <fld1> offline at administrator's request.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Taking adapter %{fld1} offline at administrator's request." }
				id => "message-014010:02"
				add_field => {
					"[event][id]" => "014010:02"
					"[rsa][message][id1]" => "014010:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014010:03
		# line in RSA:  Bringing adapter <fld1> online at administrator's request.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Bringing adapter %{fld1} online at administrator's request." }
				id => "message-014010:03"
				add_field => {
					"[event][id]" => "014010:03"
					"[rsa][message][id1]" => "014010:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014010:04
		# line in RSA:  User {<< <username> > | <username> } added 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*User[\s]+(<[\s]+(?<username>[^\s]*)[\s]+>[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+added[\s]+$" }
				id => "message-014010:04"
				add_field => {
				"result" => "User added"
					"[event][id]" => "014010:04"
					"[rsa][message][id1]" => "014010:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014010:05
		# line in RSA:  Thread-<fld1>: ndmpd session closed successfully for version = <fld2>, sessionId = <fld3>, from src ip = <saddr>, dst ip = <fld4>/<daddr>, src port = <sport>, dst port = <dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Thread-%{fld1}: ndmpd session closed successfully for version = %{fld2}, sessionId = %{fld3}, from src ip = %{saddr}, dst ip = %{fld4}/%{daddr}, src port = %{sport}, dst port = %{dport}" }
				id => "message-014010:05"
				add_field => {
				"result" => "ndmpd session closed successfully"
					"[event][id]" => "014010:05"
					"[rsa][message][id1]" => "014010:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014010:06
		# line in RSA:  Time changed (<fld1>) to <id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Time changed (%{fld1}) to %{id}" }
				id => "message-014010:06"
				add_field => {
				"result" => "Time changed"
					"[event][id]" => "014010:06"
					"[rsa][message][id1]" => "014010:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth00:warning" {
		# MESSAGE 001037
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001037"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001037"
					"[rsa][message][id1]" => "001037"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001037:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001037:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001037:01"
					"[rsa][message][id1]" => "001037:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001037:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001037:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001037:02"
					"[rsa][message][id1]" => "001037:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth01:warning" {
		# MESSAGE 001038
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001038"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001038"
					"[rsa][message][id1]" => "001038"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001038:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001038:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001038:01"
					"[rsa][message][id1]" => "001038:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001038:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001038:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001038:02"
					"[rsa][message][id1]" => "001038:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId114
	# line in RSA:  LsaOpenPolicy2: Exception rpc_s_connection_closed caught.
	else if [logstash][msgparser][id] == "msgParserId114" {
		dissect {
			mapping => { "message" => "LsaOpenPolicy2: Exception rpc_s_connection_closed caught." }
			id => "msgParserId114"
			add_field => {
				"result" => "Exception caught"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth02:warning" {
		# MESSAGE 001039
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001039"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001039"
					"[rsa][message][id1]" => "001039"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001039:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001039:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001039:01"
					"[rsa][message][id1]" => "001039:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001039:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001039:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001039:02"
					"[rsa][message][id1]" => "001039:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth03:info" {
		# MESSAGE 001063
		# line in RSA:  CIFS - machine password changed on DC <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS - machine password changed on DC %{shost}" }
				id => "message-001063"
				add_field => {
				"action" => "machine password changed"
					"[event][id]" => "001063"
					"[rsa][message][id1]" => "001063"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001063:01
		# line in RSA:  Lookup of <hostname> failed with DNS server <saddr>: <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{saddr}: %{info}." }
				id => "message-001063:01"
				add_field => {
				"event_description" => "DNS lookup failure"
					"[event][id]" => "001063:01"
					"[rsa][message][id1]" => "001063:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth03:warning" {
		# MESSAGE 001040
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001040"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001040"
					"[rsa][message][id1]" => "001040"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001040:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001040:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001040:01"
					"[rsa][message][id1]" => "001040:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001040:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001040:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001040:02"
					"[rsa][message][id1]" => "001040:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth04:error" {
		# MESSAGE 001084
		# line in RSA:  registry: <info> - No space left on device
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: %{info} - No space left on device" }
				id => "message-001084"
				add_field => {
					"[event][id]" => "001084"
					"[rsa][message][id1]" => "001084"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001084:01
		# line in RSA:  registry: error return from registry_dump!  Registry has not been updated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: error return from registry_dump!  Registry has not been updated." }
				id => "message-001084:01"
				add_field => {
				"result" => " Registry has not been updated"
					"[event][id]" => "001084:01"
					"[rsa][message][id1]" => "001084:01"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth04:info" {
		# MESSAGE 030108
		# line in RSA:  Lookup of <hostname> failed with DNS server <saddr>: <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{saddr}: %{info}." }
				id => "message-030108"
				add_field => {
				"event_description" => "DNS lookup failure"
					"[event][id]" => "030108"
					"[rsa][message][id1]" => "030108"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030108:01
		# line in RSA:  The <id> file has been loaded.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The %{id} file has been loaded." }
				id => "message-030108:01"
				add_field => {
				"result" => "config file loaded"
					"[event][id]" => "030108:01"
					"[rsa][message][id1]" => "030108:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030108:02
		# line in RSA:  <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}" }
				id => "message-030108:02"
				add_field => {
					"[event][id]" => "030108:02"
					"[rsa][message][id1]" => "030108:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth04:warning" {
		# MESSAGE 001041
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001041"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001041"
					"[rsa][message][id1]" => "001041"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001041:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001041:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001041:01"
					"[rsa][message][id1]" => "001041:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001041:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001041:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001041:02"
					"[rsa][message][id1]" => "001041:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth05:error" {
		# MESSAGE 001085
		# line in RSA: registry: <info> - No space left on device 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: %{info} - No space left on device" }
				id => "message-001085"
				add_field => {
					"[event][id]" => "001085"
					"[rsa][message][id1]" => "001085"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001085:01
		# line in RSA:  registry: error return from registry_dump!  Registry has not been updated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: error return from registry_dump!  Registry has not been updated." }
				id => "message-001085:01"
				add_field => {
				"result" => " Registry has not been updated"
					"[event][id]" => "001085:01"
					"[rsa][message][id1]" => "001085:01"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth05:warning" {
		# MESSAGE 030377
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-030377"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "030377"
					"[rsa][message][id1]" => "030377"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030377:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-030377:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "030377:01"
					"[rsa][message][id1]" => "030377:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030377:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-030377:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "030377:02"
					"[rsa][message][id1]" => "030377:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth06:warning" {
		# MESSAGE 001045
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001045"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001045"
					"[rsa][message][id1]" => "001045"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001045:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001045:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001045:01"
					"[rsa][message][id1]" => "001045:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001045:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001045:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001045:02"
					"[rsa][message][id1]" => "001045:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth07:warning" {
		# MESSAGE 001042
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001042"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001042"
					"[rsa][message][id1]" => "001042"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001042:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001042:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001042:01"
					"[rsa][message][id1]" => "001042:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001042:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001042:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001042:02"
					"[rsa][message][id1]" => "001042:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth08:warning" {
		# MESSAGE 001043
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001043"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001043"
					"[rsa][message][id1]" => "001043"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001043:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001043:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001043:01"
					"[rsa][message][id1]" => "001043:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001043:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001043:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001043:02"
					"[rsa][message][id1]" => "001043:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth09:info" {
		# MESSAGE 001069
		# line in RSA:  CIFS - machine password changed on DC <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS - machine password changed on DC %{shost}" }
				id => "message-001069"
				add_field => {
				"action" => "machine password changed"
					"[event][id]" => "001069"
					"[rsa][message][id1]" => "001069"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001069:01
		# line in RSA:  Lookup of <hostname> failed with DNS server <saddr>: <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{saddr}: %{info}." }
				id => "message-001069:01"
				add_field => {
				"event_description" => "DNS lookup failure"
					"[event][id]" => "001069:01"
					"[rsa][message][id1]" => "001069:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001069:02
		# line in RSA:  The <id> file has been loaded.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The %{id} file has been loaded." }
				id => "message-001069:02"
				add_field => {
				"result" => "config file loaded"
					"[event][id]" => "001069:02"
					"[rsa][message][id1]" => "001069:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001069:03
		# line in RSA:  <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}" }
				id => "message-001069:03"
				add_field => {
					"[event][id]" => "001069:03"
					"[rsa][message][id1]" => "001069:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Auth09:warning" {
		# MESSAGE 001044
		# line in RSA:  Cannot connect to server. Socket connect error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Socket connect error: %{info}" }
				id => "message-001044"
				add_field => {
				"event_description" => "Cannot connect to server - Socket connect error"
					"[event][id]" => "001044"
					"[rsa][message][id1]" => "001044"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001044:01
		# line in RSA:  Cannot connect to server. Session setup error: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to server. Session setup error: %{info}" }
				id => "message-001044:01"
				add_field => {
				"event_description" => "Cannot connect to server - Session setup error"
					"[event][id]" => "001044:01"
					"[rsa][message][id1]" => "001044:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001044:02
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-001044:02"
				add_field => {
				"event_description" => "General Auth error"
					"[event][id]" => "001044:02"
					"[rsa][message][id1]" => "001044:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId119
	# line in RSA:  Client <hostname> (<fld1>) is trying to access an unexported mount (<id> [<fld2>])
	else if [logstash][msgparser][id] == "msgParserId119" {
		dissect {
			mapping => { "message" => "Client %{hostname} (%{fld1}) is trying to access an unexported mount (%{id} [%{fld2}])" }
			id => "msgParserId119"
			add_field => {
				"result" => "Client trying to access unexported mount"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId120
	# line in RSA:  Disk <id> [NETAPP <fld1>] S/N [<fld2>] selected for background disk firmware update.
	else if [logstash][msgparser][id] == "msgParserId120" {
		dissect {
			mapping => { "message" => "Disk %{id} [NETAPP %{fld1}] S/N [%{fld2}] selected for background disk firmware update." }
			id => "msgParserId120"
			add_field => {
				"result" => "Disk selected for background disk firmware update"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId121
	# line in RSA:  <fld1>: ECC error at DIMM <fld2>. Error(s) in bits <fld3>-<fld4> = <fld5>. Correctable Machine Check Error at CPU<fld6>: status <fld7> at address <fld8>. NB Error: {OverF, Enable, | Enable,} AddrV, CECC, Synd(<fld9>), {CPU<fld10> | Link(<fld10>)}, CKSynd(<fld11>), ErrExt(<fld12>), ErrCode(<fld13>, <fld14>, <fld15>, <fld16>, <fld17>).
	else if [logstash][msgparser][id] == "msgParserId121" {
		grok {
			match => { "message" => "^[\s]*(?<fld1>[^:]*):[\s]+ECC[\s]+error[\s]+at[\s]+DIMM[\s]+(?<fld2>[^\.]*)\.[\s]+Error\(s\)[\s]+in[\s]+bits[\s]+(?<fld3>[^\-]*)\-(?<fld4>[^\s]*)[\s]+=[\s]+(?<fld5>[^\.]*)\.[\s]+Correctable[\s]+Machine[\s]+Check[\s]+Error[\s]+at[\s]+CPU(?<fld6>[^:]*):[\s]+status[\s]+(?<fld7>[^\s]*)[\s]+at[\s]+address[\s]+(?<fld8>[^\.]*)\.[\s]+NB[\s]+Error:[\s]+(OverF,[\s]+Enable,[\s]+|[\s]*Enable,)[\s]+AddrV,[\s]+CECC,[\s]+Synd\((?<fld9>[^\)]*)\),[\s]+(CPU(?<fld10>[^\s]*)[\s]+|[\s]*Link\((?<fld10>[^\)]*)\)),[\s]+CKSynd\((?<fld11>[^\)]*)\),[\s]+ErrExt\((?<fld12>[^\)]*)\),[\s]+ErrCode\((?<fld13>[^,]*),[\s]+(?<fld14>[^,]*),[\s]+(?<fld15>[^,]*),[\s]+(?<fld16>[^,]*),[\s]+(?<fld17>[^\)]*)\)\.$" }
			id => "msgParserId121"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId122
	# line in RSA:  Total of <fld1> new correctable ECC errors just reported.<event_description>
	else if [logstash][msgparser][id] == "msgParserId122" {
		dissect {
			mapping => { "message" => "Total of %{fld1} new correctable ECC errors just reported.%{event_description}" }
			id => "msgParserId122"
			add_field => {
				"result" => "ECC errors reported"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId123
	# line in RSA:  <interface>: configuration mismatch resolved
	else if [logstash][msgparser][id] == "msgParserId123" {
		dissect {
			mapping => { "message" => "%{interface}: configuration mismatch resolved" }
			id => "msgParserId123"
			add_field => {
				"result" => "configuration mismatch resolved"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId124
	# line in RSA:  cfdisk: <info>
	else if [logstash][msgparser][id] == "msgParserId124" {
		dissect {
			mapping => { "message" => "cfdisk: %{info}" }
			id => "msgParserId124"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId125
	# line in RSA:  cfdisk: <info>: <interface>
	else if [logstash][msgparser][id] == "msgParserId125" {
		dissect {
			mapping => { "message" => "cfdisk: %{info}: %{interface}" }
			id => "msgParserId125"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId126
	# line in RSA:  <interface>: The node (<hostname>) found the missing disk <id> (<fld1>).
	else if [logstash][msgparser][id] == "msgParserId126" {
		dissect {
			mapping => { "message" => "%{interface}: The node (%{hostname}) found the missing disk %{id} (%{fld1})." }
			id => "msgParserId126"
			add_field => {
				"result" => "node found missing disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId127
	# line in RSA:  The node (<hostname>) is missing disk <id> (<fld1>) <event_description>.
	else if [logstash][msgparser][id] == "msgParserId127" {
		dissect {
			mapping => { "message" => "The node (%{hostname}) is missing disk %{id} (%{fld1}) %{event_description}." }
			id => "msgParserId127"
			add_field => {
				"result" => "node is missing disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId128
	# line in RSA:  cfdisk: configuration mismatch involving shelf <fld1> on adapter <fld2>
	else if [logstash][msgparser][id] == "msgParserId128" {
		dissect {
			mapping => { "message" => "cfdisk: configuration mismatch involving shelf %{fld1} on adapter %{fld2}" }
			id => "msgParserId128"
			add_field => {
				"result" => "configuration mismatch involving shelf"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId129
	# line in RSA:  <interface>: released disk reservations
	else if [logstash][msgparser][id] == "msgParserId129" {
		dissect {
			mapping => { "message" => "%{interface}: released disk reservations" }
			id => "msgParserId129"
			add_field => {
				"result" => "released disk reservations"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId130
	# line in RSA:  <interface>: couldn't release disk reservations
	else if [logstash][msgparser][id] == "msgParserId130" {
		dissect {
			mapping => { "message" => "%{interface}: couldn't release disk reservations" }
			id => "msgParserId130"
			add_field => {
				"result" => "couldn't release disk reservations"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId131
	# line in RSA:  Cluster monitor: giveback started
	else if [logstash][msgparser][id] == "msgParserId131" {
		dissect {
			mapping => { "message" => "Cluster monitor: giveback started" }
			id => "msgParserId131"
			add_field => {
				"result" => "Cluster monitor: giveback started"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId132
	# line in RSA:  Cluster monitor: giveback completed
	else if [logstash][msgparser][id] == "msgParserId132" {
		dissect {
			mapping => { "message" => "Cluster monitor: giveback completed" }
			id => "msgParserId132"
			add_field => {
				"result" => "Cluster monitor: giveback completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId133
	# line in RSA:  Cluster monitor: <event_description> 
	else if [logstash][msgparser][id] == "msgParserId133" {
		dissect {
			mapping => { "message" => "Cluster monitor: %{event_description}" }
			id => "msgParserId133"
			add_field => {
				"result" => "Cluster monitor error detected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId134
	# line in RSA:  Cluster monitor: <event_description> 
	else if [logstash][msgparser][id] == "msgParserId134" {
		dissect {
			mapping => { "message" => "Cluster monitor: %{event_description}" }
			id => "msgParserId134"
			add_field => {
				"result" => "Cluster monitor kernel mismatch resolved"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId135
	# line in RSA:  Cluster monitor: takeover completed
	else if [logstash][msgparser][id] == "msgParserId135" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover completed" }
			id => "msgParserId135"
			add_field => {
				"result" => "Cluster monitor: takeover completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId136
	# line in RSA:  option <username> is set to <fld1> seconds which is below the NetApp advised value of 15 seconds. False takeovers and/or takeovers without diagnostic core-dumps might occur.
	else if [logstash][msgparser][id] == "msgParserId136" {
		dissect {
			mapping => { "message" => "option %{username} is set to %{fld1} seconds which is below the NetApp advised value of 15 seconds. False takeovers and/or takeovers without diagnostic core-dumps might occur." }
			id => "msgParserId136"
			add_field => {
				"result" => "option set below the NetApp advised value"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId137
	# line in RSA:  <interface>: takeover duration time is <id>
	else if [logstash][msgparser][id] == "msgParserId137" {
		dissect {
			mapping => { "message" => "%{interface}: takeover duration time is %{id}" }
			id => "msgParserId137"
			add_field => {
				"result" => "takeover duration time notificaton"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId138
	# line in RSA:  <interface>: takeover started
	else if [logstash][msgparser][id] == "msgParserId138" {
		dissect {
			mapping => { "message" => "%{interface}: takeover started" }
			id => "msgParserId138"
			add_field => {
				"result" => "takeover started"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "cf.fm.timeMasterStatus:info" {
		# MESSAGE 030070
		# line in RSA:  Acting as cluster time master
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Acting as cluster time master" }
				id => "message-030070"
				add_field => {
				"result" => "Acting as cluster time master"
					"[event][id]" => "030070"
					"[rsa][message][id1]" => "030070"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030070:01
		# line in RSA:  Acting as cluster time slave
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Acting as cluster time slave" }
				id => "message-030070:01"
				add_field => {
				"result" => "Acting as cluster time slave"
					"[event][id]" => "030070:01"
					"[rsa][message][id1]" => "030070:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId141
	# line in RSA:  Cluster monitor: backup mailbox error detected 
	else if [logstash][msgparser][id] == "msgParserId141" {
		dissect {
			mapping => { "message" => "Cluster monitor: backup mailbox error detected" }
			id => "msgParserId141"
			add_field => {
				"result" => "backup mailbox error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId142
	# line in RSA:  Cluster monitor: backup mailbox OK 
	else if [logstash][msgparser][id] == "msgParserId142" {
		dissect {
			mapping => { "message" => "Cluster monitor: backup mailbox OK" }
			id => "msgParserId142"
			add_field => {
				"result" => "backup mailbox OK"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "cf.fsm.firmwareStatus:info" {
		# MESSAGE 030039
		# line in RSA:  Cluster monitor: partner halted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: partner halted" }
				id => "message-030039"
				add_field => {
				"result" => "Cluster partner halted"
					"[event][id]" => "030039"
					"[rsa][message][id1]" => "030039"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030039:01
		# line in RSA:  Cluster monitor: partner kernel loaded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: partner kernel loaded" }
				id => "message-030039:01"
				add_field => {
				"result" => "partner kernel loaded"
					"[event][id]" => "030039:01"
					"[rsa][message][id1]" => "030039:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030039:02
		# line in RSA:  Cluster monitor: partner rebooting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: partner rebooting" }
				id => "message-030039:02"
				add_field => {
				"result" => "Cluster partner rebooting"
					"[event][id]" => "030039:02"
					"[rsa][message][id1]" => "030039:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId146
	# line in RSA:  Negotiated failover: accepting takeover request by partner, reason: operator initiated cf takeover. Asking partner to shutdown gracefully; 
	else if [logstash][msgparser][id] == "msgParserId146" {
		dissect {
			mapping => { "message" => "Negotiated failover: accepting takeover request by partner, reason: operator initiated cf takeover. Asking partner to shutdown gracefully;" }
			id => "msgParserId146"
			add_field => {
				"result" => "accepting takeover request by partner - operator initiated"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId147
	# line in RSA:  Negotiated failover: module <fld30> is now unimpaired
	else if [logstash][msgparser][id] == "msgParserId147" {
		dissect {
			mapping => { "message" => "Negotiated failover: module %{fld30} is now unimpaired" }
			id => "msgParserId147"
			add_field => {
				"result" => "failover module unimpaired"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId148
	# line in RSA:  Negotiated failover: partner has shutdown
	else if [logstash][msgparser][id] == "msgParserId148" {
		dissect {
			mapping => { "message" => "Negotiated failover: partner has shutdown" }
			id => "msgParserId148"
			add_field => {
				"result" => "partner has shutdown"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId149
	# line in RSA:  Negotiated failover: starting graceful shutdown.
	else if [logstash][msgparser][id] == "msgParserId149" {
		dissect {
			mapping => { "message" => "Negotiated failover: starting graceful shutdown." }
			id => "msgParserId149"
			add_field => {
				"result" => "starting graceful shutdown"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId150
	# line in RSA:  Cluster monitor: partner not responding
	else if [logstash][msgparser][id] == "msgParserId150" {
		dissect {
			mapping => { "message" => "Cluster monitor: partner not responding" }
			id => "msgParserId150"
			add_field => {
				"result" => "Cluster - partner not responding"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId151
	# line in RSA:  Cluster monitor: partner ok
	else if [logstash][msgparser][id] == "msgParserId151" {
		dissect {
			mapping => { "message" => "Cluster monitor: partner ok" }
			id => "msgParserId151"
			add_field => {
				"result" => "partner ok"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId152
	# line in RSA:  <interface>: Releasing disk reservations in preparation for giveback
	else if [logstash][msgparser][id] == "msgParserId152" {
		dissect {
			mapping => { "message" => "%{interface}: Releasing disk reservations in preparation for giveback" }
			id => "msgParserId152"
			add_field => {
				"result" => "Releasing disk reservations in preparation for giveback"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId153
	# line in RSA:  Cluster monitor: <fld30>
	else if [logstash][msgparser][id] == "msgParserId153" {
		dissect {
			mapping => { "message" => "Cluster monitor: %{fld30}" }
			id => "msgParserId153"
			add_field => {
				"result" => "Cluster monitor state trasition"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId154
	# line in RSA:  Cluster monitor: takeover attempted after firmware timeout expired on partner
	else if [logstash][msgparser][id] == "msgParserId154" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover attempted after firmware timeout expired on partner" }
			id => "msgParserId154"
			add_field => {
				"result" => "takeover attempted after firmware timeout expired"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId155
	# line in RSA:  Cluster monitor: takeover attempted after multi-disk failure on partner 
	else if [logstash][msgparser][id] == "msgParserId155" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover attempted after multi-disk failure on partner" }
			id => "msgParserId155"
			add_field => {
				"result" => "takeover attempted after multi-disk failure on partner"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId156
	# line in RSA:  Cluster monitor: takeover attempted after '<username>'. command
	else if [logstash][msgparser][id] == "msgParserId156" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover attempted after '%{username}'. command" }
			id => "msgParserId156"
			add_field => {
				"result" => "takeover attempted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId157
	# line in RSA:  <interface>: Takeover initiated after no heartbeat was detected from the partner node.
	else if [logstash][msgparser][id] == "msgParserId157" {
		dissect {
			mapping => { "message" => "%{interface}: Takeover initiated after no heartbeat was detected from the partner node." }
			id => "msgParserId157"
			add_field => {
				"result" => "Takeover initiated after no heartbeat was detected from the partner node"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "cf.fsm.takeoverByPartnerDisabled:notice" {
		# MESSAGE 030041
		# line in RSA:  Cluster monitor: takeover of <fld30> by <username> disabled (cluster takeover disabled)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{fld30} by %{username} disabled (cluster takeover disabled)" }
				id => "message-030041"
				add_field => {
				"result" => "Cluster takeover disabled"
					"[event][id]" => "030041"
					"[rsa][message][id1]" => "030041"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030041:01
		# line in RSA:  Cluster monitor: takeover of <fld30> by <username> disabled (unsynchronized log)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{fld30} by %{username} disabled (unsynchronized log)" }
				id => "message-030041:01"
				add_field => {
				"result" => "Cluster takeover disabled"
					"[event][id]" => "030041:01"
					"[rsa][message][id1]" => "030041:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId160
	# line in RSA:  Cluster monitor: takeover of <fld30> by <username> enabled
	else if [logstash][msgparser][id] == "msgParserId160" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover of %{fld30} by %{username} enabled" }
			id => "msgParserId160"
			add_field => {
				"result" => "Cluster monitor: takeover of volume enabled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId161
	# line in RSA:  Cluster monitor: takeover scheduled in <fld1> seconds
	else if [logstash][msgparser][id] == "msgParserId161" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover scheduled in %{fld1} seconds" }
			id => "msgParserId161"
			add_field => {
				"result" => "Cluster monitor: takeover scheduled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId162
	# line in RSA:  Cluster monitor: takeover failed '<info>'
	else if [logstash][msgparser][id] == "msgParserId162" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover failed '%{info}'" }
			id => "msgParserId162"
			add_field => {
				"result" => "Cluster takeover failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "cf.fsm.takeoverOfPartnerDisabled:notice" {
		# MESSAGE 030037
		# line in RSA:  Cluster monitor: takeover of <hostname> disabled (local halt in progress)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{hostname} disabled (local halt in progress)" }
				id => "message-030037"
				add_field => {
				"result" => "Cluster takeover disabled - local halt in progress"
					"[event][id]" => "030037"
					"[rsa][message][id1]" => "030037"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030037:01
		# line in RSA:  Cluster monitor: takeover of <hostname> disabled (partner booting)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{hostname} disabled (partner booting)" }
				id => "message-030037:01"
				add_field => {
				"result" => "Cluster takeover disabled - partner booting"
					"[event][id]" => "030037:01"
					"[rsa][message][id1]" => "030037:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030037:02
		# line in RSA:  Cluster monitor: takeover of <hostname> disabled (unsynchronized log)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{hostname} disabled (unsynchronized log)" }
				id => "message-030037:02"
				add_field => {
				"result" => "Cluster takeover disabled - unsynchronized log"
					"[event][id]" => "030037:02"
					"[rsa][message][id1]" => "030037:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030037:03
		# line in RSA:  Cluster monitor: takeover of <hostname> disabled (cluster takeover disabled)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{hostname} disabled (cluster takeover disabled)" }
				id => "message-030037:03"
				add_field => {
				"result" => "Cluster takeover disabled - cluster takeover disabled"
					"[event][id]" => "030037:03"
					"[rsa][message][id1]" => "030037:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030037:04
		# line in RSA:  Cluster monitor: takeover of <hostname> disabled (status of backup mailbox is uncertain)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{hostname} disabled (status of backup mailbox is uncertain)" }
				id => "message-030037:04"
				add_field => {
				"result" => "Cluster takeover disabled - cluster takeover disabled"
					"[event][id]" => "030037:04"
					"[rsa][message][id1]" => "030037:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030037:05
		# line in RSA:  Cluster monitor: takeover of <hostname> disabled (cluster takeover disabled by partner)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{hostname} disabled (cluster takeover disabled by partner)" }
				id => "message-030037:05"
				add_field => {
				"result" => "Cluster takeover disabled - cluster takeover disabled by partner"
					"[event][id]" => "030037:05"
					"[rsa][message][id1]" => "030037:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030037:06
		# line in RSA:  Cluster monitor: takeover of <hostname> disabled (partner halted in notakeover mode) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{hostname} disabled (partner halted in notakeover mode)" }
				id => "message-030037:06"
				add_field => {
				"result" => "Cluster monitor: takeover disabled"
					"[event][id]" => "030037:06"
					"[rsa][message][id1]" => "030037:06"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030037:07
		# line in RSA:  Cluster monitor: takeover of <hostname> disabled (partner mailbox disks not accessible or invalid) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{hostname} disabled (partner mailbox disks not accessible or invalid)" }
				id => "message-030037:07"
				add_field => {
				"result" => "Cluster monitor: takeover disabled"
					"[event][id]" => "030037:07"
					"[rsa][message][id1]" => "030037:07"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030037:08
		# line in RSA:  Cluster monitor: takeover of <fld1> disabled (downloading shelf firmware) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster monitor: takeover of %{fld1} disabled (downloading shelf firmware)" }
				id => "message-030037:08"
				add_field => {
				"result" => "Cluster monitor takeover of esvfil disabled (downloading shelf firmware)"
					"[event][id]" => "030037:08"
					"[rsa][message][id1]" => "030037:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId172
	# line in RSA:  Cluster monitor: takeover of <hostname> enabled
	else if [logstash][msgparser][id] == "msgParserId172" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover of %{hostname} enabled" }
			id => "msgParserId172"
			add_field => {
				"result" => "Cluster monitor: takeover of volume enabled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId173
	# line in RSA:  <interface>: Partner(<hostname>) RLM firmware doesn't supports hw_assist feature.
	else if [logstash][msgparser][id] == "msgParserId173" {
		dissect {
			mapping => { "message" => "%{interface}: Partner(%{hostname}) RLM firmware doesn't supports hw_assist feature." }
			id => "msgParserId173"
			add_field => {
				"result" => "Partner RLM firmware doesn't support hw_assist feature"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId174
	# line in RSA:  <interface>: missed keep alive alert from partner(<hostname>) 
	else if [logstash][msgparser][id] == "msgParserId174" {
		dissect {
			mapping => { "message" => "%{interface}: missed keep alive alert from partner(%{hostname})" }
			id => "msgParserId174"
			add_field => {
				"result" => "missed keep alive alert from partner"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId175
	# line in RSA:  <interface>: Received hw_assist KeepAlive alert from partner(<hostname>) 
	else if [logstash][msgparser][id] == "msgParserId175" {
		dissect {
			mapping => { "message" => "%{interface}: Received hw_assist KeepAlive alert from partner(%{hostname})" }
			id => "msgParserId175"
			add_field => {
				"result" => "Received hw_assist KeepAlive alert from partner"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId176
	# line in RSA: Interconnect adapter Link <fld1> has been DOWN for <fld2> minute(s) 
	else if [logstash][msgparser][id] == "msgParserId176" {
		dissect {
			mapping => { "message" => "Interconnect adapter Link %{fld1} has been DOWN for %{fld2} minute(s)" }
			id => "msgParserId176"
			add_field => {
				"result" => "Interconnect adapter link DOWN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId177
	# line in RSA:  Interconnect adapter link <fld1> has been down for <fld2> minutes 
	else if [logstash][msgparser][id] == "msgParserId177" {
		dissect {
			mapping => { "message" => "Interconnect adapter link %{fld1} has been down for %{fld2} minutes" }
			id => "msgParserId177"
			add_field => {
				"result" => "Interconnect adapter link has been down"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId178
	# line in RSA:  Cluster interconnect port <fld1> of this appliance seems to be connected to port <fld2> on the partner appliance.
	else if [logstash][msgparser][id] == "msgParserId178" {
		dissect {
			mapping => { "message" => "Cluster interconnect port %{fld1} of this appliance seems to be connected to port %{fld2} on the partner appliance." }
			id => "msgParserId178"
			add_field => {
				"result" => "Cluster interconnect conflict"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId179
	# line in RSA:  interconnect transfer timed out
	else if [logstash][msgparser][id] == "msgParserId179" {
		dissect {
			mapping => { "message" => "interconnect transfer timed out" }
			id => "msgParserId179"
			add_field => {
				"event_description" => "interconnect transfer timed out"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId180
	# line in RSA:  Cluster monitor: operator initiated disabling of cluster
	else if [logstash][msgparser][id] == "msgParserId180" {
		dissect {
			mapping => { "message" => "Cluster monitor: operator initiated disabling of cluster" }
			id => "msgParserId180"
			add_field => {
				"result" => "Cluster - operator initiated disabling of cluster"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId181
	# line in RSA:  Cluster monitor: operator initiated enabling of cluster
	else if [logstash][msgparser][id] == "msgParserId181" {
		dissect {
			mapping => { "message" => "Cluster monitor: operator initiated enabling of cluster" }
			id => "msgParserId181"
			add_field => {
				"result" => "Cluster - operator initiated enabling of cluster"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId182
	# line in RSA:  Cluster monitor: giveback <fld1> initiated by operator
	else if [logstash][msgparser][id] == "msgParserId182" {
		dissect {
			mapping => { "message" => "Cluster monitor: giveback %{fld1} initiated by operator" }
			id => "msgParserId182"
			add_field => {
				"result" => "Cluster giveback initiated by operator"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId183
	# line in RSA:  Cluster monitor: takeover initiated by operator
	else if [logstash][msgparser][id] == "msgParserId183" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover initiated by operator" }
			id => "msgParserId183"
			add_field => {
				"result" => "Cluster - operator initiated takeover"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId184
	# line in RSA:  Initiating soft reset on Cluster Interconnect card <fld1> due to <info>
	else if [logstash][msgparser][id] == "msgParserId184" {
		dissect {
			mapping => { "message" => "Initiating soft reset on Cluster Interconnect card %{fld1} due to %{info}" }
			id => "msgParserId184"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId185
	# line in RSA:  { Cluster Interconnect | Interconnect } link <id> is DOWN
	else if [logstash][msgparser][id] == "msgParserId185" {
		grok {
			match => { "message" => "^[\s]*([\s]*Cluster[\s]+Interconnect[\s]+|[\s]*Interconnect[\s]+)[\s]+link[\s]+(?<id>[^\s]*)[\s]+is[\s]+DOWN$" }
			id => "msgParserId185"
			add_field => {
				"result" => "Interconnect link is DOWN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId186
	# line in RSA:  Interconnect link <fld1> is UP
	else if [logstash][msgparser][id] == "msgParserId186" {
		dissect {
			mapping => { "message" => "Interconnect link %{fld1} is UP" }
			id => "msgParserId186"
			add_field => {
				"result" => "Interconnect link is UP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId187
	# line in RSA:  Interconnect nic <fld1> has error on <interface>
	else if [logstash][msgparser][id] == "msgParserId187" {
		dissect {
			mapping => { "message" => "Interconnect nic %{fld1} has error on %{interface}" }
			id => "msgParserId187"
			add_field => {
				"result" => "Interconnect nic has error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId188
	# line in RSA:  Login to partner shell: <username>
	else if [logstash][msgparser][id] == "msgParserId188" {
		dissect {
			mapping => { "message" => "Login to partner shell: %{username}" }
			id => "msgParserId188"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "Login to partner shell"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId189
	# line in RSA:  Logoff from partner shell: <username>
	else if [logstash][msgparser][id] == "msgParserId189" {
		dissect {
			mapping => { "message" => "Logoff from partner shell: %{username}" }
			id => "msgParserId189"
			add_field => {
				"action" => "Logoff from partner shell"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId190
	# line in RSA:  Cluster monitor: giveback cancelled
	else if [logstash][msgparser][id] == "msgParserId190" {
		dissect {
			mapping => { "message" => "Cluster monitor: giveback cancelled" }
			id => "msgParserId190"
			add_field => {
				"result" => "giveback cancelled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId191
	# line in RSA:  Cluster monitor: cifs: giveback cancelled due to active state
	else if [logstash][msgparser][id] == "msgParserId191" {
		dissect {
			mapping => { "message" => "Cluster monitor: cifs: giveback cancelled due to active state" }
			id => "msgParserId191"
			add_field => {
				"result" => "giveback cancelled due to active statet"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId192
	# line in RSA:  Cluster monitor: takeover during license_check failed; takeover continuing...
	else if [logstash][msgparser][id] == "msgParserId192" {
		dissect {
			mapping => { "message" => "Cluster monitor: takeover during license_check failed; takeover continuing..." }
			id => "msgParserId192"
			add_field => {
				"result" => "takeover during license_check failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId193
	# line in RSA:  Reset cluster interconnect(s) due to <info>
	else if [logstash][msgparser][id] == "msgParserId193" {
		dissect {
			mapping => { "message" => "Reset cluster interconnect(s) due to %{info}" }
			id => "msgParserId193"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId194
	# line in RSA:  Connection for <hostname> failed
	else if [logstash][msgparser][id] == "msgParserId194" {
		dissect {
			mapping => { "message" => "Connection for %{hostname} failed" }
			id => "msgParserId194"
			add_field => {
				"result" => "Connection failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId195
	# line in RSA:  Cluster Interconnect: Version incompatible with cluster partner: <fld1> 
	else if [logstash][msgparser][id] == "msgParserId195" {
		dissect {
			mapping => { "message" => "Cluster Interconnect: Version incompatible with cluster partner: %{fld1}" }
			id => "msgParserId195"
			add_field => {
				"result" => "Version incompatible with cluster partner"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId196
	# line in RSA:  Warning: license setting for snapmirror is not the same on both systems
	else if [logstash][msgparser][id] == "msgParserId196" {
		dissect {
			mapping => { "message" => "Warning: license setting for snapmirror is not the same on both systems" }
			id => "msgParserId196"
			add_field => {
				"result" => "license setting for snapmirror is not the same on both systems"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "cf_takeover:info" {
		# MESSAGE 030053
		# line in RSA:  NVRAM takeover: partner nvram is disabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NVRAM takeover: partner nvram is disabled" }
				id => "message-030053"
				add_field => {
				"result" => "partner nvram is disabled"
					"[event][id]" => "030053"
					"[rsa][message][id1]" => "030053"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030053:01
		# line in RSA:  snapmirror: Cleanup invalid registry <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapmirror: Cleanup invalid registry %{event_description}" }
				id => "message-030053:01"
				add_field => {
				"result" => "Cleanup invalid registry value"
					"[event][id]" => "030053:01"
					"[rsa][message][id1]" => "030053:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId199
	# line in RSA:  CIFS: <id> - attempt to { create | delete } a { directory | file } for a CIFS client on a filer licensed for VLD.
	else if [logstash][msgparser][id] == "msgParserId199" {
		grok {
			match => { "message" => "^[\s]*CIFS:[\s]+(?<id>[^\s]*)[\s]+\-[\s]+attempt[\s]+to[\s]+([\s]*create[\s]+|[\s]*delete[\s]+)[\s]+a[\s]+([\s]*directory[\s]+|[\s]*file[\s]+)[\s]+for[\s]+a[\s]+CIFS[\s]+client[\s]+on[\s]+a[\s]+filer[\s]+licensed[\s]+for[\s]+VLD\.$" }
			id => "msgParserId199"
			add_field => {
				"result" => "invalid license for file/directory creation/deletion"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId200
	# line in RSA:  Autosaving the CIFS audit log file (<id>)
	else if [logstash][msgparser][id] == "msgParserId200" {
		dissect {
			mapping => { "message" => "Autosaving the CIFS audit log file (%{id})" }
			id => "msgParserId200"
			add_field => {
				"result" => "autosaving audit log file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId201
	# line in RSA:  ALF: CIFS auditing stopped.
	else if [logstash][msgparser][id] == "msgParserId201" {
		dissect {
			mapping => { "message" => "ALF: CIFS auditing stopped." }
			id => "msgParserId201"
			add_field => {
				"result" => "auditing stopped"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId202
	# line in RSA:  ALF: CIFS auditing started.
	else if [logstash][msgparser][id] == "msgParserId202" {
		dissect {
			mapping => { "message" => "ALF: CIFS auditing started." }
			id => "msgParserId202"
			add_field => {
				"result" => "auditing started"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId203
	# line in RSA:  ALF I/O information for file <filename> saved <fld2> records to audit file.
	else if [logstash][msgparser][id] == "msgParserId203" {
		dissect {
			mapping => { "message" => "ALF I/O information for file %{filename} saved %{fld2} records to audit file." }
			id => "msgParserId203"
			add_field => {
				"result" => "ALF I/O information for file saved"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId204
	# line in RSA:  ALF I/O warning for file <filename>: the audit log is empty.
	else if [logstash][msgparser][id] == "msgParserId204" {
		dissect {
			mapping => { "message" => "ALF I/O warning for file %{filename}: the audit log is empty." }
			id => "msgParserId204"
			add_field => {
				"result" => "ALF I/O warning - audit log is empty"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId205
	# line in RSA:  ALF: The limit of audit files at <fld1> has been reached. The oldest file will be deleted after each save.
	else if [logstash][msgparser][id] == "msgParserId205" {
		dissect {
			mapping => { "message" => "ALF: The limit of audit files at %{fld1} has been reached. The oldest file will be deleted after each save." }
			id => "msgParserId205"
			add_field => {
				"result" => "limit of audit files has been reached"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId206
	# line in RSA:  ALF: change to option <policy_value>: <info>
	else if [logstash][msgparser][id] == "msgParserId206" {
		dissect {
			mapping => { "message" => "ALF: change to option %{policy_value}: %{info}" }
			id => "msgParserId206"
			add_field => {
				"event_description" => "autosave file naming policy changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId207
	# line in RSA:  The internal CIFS audit log has wrapped. New events will replace older events in the log.
	else if [logstash][msgparser][id] == "msgParserId207" {
		dissect {
			mapping => { "message" => "The internal CIFS audit log has wrapped. New events will replace older events in the log." }
			id => "msgParserId207"
			add_field => {
				"result" => "audit log has wrapped"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId208
	# line in RSA:  <interface>: Error accessing CIFS configuration information in file <id>. Convert file contents: <fld1> <info>.
	else if [logstash][msgparser][id] == "msgParserId208" {
		dissect {
			mapping => { "message" => "%{interface}: Error accessing CIFS configuration information in file %{id}. Convert file contents: %{fld1} %{info}." }
			id => "msgParserId208"
			add_field => {
				"event_description" => "Error accessing CIFS configuration information"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId209
	# line in RSA:  CIFS GPO LDAP: The filer tries to LDAP search for filer GPOList. Error code: <fld1> No such object 
	else if [logstash][msgparser][id] == "msgParserId209" {
		dissect {
			mapping => { "message" => "CIFS GPO LDAP: The filer tries to LDAP search for filer GPOList. Error code: %{fld1} No such object" }
			id => "msgParserId209"
			add_field => {
				"result" => "CIFS GPO LDAP The filer tries to LDAP search for filer GPOList. Error code  No such object"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId210
	# line in RSA:  CIFS: <info>: <event_description>.
	else if [logstash][msgparser][id] == "msgParserId210" {
		dissect {
			mapping => { "message" => "CIFS: %{info}: %{event_description}." }
			id => "msgParserId210"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId211
	# line in RSA:  CIFS: Bad entry <interface> while processing home directory paths. <info>
	else if [logstash][msgparser][id] == "msgParserId211" {
		dissect {
			mapping => { "message" => "CIFS: Bad entry %{interface} while processing home directory paths. %{info}" }
			id => "msgParserId211"
			add_field => {
				"event_description" => "Bad entry while processing home directory paths"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId212
	# line in RSA:  Could not read the saved <obj_server> server information. <result>.
	else if [logstash][msgparser][id] == "msgParserId212" {
		dissect {
			mapping => { "message" => "Could not read the saved %{obj_server} server information. %{result}." }
			id => "msgParserId212"
			add_field => {
				"event_description" => "Could not read the saved server information"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId213
	# line in RSA:  <interface>: Could not update NetBios to FQN domain name mappings. <info>
	else if [logstash][msgparser][id] == "msgParserId213" {
		dissect {
			mapping => { "message" => "%{interface}: Could not update NetBios to FQN domain name mappings. %{info}" }
			id => "msgParserId213"
			add_field => {
				"event_description" => "Could not update NetBios to FQN domain name mappings"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId214
	# line in RSA:  <interface>: Cifs <id> operation 0x<device> is not supported on the filer. <event_description>
	else if [logstash][msgparser][id] == "msgParserId214" {
		dissect {
			mapping => { "message" => "%{interface}: Cifs %{id} operation 0x%{device} is not supported on the filer. %{event_description}" }
			id => "msgParserId214"
			add_field => {
				"result" => "operation is not supportedby the filer"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId215
	# line in RSA:  CIFS: Cifs transact request <fld> is not supported on the filer. The request came from client <interface> and provided these parameters, setup word count: <fld1> total data bytes: <fld2> total request size: <fld3>.
	else if [logstash][msgparser][id] == "msgParserId215" {
		dissect {
			mapping => { "message" => "CIFS: Cifs transact request %{fld} is not supported on the filer. The request came from client %{interface} and provided these parameters, setup word count: %{fld1} total data bytes: %{fld2} total request size: %{fld3}." }
			id => "msgParserId215"
			add_field => {
				"result" => "transact request is not supported"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId216
	# line in RSA:  CIFS: Cifs operation <fld> is not supported on the filer.
	else if [logstash][msgparser][id] == "msgParserId216" {
		dissect {
			mapping => { "message" => "CIFS: Cifs operation %{fld} is not supported on the filer." }
			id => "msgParserId216"
			add_field => {
				"result" => "CIFS operation not supported"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId217
	# line in RSA:  CIFS: An oplock break request to station <fld1> for filer <fld2>, share <fld3>, file <fld4> has timed out.
	else if [logstash][msgparser][id] == "msgParserId217" {
		dissect {
			mapping => { "message" => "CIFS: An oplock break request to station %{fld1} for filer %{fld2}, share %{fld3}, file %{fld4} has timed out." }
			id => "msgParserId217"
			add_field => {
				"result" => "shared file timed out"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId218
	# line in RSA: CIFS: Error on named pipe with <hostname>: <info> 
	else if [logstash][msgparser][id] == "msgParserId218" {
		dissect {
			mapping => { "message" => "CIFS: Error on named pipe with %{hostname}: %{info}" }
			id => "msgParserId218"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "cifs.server.errorMsg:error" {
		# MESSAGE 040716:01
		# line in RSA: <service>: Error for server <hostname>: Error in session setup response <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}: Error for server %{hostname}: Error in session setup response %{result}" }
				id => "message-040716:01"
				add_field => {
				"event_description" => "Error for Server"
					"[event][id]" => "040716:01"
					"[rsa][message][id1]" => "040716:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040716:02
		# line in RSA: <service>: Error for server <hostname>: CIFS Session Setup Error <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}: Error for server %{hostname}: CIFS Session Setup Error %{result}" }
				id => "message-040716:02"
				add_field => {
				"event_description" => "Error for Server"
					"[event][id]" => "040716:02"
					"[rsa][message][id1]" => "040716:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040716
		# line in RSA: <service>: <action>: Server name is missing or not valid.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}: %{action}: Server name is missing or not valid." }
				id => "message-040716"
				add_field => {
				"event_description" => "Server name is missing or not valid."
					"[event][id]" => "040716"
					"[rsa][message][id1]" => "040716"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId222
	# line in RSA:  <interface>: Warning for server <hostname>: <info>.
	else if [logstash][msgparser][id] == "msgParserId222" {
		dissect {
			mapping => { "message" => "%{interface}: Warning for server %{hostname}: %{info}." }
			id => "msgParserId222"
			add_field => {
				"event_description" => "Server warning"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId223
	# line in RSA:  CIFS: <event_description>. <info> "<interface>"
	else if [logstash][msgparser][id] == "msgParserId223" {
		dissect {
			mapping => { "message" => "CIFS: %{event_description}. %{info} \"%{interface}\"" }
			id => "msgParserId223"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId224
	# line in RSA:  CIFS: <info>
	else if [logstash][msgparser][id] == "msgParserId224" {
		dissect {
			mapping => { "message" => "CIFS: %{info}" }
			id => "msgParserId224"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId225
	# line in RSA:  CIFS: CIFS did not shut down: <event_description>
	else if [logstash][msgparser][id] == "msgParserId225" {
		dissect {
			mapping => { "message" => "CIFS: CIFS did not shut down: %{event_description}" }
			id => "msgParserId225"
			add_field => {
				"result" => "CIFS did not shut down - users with open files on partner node"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId226
	# line in RSA:  CIFS: shut down completed: 
	else if [logstash][msgparser][id] == "msgParserId226" {
		dissect {
			mapping => { "message" => "CIFS: shut down completed:" }
			id => "msgParserId226"
			add_field => {
				"result" => "CIFS: shut down completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId227
	# line in RSA: CIFS: Info for client connection <daddr>: Too busy to accept new client logons.
	else if [logstash][msgparser][id] == "msgParserId227" {
		dissect {
			mapping => { "message" => "CIFS: Info for client connection %{daddr}: Too busy to accept new client logons." }
			id => "msgParserId227"
			add_field => {
				"action" => "Too busy to accept new client logons"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId228
	# line in RSA:  AUTH: Unable to acquire filer credentials: <info>
	else if [logstash][msgparser][id] == "msgParserId228" {
		dissect {
			mapping => { "message" => "AUTH: Unable to acquire filer credentials: %{info}" }
			id => "msgParserId228"
			add_field => {
				"event_description" => "Unable to acquire filer credentials"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId229
	# line in RSA:  CIFS: Invalid entry in <id>, <event_description>.
	else if [logstash][msgparser][id] == "msgParserId229" {
		dissect {
			mapping => { "message" => "CIFS: Invalid entry in %{id}, %{event_description}." }
			id => "msgParserId229"
			add_field => {
				"result" => "Invalid entry in config"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId230
	# line in RSA:  CIFS: The <id> file has been reloaded. <event_description>
	else if [logstash][msgparser][id] == "msgParserId230" {
		dissect {
			mapping => { "message" => "CIFS: The %{id} file has been reloaded. %{event_description}" }
			id => "msgParserId230"
			add_field => {
				"result" => "file has been reloaded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId231
	# line in RSA:  oplock break timed out to station <hostname> for file <username> 
	else if [logstash][msgparser][id] == "msgParserId231" {
		dissect {
			mapping => { "message" => "oplock break timed out to station %{hostname} for file %{username}" }
			id => "msgParserId231"
			add_field => {
				"result" => "oplock break timed out"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId232
	# line in RSA: CIFS - Filer's security information differs from domain controller 
	else if [logstash][msgparser][id] == "msgParserId232" {
		dissect {
			mapping => { "message" => "CIFS - Filer's security information differs from domain controller" }
			id => "msgParserId232"
			add_field => {
				"result" => "security information differs from domain controller"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "CIFSAuthen:info" {
		# MESSAGE 002015
		# line in RSA:  Attempting authentication with DC <shost> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attempting authentication with DC %{shost}" }
				id => "message-002015"
				add_field => {
				"ec_theme" => "Authentication"
				"action" => "authentication attempt"
					"[event][id]" => "002015"
					"[rsa][message][id1]" => "002015"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002020
		# line in RSA:  Attempting to map PC user name to UNIX user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attempting to map PC user name to UNIX user %{username}" }
				id => "message-002020"
				add_field => {
				"action" => "PC to UNIX name mapping"
					"[event][id]" => "002020"
					"[rsa][message][id1]" => "002020"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002025
		# line in RSA:  CIFS - Filer retrying { authentication with backup password | authentication }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*CIFS[\s]+\-[\s]+Filer[\s]+retrying[\s]+([\s]*authentication[\s]+with[\s]+backup[\s]+password[\s]+|[\s]*authentication[\s]+)$" }
				id => "message-002025"
				add_field => {
				"action" => "CIFS - Filer retrying authentication"
					"[event][id]" => "002025"
					"[rsa][message][id1]" => "002025"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002026
		# line in RSA: CIFS - Filer retrying installation
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS - Filer retrying installation" }
				id => "message-002026"
				add_field => {
				"action" => "CIFS - Filer retrying installation"
					"[event][id]" => "002026"
					"[rsa][message][id1]" => "002026"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002030
		# line in RSA:  CIFS - machine password changed on DC <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS - machine password changed on DC %{shost}" }
				id => "message-002030"
				add_field => {
				"action" => "machine password changed"
					"[event][id]" => "002030"
					"[rsa][message][id1]" => "002030"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002040
		# line in RSA: Connection with DC <shost> established
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connection with DC %{shost} established" }
				id => "message-002040"
				add_field => {
				"action" => "connection established"
					"[event][id]" => "002040"
					"[rsa][message][id1]" => "002040"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002041
		# line in RSA:  Connection with DC <shost> terminated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connection with DC %{shost} terminated" }
				id => "message-002041"
				add_field => {
				"action" => "connection terminated"
					"[event][id]" => "002041"
					"[rsa][message][id1]" => "002041"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002050
		# line in RSA:  DC indicates user not from trusted domain
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DC indicates user not from trusted domain" }
				id => "message-002050"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
				"action" => "untrusted user"
					"[event][id]" => "002050"
					"[rsa][message][id1]" => "002050"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002060
		# line in RSA:  Error in passwd look up of user_id <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error in passwd look up of user_id %{username}" }
				id => "message-002060"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "Service"
				"ec_outcome" => "Failure"
				"action" => "error in password lookup"
					"[event][id]" => "002060"
					"[rsa][message][id1]" => "002060"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002070
		# line in RSA:  Located account "<fld1>\<username>" in domain "<domain>".
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Located account \"%{fld1}\%{username}\" in domain \"%{domain}\"." }
				id => "message-002070"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
				"action" => "account located"
					"[event][id]" => "002070"
					"[rsa][message][id1]" => "002070"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002080
		# line in RSA:  Login accepted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login accepted" }
				id => "message-002080"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"action" => "Login accepted"
					"[event][id]" => "002080"
					"[rsa][message][id1]" => "002080"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002090
		# line in RSA:  Login attempt by <fld1>\<username> from <hostname>(<saddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login attempt by %{fld1}\%{username} from %{hostname}(%{saddr})" }
				id => "message-002090"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"action" => "attempted login"
					"[event][id]" => "002090"
					"[rsa][message][id1]" => "002090"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002100
		# line in RSA:  login rejected because guest account not set
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "login rejected because guest account not set" }
				id => "message-002100"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"action" => "login rejected - guest account not set"
					"[event][id]" => "002100"
					"[rsa][message][id1]" => "002100"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002110
		# line in RSA: Lookup of account "<fld1>\<username>" failed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of account \"%{fld1}\%{username}\" failed." }
				id => "message-002110"
				add_field => {
				"action" => "account lookup failed"
					"[event][id]" => "002110"
					"[rsa][message][id1]" => "002110"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002120
		# line in RSA:  NULL user login accepted from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NULL user login accepted from %{saddr}" }
				id => "message-002120"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"action" => "user login accepted"
					"[event][id]" => "002120"
					"[rsa][message][id1]" => "002120"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002130
		# line in RSA:  PC user name maps to generic account
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PC user name maps to generic account" }
				id => "message-002130"
				add_field => {
				"action" => "PC user name mapped"
					"[event][id]" => "002130"
					"[rsa][message][id1]" => "002130"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002140
		# line in RSA:  Unix user changed to <fld1> by <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unix user changed to %{fld1} by %{username}" }
				id => "message-002140"
				add_field => {
				"action" => "Unix user changed"
					"[event][id]" => "002140"
					"[rsa][message][id1]" => "002140"
					"[event][categoryid]" => "1503020200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 002150
		# line in RSA:  User authenticated by DC
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User authenticated by DC" }
				id => "message-002150"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
				"action" => "user authenticated"
					"[event][id]" => "002150"
					"[rsa][message][id1]" => "002150"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "CIFSAuthen" {
		# MESSAGE 003000
		# line in RSA:  CIFS - can't make TCP connection with domain controller <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS - can't make TCP connection with domain controller %{shost}" }
				id => "message-003000"
				add_field => {
				"action" => "failed TCP connection to domain controller"
					"[event][id]" => "003000"
					"[rsa][message][id1]" => "003000"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 003010
		# line in RSA:  Connection with DC <shost> terminated 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connection with DC %{shost} terminated" }
				id => "message-003010"
				add_field => {
				"action" => "connection terminated"
					"[event][id]" => "003010"
					"[rsa][message][id1]" => "003010"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 003020
		# line in RSA:  NBT: NETBIOS conflict on name <hostname> ip1 <saddr> ip2 <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NBT: NETBIOS conflict on name %{hostname} ip1 %{saddr} ip2 %{daddr}" }
				id => "message-003020"
				add_field => {
				"action" => "NETBIOS conflict"
					"[event][id]" => "003020"
					"[rsa][message][id1]" => "003020"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId253
	# line in RSA: Connection with DC <shost>  terminated 
	else if [logstash][msgparser][id] == "msgParserId253" {
		dissect {
			mapping => { "message" => "Connection with DC %{shost}  terminated" }
			id => "msgParserId253"
			add_field => {
				"result" => "Connection with DC host terminated"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId254
	# line in RSA:  <interface>: <info> to <id>.
	else if [logstash][msgparser][id] == "msgParserId254" {
		dissect {
			mapping => { "message" => "%{interface}: %{info} to %{id}." }
			id => "msgParserId254"
			add_field => {
				"event_description" => "trace file written"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId255
	# line in RSA:  <interface>: Installation of <id> was completed.
	else if [logstash][msgparser][id] == "msgParserId255" {
		dissect {
			mapping => { "message" => "%{interface}: Installation of %{id} was completed." }
			id => "msgParserId255"
			add_field => {
				"result" => "Installation was completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId256
	# line in RSA:  <interface>: Installation of <id> failed.
	else if [logstash][msgparser][id] == "msgParserId256" {
		dissect {
			mapping => { "message" => "%{interface}: Installation of %{id} failed." }
			id => "msgParserId256"
			add_field => {
				"result" => "Installation failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId257
	# line in RSA:  <interface>: Validating configuration.
	else if [logstash][msgparser][id] == "msgParserId257" {
		dissect {
			mapping => { "message" => "%{interface}: Validating configuration." }
			id => "msgParserId257"
			add_field => {
				"result" => "Validating configuration"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId258
	# line in RSA:  <info>: <device>.
	else if [logstash][msgparser][id] == "msgParserId258" {
		dissect {
			mapping => { "message" => "%{info}: %{device}." }
			id => "msgParserId258"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId259
	# line in RSA:  Console context was switched to a vFiler(tm) unit <hostname>.
	else if [logstash][msgparser][id] == "msgParserId259" {
		dissect {
			mapping => { "message" => "Console context was switched to a vFiler(tm) unit %{hostname}." }
			id => "msgParserId259"
			add_field => {
				"result" => "Console context was switched to a vFiler unit "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId260
	# line in RSA:  Path <id> was moved to vFiler unit "<username>".
	else if [logstash][msgparser][id] == "msgParserId260" {
		dissect {
			mapping => { "message" => "Path %{id} was moved to vFiler unit \"%{username}\"." }
			id => "msgParserId260"
			add_field => {
				"result" => "Path was moved to vFiler unit"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "console_login_mgr:debug" {
		# MESSAGE 040717
		# line in RSA:  <c_username>:<action>:error:Login failed { for an | for } <username> from IP <saddr>. reason "<result>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<c_username>[^:]*):(?<action>[^:]*):error:Login[\s]+failed[\s]+([\s]*for[\s]+an[\s]+|[\s]*for[\s]+)[\s]+(?<username>[^\s]*)[\s]+from[\s]+IP[\s]+(?<saddr>[^\.]*)\.[\s]+reason[\s]+\"(?<result>[^\"]*)\"$" }
				id => "message-040717"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failed for user"
					"[event][id]" => "040717"
					"[rsa][message][id1]" => "040717"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040718
		# line in RSA:  <username>:<action>:console shell: <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:%{action}:console shell: %{disposition}" }
				id => "message-040718"
				add_field => {
				"event_description" => "console shell command"
					"[event][id]" => "040718"
					"[rsa][message][id1]" => "040718"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId263
	# line in RSA:  <username> logged in from <terminal>
	else if [logstash][msgparser][id] == "msgParserId263" {
		dissect {
			mapping => { "message" => "%{username} logged in from %{terminal}" }
			id => "msgParserId263"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "User log in"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId264
	# line in RSA:  too many bad logins on console
	else if [logstash][msgparser][id] == "msgParserId264" {
		dissect {
			mapping => { "message" => "too many bad logins on console" }
			id => "msgParserId264"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "too many bad logins on console"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId265
	# line in RSA:  No unsaved cores could be found
	else if [logstash][msgparser][id] == "msgParserId265" {
		dissect {
			mapping => { "message" => "No unsaved cores could be found" }
			id => "msgParserId265"
			add_field => {
				"result" => "unsaved core not found"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId266
	# line in RSA:  No sparecore disk was found for host <shost>
	else if [logstash][msgparser][id] == "msgParserId266" {
		dissect {
			mapping => { "message" => "No sparecore disk was found for host %{shost}" }
			id => "msgParserId266"
			add_field => {
				"event_description" => "No sparecore disk was found for host"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId267
	# line in RSA:  <id> generation completed 
	else if [logstash][msgparser][id] == "msgParserId267" {
		dissect {
			mapping => { "message" => "%{id} generation completed" }
			id => "msgParserId267"
			add_field => {
				"result" => "file generation completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId268
	# line in RSA:  Core file is missing minicore data
	else if [logstash][msgparser][id] == "msgParserId268" {
		dissect {
			mapping => { "message" => "Core file is missing minicore data" }
			id => "msgParserId268"
			add_field => {
				"result" => "coredump missing data failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId269
	# line in RSA:  Generation of <id> failed
	else if [logstash][msgparser][id] == "msgParserId269" {
		dissect {
			mapping => { "message" => "Generation of %{id} failed" }
			id => "msgParserId269"
			add_field => {
				"result" => "generating mini coredump failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId270
	# line in RSA:  Generating <id> 
	else if [logstash][msgparser][id] == "msgParserId270" {
		dissect {
			mapping => { "message" => "Generating %{id}" }
			id => "msgParserId270"
			add_field => {
				"result" => "generating mini coredump"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId271
	# line in RSA:  <id> processing completed
	else if [logstash][msgparser][id] == "msgParserId271" {
		dissect {
			mapping => { "message" => "%{id} processing completed" }
			id => "msgParserId271"
			add_field => {
				"result" => "coredump completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId272
	# line in RSA:  Saving <fld1> to <id> ("<fld2>") via sparecore
	else if [logstash][msgparser][id] == "msgParserId272" {
		dissect {
			mapping => { "message" => "Saving %{fld1} to %{id} (\"%{fld2}\") via sparecore" }
			id => "msgParserId272"
			add_field => {
				"result" => "coredump save startedd"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId273
	# line in RSA:  No sparecore disk was found.
	else if [logstash][msgparser][id] == "msgParserId273" {
		dissect {
			mapping => { "message" => "No sparecore disk was found." }
			id => "msgParserId273"
			add_field => {
				"result" => "No sparecore disk was found"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId274
	# line in RSA:  Lookup of <hostname> failed with DNS server <id>: <info>.
	else if [logstash][msgparser][id] == "msgParserId274" {
		dissect {
			mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{id}: %{info}." }
			id => "msgParserId274"
			add_field => {
				"event_description" => "Lookup failed with DNS server"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId275
	# line in RSA:  Now downloading firmware file <id> on <fld1> 
	else if [logstash][msgparser][id] == "msgParserId275" {
		dissect {
			mapping => { "message" => "Now downloading firmware file %{id} on %{fld1}" }
			id => "msgParserId275"
			add_field => {
				"result" => "downloading firmware file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId276
	# line in RSA:  Firmware is up-to-date on all disk drives
	else if [logstash][msgparser][id] == "msgParserId276" {
		dissect {
			mapping => { "message" => "Firmware is up-to-date on all disk drives" }
			id => "msgParserId276"
			add_field => {
				"result" => "Firmware up-to-date"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId277
	# line in RSA:  Firmware downloaded to Disk <id> [NETAPP <fld1>] S/N [<fld2>] successfully.
	else if [logstash][msgparser][id] == "msgParserId277" {
		dissect {
			mapping => { "message" => "Firmware downloaded to Disk %{id} [NETAPP %{fld1}] S/N [%{fld2}] successfully." }
			id => "msgParserId277"
			add_field => {
				"result" => "Firmware downloaded to Disk successfully"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId278
	# line in RSA:  <fld1> disks have downrev firmware that you need to update.
	else if [logstash][msgparser][id] == "msgParserId278" {
		dissect {
			mapping => { "message" => "%{fld1} disks have downrev firmware that you need to update." }
			id => "msgParserId278"
			add_field => {
				"result" => "disks have downrev firmware that you need to update"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId279
	# line in RSA:  Disk <id> received NHT health trigger (<fld2>) 
	else if [logstash][msgparser][id] == "msgParserId279" {
		dissect {
			mapping => { "message" => "Disk %{id} received NHT health trigger (%{fld2})" }
			id => "msgParserId279"
			add_field => {
				"result" => "Disk received NHT health trigger"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId280
	# line in RSA:  Disk <id> failed due to failure byte setting.
	else if [logstash][msgparser][id] == "msgParserId280" {
		dissect {
			mapping => { "message" => "Disk %{id} failed due to failure byte setting." }
			id => "msgParserId280"
			add_field => {
				"result" => "Disk failure byte setting"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId281
	# line in RSA:  Medium error on disk <fld>: op <fld1> sector <fld2> SCSI:medium error { - Unrecovered read error | - } - RAID subsystem will use parity information to reconstruct unreadable data (<fld3>)
	else if [logstash][msgparser][id] == "msgParserId281" {
		grok {
			match => { "message" => "^[\s]*Medium[\s]+error[\s]+on[\s]+disk[\s]+(?<fld>[^:]*):[\s]+op[\s]+(?<fld1>[^\s]*)[\s]+sector[\s]+(?<fld2>[^\s]*)[\s]+SCSI:medium[\s]+error[\s]+([\s]*\-[\s]+Unrecovered[\s]+read[\s]+error[\s]+|[\s]*\-[\s]+)[\s]+\-[\s]+RAID[\s]+subsystem[\s]+will[\s]+use[\s]+parity[\s]+information[\s]+to[\s]+reconstruct[\s]+unreadable[\s]+data[\s]+\((?<fld3>[^\)]*)\)$" }
			id => "msgParserId281"
			add_field => {
				"result" => "error on disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId282
	# line in RSA: disk <fld30>: sector <fld1> was NOT reassigned
	else if [logstash][msgparser][id] == "msgParserId282" {
		dissect {
			mapping => { "message" => "disk %{fld30}: sector %{fld1} was NOT reassigned" }
			id => "msgParserId282"
			add_field => {
				"result" => "disk io NOT reassigned"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId283
	# line in RSA:  disk <device>: sector <fld1> was reassigned
	else if [logstash][msgparser][id] == "msgParserId283" {
		dissect {
			mapping => { "message" => "disk %{device}: sector %{fld1} was reassigned" }
			id => "msgParserId283"
			add_field => {
				"event_description" => "disk device io reassigned"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId284
	# line in RSA: Recovered error predictive failure alert on disk <fld30>: op <fld1> sector <fld2> SCSI:recovered error - Disk reports predicted failure event (<fld3>) 
	else if [logstash][msgparser][id] == "msgParserId284" {
		dissect {
			mapping => { "message" => "Recovered error predictive failure alert on disk %{fld30}: op %{fld1} sector %{fld2} SCSI:recovered error - Disk reports predicted failure event (%{fld3})" }
			id => "msgParserId284"
			add_field => {
				"result" => "disk io recovered"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId285
	# line in RSA: Recovered error on disk <fld30>: op <fld1> sector <fld2> SCSI:recovered error - Disk automatically reassigned data (<fld3>) 
	else if [logstash][msgparser][id] == "msgParserId285" {
		dissect {
			mapping => { "message" => "Recovered error on disk %{fld30}: op %{fld1} sector %{fld2} SCSI:recovered error - Disk automatically reassigned data (%{fld3})" }
			id => "msgParserId285"
			add_field => {
				"result" => "disk io recovered"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId286
	# line in RSA:  Disk read reservation failed on <id> { CDB <fld1> - <event_description> | with <event_description> } 
	else if [logstash][msgparser][id] == "msgParserId286" {
		grok {
			match => { "message" => "^[\s]*Disk[\s]+read[\s]+reservation[\s]+failed[\s]+on[\s]+(?<id>[^\s]*)[\s]+([\s]*CDB[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+(?<event_description>[^\s]*)[\s]+|[\s]*with[\s]+(?<event_description>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId286"
			add_field => {
				"result" => "Disk read reservation failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId287
	# line in RSA: The partner has failed <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId287" {
		dissect {
			mapping => { "message" => "The partner has failed %{fld1}." }
			id => "msgParserId287"
			add_field => {
				"result" => "The partner has failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId288
	# line in RSA: Recovered error on disk <fld30>: op <fld1> sector <fld2> SCSI:recovered error - Disk used internal retry algorithm to obtain data (<fld3>)
	else if [logstash][msgparser][id] == "msgParserId288" {
		dissect {
			mapping => { "message" => "Recovered error on disk %{fld30}: op %{fld1} sector %{fld2} SCSI:recovered error - Disk used internal retry algorithm to obtain data (%{fld3})" }
			id => "msgParserId288"
			add_field => {
				"result" => "disk io recovered"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId289
	# line in RSA:  Disk release failed on <interface> with return code <fld1>.
	else if [logstash][msgparser][id] == "msgParserId289" {
		dissect {
			mapping => { "message" => "Disk release failed on %{interface} with return code %{fld1}." }
			id => "msgParserId289"
			add_field => {
				"result" => "Disk release failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId290
	# line in RSA:  Disk reservation failed on <id> (return code <fld1>).
	else if [logstash][msgparser][id] == "msgParserId290" {
		dissect {
			mapping => { "message" => "Disk reservation failed on %{id} (return code %{fld1})." }
			id => "msgParserId290"
			add_field => {
				"result" => "Disk reservation failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId291
	# line in RSA:  Difficulty reading disk <fld> with the command <fld1> Rewriting the data.
	else if [logstash][msgparser][id] == "msgParserId291" {
		dissect {
			mapping => { "message" => "Difficulty reading disk %{fld} with the command %{fld1} Rewriting the data." }
			id => "msgParserId291"
			add_field => {
				"result" => "Difficulty reading disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId292
	# line in RSA:  Finished rewriting <fld> on disk <fld1> No further action required.
	else if [logstash][msgparser][id] == "msgParserId292" {
		dissect {
			mapping => { "message" => "Finished rewriting %{fld} on disk %{fld1} No further action required." }
			id => "msgParserId292"
			add_field => {
				"result" => "Finished rewriting on disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId293
	# line in RSA:  changing ownership for disk <id> (S/N <fld1>) from <fld2> to <fld3>
	else if [logstash][msgparser][id] == "msgParserId293" {
		dissect {
			mapping => { "message" => "changing ownership for disk %{id} (S/N %{fld1}) from %{fld2} to %{fld3}" }
			id => "msgParserId293"
			add_field => {
				"result" => "changing ownership for disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId294
	# line in RSA:  error <device> (no valid path to disk) on disk <id> <event_description>
	else if [logstash][msgparser][id] == "msgParserId294" {
		dissect {
			mapping => { "message" => "error %{device} (no valid path to disk) on disk %{id} %{event_description}" }
			id => "msgParserId294"
			add_field => {
				"result" => "disk error - no valid path to disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId295
	# line in RSA:  error <fld1> (disk failed) while reading ownership on disk <id> (S/N <fld2>)
	else if [logstash][msgparser][id] == "msgParserId295" {
		dissect {
			mapping => { "message" => "error %{fld1} (disk failed) while reading ownership on disk %{id} (S/N %{fld2})" }
			id => "msgParserId295"
			add_field => {
				"result" => "disk failed while reading ownership on disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId296
	# line in RSA:  software ownership has been enabled for this system
	else if [logstash][msgparser][id] == "msgParserId296" {
		dissect {
			mapping => { "message" => "software ownership has been enabled for this system" }
			id => "msgParserId296"
			add_field => {
				"event_description" => "software ownership has been enabled for this system"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId297
	# line in RSA:  Could not send rescan message to <hostname>. <event_description>
	else if [logstash][msgparser][id] == "msgParserId297" {
		dissect {
			mapping => { "message" => "Could not send rescan message to %{hostname}. %{event_description}" }
			id => "msgParserId297"
			add_field => {
				"result" => "Could not send rescan message"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId298
	# line in RSA: <message> 
	else if [logstash][msgparser][id] == "msgParserId298" {
		dissect {
			mapping => { "message" => "%{message}" }
			id => "msgParserId298"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId299
	# line in RSA:  Operator requested download initiated
	else if [logstash][msgparser][id] == "msgParserId299" {
		dissect {
			mapping => { "message" => "Operator requested download initiated" }
			id => "msgParserId299"
			add_field => {
				"result" => "Operator requested download"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId300
	# line in RSA:  Operator requested download completed
	else if [logstash][msgparser][id] == "msgParserId300" {
		dissect {
			mapping => { "message" => "Operator requested download completed" }
			id => "msgParserId300"
			add_field => {
				"result" => "Operator requested download completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId301
	# line in RSA:  Bootblock update completed
	else if [logstash][msgparser][id] == "msgParserId301" {
		dissect {
			mapping => { "message" => "Bootblock update completed" }
			id => "msgParserId301"
			add_field => {
				"result" => "bootblock update completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId302
	# line in RSA:  Begin bootblock update, prototype is <fld>
	else if [logstash][msgparser][id] == "msgParserId302" {
		dissect {
			mapping => { "message" => "Begin bootblock update, prototype is %{fld}" }
			id => "msgParserId302"
			add_field => {
				"result" => "bootblock update started"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId303
	# line in RSA: Firmware is up-to-date on all disk drives 
	else if [logstash][msgparser][id] == "msgParserId303" {
		dissect {
			mapping => { "message" => "Firmware is up-to-date on all disk drives" }
			id => "msgParserId303"
			add_field => {
				"result" => "Firmware is up-to-date on all disk drives"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId304
	# line in RSA:  Replay ends for EMS boot-time cache
	else if [logstash][msgparser][id] == "msgParserId304" {
		dissect {
			mapping => { "message" => "Replay ends for EMS boot-time cache" }
			id => "msgParserId304"
			add_field => {
				"result" => "Replay ends for boot-time cache"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId305
	# line in RSA:  <device> consecutive events dropped at the <id> since <fld2>.
	else if [logstash][msgparser][id] == "msgParserId305" {
		dissect {
			mapping => { "message" => "%{device} consecutive events dropped at the %{id} since %{fld2}." }
			id => "msgParserId305"
			add_field => {
				"result" => "Events dropped"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId306
	# line in RSA:  Event '<username>' suppressed <fld1> times since <fld2>.
	else if [logstash][msgparser][id] == "msgParserId306" {
		dissect {
			mapping => { "message" => "Event '%{username}' suppressed %{fld1} times since %{fld2}." }
			id => "msgParserId306"
			add_field => {
				"result" => "Event suppressed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId307
	# line in RSA:  Event '<event_type>' suppressed <result> 
	else if [logstash][msgparser][id] == "msgParserId307" {
		dissect {
			mapping => { "message" => "Event '%{event_type}' suppressed %{result}" }
			id => "msgParserId307"
			add_field => {
				"event_description" => "Event suppressed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId308
	# line in RSA:  Cannot generate an SNMP trap for event '<id>' because the queue is full.
	else if [logstash][msgparser][id] == "msgParserId308" {
		dissect {
			mapping => { "message" => "Cannot generate an SNMP trap for event '%{id}' because the queue is full." }
			id => "msgParserId308"
			add_field => {
				"result" => "Cannot generate an SNMP trap for event - queue full"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "esh.bypass.err.disk:error" {
		# MESSAGE 040605
		# line in RSA:  Disk id <id> on channels <interface> shelf id <fld1> bay <fld2> Bypassed due to the drive self bypass
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk id %{id} on channels %{interface} shelf id %{fld1} bay %{fld2} Bypassed due to the drive self bypass" }
				id => "message-040605"
				add_field => {
				"result" => "Disk Bypassed due to the drive self bypass"
					"[event][id]" => "040605"
					"[rsa][message][id1]" => "040605"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030195
		# line in RSA:  Disk id <id> on channels <fld1> Bypassed due to loop test before insert failure
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk id %{id} on channels %{fld1} Bypassed due to loop test before insert failure" }
				id => "message-030195"
				add_field => {
				"result" => "Disk bypassed due to loop test before insert failure"
					"[event][id]" => "030195"
					"[rsa][message][id1]" => "030195"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId311
	# line in RSA:  { Disk id <id> | [OUT] port } on channels <interface> reports <fld1>
	else if [logstash][msgparser][id] == "msgParserId311" {
		grok {
			match => { "message" => "^[\s]*([\s]*Disk[\s]+id[\s]+(?<id>[^\s]*)[\s]+|[\s]*\[OUT\][\s]+port[\s]+)[\s]+on[\s]+channels[\s]+(?<interface>[^\s]*)[\s]+reports[\s]+(?<fld1>.*)$" }
			id => "msgParserId311"
			add_field => {
				"result" => "Disk or port reports error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId312
	# line in RSA:  Disk <id> [NETAPP <fld1>] S/N [<fld2>] Bypassed due to loop test before insert failure
	else if [logstash][msgparser][id] == "msgParserId312" {
		dissect {
			mapping => { "message" => "Disk %{id} [NETAPP %{fld1}] S/N [%{fld2}] Bypassed due to loop test before insert failure" }
			id => "msgParserId312"
			add_field => {
				"result" => "Disk bypassed due to loop test before insert failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId313
	# line in RSA:  <info> on channels <id>
	else if [logstash][msgparser][id] == "msgParserId313" {
		dissect {
			mapping => { "message" => "%{info} on channels %{id}" }
			id => "msgParserId313"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId314
	# line in RSA:  { Disk id <fld1> | [OUT] port } on channels <interface> reports <id>
	else if [logstash][msgparser][id] == "msgParserId314" {
		grok {
			match => { "message" => "^[\s]*([\s]*Disk[\s]+id[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*\[OUT\][\s]+port[\s]+)[\s]+on[\s]+channels[\s]+(?<interface>[^\s]*)[\s]+reports[\s]+(?<id>.*)$" }
			id => "msgParserId314"
			add_field => {
				"result" => "Disk or port reports error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId315
	# line in RSA:  ESH A I/O failure UNREACHABLE channels <id>
	else if [logstash][msgparser][id] == "msgParserId315" {
		dissect {
			mapping => { "message" => "ESH A I/O failure UNREACHABLE channels %{id}" }
			id => "msgParserId315"
			add_field => {
				"result" => "ESH I/O failure - UNREACHABLE channels"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId316
	# line in RSA:  <interface> was not updated for <fld30> when the vol create command was run. 
	else if [logstash][msgparser][id] == "msgParserId316" {
		dissect {
			mapping => { "message" => "%{interface} was not updated for %{fld30} when the vol create command was run." }
			id => "msgParserId316"
			add_field => {
				"result" => "exports file not updated"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId317
	# line in RSA:  The threshold (<fld1>) on the number of entries in the <id> file was reached.
	else if [logstash][msgparser][id] == "msgParserId317" {
		dissect {
			mapping => { "message" => "The threshold (%{fld1}) on the number of entries in the %{id} file was reached." }
			id => "msgParserId317"
			add_field => {
				"result" => "threshold of entries reached"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool00:debug" {
		# MESSAGE 030116
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030116"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030116"
					"[rsa][message][id1]" => "030116"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030116:01
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030116:01"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030116:01"
					"[rsa][message][id1]" => "030116:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030116:02
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030116:02"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030116:02"
					"[rsa][message][id1]" => "030116:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool01:debug" {
		# MESSAGE 030102
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030102"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030102"
					"[rsa][message][id1]" => "030102"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030102:01
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030102:01"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030102:01"
					"[rsa][message][id1]" => "030102:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030102:02
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030102:02"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030102:02"
					"[rsa][message][id1]" => "030102:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool02:debug" {
		# MESSAGE 030100
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030100"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030100"
					"[rsa][message][id1]" => "030100"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030100:01
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030100:01"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030100:01"
					"[rsa][message][id1]" => "030100:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030100:02
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030100:02"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030100:02"
					"[rsa][message][id1]" => "030100:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool03:debug" {
		# MESSAGE 030099
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030099"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030099"
					"[rsa][message][id1]" => "030099"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030099:01
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030099:01"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030099:01"
					"[rsa][message][id1]" => "030099:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030099:02
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030099:02"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030099:02"
					"[rsa][message][id1]" => "030099:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool04:debug" {
		# MESSAGE 030096
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030096"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030096"
					"[rsa][message][id1]" => "030096"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030096:01
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030096:01"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030096:01"
					"[rsa][message][id1]" => "030096:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030096:02
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030096:02"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030096:02"
					"[rsa][message][id1]" => "030096:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool05:debug" {
		# MESSAGE 030095
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030095"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030095"
					"[rsa][message][id1]" => "030095"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030095:01
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030095:01"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030095:01"
					"[rsa][message][id1]" => "030095:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030095:02
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030095:02"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030095:02"
					"[rsa][message][id1]" => "030095:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId319
	# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
	else if [logstash][msgparser][id] == "msgParserId319" {
		dissect {
			mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
			id => "msgParserId319"
			add_field => {
				"result" => "Client does not match netgroup"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool07:debug" {
		# MESSAGE 030119
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030119"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030119"
					"[rsa][message][id1]" => "030119"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030119:01
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030119:01"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030119:01"
					"[rsa][message][id1]" => "030119:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030119:02
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030119:02"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030119:02"
					"[rsa][message][id1]" => "030119:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool08:debug" {
		# MESSAGE 030101
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030101"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030101"
					"[rsa][message][id1]" => "030101"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030101:01
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030101:01"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030101:01"
					"[rsa][message][id1]" => "030101:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030101:02
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030101:02"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030101:02"
					"[rsa][message][id1]" => "030101:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool09:debug" {
		# MESSAGE 030103
		# line in RSA:  Client <fld30> (xid <fld1>), { as <username> comparing | comparing } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*as[\s]+(?<username>[^\s]*)[\s]+comparing[\s]+|[\s]*comparing[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-030103"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "030103"
					"[rsa][message][id1]" => "030103"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030103:01
		# line in RSA:  Client <fld30> (xid <fld1>), does not match netgroup <username> via key  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), does not match netgroup %{username} via key  %{fld2}" }
				id => "message-030103:01"
				add_field => {
				"result" => "Client does not match netgroup"
					"[event][id]" => "030103:01"
					"[rsa][message][id1]" => "030103:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030103:02
		# line in RSA:  Client <fld30> (xid <fld1>), could not determine group <fld2> in domain <username> for misc access because of: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld30} (xid %{fld1}), could not determine group %{fld2} in domain %{username} for misc access because of: %{fld3}" }
				id => "message-030103:02"
				add_field => {
				"result" => "Client could not determine group in domain"
					"[event][id]" => "030103:02"
					"[rsa][message][id1]" => "030103:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ExportPool09:info" {
		# MESSAGE 030271
		# line in RSA:  Lookup of <hostname> failed with DNS server <id>: Connection timed out.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{id}: Connection timed out." }
				id => "message-030271"
				add_field => {
				"result" => "Lookup failed with DNS server - Connection timed out"
					"[event][id]" => "030271"
					"[rsa][message][id1]" => "030271"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030271:01
		# line in RSA:  Lookup of <hostname> failed with DNS server <id>: Can't assign requested address.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{id}: Can't assign requested address." }
				id => "message-030271:01"
				add_field => {
				"result" => "Lookup failed with DNS server - Can't assign requested address"
					"[event][id]" => "030271:01"
					"[rsa][message][id1]" => "030271:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId323
	# line in RSA:  Block checksum mismatch detected in WAFL external cache, <info>.
	else if [logstash][msgparser][id] == "msgParserId323" {
		dissect {
			mapping => { "message" => "Block checksum mismatch detected in WAFL external cache, %{info}." }
			id => "msgParserId323"
			add_field => {
				"event_description" => "Block checksum mismatch detected in WAFL external cache"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId324
	# line in RSA:  WAFL external cache I/O read error: <disposition>: <result>, code <resultcode>.
	else if [logstash][msgparser][id] == "msgParserId324" {
		dissect {
			mapping => { "message" => "WAFL external cache I/O read error: %{disposition}: %{result}, code %{resultcode}." }
			id => "msgParserId324"
			add_field => {
				"event_description" => "WAFL external cache I/O read error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId325
	# line in RSA:  Fibre Channel adapter driver encountered error "<id>" on adapter <fld1>.
	else if [logstash][msgparser][id] == "msgParserId325" {
		dissect {
			mapping => { "message" => "Fibre Channel adapter driver encountered error \"%{id}\" on adapter %{fld1}." }
			id => "msgParserId325"
			add_field => {
				"result" => "Fibre Channel adapter driver "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId326
	# line in RSA:  Fibre Channel adapter <device> link online.
	else if [logstash][msgparser][id] == "msgParserId326" {
		dissect {
			mapping => { "message" => "Fibre Channel adapter %{device} link online." }
			id => "msgParserId326"
			add_field => {
				"event_description" => "Fibre Channel adapter link online"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId327
	# line in RSA:  Fibre Channel adapter <id> is now offline.
	else if [logstash][msgparser][id] == "msgParserId327" {
		dissect {
			mapping => { "message" => "Fibre Channel adapter %{id} is now offline." }
			id => "msgParserId327"
			add_field => {
				"result" => "Fibre Channel adapter offline"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId328
	# line in RSA:  Offlining Fibre Channel adapter <id>.
	else if [logstash][msgparser][id] == "msgParserId328" {
		dissect {
			mapping => { "message" => "Offlining Fibre Channel adapter %{id}." }
			id => "msgParserId328"
			add_field => {
				"result" => "Offlining Fibre Channel adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId329
	# line in RSA:  Fibre Channel adapter <id> is now online.
	else if [logstash][msgparser][id] == "msgParserId329" {
		dissect {
			mapping => { "message" => "Fibre Channel adapter %{id} is now online." }
			id => "msgParserId329"
			add_field => {
				"result" => "Fibre Channel adapter is now online"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId330
	# line in RSA:  Fibre Channel adapter <id> failed to come online.
	else if [logstash][msgparser][id] == "msgParserId330" {
		dissect {
			mapping => { "message" => "Fibre Channel adapter %{id} failed to come online." }
			id => "msgParserId330"
			add_field => {
				"result" => "Fibre Channel adapter failed to come online"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId331
	# line in RSA:  Onlining Fibre Channel adapter <id>.
	else if [logstash][msgparser][id] == "msgParserId331" {
		dissect {
			mapping => { "message" => "Onlining Fibre Channel adapter %{id}." }
			id => "msgParserId331"
			add_field => {
				"result" => "Onlining Fibre Channel adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId332
	# line in RSA:  Resetting Fibre Channel adapter <id>. 
	else if [logstash][msgparser][id] == "msgParserId332" {
		dissect {
			mapping => { "message" => "Resetting Fibre Channel adapter %{id}." }
			id => "msgParserId332"
			add_field => {
				"result" => "Resetting Fibre Channel adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId333
	# line in RSA:  Resetting Fibre Channel adapter <id> 
	else if [logstash][msgparser][id] == "msgParserId333" {
		dissect {
			mapping => { "message" => "Resetting Fibre Channel adapter %{id}" }
			id => "msgParserId333"
			add_field => {
				"result" => "Resetting Fibre Channel adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId334
	# line in RSA:  Fibre Channel adapter <interface> is invalidating disk drive <id> (<fld1>) which <event_description>
	else if [logstash][msgparser][id] == "msgParserId334" {
		dissect {
			mapping => { "message" => "Fibre Channel adapter %{interface} is invalidating disk drive %{id} (%{fld1}) which %{event_description}" }
			id => "msgParserId334"
			add_field => {
				"result" => "Fibre Channel adapter invalidating disk drive"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId335
	# line in RSA:  Fibre Channel adapter <fld1> could not login to unknown device <fld2>.
	else if [logstash][msgparser][id] == "msgParserId335" {
		dissect {
			mapping => { "message" => "Fibre Channel adapter %{fld1} could not login to unknown device %{fld2}." }
			id => "msgParserId335"
			add_field => {
				"result" => "Fibre Channel adapter login failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "fci.device.quiesce:debug" {
		# MESSAGE 004500
		# line in RSA: Adapter <fld1> encountered a command timeout on {disk device | Disk device | device } <fld30>(<fld2>). Quiescing the device. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Adapter[\s]+(?<fld1>[^\s]*)[\s]+encountered[\s]+a[\s]+command[\s]+timeout[\s]+on[\s]+(disk[\s]+device[\s]+|[\s]*Disk[\s]+device[\s]+|[\s]*device[\s]+)[\s]+(?<fld30>[^\(]*)\((?<fld2>[^\)]*)\)\.[\s]+Quiescing[\s]+the[\s]+device\.[\s]+$" }
				id => "message-004500"
				add_field => {
				"result" => "command timeout on device"
					"[event][id]" => "004500"
					"[rsa][message][id1]" => "004500"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 004500:01
		# line in RSA: Adapter <fld1> encountered a command timeout on { enclosure services device | Tape device | disk device | Disk device | device } <fld30>(<fld2>) <info> Quiescing the device. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Adapter[\s]+(?<fld1>[^\s]*)[\s]+encountered[\s]+a[\s]+command[\s]+timeout[\s]+on[\s]+([\s]*enclosure[\s]+services[\s]+device[\s]+|[\s]*Tape[\s]+device[\s]+|[\s]*disk[\s]+device[\s]+|[\s]*Disk[\s]+device[\s]+|[\s]*device[\s]+)[\s]+(?<fld30>[^\(]*)\((?<fld2>[^\)]*)\)[\s]+(?<info>[^\s]*)[\s]+Quiescing[\s]+the[\s]+device\.[\s]+$" }
				id => "message-004500:01"
				add_field => {
				"result" => "command timeout on device"
					"[event][id]" => "004500:01"
					"[rsa][message][id1]" => "004500:01"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId338
	# line in RSA:  Resetting disk device <id> (<fld1>) from adapter <interface>
	else if [logstash][msgparser][id] == "msgParserId338" {
		dissect {
			mapping => { "message" => "Resetting disk device %{id} (%{fld1}) from adapter %{interface}" }
			id => "msgParserId338"
			add_field => {
				"result" => "Resetting disk device from adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId339
	# line in RSA:  { Adapter | HBA } <interface> encountered a device timeout on { Enclosure services device | Tape device | disk device | Disk device | device } <id>(<fld2>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId339" {
		grok {
			match => { "message" => "^[\s]*([\s]*Adapter[\s]+|[\s]*HBA[\s]+)[\s]+(?<interface>[^\s]*)[\s]+encountered[\s]+a[\s]+device[\s]+timeout[\s]+on[\s]+([\s]*Enclosure[\s]+services[\s]+device[\s]+|[\s]*Tape[\s]+device[\s]+|[\s]*disk[\s]+device[\s]+|[\s]*Disk[\s]+device[\s]+|[\s]*device[\s]+)[\s]+(?<id>[^\(]*)\((?<fld2>[^\)]*)\)[\s]+(?<event_description>.*)$" }
			id => "msgParserId339"
			add_field => {
				"result" => "adapter encountered device timeout"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId340
	# line in RSA:  Link break detected on Fibre Channel adapter <id>.
	else if [logstash][msgparser][id] == "msgParserId340" {
		dissect {
			mapping => { "message" => "Link break detected on Fibre Channel adapter %{id}." }
			id => "msgParserId340"
			add_field => {
				"result" => "Link break detected on Fibre Channel adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId341
	# line in RSA:  Could not recover link on Fibre Channel adapter <id> after <fld1> seconds. Offlining the adapter.
	else if [logstash][msgparser][id] == "msgParserId341" {
		dissect {
			mapping => { "message" => "Could not recover link on Fibre Channel adapter %{id} after %{fld1} seconds. Offlining the adapter." }
			id => "msgParserId341"
			add_field => {
				"result" => "Could not recover link"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId342
	# line in RSA: Fibre Channel adapter <fld> has a loop stability problem. <fld1> loop-initialization events seen in <fld2> seconds 
	else if [logstash][msgparser][id] == "msgParserId342" {
		dissect {
			mapping => { "message" => "Fibre Channel adapter %{fld} has a loop stability problem. %{fld1} loop-initialization events seen in %{fld2} seconds" }
			id => "msgParserId342"
			add_field => {
				"result" => "Fibre Channel adapter has a loop stability problem"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId343
	# line in RSA:  The Fibre Channel fabric attached to adapter <fld1> reports the presence of no Fibre Channel devices.
	else if [logstash][msgparser][id] == "msgParserId343" {
		dissect {
			mapping => { "message" => "The Fibre Channel fabric attached to adapter %{fld1} reports the presence of no Fibre Channel devices." }
			id => "msgParserId343"
			add_field => {
				"result" => "no Fibre Channel devices"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId344
	# line in RSA:  FCMON is running
	else if [logstash][msgparser][id] == "msgParserId344" {
		dissect {
			mapping => { "message" => "FCMON is running" }
			id => "msgParserId344"
			add_field => {
				"event_description" => "FCMON is running"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId345
	# line in RSA:  FCP service shutdown
	else if [logstash][msgparser][id] == "msgParserId345" {
		dissect {
			mapping => { "message" => "FCP service shutdown" }
			id => "msgParserId345"
			add_field => {
				"result" => "FCP service shutdown"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId346
	# line in RSA:  FCP service startup
	else if [logstash][msgparser][id] == "msgParserId346" {
		dissect {
			mapping => { "message" => "FCP service startup" }
			id => "msgParserId346"
			add_field => {
				"result" => "FCP service startup"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId347
	# line in RSA:  Disk <id> is a {local|partner}  HA mailbox disk.
	else if [logstash][msgparser][id] == "msgParserId347" {
		grok {
			match => { "message" => "^[\s]*Disk[\s]+(?<id>[^\s]*)[\s]+is[\s]+a[\s]+(local|partner)[\s]+HA[\s]+mailbox[\s]+disk\.$" }
			id => "msgParserId347"
			add_field => {
				"result" => "Disk is a HA mailbox disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId348
	# line in RSA:  normal mailbox instance on local side.
	else if [logstash][msgparser][id] == "msgParserId348" {
		dissect {
			mapping => { "message" => "normal mailbox instance on local side." }
			id => "msgParserId348"
			add_field => {
				"event_description" => "normal mailbox instance on local side"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId349
	# line in RSA:  Disk <id> removed from {local|partner} mailbox set.
	else if [logstash][msgparser][id] == "msgParserId349" {
		grok {
			match => { "message" => "^[\s]*Disk[\s]+(?<id>[^\s]*)[\s]+removed[\s]+from[\s]+(local|partner)[\s]+mailbox[\s]+set\.$" }
			id => "msgParserId349"
			add_field => {
				"result" => "Disk removed from partner mailbox set"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId117
	# line in RSA:  <fld1>
	else if [logstash][msgparser][id] == "msgParserId117" {
		dissect {
			mapping => { "message" => "%{fld1}" }
			id => "msgParserId117"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId350
	# line in RSA:  <interface>: The file policy feature has been enabled.
	else if [logstash][msgparser][id] == "msgParserId350" {
		dissect {
			mapping => { "message" => "%{interface}: The file policy feature has been enabled." }
			id => "msgParserId350"
			add_field => {
				"result" => "The file policy feature has been enabled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId351
	# line in RSA:  FPOLICY: Unable to apply file policy on <fld1>
	else if [logstash][msgparser][id] == "msgParserId351" {
		dissect {
			mapping => { "message" => "FPOLICY: Unable to apply file policy on %{fld1}" }
			id => "msgParserId351"
			add_field => {
				"result" => "Unable to apply file policy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId352
	# line in RSA:  FPOLICY: File screen server <hostname> for policy <fld1> completed a screen on <fld2> but the original request was not found.
	else if [logstash][msgparser][id] == "msgParserId352" {
		dissect {
			mapping => { "message" => "FPOLICY: File screen server %{hostname} for policy %{fld1} completed a screen on %{fld2} but the original request was not found." }
			id => "msgParserId352"
			add_field => {
				"result" => "File policy request was not found"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId353
	# line in RSA:  FPOLICY: An attempt to connect to fpolicy server <shost> for policy <rule> failed [<fld1>].
	else if [logstash][msgparser][id] == "msgParserId353" {
		dissect {
			mapping => { "message" => "FPOLICY: An attempt to connect to fpolicy server %{shost} for policy %{rule} failed [%{fld1}]." }
			id => "msgParserId353"
			add_field => {
				"result" => "An attempt to connect to fpolicy server for policy failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId354
	# line in RSA:  FPOLICY: File policy <id> (file screening) is enabled but no servers are connected to perform file screening for this policy.
	else if [logstash][msgparser][id] == "msgParserId354" {
		dissect {
			mapping => { "message" => "FPOLICY: File policy %{id} (file screening) is enabled but no servers are connected to perform file screening for this policy." }
			id => "msgParserId354"
			add_field => {
				"result" => "File policy is enabled but no servers are connected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId355
	# line in RSA: FPOLICY: File policy server <shost> <info>
	else if [logstash][msgparser][id] == "msgParserId355" {
		dissect {
			mapping => { "message" => "FPOLICY: File policy server %{shost} %{info}" }
			id => "msgParserId355"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId356
	# line in RSA: FPOLICY: File policy server <shost> for <info>
	else if [logstash][msgparser][id] == "msgParserId356" {
		dissect {
			mapping => { "message" => "FPOLICY: File policy server %{shost} for %{info}" }
			id => "msgParserId356"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId357
	# line in RSA:  FPOLICY: File policy server <hostname> registered with the filer as a server for policy <id> successfully.
	else if [logstash][msgparser][id] == "msgParserId357" {
		dissect {
			mapping => { "message" => "FPOLICY: File policy server %{hostname} registered with the filer as a server for policy %{id} successfully." }
			id => "msgParserId357"
			add_field => {
				"result" => "File policy server registered successfully."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId358
	# line in RSA:  FPOLICY: File policy server <hostname> for fscreen policy <id> has disconnected from the filer.
	else if [logstash][msgparser][id] == "msgParserId358" {
		dissect {
			mapping => { "message" => "FPOLICY: File policy server %{hostname} for fscreen policy %{id} has disconnected from the filer." }
			id => "msgParserId358"
			add_field => {
				"result" => "File policy server disconnected from the filer"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId359
	# line in RSA:  <process>: Error trying to get status from file screening server <obj_server> for policy <policy_id> [<fld1>]
	else if [logstash][msgparser][id] == "msgParserId359" {
		dissect {
			mapping => { "message" => "%{process}: Error trying to get status from file screening server %{obj_server} for policy %{policy_id} [%{fld1}]" }
			id => "msgParserId359"
			add_field => {
				"event_description" => "Error trying to get status from file screening server policy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId360
	# line in RSA:  FPOLICY: An attempt to make a file screen request to server <shost> for policy <id> failed with error [<fld1>].
	else if [logstash][msgparser][id] == "msgParserId360" {
		dissect {
			mapping => { "message" => "FPOLICY: An attempt to make a file screen request to server %{shost} for policy %{id} failed with error [%{fld1}]." }
			id => "msgParserId360"
			add_field => {
				"result" => "An attempt to make a file screen request to server for policy failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId361
	# line in RSA:  FPOLICY: File screen request to server <hostname> (<fld1>) for file <fld2> timed out. 
	else if [logstash][msgparser][id] == "msgParserId361" {
		dissect {
			mapping => { "message" => "FPOLICY: File screen request to server %{hostname} (%{fld1}) for file %{fld2} timed out." }
			id => "msgParserId361"
			add_field => {
				"result" => "File screen request to server timed out"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId362
	# line in RSA:  FPOLICY: Screen request of <fld1> for policy <id> was rejected with error [<fld2>].
	else if [logstash][msgparser][id] == "msgParserId362" {
		dissect {
			mapping => { "message" => "FPOLICY: Screen request of %{fld1} for policy %{id} was rejected with error [%{fld2}]." }
			id => "msgParserId362"
			add_field => {
				"result" => "Screen request for policy was rejected with error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId363
	# line in RSA:  FTP control connection failure (<fld1>). Failure reading control connection from client system <hostname>, 
	else if [logstash][msgparser][id] == "msgParserId363" {
		dissect {
			mapping => { "message" => "FTP control connection failure (%{fld1}). Failure reading control connection from client system %{hostname}," }
			id => "msgParserId363"
			add_field => {
				"result" => "ftpd - control connection failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId364
	# line in RSA: CIFS NTTrans request <fld1> [<hostname>] 
	else if [logstash][msgparser][id] == "msgParserId364" {
		dissect {
			mapping => { "message" => "CIFS NTTrans request %{fld1} [%{hostname}]" }
			id => "msgParserId364"
			add_field => {
				"result" => "CIFS NTTrans request"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "GbE-II/e8:info" {
		# MESSAGE 005010
		# line in RSA: arp info overwritten for <hostname> by <interface>.  Please verify <fld1> is not being used by more than one host. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "arp info overwritten for %{hostname} by %{interface}.  Please verify %{fld1} is not being used by more than one host." }
				id => "message-005010"
				add_field => {
				"result" => "arp info overwritten"
					"[event][id]" => "005010"
					"[rsa][message][id1]" => "005010"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005020
		# line in RSA:  CIFS attempted to access a directory that is not in Unicode format in a snapshot on <fld30>. Share relative path name: <interface> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS attempted to access a directory that is not in Unicode format in a snapshot on %{fld30}. Share relative path name: %{interface}" }
				id => "message-005020"
				add_field => {
				"result" => "CIFS attempted to access a directory that is not in Unicode format"
					"[event][id]" => "005020"
					"[rsa][message][id1]" => "005020"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "GbE-II/e8:notice" {
		# MESSAGE 005030
		# line in RSA: CIFS NTTrans request <fld1> [<hostname>] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS NTTrans request %{fld1} [%{hostname}]" }
				id => "message-005030"
				add_field => {
				"result" => "CIFS NTTrans request"
					"[event][id]" => "005030"
					"[rsa][message][id1]" => "005030"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005035
		# line in RSA: file system on volume <hostname> is full 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "file system on volume %{hostname} is full" }
				id => "message-005035"
				add_field => {
				"result" => "hostname volume full"
					"[event][id]" => "005035"
					"[rsa][message][id1]" => "005035"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId368
	# line in RSA: Correcting quota for user <username>, <fld1> 
	else if [logstash][msgparser][id] == "msgParserId368" {
		dissect {
			mapping => { "message" => "Correcting quota for user %{username}, %{fld1}" }
			id => "msgParserId368"
			add_field => {
				"result" => "Correcting quota for user"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "GbE-IV/e4:notice" {
		# MESSAGE 005036
		# line in RSA: tid <fld1>: <info> on volume <fld30> for Windows ID: <username>.  Additional warnings will be suppressed for approximately 60 minutes  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "tid %{fld1}: %{info} on volume %{fld30} for Windows ID: %{username}.  Additional warnings will be suppressed for approximately 60 minutes" }
				id => "message-005036"
				add_field => {
					"[event][id]" => "005036"
					"[rsa][message][id1]" => "005036"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005037
		# line in RSA: tid <fld1>: <info> on volume <fld30>. <space> Additional warnings will be suppressed for approximately <fld2> minutes or until a quota resize. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "tid %{fld1}: %{info} on volume %{fld30}. %{space} Additional warnings will be suppressed for approximately %{fld2} minutes or until a quota resize." }
				id => "message-005037"
				add_field => {
					"[event][id]" => "005037"
					"[rsa][message][id1]" => "005037"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "GbE-IV/e10:notice" {
		# MESSAGE 005040
		# line in RSA: tid <fld1>: <info> on volume <hostname> for Windows ID: <username>.  Additional warnings will be suppressed for approximately 60 minutes or until a quota resize. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "tid %{fld1}: %{info} on volume %{hostname} for Windows ID: %{username}.  Additional warnings will be suppressed for approximately 60 minutes or until a quota resize." }
				id => "message-005040"
				add_field => {
					"[event][id]" => "005040"
					"[rsa][message][id1]" => "005040"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005041
		# line in RSA: tid <fld1>: <info> on volume <hostname>. <space> Additional warnings will be suppressed for approximately 60 minutes or until a quota resize. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "tid %{fld1}: %{info} on volume %{hostname}. %{space} Additional warnings will be suppressed for approximately 60 minutes or until a quota resize." }
				id => "message-005041"
				add_field => {
					"[event][id]" => "005041"
					"[rsa][message][id1]" => "005041"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId373
	# line in RSA: Client <hostname> (xid <fld1>) is trying to access an unexported mount (<fld30> [No volume name available]) 
	else if [logstash][msgparser][id] == "msgParserId373" {
		dissect {
			mapping => { "message" => "Client %{hostname} (xid %{fld1}) is trying to access an unexported mount (%{fld30} [No volume name available])" }
			id => "msgParserId373"
			add_field => {
				"result" => "access to unexported mount - no volume name available"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId374
	# line in RSA:  D-blade ID of the local node is <id>.
	else if [logstash][msgparser][id] == "msgParserId374" {
		dissect {
			mapping => { "message" => "D-blade ID of the local node is %{id}." }
			id => "msgParserId374"
			add_field => {
				"event_description" => "D-blade ID of local node"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool00:debug" {
		# MESSAGE 040683
		# line in RSA:  <username>:HTTP:<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:HTTP:%{url}" }
				id => "message-040683"
				add_field => {
				"event_description" => "user accessing URL"
					"[event][id]" => "040683"
					"[rsa][message][id1]" => "040683"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005480
		# line in RSA:  HTTP Authentication from <saddr> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} to realm Administration failed" }
				id => "message-005480"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication to realm Administration failed"
					"[event][id]" => "005480"
					"[rsa][message][id1]" => "005480"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool00:warning" {
		# MESSAGE 005490
		# line in RSA:  HTTP Authentication from <shost> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{shost} to realm Administration failed" }
				id => "message-005490"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication to realm Administration failed"
					"[event][id]" => "005490"
					"[rsa][message][id1]" => "005490"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005490:01
		# line in RSA:  HTTP XML Authentication failed from <shost> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP XML Authentication failed from %{shost}" }
				id => "message-005490:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005490:01"
					"[rsa][message][id1]" => "005490:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005490:02
		# line in RSA:  HTTP Authentication from <saddr> using NTLM failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} using NTLM failed" }
				id => "message-005490:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005490:02"
					"[rsa][message][id1]" => "005490:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool01:debug" {
		# MESSAGE 040684
		# line in RSA:  <username>:HTTP:<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:HTTP:%{url}" }
				id => "message-040684"
				add_field => {
				"event_description" => "user accessing URL"
					"[event][id]" => "040684"
					"[rsa][message][id1]" => "040684"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005501
		# line in RSA:  HTTP Authentication from <saddr> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} to realm Administration failed" }
				id => "message-005501"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Authentication failure"
					"[event][id]" => "005501"
					"[rsa][message][id1]" => "005501"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool01:warning" {
		# MESSAGE 005491
		# line in RSA:  HTTP Authentication from <shost> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{shost} to realm Administration failed" }
				id => "message-005491"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication to realm Administration failed"
					"[event][id]" => "005491"
					"[rsa][message][id1]" => "005491"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005491:01
		# line in RSA:  HTTP XML Authentication failed from <shost> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP XML Authentication failed from %{shost}" }
				id => "message-005491:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005491:01"
					"[rsa][message][id1]" => "005491:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005491:02
		# line in RSA:  HTTP Authentication from <saddr> using NTLM failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} using NTLM failed" }
				id => "message-005491:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005491:02"
					"[rsa][message][id1]" => "005491:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool02:debug" {
		# MESSAGE 040685
		# line in RSA:  <username>:HTTP:<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:HTTP:%{url}" }
				id => "message-040685"
				add_field => {
				"event_description" => "user accessing URL"
					"[event][id]" => "040685"
					"[rsa][message][id1]" => "040685"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005502
		# line in RSA:  HTTP Authentication from <saddr> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} to realm Administration failed" }
				id => "message-005502"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Authentication failure"
					"[event][id]" => "005502"
					"[rsa][message][id1]" => "005502"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool02:warning" {
		# MESSAGE 005492
		# line in RSA:  HTTP Authentication from <saddr> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} to realm Administration failed" }
				id => "message-005492"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication to realm Administration failed"
					"[event][id]" => "005492"
					"[rsa][message][id1]" => "005492"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005492:01
		# line in RSA:  HTTP XML Authentication failed from <shost> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP XML Authentication failed from %{shost}" }
				id => "message-005492:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005492:01"
					"[rsa][message][id1]" => "005492:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005492:02
		# line in RSA:  HTTP Authentication from <saddr> using NTLM failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} using NTLM failed" }
				id => "message-005492:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005492:02"
					"[rsa][message][id1]" => "005492:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool03:debug" {
		# MESSAGE 040686
		# line in RSA:  <username>:HTTP:<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:HTTP:%{url}" }
				id => "message-040686"
				add_field => {
				"event_description" => "user accessing URL"
					"[event][id]" => "040686"
					"[rsa][message][id1]" => "040686"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005503
		# line in RSA:  HTTP Authentication from <saddr> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} to realm Administration failed" }
				id => "message-005503"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication to realm Administration failed"
					"[event][id]" => "005503"
					"[rsa][message][id1]" => "005503"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool03:warning" {
		# MESSAGE 005493
		# line in RSA:  HTTP Authentication from <shost> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{shost} to realm Administration failed" }
				id => "message-005493"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication to realm Administration failed"
					"[event][id]" => "005493"
					"[rsa][message][id1]" => "005493"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005493:01
		# line in RSA:  HTTP XML Authentication failed from <shost> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP XML Authentication failed from %{shost}" }
				id => "message-005493:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005493:01"
					"[rsa][message][id1]" => "005493:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005493:02
		# line in RSA:  HTTP Authentication from <saddr> using NTLM failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} using NTLM failed" }
				id => "message-005493:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005493:02"
					"[rsa][message][id1]" => "005493:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool04:debug" {
		# MESSAGE 040687
		# line in RSA:  <username>:HTTP:<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:HTTP:%{url}" }
				id => "message-040687"
				add_field => {
				"event_description" => "user accessing URL"
					"[event][id]" => "040687"
					"[rsa][message][id1]" => "040687"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005504
		# line in RSA:  HTTP Authentication from <saddr> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} to realm Administration failed" }
				id => "message-005504"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication to realm Administration failed"
					"[event][id]" => "005504"
					"[rsa][message][id1]" => "005504"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HTTPPool04:warning" {
		# MESSAGE 005494
		# line in RSA:  HTTP Authentication from <shost> to realm Administration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{shost} to realm Administration failed" }
				id => "message-005494"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication to realm Administration failed"
					"[event][id]" => "005494"
					"[rsa][message][id1]" => "005494"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005494:01
		# line in RSA:  HTTP XML Authentication failed from <shost> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP XML Authentication failed from %{shost}" }
				id => "message-005494:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005494:01"
					"[rsa][message][id1]" => "005494:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 005494:02
		# line in RSA:  HTTP Authentication from <saddr> using NTLM failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP Authentication from %{saddr} using NTLM failed" }
				id => "message-005494:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failed"
					"[event][id]" => "005494:02"
					"[rsa][message][id1]" => "005494:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId381
	# line in RSA: <username>:<protocol>:<interface> 
	else if [logstash][msgparser][id] == "msgParserId381" {
		dissect {
			mapping => { "message" => "%{username}:%{protocol}:%{interface}" }
			id => "msgParserId381"
			add_field => {
				"result" => "httpd_protocol:auditlog"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId382
	# line in RSA:  <filename> file is missing.
	else if [logstash][msgparser][id] == "msgParserId382" {
		dissect {
			mapping => { "message" => "%{filename} file is missing." }
			id => "msgParserId382"
			add_field => {
				"event_description" => "file is missing"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId383
	# line in RSA: Java Servlet Engine could not create a servlet header; there is a problem with Java Virtual Machine. <info> 
	else if [logstash][msgparser][id] == "msgParserId383" {
		dissect {
			mapping => { "message" => "Java Servlet Engine could not create a servlet header; there is a problem with Java Virtual Machine. %{info}" }
			id => "msgParserId383"
			add_field => {
				"event_description" => "Java Servlet Engine could not create a servlet header"
				"result" => "problem with Java Virtual Machine"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId384
	# line in RSA: unknown:AUTH:error:<fld1> from <saddr> to realm Administration failed 
	else if [logstash][msgparser][id] == "msgParserId384" {
		dissect {
			mapping => { "message" => "unknown:AUTH:error:%{fld1} from %{saddr} to realm Administration failed" }
			id => "msgParserId384"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"result" => "unknown AUTH error on Admin login"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId385
	# line in RSA:  HTTP Authentication from <saddr> to realm Administration failed 
	else if [logstash][msgparser][id] == "msgParserId385" {
		dissect {
			mapping => { "message" => "HTTP Authentication from %{saddr} to realm Administration failed" }
			id => "msgParserId385"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "HTTP Authentication failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId386
	# line in RSA:  Although vFiler units are licensed, the routing daemon runs in the default IP space only.
	else if [logstash][msgparser][id] == "msgParserId386" {
		dissect {
			mapping => { "message" => "Although vFiler units are licensed, the routing daemon runs in the default IP space only." }
			id => "msgParserId386"
			add_field => {
				"result" => "routing daemon runs in the default IP space only"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId387
	# line in RSA:  ISCSI: <interface>, Adapter taken offline.
	else if [logstash][msgparser][id] == "msgParserId387" {
		dissect {
			mapping => { "message" => "ISCSI: %{interface}, Adapter taken offline." }
			id => "msgParserId387"
			add_field => {
				"result" => "adapter taken offline"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId388
	# line in RSA:  ISCSI: <interface>, Adapter brought online.
	else if [logstash][msgparser][id] == "msgParserId388" {
		dissect {
			mapping => { "message" => "ISCSI: %{interface}, Adapter brought online." }
			id => "msgParserId388"
			add_field => {
				"result" => "adapter brought online"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId389
	# line in RSA:  ISCSI: iSCSI login failure, 'Invalid TargetName <username>' 
	else if [logstash][msgparser][id] == "msgParserId389" {
		dissect {
			mapping => { "message" => "ISCSI: iSCSI login failure, 'Invalid TargetName %{username}'" }
			id => "msgParserId389"
			add_field => {
				"action" => "iSCSI login failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "iscsi.notice:notice" {
		# MESSAGE 006044
		# line in RSA:  ISCSI: { <service>, New | New } session from initiator { <dhost>:<daddr> | <dhost> } at IP addr <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*ISCSI:[\s]+([\s]*(?<service>[^,]*),[\s]+New[\s]+|[\s]*New[\s]+)[\s]+session[\s]+from[\s]+initiator[\s]+([\s]*(?<dhost>[^:]*):(?<daddr>[^\s]*)[\s]+|[\s]*(?<dhost>[^\s]*)[\s]+)[\s]+at[\s]+IP[\s]+addr[\s]+(?<saddr>.*)$" }
				id => "message-006044"
				add_field => {
				"action" => "New session from initiator"
					"[event][id]" => "006044"
					"[rsa][message][id1]" => "006044"
					"[event][categoryid]" => "1602000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006044:01
		# line in RSA:  ISCSI: iswta, ISID Rule: <rule>, shutting down old session <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISCSI: iswta, ISID Rule: %{rule}, shutting down old session %{fld1}" }
				id => "message-006044:01"
				add_field => {
				"action" => "shutting down old session"
					"[event][id]" => "006044:01"
					"[rsa][message][id1]" => "006044:01"
					"[event][categoryid]" => "1602000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006044:02
		# line in RSA:  ISCSI: Initiator (<fld1>) sent Abort Task Set request, aborting all SCSI commands from this initiator on lun <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISCSI: Initiator (%{fld1}) sent Abort Task Set request, aborting all SCSI commands from this initiator on lun %{fld2}" }
				id => "message-006044:02"
				add_field => {
				"result" => "sent Abort Task"
					"[event][id]" => "006044:02"
					"[rsa][message][id1]" => "006044:02"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006044:03
		# line in RSA:  ISCSI: Initiator (<hostname>) sent LUN Reset request, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISCSI: Initiator (%{hostname}) sent LUN Reset request, %{event_description}" }
				id => "message-006044:03"
				add_field => {
				"result" => "ISCSI Initiator sent LUN Reset request"
					"[event][id]" => "006044:03"
					"[rsa][message][id1]" => "006044:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId394
	# line in RSA:  iSCSI service shutdown
	else if [logstash][msgparser][id] == "msgParserId394" {
		dissect {
			mapping => { "message" => "iSCSI service shutdown" }
			id => "msgParserId394"
			add_field => {
				"result" => "service shutdown"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId395
	# line in RSA:  iSCSI service startup
	else if [logstash][msgparser][id] == "msgParserId395" {
		dissect {
			mapping => { "message" => "iSCSI service startup" }
			id => "msgParserId395"
			add_field => {
				"result" => "service startup"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId396
	# line in RSA:  <interface>: Invalid value for iSCSI text key, '<id>'
	else if [logstash][msgparser][id] == "msgParserId396" {
		dissect {
			mapping => { "message" => "%{interface}: Invalid value for iSCSI text key, '%{id}'" }
			id => "msgParserId396"
			add_field => {
				"result" => "Invalid value for iSCSI text key"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "iscsi.warning:warning" {
		# MESSAGE 006048
		# line in RSA:  ISCSI: network interface production disabled for use; incoming connection discarded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISCSI: network interface production disabled for use; incoming connection discarded" }
				id => "message-006048"
				add_field => {
				"result" => "incoming connection discarded"
					"[event][id]" => "006048"
					"[rsa][message][id1]" => "006048"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006048:01
		# line in RSA:  ISCSI: dropping new connection, cannot determine network interface for new socket
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISCSI: dropping new connection, cannot determine network interface for new socket" }
				id => "message-006048:01"
				add_field => {
				"action" => "dropping new connection"
					"[event][id]" => "006048:01"
					"[rsa][message][id1]" => "006048:01"
					"[event][categoryid]" => "1602020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId399
	# line in RSA:  Failed to build FCAL map on Fibre Channel adapter <id> -- resetting adapter.
	else if [logstash][msgparser][id] == "msgParserId399" {
		dissect {
			mapping => { "message" => "Failed to build FCAL map on Fibre Channel adapter %{id} -- resetting adapter." }
			id => "msgParserId399"
			add_field => {
				"result" => "Faild to build FCAL map on Fibre Channel"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId400
	# line in RSA:  Fibre Channel adapter <fld1> { is now | now } { offline | online }.
	else if [logstash][msgparser][id] == "msgParserId400" {
		grok {
			match => { "message" => "^[\s]*Fibre[\s]+Channel[\s]+adapter[\s]+(?<fld1>[^\s]*)[\s]+([\s]*is[\s]+now[\s]+|[\s]*now[\s]+)[\s]+([\s]*offline[\s]+|[\s]*online[\s]+)\.$" }
			id => "msgParserId400"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ispfc_main:error" {
		# MESSAGE 006060
		# line in RSA: Disk <fld1>: op <fld2> sector <fld3> medium error - Unrecovered read error (<fld4>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk %{fld1}: op %{fld2} sector %{fld3} medium error - Unrecovered read error (%{fld4})" }
				id => "message-006060"
				add_field => {
				"result" => "Unrecovered read error"
					"[event][id]" => "006060"
					"[rsa][message][id1]" => "006060"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006070
		# line in RSA: Disk <fld1>: op <fld2> sector <fld3> recovered error -  (<fld4>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk %{fld1}: op %{fld2} sector %{fld3} recovered error -  (%{fld4})" }
				id => "message-006070"
				add_field => {
				"result" => "Disk sector error recovered"
					"[event][id]" => "006070"
					"[rsa][message][id1]" => "006070"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006080
		# line in RSA: Medium err for disk <fld> (serial no. <fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Medium err for disk %{fld} (serial no. %{fld1})" }
				id => "message-006080"
				add_field => {
				"result" => "Medium err for disk"
					"[event][id]" => "006080"
					"[rsa][message][id1]" => "006080"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006085
		# line in RSA: Command took <fld1> secs to complete: <fld2> (<fld3>) (<fld4>)  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Command took %{fld1} secs to complete: %{fld2} (%{fld3}) (%{fld4})" }
				id => "message-006085"
				add_field => {
					"[event][id]" => "006085"
					"[rsa][message][id1]" => "006085"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006085:01
		# line in RSA:  ISP2100 detected timeout on <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISP2100 detected timeout on %{fld30}" }
				id => "message-006085:01"
				add_field => {
				"result" => "ISP2100 detected timeount"
					"[event][id]" => "006085:01"
					"[rsa][message][id1]" => "006085:01"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006085:02
		# line in RSA:  Tape (<fld30>) hard media error: <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Tape (%{fld30}) hard media error: %{username}" }
				id => "message-006085:02"
				add_field => {
				"result" => "Tape hard media error"
					"[event][id]" => "006085:02"
					"[rsa][message][id1]" => "006085:02"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006085:03
		# line in RSA:  Command not complete in <fld1> secs: <fld2> <fld3> <fld4> Will retry on other path 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Command not complete in %{fld1} secs: %{fld2} %{fld3} %{fld4} Will retry on other path" }
				id => "message-006085:03"
				add_field => {
				"result" => "Command not complete in  secs: b. (x) (xe,x:a:,/n,//,/): Will retry on other path"
					"[event][id]" => "006085:03"
					"[rsa][message][id1]" => "006085:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId408
	# line in RSA:  Tape (<id>) hardware error: Sense_Key <fld1>
	else if [logstash][msgparser][id] == "msgParserId408" {
		dissect {
			mapping => { "message" => "Tape (%{id}) hardware error: Sense_Key %{fld1}" }
			id => "msgParserId408"
			add_field => {
				"result" => "Tape hardware error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId409
	# line in RSA: Disk <fld>: sector <fld1> was reassigned. No further action required.
	else if [logstash][msgparser][id] == "msgParserId409" {
		dissect {
			mapping => { "message" => "Disk %{fld}: sector %{fld1} was reassigned. No further action required." }
			id => "msgParserId409"
			add_field => {
				"result" => "Disk sector was reassigned"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId410
	# line in RSA:  disk_reserve_done:Reservation failed on <id> (return code <fld1>). 
	else if [logstash][msgparser][id] == "msgParserId410" {
		dissect {
			mapping => { "message" => "disk_reserve_done:Reservation failed on %{id} (return code %{fld1})." }
			id => "msgParserId410"
			add_field => {
				"result" => "Disk reservation failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Java_Thread:debug" {
		# MESSAGE 040688
		# line in RSA:  <username>:API:in:<action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:API:in:%{action}" }
				id => "message-040688"
				add_field => {
				"event_description" => "java command process"
					"[event][id]" => "040688"
					"[rsa][message][id1]" => "040688"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006100
		# line in RSA: { CfTimeDaemon | TimeDaemon }: displacements/skews: <fld>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*CfTimeDaemon[\s]+|[\s]*TimeDaemon[\s]+):[\s]+displacements/skews:[\s]+(?<fld>.*)$" }
				id => "message-006100"
				add_field => {
					"[event][id]" => "006100"
					"[rsa][message][id1]" => "006100"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006101
		# line in RSA:  <fld>: (Servlet log) : init
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld}: (Servlet log) : init" }
				id => "message-006101"
				add_field => {
				"result" => "servlet log init"
					"[event][id]" => "006101"
					"[rsa][message][id1]" => "006101"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006101:01
		# line in RSA:  <username>: ZAPI call '<interface>' failed: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}: ZAPI call '%{interface}' failed: %{fld1}" }
				id => "message-006101:01"
				add_field => {
				"result" => "CANNOT ACCESS api - invalid license"
					"[event][id]" => "006101:01"
					"[rsa][message][id1]" => "006101:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Java_Thread:error" {
		# MESSAGE 006105:04
		# line in RSA:  netapp.fv.volumes.manage.DiskReport: FilerView : The system could not fetch the disk scrub information 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "netapp.fv.volumes.manage.DiskReport: FilerView : The system could not fetch the disk scrub information" }
				id => "message-006105:04"
				add_field => {
				"result" => "netapp.fv.volumes.manage.DiskReport: FilerView : The system could not fetch the disk scrub information "
					"[event][id]" => "006105:04"
					"[rsa][message][id1]" => "006105:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006105
		# line in RSA:  TimeDaemon: Time server <hostname> is not responding to time synchronization requests. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TimeDaemon: Time server %{hostname} is not responding to time synchronization requests." }
				id => "message-006105"
				add_field => {
				"result" => "Time server not responding"
					"[event][id]" => "006105"
					"[rsa][message][id1]" => "006105"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006105:01
		# line in RSA:  TimeDaemon: Can't connect to time server '<id>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TimeDaemon: Can't connect to time server '%{id}'" }
				id => "message-006105:01"
				add_field => {
				"result" => "Can't connect to time server"
					"[event][id]" => "006105:01"
					"[rsa][message][id1]" => "006105:01"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006105:02
		# line in RSA: registry: <info> - No space left on device 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: %{info} - No space left on device" }
				id => "message-006105:02"
				add_field => {
					"[event][id]" => "006105:02"
					"[rsa][message][id1]" => "006105:02"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006105:03
		# line in RSA:  registry: error return from registry_dump!  Registry has not been updated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: error return from registry_dump!  Registry has not been updated." }
				id => "message-006105:03"
				add_field => {
				"result" => " Registry has not been updated"
					"[event][id]" => "006105:03"
					"[rsa][message][id1]" => "006105:03"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Java_Thread:info" {
		# MESSAGE 006107
		# line in RSA:  <service>: <action> for version = <fld1>, sessionId = <sessionid>, from src ip = <daddr>, dst ip = <shost>/<saddr>, src port = <dport>, dst port = <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}: %{action} for version = %{fld1}, sessionId = %{sessionid}, from src ip = %{daddr}, dst ip = %{shost}/%{saddr}, src port = %{dport}, dst port = %{sport}" }
				id => "message-006107"
				add_field => {
					"[event][id]" => "006107"
					"[rsa][message][id1]" => "006107"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006108
		# line in RSA:  <service>: <action> from if = <interface>, src ip = <daddr>, dst ip = <saddr>  Check options <rule>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}: %{action} from if = %{interface}, src ip = %{daddr}, dst ip = %{saddr}  Check options %{rule}." }
				id => "message-006108"
				add_field => {
					"[event][id]" => "006108"
					"[rsa][message][id1]" => "006108"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006109
		# line in RSA:  Lookup of <hostname> failed with DNS server <id>: Connection timed out.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of %{hostname} failed with DNS server %{id}: Connection timed out." }
				id => "message-006109"
				add_field => {
				"result" => "DNS Lookup failed - timed out"
					"[event][id]" => "006109"
					"[rsa][message][id1]" => "006109"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006109:01
		# line in RSA:  <fld1>: Failure getting the language code on volume '<fld30>': 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: Failure getting the language code on volume '%{fld30}':" }
				id => "message-006109:01"
				add_field => {
				"result" => "Failure getting language code"
					"[event][id]" => "006109:01"
					"[rsa][message][id1]" => "006109:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006109:02
		# line in RSA:  Time changed (<fld1>) to <id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Time changed (%{fld1}) to %{id}" }
				id => "message-006109:02"
				add_field => {
				"result" => "Time changed"
					"[event][id]" => "006109:02"
					"[rsa][message][id1]" => "006109:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Java_Thread:warning" {
		# MESSAGE 030002
		# line in RSA:  <interface>: Unexpected n==NULL in na_child_iterator
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: Unexpected n==NULL in na_child_iterator" }
				id => "message-030002"
				add_field => {
				"result" => "Unexpected NULL"
					"[event][id]" => "030002"
					"[rsa][message][id1]" => "030002"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030002:01
		# line in RSA:  ndmpdserver: Unable to create registry entry: <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ndmpdserver: Unable to create registry entry: %{username}" }
				id => "message-030002:01"
				add_field => {
				"result" => "Unable to create registry entry"
					"[event][id]" => "030002:01"
					"[rsa][message][id1]" => "030002:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030002:02
		# line in RSA:  <id>: Unable to expand template file: <username>, <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}: Unable to expand template file: %{username}, %{fld1}" }
				id => "message-030002:02"
				add_field => {
				"result" => "Unable to expand template file"
					"[event][id]" => "030002:02"
					"[rsa][message][id1]" => "030002:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030002:03
		# line in RSA:  Ndmpd132: NdmpInternalException: Unexpected reply message received for method <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Ndmpd132: NdmpInternalException: Unexpected reply message received for method %{fld1}" }
				id => "message-030002:03"
				add_field => {
				"result" => "NdmpInternalException:Unexpected reply message received"
					"[event][id]" => "030002:03"
					"[rsa][message][id1]" => "030002:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030002:04
		# line in RSA:  Ndmpd132: NdmpInternalException: Unsupported message method type <fld1> received
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Ndmpd132: NdmpInternalException: Unsupported message method type %{fld1} received" }
				id => "message-030002:04"
				add_field => {
				"result" => " NdmpInternalException:Unsupported message method received"
					"[event][id]" => "030002:04"
					"[rsa][message][id1]" => "030002:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030002:05
		# line in RSA:  <interface>: Fatal top level Exception
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: Fatal top level Exception" }
				id => "message-030002:05"
				add_field => {
				"result" => "Fatal top level Exception"
					"[event][id]" => "030002:05"
					"[rsa][message][id1]" => "030002:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030002:06
		# line in RSA:  <interface>: General Exception: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: General Exception: %{info}" }
				id => "message-030002:06"
				add_field => {
				"event_description" => "General Exception"
					"[event][id]" => "030002:06"
					"[rsa][message][id1]" => "030002:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Java" {
		# MESSAGE 006110
		# line in RSA:  TimeDaemon: Time offset within tolerance [<hostname>]: actual <fld1> secs, tolerance <fld2> secs, not changing time.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TimeDaemon: Time offset within tolerance [%{hostname}]: actual %{fld1} secs, tolerance %{fld2} secs, not changing time." }
				id => "message-006110"
				add_field => {
					"[event][id]" => "006110"
					"[rsa][message][id1]" => "006110"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006111
		# line in RSA:  TimeDaemon: timed: adjusting time: filer thinks time is <fld1>. Time reported by time server <fld2> is <fld3> (skew <fld4> secs).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TimeDaemon: timed: adjusting time: filer thinks time is %{fld1}. Time reported by time server %{fld2} is %{fld3} (skew %{fld4} secs)." }
				id => "message-006111"
				add_field => {
					"[event][id]" => "006111"
					"[rsa][message][id1]" => "006111"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 006112
		# line in RSA: <fld1>: Out of { memory errornull | memory }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^:]*):[\s]+Out[\s]+of[\s]+([\s]*memory[\s]+errornull[\s]+|[\s]*memory[\s]+)$" }
				id => "message-006112"
				add_field => {
				"result" => "Out of memory"
					"[event][id]" => "006112"
					"[rsa][message][id1]" => "006112"
					"[event][categoryid]" => "1603020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId433
	# line in RSA:  Command line input: the command is '<fld>'. The full command line is '<fld1>'.
	else if [logstash][msgparser][id] == "msgParserId433" {
		dissect {
			mapping => { "message" => "Command line input: the command is '%{fld}'. The full command line is '%{fld1}'." }
			id => "msgParserId433"
			add_field => {
				"result" => "Command line input"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId434
	# line in RSA: Daylight Savings Time change: rescheduling <fld> to run at <fld1>
	else if [logstash][msgparser][id] == "msgParserId434" {
		dissect {
			mapping => { "message" => "Daylight Savings Time change: rescheduling %{fld} to run at %{fld1}" }
			id => "msgParserId434"
			add_field => {
				"result" => "Daylight Savings Time change"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId435
	# line in RSA:  System <hostname> (ID <device>) is running { NetApp Release <version> | <version> } 
	else if [logstash][msgparser][id] == "msgParserId435" {
		grok {
			match => { "message" => "^[\s]*System[\s]+(?<hostname>[^\s]*)[\s]+\(ID[\s]+(?<device>[^\)]*)\)[\s]+is[\s]+running[\s]+([\s]*NetApp[\s]+Release[\s]+(?<version>[^\s]*)[\s]+|[\s]*(?<version>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId435"
			add_field => {
				"event_description" => "System is running NetApp Release"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId436
	# line in RSA:  System shut down because : "<info>"
	else if [logstash][msgparser][id] == "msgParserId436" {
		dissect {
			mapping => { "message" => "System shut down because : \"%{info}\"" }
			id => "msgParserId436"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId437
	# line in RSA: Dropped <device> syslog messages starting at <fld1> due to lack of internal log buffers 
	else if [logstash][msgparser][id] == "msgParserId437" {
		dissect {
			mapping => { "message" => "Dropped %{device} syslog messages starting at %{fld1} due to lack of internal log buffers" }
			id => "msgParserId437"
			add_field => {
				"result" => "syslog messags dropped"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId438
	# line in RSA: Language not set on volume <fld30>. Using language config "<fld1>". Use vol lang to set language. 
	else if [logstash][msgparser][id] == "msgParserId438" {
		dissect {
			mapping => { "message" => "Language not set on volume %{fld30}. Using language config \"%{fld1}\". Use vol lang to set language." }
			id => "msgParserId438"
			add_field => {
				"result" => "Language not set on volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId439
	# line in RSA: Ethernet <interface>: Link <fld1>. <fld2> 
	else if [logstash][msgparser][id] == "msgParserId439" {
		dissect {
			mapping => { "message" => "Ethernet %{interface}: Link %{fld1}. %{fld2}" }
			id => "msgParserId439"
			add_field => {
				"result" => "Ethernet link status"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId440
	# line in RSA: The system was down for <fld1> 
	else if [logstash][msgparser][id] == "msgParserId440" {
		dissect {
			mapping => { "message" => "The system was down for %{fld1}" }
			id => "msgParserId440"
			add_field => {
				"result" => "system down"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId441
	# line in RSA: Updated boot firmware is available on the Network Appliance NOW site (now.netapp.com). 
	else if [logstash][msgparser][id] == "msgParserId441" {
		dissect {
			mapping => { "message" => "Updated boot firmware is available on the Network Appliance NOW site (now.netapp.com)." }
			id => "msgParserId441"
			add_field => {
				"result" => "Updated boot firmware is available"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId442
	# line in RSA:  <interface>: Couldn't find address for host name "<hostname>": <event_description>.
	else if [logstash][msgparser][id] == "msgParserId442" {
		dissect {
			mapping => { "message" => "%{interface}: Couldn't find address for host name \"%{hostname}\": %{event_description}." }
			id => "msgParserId442"
			add_field => {
				"result" => "Couldn't find address for host name "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId443
	# line in RSA:  <interface>: Restarted 
	else if [logstash][msgparser][id] == "msgParserId443" {
		dissect {
			mapping => { "message" => "%{interface}: Restarted" }
			id => "msgParserId443"
			add_field => {
				"result" => "Syslogd restarted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId444
	# line in RSA:  Timekeeping configuration has been propagated.
	else if [logstash][msgparser][id] == "msgParserId444" {
		dissect {
			mapping => { "message" => "Timekeeping configuration has been propagated." }
			id => "msgParserId444"
			add_field => {
				"event_description" => "Timekeeping configuration propagated"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId445
	# line in RSA: server '<id>' reports the appliance date is { fast | slow } by <fld1> seconds <fld2>. Adjusting date. 
	else if [logstash][msgparser][id] == "msgParserId445" {
		grok {
			match => { "message" => "^server[\s]+'(?<id>[^']*)'[\s]+reports[\s]+the[\s]+appliance[\s]+date[\s]+is[\s]+([\s]*fast[\s]+|[\s]*slow[\s]+)[\s]+by[\s]+(?<fld1>[^\s]*)[\s]+seconds[\s]+(?<fld2>[^\.]*)\.[\s]+Adjusting[\s]+date\.[\s]+$" }
			id => "msgParserId445"
			add_field => {
				"result" => "appliance date problems - adjusting date"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId446
	# line in RSA:  server '<hostname>' reports { that the | the } appliance date is correct
	else if [logstash][msgparser][id] == "msgParserId446" {
		grok {
			match => { "message" => "^[\s]*server[\s]+'(?<hostname>[^']*)'[\s]+reports[\s]+([\s]*that[\s]+the[\s]+|[\s]*the[\s]+)[\s]+appliance[\s]+date[\s]+is[\s]+correct$" }
			id => "msgParserId446"
			add_field => {
				"result" => "date reported correct"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId447
	# line in RSA:  server '<hostname>' reports the appliance date is { fast | slow } by <fld1> seconds which is less than timed.min_skew (<fld2> seconds). Date will not be adjusted.
	else if [logstash][msgparser][id] == "msgParserId447" {
		grok {
			match => { "message" => "^[\s]*server[\s]+'(?<hostname>[^']*)'[\s]+reports[\s]+the[\s]+appliance[\s]+date[\s]+is[\s]+([\s]*fast[\s]+|[\s]*slow[\s]+)[\s]+by[\s]+(?<fld1>[^\s]*)[\s]+seconds[\s]+which[\s]+is[\s]+less[\s]+than[\s]+timed\.min_skew[\s]+\((?<fld2>[^\s]*)[\s]+seconds\)\.[\s]+Date[\s]+will[\s]+not[\s]+be[\s]+adjusted\.$" }
			id => "msgParserId447"
			add_field => {
				"result" => "date adjustment error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "kern.uptime.nc:info" {
		# MESSAGE 007039
		# line in RSA:  <fld1> up <fld2> days, <fld3> <fld4> URLs, <fld5> streams
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} up %{fld2} days, %{fld3} %{fld4} URLs, %{fld5} streams" }
				id => "message-007039"
				add_field => {
					"[event][id]" => "007039"
					"[rsa][message][id1]" => "007039"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 007039:02
		# line in RSA:  <fld1> up <fld2> days, {<fld3> mins, | <fld5>} <fld4> URLs
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+up[\s]+(?<fld2>[^\s]*)[\s]+days,[\s]+((?<fld3>[^\s]*)[\s]+mins,[\s]+|[\s]*(?<fld5>[^\s]*))[\s]+(?<fld4>[^\s]*)[\s]+URLs$" }
				id => "message-007039:02"
				add_field => {
					"[event][id]" => "007039:02"
					"[rsa][message][id1]" => "007039:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId450
	# line in RSA:  Data ONTAP kernel version was changed from NetApp Release <change_old> <space> <change_new>
	else if [logstash][msgparser][id] == "msgParserId450" {
		dissect {
			mapping => { "message" => "Data ONTAP kernel version was changed from NetApp Release %{change_old} %{space} %{change_new}" }
			id => "msgParserId450"
			add_field => {
				"event_description" => "Data ONTAP kernel version was changed"
				"change_attribute" => "NetApp Release"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId451
	# line in RSA:  <interface>: Did not find principal HOST/<hostname> in keytab. <event_description>
	else if [logstash][msgparser][id] == "msgParserId451" {
		dissect {
			mapping => { "message" => "%{interface}: Did not find principal HOST/%{hostname} in keytab. %{event_description}" }
			id => "msgParserId451"
			add_field => {
				"result" => "Did not find principal HOST in keytab"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId452
	# line in RSA:  Created license db directory for volume <fld30>
	else if [logstash][msgparser][id] == "msgParserId452" {
		dissect {
			mapping => { "message" => "Created license db directory for volume %{fld30}" }
			id => "msgParserId452"
			add_field => {
				"result" => "Created license db directory for volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId453
	# line in RSA:  Created license db for volume <fld30>
	else if [logstash][msgparser][id] == "msgParserId453" {
		dissect {
			mapping => { "message" => "Created license db for volume %{fld30}" }
			id => "msgParserId453"
			add_field => {
				"result" => "Created license db for volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId454
	# line in RSA: <info>
	else if [logstash][msgparser][id] == "msgParserId454" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId454"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId455
	# line in RSA:  Migration complete
	else if [logstash][msgparser][id] == "msgParserId455" {
		dissect {
			mapping => { "message" => "Migration complete" }
			id => "msgParserId455"
			add_field => {
				"result" => "migration complete"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId456
	# line in RSA:  Successfully migrated licenses for volume <fld30>
	else if [logstash][msgparser][id] == "msgParserId456" {
		dissect {
			mapping => { "message" => "Successfully migrated licenses for volume %{fld30}" }
			id => "msgParserId456"
			add_field => {
				"result" => "licenses migrated successfully"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId457
	# line in RSA:  Successfully wrote license db update for volume <fld30>
	else if [logstash][msgparser][id] == "msgParserId457" {
		dissect {
			mapping => { "message" => "Successfully wrote license db update for volume %{fld30}" }
			id => "msgParserId457"
			add_field => {
				"result" => "Successfully wrote license for volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId458
	# line in RSA:  mem_scrub: completed system memory scrub (count = <dclass_counter1>)
	else if [logstash][msgparser][id] == "msgParserId458" {
		dissect {
			mapping => { "message" => "mem_scrub: completed system memory scrub (count = %{dclass_counter1})" }
			id => "msgParserId458"
			add_field => {
				"result" => "memory scrub"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId459
	# line in RSA:  lock reclaims on volume: '<disk_volume>' <space> '<process>'
	else if [logstash][msgparser][id] == "msgParserId459" {
		dissect {
			mapping => { "message" => "lock reclaims on volume: '%{disk_volume}' %{space} '%{process}'" }
			id => "msgParserId459"
			add_field => {
				"event_description" => "lock reclaims on volume initiated by process"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId460
	# line in RSA: System <hostname> (ID <device>) is running NetApp Release <version> 
	else if [logstash][msgparser][id] == "msgParserId460" {
		dissect {
			mapping => { "message" => "System %{hostname} (ID %{device}) is running NetApp Release %{version}" }
			id => "msgParserId460"
			add_field => {
				"result" => "System  is running NetApp Release"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId461
	# line in RSA: <info> 
	else if [logstash][msgparser][id] == "msgParserId461" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId461"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId462
	# line in RSA:  Ethernet <interface>: Link { configured down | down, check cable | up }
	else if [logstash][msgparser][id] == "msgParserId462" {
		grok {
			match => { "message" => "^[\s]*Ethernet[\s]+(?<interface>[^:]*):[\s]+Link[\s]+([\s]*configured[\s]+down[\s]+|[\s]*down,[\s]+check[\s]+cable[\s]+|[\s]*up[\s]+)$" }
			id => "msgParserId462"
			add_field => {
				"result" => "Ethernet interface status"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId463
	# line in RSA: LUN <fld30> destroyed 
	else if [logstash][msgparser][id] == "msgParserId463" {
		dissect {
			mapping => { "message" => "LUN %{fld30} destroyed" }
			id => "msgParserId463"
			add_field => {
				"result" => "LUN destroyed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId464
	# line in RSA:  offlined LUN: <fld1> conflict on <fld2> 
	else if [logstash][msgparser][id] == "msgParserId464" {
		dissect {
			mapping => { "message" => "offlined LUN: %{fld1} conflict on %{fld2}" }
			id => "msgParserId464"
			add_field => {
				"result" => "offlined LUN /vol/arp_sgbd/lun conflict on (ARP=)"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId465
	# line in RSA:  LUN <fld30> unmapped from initiator group <username> 
	else if [logstash][msgparser][id] == "msgParserId465" {
		dissect {
			mapping => { "message" => "LUN %{fld30} unmapped from initiator group %{username}" }
			id => "msgParserId465"
			add_field => {
				"result" => "LUN unmapped from initiator group"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId466
	# line in RSA: LUN <fld30> was mapped to initiator group <username> 
	else if [logstash][msgparser][id] == "msgParserId466" {
		dissect {
			mapping => { "message" => "LUN %{fld30} was mapped to initiator group %{username}" }
			id => "msgParserId466"
			add_field => {
				"result" => "LUN was mapped to initiator group"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId467
	# line in RSA:  LUN <fld30> has been taken offline to prevent map conflicts after a copy or move operation 
	else if [logstash][msgparser][id] == "msgParserId467" {
		dissect {
			mapping => { "message" => "LUN %{fld30} has been taken offline to prevent map conflicts after a copy or move operation" }
			id => "msgParserId467"
			add_field => {
				"result" => "LUN has been taken offline"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId468
	# line in RSA: LUN <fld30> has been taken offline 
	else if [logstash][msgparser][id] == "msgParserId468" {
		dissect {
			mapping => { "message" => "LUN %{fld30} has been taken offline" }
			id => "msgParserId468"
			add_field => {
				"result" => "LUN taken offline"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId469
	# line in RSA: Space reservations in <fld30> are not being honored, either because the volume space guarantee is set to 'none' or the guarantee is currently disabled due to lack of space in the aggregate. 
	else if [logstash][msgparser][id] == "msgParserId469" {
		dissect {
			mapping => { "message" => "Space reservations in %{fld30} are not being honored, either because the volume space guarantee is set to 'none' or the guarantee is currently disabled due to lack of space in the aggregate." }
			id => "msgParserId469"
			add_field => {
				"result" => "Space reservations not being honored"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId470
	# line in RSA:  Processor <fld> (APIC ID <fld1>) started.
	else if [logstash][msgparser][id] == "msgParserId470" {
		dissect {
			mapping => { "message" => "Processor %{fld} (APIC ID %{fld1}) started." }
			id => "msgParserId470"
			add_field => {
				"result" => "Processor started"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId471
	# line in RSA:  System rebooted 
	else if [logstash][msgparser][id] == "msgParserId471" {
		dissect {
			mapping => { "message" => "System rebooted" }
			id => "msgParserId471"
			add_field => {
				"result" => "system reboot"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId472
	# line in RSA: mem_scrub: completed system memory scrub (count = <fld1>) 
	else if [logstash][msgparser][id] == "msgParserId472" {
		dissect {
			mapping => { "message" => "mem_scrub: completed system memory scrub (count = %{fld1})" }
			id => "msgParserId472"
			add_field => {
				"result" => "completed system memory scrub"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId473
	# line in RSA: NetApp Release <version> boot complete. Last disk update written at <fld1> 
	else if [logstash][msgparser][id] == "msgParserId473" {
		dissect {
			mapping => { "message" => "NetApp Release %{version} boot complete. Last disk update written at %{fld1}" }
			id => "msgParserId473"
			add_field => {
				"result" => "NetApp boot complete"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId474
	# line in RSA: System rebooted due to a watchdog reset. 
	else if [logstash][msgparser][id] == "msgParserId474" {
		dissect {
			mapping => { "message" => "System rebooted due to a watchdog reset." }
			id => "msgParserId474"
			add_field => {
				"result" => "System rebooted due to a watchdog reset"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId475
	# line in RSA:  No SRV records found for the System Manager server, <info>.
	else if [logstash][msgparser][id] == "msgParserId475" {
		dissect {
			mapping => { "message" => "No SRV records found for the System Manager server, %{info}." }
			id => "msgParserId475"
			add_field => {
				"event_description" => "No SRV records found for the System Manager server"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId476
	# line in RSA: Panic occurred at: <fld1> 
	else if [logstash][msgparser][id] == "msgParserId476" {
		dissect {
			mapping => { "message" => "Panic occurred at: %{fld1}" }
			id => "msgParserId476"
			add_field => {
				"result" => "Panic occurred"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId477
	# line in RSA: No stack frames available <fld1> 
	else if [logstash][msgparser][id] == "msgParserId477" {
		dissect {
			mapping => { "message" => "No stack frames available %{fld1}" }
			id => "msgParserId477"
			add_field => {
				"result" => "No stack frames available"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId478
	# line in RSA:  Unable to open function name/address mapping file <id>: <info>
	else if [logstash][msgparser][id] == "msgParserId478" {
		dissect {
			mapping => { "message" => "Unable to open function name/address mapping file %{id}: %{info}" }
			id => "msgParserId478"
			add_field => {
				"event_description" => "Unable to open function name/address mapping file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId479
	# line in RSA: Panic in process: <fld1> 
	else if [logstash][msgparser][id] == "msgParserId479" {
		dissect {
			mapping => { "message" => "Panic in process: %{fld1}" }
			id => "msgParserId479"
			add_field => {
				"result" => "Panic in process"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId480
	# line in RSA: Reboot with saved panic information in log file 
	else if [logstash][msgparser][id] == "msgParserId480" {
		dissect {
			mapping => { "message" => "Reboot with saved panic information in log file" }
			id => "msgParserId480"
			add_field => {
				"result" => "Reboot with saved panic information in log file"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId481
	# line in RSA: Panic string: <fld1>, type=<fld2>, VA=<fld3>, PC=<fld4>, RA=<fld5> in process <interface> on release NetApp <version> 
	else if [logstash][msgparser][id] == "msgParserId481" {
		dissect {
			mapping => { "message" => "Panic string: %{fld1}, type=%{fld2}, VA=%{fld3}, PC=%{fld4}, RA=%{fld5} in process %{interface} on release NetApp %{version}" }
			id => "msgParserId481"
			add_field => {
				"result" => "Panic report string"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "mnt_assist:debug" {
		# MESSAGE 010079
		# line in RSA:  Client <username> (xid <fld1>), as <shost> comparing against <fld30> for a request from <saddr> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{username} (xid %{fld1}), as %{shost} comparing against %{fld30} for a request from %{saddr}" }
				id => "message-010079"
				add_field => {
				"result" => "Invalid Client name in request"
					"[event][id]" => "010079"
					"[rsa][message][id1]" => "010079"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:01
		# line in RSA:  Client <username> (xid <fld1>), as <saddr>, matches to <shost> for { root | ro } access
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+as[\s]+(?<saddr>[^,]*),[\s]+matches[\s]+to[\s]+(?<shost>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access$" }
				id => "message-010079:01"
				add_field => {
				"result" => "Client name match in request"
					"[event][id]" => "010079:01"
					"[rsa][message][id1]" => "010079:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:02
		# line in RSA:  Client <username> (xid <fld1>), matches to <shost> for { root | ro } access
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+matches[\s]+to[\s]+(?<shost>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access$" }
				id => "message-010079:02"
				add_field => {
				"result" => "Client name match in request"
					"[event][id]" => "010079:02"
					"[rsa][message][id1]" => "010079:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:03
		# line in RSA:  Client <username> (xid <fld1>), matches netgroup <shost> via key <fld30> for { root | ro }access
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+matches[\s]+netgroup[\s]+(?<shost>[^\s]*)[\s]+via[\s]+key[\s]+(?<fld30>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)access$" }
				id => "message-010079:03"
				add_field => {
				"result" => "Client name match in request"
					"[event][id]" => "010079:03"
					"[rsa][message][id1]" => "010079:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:04
		# line in RSA:  Key <username> (xid <fld1>), group <fld30> is not found in netgroup <shost> for { root | ro } access
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Key[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+group[\s]+(?<fld30>[^\s]*)[\s]+is[\s]+not[\s]+found[\s]+in[\s]+netgroup[\s]+(?<shost>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access$" }
				id => "message-010079:04"
				add_field => {
				"result" => "Key group not found"
					"[event][id]" => "010079:04"
					"[rsa][message][id1]" => "010079:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:05
		# line in RSA:  Client <saddr> (xid <fld1>) in { export_worker | mount }, does not have access rights to path <fld30> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<saddr>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\)[\s]+in[\s]+([\s]*export_worker[\s]+|[\s]*mount[\s]+),[\s]+does[\s]+not[\s]+have[\s]+access[\s]+rights[\s]+to[\s]+path[\s]+(?<fld30>[^\s]*)[\s]+$" }
				id => "message-010079:05"
				add_field => {
				"result" => "Client does not have access rights to path"
					"[event][id]" => "010079:05"
					"[rsa][message][id1]" => "010079:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:06
		# line in RSA:  Client <saddr> (xid <fld1>) in export_worker, has access rights to path <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in export_worker, has access rights to path %{fld30}" }
				id => "message-010079:06"
				add_field => {
				"result" => "Client has access rights"
					"[event][id]" => "010079:06"
					"[rsa][message][id1]" => "010079:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:07
		# line in RSA:  Client (<username>) in export_worker, resolved in <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client (%{username}) in export_worker, resolved in %{fld1}" }
				id => "message-010079:07"
				add_field => {
				"result" => "Client address reolution"
					"[event][id]" => "010079:07"
					"[rsa][message][id1]" => "010079:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:08
		# line in RSA:  Client <username> (xid <fld1>), { does not | fails to } match netgroup <shost> via key <fld30> for { root | ro } access
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*does[\s]+not[\s]+|[\s]*fails[\s]+to[\s]+)[\s]+match[\s]+netgroup[\s]+(?<shost>[^\s]*)[\s]+via[\s]+key[\s]+(?<fld30>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access$" }
				id => "message-010079:08"
				add_field => {
				"result" => "Client name does not match netgroup for root access"
					"[event][id]" => "010079:08"
					"[rsa][message][id1]" => "010079:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:09
		# line in RSA:  Client <username> (xid <fld1>), fails to match netgroup <shost> for { root | ro } access
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+fails[\s]+to[\s]+match[\s]+netgroup[\s]+(?<shost>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access$" }
				id => "message-010079:09"
				add_field => {
				"result" => "Client name does not match netgroup for root access"
					"[event][id]" => "010079:09"
					"[rsa][message][id1]" => "010079:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:10
		# line in RSA:  Client <username> (xid <fld1>), as <saddr>, does not match to <shost> for { root | ro } access
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+as[\s]+(?<saddr>[^,]*),[\s]+does[\s]+not[\s]+match[\s]+to[\s]+(?<shost>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access$" }
				id => "message-010079:10"
				add_field => {
				"result" => "Client name does not match for root access"
					"[event][id]" => "010079:10"
					"[rsa][message][id1]" => "010079:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:11
		# line in RSA:  Key <username> (xid <fld1>), { does not | fails to } match netgroup <shost> for { root | ro } access
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Key[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+([\s]*does[\s]+not[\s]+|[\s]*fails[\s]+to[\s]+)[\s]+match[\s]+netgroup[\s]+(?<shost>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access$" }
				id => "message-010079:11"
				add_field => {
				"result" => "Key name does not match netgroup for root access"
					"[event][id]" => "010079:11"
					"[rsa][message][id1]" => "010079:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:13
		# line in RSA:  Client <username> (xid <fld1>), comparing against <fld30> for a request from  <saddr> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{username} (xid %{fld1}), comparing against %{fld30} for a request from  %{saddr}" }
				id => "message-010079:13"
				add_field => {
				"result" => "Client comparison"
					"[event][id]" => "010079:13"
					"[rsa][message][id1]" => "010079:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010079:14
		# line in RSA:  Client <username> (xid <fld1>), could not determine group <fld30> in domain <shost> for { root | ro } access 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Client[\s]+(?<username>[^\s]*)[\s]+\(xid[\s]+(?<fld1>[^\)]*)\),[\s]+could[\s]+not[\s]+determine[\s]+group[\s]+(?<fld30>[^\s]*)[\s]+in[\s]+domain[\s]+(?<shost>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access[\s]+$" }
				id => "message-010079:14"
				add_field => {
				"result" => "Client could not determine group in domain "
					"[event][id]" => "010079:14"
					"[rsa][message][id1]" => "010079:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "mnt_assist:warning" {
		# MESSAGE 010080
		# line in RSA:  Client <saddr> (xid <fld1>) fails to resolve via gethostbyaddr_r() for <username> access - host_errno = <fld2>, errno = <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) fails to resolve via gethostbyaddr_r() for %{username} access - host_errno = %{fld2}, errno = %{fld3}" }
				id => "message-010080"
				add_field => {
				"result" => "Client fails to resolve via gethostbyaddr_r() for user access"
					"[event][id]" => "010080"
					"[rsa][message][id1]" => "010080"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 010080:01
		# line in RSA:  Directory service outage prevents NFS server from determining if client (<shost>) has root access to path <fld30>.  Client will be delayed access during outage.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Directory service outage prevents NFS server from determining if client (%{shost}) has root access to path %{fld30}.  Client will be delayed access during outage." }
				id => "message-010080:01"
				add_field => {
				"result" => "Directory service outage"
					"[event][id]" => "010080:01"
					"[rsa][message][id1]" => "010080:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId498
	# line in RSA:  Client <saddr> (xid <fld1>) <fld2>, <fld30>
	else if [logstash][msgparser][id] == "msgParserId498" {
		dissect {
			mapping => { "message" => "Client %{saddr} (xid %{fld1}) %{fld2}, %{fld30}" }
			id => "msgParserId498"
			add_field => {
				"result" => "Client activity"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "MNTPool01:warning" {
		# MESSAGE 030228:01
		# line in RSA:  Client <fld1> (xid <fld2> from mount is trying to mount from a nonreserved port = <fld3> as uid = <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld1} (xid %{fld2} from mount is trying to mount from a nonreserved port = %{fld3} as uid = %{fld4}" }
				id => "message-030228:01"
				add_field => {
				"result" => "Client ... (xid ), from mount is trying to mount from a nonreserved port =  as uid = "
					"[event][id]" => "030228:01"
					"[rsa][message][id1]" => "030228:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030228
		# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
				id => "message-030228"
				add_field => {
				"result" => "Client doing mount gets bad FH"
					"[event][id]" => "030228"
					"[rsa][message][id1]" => "030228"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "MNTPool02:warning" {
		# MESSAGE 030229:01
		# line in RSA:  Client <fld1> (xid <fld2> from mount is trying to mount from a nonreserved port = <fld3> as uid = <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld1} (xid %{fld2} from mount is trying to mount from a nonreserved port = %{fld3} as uid = %{fld4}" }
				id => "message-030229:01"
				add_field => {
				"result" => "Client ... (xid ), from mount is trying to mount from a nonreserved port =  as uid = "
					"[event][id]" => "030229:01"
					"[rsa][message][id1]" => "030229:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030229
		# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
				id => "message-030229"
				add_field => {
				"result" => "Client doing mount gets bad FH"
					"[event][id]" => "030229"
					"[rsa][message][id1]" => "030229"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "MNTPool03:warning" {
		# MESSAGE 030230:01
		# line in RSA:  Client <fld1> (xid <fld2> from mount is trying to mount from a nonreserved port = <fld3> as uid = <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld1} (xid %{fld2} from mount is trying to mount from a nonreserved port = %{fld3} as uid = %{fld4}" }
				id => "message-030230:01"
				add_field => {
				"result" => "Client ... (xid ), from mount is trying to mount from a nonreserved port =  as uid = "
					"[event][id]" => "030230:01"
					"[rsa][message][id1]" => "030230:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030230
		# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
				id => "message-030230"
				add_field => {
				"result" => "Client doing mount gets bad FH"
					"[event][id]" => "030230"
					"[rsa][message][id1]" => "030230"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "MNTPool04:warning" {
		# MESSAGE 030231:01
		# line in RSA:  Client <fld1> (xid <fld2> from mount is trying to mount from a nonreserved port = <fld3> as uid = <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld1} (xid %{fld2} from mount is trying to mount from a nonreserved port = %{fld3} as uid = %{fld4}" }
				id => "message-030231:01"
				add_field => {
				"result" => "Client ... (xid ), from mount is trying to mount from a nonreserved port =  as uid = "
					"[event][id]" => "030231:01"
					"[rsa][message][id1]" => "030231:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030231
		# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
				id => "message-030231"
				add_field => {
				"result" => "Client doing mount gets bad FH"
					"[event][id]" => "030231"
					"[rsa][message][id1]" => "030231"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "MNTPool05:warning" {
		# MESSAGE 040602
		# line in RSA:  Client <saddr> (xid <fld1>), from mount is trying to mount from a nonreserved port = <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}), from mount is trying to mount from a nonreserved port = %{fld30}" }
				id => "message-040602"
				add_field => {
				"result" => "Client from mount is trying to mount from a nonreserved port"
					"[event][id]" => "040602"
					"[rsa][message][id1]" => "040602"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030232
		# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
				id => "message-030232"
				add_field => {
				"result" => "Client doing mount gets bad FH"
					"[event][id]" => "030232"
					"[rsa][message][id1]" => "030232"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "MNTPool06:warning" {
		# MESSAGE 030233:01
		# line in RSA:  Client <fld1> (xid <fld2> from mount is trying to mount from a nonreserved port = <fld3> as uid = <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld1} (xid %{fld2} from mount is trying to mount from a nonreserved port = %{fld3} as uid = %{fld4}" }
				id => "message-030233:01"
				add_field => {
				"result" => "Client ... (xid ), from mount is trying to mount from a nonreserved port =  as uid = "
					"[event][id]" => "030233:01"
					"[rsa][message][id1]" => "030233:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030233
		# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
				id => "message-030233"
				add_field => {
				"result" => "Client doing mount gets bad FH"
					"[event][id]" => "030233"
					"[rsa][message][id1]" => "030233"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId501
	# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
	else if [logstash][msgparser][id] == "msgParserId501" {
		dissect {
			mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
			id => "msgParserId501"
			add_field => {
				"result" => "Client doing mount gets bad FH"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "MNTPool09:warning" {
		# MESSAGE 030236
		# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
				id => "message-030236"
				add_field => {
				"result" => "Client doing mount gets bad FH"
					"[event][id]" => "030236"
					"[rsa][message][id1]" => "030236"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030236:01
		# line in RSA:  Client <fld1> (xid <fld2> from mount is trying to mount from a nonreserved port = <fld3> as uid = <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld1} (xid %{fld2} from mount is trying to mount from a nonreserved port = %{fld3} as uid = %{fld4}" }
				id => "message-030236:01"
				add_field => {
				"result" => "Client ... (xid ), from mount is trying to mount from a nonreserved port =  as uid = "
					"[event][id]" => "030236:01"
					"[rsa][message][id1]" => "030236:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId502
	# line in RSA:  Chassis power is degraded: sensor <fld1> AC status
	else if [logstash][msgparser][id] == "msgParserId502" {
		dissect {
			mapping => { "message" => "Chassis power is degraded: sensor %{fld1} AC status" }
			id => "msgParserId502"
			add_field => {
				"result" => "Chassis power is degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId503
	# line in RSA: Chassis power supply <id> is OK
	else if [logstash][msgparser][id] == "msgParserId503" {
		dissect {
			mapping => { "message" => "Chassis power supply %{id} is OK" }
			id => "msgParserId503"
			add_field => {
				"result" => "power supply is ok"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId504
	# line in RSA: Chassis power supply <id> off 
	else if [logstash][msgparser][id] == "msgParserId504" {
		dissect {
			mapping => { "message" => "Chassis power supply %{id} off" }
			id => "msgParserId504"
			add_field => {
				"result" => "power off"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId505
	# line in RSA:  Sensor <id> Temp not responding.
	else if [logstash][msgparser][id] == "msgParserId505" {
		dissect {
			mapping => { "message" => "Sensor %{id} Temp not responding." }
			id => "msgParserId505"
			add_field => {
				"result" => "Sensor Temp not responding"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId506
	# line in RSA:  Chassis temperature is ok
	else if [logstash][msgparser][id] == "msgParserId506" {
		dissect {
			mapping => { "message" => "Chassis temperature is ok" }
			id => "msgParserId506"
			add_field => {
				"event_description" => "Chassis temperature is ok"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId507
	# line in RSA:  Downrev disks still present
	else if [logstash][msgparser][id] == "msgParserId507" {
		dissect {
			mapping => { "message" => "Downrev disks still present" }
			id => "msgParserId507"
			add_field => {
				"result" => "Downrev disks still present"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "monitor.globalStatus.critical:CRITICAL" {
		# MESSAGE 030038
		# line in RSA: Cluster failover of <fld30> is not possible: cluster takeover disabled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster failover of %{fld30} is not possible: cluster takeover disabled." }
				id => "message-030038"
				add_field => {
				"result" => "Cluster failover not possible - takeover disabled"
					"[event][id]" => "030038"
					"[rsa][message][id1]" => "030038"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030038:01
		# line in RSA:  This node has taken over <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "This node has taken over %{fld30}" }
				id => "message-030038:01"
				add_field => {
				"result" => "node takeover"
					"[event][id]" => "030038:01"
					"[rsa][message][id1]" => "030038:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030038:02
		# line in RSA:  <fld30> has taken over this node
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} has taken over this node" }
				id => "message-030038:02"
				add_field => {
				"result" => "node takeover"
					"[event][id]" => "030038:02"
					"[rsa][message][id1]" => "030038:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030038:03
		# line in RSA:  Cluster failover of <fld30> is not possible: unsynchronized log.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster failover of %{fld30} is not possible: unsynchronized log." }
				id => "message-030038:03"
				add_field => {
				"result" => "cluster takeover disabled"
					"[event][id]" => "030038:03"
					"[rsa][message][id1]" => "030038:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030038:04
		# line in RSA:  Cluster failover of <fld30> is not possible: status of backup mailbox is uncertain
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cluster failover of %{fld30} is not possible: status of backup mailbox is uncertain" }
				id => "message-030038:04"
				add_field => {
				"result" => "Cluster failover not possible"
					"[event][id]" => "030038:04"
					"[rsa][message][id1]" => "030038:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030038:05
		# line in RSA:  Disk shelf { configuration error | fault }. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Disk[\s]+shelf[\s]+([\s]*configuration[\s]+error[\s]+|[\s]*fault[\s]+)\.[\s]+$" }
				id => "message-030038:05"
				add_field => {
				"result" => "Disk shelf fault or configuration error"
					"[event][id]" => "030038:05"
					"[rsa][message][id1]" => "030038:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030038:06
		# line in RSA:  <fld30> is full 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} is full" }
				id => "message-030038:06"
				add_field => {
				"result" => "volume is full"
					"[event][id]" => "030038:06"
					"[rsa][message][id1]" => "030038:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030038:07
		# line in RSA:  sensor <fld1> AC status Disk shelf fault. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "sensor %{fld1} AC status Disk shelf fault." }
				id => "message-030038:07"
				add_field => {
				"result" => "node takeover"
					"[event][id]" => "030038:07"
					"[rsa][message][id1]" => "030038:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "monitor.globalStatus.nonCritical:warning" {
		# MESSAGE 011020
		# line in RSA:  <hostname> is full (<event_description>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} is full (%{event_description})." }
				id => "message-011020"
				add_field => {
				"result" => "hostname volume full"
					"[event][id]" => "011020"
					"[rsa][message][id1]" => "011020"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 011025
		# line in RSA:  Disk on adapter <fld>, shelf <fld1>, bay <fld2>, failed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk on adapter %{fld}, shelf %{fld1}, bay %{fld2}, failed." }
				id => "message-011025"
				add_field => {
				"result" => "disk failed"
					"[event][id]" => "011025"
					"[rsa][message][id1]" => "011025"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040577
		# line in RSA:  There are not enough spare disks
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "There are not enough spare disks" }
				id => "message-040577"
				add_field => {
				"result" => "not enough spare disks"
					"[event][id]" => "040577"
					"[rsa][message][id1]" => "040577"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId519
	# line in RSA:  data disk in RAID group <id> is broken
	else if [logstash][msgparser][id] == "msgParserId519" {
		dissect {
			mapping => { "message" => "data disk in RAID group %{id} is broken" }
			id => "msgParserId519"
			add_field => {
				"result" => "data disk in RAID group is broken"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId520
	# line in RSA:  Reconstructing broken { data | dparity | parity} disk in RAID group <interface>.
	else if [logstash][msgparser][id] == "msgParserId520" {
		grok {
			match => { "message" => "^[\s]*Reconstructing[\s]+broken[\s]+([\s]*data[\s]+|[\s]*dparity[\s]+|[\s]*parity)[\s]+disk[\s]+in[\s]+RAID[\s]+group[\s]+(?<interface>[^\.]*)\.$" }
			id => "msgParserId520"
			add_field => {
				"result" => "Reconstructing broken data disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId521
	# line in RSA:  Enclosure services has detected an error in access to shelves on channel <id> 
	else if [logstash][msgparser][id] == "msgParserId521" {
		dissect {
			mapping => { "message" => "Enclosure services has detected an error in access to shelves on channel %{id}" }
			id => "msgParserId521"
			add_field => {
				"result" => "Enclosure services access error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId522
	# line in RSA:  Enclosure services-detected shelf access error has been corrected on channel <id>. 
	else if [logstash][msgparser][id] == "msgParserId522" {
		dissect {
			mapping => { "message" => "Enclosure services-detected shelf access error has been corrected on channel %{id}." }
			id => "msgParserId522"
			add_field => {
				"result" => "Enclosure services-detected shelf access error has been corrected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId523
	# line in RSA: Enclosure services has detected an error in access to shelves or shelf configuration <fld> 
	else if [logstash][msgparser][id] == "msgParserId523" {
		dissect {
			mapping => { "message" => "Enclosure services has detected an error in access to shelves or shelf configuration %{fld}" }
			id => "msgParserId523"
			add_field => {
				"result" => "Enclosure services error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId524
	# line in RSA:  Enclosure services-detected access problem or configuration error has been corrected on channel <id>.
	else if [logstash][msgparser][id] == "msgParserId524" {
		dissect {
			mapping => { "message" => "Enclosure services-detected access problem or configuration error has been corrected on channel %{id}." }
			id => "msgParserId524"
			add_field => {
				"result" => "Enclosure services-detected access"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId525
	# line in RSA:  Fault reported on disk storage shelf attached to channel <id>. <event_description>. 
	else if [logstash][msgparser][id] == "msgParserId525" {
		dissect {
			mapping => { "message" => "Fault reported on disk storage shelf attached to channel %{id}. %{event_description}." }
			id => "msgParserId525"
			add_field => {
				"result" => "disk storage fault"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId526
	# line in RSA:  Fault previously reported on disk storage shelf attached to <id> has been corrected.
	else if [logstash][msgparser][id] == "msgParserId526" {
		dissect {
			mapping => { "message" => "Fault previously reported on disk storage shelf attached to %{id} has been corrected." }
			id => "msgParserId526"
			add_field => {
				"result" => "Fault on disk storage shelf corrected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId527
	# line in RSA: <hostname> is full (<data>). 
	else if [logstash][msgparser][id] == "msgParserId527" {
		dissect {
			mapping => { "message" => "%{hostname} is full (%{data})." }
			id => "msgParserId527"
			add_field => {
				"result" => "hostname volume full"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId528
	# line in RSA:  <info> (<event_description>)
	else if [logstash][msgparser][id] == "msgParserId528" {
		dissect {
			mapping => { "message" => "%{info} (%{event_description})" }
			id => "msgParserId528"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId529
	# line in RSA:  <fld30> is { nearly full | full } (<info>)
	else if [logstash][msgparser][id] == "msgParserId529" {
		grok {
			match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+is[\s]+([\s]*nearly[\s]+full[\s]+|[\s]*full[\s]+)[\s]+\((?<info>[^\)]*)\)$" }
			id => "msgParserId529"
			add_field => {
				"result" => "volume is full or nearly full"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "mountd_main:debug" {
		# MESSAGE 011498
		# line in RSA:  Client <saddr> (xid <fld1>), is able to dump
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}), is able to dump" }
				id => "message-011498"
				add_field => {
				"result" => "Client able to dump"
					"[event][id]" => "011498"
					"[rsa][message][id1]" => "011498"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 011498:01
		# line in RSA:  Client <saddr> (xid <fld1>), is able to umount <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}), is able to umount %{fld30}" }
				id => "message-011498:01"
				add_field => {
				"result" => "Client able to umount filesystem"
					"[event][id]" => "011498:01"
					"[rsa][message][id1]" => "011498:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 011498:02
		# line in RSA:  Client <saddr> (xid <fld1>), is able to return the export list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}), is able to return the export list" }
				id => "message-011498:02"
				add_field => {
				"result" => "Client able to return the export list"
					"[event][id]" => "011498:02"
					"[rsa][message][id1]" => "011498:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 011498:03
		# line in RSA:  Client <saddr> (xid <fld1>) in mount, has access rights to path <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount, has access rights to path %{fld30}" }
				id => "message-011498:03"
				add_field => {
				"result" => "Client has access rights"
					"[event][id]" => "011498:03"
					"[rsa][message][id1]" => "011498:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 011498:04
		# line in RSA:  Client <saddr> (xid <fld1>) in mount, does not have access rights to path <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount, does not have access rights to path %{fld30}" }
				id => "message-011498:04"
				add_field => {
				"result" => "Client does not have access rights to path"
					"[event][id]" => "011498:04"
					"[rsa][message][id1]" => "011498:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "mountd_main:warning" {
		# MESSAGE 011499
		# line in RSA:  Client <saddr> (xid <fld1>) in mount gets a bad FH trying to access <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}) in mount gets a bad FH trying to access %{fld30}" }
				id => "message-011499"
				add_field => {
				"result" => "Client gets bad File Handle"
					"[event][id]" => "011499"
					"[rsa][message][id1]" => "011499"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 011499:01
		# line in RSA:  Client <saddr> (xid <fld1>), is sent the NULL reply
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{saddr} (xid %{fld1}), is sent the NULL reply" }
				id => "message-011499:01"
				add_field => {
				"result" => "Client sent null reply"
					"[event][id]" => "011499:01"
					"[rsa][message][id1]" => "011499:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId537
	# line in RSA:  (Line: <fld1>) Not exporting for v4 because export <interface> has an -actual=<id>
	else if [logstash][msgparser][id] == "msgParserId537" {
		dissect {
			mapping => { "message" => "(Line: %{fld1}) Not exporting for v4 because export %{interface} has an -actual=%{id}" }
			id => "msgParserId537"
			add_field => {
				"result" => "Not exporting for v4 because export has an actual disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId538
	# line in RSA:  (Line: <fld1>) Expressing a path without a leading '<fld2>' has been deprecated: <fld3>
	else if [logstash][msgparser][id] == "msgParserId538" {
		dissect {
			mapping => { "message" => "(Line: %{fld1}) Expressing a path without a leading '%{fld2}' has been deprecated: %{fld3}" }
			id => "msgParserId538"
			add_field => {
				"result" => "invalid path"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId539
	# line in RSA:  Exporting <id> with kerberos security settings, but kerberos is not configured 
	else if [logstash][msgparser][id] == "msgParserId539" {
		dissect {
			mapping => { "message" => "Exporting %{id} with kerberos security settings, but kerberos is not configured" }
			id => "msgParserId539"
			add_field => {
				"result" => "kerberos not configured"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId540
	# line in RSA: <fld1>: All <fld2> name registrations have completed for the { local | partner } server. 
	else if [logstash][msgparser][id] == "msgParserId540" {
		grok {
			match => { "message" => "^(?<fld1>[^:]*):[\s]+All[\s]+(?<fld2>[^\s]*)[\s]+name[\s]+registrations[\s]+have[\s]+completed[\s]+for[\s]+the[\s]+([\s]*local[\s]+|[\s]*partner[\s]+)[\s]+server\.[\s]+$" }
			id => "msgParserId540"
			add_field => {
				"result" => "name registrations completed for server"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "nbt.nbns.socketError:error" {
		# MESSAGE 012599
		# line in RSA:  NBT: Cannot connect <username> socket to WINS server. Error <fld1>: Address already in use.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NBT: Cannot connect %{username} socket to WINS server. Error %{fld1}: Address already in use." }
				id => "message-012599"
				add_field => {
				"event_description" => "Cannot connect WINS server"
				"result" => "Address already in use"
					"[event][id]" => "012599"
					"[rsa][message][id1]" => "012599"
					"[event][categoryid]" => "1602020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012599:01
		# line in RSA:   NBT: Cannot read data from WINS server on <username> socket. Error <fld1>: Connection refused.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NBT: Cannot read data from WINS server on %{username} socket. Error %{fld1}: Connection refused." }
				id => "message-012599:01"
				add_field => {
				"event_description" => "Cannot read from WINS server on socket"
				"result" => "Connection refused"
					"[event][id]" => "012599:01"
					"[rsa][message][id1]" => "012599:01"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012599:02
		# line in RSA:   NBT: Cannot send on <username> socket to WINS server. Error <fld1>: Host is down
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NBT: Cannot send on %{username} socket to WINS server. Error %{fld1}: Host is down" }
				id => "message-012599:02"
				add_field => {
				"event_description" => "Cannot send on socket"
				"result" => "Host os down"
					"[event][id]" => "012599:02"
					"[rsa][message][id1]" => "012599:02"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId544
	# line in RSA:  NBT: Cannot connect to server <hostname> over <username> socket { for port <device>. <event_description> | <event_description> }
	else if [logstash][msgparser][id] == "msgParserId544" {
		grok {
			match => { "message" => "^[\s]*NBT:[\s]+Cannot[\s]+connect[\s]+to[\s]+server[\s]+(?<hostname>[^\s]*)[\s]+over[\s]+(?<username>[^\s]*)[\s]+socket[\s]+([\s]*for[\s]+port[\s]+(?<device>[^\.]*)\.[\s]+(?<event_description>[^\s]*)[\s]+|[\s]*(?<event_description>[^\s]*)[\s]+)$" }
			id => "msgParserId544"
			add_field => {
				"result" => "Cannot connect to server"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId545
	# line in RSA:  NBT: WINS server <shost> did not respond when the filer attempted to register <saddr>.
	else if [logstash][msgparser][id] == "msgParserId545" {
		dissect {
			mapping => { "message" => "NBT: WINS server %{shost} did not respond when the filer attempted to register %{saddr}." }
			id => "msgParserId545"
			add_field => {
				"result" => "WINS server not responding"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId546
	# line in RSA:  NBT: WINS server responded 
	else if [logstash][msgparser][id] == "msgParserId546" {
		dissect {
			mapping => { "message" => "NBT: WINS server responded" }
			id => "msgParserId546"
			add_field => {
				"result" => "WINS server responded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId547
	# line in RSA:  NBT: No WINS server are responding. The filer will continue to try to register with WINS.
	else if [logstash][msgparser][id] == "msgParserId547" {
		dissect {
			mapping => { "message" => "NBT: No WINS server are responding. The filer will continue to try to register with WINS." }
			id => "msgParserId547"
			add_field => {
				"result" => "No WINS server are responding"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId548
	# line in RSA:  This version of Data ONTAP(tm) on this hardware platform does not support the SnapVault for NetBackup DSU functionality requested by media server:
	else if [logstash][msgparser][id] == "msgParserId548" {
		dissect {
			mapping => { "message" => "This version of Data ONTAP(tm) on this hardware platform does not support the SnapVault for NetBackup DSU functionality requested by media server:" }
			id => "msgParserId548"
			add_field => {
				"result" => "version of Data ONTAP(tm) does not support SnapVault"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId549
	# line in RSA:  [Auth/ldap]: Latency is high; average <fld1> ms
	else if [logstash][msgparser][id] == "msgParserId549" {
		dissect {
			mapping => { "message" => "[Auth/ldap]: Latency is high; average %{fld1} ms" }
			id => "msgParserId549"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId550
	# line in RSA:  Log push failed for file: <interface> to destination URL: <fld1> Error: [code=<fld2>] <info>. <fld3>.
	else if [logstash][msgparser][id] == "msgParserId550" {
		dissect {
			mapping => { "message" => "Log push failed for file: %{interface} to destination URL: %{fld1} Error: [code=%{fld2}] %{info}. %{fld3}." }
			id => "msgParserId550"
			add_field => {
				"event_description" => "Log push failed for file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId551
	# line in RSA:  file system on volume <fld30> is full
	else if [logstash][msgparser][id] == "msgParserId551" {
		dissect {
			mapping => { "message" => "file system on volume %{fld30} is full" }
			id => "msgParserId551"
			add_field => {
				"result" => "file system is full"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId552
	# line in RSA:  <interface>: Invalid entry in /etc/hosts: <result>. "<info>"
	else if [logstash][msgparser][id] == "msgParserId552" {
		dissect {
			mapping => { "message" => "%{interface}: Invalid entry in /etc/hosts: %{result}. \"%{info}\"" }
			id => "msgParserId552"
			add_field => {
				"event_description" => "Invalid entry in /etc/hosts"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId553
	# line in RSA:  Protocol Filter: <network_port> <network_service> packets were dropped by the <fld1> protocol filter during the last 24 hours.
	else if [logstash][msgparser][id] == "msgParserId553" {
		dissect {
			mapping => { "message" => "Protocol Filter: %{network_port} %{network_service} packets were dropped by the %{fld1} protocol filter during the last 24 hours." }
			id => "msgParserId553"
			add_field => {
				"event_description" => "packets were dropped by the per-interface protocol filter during the last 24 hours"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId554
	# line in RSA:  route: Default route with gateway <gateway> is targeted to dedicated management port <sport>. <info>
	else if [logstash][msgparser][id] == "msgParserId554" {
		dissect {
			mapping => { "message" => "route: Default route with gateway %{gateway} is targeted to dedicated management port %{sport}. %{info}" }
			id => "msgParserId554"
			add_field => {
				"event_description" => "Default route with gateway is targeted to dedicated management port"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId555
	# line in RSA:  Connection to server:<obj_server> failed due to <result>.
	else if [logstash][msgparser][id] == "msgParserId555" {
		dissect {
			mapping => { "message" => "Connection to server:%{obj_server} failed due to %{result}." }
			id => "msgParserId555"
			add_field => {
				"event_description" => "Connection to server failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "NetCache" {
		# MESSAGE 012000
		# line in RSA: System shut down with "reboot" command. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System shut down with \"reboot\" command." }
				id => "message-012000"
				add_field => {
				"result" => "System shut down via reboot"
					"[event][id]" => "012000"
					"[rsa][message][id1]" => "012000"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 012500
		# line in RSA: <fld1>:  Shutdown by command. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}:  Shutdown by command." }
				id => "message-012500"
				add_field => {
				"result" => "Shutdown by command"
					"[event][id]" => "012500"
					"[rsa][message][id1]" => "012500"
					"[event][categoryid]" => "1606000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId558
	# line in RSA:  Ethernet <interface>: Link down, <result>.
	else if [logstash][msgparser][id] == "msgParserId558" {
		dissect {
			mapping => { "message" => "Ethernet %{interface}: Link down, %{result}." }
			id => "msgParserId558"
			add_field => {
				"event_description" => "Ethernet Link down"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId559
	# line in RSA:  Excessive link errors on network interface <id>. <event_description>.
	else if [logstash][msgparser][id] == "msgParserId559" {
		dissect {
			mapping => { "message" => "Excessive link errors on network interface %{id}. %{event_description}." }
			id => "msgParserId559"
			add_field => {
				"result" => "Excessive link errors on network interface"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId560
	# line in RSA:  Ethernet <interface>: Link configured down.
	else if [logstash][msgparser][id] == "msgParserId560" {
		dissect {
			mapping => { "message" => "Ethernet %{interface}: Link configured down." }
			id => "msgParserId560"
			add_field => {
				"event_description" => "Ethernet interface - Link configured down"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId561
	# line in RSA:  Ethernet <id>: Link up.
	else if [logstash][msgparser][id] == "msgParserId561" {
		dissect {
			mapping => { "message" => "Ethernet %{id}: Link up." }
			id => "msgParserId561"
			add_field => {
				"result" => "Ethernet Link up"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId562
	# line in RSA:  ipspace discovery is complete. <info>.
	else if [logstash][msgparser][id] == "msgParserId562" {
		dissect {
			mapping => { "message" => "ipspace discovery is complete. %{info}." }
			id => "msgParserId562"
			add_field => {
				"event_description" => "ipspace discovery is complete"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId563
	# line in RSA:  NFS response to client <hostname> was slow, 
	else if [logstash][msgparser][id] == "msgParserId563" {
		dissect {
			mapping => { "message" => "NFS response to client %{hostname} was slow," }
			id => "msgParserId563"
			add_field => {
				"result" => "NFS response to client was slow"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId564
	# line in RSA:  Directory service outage prevents NFS server from determining if client (<hostname>) has { root | ro } access to path <fld30> (xid <fld2>).  Client will be provisionally granted access during outage. 
	else if [logstash][msgparser][id] == "msgParserId564" {
		grok {
			match => { "message" => "^[\s]*Directory[\s]+service[\s]+outage[\s]+prevents[\s]+NFS[\s]+server[\s]+from[\s]+determining[\s]+if[\s]+client[\s]+\((?<hostname>[^\)]*)\)[\s]+has[\s]+([\s]*root[\s]+|[\s]*ro[\s]+)[\s]+access[\s]+to[\s]+path[\s]+(?<fld30>[^\s]*)[\s]+\(xid[\s]+(?<fld2>[^\)]*)\)\.[\s]+Client[\s]+will[\s]+be[\s]+provisionally[\s]+granted[\s]+access[\s]+during[\s]+outage\.[\s]+$" }
			id => "msgParserId564"
			add_field => {
				"result" => "Directory service outage"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId565
	# line in RSA:  <fld1>: Hit end of mbuf chain. Received malformed RPC request from client: <hostname>
	else if [logstash][msgparser][id] == "msgParserId565" {
		dissect {
			mapping => { "message" => "%{fld1}: Hit end of mbuf chain. Received malformed RPC request from client: %{hostname}" }
			id => "msgParserId565"
			add_field => {
				"result" => "malformed RPC request from client"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId566
	# line in RSA:  Client <hostname> with record too long (<id>)
	else if [logstash][msgparser][id] == "msgParserId566" {
		dissect {
			mapping => { "message" => "Client %{hostname} with record too long (%{id})" }
			id => "msgParserId566"
			add_field => {
				"result" => "record too long"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId567
	# line in RSA:  Client <hostname> is sending bad rpc requests with error: <id>
	else if [logstash][msgparser][id] == "msgParserId567" {
		dissect {
			mapping => { "message" => "Client %{hostname} is sending bad rpc requests with error: %{id}" }
			id => "msgParserId567"
			add_field => {
				"result" => "Client sending bad rpc requests"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId568
	# line in RSA:  Bound to preferred NIS server <hostname>
	else if [logstash][msgparser][id] == "msgParserId568" {
		dissect {
			mapping => { "message" => "Bound to preferred NIS server %{hostname}" }
			id => "msgParserId568"
			add_field => {
				"result" => "Bound to preferred NIS server"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId569
	# line in RSA:  preferred NIS Server <hostname> not responding
	else if [logstash][msgparser][id] == "msgParserId569" {
		dissect {
			mapping => { "message" => "preferred NIS Server %{hostname} not responding" }
			id => "msgParserId569"
			add_field => {
				"result" => "preferred NIS Server not responding"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId570
	# line in RSA: Local NIS group update successful. 
	else if [logstash][msgparser][id] == "msgParserId570" {
		dissect {
			mapping => { "message" => "Local NIS group update successful." }
			id => "msgParserId570"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId571
	# line in RSA:  Local NIS group update failed. Could not download the group file from the NIS server
	else if [logstash][msgparser][id] == "msgParserId571" {
		dissect {
			mapping => { "message" => "Local NIS group update failed. Could not download the group file from the NIS server" }
			id => "msgParserId571"
			add_field => {
				"result" => "Local NIS group update failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId572
	# line in RSA:  NIS server(s) not available
	else if [logstash][msgparser][id] == "msgParserId572" {
		dissect {
			mapping => { "message" => "NIS server(s) not available" }
			id => "msgParserId572"
			add_field => {
				"result" => "NIS server(s) not available"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "nis_main:warning" {
		# MESSAGE 020023
		# line in RSA:  Preferred NIS Server <shost> not responding
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Preferred NIS Server %{shost} not responding" }
				id => "message-020023"
				add_field => {
				"result" => "Preferred NIS Server not responding"
					"[event][id]" => "020023"
					"[rsa][message][id1]" => "020023"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 020023:01
		# line in RSA:  Bound to preferred NIS server <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Bound to preferred NIS server %{shost}" }
				id => "message-020023:01"
				add_field => {
				"result" => "Bound to preferred NIS server"
					"[event][id]" => "020023:01"
					"[rsa][message][id1]" => "020023:01"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId574
	# line in RSA:  Bound to preferred NIS server <shost>
	else if [logstash][msgparser][id] == "msgParserId574" {
		dissect {
			mapping => { "message" => "Bound to preferred NIS server %{shost}" }
			id => "msgParserId574"
			add_field => {
				"result" => "Bound to preferred NIS server"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId575
	# line in RSA:  Local NIS group update successful.
	else if [logstash][msgparser][id] == "msgParserId575" {
		dissect {
			mapping => { "message" => "Local NIS group update successful." }
			id => "msgParserId575"
			add_field => {
				"result" => "Local NIS group update successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId576
	# line in RSA: Network lock manager version <fld1> (for <protocol>) not registered with <service> daemon on the client <saddr>.
	else if [logstash][msgparser][id] == "msgParserId576" {
		dissect {
			mapping => { "message" => "Network lock manager version %{fld1} (for %{protocol}) not registered with %{service} daemon on the client %{saddr}." }
			id => "msgParserId576"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId577
	# line in RSA:  no address for host "?" 
	else if [logstash][msgparser][id] == "msgParserId577" {
		dissect {
			mapping => { "message" => "no address for host \"?\"" }
			id => "msgParserId577"
			add_field => {
				"result" => "no address for host ?"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId578
	# line in RSA: mem_scrub: completed NVRAM scrub (count = <fld1>) 
	else if [logstash][msgparser][id] == "msgParserId578" {
		dissect {
			mapping => { "message" => "mem_scrub: completed NVRAM scrub (count = %{fld1})" }
			id => "msgParserId578"
			add_field => {
				"result" => "completed NVRAM scrub"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId579
	# line in RSA:  The NVRAM charger <fld1> is <fld2>. <fld3>
	else if [logstash][msgparser][id] == "msgParserId579" {
		dissect {
			mapping => { "message" => "The NVRAM charger %{fld1} is %{fld2}. %{fld3}" }
			id => "msgParserId579"
			add_field => {
				"result" => "NVRAM charger status"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId580
	# line in RSA:  SSH dispatch failed from address <hostname>, <id> 
	else if [logstash][msgparser][id] == "msgParserId580" {
		dissect {
			mapping => { "message" => "SSH dispatch failed from address %{hostname}, %{id}" }
			id => "msgParserId580"
			add_field => {
				"result" => "SSH dispatch failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId581
	# line in RSA:  SSH client (<id>) from <hostname> sent unsupported channel request (<interface>).
	else if [logstash][msgparser][id] == "msgParserId581" {
		dissect {
			mapping => { "message" => "SSH client (%{id}) from %{hostname} sent unsupported channel request (%{interface})." }
			id => "msgParserId581"
			add_field => {
				"result" => "SSH client sent unsupported channel request"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId582
	# line in RSA:  Did not receive identification string from <hostname>
	else if [logstash][msgparser][id] == "msgParserId582" {
		dissect {
			mapping => { "message" => "Did not receive identification string from %{hostname}" }
			id => "msgParserId582"
			add_field => {
				"result" => "Did not receive identification string from target"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId583
	# line in RSA:  <network_service>: <event_description> access control with Socket is not connected
	else if [logstash][msgparser][id] == "msgParserId583" {
		dissect {
			mapping => { "message" => "%{network_service}: %{event_description} access control with Socket is not connected" }
			id => "msgParserId583"
			add_field => {
				"result" => "access control with Socket is not connected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId584
	# line in RSA:  passwd for user '<username>' changed.
	else if [logstash][msgparser][id] == "msgParserId584" {
		dissect {
			mapping => { "message" => "passwd for user '%{username}' changed." }
			id => "msgParserId584"
			add_field => {
				"result" => "passwd for user changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId585
	# line in RSA:  Performance archiver started. <result>.
	else if [logstash][msgparser][id] == "msgParserId585" {
		dissect {
			mapping => { "message" => "Performance archiver started. %{result}." }
			id => "msgParserId585"
			add_field => {
				"event_description" => "Performance archiver started"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId586
	# line in RSA:  <interface>: Network communication error
	else if [logstash][msgparser][id] == "msgParserId586" {
		dissect {
			mapping => { "message" => "%{interface}: Network communication error" }
			id => "msgParserId586"
			add_field => {
				"result" => "Network communication error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId587
	# line in RSA:  <process>: switching to <interface>
	else if [logstash][msgparser][id] == "msgParserId587" {
		dissect {
			mapping => { "message" => "%{process}: switching to %{interface}" }
			id => "msgParserId587"
			add_field => {
				"event_description" => "switching to new interface"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "quota.parse.error:error" {
		# MESSAGE 012789
		# line in RSA:  quota: skipping new definition for <fld30> (<fld1>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "quota: skipping new definition for %{fld30} (%{fld1})." }
				id => "message-012789"
				add_field => {
				"result" => "skipping new definitions for volume"
					"[event][id]" => "012789"
					"[rsa][message][id1]" => "012789"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012789:01
		# line in RSA:  quota: can't stat file <fld30>: No such file or directory 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "quota: can't stat file %{fld30}: No such file or directory" }
				id => "message-012789:01"
				add_field => {
				"result" => "cannot stat file - No such file or directory"
					"[event][id]" => "012789:01"
					"[rsa][message][id1]" => "012789:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012789:02
		# line in RSA:  [quota: warning]: Total tree { disk quota | quota } limit from <fld30> (<fld1>) exceeds size of volume <shost> (<fld2>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*\[quota:[\s]+warning\]:[\s]+Total[\s]+tree[\s]+([\s]*disk[\s]+quota[\s]+|[\s]*quota[\s]+)[\s]+limit[\s]+from[\s]+(?<fld30>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+exceeds[\s]+size[\s]+of[\s]+volume[\s]+(?<shost>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)$" }
				id => "message-012789:02"
				add_field => {
				"result" => "Total tree quota limit exceeds size of volume"
					"[event][id]" => "012789:02"
					"[rsa][message][id1]" => "012789:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012789:03
		# line in RSA:  quota: <fld1> contains no entries for volume <fld30>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "quota: %{fld1} contains no entries for volume %{fld30}" }
				id => "message-012789:03"
				add_field => {
				"result" => "quota file contains no entries for volume"
					"[event][id]" => "012789:03"
					"[rsa][message][id1]" => "012789:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012789:04
		# line in RSA:  quota: can't find directory <fld30>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "quota: can't find directory %{fld30}." }
				id => "message-012789:04"
				add_field => {
				"result" => "quota: can't find directory"
					"[event][id]" => "012789:04"
					"[rsa][message][id1]" => "012789:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012789:05
		# line in RSA:  quota: no new entries for volume lim in <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "quota: no new entries for volume lim in %{fld1}" }
				id => "message-012789:05"
				add_field => {
				"result" => "no new entries for volume"
					"[event][id]" => "012789:05"
					"[rsa][message][id1]" => "012789:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012789:06
		# line in RSA:  quota: Invalid volume in <fld30> (<info>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "quota: Invalid volume in %{fld30} (%{info})." }
				id => "message-012789:06"
				add_field => {
				"result" => "Invalid volume "
					"[event][id]" => "012789:06"
					"[rsa][message][id1]" => "012789:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "quota.softlimit.exceeded:notice" {
		# MESSAGE 012790
		# line in RSA:  Soft block limit exceeded for user <username>, tree <fld1> on volume <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Soft block limit exceeded for user %{username}, tree %{fld1} on volume %{fld30}" }
				id => "message-012790"
				add_field => {
				"result" => "Soft block limit exceeded for user"
					"[event][id]" => "012790"
					"[rsa][message][id1]" => "012790"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012790:01
		# line in RSA:  Soft block limit exceeded for tree <fld1> on volume <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Soft block limit exceeded for tree %{fld1} on volume %{fld30}" }
				id => "message-012790:01"
				add_field => {
				"result" => "Soft block limit exceeded for tree"
					"[event][id]" => "012790:01"
					"[rsa][message][id1]" => "012790:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012791
		# line in RSA:  Threshold exceeded for user <username>, tree <fld1> on volume <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Threshold exceeded for user %{username}, tree %{fld1} on volume %{fld30}" }
				id => "message-012791"
				add_field => {
				"result" => "Threshold exceeded for user"
					"[event][id]" => "012791"
					"[rsa][message][id1]" => "012791"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012791:01
		# line in RSA:  Threshold exceeded for tree <fld1> on volume <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Threshold exceeded for tree %{fld1} on volume %{fld30}" }
				id => "message-012791:01"
				add_field => {
				"result" => "Threshold exceeded for tree"
					"[event][id]" => "012791:01"
					"[rsa][message][id1]" => "012791:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040443
		# line in RSA:  Soft block limit exceeded for user <username> on volume <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Soft block limit exceeded for user %{username} on volume %{fld30}" }
				id => "message-040443"
				add_field => {
				"result" => "Soft block limit exceeded for user"
					"[event][id]" => "040443"
					"[rsa][message][id1]" => "040443"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "quota.softlimit.normal:notice" {
		# MESSAGE 012792
		# line in RSA:  Soft block limit returned to normal for user<username>, tree <device> on volume <interface> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Soft block limit returned to normal for user%{username}, tree %{device} on volume %{interface}" }
				id => "message-012792"
				add_field => {
				"result" => "Soft block limit returned to normal for user"
					"[event][id]" => "012792"
					"[rsa][message][id1]" => "012792"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012792:01
		# line in RSA:  Soft block limit returned to normal for tree <device> on volume <interface> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Soft block limit returned to normal for tree %{device} on volume %{interface}" }
				id => "message-012792:01"
				add_field => {
				"result" => "Soft block limit returned to normal"
					"[event][id]" => "012792:01"
					"[rsa][message][id1]" => "012792:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId602
	# line in RSA:  { Aggregate | Volume } { '<disk_volume>' | <disk_volume> } (<info>): has completed <dclass_counter1> CP(s).
	else if [logstash][msgparser][id] == "msgParserId602" {
		grok {
			match => { "message" => "^[\s]*([\s]*Aggregate[\s]+|[\s]*Volume[\s]+)[\s]+([\s]*'(?<disk_volume>[^']*)'[\s]+|[\s]*(?<disk_volume>[^\s]*)[\s]+)[\s]+\((?<info>[^\)]*)\):[\s]+has[\s]+completed[\s]+(?<dclass_counter1>[^\s]*)[\s]+CP\(s\)\.$" }
			id => "msgParserId602"
			add_field => {
				"event_description" => "Aggregate has completed CPs"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId603
	# line in RSA:  Sparing Disk <id> Shelf <fld1> Bay <fld2> [NETAPP   <fld3>] S/N [<interface>], <event_description>
	else if [logstash][msgparser][id] == "msgParserId603" {
		dissect {
			mapping => { "message" => "Sparing Disk %{id} Shelf %{fld1} Bay %{fld2} [NETAPP   %{fld3}] S/N [%{interface}], %{event_description}" }
			id => "msgParserId603"
			add_field => {
				"result" => "Sparing Disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId604
	# line in RSA: Upgrading RAID labels. 
	else if [logstash][msgparser][id] == "msgParserId604" {
		dissect {
			mapping => { "message" => "Upgrading RAID labels." }
			id => "msgParserId604"
			add_field => {
				"result" => "Upgrading RAID labels"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "raid.assim.mirror.noChild:ALERT" {
		# MESSAGE 030224
		# line in RSA:  Aggregate foreign:<fld30>, <username>: No operable plexes found.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aggregate foreign:%{fld30}, %{username}: No operable plexes found." }
				id => "message-030224"
				add_field => {
				"result" => "No operable plexes found"
					"[event][id]" => "030224"
					"[rsa][message][id1]" => "030224"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030224:01
		# line in RSA:  Aggregate <fld1> mirrorobj_verify: No operable plexes found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aggregate %{fld1} mirrorobj_verify: No operable plexes found." }
				id => "message-030224:01"
				add_field => {
				"result" => "Aggregate aggr, mirrorobj_verify: No operable plexes found."
					"[event][id]" => "030224:01"
					"[rsa][message][id1]" => "030224:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "raid.assim.plex.missingChild:error" {
		# MESSAGE 030223
		# line in RSA:  Aggregate foreign:<fld30>, <username>: Plex <fld1> only has <fld2> working RAID groups (<fld3>) and is being taken offline
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aggregate foreign:%{fld30}, %{username}: Plex %{fld1} only has %{fld2} working RAID groups (%{fld3}) and is being taken offline" }
				id => "message-030223"
				add_field => {
				"result" => "Plex being taken offline"
					"[event][id]" => "030223"
					"[rsa][message][id1]" => "030223"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030223:01
		# line in RSA:  Aggregate <fld1> plexobj_verify: Plex <fld2> only has <fld3> working RAID groups <fld4> total) and is being taken offline 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aggregate %{fld1} plexobj_verify: Plex %{fld2} only has %{fld3} working RAID groups %{fld4} total) and is being taken offline" }
				id => "message-030223:01"
				add_field => {
				"result" => "Aggregate aggr, plexobj_verify: Plex  only has  working RAID groups ( total) and is being taken offline"
					"[event][id]" => "030223:01"
					"[rsa][message][id1]" => "030223:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "raid.assim.rg.missingChild:error" {
		# MESSAGE 030222
		# line in RSA:  Aggregate foreign:<fld30>, <username>: RAID object <fld1> has only <fld2> valid children, expected <fld3>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aggregate foreign:%{fld30}, %{username}: RAID object %{fld1} has only %{fld2} valid children, expected %{fld3}." }
				id => "message-030222"
				add_field => {
				"result" => "RAID object has insufficient children"
					"[event][id]" => "030222"
					"[rsa][message][id1]" => "030222"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030222:01
		# line in RSA:  Aggregate <fld1> rgobj_verify: RAID object <fld2> has only <fld3> valid children, expected <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aggregate %{fld1} rgobj_verify: RAID object %{fld2} has only %{fld3} valid children, expected %{fld4}" }
				id => "message-030222:01"
				add_field => {
				"result" => "Aggregate aggr, rgobj_verify: RAID object  has only  valid children, expected ."
					"[event][id]" => "030222:01"
					"[rsa][message][id1]" => "030222:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId611
	# line in RSA:  Replayed <device> checksum blocks.
	else if [logstash][msgparser][id] == "msgParserId611" {
		dissect {
			mapping => { "message" => "Replayed %{device} checksum blocks." }
			id => "msgParserId611"
			add_field => {
				"result" => "Replayed checksum blocks"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId612
	# line in RSA:  Plex <fld30> has failed.
	else if [logstash][msgparser][id] == "msgParserId612" {
		dissect {
			mapping => { "message" => "Plex %{fld30} has failed." }
			id => "msgParserId612"
			add_field => {
				"result" => "Plex failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId613
	# line in RSA:  File system Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>] failed.
	else if [logstash][msgparser][id] == "msgParserId613" {
		dissect {
			mapping => { "message" => "File system Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}] failed." }
			id => "msgParserId613"
			add_field => {
				"result" => "File system Disk failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId614
	# line in RSA:  File system Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>] is missing.
	else if [logstash][msgparser][id] == "msgParserId614" {
		dissect {
			mapping => { "message" => "File system Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}] is missing." }
			id => "msgParserId614"
			add_field => {
				"result" => "File system Disk is missing"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId615
	# line in RSA:  File system Disk <fld30> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>] is not responding.
	else if [logstash][msgparser][id] == "msgParserId615" {
		dissect {
			mapping => { "message" => "File system Disk %{fld30} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}] is not responding." }
			id => "msgParserId615"
			add_field => {
				"result" => "File system Disk not responding"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId616
	# line in RSA:  Spare Disk <id> Shelf <fld1> Bay <fld2> [NETAPP  <fld3>] S/N [<fld4>] failed.
	else if [logstash][msgparser][id] == "msgParserId616" {
		dissect {
			mapping => { "message" => "Spare Disk %{id} Shelf %{fld1} Bay %{fld2} [NETAPP  %{fld3}] S/N [%{fld4}] failed." }
			id => "msgParserId616"
			add_field => {
				"result" => "Spare disk failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId617
	# line in RSA:  Spare Disk <id> Shelf <fld1> Bay <fld2> [NETAPP  <fld3>] S/N [<fld4>] is missing.
	else if [logstash][msgparser][id] == "msgParserId617" {
		dissect {
			mapping => { "message" => "Spare Disk %{id} Shelf %{fld1} Bay %{fld2} [NETAPP  %{fld3}] S/N [%{fld4}] is missing." }
			id => "msgParserId617"
			add_field => {
				"result" => "Spare disk is missing"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId618
	# line in RSA:  { Aggregate | Volume } '<fld30>' destroyed.
	else if [logstash][msgparser][id] == "msgParserId618" {
		grok {
			match => { "message" => "^[\s]*([\s]*Aggregate[\s]+|[\s]*Volume[\s]+)[\s]+'(?<fld30>[^']*)'[\s]+destroyed\.$" }
			id => "msgParserId618"
			add_field => {
				"result" => "Volume destroyed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "raid.config.vol.renamed:info" {
		# MESSAGE 012857
		# line in RSA:  Volume '<fld30>' renamed to '<shost>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Volume '%{fld30}' renamed to '%{shost}'." }
				id => "message-012857"
				add_field => {
				"result" => "Volume renamed"
					"[event][id]" => "012857"
					"[rsa][message][id1]" => "012857"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 012857:01
		# line in RSA:  Aggregate '<fld30>' renamed to '<shost>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aggregate '%{fld30}' renamed to '%{shost}'." }
				id => "message-012857:01"
				add_field => {
				"result" => "Aggregate renamed"
					"[event][id]" => "012857:01"
					"[rsa][message][id1]" => "012857:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId621
	# line in RSA:  aggregate <fld30> assigned as an offline reference storage for <fld1> 
	else if [logstash][msgparser][id] == "msgParserId621" {
		dissect {
			mapping => { "message" => "aggregate %{fld30} assigned as an offline reference storage for %{fld1}" }
			id => "msgParserId621"
			add_field => {
				"result" => "aggregate assigned as offline reference storage"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId622
	# line in RSA: aggregate Disk <fld30> Shelf <fld1> Bay <fld2>[<fld3>] S/N [<fld4>] Deleting dirty region log <fld5>. 
	else if [logstash][msgparser][id] == "msgParserId622" {
		dissect {
			mapping => { "message" => "aggregate Disk %{fld30} Shelf %{fld1} Bay %{fld2}[%{fld3}] S/N [%{fld4}] Deleting dirty region log %{fld5}." }
			id => "msgParserId622"
			add_field => {
				"result" => "raid disk - deleting dirty regionlog "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId623
	# line in RSA: Disk <fld> Shelf <fld1> Bay <fld2>[<fld3>] S/N [<fld4>] has been inserted into the system
	else if [logstash][msgparser][id] == "msgParserId623" {
		dissect {
			mapping => { "message" => "Disk %{fld} Shelf %{fld1} Bay %{fld2}[%{fld3}] S/N [%{fld4}] has been inserted into the system" }
			id => "msgParserId623"
			add_field => {
				"result" => "raid disk inserted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId624
	# line in RSA: Disk <fld> Shelf <fld1> Bay <fld2> [<fld3>] S/N [<fld4>] is missing from the system 
	else if [logstash][msgparser][id] == "msgParserId624" {
		dissect {
			mapping => { "message" => "Disk %{fld} Shelf %{fld1} Bay %{fld2} [%{fld3}] S/N [%{fld4}] is missing from the system" }
			id => "msgParserId624"
			add_field => {
				"result" => "raid disk missing"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId625
	# line in RSA:  Disk <fld1> Shelf <fld2> Bay <fld3> [NETAPP <fld4>] S/N [<fld5>] is missing from the system 
	else if [logstash][msgparser][id] == "msgParserId625" {
		dissect {
			mapping => { "message" => "Disk %{fld1} Shelf %{fld2} Bay %{fld3} [NETAPP %{fld4}] S/N [%{fld5}] is missing from the system" }
			id => "msgParserId625"
			add_field => {
				"result" => "raid disk missing"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId626
	# line in RSA:  Marking Disk <fld30> Shelf <fld1> Bay <fld2> [<fld3>] S/N [<fld4>] offline.
	else if [logstash][msgparser][id] == "msgParserId626" {
		dissect {
			mapping => { "message" => "Marking Disk %{fld30} Shelf %{fld1} Bay %{fld2} [%{fld3}] S/N [%{fld4}] offline." }
			id => "msgParserId626"
			add_field => {
				"result" => "Marking Disk offline"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId627
	# line in RSA:  Onlining Disk <fld30> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>].
	else if [logstash][msgparser][id] == "msgParserId627" {
		dissect {
			mapping => { "message" => "Onlining Disk %{fld30} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}]." }
			id => "msgParserId627"
			add_field => {
				"result" => "Onlining Disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId628
	# line in RSA:  Disk <id> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>] reported a predictive failure and it is prefailed; <event_description> 
	else if [logstash][msgparser][id] == "msgParserId628" {
		dissect {
			mapping => { "message" => "Disk %{id} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}] reported a predictive failure and it is prefailed; %{event_description}" }
			id => "msgParserId628"
			add_field => {
				"result" => "Disk reported a predictive failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId629
	# line in RSA:  Disk <id> Shelf <fld1> Bay <fld2> [NETAPP <fld4>] S/N [<fld5>] was unfailed, <event_description> 
	else if [logstash][msgparser][id] == "msgParserId629" {
		dissect {
			mapping => { "message" => "Disk %{id} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld4}] S/N [%{fld5}] was unfailed, %{event_description}" }
			id => "msgParserId629"
			add_field => {
				"result" => "Disk was unfailed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId630
	# line in RSA:  Unload of Disk <fld30> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>] has completed successfully
	else if [logstash][msgparser][id] == "msgParserId630" {
		dissect {
			mapping => { "message" => "Unload of Disk %{fld30} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}] has completed successfully" }
			id => "msgParserId630"
			add_field => {
				"result" => "Unload of Disk completed successfully"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId631
	# line in RSA:  Disk <fld30> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>] : disk zeroing complete
	else if [logstash][msgparser][id] == "msgParserId631" {
		dissect {
			mapping => { "message" => "Disk %{fld30} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}] : disk zeroing complete" }
			id => "msgParserId631"
			add_field => {
				"result" => "disk zeroing complete"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId632
	# line in RSA:  Failed Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>] is still present in the system and should be removed.
	else if [logstash][msgparser][id] == "msgParserId632" {
		dissect {
			mapping => { "message" => "Failed Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}] is still present in the system and should be removed." }
			id => "msgParserId632"
			add_field => {
				"result" => "Failed Disk Shelf Bay should be removed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId633
	# line in RSA:  Label write on Disk <fld1> Shelf <fld2> Bay <fld3> [NETAPP   <fld4> AQJZ] S/N <fld5> failed with storage error fatal disk error. The system will stop using the disk for I/O operations. 
	else if [logstash][msgparser][id] == "msgParserId633" {
		dissect {
			mapping => { "message" => "Label write on Disk %{fld1} Shelf %{fld2} Bay %{fld3} [NETAPP   %{fld4} AQJZ] S/N %{fld5} failed with storage error fatal disk error. The system will stop using the disk for I/O operations." }
			id => "msgParserId633"
			add_field => {
				"result" => "Label write on Disk /aggr/plex/rg/c. Shelf  Bay  [NETAPP   X_SGLXYSSX AQJZ] S/N [QDXM] failed with storage error fatal disk error. The system will stop using the disk for I/O operations."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId634
	# line in RSA:  Aggregate Snapshot copies are used in SyncMirror aggregate '<username>'. That is not recommended.
	else if [logstash][msgparser][id] == "msgParserId634" {
		dissect {
			mapping => { "message" => "Aggregate Snapshot copies are used in SyncMirror aggregate '%{username}'. That is not recommended." }
			id => "msgParserId634"
			add_field => {
				"result" => "Aggregate Snapshot copies are used in SyncMirror aggregate"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId635
	# line in RSA:  Aggregate Snapshot copy reserve in SyncMirror aggregate '<username>' is too low. <fld1> 
	else if [logstash][msgparser][id] == "msgParserId635" {
		dissect {
			mapping => { "message" => "Aggregate Snapshot copy reserve in SyncMirror aggregate '%{username}' is too low. %{fld1}" }
			id => "msgParserId635"
			add_field => {
				"result" => "Aggregate Snapshot copy reserve too low"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId636
	# line in RSA:  <id>: resynchronization completed in <fld1>
	else if [logstash][msgparser][id] == "msgParserId636" {
		dissect {
			mapping => { "message" => "%{id}: resynchronization completed in %{fld1}" }
			id => "msgParserId636"
			add_field => {
				"result" => "resynchronization completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId637
	# line in RSA:  <fld3>: created mirror resynchronization snapshot mirror_resync. <fld1>(<fld30>)
	else if [logstash][msgparser][id] == "msgParserId637" {
		dissect {
			mapping => { "message" => "%{fld3}: created mirror resynchronization snapshot mirror_resync. %{fld1}(%{fld30})" }
			id => "msgParserId637"
			add_field => {
				"result" => "created mirror resynchronization snapshot mirror_resync"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId638
	# line in RSA:  Aggregate <id>: created mirror resynchronization snapshot mirror_resync. <fld1>(<fld30>)
	else if [logstash][msgparser][id] == "msgParserId638" {
		dissect {
			mapping => { "message" => "Aggregate %{id}: created mirror resynchronization snapshot mirror_resync. %{fld1}(%{fld30})" }
			id => "msgParserId638"
			add_field => {
				"hostname" => "%{hhost}"
				"result" => "created mirror resynchronization snapshot mirror_resync"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId639
	# line in RSA:  <fld3>: deleted mirror resynchronization snapshot mirror_resync.<fld1>(<fld30>)
	else if [logstash][msgparser][id] == "msgParserId639" {
		dissect {
			mapping => { "message" => "%{fld3}: deleted mirror resynchronization snapshot mirror_resync.%{fld1}(%{fld30})" }
			id => "msgParserId639"
			add_field => {
				"result" => "deleted mirror resynchronization snapshot mirror_resync"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId640
	# line in RSA:  Aggregate <id>: deleted mirror resynchronization snapshot mirror_resync.<fld1>(<fld30>
	else if [logstash][msgparser][id] == "msgParserId640" {
		dissect {
			mapping => { "message" => "Aggregate %{id}: deleted mirror resynchronization snapshot mirror_resync.%{fld1}(%{fld30}" }
			id => "msgParserId640"
			add_field => {
				"hostname" => "%{hhost}"
				"result" => "deleted mirror resynchronization snapshot mirror_resync"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId641
	# line in RSA:  <id>: start resynchronize to target <username>
	else if [logstash][msgparser][id] == "msgParserId641" {
		dissect {
			mapping => { "message" => "%{id}: start resynchronize to target %{username}" }
			id => "msgParserId641"
			add_field => {
				"result" => "start resynchronize to target"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId642
	# line in RSA:  The SyncMirror aggregate Snapshot copy in aggregate '<id>' is being deleted. <event_description>
	else if [logstash][msgparser][id] == "msgParserId642" {
		dissect {
			mapping => { "message" => "The SyncMirror aggregate Snapshot copy in aggregate '%{id}' is being deleted. %{event_description}" }
			id => "msgParserId642"
			add_field => {
				"result" => "aggregate Snapshot copy being deleted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId643
	# line in RSA:  Aggregate Snapshot copy reserve in SyncMirror aggregate '<id>' is increased <event_description>.
	else if [logstash][msgparser][id] == "msgParserId643" {
		dissect {
			mapping => { "message" => "Aggregate Snapshot copy reserve in SyncMirror aggregate '%{id}' is increased %{event_description}." }
			id => "msgParserId643"
			add_field => {
				"result" => "Aggregate Snapshot copy reserve increased"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId644
	# line in RSA:  Aggregate Snapshot copy reserve in SyncMirror aggregate '<id>' was reverted <event_description>.
	else if [logstash][msgparser][id] == "msgParserId644" {
		dissect {
			mapping => { "message" => "Aggregate Snapshot copy reserve in SyncMirror aggregate '%{id}' was reverted %{event_description}." }
			id => "msgParserId644"
			add_field => {
				"result" => "Aggregate Snapshot copy reserve reverted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId645
	# line in RSA:  Read error on Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>], block #<fld5>
	else if [logstash][msgparser][id] == "msgParserId645" {
		dissect {
			mapping => { "message" => "Read error on Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}], block #%{fld5}" }
			id => "msgParserId645"
			add_field => {
				"result" => "bad disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId646
	# line in RSA:  Block recommended for reassignment on Disk <fld30> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>], block #<fld5>
	else if [logstash][msgparser][id] == "msgParserId646" {
		dissect {
			mapping => { "message" => "Block recommended for reassignment on Disk %{fld30} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}], block #%{fld5}" }
			id => "msgParserId646"
			add_field => {
				"result" => "Block recommended for reassignment"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId647
	# line in RSA:  Replaying partner <id>.
	else if [logstash][msgparser][id] == "msgParserId647" {
		dissect {
			mapping => { "message" => "Replaying partner %{id}." }
			id => "msgParserId647"
			add_field => {
				"result" => "Replaying partner"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId648
	# line in RSA:  <interface>: disk copy from <fld1> to <fld2> aborted at <event_description>
	else if [logstash][msgparser][id] == "msgParserId648" {
		dissect {
			mapping => { "message" => "%{interface}: disk copy from %{fld1} to %{fld2} aborted at %{event_description}" }
			id => "msgParserId648"
			add_field => {
				"result" => "disk copy aborted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId649
	# line in RSA:  <interface>: disk copy from <fld1> to <fld2> completed in <event_description>
	else if [logstash][msgparser][id] == "msgParserId649" {
		dissect {
			mapping => { "message" => "%{interface}: disk copy from %{fld1} to %{fld2} completed in %{event_description}" }
			id => "msgParserId649"
			add_field => {
				"result" => "disk copy completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId650
	# line in RSA:  Read error on Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>], block #<fld5> during disk copy
	else if [logstash][msgparser][id] == "msgParserId650" {
		dissect {
			mapping => { "message" => "Read error on Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}], block #%{fld5} during disk copy" }
			id => "msgParserId650"
			add_field => {
				"result" => "bad disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId651
	# line in RSA:  <interface>: starting disk copy from <fld1> to <fld2> 
	else if [logstash][msgparser][id] == "msgParserId651" {
		dissect {
			mapping => { "message" => "%{interface}: starting disk copy from %{fld1} to %{fld2}" }
			id => "msgParserId651"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId652
	# line in RSA:  Disk <fld30> has come back online. 
	else if [logstash][msgparser][id] == "msgParserId652" {
		dissect {
			mapping => { "message" => "Disk %{fld30} has come back online." }
			id => "msgParserId652"
			add_field => {
				"result" => "Disk has come back online"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId653
	# line in RSA:  Read error on Disk <fld30> [<fld1>] S/N [<fld2>], block #<fld3> during media_scrub
	else if [logstash][msgparser][id] == "msgParserId653" {
		dissect {
			mapping => { "message" => "Read error on Disk %{fld30} [%{fld1}] S/N [%{fld2}], block #%{fld3} during media_scrub" }
			id => "msgParserId653"
			add_field => {
				"result" => "Read error on Disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId654
	# line in RSA:  media_scrub rewriting chunk on Disk <fld1> Shelf <fld2> Bay <fld3> [<fld4>] S/N [<fld5>], start block #<fld6>, count #<fld7>
	else if [logstash][msgparser][id] == "msgParserId654" {
		dissect {
			mapping => { "message" => "media_scrub rewriting chunk on Disk %{fld1} Shelf %{fld2} Bay %{fld3} [%{fld4}] S/N [%{fld5}], start block #%{fld6}, count #%{fld7}" }
			id => "msgParserId654"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId655
	# line in RSA:  Fixing bad data on Disk <id> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>], block #<fld5>
	else if [logstash][msgparser][id] == "msgParserId655" {
		dissect {
			mapping => { "message" => "Fixing bad data on Disk %{id} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}], block #%{fld5}" }
			id => "msgParserId655"
			add_field => {
				"result" => "fixing bad disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId656
	# line in RSA:  Fixing bad data on Disk <id> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<interface>], block #<device>
	else if [logstash][msgparser][id] == "msgParserId656" {
		dissect {
			mapping => { "message" => "Fixing bad data on Disk %{id} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{interface}], block #%{device}" }
			id => "msgParserId656"
			add_field => {
				"result" => "fixing bad disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId657
	# line in RSA:  Fixing bad data on Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>], block #<fld5>
	else if [logstash][msgparser][id] == "msgParserId657" {
		dissect {
			mapping => { "message" => "Fixing bad data on Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}], block #%{fld5}" }
			id => "msgParserId657"
			add_field => {
				"result" => "bad disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId658
	# line in RSA: Fixing bad block on disk <fld30> (S/N <fld1>), block <fld2>
	else if [logstash][msgparser][id] == "msgParserId658" {
		dissect {
			mapping => { "message" => "Fixing bad block on disk %{fld30} (S/N %{fld1}), block %{fld2}" }
			id => "msgParserId658"
			add_field => {
				"result" => "Fixing bad block on disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId659
	# line in RSA:  Fixing bad parity on Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>], block #<fld5>
	else if [logstash][msgparser][id] == "msgParserId659" {
		dissect {
			mapping => { "message" => "Fixing bad parity on Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}], block #%{fld5}" }
			id => "msgParserId659"
			add_field => {
				"result" => "bad disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId660
	# line in RSA:  Recalc Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>], block #<fld5> matches stored checksum
	else if [logstash][msgparser][id] == "msgParserId660" {
		dissect {
			mapping => { "message" => "Recalc Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}], block #%{fld5} matches stored checksum" }
			id => "msgParserId660"
			add_field => {
				"result" => "Recalc Disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId661
	# line in RSA:  The reconstruction cannot start in RAID group <id>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId661" {
		dissect {
			mapping => { "message" => "The reconstruction cannot start in RAID group %{id}: %{event_description}" }
			id => "msgParserId661"
			add_field => {
				"result" => "reconstruction cannot start in RAID group"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId662
	# line in RSA:  <fld30>: reconstruction completed for <fld> in <fld1>
	else if [logstash][msgparser][id] == "msgParserId662" {
		dissect {
			mapping => { "message" => "%{fld30}: reconstruction completed for %{fld} in %{fld1}" }
			id => "msgParserId662"
			add_field => {
				"result" => "reconstruction completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId663
	# line in RSA:  Spare disk <fld> will be used to reconstruct one missing disk in RAID group <interface>.
	else if [logstash][msgparser][id] == "msgParserId663" {
		dissect {
			mapping => { "message" => "Spare disk %{fld} will be used to reconstruct one missing disk in RAID group %{interface}." }
			id => "msgParserId663"
			add_field => {
				"result" => "missing disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId664
	# line in RSA:  RAID group <interface> is missing <fld> disk(s).
	else if [logstash][msgparser][id] == "msgParserId664" {
		dissect {
			mapping => { "message" => "RAID group %{interface} is missing %{fld} disk(s)." }
			id => "msgParserId664"
			add_field => {
				"result" => "missing disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId665
	# line in RSA:  <interface>: starting reconstruction, using disk <fld>
	else if [logstash][msgparser][id] == "msgParserId665" {
		dissect {
			mapping => { "message" => "%{interface}: starting reconstruction, using disk %{fld}" }
			id => "msgParserId665"
			add_field => {
				"result" => "starting reconstruction"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId666
	# line in RSA:  <id>: starting reconstruction, using disk <fld1>
	else if [logstash][msgparser][id] == "msgParserId666" {
		dissect {
			mapping => { "message" => "%{id}: starting reconstruction, using disk %{fld1}" }
			id => "msgParserId666"
			add_field => {
				"result" => "starting reconstruction"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId667
	# line in RSA:  <id>: parity recomputation completed in <fld1>
	else if [logstash][msgparser][id] == "msgParserId667" {
		dissect {
			mapping => { "message" => "%{id}: parity recomputation completed in %{fld1}" }
			id => "msgParserId667"
			add_field => {
				"result" => "parity recomputation completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId668
	# line in RSA:  Rewriting parity on RAID group <fld1> stripe <fld2> 
	else if [logstash][msgparser][id] == "msgParserId668" {
		dissect {
			mapping => { "message" => "Rewriting parity on RAID group %{fld1} stripe %{fld2}" }
			id => "msgParserId668"
			add_field => {
				"result" => "Rewriting parity on RAID group /aggr_fc__/plex/rg, stripe #."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId669
	# line in RSA:  <id>: starting parity recomputation
	else if [logstash][msgparser][id] == "msgParserId669" {
		dissect {
			mapping => { "message" => "%{id}: starting parity recomputation" }
			id => "msgParserId669"
			add_field => {
				"result" => "starting parity recomputation"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId670
	# line in RSA:   <fld30>: parity recomputation aborted after <fld1>
	else if [logstash][msgparser][id] == "msgParserId670" {
		dissect {
			mapping => { "message" => "%{fld30}: parity recomputation aborted after %{fld1}" }
			id => "msgParserId670"
			add_field => {
				"result" => "parity recomputation aborted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId671
	# line in RSA:  <id>: start resynchronization (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId671" {
		dissect {
			mapping => { "message" => "%{id}: start resynchronization (%{fld1})" }
			id => "msgParserId671"
			add_field => {
				"result" => "start resynchronization"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId672
	# line in RSA:  Checksum error on Disk <interface> Shelf <fld1> Bay <fld2> [NETAPP <fld3>] S/N [<fld4>], block #<fld5> during scrub
	else if [logstash][msgparser][id] == "msgParserId672" {
		dissect {
			mapping => { "message" => "Checksum error on Disk %{interface} Shelf %{fld1} Bay %{fld2} [NETAPP %{fld3}] S/N [%{fld4}], block #%{fld5} during scrub" }
			id => "msgParserId672"
			add_field => {
				"result" => "error disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId673
	# line in RSA:  <service>: restarting suspended scrub <result>.
	else if [logstash][msgparser][id] == "msgParserId673" {
		dissect {
			mapping => { "message" => "%{service}: restarting suspended scrub %{result}." }
			id => "msgParserId673"
			add_field => {
				"event_description" => "restarting suspended scrub "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId674
	# line in RSA:  Read error on Disk <fld30> Shelf <fld> Bay <fld1> [NETAPP <version>] S/N [<fld3>], block #<fld4> during scrub
	else if [logstash][msgparser][id] == "msgParserId674" {
		dissect {
			mapping => { "message" => "Read error on Disk %{fld30} Shelf %{fld} Bay %{fld1} [NETAPP %{version}] S/N [%{fld3}], block #%{fld4} during scrub" }
			id => "msgParserId674"
			add_field => {
				"result" => "Read error on Disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId675
	# line in RSA: Read error on disk <fld1> (S/N <fld2>), block <fld3> during scrub 
	else if [logstash][msgparser][id] == "msgParserId675" {
		dissect {
			mapping => { "message" => "Read error on disk %{fld1} (S/N %{fld2}), block %{fld3} during scrub" }
			id => "msgParserId675"
			add_field => {
				"result" => "Read error on disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId676
	# line in RSA: <hostname>: resuming scrub at stripe <fld> (<fld1> complete)
	else if [logstash][msgparser][id] == "msgParserId676" {
		dissect {
			mapping => { "message" => "%{hostname}: resuming scrub at stripe %{fld} (%{fld1} complete)" }
			id => "msgParserId676"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId677
	# line in RSA: Scrub rewriting bad data block on <fld1> (S/N <fld2>), block <fld3> 
	else if [logstash][msgparser][id] == "msgParserId677" {
		dissect {
			mapping => { "message" => "Scrub rewriting bad data block on %{fld1} (S/N %{fld2}), block %{fld3}" }
			id => "msgParserId677"
			add_field => {
				"result" => "Scrub rewriting bad data block"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId678
	# line in RSA: <interface>: starting scrub 
	else if [logstash][msgparser][id] == "msgParserId678" {
		dissect {
			mapping => { "message" => "%{interface}: starting scrub" }
			id => "msgParserId678"
			add_field => {
				"result" => "starting scrub"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId679
	# line in RSA: <interface>: scrub completed in <fld1> 
	else if [logstash][msgparser][id] == "msgParserId679" {
		dissect {
			mapping => { "message" => "%{interface}: scrub completed in %{fld1}" }
			id => "msgParserId679"
			add_field => {
				"result" => "scrub completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "raid.rg.scrub.summary.cksum:CRITICAL" {
		# MESSAGE 013031
		# line in RSA:  Scrub found <fld1> checksum error in <fld30>, <fld2> in current scrub
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Scrub found %{fld1} checksum error in %{fld30}, %{fld2} in current scrub" }
				id => "message-013031"
				add_field => {
				"result" => "Scrub found checksum errors"
					"[event][id]" => "013031"
					"[rsa][message][id1]" => "013031"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 013031:01
		# line in RSA:  Scrub found <fld1> checksum errors in <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Scrub found %{fld1} checksum errors in %{interface}" }
				id => "message-013031:01"
				add_field => {
				"result" => "error "
					"[event][id]" => "013031:01"
					"[rsa][message][id1]" => "013031:01"
					"[event][categoryid]" => "1603010100"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId682
	# line in RSA: Scrub found <fld1> checksum errors in <interface>. 
	else if [logstash][msgparser][id] == "msgParserId682" {
		dissect {
			mapping => { "message" => "Scrub found %{fld1} checksum errors in %{interface}." }
			id => "msgParserId682"
			add_field => {
				"result" => "Scrub found checksum errors"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId683
	# line in RSA:  Scrub found <fld1> checksum { errors | error } in <fld30>, 
	else if [logstash][msgparser][id] == "msgParserId683" {
		grok {
			match => { "message" => "^[\s]*Scrub[\s]+found[\s]+(?<fld1>[^\s]*)[\s]+checksum[\s]+([\s]*errors[\s]+|[\s]*error[\s]+)[\s]+in[\s]+(?<fld30>[^,]*),[\s]+$" }
			id => "msgParserId683"
			add_field => {
				"result" => "Scrub found checksum errors"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId684
	# line in RSA: Scrub found <fld1> {checksum | media} errors in <fld30>. 
	else if [logstash][msgparser][id] == "msgParserId684" {
		grok {
			match => { "message" => "^Scrub[\s]+found[\s]+(?<fld1>[^\s]*)[\s]+(checksum[\s]+|[\s]*media)[\s]+errors[\s]+in[\s]+(?<fld30>[^\.]*)\.[\s]+$" }
			id => "msgParserId684"
			add_field => {
				"result" => "Scrub found checksum errors"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId685
	# line in RSA:  Scrub found <fld1> media { errors | error } in <interface>.
	else if [logstash][msgparser][id] == "msgParserId685" {
		grok {
			match => { "message" => "^[\s]*Scrub[\s]+found[\s]+(?<fld1>[^\s]*)[\s]+media[\s]+([\s]*errors[\s]+|[\s]*error[\s]+)[\s]+in[\s]+(?<interface>[^\.]*)\.$" }
			id => "msgParserId685"
			add_field => {
				"result" => "Scrub found media errors "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId686
	# line in RSA:  Scrub found <fld1> parity inconsistencies in <interface> 
	else if [logstash][msgparser][id] == "msgParserId686" {
		dissect {
			mapping => { "message" => "Scrub found %{fld1} parity inconsistencies in %{interface}" }
			id => "msgParserId686"
			add_field => {
				"result" => "Scrub found parity inconsistencies"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId687
	# line in RSA: <hostname>: scrub suspended at stripe <fld> after <fld1> 
	else if [logstash][msgparser][id] == "msgParserId687" {
		dissect {
			mapping => { "message" => "%{hostname}: scrub suspended at stripe %{fld} after %{fld1}" }
			id => "msgParserId687"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId688
	# line in RSA: Block recommended for reassignment on Disk <fld30> [NETAPP <fld1>] <fld2>, <fld3>  during scrub 
	else if [logstash][msgparser][id] == "msgParserId688" {
		dissect {
			mapping => { "message" => "Block recommended for reassignment on Disk %{fld30} [NETAPP %{fld1}] %{fld2}, %{fld3}  during scrub" }
			id => "msgParserId688"
			add_field => {
				"result" => "Block reassigned during scrub"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId689
	# line in RSA:  { partner <id> | <id1> }
	else if [logstash][msgparser][id] == "msgParserId689" {
		grok {
			match => { "message" => "^[\s]*([\s]*partner[\s]+(?<id>[^\s]*)[\s]+|[\s]*(?<id1>[^\s]*)[\s]+)$" }
			id => "msgParserId689"
			add_field => {
				"result" => "spares low warning"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId690
	# line in RSA:  <id> Assign unowned disks
	else if [logstash][msgparser][id] == "msgParserId690" {
		dissect {
			mapping => { "message" => "%{id} Assign unowned disks" }
			id => "msgParserId690"
			add_field => {
				"result" => "Assigning unowned disks"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId691
	# line in RSA:  Disk scrub suspended.
	else if [logstash][msgparser][id] == "msgParserId691" {
		dissect {
			mapping => { "message" => "Disk scrub suspended." }
			id => "msgParserId691"
			add_field => {
				"result" => "disk scrub suspended"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId692
	# line in RSA:  Disk scrub suspended
	else if [logstash][msgparser][id] == "msgParserId692" {
		dissect {
			mapping => { "message" => "Disk scrub suspended" }
			id => "msgParserId692"
			add_field => {
				"result" => "disk scrub suspended"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId693
	# line in RSA:  Read error on Disk <fld30> [NETAPP <fld1>], <fld2> during media_scrub
	else if [logstash][msgparser][id] == "msgParserId693" {
		dissect {
			mapping => { "message" => "Read error on Disk %{fld30} [NETAPP %{fld1}], %{fld2} during media_scrub" }
			id => "msgParserId693"
			add_field => {
				"result" => "read error on disk during scrub"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId694
	# line in RSA:  Replayed <device> stripes.
	else if [logstash][msgparser][id] == "msgParserId694" {
		dissect {
			mapping => { "message" => "Replayed %{device} stripes." }
			id => "msgParserId694"
			add_field => {
				"result" => "Replayed stripes"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId695
	# line in RSA:  Read error on Disk <fld30>  [NETAPP <fld1>], <fld2> during stripe write
	else if [logstash][msgparser][id] == "msgParserId695" {
		dissect {
			mapping => { "message" => "Read error on Disk %{fld30}  [NETAPP %{fld1}], %{fld2} during stripe write" }
			id => "msgParserId695"
			add_field => {
				"result" => "Read error on Disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId696
	# line in RSA:  Block recommended for reassignment on Disk <fld30> Shelf <fld> Bay <fld1> [NETAPP <version>] S/N [<fld3>], block #<fld4> during stripe write
	else if [logstash][msgparser][id] == "msgParserId696" {
		dissect {
			mapping => { "message" => "Block recommended for reassignment on Disk %{fld30} Shelf %{fld} Bay %{fld1} [NETAPP %{version}] S/N [%{fld3}], block #%{fld4} during stripe write" }
			id => "msgParserId696"
			add_field => {
				"result" => "Block recommended for reassignment on Disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId697
	# line in RSA:  Addition of Disk <fld30> [<fld1>] S/N [<fld2>] <fld3> has completed successfully
	else if [logstash][msgparser][id] == "msgParserId697" {
		dissect {
			mapping => { "message" => "Addition of Disk %{fld30} [%{fld1}] S/N [%{fld2}] %{fld3} has completed successfully" }
			id => "msgParserId697"
			add_field => {
				"result" => "Disk addition successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId698
	# line in RSA:  Aggregate <fld1> Failed due to multi-disk error 
	else if [logstash][msgparser][id] == "msgParserId698" {
		dissect {
			mapping => { "message" => "Aggregate %{fld1} Failed due to multi-disk error" }
			id => "msgParserId698"
			add_field => {
				"result" => "Aggregate aggr: Failed due to multi-disk error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId699
	# line in RSA:  Aggregate <id> is mirrored and one plex has failed. <event_description>
	else if [logstash][msgparser][id] == "msgParserId699" {
		dissect {
			mapping => { "message" => "Aggregate %{id} is mirrored and one plex has failed. %{event_description}" }
			id => "msgParserId699"
			add_field => {
				"result" => "Aggregate is mirrored and one plex has failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId700
	# line in RSA:  SyncMirror aggregate '<id>' is mirror-degraded.<event_description>
	else if [logstash][msgparser][id] == "msgParserId700" {
		dissect {
			mapping => { "message" => "SyncMirror aggregate '%{id}' is mirror-degraded.%{event_description}" }
			id => "msgParserId700"
			add_field => {
				"result" => "SyncMirror aggregate is mirror-degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId701
	# line in RSA:  <disk_volume> volume is not mirrored. <info>
	else if [logstash][msgparser][id] == "msgParserId701" {
		dissect {
			mapping => { "message" => "%{disk_volume} volume is not mirrored. %{info}" }
			id => "msgParserId701"
			add_field => {
				"event_description" => "Root volume is not mirrored"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId702
	# line in RSA:  Performing raid replay on volume(s)
	else if [logstash][msgparser][id] == "msgParserId702" {
		dissect {
			mapping => { "message" => "Performing raid replay on volume(s)" }
			id => "msgParserId702"
			add_field => {
				"result" => "Performing raid replay on volume(s)"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId703
	# line in RSA:   Aggregate <id> is mirrored and one plex is not online. <event_description>
	else if [logstash][msgparser][id] == "msgParserId703" {
		dissect {
			mapping => { "message" => "Aggregate %{id} is mirrored and one plex is not online. %{event_description}" }
			id => "msgParserId703"
			add_field => {
				"result" => "aggregate is mirrored and one plex is not online"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId704
	# line in RSA: Addition of disk <fld30> to the filesystem has completed successfully. 
	else if [logstash][msgparser][id] == "msgParserId704" {
		dissect {
			mapping => { "message" => "Addition of disk %{fld30} to the filesystem has completed successfully." }
			id => "msgParserId704"
			add_field => {
				"result" => "Addition of disk completed successfully"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId705
	# line in RSA: <shost> CORR PROC ERR <fld2> 
	else if [logstash][msgparser][id] == "msgParserId705" {
		dissect {
			mapping => { "message" => "%{shost} CORR PROC ERR %{fld2}" }
			id => "msgParserId705"
			add_field => {
				"result" => "raid server error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "rc:ALERT" {
		# MESSAGE 014001
		# line in RSA:  timed: time daemon started
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "timed: time daemon started" }
				id => "message-014001"
				add_field => {
				"result" => "time daemon started"
					"[event][id]" => "014001"
					"[rsa][message][id1]" => "014001"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014000
		# line in RSA: <info> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-014000"
				add_field => {
					"[event][id]" => "014000"
					"[rsa][message][id1]" => "014000"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "rc:debug" {
		# MESSAGE 014005
		# line in RSA:  sysconfig: validating configuration
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "sysconfig: validating configuration" }
				id => "message-014005"
				add_field => {
				"result" => "validating configuration"
					"[event][id]" => "014005"
					"[rsa][message][id1]" => "014005"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040677
		# line in RSA:  <username>:<action>:<interface>:<disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:%{action}:%{interface}:%{disposition}" }
				id => "message-040677"
				add_field => {
				"event_description" => "root input"
					"[event][id]" => "040677"
					"[rsa][message][id1]" => "040677"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "rc:error" {
		# MESSAGE 030077
		# line in RSA:  sysconfig: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "sysconfig: %{fld1}" }
				id => "message-030077"
				add_field => {
				"result" => "sysconfig warning"
					"[event][id]" => "030077"
					"[rsa][message][id1]" => "030077"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030077:01
		# line in RSA:  snapvault: resync of <id> to <username> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: resync of %{id} to %{username} : %{event_description}" }
				id => "message-030077:01"
				add_field => {
				"result" => "resync of volume"
					"[event][id]" => "030077:01"
					"[rsa][message][id1]" => "030077:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030077:02
		# line in RSA:  CIFS terminated with <fld1> open files from <fld2> CIFS users
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS terminated with %{fld1} open files from %{fld2} CIFS users" }
				id => "message-030077:02"
				add_field => {
				"result" => "CIFS terminated"
					"[event][id]" => "030077:02"
					"[rsa][message][id1]" => "030077:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "rc:notice" {
		# MESSAGE 015011
		# line in RSA:  Vfiler <username> initialized.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Vfiler %{username} initialized." }
				id => "message-015011"
				add_field => {
				"result" => "vfiler initialized"
					"[event][id]" => "015011"
					"[rsa][message][id1]" => "015011"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:01
		# line in RSA:  Path <fld30> moved to vfiler "<username>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Path %{fld30} moved to vfiler \"%{username}\"" }
				id => "message-015011:01"
				add_field => {
				"result" => "Path moved to vfiler"
					"[event][id]" => "015011:01"
					"[rsa][message][id1]" => "015011:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:02
		# line in RSA:  Console context switched to Vfiler <username>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Console context switched to Vfiler %{username}." }
				id => "message-015011:02"
				add_field => {
				"result" => "Console context switched to vfiler"
					"[event][id]" => "015011:02"
					"[rsa][message][id1]" => "015011:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:03
		# line in RSA:  CIFS - disconnecting workstation <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS - disconnecting workstation %{shost}" }
				id => "message-015011:03"
				add_field => {
				"result" => "disconnecting workstation"
					"[event][id]" => "015011:03"
					"[rsa][message][id1]" => "015011:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:04
		# line in RSA:  { cifs | snapmirror } { unlicensed | licensed } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*cifs[\s]+|[\s]*snapmirror[\s]+)[\s]+([\s]*unlicensed[\s]+|[\s]*licensed[\s]+)[\s]+$" }
				id => "message-015011:04"
				add_field => {
					"[event][id]" => "015011:04"
					"[rsa][message][id1]" => "015011:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:05
		# line in RSA:  { Offlining | Onlining } Fibre Channel adapter
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Offlining[\s]+|[\s]*Onlining[\s]+)[\s]+Fibre[\s]+Channel[\s]+adapter$" }
				id => "message-015011:05"
				add_field => {
					"[event][id]" => "015011:05"
					"[rsa][message][id1]" => "015011:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:06
		# line in RSA:  a_sis licensed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "a_sis licensed" }
				id => "message-015011:06"
				add_field => {
				"result" => "a_sis licensed"
					"[event][id]" => "015011:06"
					"[rsa][message][id1]" => "015011:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:07
		# line in RSA:  flex_clone licensed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "flex_clone licensed" }
				id => "message-015011:07"
				add_field => {
				"result" => "flex_clone licensed"
					"[event][id]" => "015011:07"
					"[rsa][message][id1]" => "015011:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:08
		# line in RSA:  nearstore_option licensed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "nearstore_option licensed" }
				id => "message-015011:08"
				add_field => {
				"result" => "nearstore_option licensed"
					"[event][id]" => "015011:08"
					"[rsa][message][id1]" => "015011:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:10
		# line in RSA:  a_sis unlicensed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "a_sis unlicensed" }
				id => "message-015011:10"
				add_field => {
				"result" => "a_sis unlicensed"
					"[event][id]" => "015011:10"
					"[rsa][message][id1]" => "015011:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015011:11
		# line in RSA:  nearstore_option unlicensed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "nearstore_option unlicensed" }
				id => "message-015011:11"
				add_field => {
				"result" => "nearstore_option unlicensed"
					"[event][id]" => "015011:11"
					"[rsa][message][id1]" => "015011:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "rc:warning" {
		# MESSAGE 014012
		# line in RSA: Warning: <fld30> already exists. Old configuration will be deleted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Warning: %{fld30} already exists. Old configuration will be deleted." }
				id => "message-014012"
				add_field => {
				"result" => "Configuration already exists"
					"[event][id]" => "014012"
					"[rsa][message][id1]" => "014012"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014012:01
		# line in RSA:  Routed is not supported with vfilers.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Routed is not supported with vfilers." }
				id => "message-014012:01"
				add_field => {
				"result" => "Routed is not supported with vfilers"
					"[event][id]" => "014012:01"
					"[rsa][message][id1]" => "014012:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014012:02
		# line in RSA:  Since vfilers are licensed, routed is being disabled.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Since vfilers are licensed, routed is being disabled." }
				id => "message-014012:02"
				add_field => {
				"result" => "Routed is being disabled"
					"[event][id]" => "014012:02"
					"[rsa][message][id1]" => "014012:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId732
	# line in RSA: <fld1> Found <fld2> link.  Setting media type to "<fld3>". 
	else if [logstash][msgparser][id] == "msgParserId732" {
		dissect {
			mapping => { "message" => "%{fld1} Found %{fld2} link.  Setting media type to \"%{fld3}\"." }
			id => "msgParserId732"
			add_field => {
				"result" => "Setting media type"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId733
	# line in RSA: Option <username> changed on one cluster node 
	else if [logstash][msgparser][id] == "msgParserId733" {
		dissect {
			mapping => { "message" => "Option %{username} changed on one cluster node" }
			id => "msgParserId733"
			add_field => {
				"result" => "cluster node option change"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "registry_control:debug" {
		# MESSAGE 040725
		# line in RSA:  FILE: <action>: <directory>:<filename> <dclass_counter1> <event_time_string>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FILE: %{action}: %{directory}:%{filename} %{dclass_counter1} %{event_time_string}" }
				id => "message-040725"
				add_field => {
				"event_description" => "registry file activity"
					"[event][id]" => "040725"
					"[rsa][message][id1]" => "040725"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040726
		# line in RSA:  <username>: <action>: { <directory>:<filename>:<result> | <filename>:<result> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<username>[^:]*):[\s]+(?<action>[^:]*):[\s]+([\s]*(?<directory>[^:]*):(?<filename>[^:]*):(?<result>[^\s]*)[\s]+|[\s]*(?<filename>[^:]*):(?<result>[^\s]*)[\s]+)$" }
				id => "message-040726"
				add_field => {
				"event_description" => "user registry activity"
					"[event][id]" => "040726"
					"[rsa][message][id1]" => "040726"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "registry_control:error" {
		# MESSAGE 040065:01
		# line in RSA: registry: <info> - No space left on device 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: %{info} - No space left on device" }
				id => "message-040065:01"
				add_field => {
					"[event][id]" => "040065:01"
					"[rsa][message][id1]" => "040065:01"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040065
		# line in RSA:  registry: error return from registry_dump!  Registry has not been updated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: error return from registry_dump!  Registry has not been updated." }
				id => "message-040065"
				add_field => {
				"result" => " Registry has not been updated"
					"[event][id]" => "040065"
					"[rsa][message][id1]" => "040065"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "registry_control:warning" {
		# MESSAGE 030065
		# line in RSA:  registry: unfinished active registry transactions were found.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: unfinished active registry transactions were found." }
				id => "message-030065"
				add_field => {
				"result" => "unfinished active registry transactions were found"
					"[event][id]" => "030065"
					"[rsa][message][id1]" => "030065"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030065:01
		# line in RSA:  registry: error in committing changes for periodic config update, errs=Error: Registry persistence error (name=<fld1>) (value=<fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: error in committing changes for periodic config update, errs=Error: Registry persistence error (name=%{fld1}) (value=%{fld2})" }
				id => "message-030065:01"
				add_field => {
				"result" => " registry: error in committing changes for periodic config update"
					"[event][id]" => "030065:01"
					"[rsa][message][id1]" => "030065:01"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030065:02
		# line in RSA: registry: Unexpected error in rollback in regx_commit - Error: No such file or directory (name=<fld>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "registry: Unexpected error in rollback in regx_commit - Error: No such file or directory (name=%{fld})" }
				id => "message-030065:02"
				add_field => {
				"result" => "rollback in regx_commit"
					"[event][id]" => "030065:02"
					"[rsa][message][id1]" => "030065:02"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId739
	# line in RSA:  Snapmirror: Clock on source filer <interface> is ahead of destination filer <hostname>
	else if [logstash][msgparser][id] == "msgParserId739" {
		dissect {
			mapping => { "message" => "Snapmirror: Clock on source filer %{interface} is ahead of destination filer %{hostname}" }
			id => "msgParserId739"
			add_field => {
				"result" => "Clock inconsistency"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "replication.dst.err:error" {
		# MESSAGE 040400
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : destination volume too small; it must be equal to or larger than the source volume. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : destination volume too small; it must be equal to or larger than the source volume." }
				id => "message-040400"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "destination volume too small; it must be equal to or larger than the source volume"
					"[event][id]" => "040400"
					"[rsa][message][id1]" => "040400"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040401
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : destination is offline, is restricted, or does not exist
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : destination is offline, is restricted, or does not exist" }
				id => "message-040401"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "destination is offline, is restricted, or does not exist"
					"[event][id]" => "040401"
					"[rsa][message][id1]" => "040401"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040402
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : volume is not online; cannot execute operation.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : volume is not online; cannot execute operation." }
				id => "message-040402"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "volume is not online; cannot execute operation"
					"[event][id]" => "040402"
					"[rsa][message][id1]" => "040402"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040403
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : process was aborted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : process was aborted." }
				id => "message-040403"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "process was aborted"
					"[event][id]" => "040403"
					"[rsa][message][id1]" => "040403"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040404
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : destination is not in snapmirrored state.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : destination is not in snapmirrored state." }
				id => "message-040404"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "destination is not in snapmirrored state"
					"[event][id]" => "040404"
					"[rsa][message][id1]" => "040404"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040405
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : transfer attempted for busy destination. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : transfer attempted for busy destination." }
				id => "message-040405"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "transfer attempted for busy destination"
					"[event][id]" => "040405"
					"[rsa][message][id1]" => "040405"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040406
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : transfer from source not possible; snapmirror may be misconfigured, the source volume may be busy or unavailable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : transfer from source not possible; snapmirror may be misconfigured, the source volume may be busy or unavailable." }
				id => "message-040406"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "transfer from source not possible snapmirror may be misconfigured, the source volume may be busy or unavailable"
					"[event][id]" => "040406"
					"[rsa][message][id1]" => "040406"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040406:01
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : qtree state not updated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : qtree state not updated." }
				id => "message-040406:01"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "qtree state not updated"
					"[event][id]" => "040406:01"
					"[rsa][message][id1]" => "040406:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040406:02
		# line in RSA:  <interface>: destination transfer from <saddr> <space> <daddr> : replication transfer failed to complete.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : replication transfer failed to complete." }
				id => "message-040406:02"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "replication transfer failed to complete"
					"[event][id]" => "040406:02"
					"[rsa][message][id1]" => "040406:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040406:03
		# line in RSA:  <interface>: destination transfer from <saddr> <space> <daddr> : replication destination could not set permissions on a file or directory.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : replication destination could not set permissions on a file or directory." }
				id => "message-040406:03"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "replication destination could not set permissions on a file or directory"
					"[event][id]" => "040406:03"
					"[rsa][message][id1]" => "040406:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040406:04
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : incremental update not possible; a resync or initialize is necessary.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : incremental update not possible; a resync or initialize is necessary." }
				id => "message-040406:04"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "incremental update not possible; a resync or initialize is necessary"
					"[event][id]" => "040406:04"
					"[rsa][message][id1]" => "040406:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040406:05
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : cannot connect to source filer.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : cannot connect to source filer." }
				id => "message-040406:05"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "cannot connect to source filer"
					"[event][id]" => "040406:05"
					"[rsa][message][id1]" => "040406:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040406:06
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : transfer aborted because of network error.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : transfer aborted because of network error." }
				id => "message-040406:06"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "transfer aborted because of network error"
					"[event][id]" => "040406:06"
					"[rsa][message][id1]" => "040406:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040406:07
		# line in RSA:   <interface>: destination transfer from <saddr> <space> <daddr> : source qtree does not exist.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{saddr} %{space} %{daddr} : source qtree does not exist." }
				id => "message-040406:07"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "source qtree does not exist"
					"[event][id]" => "040406:07"
					"[rsa][message][id1]" => "040406:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId754
	# line in RSA:  Volume language was changed before this transfer or it was changed before some previous update transfer for the relationship of qtree <id>. <event_description>
	else if [logstash][msgparser][id] == "msgParserId754" {
		dissect {
			mapping => { "message" => "Volume language was changed before this transfer or it was changed before some previous update transfer for the relationship of qtree %{id}. %{event_description}" }
			id => "msgParserId754"
			add_field => {
				"result" => "Volume language was changed before this transfer"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId755
	# line in RSA:  <service>: destination transfer from <shost>:<saddr> <space> <dhost>:<daddr> : <result> 
	else if [logstash][msgparser][id] == "msgParserId755" {
		dissect {
			mapping => { "message" => "%{service}: destination transfer from %{shost}:%{saddr} %{space} %{dhost}:%{daddr} : %{result}" }
			id => "msgParserId755"
			add_field => {
				"event_description" => "Snapshot copy for transfer error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "replication.dst.waflErr:error" {
		# MESSAGE 040643
		# line in RSA:  <interface>: destination transfer from <hostname>:<id> to <username>: replication destination write failed:<info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{hostname}:%{id} to %{username}: replication destination write failed:%{info}." }
				id => "message-040643"
				add_field => {
				"event_description" => "destination transfer - replication destination write failed"
					"[event][id]" => "040643"
					"[rsa][message][id1]" => "040643"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040643:01
		# line in RSA:  <interface>: destination transfer from <hostname>:<id> to <username>: replication destination failed to create checksum storage:<info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{hostname}:%{id} to %{username}: replication destination failed to create checksum storage:%{info}." }
				id => "message-040643:01"
				add_field => {
				"event_description" => "destination transfer - replication destination failed to create checksum storage"
					"[event][id]" => "040643:01"
					"[rsa][message][id1]" => "040643:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040643:02
		# line in RSA:  <interface>: destination transfer from <hostname>:<id> to <username>: transfer aborted because of network error:<info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{hostname}:%{id} to %{username}: transfer aborted because of network error:%{info}." }
				id => "message-040643:02"
				add_field => {
				"event_description" => "destination transfer - transfer aborted because of network error"
					"[event][id]" => "040643:02"
					"[rsa][message][id1]" => "040643:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040643:03
		# line in RSA:  <interface>: destination transfer from <hostname>:<id> to <username>: replication destination could not set permissions on a file or directory:<info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: destination transfer from %{hostname}:%{id} to %{username}: replication destination could not set permissions on a file or directory:%{info}." }
				id => "message-040643:03"
				add_field => {
				"event_description" => "destination transfer - replication destination could not set permissions on a file or directory"
					"[event][id]" => "040643:03"
					"[rsa][message][id1]" => "040643:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "replication.src.err:error" {
		# MESSAGE 040408
		# line in RSA:  <interface>: source transfer from <id> to <username> : request denied, previous request still processing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: source transfer from %{id} to %{username} : request denied, previous request still processing." }
				id => "message-040408"
				add_field => {
				"event_description" => "SnapMirror transfer request denied"
				"result" => "request denied, previous request still processing"
					"[event][id]" => "040408"
					"[rsa][message][id1]" => "040408"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040408:01
		# line in RSA:  <interface>: source transfer from <id> to <username> : could not read from socket. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: source transfer from %{id} to %{username} : could not read from socket." }
				id => "message-040408:01"
				add_field => {
				"event_description" => "SnapVault transfer error"
				"result" => "could not read from socket"
					"[event][id]" => "040408:01"
					"[rsa][message][id1]" => "040408:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040408:02
		# line in RSA:  <interface>: source transfer from <id> to <username> : could not write to socket. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: source transfer from %{id} to %{username} : could not write to socket." }
				id => "message-040408:02"
				add_field => {
				"event_description" => "SnapVault transfer error"
				"result" => "could not write to socket"
					"[event][id]" => "040408:02"
					"[rsa][message][id1]" => "040408:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040408:03
		# line in RSA:  <interface>: source transfer from <id> to <username> : transfer failed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: source transfer from %{id} to %{username} : transfer failed." }
				id => "message-040408:03"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "transfer failed"
					"[event][id]" => "040408:03"
					"[rsa][message][id1]" => "040408:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040408:04
		# line in RSA:  <interface>: source transfer from <id> to <username> : transfer aborted because of network error.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: source transfer from %{id} to %{username} : transfer aborted because of network error." }
				id => "message-040408:04"
				add_field => {
				"event_description" => "SnapMirror transfer error"
				"result" => "transfer aborted because of network error."
					"[event][id]" => "040408:04"
					"[rsa][message][id1]" => "040408:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId765
	# line in RSA:  { SnapMirror transfer from | SnapVault transfer from | Transfer from } <shost>:<directory> <space> <dhost>:<filename> : destination requested snapshot that does not exist on the source.
	else if [logstash][msgparser][id] == "msgParserId765" {
		grok {
			match => { "message" => "^[\s]*([\s]*SnapMirror[\s]+transfer[\s]+from[\s]+|[\s]*SnapVault[\s]+transfer[\s]+from[\s]+|[\s]*Transfer[\s]+from[\s]+)[\s]+(?<shost>[^:]*):(?<directory>[^\s]*)[\s]+(?<space>[^\s]*)[\s]+(?<dhost>[^:]*):(?<filename>[^\s]*)[\s]+:[\s]+destination[\s]+requested[\s]+snapshot[\s]+that[\s]+does[\s]+not[\s]+exist[\s]+on[\s]+the[\s]+source\.$" }
			id => "msgParserId765"
			add_field => {
				"event_description" => "Transfer - destination requested snapshot does not exist on source"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId766
	# line in RSA:  The software driver for the <interface> { has detected | detected } a problem: <result> (<resultcode>)
	else if [logstash][msgparser][id] == "msgParserId766" {
		grok {
			match => { "message" => "^[\s]*The[\s]+software[\s]+driver[\s]+for[\s]+the[\s]+(?<interface>[^\s]*)[\s]+([\s]*has[\s]+detected[\s]+|[\s]*detected[\s]+)[\s]+a[\s]+problem:[\s]+(?<result>[^\s]*)[\s]+\((?<resultcode>[^\)]*)\)$" }
			id => "msgParserId766"
			add_field => {
				"event_description" => "software driver has detected a problem"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId767
	# line in RSA:  RLM setup unable to access mailhost specified in options <hostname>. 
	else if [logstash][msgparser][id] == "msgParserId767" {
		dissect {
			mapping => { "message" => "RLM setup unable to access mailhost specified in options %{hostname}." }
			id => "msgParserId767"
			add_field => {
				"result" => "no mail hosts specified"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId768
	# line in RSA: The network configuration of the Remote LAN Module (RLM) failed due to cable or network errors. 
	else if [logstash][msgparser][id] == "msgParserId768" {
		dissect {
			mapping => { "message" => "The network configuration of the Remote LAN Module (RLM) failed due to cable or network errors." }
			id => "msgParserId768"
			add_field => {
				"result" => "network configuration of RLM failed - cable or network errors"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId769
	# line in RSA:  Heartbeat received from the Remote LAN Module (RLM).
	else if [logstash][msgparser][id] == "msgParserId769" {
		dissect {
			mapping => { "message" => "Heartbeat received from the Remote LAN Module (RLM)." }
			id => "msgParserId769"
			add_field => {
				"result" => "heartbeat from the Remote LAN Module received"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId770
	# line in RSA:  Have not received a heartbeat from the Remote LAN Module (RLM) in last <device> seconds.
	else if [logstash][msgparser][id] == "msgParserId770" {
		dissect {
			mapping => { "message" => "Have not received a heartbeat from the Remote LAN Module (RLM) in last %{device} seconds." }
			id => "msgParserId770"
			add_field => {
				"result" => "heartbeat from the Remote LAN Module not received"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId771
	# line in RSA:  Remote LAN Module (RLM) network port link down <info>.
	else if [logstash][msgparser][id] == "msgParserId771" {
		dissect {
			mapping => { "message" => "Remote LAN Module (RLM) network port link down %{info}." }
			id => "msgParserId771"
			add_field => {
				"event_description" => "Remote LAN Module (RLM) network port link down"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId772
	# line in RSA:  The system's Remote LAN Module (RLM) is not configured. <fld1>
	else if [logstash][msgparser][id] == "msgParserId772" {
		dissect {
			mapping => { "message" => "The system's Remote LAN Module (RLM) is not configured. %{fld1}" }
			id => "msgParserId772"
			add_field => {
				"result" => "Remote LAN Module (RLM) not configured"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId773
	# line in RSA:  RLM communication error, <result>.
	else if [logstash][msgparser][id] == "msgParserId773" {
		dissect {
			mapping => { "message" => "RLM communication error, %{result}." }
			id => "msgParserId773"
			add_field => {
				"event_description" => "RLM communication error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId774
	# line in RSA:  Error updating RLM user information, <fld1>
	else if [logstash][msgparser][id] == "msgParserId774" {
		dissect {
			mapping => { "message" => "Error updating RLM user information, %{fld1}" }
			id => "msgParserId774"
			add_field => {
				"result" => "Error updating RLM user information"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId775
	# line in RSA:  <username> logged in from <dhost>
	else if [logstash][msgparser][id] == "msgParserId775" {
		dissect {
			mapping => { "message" => "%{username} logged in from %{dhost}" }
			id => "msgParserId775"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"action" => "user login"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "rmc.connect:warning" {
		# MESSAGE 014050
		# line in RSA:  The remote management controller in slot <interface> is missing its LAN cable. Please connect it as soon as possible.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The remote management controller in slot %{interface} is missing its LAN cable. Please connect it as soon as possible." }
				id => "message-014050"
				add_field => {
				"result" => "The remote management controller is missing its LAN cable"
					"[event][id]" => "014050"
					"[rsa][message][id1]" => "014050"
					"[event][categoryid]" => "1603010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 014050:01
		# line in RSA:  The remote management controller in slot <interface> is missing its external power supply. Please connect it as soon as possible.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The remote management controller in slot %{interface} is missing its external power supply. Please connect it as soon as possible." }
				id => "message-014050:01"
				add_field => {
				"result" => "The remote management controller is missing its external power supply"
					"[event][id]" => "014050:01"
					"[rsa][message][id1]" => "014050:01"
					"[event][categoryid]" => "1603010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId778
	# line in RSA: <id>: clnt_call: RPC: Timed out 
	else if [logstash][msgparser][id] == "msgParserId778" {
		dissect {
			mapping => { "message" => "%{id}: clnt_call: RPC: Timed out" }
			id => "msgParserId778"
			add_field => {
				"result" => "RPC timeout"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_0:auditlog" {
		# MESSAGE 015000
		# line in RSA: :<fld1>:rsh shell:RSH INPUT COMMAND <action> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => ":%{fld1}:rsh shell:RSH INPUT COMMAND %{action}" }
				id => "message-015000"
				add_field => {
				"result" => "rshd_0:auditlog"
					"[event][id]" => "015000"
					"[rsa][message][id1]" => "015000"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015010
		# line in RSA: root:<fld1>:rsh shell: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "root:%{fld1}:rsh shell:" }
				id => "message-015010"
				add_field => {
				"result" => "rshd_0:auditlog"
					"[event][id]" => "015010"
					"[rsa][message][id1]" => "015010"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId780
	# line in RSA:  <interface>: time daemon started
	else if [logstash][msgparser][id] == "msgParserId780" {
		dissect {
			mapping => { "message" => "%{interface}: time daemon started" }
			id => "msgParserId780"
			add_field => {
				"result" => "time daemon started"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_0:debug" {
		# MESSAGE 040678
		# line in RSA:  <username>:<action>:{ node | rsh } shell: <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<username>[^:]*):(?<action>[^:]*):([\s]*node[\s]+|[\s]*rsh[\s]+)[\s]+shell:[\s]+(?<disposition>.*)$" }
				id => "message-040678"
				add_field => {
				"event_description" => "rsh or node shell command"
					"[event][id]" => "040678"
					"[rsa][message][id1]" => "040678"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040566
		# line in RSA:  <interface>: validating configuration 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: validating configuration" }
				id => "message-040566"
				add_field => {
				"result" => "validating configuration"
					"[event][id]" => "040566"
					"[rsa][message][id1]" => "040566"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040779
		# line in RSA:  <username>@[{<saddr>_<sport>|<saddr>}]:<action>:<service>:<disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<username>[^@]*)@\[((?<saddr>[^_]*)_(?<sport>[^\]]*)|(?<saddr>[^\]]*))\]:(?<action>[^:]*):(?<service>[^:]*):(?<disposition>.*)$" }
				id => "message-040779"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "ssh2 shell command"
					"[event][id]" => "040779"
					"[rsa][message][id1]" => "040779"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_0:error" {
		# MESSAGE 015030
		# line in RSA: { rshd | rhsd }: when { reading: | reading } port number for standard error from <hostname>: { Connection reset by peer | Premature EOF | string too long }. <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*rshd[\s]+|[\s]*rhsd[\s]+):[\s]+when[\s]+([\s]*reading:[\s]+|[\s]*reading[\s]+)[\s]+port[\s]+number[\s]+for[\s]+standard[\s]+error[\s]+from[\s]+(?<hostname>[^:]*):[\s]+([\s]*Connection[\s]+reset[\s]+by[\s]+peer[\s]+|[\s]*Premature[\s]+EOF[\s]+|[\s]*string[\s]+too[\s]+long[\s]+)\.[\s]+(?<fld1>.*)$" }
				id => "message-015030"
				add_field => {
				"result" => "Connection reset by peer - read error"
					"[event][id]" => "015030"
					"[rsa][message][id1]" => "015030"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015030:01
		# line in RSA: <info>: Permission denied. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Permission denied." }
				id => "message-015030:01"
				add_field => {
					"[event][id]" => "015030:01"
					"[rsa][message][id1]" => "015030:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015030:02
		# line in RSA:  <info>: Login incorrect. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Login incorrect." }
				id => "message-015030:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login incorrect"
					"[event][id]" => "015030:02"
					"[rsa][message][id1]" => "015030:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015030:03
		# line in RSA:   CIFS terminated for workstation <fld1> with <fld2> open file 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS terminated for workstation %{fld1} with %{fld2} open file" }
				id => "message-015030:03"
				add_field => {
				"result" => "CIFS terminated"
					"[event][id]" => "015030:03"
					"[rsa][message][id1]" => "015030:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015030:04
		# line in RSA:  Fail to disable snapmirror persistently. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Fail to disable snapmirror persistently." }
				id => "message-015030:04"
				add_field => {
				"result" => "Fail to disable snapmirror persistently."
					"[event][id]" => "015030:04"
					"[rsa][message][id1]" => "015030:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_0:info" {
		# MESSAGE 015035:01
		# line in RSA:  Password update attempt from <interface> for user <username> Failed. <event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Password update attempt from %{interface} for user %{username} Failed. %{event_description}" }
				id => "message-015035:01"
				add_field => {
				"result" => "Password update attempt failed"
					"[event][id]" => "015035:01"
					"[rsa][message][id1]" => "015035:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015035:02
		# line in RSA:  Starting SSL with new certificate.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting SSL with new certificate." }
				id => "message-015035:02"
				add_field => {
				"result" => "Starting SSL with new certificate"
					"[event][id]" => "015035:02"
					"[rsa][message][id1]" => "015035:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015035
		# line in RSA:   <interface>: unexpected interrupt while waiting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: unexpected interrupt while waiting" }
				id => "message-015035"
				add_field => {
				"result" => "unexpected interrupt while waiting"
					"[event][id]" => "015035"
					"[rsa][message][id1]" => "015035"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_0:notice" {
		# MESSAGE 015036
		# line in RSA:  Vfiler <username> initialized.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Vfiler %{username} initialized." }
				id => "message-015036"
				add_field => {
				"result" => "vfiler initialized"
					"[event][id]" => "015036"
					"[rsa][message][id1]" => "015036"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015036:01
		# line in RSA:  CIFS - disconnecting workstation <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS - disconnecting workstation %{daddr}" }
				id => "message-015036:01"
				add_field => {
				"result" => "CIFS - disconnecting"
					"[event][id]" => "015036:01"
					"[rsa][message][id1]" => "015036:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015036:02
		# line in RSA:  snapmirror licensed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapmirror licensed" }
				id => "message-015036:02"
				add_field => {
				"result" => "snapmirror licensed"
					"[event][id]" => "015036:02"
					"[rsa][message][id1]" => "015036:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015036:03
		# line in RSA:  http licensed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "http licensed" }
				id => "message-015036:03"
				add_field => {
				"result" => "http licensed"
					"[event][id]" => "015036:03"
					"[rsa][message][id1]" => "015036:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015036:05
		# line in RSA:  snapmirror unlicensed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapmirror unlicensed" }
				id => "message-015036:05"
				add_field => {
				"result" => "snapmirror unlicensed"
					"[event][id]" => "015036:05"
					"[rsa][message][id1]" => "015036:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015036:06
		# line in RSA:  Host addr <fld1> not listed for host localhost.si.fr 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Host addr %{fld1} not listed for host localhost.si.fr" }
				id => "message-015036:06"
				add_field => {
				"result" => "Host addr ... not listed for host localhost.si.fr"
					"[event][id]" => "015036:06"
					"[rsa][message][id1]" => "015036:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_0:warning" {
		# MESSAGE 015037
		# line in RSA:  Permission denied to rsh from <username> at host <shost> IP address <saddr> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Permission denied to rsh from %{username} at host %{shost} IP address %{saddr} (%{fld1})" }
				id => "message-015037"
				add_field => {
				"result" => "Permission denied to rsh "
					"[event][id]" => "015037"
					"[rsa][message][id1]" => "015037"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015040
		# line in RSA:  Permission denied to rsh request from <username> at <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Permission denied to rsh request from %{username} at %{saddr}" }
				id => "message-015040"
				add_field => {
				"result" => "Permission denied to rsh request"
					"[event][id]" => "015040"
					"[rsa][message][id1]" => "015040"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_1:error" {
		# MESSAGE 015041
		# line in RSA: <info>: Permission denied. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Permission denied." }
				id => "message-015041"
				add_field => {
					"[event][id]" => "015041"
					"[rsa][message][id1]" => "015041"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015042
		# line in RSA:  <info>: Login incorrect. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Login incorrect." }
				id => "message-015042"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login incorrect"
					"[event][id]" => "015042"
					"[rsa][message][id1]" => "015042"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId799
	# line in RSA:  rsh_getstr(): unexpected interrupt while waiting
	else if [logstash][msgparser][id] == "msgParserId799" {
		dissect {
			mapping => { "message" => "rsh_getstr(): unexpected interrupt while waiting" }
			id => "msgParserId799"
			add_field => {
				"result" => "unexpected interrupt while waiting"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_1:warning" {
		# MESSAGE 015050:01
		# line in RSA:  Permission denied to { rsh request | rsh } from <username> at host <shost> IP address <saddr> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Permission[\s]+denied[\s]+to[\s]+([\s]*rsh[\s]+request[\s]+|[\s]*rsh[\s]+)[\s]+from[\s]+(?<username>[^\s]*)[\s]+at[\s]+host[\s]+(?<shost>[^\s]*)[\s]+IP[\s]+address[\s]+(?<saddr>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-015050:01"
				add_field => {
				"result" => "Permission denied to rsh request"
					"[event][id]" => "015050:01"
					"[rsa][message][id1]" => "015050:01"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015050
		# line in RSA:  Permission denied to rsh request from <username> at <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Permission denied to rsh request from %{username} at %{saddr}" }
				id => "message-015050"
				add_field => {
				"result" => "Permission denied to rsh request"
					"[event][id]" => "015050"
					"[rsa][message][id1]" => "015050"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "rshd_2:error" {
		# MESSAGE 015051
		# line in RSA: <info>: Permission denied. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Permission denied." }
				id => "message-015051"
				add_field => {
					"[event][id]" => "015051"
					"[rsa][message][id1]" => "015051"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 015052
		# line in RSA:  <info>: Login incorrect. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Login incorrect." }
				id => "message-015052"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login incorrect"
					"[event][id]" => "015052"
					"[rsa][message][id1]" => "015052"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId801
	# line in RSA:  Permission denied to { rsh request | rsh } from <username> at host <shost> IP address <saddr> { (<fld1>) | <space> }
	else if [logstash][msgparser][id] == "msgParserId801" {
		grok {
			match => { "message" => "^[\s]*Permission[\s]+denied[\s]+to[\s]+([\s]*rsh[\s]+request[\s]+|[\s]*rsh[\s]+)[\s]+from[\s]+(?<username>[^\s]*)[\s]+at[\s]+host[\s]+(?<shost>[^\s]*)[\s]+IP[\s]+address[\s]+(?<saddr>[^\s]*)[\s]+([\s]*\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
			id => "msgParserId801"
			add_field => {
				"result" => "Permission denied to rsh request"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId802
	# line in RSA:  rsh received an unexpected signal <fld1> from remote IP <saddr>
	else if [logstash][msgparser][id] == "msgParserId802" {
		dissect {
			mapping => { "message" => "rsh received an unexpected signal %{fld1} from remote IP %{saddr}" }
			id => "msgParserId802"
			add_field => {
				"result" => "rsh received an unexpected signal"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId803
	# line in RSA:  Read error on stderr: 
	else if [logstash][msgparser][id] == "msgParserId803" {
		dissect {
			mapping => { "message" => "Read error on stderr:" }
			id => "msgParserId803"
			add_field => {
				"result" => "Read error on stderr"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId804
	# line in RSA:  Permission denied for an { rsh request | rsh } from <username> at host <shost> IP address <saddr> 
	else if [logstash][msgparser][id] == "msgParserId804" {
		grok {
			match => { "message" => "^[\s]*Permission[\s]+denied[\s]+for[\s]+an[\s]+([\s]*rsh[\s]+request[\s]+|[\s]*rsh[\s]+)[\s]+from[\s]+(?<username>[^\s]*)[\s]+at[\s]+host[\s]+(?<shost>[^\s]*)[\s]+IP[\s]+address[\s]+(?<saddr>[^\s]*)[\s]+$" }
			id => "msgParserId804"
			add_field => {
				"result" => "Permission denied for an rsh request"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId805
	# line in RSA:  Initialization failed on SAS adapter <interface>.
	else if [logstash][msgparser][id] == "msgParserId805" {
		dissect {
			mapping => { "message" => "Initialization failed on SAS adapter %{interface}." }
			id => "msgParserId805"
			add_field => {
				"event_description" => "Initialization failed on SAS adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId806
	# line in RSA:  Could not recover link on SAS adapter <interface> <info>. <result>.
	else if [logstash][msgparser][id] == "msgParserId806" {
		dissect {
			mapping => { "message" => "Could not recover link on SAS adapter %{interface} %{info}. %{result}." }
			id => "msgParserId806"
			add_field => {
				"event_description" => "Could not recover link on SAS adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId807
	# line in RSA: mem_scrub: completed system memory scrub (count = <fld>) 
	else if [logstash][msgparser][id] == "msgParserId807" {
		dissect {
			mapping => { "message" => "mem_scrub: completed system memory scrub (count = %{fld})" }
			id => "msgParserId807"
			add_field => {
				"result" => "completed system memory scrub"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId808
	# line in RSA:  { Enclosure services | Disk device | Tape device | Device } <id>: <info>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId808" {
		grok {
			match => { "message" => "^[\s]*([\s]*Enclosure[\s]+services[\s]+|[\s]*Disk[\s]+device[\s]+|[\s]*Tape[\s]+device[\s]+|[\s]*Device[\s]+)[\s]+(?<id>[^:]*):[\s]+(?<info>[^:]*):[\s]+(?<event_description>.*)$" }
			id => "msgParserId808"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId809
	# line in RSA:  Disk device <device>: Adapter detected hardware error: HA status <result>: <info>.
	else if [logstash][msgparser][id] == "msgParserId809" {
		dissect {
			mapping => { "message" => "Disk device %{device}: Adapter detected hardware error: HA status %{result}: %{info}." }
			id => "msgParserId809"
			add_field => {
				"event_description" => "Disk device Adapter detected hardware error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "scsi.cmd.checkCondition:debug" {
		# MESSAGE 040583
		# line in RSA:  Disk device <id>: Check Condition: <interface>: Sense Data SCSI:aborted command -  <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk device %{id}: Check Condition: %{interface}: Sense Data SCSI:aborted command -  %{event_description}" }
				id => "message-040583"
				add_field => {
				"result" => "Disk device Sense Data SCSI:aborted command"
					"[event][id]" => "040583"
					"[rsa][message][id1]" => "040583"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040583:01
		# line in RSA:  Disk device <id>: Check Condition: <interface>: Sense Data SCSI:illegal request -  <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk device %{id}: Check Condition: %{interface}: Sense Data SCSI:illegal request -  %{event_description}" }
				id => "message-040583:01"
				add_field => {
				"result" => "Disk device Sense Data SCSI:illegal request"
					"[event][id]" => "040583:01"
					"[rsa][message][id1]" => "040583:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "scsi.cmd.checkCondition:error" {
		# MESSAGE 016000
		# line in RSA:  { Disk device | Device } <id>: Check Condition: <interface>: Sense Data SCSI:aborted command -  <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Disk[\s]+device[\s]+|[\s]*Device[\s]+)[\s]+(?<id>[^:]*):[\s]+Check[\s]+Condition:[\s]+(?<interface>[^:]*):[\s]+Sense[\s]+Data[\s]+SCSI:aborted[\s]+command[\s]+\-[\s]+(?<event_description>.*)$" }
				id => "message-016000"
				add_field => {
				"result" => "Disk device Sense Data SCSI:aborted command"
					"[event][id]" => "016000"
					"[rsa][message][id1]" => "016000"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016001
		# line in RSA: Device <id>: Check Condition: CDB <fld2>: Sense Data SCSI:not ready { - Drive spinning up | - } (<fld3>)(<fld4>). 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Device[\s]+(?<id>[^:]*):[\s]+Check[\s]+Condition:[\s]+CDB[\s]+(?<fld2>[^:]*):[\s]+Sense[\s]+Data[\s]+SCSI:not[\s]+ready[\s]+([\s]*\-[\s]+Drive[\s]+spinning[\s]+up[\s]+|[\s]*\-[\s]+)[\s]+\((?<fld3>[^\)]*)\)\((?<fld4>[^\)]*)\)\.[\s]+$" }
				id => "message-016001"
				add_field => {
				"result" => "Sense Data SCSI:not ready - Drive spinning up"
					"[event][id]" => "016001"
					"[rsa][message][id1]" => "016001"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016002
		# line in RSA: Device <id>: Check Condition: CDB <fld2> Sense Data <info> { - ( | ( } <fld3>). 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Device[\s]+(?<id>[^:]*):[\s]+Check[\s]+Condition:[\s]+CDB[\s]+(?<fld2>[^\s]*)[\s]+Sense[\s]+Data[\s]+(?<info>[^\s]*)[\s]+([\s]*\-[\s]+\([\s]+|[\s]*\([\s]+)[\s]+(?<fld3>[^\)]*)\)\.[\s]+$" }
				id => "message-016002"
				add_field => {
					"[event][id]" => "016002"
					"[rsa][message][id1]" => "016002"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId815
	# line in RSA:  Disk device <fld1>: Contingent allegiance: <fld2>
	else if [logstash][msgparser][id] == "msgParserId815" {
		dissect {
			mapping => { "message" => "Disk device %{fld1}: Contingent allegiance: %{fld2}" }
			id => "msgParserId815"
			add_field => {
				"result" => "Disk device Contingent allegiance"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId816
	# line in RSA:  { Enclosure services device | Disk device | Device } <id>: <info>: <event_description> 
	else if [logstash][msgparser][id] == "msgParserId816" {
		grok {
			match => { "message" => "^[\s]*([\s]*Enclosure[\s]+services[\s]+device[\s]+|[\s]*Disk[\s]+device[\s]+|[\s]*Device[\s]+)[\s]+(?<id>[^:]*):[\s]+(?<info>[^:]*):[\s]+(?<event_description>[^\s]*)[\s]+$" }
			id => "msgParserId816"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId817
	# line in RSA: Device <id>: Device returns not yet ready: CDB <fld2>: Sense Data SCSI:not ready - 
	else if [logstash][msgparser][id] == "msgParserId817" {
		dissect {
			mapping => { "message" => "Device %{id}: Device returns not yet ready: CDB %{fld2}: Sense Data SCSI:not ready -" }
			id => "msgParserId817"
			add_field => {
				"result" => "Sense Data SCSI:not ready "
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "scsi.cmd.pastTimeToLive:error" {
		# MESSAGE 030164
		# line in RSA:  Disk device <id>: request failed after try <fld1>: cdb <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk device %{id}: request failed after try %{fld1}: cdb %{fld2}" }
				id => "message-030164"
				add_field => {
				"result" => "Disk device request failed"
					"[event][id]" => "030164"
					"[rsa][message][id1]" => "030164"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030164:01
		# line in RSA:  Device <fld1> request failed after try <fld2> cdb <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Device %{fld1} request failed after try %{fld2} cdb %{fld3}" }
				id => "message-030164:01"
				add_field => {
				"result" => "Device a.: request failed after try #: cdb xf:c:."
					"[event][id]" => "030164:01"
					"[rsa][message][id1]" => "030164:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "scsi.cmd.retrySuccess:debug" {
		# MESSAGE 040533
		# line in RSA:  Enclosure services device <device>: request successful after retry #<dclass_counter1>: cdb <fld2> (<fld3>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Enclosure services device %{device}: request successful after retry #%{dclass_counter1}: cdb %{fld2} (%{fld3})." }
				id => "message-040533"
				add_field => {
				"event_description" => "Enclosure services request successful after retry"
					"[event][id]" => "040533"
					"[rsa][message][id1]" => "040533"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 031004
		# line in RSA:  Disk device <fld1>: request successful after retry <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk device %{fld1}: request successful after retry %{fld2}" }
				id => "message-031004"
				add_field => {
				"result" => "Disk device request successful after retry"
					"[event][id]" => "031004"
					"[rsa][message][id1]" => "031004"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId822
	# line in RSA:  Device <id>: request successful after retry <fld1>: cdb <fld2> 
	else if [logstash][msgparser][id] == "msgParserId822" {
		dissect {
			mapping => { "message" => "Device %{id}: request successful after retry %{fld1}: cdb %{fld2}" }
			id => "msgParserId822"
			add_field => {
				"result" => "Device request successful after retry"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId823
	# line in RSA:  Disk device <fld0>: Adapter/target error: HA status <fld1>: cdb <id> Targeted device did not respond to requested I/O. I/O will be retried.
	else if [logstash][msgparser][id] == "msgParserId823" {
		dissect {
			mapping => { "message" => "Disk device %{fld0}: Adapter/target error: HA status %{fld1}: cdb %{id} Targeted device did not respond to requested I/O. I/O will be retried." }
			id => "msgParserId823"
			add_field => {
				"result" => "Targeted device did not respond to requested"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId824
	# line in RSA:  Device <id>: <info>: <fld2> 
	else if [logstash][msgparser][id] == "msgParserId824" {
		dissect {
			mapping => { "message" => "Device %{id}: %{info}: %{fld2}" }
			id => "msgParserId824"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId825
	# line in RSA:  { Disk device | Device } <id>: <info>: <event_description>.
	else if [logstash][msgparser][id] == "msgParserId825" {
		grok {
			match => { "message" => "^[\s]*([\s]*Disk[\s]+device[\s]+|[\s]*Device[\s]+)[\s]+(?<id>[^:]*):[\s]+(?<info>[^:]*):[\s]+(?<event_description>[^\.]*)\.$" }
			id => "msgParserId825"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId826
	# line in RSA:  Disk device <device>: Received a data underrun: <info>. <result>
	else if [logstash][msgparser][id] == "msgParserId826" {
		dissect {
			mapping => { "message" => "Disk device %{device}: Received a data underrun: %{info}. %{result}" }
			id => "msgParserId826"
			add_field => {
				"event_description" => "Disk device received a data underrun"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId827
	# line in RSA:  Excessive errors encountered by adapter <interface> on { enclosure services | disk } device <id>. 
	else if [logstash][msgparser][id] == "msgParserId827" {
		grok {
			match => { "message" => "^[\s]*Excessive[\s]+errors[\s]+encountered[\s]+by[\s]+adapter[\s]+(?<interface>[^\s]*)[\s]+on[\s]+([\s]*enclosure[\s]+services[\s]+|[\s]*disk[\s]+)[\s]+device[\s]+(?<id>[^\.]*)\.[\s]+$" }
			id => "msgParserId827"
			add_field => {
				"result" => "Excessive errors encountered on device"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId828
	# line in RSA:  FCP Target <id>: Link down, <event_description>.
	else if [logstash][msgparser][id] == "msgParserId828" {
		dissect {
			mapping => { "message" => "FCP Target %{id}: Link down, %{event_description}." }
			id => "msgParserId828"
			add_field => {
				"result" => "FCP Target Link down"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId829
	# line in RSA:  Link break detected on Fibre Channel target adapter <id>.
	else if [logstash][msgparser][id] == "msgParserId829" {
		dissect {
			mapping => { "message" => "Link break detected on Fibre Channel target adapter %{id}." }
			id => "msgParserId829"
			add_field => {
				"result" => "Link break detected on Fibre Channel target adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId830
	# line in RSA:  Link up on Fibre Channel target adapter <id>.
	else if [logstash][msgparser][id] == "msgParserId830" {
		dissect {
			mapping => { "message" => "Link up on Fibre Channel target adapter %{id}." }
			id => "msgParserId830"
			add_field => {
				"result" => "Link up on Fibre Channel target adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId831
	# line in RSA:  FCP Target: LUN Reset (from port <fld1>), aborting all SCSI commands on lun <fld2>
	else if [logstash][msgparser][id] == "msgParserId831" {
		dissect {
			mapping => { "message" => "FCP Target: LUN Reset (from port %{fld1}), aborting all SCSI commands on lun %{fld2}" }
			id => "msgParserId831"
			add_field => {
				"result" => "LUN Reset"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId832
	# line in RSA:  FCP Target <fld1>: LUN <fld2> was Reset by the Intiator at Port Id: <fld3> 
	else if [logstash][msgparser][id] == "msgParserId832" {
		dissect {
			mapping => { "message" => "FCP Target %{fld1}: LUN %{fld2} was Reset by the Intiator at Port Id: %{fld3}" }
			id => "msgParserId832"
			add_field => {
				"result" => "FCP Target reset"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId833
	# line in RSA:  Fibre Channel target adapter <id> offlined.
	else if [logstash][msgparser][id] == "msgParserId833" {
		dissect {
			mapping => { "message" => "Fibre Channel target adapter %{id} offlined." }
			id => "msgParserId833"
			add_field => {
				"result" => "Fibre Channel target adapter offlined"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId834
	# line in RSA:  Offlining Fibre Channel target adapter <id>.
	else if [logstash][msgparser][id] == "msgParserId834" {
		dissect {
			mapping => { "message" => "Offlining Fibre Channel target adapter %{id}." }
			id => "msgParserId834"
			add_field => {
				"result" => "Offlining Fibre Channel target adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId835
	# line in RSA:  Onlining Fibre Channel target adapter <id>.
	else if [logstash][msgparser][id] == "msgParserId835" {
		dissect {
			mapping => { "message" => "Onlining Fibre Channel target adapter %{id}." }
			id => "msgParserId835"
			add_field => {
				"result" => "Onlining Fibre Channel target adapter"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId836
	# line in RSA:  FCP Partner Path { Misconfigured. | Misconfigured - <info> was detected. }
	else if [logstash][msgparser][id] == "msgParserId836" {
		grok {
			match => { "message" => "^[\s]*FCP[\s]+Partner[\s]+Path[\s]+([\s]*Misconfigured\.[\s]+|[\s]*Misconfigured[\s]+\-[\s]+(?<info>[^\s]*)[\s]+was[\s]+detected\.[\s]+)$" }
			id => "msgParserId836"
			add_field => {
				"event_description" => "FCP Partner Path Misconfigured"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId837
	# line in RSA:  Write to LUN <fld1> failed due to lack of space. 
	else if [logstash][msgparser][id] == "msgParserId837" {
		dissect {
			mapping => { "message" => "Write to LUN %{fld1} failed due to lack of space." }
			id => "msgParserId837"
			add_field => {
				"result" => "Write to LUN /vol/arp_sgbd/lun failed due to lack of space."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId838
	# line in RSA:  <device> State : <change_old> --> <change_new> <info>.
	else if [logstash][msgparser][id] == "msgParserId838" {
		dissect {
			mapping => { "message" => "%{device} State : %{change_old} --> %{change_new} %{info}." }
			id => "msgParserId838"
			add_field => {
				"event_description" => "Device State change"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId790
	# line in RSA:  Starting SSL with new certificate.
	else if [logstash][msgparser][id] == "msgParserId790" {
		dissect {
			mapping => { "message" => "Starting SSL with new certificate." }
			id => "msgParserId790"
			add_field => {
				"result" => "Starting SSL with new certificate"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId839
	# line in RSA:  No Enclosure Services detected through channel <fld1>.
	else if [logstash][msgparser][id] == "msgParserId839" {
		dissect {
			mapping => { "message" => "No Enclosure Services detected through channel %{fld1}." }
			id => "msgParserId839"
			add_field => {
				"result" => "No Enclosure Services detected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId840
	# line in RSA:  No more valid paths to Enclosure Services in <id>.
	else if [logstash][msgparser][id] == "msgParserId840" {
		dissect {
			mapping => { "message" => "No more valid paths to Enclosure Services in %{id}." }
			id => "msgParserId840"
			add_field => {
				"result" => "No more valid paths to Enclosure Services"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId841
	# line in RSA:  Enclosure Services unavailable for one or more shelves on channel <fld1> 
	else if [logstash][msgparser][id] == "msgParserId841" {
		dissect {
			mapping => { "message" => "Enclosure Services unavailable for one or more shelves on channel %{fld1}" }
			id => "msgParserId841"
			add_field => {
				"result" => "Enclosure Services unavailable for one or more shelves on channel b."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId842
	# line in RSA:  Encountered an ERROR in Persistent Log on <obj_name> module <device> <info>
	else if [logstash][msgparser][id] == "msgParserId842" {
		dissect {
			mapping => { "message" => "Encountered an ERROR in Persistent Log on %{obj_name} module %{device} %{info}" }
			id => "msgParserId842"
			add_field => {
				"event_description" => "Encountered an ERROR in Persistent Log on module"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId843
	# line in RSA: Initiating rescan on channel <interface> 
	else if [logstash][msgparser][id] == "msgParserId843" {
		dissect {
			mapping => { "message" => "Initiating rescan on channel %{interface}" }
			id => "msgParserId843"
			add_field => {
				"result" => "Initiating rescan on channel"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId844
	# line in RSA:  No Enclosure Services detected through channel <id>. 
	else if [logstash][msgparser][id] == "msgParserId844" {
		dissect {
			mapping => { "message" => "No Enclosure Services detected through channel %{id}." }
			id => "msgParserId844"
			add_field => {
				"result" => "No Enclosure Services detected through channel"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId845
	# line in RSA: No more valid paths to Enclosure Services in shelf <fld1> on channel <fld2> 
	else if [logstash][msgparser][id] == "msgParserId845" {
		dissect {
			mapping => { "message" => "No more valid paths to Enclosure Services in shelf %{fld1} on channel %{fld2}" }
			id => "msgParserId845"
			add_field => {
				"result" => "no more valid paths to Enclosure Services"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId846
	# line in RSA:  Enclosure Services unavailable for one or more shelves on channel <fld1> 
	else if [logstash][msgparser][id] == "msgParserId846" {
		dissect {
			mapping => { "message" => "Enclosure Services unavailable for one or more shelves on channel %{fld1}" }
			id => "msgParserId846"
			add_field => {
				"event_description" => "Enclosure Services unavailable"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId847
	# line in RSA:  On adapter <lun>, the following device(s) have not taken expected addresses: <device>
	else if [logstash][msgparser][id] == "msgParserId847" {
		dissect {
			mapping => { "message" => "On adapter %{lun}, the following device(s) have not taken expected addresses: %{device}" }
			id => "msgParserId847"
			add_field => {
				"event_description" => "On adapter device(s) have not taken expected addresses"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId848
	# line in RSA:  Mismatch between adapter and enclosure services information for device <id>.
	else if [logstash][msgparser][id] == "msgParserId848" {
		dissect {
			mapping => { "message" => "Mismatch between adapter and enclosure services information for device %{id}." }
			id => "msgParserId848"
			add_field => {
				"result" => "Mismatch between adapter and enclosure services"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId849
	# line in RSA:  Retrieving Exception SES Shelf Log information on channel <interface> { ESH | AT-FCX } module <fld1> { disk shelf ID | shelf id } <fld2> 
	else if [logstash][msgparser][id] == "msgParserId849" {
		grok {
			match => { "message" => "^[\s]*Retrieving[\s]+Exception[\s]+SES[\s]+Shelf[\s]+Log[\s]+information[\s]+on[\s]+channel[\s]+(?<interface>[^\s]*)[\s]+([\s]*ESH[\s]+|[\s]*AT\-FCX[\s]+)[\s]+module[\s]+(?<fld1>[^\s]*)[\s]+([\s]*disk[\s]+shelf[\s]+ID[\s]+|[\s]*shelf[\s]+id[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+$" }
			id => "msgParserId849"
			add_field => {
				"result" => "Retrieving Exception SES Shelf Log information on channel c AT-FCX module A shelf id "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId850
	# line in RSA:  <id> on channel 0f information for AT-FCX Bridge electronics ES controller module <fld1>: normal status
	else if [logstash][msgparser][id] == "msgParserId850" {
		dissect {
			mapping => { "message" => "%{id} on channel 0f information for AT-FCX Bridge electronics ES controller module %{fld1}: normal status" }
			id => "msgParserId850"
			add_field => {
				"result" => "environmental monitoring information for SES electronics"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId851
	# line in RSA: The error on drive <fld0> on <id> shelf <fld1> has been corrected.
	else if [logstash][msgparser][id] == "msgParserId851" {
		dissect {
			mapping => { "message" => "The error on drive %{fld0} on %{id} shelf %{fld1} has been corrected." }
			id => "msgParserId851"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId852
	# line in RSA:  <id> on channel <fld1> environmental monitoring error for SES electronics <fld2>: <fld3>. <fld4>
	else if [logstash][msgparser][id] == "msgParserId852" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} environmental monitoring error for SES electronics %{fld2}: %{fld3}. %{fld4}" }
			id => "msgParserId852"
			add_field => {
				"result" => "environmental monitoring error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ses.status.electronicsInfo:info" {
		# MESSAGE 030272
		# line in RSA:  <id> on channel <fld1> environmental monitoring information for SES electronics <fld2>: normal status
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id} on channel %{fld1} environmental monitoring information for SES electronics %{fld2}: normal status" }
				id => "message-030272"
				add_field => {
				"result" => "environmental monitoring information for SES electronics"
					"[event][id]" => "030272"
					"[rsa][message][id1]" => "030272"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030272:01
		# line in RSA:  <fld1> shelf <fld2> on channel <fld3> environmental monitoring information for SES electronics <fld4> not installed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} shelf %{fld2} on channel %{fld3} environmental monitoring information for SES electronics %{fld4} not installed" }
				id => "message-030272:01"
				add_field => {
				"result" => "DS-Mk-FC shelf  on channel 'a' or 'b' environmental monitoring information for SES electronics  not installed"
					"[event][id]" => "030272:01"
					"[rsa][message][id1]" => "030272:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId855
	# line in RSA:  <id> on channel <fld1> cooling fan information for Cooling element <fld2>: normal status
	else if [logstash][msgparser][id] == "msgParserId855" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} cooling fan information for Cooling element %{fld2}: normal status" }
			id => "msgParserId855"
			add_field => {
				"result" => "cooling fan information"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId856
	# line in RSA:  <id> on channel <fld1> cooling fan warning for Cooling element <fld2>: not installed.
	else if [logstash][msgparser][id] == "msgParserId856" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} cooling fan warning for Cooling element %{fld2}: not installed." }
			id => "msgParserId856"
			add_field => {
				"result" => "cooling fan warning"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId857
	# line in RSA:  <id> on channel <fld1> ESH error for Vendor-specific <fld2>: <fld3>. <fld4>
	else if [logstash][msgparser][id] == "msgParserId857" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} ESH error for Vendor-specific %{fld2}: %{fld3}. %{fld4}" }
			id => "msgParserId857"
			add_field => {
				"result" => "Module error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId858
	# line in RSA:  <id> on channel <fld1> ESH information for Vendor-specific <fld2>: <fld3>
	else if [logstash][msgparser][id] == "msgParserId858" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} ESH information for Vendor-specific %{fld2}: %{fld3}" }
			id => "msgParserId858"
			add_field => {
				"result" => "Module normal"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId859
	# line in RSA:  <id> power error for Power supply <fld1>: critical status; power supply failed. 
	else if [logstash][msgparser][id] == "msgParserId859" {
		dissect {
			mapping => { "message" => "%{id} power error for Power supply %{fld1}: critical status; power supply failed." }
			id => "msgParserId859"
			add_field => {
				"result" => "power supply failed - critical status"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId860
	# line in RSA:  <id> on channel <fld1> power supply information for Power supply <fld2>: normal status 
	else if [logstash][msgparser][id] == "msgParserId860" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} power supply information for Power supply %{fld2}: normal status" }
			id => "msgParserId860"
			add_field => {
				"result" => "power supply normal status"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ses.status.psWarning:warning" {
		# MESSAGE 030266
		# line in RSA:  <id> on channel <fld1> power warning for Power supply <fld2>: not installed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id} on channel %{fld1} power warning for Power supply %{fld2}: not installed." }
				id => "message-030266"
				add_field => {
				"result" => "power warning for Power supply"
					"[event][id]" => "030266"
					"[rsa][message][id1]" => "030266"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030266:01
		# line in RSA:  <id> on channel <fld1> power warning for Power supply <fld2>: non-critical status; <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id} on channel %{fld1} power warning for Power supply %{fld2}: non-critical status; %{event_description}" }
				id => "message-030266:01"
				add_field => {
				"result" => "power warning for Power supply"
					"[event][id]" => "030266:01"
					"[rsa][message][id1]" => "030266:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId863
	# line in RSA:  <id> on channel <fld1> temperature error for Temperature sensor <fld2>: <fld3>. Current temperature: <fld4>
	else if [logstash][msgparser][id] == "msgParserId863" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} temperature error for Temperature sensor %{fld2}: %{fld3}. Current temperature: %{fld4}" }
			id => "msgParserId863"
			add_field => {
				"result" => "critical temperature error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId864
	# line in RSA:  <id> on channel <fld1> temperature information for Temperature sensor <fld2>: <fld3> 
	else if [logstash][msgparser][id] == "msgParserId864" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} temperature information for Temperature sensor %{fld2}: %{fld3}" }
			id => "msgParserId864"
			add_field => {
				"result" => "temperature normal status"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId865
	# line in RSA:  <id> on channel <fld1> temperature warning for Temperature sensor <fld2>: <fld3>. Current temperature: <fld4>
	else if [logstash][msgparser][id] == "msgParserId865" {
		dissect {
			mapping => { "message" => "%{id} on channel %{fld1} temperature warning for Temperature sensor %{fld2}: %{fld3}. Current temperature: %{fld4}" }
			id => "msgParserId865"
			add_field => {
				"result" => "temperature warning"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ses_admin:error" {
		# MESSAGE 016530
		# line in RSA:  No more valid paths to Enclosure Services in shelf <fld1> on channel <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No more valid paths to Enclosure Services in shelf %{fld1} on channel %{fld2}" }
				id => "message-016530"
				add_field => {
				"result" => "no more valid paths to Enclosure Services"
					"[event][id]" => "016530"
					"[rsa][message][id1]" => "016530"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016530:01
		# line in RSA: Disk <fld> not detected by Enclosure Services. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk %{fld} not detected by Enclosure Services." }
				id => "message-016530:01"
				add_field => {
				"result" => "Disk not detected by Enclosure Services"
					"[event][id]" => "016530:01"
					"[rsa][message][id1]" => "016530:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016530:02
		# line in RSA: No possible actual addresses found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No possible actual addresses found." }
				id => "message-016530:02"
				add_field => {
				"result" => "No possible actual addresses found"
					"[event][id]" => "016530:02"
					"[rsa][message][id1]" => "016530:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016530:03
		# line in RSA:  Unable to communicate with device <fld30> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to communicate with device %{fld30}" }
				id => "message-016530:03"
				add_field => {
				"result" => "Unable to communicate with device"
					"[event][id]" => "016530:03"
					"[rsa][message][id1]" => "016530:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId870
	# line in RSA:  Suspending I/O to FC-AL adapter <fld1> for <fld2> seconds while shelf firmware is updated. 
	else if [logstash][msgparser][id] == "msgParserId870" {
		dissect {
			mapping => { "message" => "Suspending I/O to FC-AL adapter %{fld1} for %{fld2} seconds while shelf firmware is updated." }
			id => "msgParserId870"
			add_field => {
				"result" => "Suspending I/O to FC-AL adapter 'a' or 'f' or 'c' for some seconds while shelf firmware is updated."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId871
	# line in RSA:  [<fld30>]: <info>
	else if [logstash][msgparser][id] == "msgParserId871" {
		dissect {
			mapping => { "message" => "[%{fld30}]: %{info}" }
			id => "msgParserId871"
			add_field => {
				"result" => "controller elements can be updated"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sfu.ctrllerElmntsPerShelf:info" {
		# MESSAGE 040458
		# line in RSA:  [storage download shelf]: <fld1> ES controller elements can be updated on <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[storage download shelf]: %{fld1} ES controller elements can be updated on %{fld2}" }
				id => "message-040458"
				add_field => {
				"result" => "[storage download shelf]:  ES controller elements can be updated on c.shelf"
					"[event][id]" => "040458"
					"[rsa][message][id1]" => "040458"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040458:01
		# line in RSA:  [storage download shelf]: <fld1> ES controller element can be updated on <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[storage download shelf]: %{fld1} ES controller element can be updated on %{fld2}" }
				id => "message-040458:01"
				add_field => {
				"result" => "[storage download shelf]  ES controller element can be updated on b.shelf"
					"[event][id]" => "040458:01"
					"[rsa][message][id1]" => "040458:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sfu.downloadCtrllerBridge:info" {
		# MESSAGE 040459
		# line in RSA:  [storage download shelf]: Downloading <fld1> on ES controller module A via SES device <fld2> on <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[storage download shelf]: Downloading %{fld1} on ES controller module A via SES device %{fld2} on %{fld3}" }
				id => "message-040459"
				add_field => {
				"result" => "[storage download shelf]: Downloading AT-FCX..SFW on ES controller module A via SES device d. on d.shelf"
					"[event][id]" => "040459"
					"[rsa][message][id1]" => "040459"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040459:01
		# line in RSA:  [storage download shelf]: Downloading <fld1> on ES controller module B via SES device <fld2> on <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[storage download shelf]: Downloading %{fld1} on ES controller module B via SES device %{fld2} on %{fld3}" }
				id => "message-040459:01"
				add_field => {
				"result" => "[storage download shelf]: Downloading AT-FCX..SFW on ES controller module B via SES device d. on d.shelf"
					"[event][id]" => "040459:01"
					"[rsa][message][id1]" => "040459:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId876
	# line in RSA:  [storage download shelf]: Error downloading firmware file <fld1> on <fld2> 
	else if [logstash][msgparser][id] == "msgParserId876" {
		dissect {
			mapping => { "message" => "[storage download shelf]: Error downloading firmware file %{fld1} on %{fld2}" }
			id => "msgParserId876"
			add_field => {
				"result" => "[storage download shelf] Error downloading firmware file ESH..SFW on b.shelf"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId877
	# line in RSA:  [<fld30>]: Downloading <username>  on <fld1> 
	else if [logstash][msgparser][id] == "msgParserId877" {
		dissect {
			mapping => { "message" => "[%{fld30}]: Downloading %{username}  on %{fld1}" }
			id => "msgParserId877"
			add_field => {
				"result" => "Downloading file on controller"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sfu.downloadStarted:info" {
		# MESSAGE 030137
		# line in RSA:   Update of disk shelf firmware started on <device> shelves. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Update of disk shelf firmware started on %{device} shelves." }
				id => "message-030137"
				add_field => {
				"result" => "Update of disk shelf firmware started"
					"[event][id]" => "030137"
					"[rsa][message][id1]" => "030137"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030137:01
		# line in RSA:  Update of disk shelf firmware started on <fld1> shelf. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Update of disk shelf firmware started on %{fld1} shelf." }
				id => "message-030137:01"
				add_field => {
				"result" => "Update of disk shelf firmware started on  shelf."
					"[event][id]" => "030137:01"
					"[rsa][message][id1]" => "030137:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId880
	# line in RSA:  [<fld30>]: Firmware file <username> downloaded on <fld1> 
	else if [logstash][msgparser][id] == "msgParserId880" {
		dissect {
			mapping => { "message" => "[%{fld30}]: Firmware file %{username} downloaded on %{fld1}" }
			id => "msgParserId880"
			add_field => {
				"result" => "file downloaded"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sfu.downloadSummary:info" {
		# MESSAGE 030147
		# line in RSA:  Shelf firmware updated on <device> shelves.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Shelf firmware updated on %{device} shelves." }
				id => "message-030147"
				add_field => {
				"result" => "Shelf firmware updated"
					"[event][id]" => "030147"
					"[rsa][message][id1]" => "030147"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030147:01
		# line in RSA:  Shelf firmware updated on <fld1> shelf. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Shelf firmware updated on %{fld1} shelf." }
				id => "message-030147:01"
				add_field => {
				"result" => "Shelf firmware updated on  shelf."
					"[event][id]" => "030147:01"
					"[rsa][message][id1]" => "030147:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId883
	# line in RSA:  Shelf firmware updated on <fld1> shelves, failed to update on <fld2> shelf. 
	else if [logstash][msgparser][id] == "msgParserId883" {
		dissect {
			mapping => { "message" => "Shelf firmware updated on %{fld1} shelves, failed to update on %{fld2} shelf." }
			id => "msgParserId883"
			add_field => {
				"result" => "Shelf firmware updated on  shelves, failed to update on  shelf."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId884
	# line in RSA:  Partner is no longer updating disk shelf firmware. Resuming enclosure services.
	else if [logstash][msgparser][id] == "msgParserId884" {
		dissect {
			mapping => { "message" => "Partner is no longer updating disk shelf firmware. Resuming enclosure services." }
			id => "msgParserId884"
			add_field => {
				"result" => "Resuming enclosure services"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId885
	# line in RSA:  Waited <fld1> minutes for partner shelf firmware update. Resuming enclosure services. 
	else if [logstash][msgparser][id] == "msgParserId885" {
		dissect {
			mapping => { "message" => "Waited %{fld1} minutes for partner shelf firmware update. Resuming enclosure services." }
			id => "msgParserId885"
			add_field => {
				"result" => "Waited  minutes for partner shelf firmware update. Resuming enclosure services."
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sfu.rebootRequest:info" {
		# MESSAGE 040463
		# line in RSA:  Issuing request to reboot shelf <fld1> module A 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Issuing request to reboot shelf %{fld1} module A" }
				id => "message-040463"
				add_field => {
				"result" => "Issuing request to reboot shelf c.shelf module A"
					"[event][id]" => "040463"
					"[rsa][message][id1]" => "040463"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040463:01
		# line in RSA:  Issuing request to reboot shelf <fld1> module B 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Issuing request to reboot shelf %{fld1} module B" }
				id => "message-040463:01"
				add_field => {
				"result" => "Issuing request to reboot shelf c.shelf module B"
					"[event][id]" => "040463:01"
					"[rsa][message][id1]" => "040463:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId888
	# line in RSA:  [storage download shelf]: resuming disk I/O ... 
	else if [logstash][msgparser][id] == "msgParserId888" {
		dissect {
			mapping => { "message" => "[storage download shelf]: resuming disk I/O ..." }
			id => "msgParserId888"
			add_field => {
				"result" => "[storage download shelf]: resuming disk I/O ..."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId889
	# line in RSA:  [storage download shelf]: failed status check of f/w update on <fld1> <fld2> LRC/ESH, retry_count = <fld3> DEVICE_OK 
	else if [logstash][msgparser][id] == "msgParserId889" {
		dissect {
			mapping => { "message" => "[storage download shelf]: failed status check of f/w update on %{fld1} %{fld2} LRC/ESH, retry_count = %{fld3} DEVICE_OK" }
			id => "msgParserId889"
			add_field => {
				"result" => "[storage download shelf] failed status check of f/w update on b.shelf [] LRC/ESH, retry_count = , DEVICE_OK"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId890
	# line in RSA:  [storage download shelf]: suspending disk I/O ... 
	else if [logstash][msgparser][id] == "msgParserId890" {
		dissect {
			mapping => { "message" => "[storage download shelf]: suspending disk I/O ..." }
			id => "msgParserId890"
			add_field => {
				"result" => "[storage download shelf]: suspending disk I/O ..."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId891
	# line in RSA:  Suspending enclosure services -- partner is updating disk shelf firmware.
	else if [logstash][msgparser][id] == "msgParserId891" {
		dissect {
			mapping => { "message" => "Suspending enclosure services -- partner is updating disk shelf firmware." }
			id => "msgParserId891"
			add_field => {
				"result" => "Suspending enclosure services"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId892
	# line in RSA:  Suspending enclosure services -- partner is updating disk shelf firmware. 
	else if [logstash][msgparser][id] == "msgParserId892" {
		dissect {
			mapping => { "message" => "Suspending enclosure services -- partner is updating disk shelf firmware." }
			id => "msgParserId892"
			add_field => {
				"result" => "Suspending enclosure services -- partner is updating disk shelf firmware."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId893
	# line in RSA:  All attached storage on the system is multi-pathed.
	else if [logstash][msgparser][id] == "msgParserId893" {
		dissect {
			mapping => { "message" => "All attached storage on the system is multi-pathed." }
			id => "msgParserId893"
			add_field => {
				"event_description" => "All attached storage on the system is multi-pathed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId894
	# line in RSA:  System is using single path attached storage only.
	else if [logstash][msgparser][id] == "msgParserId894" {
		dissect {
			mapping => { "message" => "System is using single path attached storage only." }
			id => "msgParserId894"
			add_field => {
				"event_description" => "System is using single path attached storage only"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "shelf_module.element.missing:error" {
		# MESSAGE 040469
		# line in RSA:  Shelf module A is MISSING on channels <fld1> shelf id <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Shelf module A is MISSING on channels %{fld1} shelf id %{fld2}" }
				id => "message-040469"
				add_field => {
				"result" => "Shelf module A is MISSING on channels a/PARTNER shelf id "
					"[event][id]" => "040469"
					"[rsa][message][id1]" => "040469"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040469:01
		# line in RSA:  Shelf module B is MISSING on channels <fld1> shelf id <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Shelf module B is MISSING on channels %{fld1} shelf id %{fld2}" }
				id => "message-040469:01"
				add_field => {
				"result" => "Shelf module B is MISSING on channels b/PARTNER shelf id "
					"[event][id]" => "040469:01"
					"[rsa][message][id1]" => "040469:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId897
	# line in RSA:  <interface>: possible link errors exceeded threshold on disk: id <id>, serial_number <hostname>
	else if [logstash][msgparser][id] == "msgParserId897" {
		dissect {
			mapping => { "message" => "%{interface}: possible link errors exceeded threshold on disk: id %{id}, serial_number %{hostname}" }
			id => "msgParserId897"
			add_field => {
				"result" => "possible link errors exceeded threshold on disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId898
	# line in RSA:  <interface>: link failure detected, upstream from disk: id <id>, serial_number <hostname>
	else if [logstash][msgparser][id] == "msgParserId898" {
		dissect {
			mapping => { "message" => "%{interface}: link failure detected, upstream from disk: id %{id}, serial_number %{hostname}" }
			id => "msgParserId898"
			add_field => {
				"result" => "link failure detected, upstream from disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId899
	# line in RSA:  <interface>: Unable to write failure bytes to disk <id> <event_description>.
	else if [logstash][msgparser][id] == "msgParserId899" {
		dissect {
			mapping => { "message" => "%{interface}: Unable to write failure bytes to disk %{id} %{event_description}." }
			id => "msgParserId899"
			add_field => {
				"result" => "Unable to write failure bytes to disk"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId900
	# line in RSA:  <interface>: Disk <id> has crossed the combination media error threshold in a <device> minute window. 
	else if [logstash][msgparser][id] == "msgParserId900" {
		dissect {
			mapping => { "message" => "%{interface}: Disk %{id} has crossed the combination media error threshold in a %{device} minute window." }
			id => "msgParserId900"
			add_field => {
				"result" => "Disk has crossed the combination media error threshold"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId901
	# line in RSA:  Disk <device> has exceeded the expected IO latency in the current window with <result>. <info>
	else if [logstash][msgparser][id] == "msgParserId901" {
		dissect {
			mapping => { "message" => "Disk %{device} has exceeded the expected IO latency in the current window with %{result}. %{info}" }
			id => "msgParserId901"
			add_field => {
				"event_description" => "Disk has exceeded the expected IO latency in the current window"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId902
	# line in RSA:  shm: Disk <id> has had multiple media errors on { block <device> and will be recommended for failure. | sector <device>. }
	else if [logstash][msgparser][id] == "msgParserId902" {
		grok {
			match => { "message" => "^[\s]*shm:[\s]+Disk[\s]+(?<id>[^\s]*)[\s]+has[\s]+had[\s]+multiple[\s]+media[\s]+errors[\s]+on[\s]+([\s]*block[\s]+(?<device>[^\s]*)[\s]+and[\s]+will[\s]+be[\s]+recommended[\s]+for[\s]+failure\.[\s]+|[\s]*sector[\s]+(?<device>[^\.]*)\.[\s]+)$" }
			id => "msgParserId902"
			add_field => {
				"result" => "disk error(s)"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId903
	# line in RSA:  shm: Disk <interface> has had multiple media errors on the same block in the last <fld1> minutes before a block reassign; the disk will be recommended for failure.
	else if [logstash][msgparser][id] == "msgParserId903" {
		dissect {
			mapping => { "message" => "shm: Disk %{interface} has had multiple media errors on the same block in the last %{fld1} minutes before a block reassign; the disk will be recommended for failure." }
			id => "msgParserId903"
			add_field => {
				"result" => "disk error(s)"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId904
	# line in RSA:  shm: Disk <interface> has crossed the medium error threshold in a <fld> minute window and will be recommended for failure.
	else if [logstash][msgparser][id] == "msgParserId904" {
		dissect {
			mapping => { "message" => "shm: Disk %{interface} has crossed the medium error threshold in a %{fld} minute window and will be recommended for failure." }
			id => "msgParserId904"
			add_field => {
				"result" => "disk error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId905
	# line in RSA:  <interface>: Disk <id> has crossed the recovered error threshold in a <device> minute window. 
	else if [logstash][msgparser][id] == "msgParserId905" {
		dissect {
			mapping => { "message" => "%{interface}: Disk %{id} has crossed the recovered error threshold in a %{device} minute window." }
			id => "msgParserId905"
			add_field => {
				"result" => "Disk has crossed the recovered error threshold"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId906
	# line in RSA:  ypgroup update failed: RPC: { Timed out | Unable to receive }
	else if [logstash][msgparser][id] == "msgParserId906" {
		grok {
			match => { "message" => "^[\s]*ypgroup[\s]+update[\s]+failed:[\s]+RPC:[\s]+([\s]*Timed[\s]+out[\s]+|[\s]*Unable[\s]+to[\s]+receive[\s]+)$" }
			id => "msgParserId906"
			add_field => {
				"result" => "ypgroup update failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId907
	# line in RSA:  Enclosure control failed via <id>. Alternate path will be used if available.
	else if [logstash][msgparser][id] == "msgParserId907" {
		dissect {
			mapping => { "message" => "Enclosure control failed via %{id}. Alternate path will be used if available." }
			id => "msgParserId907"
			add_field => {
				"result" => "Enclosure control failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId908
	# line in RSA:  ses.shelf.RAS.suggestion INFO Channel <id> Mixing ESH/ESH2/ESH4 I/O modules is fully supported on a FC loop. <event_description> 
	else if [logstash][msgparser][id] == "msgParserId908" {
		dissect {
			mapping => { "message" => "ses.shelf.RAS.suggestion INFO Channel %{id} Mixing ESH/ESH2/ESH4 I/O modules is fully supported on a FC loop. %{event_description}" }
			id => "msgParserId908"
			add_field => {
				"result" => "Mixing ESH/ESH2/ESH4 I/O modules is fully supported on a FC loop"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId909
	# line in RSA:  Some <id> disk shelves on this system are capable of automatic power reset, but some do not have appropriate firmware or PSU model. <event_description>
	else if [logstash][msgparser][id] == "msgParserId909" {
		dissect {
			mapping => { "message" => "Some %{id} disk shelves on this system are capable of automatic power reset, but some do not have appropriate firmware or PSU model. %{event_description}" }
			id => "msgParserId909"
			add_field => {
				"result" => "Some disk shelves on this system are capable of automatic power reset, but some do not have appropriate firmware"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId910
	# line in RSA:  Saving SIS volume configuration for volume <id> : <info>
	else if [logstash][msgparser][id] == "msgParserId910" {
		dissect {
			mapping => { "message" => "Saving SIS volume configuration for volume %{id} : %{info}" }
			id => "msgParserId910"
			add_field => {
				"event_description" => "Saving SIS volume configuration for volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId911
	# line in RSA:  SIS operation for <id> has aborted: <event_description>
	else if [logstash][msgparser][id] == "msgParserId911" {
		dissect {
			mapping => { "message" => "SIS operation for %{id} has aborted: %{event_description}" }
			id => "msgParserId911"
			add_field => {
				"result" => "SIS operation for volume has aborted"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "smbrpc.exceptionCaught:error" {
		# MESSAGE 030005
		# line in RSA:  CIFSRPC {LsaOpenPolicy2|LsaClose}: Exception rpc_s_connection_closed caught.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*CIFSRPC[\s]+(LsaOpenPolicy2|LsaClose):[\s]+Exception[\s]+rpc_s_connection_closed[\s]+caught\.$" }
				id => "message-030005"
				add_field => {
				"result" => "Exception rpc_s_connection_closed caught"
					"[event][id]" => "030005"
					"[rsa][message][id1]" => "030005"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030005:01
		# line in RSA:  CIFSRPC: An RPC exception with a server of type domain controller occurred.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFSRPC: An RPC exception with a server of type domain controller occurred." }
				id => "message-030005:01"
				add_field => {
				"result" => "RPC exception with a server of type domain controller occurred"
					"[event][id]" => "030005:01"
					"[rsa][message][id1]" => "030005:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030005:02
		# line in RSA: <message> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{message}" }
				id => "message-030005:02"
				add_field => {
					"[event][id]" => "030005:02"
					"[rsa][message][id1]" => "030005:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId914
	# line in RSA:  <application>: Error accessing local groups information in file <filename>: <result>.
	else if [logstash][msgparser][id] == "msgParserId914" {
		dissect {
			mapping => { "message" => "%{application}: Error accessing local groups information in file %{filename}: %{result}." }
			id => "msgParserId914"
			add_field => {
				"event_description" => "Error accessing local groups information in file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId915
	# line in RSA: CIFSRPC: Attempt to close pipe LSA failed with error <id>. 
	else if [logstash][msgparser][id] == "msgParserId915" {
		dissect {
			mapping => { "message" => "CIFSRPC: Attempt to close pipe LSA failed with error %{id}." }
			id => "msgParserId915"
			add_field => {
				"result" => "Attempt to close pipe LSA failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId916
	# line in RSA: CIFSRPC: Attempt to create pipe LSA for <username> failed with error <id>. 
	else if [logstash][msgparser][id] == "msgParserId916" {
		dissect {
			mapping => { "message" => "CIFSRPC: Attempt to create pipe LSA for %{username} failed with error %{id}." }
			id => "msgParserId916"
			add_field => {
				"result" => "Attempt to create pipe LSA failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId917
	# line in RSA:  asynchronous creation of snapshot named {{ <id> } in volume <hostname> successful <fld1> 
	else if [logstash][msgparser][id] == "msgParserId917" {
		grok {
			match => { "message" => "^[\s]*asynchronous[\s]+creation[\s]+of[\s]+snapshot[\s]+named[\s]+\{[\s]+(?<id>[^\s]*)[\s]+\}[\s]+in[\s]+volume[\s]+(?<hostname>[^\s]*)[\s]+successful[\s]+(?<fld1>[^\s]*)[\s]+$" }
			id => "msgParserId917"
			add_field => {
				"result" => "asynchronous creation of snapshot successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId918
	# line in RSA:  oplock break timed out to station <hostname> for file <fld1>
	else if [logstash][msgparser][id] == "msgParserId918" {
		dissect {
			mapping => { "message" => "oplock break timed out to station %{hostname} for file %{fld1}" }
			id => "msgParserId918"
			add_field => {
				"result" => "oplock break timed out to station"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId919
	# line in RSA:  The Compliance Clock time (<interface>) is skewed from the appliance clock (<id>) by more than one hour.
	else if [logstash][msgparser][id] == "msgParserId919" {
		dissect {
			mapping => { "message" => "The Compliance Clock time (%{interface}) is skewed from the appliance clock (%{id}) by more than one hour." }
			id => "msgParserId919"
			add_field => {
				"result" => "The Compliance Clock time is skewed from the appliance clock by more than 1 hour"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "snapmirror.dst.err:error" {
		# MESSAGE 016550
		# line in RSA: SnapMirror destination transfer from <saddr> to <daddr> : destination is offline, is restricted, or does not exist 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{saddr} to %{daddr} : destination is offline, is restricted, or does not exist" }
				id => "message-016550"
				add_field => {
				"result" => "SnapMirror destination error"
					"[event][id]" => "016550"
					"[rsa][message][id1]" => "016550"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:01
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : destination volume too small; it must be equal to or larger than the source volume. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : destination volume too small; it must be equal to or larger than the source volume." }
				id => "message-016550:01"
				add_field => {
				"result" => "SnapMirror destination volume is too small"
					"[event][id]" => "016550:01"
					"[rsa][message][id1]" => "016550:01"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:02
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : destination is not in snapmirrored state. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : destination is not in snapmirrored state." }
				id => "message-016550:02"
				add_field => {
				"result" => "SnapMirror destination not in snapmirrored state"
					"[event][id]" => "016550:02"
					"[rsa][message][id1]" => "016550:02"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:03
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : snapmirror transfer failed to complete.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : snapmirror transfer failed to complete." }
				id => "message-016550:03"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:03"
					"[rsa][message][id1]" => "016550:03"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:04
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : process was aborted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : process was aborted." }
				id => "message-016550:04"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:04"
					"[rsa][message][id1]" => "016550:04"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:05
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : destination qtree does not exist.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : destination qtree does not exist." }
				id => "message-016550:05"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:05"
					"[rsa][message][id1]" => "016550:05"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:06
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : destination must be restricted for an initial transfer.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : destination must be restricted for an initial transfer." }
				id => "message-016550:06"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:06"
					"[rsa][message][id1]" => "016550:06"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:07
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : update from source not possible; snapmirror may be misconfigured, the source volume may be busy or unavailable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : update from source not possible; snapmirror may be misconfigured, the source volume may be busy or unavailable." }
				id => "message-016550:07"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:07"
					"[rsa][message][id1]" => "016550:07"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:08
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : volume is not online; cannot execute operation
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : volume is not online; cannot execute operation" }
				id => "message-016550:08"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:08"
					"[rsa][message][id1]" => "016550:08"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:09
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : incremental update not possible; a resync or initialize is necessary.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : incremental update not possible; a resync or initialize is necessary." }
				id => "message-016550:09"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:09"
					"[rsa][message][id1]" => "016550:09"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:10
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : source contains no new data; suspending transfer to destination.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : source contains no new data; suspending transfer to destination." }
				id => "message-016550:10"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:10"
					"[rsa][message][id1]" => "016550:10"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:11
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : transfer attempted for busy destination.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : transfer attempted for busy destination." }
				id => "message-016550:11"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:11"
					"[rsa][message][id1]" => "016550:11"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:12
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : cannot connect to source filer.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : cannot connect to source filer." }
				id => "message-016550:12"
				add_field => {
				"result" => "SnapMirror transfer failure"
					"[event][id]" => "016550:12"
					"[rsa][message][id1]" => "016550:12"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:13
		# line in RSA:  SnapMirror destination transfer from <fld30> to <shost> : volume is currently involved in another operation.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld30} to %{shost} : volume is currently involved in another operation." }
				id => "message-016550:13"
				add_field => {
				"result" => "SnapMirror transfer failure - volume busy"
					"[event][id]" => "016550:13"
					"[rsa][message][id1]" => "016550:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:14
		# line in RSA:  SnapMirror destination transfer from <fld1> to /vol/ged_pr/levallois : cannot initialize an existing qtree. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld1} to /vol/ged_pr/levallois : cannot initialize an existing qtree." }
				id => "message-016550:14"
				add_field => {
				"result" => "SnapMirror destination transfer from LEVFIL/vol/vol/levged to /vol/ged_pr/levallois  cannot initialize an existing qtree."
					"[event][id]" => "016550:14"
					"[rsa][message][id1]" => "016550:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:15
		# line in RSA:  SnapMirror destination transfer from <fld1> to /vol/ged_pr/paradis : cannot initialize an existing qtree. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld1} to /vol/ged_pr/paradis : cannot initialize an existing qtree." }
				id => "message-016550:15"
				add_field => {
				"result" => "SnapMirror destination transfer from parfil/vol/vol/parged to /vol/ged_pr/paradis  cannot initialize an existing qtree."
					"[event][id]" => "016550:15"
					"[rsa][message][id1]" => "016550:15"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016550:16
		# line in RSA:  SnapMirror destination transfer from <fld1> to /vol/ged_pr/paradis : request denied by source filer; check access permissions on source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination transfer from %{fld1} to /vol/ged_pr/paradis : request denied by source filer; check access permissions on source." }
				id => "message-016550:16"
				add_field => {
				"result" => "SnapMirror destination transfer from parfil/vol/vol/parged to /vol/ged_pr/paradis  request denied by source filer; check access permissions on source."
					"[event][id]" => "016550:16"
					"[rsa][message][id1]" => "016550:16"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "snapmirror.dst.resync.failed:error" {
		# MESSAGE 016554
		# line in RSA:  SnapMirror resync of <fld30> to <shost>  : destination in use as source of dump, vol copy or snapmirror.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror resync of %{fld30} to %{shost}  : destination in use as source of dump, vol copy or snapmirror." }
				id => "message-016554"
				add_field => {
				"result" => "SnapMirror resync failure - destination in use"
					"[event][id]" => "016554"
					"[rsa][message][id1]" => "016554"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016554:01
		# line in RSA:  SnapMirror resync of <fld30> to <shost>  : revert to resync base snapshot failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror resync of %{fld30} to %{shost}  : revert to resync base snapshot failed" }
				id => "message-016554:01"
				add_field => {
				"result" => "SnapMirror resync failure - revert to resync base snapshot failed"
					"[event][id]" => "016554:01"
					"[rsa][message][id1]" => "016554:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016554:02
		# line in RSA:  SnapMirror resync of <fld30> to <shost> : The destination is already a replica, but its newest snapshot cannot be used as the resync base because it does not exist on the source.  To resync, you must first break the mirror and then retry the resync
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror resync of %{fld30} to %{shost} : The destination is already a replica, but its newest snapshot cannot be used as the resync base because it does not exist on the source.  To resync, you must first break the mirror and then retry the resync" }
				id => "message-016554:02"
				add_field => {
				"result" => "SnapMirror resync failure - destination already a replica"
					"[event][id]" => "016554:02"
					"[rsa][message][id1]" => "016554:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016554:03
		# line in RSA:  SnapMirror resync of <fld30> to <shost> : volume is currently involved in another operation.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror resync of %{fld30} to %{shost} : volume is currently involved in another operation." }
				id => "message-016554:03"
				add_field => {
				"result" => "SnapMirror resync failure - volume busy"
					"[event][id]" => "016554:03"
					"[rsa][message][id1]" => "016554:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016554:04
		# line in RSA:  SnapMirror resync of <fld30> to <shost> : request refused by source filer; check configuration on source.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror resync of %{fld30} to %{shost} : request refused by source filer; check configuration on source." }
				id => "message-016554:04"
				add_field => {
				"result" => "SnapMirror resync failure - request refused by source filer"
					"[event][id]" => "016554:04"
					"[rsa][message][id1]" => "016554:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId942
	# line in RSA:  SnapMirror resync of <fld30> to <shost> is using <fld1> as the base snapshot.
	else if [logstash][msgparser][id] == "msgParserId942" {
		dissect {
			mapping => { "message" => "SnapMirror resync of %{fld30} to %{shost} is using %{fld1} as the base snapshot." }
			id => "msgParserId942"
			add_field => {
				"result" => "SnapMirror resync"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId943
	# line in RSA:  SnapMirror resync of <fld30> to <shost> successful.
	else if [logstash][msgparser][id] == "msgParserId943" {
		dissect {
			mapping => { "message" => "SnapMirror resync of %{fld30} to %{shost} successful." }
			id => "msgParserId943"
			add_field => {
				"result" => "SnapMirror resync successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId944
	# line in RSA:  Snapshot <username>in destination volume <fld30> is in use, cannot delete.
	else if [logstash][msgparser][id] == "msgParserId944" {
		dissect {
			mapping => { "message" => "Snapshot %{username}in destination volume %{fld30} is in use, cannot delete." }
			id => "msgParserId944"
			add_field => {
				"result" => "Cannot delete Snapshot - destination in use"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId945
	# line in RSA:  Transfer from <fld1> to <fld2> is in progress, SnapMirror transfer from <fld30> delayed.
	else if [logstash][msgparser][id] == "msgParserId945" {
		dissect {
			mapping => { "message" => "Transfer from %{fld1} to %{fld2} is in progress, SnapMirror transfer from %{fld30} delayed." }
			id => "msgParserId945"
			add_field => {
				"result" => "SnapMirror transfer delayed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "snapmirror.src.requestDenied:error" {
		# MESSAGE 016612
		# line in RSA:   SnapMirror transfer request from<fld1>  to host <shost> at IP address <saddr> denied: check options snapmirror.access.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror transfer request from%{fld1}  to host %{shost} at IP address %{saddr} denied: check options snapmirror.access." }
				id => "message-016612"
				add_field => {
				"result" => "SnapMirror transfer request denied"
					"[event][id]" => "016612"
					"[rsa][message][id1]" => "016612"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016612:01
		# line in RSA:  SnapMirror transfer request from <fld1> to host <fld2> at IP address <fld3> denied: not listed in /etc/snapmirror.allow. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror transfer request from %{fld1} to host %{fld2} at IP address %{fld3} denied: not listed in /etc/snapmirror.allow." }
				id => "message-016612:01"
				add_field => {
				"result" => "SnapMirror transfer request from /vol/vol/parged to host coufil at IP address ... denied: not listed in /etc/snapmirror.allow."
					"[event][id]" => "016612:01"
					"[rsa][message][id1]" => "016612:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "snapmirror.src.connDropped:error" {
		# MESSAGE 016600
		# line in RSA:  SnapMirror destination request connection dropped
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SnapMirror destination request connection dropped" }
				id => "message-016600"
				add_field => {
				"result" => "SnapMirror destination connection error"
					"[event][id]" => "016600"
					"[rsa][message][id1]" => "016600"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016600:01
		# line in RSA:  Error reading/writing to network, <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error reading/writing to network, %{info}." }
				id => "message-016600:01"
				add_field => {
					"[event][id]" => "016600:01"
					"[rsa][message][id1]" => "016600:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId949
	# line in RSA:  SnapMirror source transfer from <fld30> to <shost> : <info>
	else if [logstash][msgparser][id] == "msgParserId949" {
		dissect {
			mapping => { "message" => "SnapMirror source transfer from %{fld30} to %{shost} : %{info}" }
			id => "msgParserId949"
			add_field => {
				"result" => "SnapMirror transfer failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId950
	# line in RSA:  SnapMirror source volume <fld30> has no new data for <shost>.
	else if [logstash][msgparser][id] == "msgParserId950" {
		dissect {
			mapping => { "message" => "SnapMirror source volume %{fld30} has no new data for %{shost}." }
			id => "msgParserId950"
			add_field => {
				"result" => "SnapMirror source volume has no new data "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId951
	# line in RSA:  Command request while SnapMirror not licensed on this filer.
	else if [logstash][msgparser][id] == "msgParserId951" {
		dissect {
			mapping => { "message" => "Command request while SnapMirror not licensed on this filer." }
			id => "msgParserId951"
			add_field => {
				"result" => "Command request while SnapMirror not licensed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId952
	# line in RSA:  Command request while SnapMirror is off on this filer.
	else if [logstash][msgparser][id] == "msgParserId952" {
		dissect {
			mapping => { "message" => "Command request while SnapMirror is off on this filer." }
			id => "msgParserId952"
			add_field => {
				"result" => "Command request while SnapMirror off"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId954
	# line in RSA:  Could not find base snapshot to resync volume <fld30> to <fld1>
	else if [logstash][msgparser][id] == "msgParserId954" {
		dissect {
			mapping => { "message" => "Could not find base snapshot to resync volume %{fld30} to %{fld1}" }
			id => "msgParserId954"
			add_field => {
				"result" => "Could not find base snapshot to resync"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId955
	# line in RSA:  Cannot accept SnapMirror destination requests: destination connection dropped.
	else if [logstash][msgparser][id] == "msgParserId955" {
		dissect {
			mapping => { "message" => "Cannot accept SnapMirror destination requests: destination connection dropped." }
			id => "msgParserId955"
			add_field => {
				"result" => "Cannot accept SnapMirror destination requests"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId956
	# line in RSA:  Received SnapMirror request with incompatible version.
	else if [logstash][msgparser][id] == "msgParserId956" {
		dissect {
			mapping => { "message" => "Received SnapMirror request with incompatible version." }
			id => "msgParserId956"
			add_field => {
				"result" => "SnapMirror request with incompatible version"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId957
	# line in RSA:  vol=<disk_volume> snapshot copy=<event_type> op=<dclass_counter1>, giving up on update of <filename>: <result>.
	else if [logstash][msgparser][id] == "msgParserId957" {
		dissect {
			mapping => { "message" => "vol=%{disk_volume} snapshot copy=%{event_type} op=%{dclass_counter1}, giving up on update of %{filename}: %{result}." }
			id => "msgParserId957"
			add_field => {
				"event_description" => "snapshot copy giving up on update of file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId958
	# line in RSA:  A backup Snapshot copy was created on volume <id> by backup schedule <fld1> (<event_description>)
	else if [logstash][msgparser][id] == "msgParserId958" {
		dissect {
			mapping => { "message" => "A backup Snapshot copy was created on volume %{id} by backup schedule %{fld1} (%{event_description})" }
			id => "msgParserId958"
			add_field => {
				"result" => "A backup Snapshot copy was created by backup schedule"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId959
	# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
	else if [logstash][msgparser][id] == "msgParserId959" {
		dissect {
			mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
			id => "msgParserId959"
			add_field => {
				"result" => "destination transfer failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId960
	# line in RSA:  <fld30> while trying to create snapshot target <username> 
	else if [logstash][msgparser][id] == "msgParserId960" {
		dissect {
			mapping => { "message" => "%{fld30} while trying to create snapshot target %{username}" }
			id => "msgParserId960"
			add_field => {
				"result" => "Unable to find volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId961
	# line in RSA:  Could not create Snapshot target "<id>" on volume <interface>: <info>.
	else if [logstash][msgparser][id] == "msgParserId961" {
		dissect {
			mapping => { "message" => "Could not create Snapshot target \"%{id}\" on volume %{interface}: %{info}." }
			id => "msgParserId961"
			add_field => {
				"event_description" => "Could not create Snapshot target on volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId962
	# line in RSA:  Permission denied for SNMPv3 requests from <hostname>. Reason: <info>.
	else if [logstash][msgparser][id] == "msgParserId962" {
		dissect {
			mapping => { "message" => "Permission denied for SNMPv3 requests from %{hostname}. Reason: %{info}." }
			id => "msgParserId962"
			add_field => {
				"event_description" => "Permission denied for SNMPv3 requests"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId963
	# line in RSA:  Could not send response to host : <hostname> : reason : <info>
	else if [logstash][msgparser][id] == "msgParserId963" {
		dissect {
			mapping => { "message" => "Could not send response to host : %{hostname} : reason : %{info}" }
			id => "msgParserId963"
			add_field => {
				"event_description" => "Could not send response to host"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId964
	# line in RSA:  snmp: can't send to host: <hostname> error: No route to host
	else if [logstash][msgparser][id] == "msgParserId964" {
		dissect {
			mapping => { "message" => "snmp: can't send to host: %{hostname} error: No route to host" }
			id => "msgParserId964"
			add_field => {
				"result" => "snmp - can't send to host, no route"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId965
	# line in RSA:  Interface <interface> is down
	else if [logstash][msgparser][id] == "msgParserId965" {
		dissect {
			mapping => { "message" => "Interface %{interface} is down" }
			id => "msgParserId965"
			add_field => {
				"result" => "system status"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId966
	# line in RSA:  Interface <interface> is up
	else if [logstash][msgparser][id] == "msgParserId966" {
		dissect {
			mapping => { "message" => "Interface %{interface} is up" }
			id => "msgParserId966"
			add_field => {
				"result" => "system status"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId967
	# line in RSA:  snmp: cannot send traps to '<username>' because it could not be resolved via DNS. <fld1>
	else if [logstash][msgparser][id] == "msgParserId967" {
		dissect {
			mapping => { "message" => "snmp: cannot send traps to '%{username}' because it could not be resolved via DNS. %{fld1}" }
			id => "msgParserId967"
			add_field => {
				"result" => "could not send snmp traps"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId968
	# line in RSA:  <service>: Access Denied from if = <interface>, src ip = <daddr>, dst ip = <saddr>.  Check options snmp.access.
	else if [logstash][msgparser][id] == "msgParserId968" {
		dissect {
			mapping => { "message" => "%{service}: Access Denied from if = %{interface}, src ip = %{daddr}, dst ip = %{saddr}.  Check options snmp.access." }
			id => "msgParserId968"
			add_field => {
				"action" => "snmp connection failure - Access Denied"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd:info" {
		# MESSAGE 016896:01
		# line in RSA:  Exceeded the maximum allowed ssh sessions: <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Exceeded the maximum allowed ssh sessions: %{fld1}" }
				id => "message-016896:01"
				add_field => {
				"result" => "Exceeded the maximum allowed ssh sessions ."
					"[event][id]" => "016896:01"
					"[rsa][message][id1]" => "016896:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016896
		# line in RSA:  ssh: getpeername() failed in protocol access control with Socket is not connected.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ssh: getpeername() failed in protocol access control with Socket is not connected." }
				id => "message-016896"
				add_field => {
				"result" => "ssh failed in protocol access control"
					"[event][id]" => "016896"
					"[rsa][message][id1]" => "016896"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd_0:debug" {
		# MESSAGE 040680
		# line in RSA:  <c_username>:<action>:error:Login failed for user <username> from IP <saddr>. reason "<result>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{c_username}:%{action}:error:Login failed for user %{username} from IP %{saddr}. reason \"%{result}\"" }
				id => "message-040680"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failed for user"
					"[event][id]" => "040680"
					"[rsa][message][id1]" => "040680"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040679
		# line in RSA:  <username>:<action>:{ ssh2 | ssh } shell: <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<username>[^:]*):(?<action>[^:]*):([\s]*ssh2[\s]+|[\s]*ssh[\s]+)[\s]+shell:[\s]+(?<disposition>.*)$" }
				id => "message-040679"
				add_field => {
				"event_description" => "ssh2 shell command"
					"[event][id]" => "040679"
					"[rsa][message][id1]" => "040679"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId972
	# line in RSA: error: Disconnecting: <info>
	else if [logstash][msgparser][id] == "msgParserId972" {
		dissect {
			mapping => { "message" => "error: Disconnecting: %{info}" }
			id => "msgParserId972"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd_0:info" {
		# MESSAGE 016750
		# line in RSA:  Unknown message during authentication: type <fld>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unknown message during authentication: type %{fld}" }
				id => "message-016750"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "unknown message during authentication"
					"[event][id]" => "016750"
					"[rsa][message][id1]" => "016750"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:01
		# line in RSA:  Accepted { password | publickey }for <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Accepted[\s]+([\s]*password[\s]+|[\s]*publickey[\s]+)for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-016750:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"service" => "sshd_0"
				"action" => "Accepted user password or public key"
					"[event][id]" => "016750:01"
					"[rsa][message][id1]" => "016750:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:02
		# line in RSA:   Failed { password | publickey } { for illegal user | for user | for } <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Failed[\s]+([\s]*password[\s]+|[\s]*publickey[\s]+)[\s]+([\s]*for[\s]+illegal[\s]+user[\s]+|[\s]*for[\s]+user[\s]+|[\s]*for[\s]+)[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-016750:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_0"
				"action" => "Failed password or publickey for user"
					"[event][id]" => "016750:02"
					"[rsa][message][id1]" => "016750:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:03
		# line in RSA:  Failed hostbased for illegal user wintelservice from <fld1> port <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed hostbased for illegal user wintelservice from %{fld1} port %{fld2}" }
				id => "message-016750:03"
				add_field => {
				"result" => "Failed hostbased for illegal user wintelservice from ... port ssh2"
					"[event][id]" => "016750:03"
					"[rsa][message][id1]" => "016750:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:04
		# line in RSA:   Failed none { for illegal user | for user | for } <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Failed[\s]+none[\s]+([\s]*for[\s]+illegal[\s]+user[\s]+|[\s]*for[\s]+user[\s]+|[\s]*for[\s]+)[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-016750:04"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"service" => "sshd_0"
				"action" => "Failed none for user"
					"[event][id]" => "016750:04"
					"[rsa][message][id1]" => "016750:04"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:05
		# line in RSA:   <username> logged in from host: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username} logged in from host: %{saddr}" }
				id => "message-016750:05"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "user login"
					"[event][id]" => "016750:05"
					"[rsa][message][id1]" => "016750:05"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:06
		# line in RSA:   Did not receive identification string from <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Did not receive identification string from %{daddr}" }
				id => "message-016750:06"
				add_field => {
				"service" => "sshd_0"
				"action" => "Did not receive identification string"
					"[event][id]" => "016750:06"
					"[rsa][message][id1]" => "016750:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:07
		# line in RSA:  Bad protocol version identification '<protocol>' from <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Bad protocol version identification '%{protocol}' from %{daddr}" }
				id => "message-016750:07"
				add_field => {
				"service" => "sshd_0"
				"action" => "Bad protocol version identification"
					"[event][id]" => "016750:07"
					"[rsa][message][id1]" => "016750:07"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:08
		# line in RSA:  dispatch_protocol_error: type <fld1> seq <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "dispatch_protocol_error: type %{fld1} seq %{fld2}" }
				id => "message-016750:08"
				add_field => {
					"[event][id]" => "016750:08"
					"[rsa][message][id1]" => "016750:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:09
		# line in RSA:  Postponed publickey for <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Postponed publickey for %{username} from %{daddr} port %{dport} %{protocol}" }
				id => "message-016750:09"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_0"
				"action" => "Postponed public key"
					"[event][id]" => "016750:09"
					"[rsa][message][id1]" => "016750:09"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:10
		# line in RSA:  <protocol>: illegal user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol}: illegal user %{username}" }
				id => "message-016750:10"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_0 - input_userauth"
				"action" => "illegal user"
					"[event][id]" => "016750:10"
					"[rsa][message][id1]" => "016750:10"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:11
		# line in RSA: Could not write ident string to <hostname> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Could not write ident string to %{hostname}" }
				id => "message-016750:11"
				add_field => {
				"result" => "Could not write ident string to host"
					"[event][id]" => "016750:11"
					"[rsa][message][id1]" => "016750:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016750:12
		# line in RSA:  Protocol major versions differ for <daddr>: <version>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Protocol major versions differ for %{daddr}: %{version}" }
				id => "message-016750:12"
				add_field => {
				"service" => "sshd_0"
				"action" => "Protocol major versions differ"
					"[event][id]" => "016750:12"
					"[rsa][message][id1]" => "016750:12"
					"[event][categoryid]" => "1802000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId986
	# line in RSA:  Postponed publickey for root from <fld1> port <fld2> 
	else if [logstash][msgparser][id] == "msgParserId986" {
		dissect {
			mapping => { "message" => "Postponed publickey for root from %{fld1} port %{fld2}" }
			id => "msgParserId986"
			add_field => {
				"result" => "Postponed publickey for root from ... port ssh"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd_1:debug" {
		# MESSAGE 040681
		# line in RSA:  <c_username>:<action>:error:Login failed for user <username> from IP <saddr>. reason "<result>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{c_username}:%{action}:error:Login failed for user %{username} from IP %{saddr}. reason \"%{result}\"" }
				id => "message-040681"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failed for user"
					"[event][id]" => "040681"
					"[rsa][message][id1]" => "040681"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 001004
		# line in RSA: <username>:<action>:<service>:[<saddr>_<fld2>]:<disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}:%{action}:%{service}:[%{saddr}_%{fld2}]:%{disposition}" }
				id => "message-001004"
				add_field => {
					"[event][id]" => "001004"
					"[rsa][message][id1]" => "001004"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd_1:error" {
		# MESSAGE 016762
		# line in RSA:  error: Disconnecting: { Protocol | protocol } error: <id>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*error:[\s]+Disconnecting:[\s]+([\s]*Protocol[\s]+|[\s]*protocol[\s]+)[\s]+error:[\s]+(?<id>.*)$" }
				id => "message-016762"
				add_field => {
				"result" => "disconnecting - protocol error"
					"[event][id]" => "016762"
					"[rsa][message][id1]" => "016762"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016762:01
		# line in RSA:  error: Disconnecting: Too many authentication failures for <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "error: Disconnecting: Too many authentication failures for %{username}" }
				id => "message-016762:01"
				add_field => {
				"result" => "disconnecting - Too many authentication failures"
					"[event][id]" => "016762:01"
					"[rsa][message][id1]" => "016762:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016762:02
		# line in RSA:  error: Disconnecting: Shell not supported on takenover partner
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "error: Disconnecting: Shell not supported on takenover partner" }
				id => "message-016762:02"
				add_field => {
				"result" => "disconnecting - Shell not supported on takenover partner"
					"[event][id]" => "016762:02"
					"[rsa][message][id1]" => "016762:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd_1:info" {
		# MESSAGE 016756
		# line in RSA:   Failed { password | publickey } { for illegal user | for user | for } <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Failed[\s]+([\s]*password[\s]+|[\s]*publickey[\s]+)[\s]+([\s]*for[\s]+illegal[\s]+user[\s]+|[\s]*for[\s]+user[\s]+|[\s]*for[\s]+)[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-016756"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_1"
				"action" => "Failed password or publickey for user"
					"[event][id]" => "016756"
					"[rsa][message][id1]" => "016756"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016756:01
		# line in RSA:   Failed none { for illegal user | for user | for } <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Failed[\s]+none[\s]+([\s]*for[\s]+illegal[\s]+user[\s]+|[\s]*for[\s]+user[\s]+|[\s]*for[\s]+)[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-016756:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"service" => "sshd_1"
				"action" => "Failed none for user"
					"[event][id]" => "016756:01"
					"[rsa][message][id1]" => "016756:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016757
		# line in RSA:   Accepted { password | publickey } for <username> from <saddr> port <sport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Accepted[\s]+([\s]*password[\s]+|[\s]*publickey[\s]+)[\s]+for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-016757"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"service" => "sshd_1"
				"event_description" => "Accepted password or publickey"
					"[event][id]" => "016757"
					"[rsa][message][id1]" => "016757"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016758
		# line in RSA:   <username> logged in from host: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username} logged in from host: %{saddr}" }
				id => "message-016758"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"service" => "sshd_1"
				"event_description" => "user login"
					"[event][id]" => "016758"
					"[rsa][message][id1]" => "016758"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016759
		# line in RSA:  Did not receive identification string from <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Did not receive identification string from %{daddr}" }
				id => "message-016759"
				add_field => {
				"service" => "sshd_1"
				"action" => "Did not receive identification string"
					"[event][id]" => "016759"
					"[rsa][message][id1]" => "016759"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016759:01
		# line in RSA:  Postponed publickey for <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Postponed publickey for %{username} from %{daddr} port %{dport} %{protocol}" }
				id => "message-016759:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_1"
				"action" => "Postponed public key"
					"[event][id]" => "016759:01"
					"[rsa][message][id1]" => "016759:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016759:02
		# line in RSA:  dispatch_protocol_error: <id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "dispatch_protocol_error: %{id}" }
				id => "message-016759:02"
				add_field => {
				"result" => "dispatch_protocol_error"
					"[event][id]" => "016759:02"
					"[rsa][message][id1]" => "016759:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016759:03
		# line in RSA:  Bad protocol version identification '<protocol>' from <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Bad protocol version identification '%{protocol}' from %{daddr}" }
				id => "message-016759:03"
				add_field => {
				"service" => "sshd_1"
				"action" => "Bad protocol version identification"
					"[event][id]" => "016759:03"
					"[rsa][message][id1]" => "016759:03"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016759:04
		# line in RSA:  <protocol>: illegal user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol}: illegal user %{username}" }
				id => "message-016759:04"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_1 - input_userauth"
				"action" => "illegal user"
					"[event][id]" => "016759:04"
					"[rsa][message][id1]" => "016759:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016759:05
		# line in RSA:  Unknown message during authentication: type <event_type>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unknown message during authentication: type %{event_type}" }
				id => "message-016759:05"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "unknown message during authentication"
					"[event][id]" => "016759:05"
					"[rsa][message][id1]" => "016759:05"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId987
	# line in RSA:  error: Disconnecting: { Protocol | protocol } error: <id>
	else if [logstash][msgparser][id] == "msgParserId987" {
		grok {
			match => { "message" => "^[\s]*error:[\s]+Disconnecting:[\s]+([\s]*Protocol[\s]+|[\s]*protocol[\s]+)[\s]+error:[\s]+(?<id>.*)$" }
			id => "msgParserId987"
			add_field => {
				"result" => "disconnecting - protocol error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd_2:info" {
		# MESSAGE 030006
		# line in RSA:  dispatch_protocol_error: <id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "dispatch_protocol_error: %{id}" }
				id => "message-030006"
				add_field => {
				"result" => "dispatch_protocol_error"
					"[event][id]" => "030006"
					"[rsa][message][id1]" => "030006"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030006:01
		# line in RSA:  Postponed publickey for <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Postponed publickey for %{username} from %{daddr} port %{dport} %{protocol}" }
				id => "message-030006:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_2"
				"action" => "Postponed public key"
					"[event][id]" => "030006:01"
					"[rsa][message][id1]" => "030006:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030006:02
		# line in RSA:   Accepted { password | publickey } for <username> from <saddr> port <sport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Accepted[\s]+([\s]*password[\s]+|[\s]*publickey[\s]+)[\s]+for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-030006:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"service" => "sshd_2"
				"event_description" => "Accepted password or publickey"
					"[event][id]" => "030006:02"
					"[rsa][message][id1]" => "030006:02"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030006:03
		# line in RSA:  <username> logged in from host: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username} logged in from host: %{saddr}" }
				id => "message-030006:03"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"service" => "sshd_2"
				"event_description" => "login"
					"[event][id]" => "030006:03"
					"[rsa][message][id1]" => "030006:03"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030006:04
		# line in RSA:   Failed { password | publickey } { for illegal user | for user | for } <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Failed[\s]+([\s]*password[\s]+|[\s]*publickey[\s]+)[\s]+([\s]*for[\s]+illegal[\s]+user[\s]+|[\s]*for[\s]+user[\s]+|[\s]*for[\s]+)[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-030006:04"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_2"
				"action" => "Failed password or publickey for user"
					"[event][id]" => "030006:04"
					"[rsa][message][id1]" => "030006:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030006:05
		# line in RSA:   Failed none { for illegal user | for user | for } <username> from <daddr> port <dport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Failed[\s]+none[\s]+([\s]*for[\s]+illegal[\s]+user[\s]+|[\s]*for[\s]+user[\s]+|[\s]*for[\s]+)[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-030006:05"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"service" => "sshd_2"
				"action" => "Failed none for user"
					"[event][id]" => "030006:05"
					"[rsa][message][id1]" => "030006:05"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030006:06
		# line in RSA:  Did not receive identification string from <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Did not receive identification string from %{daddr}" }
				id => "message-030006:06"
				add_field => {
				"service" => "sshd_2"
				"action" => "Did not receive identification string"
					"[event][id]" => "030006:06"
					"[rsa][message][id1]" => "030006:06"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId982
	# line in RSA:  Postponed publickey for <username> from <daddr> port <dport> <protocol>
	else if [logstash][msgparser][id] == "msgParserId982" {
		dissect {
			mapping => { "message" => "Postponed publickey for %{username} from %{daddr} port %{dport} %{protocol}" }
			id => "msgParserId982"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"service" => "sshd_0"
				"action" => "Postponed public key"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1006
	# line in RSA:   Postponed publickey for root from <saddr> port <fld1> 
	else if [logstash][msgparser][id] == "msgParserId1006" {
		dissect {
			mapping => { "message" => "Postponed publickey for root from %{saddr} port %{fld1}" }
			id => "msgParserId1006"
			add_field => {
				"result" => "Postponed publickey for root"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd:warning" {
		# MESSAGE 016900
		# line in RSA:  Permissions <fld> for '<fld1>' are too open.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Permissions %{fld} for '%{fld1}' are too open." }
				id => "message-016900"
				add_field => {
				"result" => "file permission too open"
					"[event][id]" => "016900"
					"[rsa][message][id1]" => "016900"
					"[event][categoryid]" => "1402030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 016901
		# line in RSA:  It is recommended that your private key files are NOT accessible by others.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "It is recommended that your private key files are NOT accessible by others." }
				id => "message-016901"
				add_field => {
				"result" => "system warning"
					"[event][id]" => "016901"
					"[rsa][message][id1]" => "016901"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1010
	# line in RSA: <fld1>[am|pm] up  <fld2> 
	else if [logstash][msgparser][id] == "msgParserId1010" {
		dissect {
			mapping => { "message" => "%{fld1}[am|pm] up  %{fld2}" }
			id => "msgParserId1010"
			add_field => {
				"result" => "no more valid paths to Enclosure Services"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1011
	# line in RSA:  Cluster is licensed but takeover of partner is disabled
	else if [logstash][msgparser][id] == "msgParserId1011" {
		dissect {
			mapping => { "message" => "Cluster is licensed but takeover of partner is disabled" }
			id => "msgParserId1011"
			add_field => {
				"result" => "takeover of partner is disabled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1012
	# line in RSA:  Cluster partner is booted and ready for giveback.
	else if [logstash][msgparser][id] == "msgParserId1012" {
		dissect {
			mapping => { "message" => "Cluster partner is booted and ready for giveback." }
			id => "msgParserId1012"
			add_field => {
				"result" => "Cluster partner is booted and ready for giveback"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "statd:warning" {
		# MESSAGE 017001
		# line in RSA:  Error in writing value to iterator file: tag=<fld1> err=<id> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error in writing value to iterator file: tag=%{fld1} err=%{id}" }
				id => "message-017001"
				add_field => {
				"result" => "Error in writing value to iterator file"
					"[event][id]" => "017001"
					"[rsa][message][id1]" => "017001"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 031006
		# line in RSA:  *** WARNING *** Remove or update those downrev disks!!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "*** WARNING *** Remove or update those downrev disks!!" }
				id => "message-031006"
				add_field => {
				"result" => "WARNING *** Remove or update those downrev disks"
					"[event][id]" => "031006"
					"[rsa][message][id1]" => "031006"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sthread_loop:error" {
		# MESSAGE 017002
		# line in RSA:  No free connection available in Farm: "<fld1>". Possible sizing problem
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No free connection available in Farm: \"%{fld1}\". Possible sizing problem" }
				id => "message-017002"
				add_field => {
				"result" => "No free connection available"
					"[event][id]" => "017002"
					"[rsa][message][id1]" => "017002"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040547
		# line in RSA:  <interface>: <fld1> sent content length <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{interface}: %{fld1} sent content length %{info}." }
				id => "message-040547"
				add_field => {
				"event_description" => "sent bad content length"
					"[event][id]" => "040547"
					"[rsa][message][id1]" => "040547"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sthread_loop:info" {
		# MESSAGE 017003
		# line in RSA:  hierarchy: <hostname> { unreachable. | reachable. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*hierarchy:[\s]+(?<hostname>[^\s]*)[\s]+([\s]*unreachable\.[\s]+|[\s]*reachable\.[\s]+)$" }
				id => "message-017003"
				add_field => {
				"result" => "host status - reachable/unreachable"
					"[event][id]" => "017003"
					"[rsa][message][id1]" => "017003"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 017003:01
		# line in RSA:  File <fld1> deleted by host <daddr>, user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "File %{fld1} deleted by host %{daddr}, user %{username}" }
				id => "message-017003:01"
				add_field => {
				"result" => "File deleted"
					"[event][id]" => "017003:01"
					"[rsa][message][id1]" => "017003:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 017003:02
		# line in RSA:  DFM Discovery: Could not connect to DFM at <saddr>:<sport>. No server is listening at that address.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DFM Discovery: Could not connect to DFM at %{saddr}:%{sport}. No server is listening at that address." }
				id => "message-017003:02"
				add_field => {
				"action" => "No server is listening at that address"
					"[event][id]" => "017003:02"
					"[rsa][message][id1]" => "017003:02"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 017003:03
		# line in RSA:  DFM Discovery: DFM address <saddr>:<sport> used to send discovery message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DFM Discovery: DFM address %{saddr}:%{sport} used to send discovery message" }
				id => "message-017003:03"
				add_field => {
				"action" => "send discovery message"
					"[event][id]" => "017003:03"
					"[rsa][message][id1]" => "017003:03"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sthread_loop:warning" {
		# MESSAGE 017004
		# line in RSA:  Warning: Trying to open connection to <protocol> Server Farm: "websense" which has no functional servers
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Warning: Trying to open connection to %{protocol} Server Farm: \"websense\" which has no functional servers" }
				id => "message-017004"
				add_field => {
				"result" => "no functional servers"
					"[event][id]" => "017004"
					"[rsa][message][id1]" => "017004"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 017004:01
		# line in RSA:  Client <daddr> trying to connect to appliance port <dport> using the appliance
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{daddr} trying to connect to appliance port %{dport} using the appliance" }
				id => "message-017004:01"
				add_field => {
				"result" => "trying to connect"
					"[event][id]" => "017004:01"
					"[rsa][message][id1]" => "017004:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 017004:02
		# line in RSA:  Cannot connect to <protocol> server: "<daddr>:<dport>/<fld1>" at initialization, still trying.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to %{protocol} server: \"%{daddr}:%{dport}/%{fld1}\" at initialization, still trying." }
				id => "message-017004:02"
				add_field => {
				"result" => "server at initialization"
					"[event][id]" => "017004:02"
					"[rsa][message][id1]" => "017004:02"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 017004:03
		# line in RSA:  <protocol> server: "<daddr>:<dport>/<fld1>" ok
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} server: \"%{daddr}:%{dport}/%{fld1}\" ok" }
				id => "message-017004:03"
				add_field => {
				"result" => "server ok"
					"[event][id]" => "017004:03"
					"[rsa][message][id1]" => "017004:03"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 017004:04
		# line in RSA:  icaptest warning: no free connections available for service "<daddr>". Waiting for <fld1> seconds
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "icaptest warning: no free connections available for service \"%{daddr}\". Waiting for %{fld1} seconds" }
				id => "message-017004:04"
				add_field => {
				"result" => "no free connections available"
					"[event][id]" => "017004:04"
					"[rsa][message][id1]" => "017004:04"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 017004:05
		# line in RSA:  Potential Routing loop detected in HTTP Via header: <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Potential Routing loop detected in HTTP Via header: %{fld1}" }
				id => "message-017004:05"
				add_field => {
				"result" => "Potential Routing loop detected in HTTP Via header"
					"[event][id]" => "017004:05"
					"[rsa][message][id1]" => "017004:05"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1027
	# line in RSA:  snapvault: vol=<id> snapshot=<username> error: snapshot creation failed
	else if [logstash][msgparser][id] == "msgParserId1027" {
		dissect {
			mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} error: snapshot creation failed" }
			id => "msgParserId1027"
			add_field => {
				"result" => "snapshot creation failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1028
	# line in RSA:  <fld1>: <fld>card (<fld2>) in slot <fld3> <fld4>.
	else if [logstash][msgparser][id] == "msgParserId1028" {
		dissect {
			mapping => { "message" => "%{fld1}: %{fld}card (%{fld2}) in slot %{fld3} %{fld4}." }
			id => "msgParserId1028"
			add_field => {
				"result" => "sysconfig_periodic_:error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1029
	# line in RSA:  logerror syslogd: Couldn't find address for host name "<hostname>": Host name lookup failure
	else if [logstash][msgparser][id] == "msgParserId1029" {
		dissect {
			mapping => { "message" => "logerror syslogd: Couldn't find address for host name \"%{hostname}\": Host name lookup failure" }
			id => "msgParserId1029"
			add_field => {
				"result" => "Host name lookup failure - Couldn't find address"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "syslogd:info" {
		# MESSAGE 018500
		# line in RSA: syslogd: restarted 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "syslogd: restarted" }
				id => "message-018500"
				add_field => {
				"result" => "syslogd restarted"
					"[event][id]" => "018500"
					"[rsa][message][id1]" => "018500"
					"[event][categoryid]" => "1610000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 018500:01
		# line in RSA:  Lookup of <id> failed with DNS server <hostname>: Can't assign requested address.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lookup of %{id} failed with DNS server %{hostname}: Can't assign requested address." }
				id => "message-018500:01"
				add_field => {
				"result" => "Lookup failed with DNS server"
					"[event][id]" => "018500:01"
					"[rsa][message][id1]" => "018500:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1032
	# line in RSA:  Tape device <id>: Check Condition: SCSI Op Code Write(<fld1>)) (<fld2>): hard error - <info>.
	else if [logstash][msgparser][id] == "msgParserId1032" {
		dissect {
			mapping => { "message" => "Tape device %{id}: Check Condition: SCSI Op Code Write(%{fld1})) (%{fld2}): hard error - %{info}." }
			id => "msgParserId1032"
			add_field => {
				"event_description" => "Tape device Check Condition - Write error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "tape_sdm_admin:info" {
		# MESSAGE 030481
		# line in RSA:  Dynamic Tape Qualification file <fld1>format check was successful.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dynamic Tape Qualification file %{fld1}format check was successful." }
				id => "message-030481"
				add_field => {
				"result" => "format check successful"
					"[event][id]" => "030481"
					"[rsa][message][id1]" => "030481"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030481:01
		# line in RSA:  Dynamic Tape Qualification file:<fld1> has an optional key setting: autoload="<fld2>yes".
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dynamic Tape Qualification file:%{fld1} has an optional key setting: autoload=\"%{fld2}yes\"." }
				id => "message-030481:01"
				add_field => {
					"[event][id]" => "030481:01"
					"[rsa][message][id1]" => "030481:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030481:02
		# line in RSA:  Internal tape qualification table was successfully updated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Internal tape qualification table was successfully updated." }
				id => "message-030481:02"
				add_field => {
				"result" => "qualification table successful updated"
					"[event][id]" => "030481:02"
					"[rsa][message][id1]" => "030481:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1036
	# line in RSA:  Alias <id> automatically added for { medium changer device | tape device } <interface>
	else if [logstash][msgparser][id] == "msgParserId1036" {
		grok {
			match => { "message" => "^[\s]*Alias[\s]+(?<id>[^\s]*)[\s]+automatically[\s]+added[\s]+for[\s]+([\s]*medium[\s]+changer[\s]+device[\s]+|[\s]*tape[\s]+device[\s]+)[\s]+(?<interface>.*)$" }
			id => "msgParserId1036"
			add_field => {
				"result" => "Alias automatically added for device"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1037
	# line in RSA:  Tape device at address <id> has been moved to <interface>.
	else if [logstash][msgparser][id] == "msgParserId1037" {
		dissect {
			mapping => { "message" => "Tape device at address %{id} has been moved to %{interface}." }
			id => "msgParserId1037"
			add_field => {
				"result" => "Tape device has been moved"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1038
	# line in RSA:  Stored checksum <change_old> does not match calculated checksum <change_new>, extracting <filename>
	else if [logstash][msgparser][id] == "msgParserId1038" {
		dissect {
			mapping => { "message" => "Stored checksum %{change_old} does not match calculated checksum %{change_new}, extracting %{filename}" }
			id => "msgParserId1038"
			add_field => {
				"event_description" => "Stored checksum does not match calculated checksum for file extraction"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1039
	# line in RSA:  Stored checksum file does not exist, extracting <filename>
	else if [logstash][msgparser][id] == "msgParserId1039" {
		dissect {
			mapping => { "message" => "Stored checksum file does not exist, extracting %{filename}" }
			id => "msgParserId1039"
			add_field => {
				"event_description" => "Stored checksum file does not exist for file extraction"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1040
	# line in RSA:  Completed extracting <filename>
	else if [logstash][msgparser][id] == "msgParserId1040" {
		dissect {
			mapping => { "message" => "Completed extracting %{filename}" }
			id => "msgParserId1040"
			add_field => {
				"event_description" => "Completed file extraction"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1041
	# line in RSA:  <username>@[{<saddr>_<sport>|<saddr>}]:<action>:<service>:<disposition>
	else if [logstash][msgparser][id] == "msgParserId1041" {
		grok {
			match => { "message" => "^[\s]*(?<username>[^@]*)@\[((?<saddr>[^_]*)_(?<sport>[^\]]*)|(?<saddr>[^\]]*))\]:(?<action>[^:]*):(?<service>[^:]*):(?<disposition>.*)$" }
			id => "msgParserId1041"
			add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "shell command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1042
	# line in RSA:  <username> logged in from host: <shost> 
	else if [logstash][msgparser][id] == "msgParserId1042" {
		dissect {
			mapping => { "message" => "%{username} logged in from host: %{shost}" }
			id => "msgParserId1042"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "successful user login"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "telnet_0:warning" {
		# MESSAGE 019501
		# line in RSA: too many bad logins from host host: <shost>, IP address <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "too many bad logins from host host: %{shost}, IP address %{saddr}" }
				id => "message-019501"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "bad login"
					"[event][id]" => "019501"
					"[rsa][message][id1]" => "019501"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 019500
		# line in RSA:  too many bad logins from host: <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "too many bad logins from host: %{shost}" }
				id => "message-019500"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "too many bad logins"
					"[event][id]" => "019500"
					"[rsa][message][id1]" => "019500"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1045
	# line in RSA:  Time server '<id>' is not responding to time synchronization requests.
	else if [logstash][msgparser][id] == "msgParserId1045" {
		dissect {
			mapping => { "message" => "Time server '%{id}' is not responding to time synchronization requests." }
			id => "msgParserId1045"
			add_field => {
				"result" => "Time server not responding"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1046
	# line in RSA:  Client <saddr> (xid <id1>) is trying to access an { unexported | offline } mount (<info> on volume <device> [<result>])
	else if [logstash][msgparser][id] == "msgParserId1046" {
		grok {
			match => { "message" => "^[\s]*Client[\s]+(?<saddr>[^\s]*)[\s]+\(xid[\s]+(?<id1>[^\)]*)\)[\s]+is[\s]+trying[\s]+to[\s]+access[\s]+an[\s]+([\s]*unexported[\s]+|[\s]*offline[\s]+)[\s]+mount[\s]+\((?<info>[^\s]*)[\s]+on[\s]+volume[\s]+(?<device>[^\s]*)[\s]+\[(?<result>[^\]]*)\]\)$" }
			id => "msgParserId1046"
			add_field => {
				"event_description" => "Client trying to access an offline or unexported mount"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1047
	# line in RSA:  Client <saddr> (xid <id1>) is trying to access an { unexported | offline } mount (<info> on volume <device> [<result>])
	else if [logstash][msgparser][id] == "msgParserId1047" {
		grok {
			match => { "message" => "^[\s]*Client[\s]+(?<saddr>[^\s]*)[\s]+\(xid[\s]+(?<id1>[^\)]*)\)[\s]+is[\s]+trying[\s]+to[\s]+access[\s]+an[\s]+([\s]*unexported[\s]+|[\s]*offline[\s]+)[\s]+mount[\s]+\((?<info>[^\s]*)[\s]+on[\s]+volume[\s]+(?<device>[^\s]*)[\s]+\[(?<result>[^\]]*)\]\)$" }
			id => "msgParserId1047"
			add_field => {
				"event_description" => "Client trying to access an an unexported or offline mount"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1048
	# line in RSA:  <fld0> disks are currently unowned. Use 'disk assign' to assign the disks to a filer.
	else if [logstash][msgparser][id] == "msgParserId1048" {
		dissect {
			mapping => { "message" => "%{fld0} disks are currently unowned. Use 'disk assign' to assign the disks to a filer." }
			id => "msgParserId1048"
			add_field => {
				"result" => "disks are currently unowned"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "useradmin.added.deleted:info" {
		# MESSAGE 019600
		# line in RSA: The { role | user } '<username>' has been deleted.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+([\s]*role[\s]+|[\s]*user[\s]+)[\s]+'(?<username>[^']*)'[\s]+has[\s]+been[\s]+deleted\.$" }
				id => "message-019600"
				add_field => {
				"result" => "user deleted"
					"[event][id]" => "019600"
					"[rsa][message][id1]" => "019600"
					"[event][categoryid]" => "1402020100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 019600:01
		# line in RSA: The { role | user } '<username>' has been added.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+([\s]*role[\s]+|[\s]*user[\s]+)[\s]+'(?<username>[^']*)'[\s]+has[\s]+been[\s]+added\.$" }
				id => "message-019600:01"
				add_field => {
				"result" => "user added"
					"[event][id]" => "019600:01"
					"[rsa][message][id1]" => "019600:01"
					"[event][categoryid]" => "1402020200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 019600:02
		# line in RSA: The group '<username>' has been added.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The group '%{username}' has been added." }
				id => "message-019600:02"
				add_field => {
				"result" => "group added"
					"[event][id]" => "019600:02"
					"[rsa][message][id1]" => "019600:02"
					"[event][categoryid]" => "1402010200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 019600:03
		# line in RSA: The group '<username>' has been modified.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The group '%{username}' has been modified." }
				id => "message-019600:03"
				add_field => {
				"result" => "group modified"
					"[event][id]" => "019600:03"
					"[rsa][message][id1]" => "019600:03"
					"[event][categoryid]" => "1402010300"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 019600:04
		# line in RSA: The { role | user } '<username>' has been modified.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+([\s]*role[\s]+|[\s]*user[\s]+)[\s]+'(?<username>[^']*)'[\s]+has[\s]+been[\s]+modified\.$" }
				id => "message-019600:04"
				add_field => {
				"result" => "user modified"
					"[event][id]" => "019600:04"
					"[rsa][message][id1]" => "019600:04"
					"[event][categoryid]" => "1402020300"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1054
	# line in RSA:  User '<username>' denied access - missing required capability: '<fld1>'
	else if [logstash][msgparser][id] == "msgParserId1054" {
		dissect {
			mapping => { "message" => "User '%{username}' denied access - missing required capability: '%{fld1}'" }
			id => "msgParserId1054"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
				"result" => "User denied access"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1055
	# line in RSA:  vfiler: '<username>' started
	else if [logstash][msgparser][id] == "msgParserId1055" {
		dissect {
			mapping => { "message" => "vfiler: '%{username}' started" }
			id => "msgParserId1055"
			add_field => {
				"result" => "vfiler started"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1056
	# line in RSA:  vfiler: '<username>'; stopped
	else if [logstash][msgparser][id] == "msgParserId1056" {
		dissect {
			mapping => { "message" => "vfiler: '%{username}'; stopped" }
			id => "msgParserId1056"
			add_field => {
				"result" => "vfiler stopped"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1057
	# line in RSA:  "<application>" initialized.
	else if [logstash][msgparser][id] == "msgParserId1057" {
		dissect {
			mapping => { "message" => "\"%{application}\" initialized." }
			id => "msgParserId1057"
			add_field => {
				"event_description" => "application initialized"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1058
	# line in RSA:  <interface>: path <id> removed from configuration because <info>.
	else if [logstash][msgparser][id] == "msgParserId1058" {
		dissect {
			mapping => { "message" => "%{interface}: path %{id} removed from configuration because %{info}." }
			id => "msgParserId1058"
			add_field => {
				"event_description" => "path removed from configuration "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1059
	# line in RSA:  <interface>: storage unit <id> now offline.
	else if [logstash][msgparser][id] == "msgParserId1059" {
		dissect {
			mapping => { "message" => "%{interface}: storage unit %{id} now offline." }
			id => "msgParserId1059"
			add_field => {
				"result" => "vFiler storage unit now offline"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1060
	# line in RSA:  Language on volume <fld30> changed to <username>
	else if [logstash][msgparser][id] == "msgParserId1060" {
		dissect {
			mapping => { "message" => "Language on volume %{fld30} changed to %{username}" }
			id => "msgParserId1060"
			add_field => {
				"result" => "Language on volume changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1061
	# line in RSA: Language not set on volume <fld30>. Using language config <fld1>. Use vol lang to set language. 
	else if [logstash][msgparser][id] == "msgParserId1061" {
		dissect {
			mapping => { "message" => "Language not set on volume %{fld30}. Using language config %{fld1}. Use vol lang to set language." }
			id => "msgParserId1061"
			add_field => {
				"result" => "Language not set on volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1062
	# line in RSA:  Some aggregates are offline. Volume creation could cause duplicate FSIDs.
	else if [logstash][msgparser][id] == "msgParserId1062" {
		dissect {
			mapping => { "message" => "Some aggregates are offline. Volume creation could cause duplicate FSIDs." }
			id => "msgParserId1062"
			add_field => {
				"result" => "Volume creation failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1063
	# line in RSA:  CIFS: Virus scanning has been disabled.
	else if [logstash][msgparser][id] == "msgParserId1063" {
		dissect {
			mapping => { "message" => "CIFS: Virus scanning has been disabled." }
			id => "msgParserId1063"
			add_field => {
				"result" => "Virus scanning has been disabled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1064
	# line in RSA:  CIFS: Virus scanning has been enabled.
	else if [logstash][msgparser][id] == "msgParserId1064" {
		dissect {
			mapping => { "message" => "CIFS: Virus scanning has been enabled." }
			id => "msgParserId1064"
			add_field => {
				"result" => "Virus scanning has been enabled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1065
	# line in RSA:  CIFS: Virus scan server <hostname> (<hostip>) has disconnected from the filer.
	else if [logstash][msgparser][id] == "msgParserId1065" {
		dissect {
			mapping => { "message" => "CIFS: Virus scan server %{hostname} (%{hostip}) has disconnected from the filer." }
			id => "msgParserId1065"
			add_field => {
				"result" => "Virus scan server has disconnected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1066
	# line in RSA:  CIFS: Vscan server <hostname> completed a scan request for <fld1> but the original request was not found.
	else if [logstash][msgparser][id] == "msgParserId1066" {
		dissect {
			mapping => { "message" => "CIFS: Vscan server %{hostname} completed a scan request for %{fld1} but the original request was not found." }
			id => "msgParserId1066"
			add_field => {
				"result" => "completed scan request"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1067
	# line in RSA:  CIFS: Virus scanning is enabled but no vscan (anti-virus) servers are connected to the filer.
	else if [logstash][msgparser][id] == "msgParserId1067" {
		dissect {
			mapping => { "message" => "CIFS: Virus scanning is enabled but no vscan (anti-virus) servers are connected to the filer." }
			id => "msgParserId1067"
			add_field => {
				"result" => "no vscan (anti-virus) servers are connected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1068
	# line in RSA:  CIFS: An attempt to connect to vscan server <hostname> failed 
	else if [logstash][msgparser][id] == "msgParserId1068" {
		dissect {
			mapping => { "message" => "CIFS: An attempt to connect to vscan server %{hostname} failed" }
			id => "msgParserId1068"
			add_field => {
				"result" => "attempt to connect to vscan server failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1069
	# line in RSA:  CIFS: Vscan server <hostname> attempted to register but there is already a vscan server registered from that address.
	else if [logstash][msgparser][id] == "msgParserId1069" {
		dissect {
			mapping => { "message" => "CIFS: Vscan server %{hostname} attempted to register but there is already a vscan server registered from that address." }
			id => "msgParserId1069"
			add_field => {
				"result" => "Vscan server already registered"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1070
	# line in RSA:  <service>: Vscan server <obj_server> attempted to deregister but was <result>.
	else if [logstash][msgparser][id] == "msgParserId1070" {
		dissect {
			mapping => { "message" => "%{service}: Vscan server %{obj_server} attempted to deregister but was %{result}." }
			id => "msgParserId1070"
			add_field => {
				"event_description" => "Vscan server error in deregister"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1071
	# line in RSA:  CIFS: Vscan server <hostname> deregistered and will be removed from the list of available vscan servers.
	else if [logstash][msgparser][id] == "msgParserId1071" {
		dissect {
			mapping => { "message" => "CIFS: Vscan server %{hostname} deregistered and will be removed from the list of available vscan servers." }
			id => "msgParserId1071"
			add_field => {
				"result" => "Vscan server deregistered"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1072
	# line in RSA:  CIFS: Vscan server <hostname> registered with the filer successfully.
	else if [logstash][msgparser][id] == "msgParserId1072" {
		dissect {
			mapping => { "message" => "CIFS: Vscan server %{hostname} registered with the filer successfully." }
			id => "msgParserId1072"
			add_field => {
				"result" => "Vscan server registered with the filer successfully"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1073
	# line in RSA:  CIFS: Could not determine Fully Qualified Domain Name (FQDN) of virus vcanning (vscan) server (<obj_server>). <info>.
	else if [logstash][msgparser][id] == "msgParserId1073" {
		dissect {
			mapping => { "message" => "CIFS: Could not determine Fully Qualified Domain Name (FQDN) of virus vcanning (vscan) server (%{obj_server}). %{info}." }
			id => "msgParserId1073"
			add_field => {
				"event_description" => "Could not determine Fully Qualified Domain Name (FQDN) of virus scanning (vscan) server"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1074
	# line in RSA:  <interface>: Attempt to make a scan request to vscan server <hostname> failed with error [<fld1>] (<info>)
	else if [logstash][msgparser][id] == "msgParserId1074" {
		dissect {
			mapping => { "message" => "%{interface}: Attempt to make a scan request to vscan server %{hostname} failed with error [%{fld1}] (%{info})" }
			id => "msgParserId1074"
			add_field => {
				"result" => "scan request to vscan server failed with error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1075
	# line in RSA:  CIFS: Scan request of <filename> by vscan server <hostname> was rejected with error [<fld1>]
	else if [logstash][msgparser][id] == "msgParserId1075" {
		dissect {
			mapping => { "message" => "CIFS: Scan request of %{filename} by vscan server %{hostname} was rejected with error [%{fld1}]" }
			id => "msgParserId1075"
			add_field => {
				"result" => "scan request rejected by vscan server"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1076
	# line in RSA:  CIFS: Virus scan request to <hostname> for file <filename> timed out. <info>
	else if [logstash][msgparser][id] == "msgParserId1076" {
		dissect {
			mapping => { "message" => "CIFS: Virus scan request to %{hostname} for file %{filename} timed out. %{info}" }
			id => "msgParserId1076"
			add_field => {
				"result" => "virus scan request timed out"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1077
	# line in RSA:  CIFS: Virus scan server <interface> (<hostname>) notified the filer that its version has changed.
	else if [logstash][msgparser][id] == "msgParserId1077" {
		dissect {
			mapping => { "message" => "CIFS: Virus scan server %{interface} (%{hostname}) notified the filer that its version has changed." }
			id => "msgParserId1077"
			add_field => {
				"result" => "virus scan server version changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "vscan.virus.created:ALERT" {
		# MESSAGE 019701
		# line in RSA:  CIFS: Possible Virus Detected - File <fld> in share <domain> modified by client <interface> (<shost>) running as user <username> may be infected. The filer received status <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS: Possible Virus Detected - File %{fld} in share %{domain} modified by client %{interface} (%{shost}) running as user %{username} may be infected. The filer received status %{fld1}" }
				id => "message-019701"
				add_field => {
				"result" => "virus detected"
					"[event][id]" => "019701"
					"[rsa][message][id1]" => "019701"
					"[event][categoryid]" => "1614000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 019701:01
		# line in RSA:  CIFS: Possible Virus Detected - File <filename> in share <domain> modified by client <interface> (<shost>) running as user <username> may be infected. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CIFS: Possible Virus Detected - File %{filename} in share %{domain} modified by client %{interface} (%{shost}) running as user %{username} may be infected." }
				id => "message-019701:01"
				add_field => {
				"result" => "virus detected"
					"[event][id]" => "019701:01"
					"[rsa][message][id1]" => "019701:01"
					"[event][categoryid]" => "1614000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1080
	# line in RSA:  CIFS: <action> - File <filename> in share <domain> accessed by client <hostname> (<hostip>) running as user <username> may be infected. The filer received status message <info> 
	else if [logstash][msgparser][id] == "msgParserId1080" {
		dissect {
			mapping => { "message" => "CIFS: %{action} - File %{filename} in share %{domain} accessed by client %{hostname} (%{hostip}) running as user %{username} may be infected. The filer received status message %{info}" }
			id => "msgParserId1080"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1081
	# line in RSA: Language on volume <hostname> changed to <username> 
	else if [logstash][msgparser][id] == "msgParserId1081" {
		dissect {
			mapping => { "message" => "Language on volume %{hostname} changed to %{username}" }
			id => "msgParserId1081"
			add_field => {
				"result" => "Language on volume changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1082
	# line in RSA: XL - Language of Volume <fld30> has been changed to <username> 
	else if [logstash][msgparser][id] == "msgParserId1082" {
		dissect {
			mapping => { "message" => "XL - Language of Volume %{fld30} has been changed to %{username}" }
			id => "msgParserId1082"
			add_field => {
				"result" => "Language on volume changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1083
	# line in RSA:  Not enough free space in aggregate <fld30> to guarantee free space in all SnapMirror destinations.
	else if [logstash][msgparser][id] == "msgParserId1083" {
		dissect {
			mapping => { "message" => "Not enough free space in aggregate %{fld30} to guarantee free space in all SnapMirror destinations." }
			id => "msgParserId1083"
			add_field => {
				"result" => "Not enough free space in aggregate"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1084
	# line in RSA: Directory <fld30> reached the maxdirsize limit. Reduce the number of files or use the vol options command to increase this limit. 
	else if [logstash][msgparser][id] == "msgParserId1084" {
		dissect {
			mapping => { "message" => "Directory %{fld30} reached the maxdirsize limit. Reduce the number of files or use the vol options command to increase this limit." }
			id => "msgParserId1084"
			add_field => {
				"result" => "Directory reached the maxdirsize limit"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1085
	# line in RSA: Directory <fld30> is approaching the maxdirsize limit. Reduce the number of files or use the vol options command to increase this limit. 
	else if [logstash][msgparser][id] == "msgParserId1085" {
		dissect {
			mapping => { "message" => "Directory %{fld30} is approaching the maxdirsize limit. Reduce the number of files or use the vol options command to increase this limit." }
			id => "msgParserId1085"
			add_field => {
				"result" => "Directory is approaching the maxdirsize limit"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1086
	# line in RSA:  <id> configuration mismatch detected during cluster takeover.
	else if [logstash][msgparser][id] == "msgParserId1086" {
		dissect {
			mapping => { "message" => "%{id} configuration mismatch detected during cluster takeover." }
			id => "msgParserId1086"
			add_field => {
				"result" => "configuration mismatch detected during cluster takeover"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1087
	# line in RSA:  fill reservation disabled for inode <node> (vol <disk_volume>).
	else if [logstash][msgparser][id] == "msgParserId1087" {
		dissect {
			mapping => { "message" => "fill reservation disabled for inode %{node} (vol %{disk_volume})." }
			id => "msgParserId1087"
			add_field => {
				"event_description" => "fill reservation disabled for inode"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1088
	# line in RSA:  fill reservation enabled for inode <node> (vol <disk_volume>).
	else if [logstash][msgparser][id] == "msgParserId1088" {
		dissect {
			mapping => { "message" => "fill reservation enabled for inode %{node} (vol %{disk_volume})." }
			id => "msgParserId1088"
			add_field => {
				"event_description" => "fill reservation enabled for inode"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1089
	# line in RSA:  overwrite reservation disabled for inode <node> (vol <disk_volume>).
	else if [logstash][msgparser][id] == "msgParserId1089" {
		dissect {
			mapping => { "message" => "overwrite reservation disabled for inode %{node} (vol %{disk_volume})." }
			id => "msgParserId1089"
			add_field => {
				"event_description" => "overwrite reservation disabled for inode"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1090
	# line in RSA:  overwrite reservation enabled for inode <node> (vol <disk_volume>).
	else if [logstash][msgparser][id] == "msgParserId1090" {
		dissect {
			mapping => { "message" => "overwrite reservation enabled for inode %{node} (vol %{disk_volume})." }
			id => "msgParserId1090"
			add_field => {
				"event_description" => "overwrite reservation enabled for inode"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1091
	# line in RSA:  <fld>: This volume's maxdirsize (<fld1>) is higher than the default (<fld2>). There may be a performance penalty when doing operations on large directories.
	else if [logstash][msgparser][id] == "msgParserId1091" {
		dissect {
			mapping => { "message" => "%{fld}: This volume's maxdirsize (%{fld1}) is higher than the default (%{fld2}). There may be a performance penalty when doing operations on large directories." }
			id => "msgParserId1091"
			add_field => {
				"result" => "Volume's maxdirsize is higher"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1092
	# line in RSA: Priority scheduling is being disabled 
	else if [logstash][msgparser][id] == "msgParserId1092" {
		dissect {
			mapping => { "message" => "Priority scheduling is being disabled" }
			id => "msgParserId1092"
			add_field => {
				"result" => "Priority scheduling disabled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1093
	# line in RSA: Priority scheduling is being enabled 
	else if [logstash][msgparser][id] == "msgParserId1093" {
		dissect {
			mapping => { "message" => "Priority scheduling is being enabled" }
			id => "msgParserId1093"
			add_field => {
				"result" => "Priority scheduling enabled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1094
	# line in RSA:  Deleting qtree <id>
	else if [logstash][msgparser][id] == "msgParserId1094" {
		dissect {
			mapping => { "message" => "Deleting qtree %{id}" }
			id => "msgParserId1094"
			add_field => {
				"result" => "Deleting qtree"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1095
	# line in RSA:  Successfully deleted qtree <id>.
	else if [logstash][msgparser][id] == "msgParserId1095" {
		dissect {
			mapping => { "message" => "Successfully deleted qtree %{id}." }
			id => "msgParserId1095"
			add_field => {
				"result" => "Successfully Deleted qtree"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1096
	# line in RSA:  Breaking snapmirrored qtree <device> in volume <id>: base snapshot no longer exists. <info>.
	else if [logstash][msgparser][id] == "msgParserId1096" {
		dissect {
			mapping => { "message" => "Breaking snapmirrored qtree %{device} in volume %{id}: base snapshot no longer exists. %{info}." }
			id => "msgParserId1096"
			add_field => {
				"event_description" => "Breaking snapmirrored qtree in volume - base snapshot no longer exists"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1097
	# line in RSA:  Breaking snapmirrored qtree <device> in volume <id>: WAFL_check broke all snapmirrors in volume <fld1>. <info>.
	else if [logstash][msgparser][id] == "msgParserId1097" {
		dissect {
			mapping => { "message" => "Breaking snapmirrored qtree %{device} in volume %{id}: WAFL_check broke all snapmirrors in volume %{fld1}. %{info}." }
			id => "msgParserId1097"
			add_field => {
				"event_description" => "Breaking snapmirrored qtree in volume - WAFL_check broke all snapmirrors"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1098
	# line in RSA: tid <fld1>: <info> on volume <fld30>. <space> Additional warnings will be suppressed for approximately 60 minutes 
	else if [logstash][msgparser][id] == "msgParserId1098" {
		dissect {
			mapping => { "message" => "tid %{fld1}: %{info} on volume %{fld30}. %{space} Additional warnings will be suppressed for approximately 60 minutes" }
			id => "msgParserId1098"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1099
	# line in RSA:   security style for <fld30> changed from <username> 
	else if [logstash][msgparser][id] == "msgParserId1099" {
		dissect {
			mapping => { "message" => "security style for %{fld30} changed from %{username}" }
			id => "msgParserId1099"
			add_field => {
				"result" => "volume security style changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1100
	# line in RSA: <info> on volume <fld30> for Windows user ID: <username>. Additional warnings will be suppressed for approximately 60 minutes
	else if [logstash][msgparser][id] == "msgParserId1100" {
		dissect {
			mapping => { "message" => "%{info} on volume %{fld30} for Windows user ID: %{username}. Additional warnings will be suppressed for approximately 60 minutes" }
			id => "msgParserId1100"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1101
	# line in RSA: uid <fld1>: disk quota exceeded on volume <username>. Additional warnings will be suppressed for approximately 60 minutes or until a 'quota resize' is performed
	else if [logstash][msgparser][id] == "msgParserId1101" {
		dissect {
			mapping => { "message" => "uid %{fld1}: disk quota exceeded on volume %{username}. Additional warnings will be suppressed for approximately 60 minutes or until a 'quota resize' is performed" }
			id => "msgParserId1101"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1102
	# line in RSA: tid <fld1>: <info> on volume <fld30> for Windows user ID: <username>. Additional warnings will be suppressed for approximately 60 minutes
	else if [logstash][msgparser][id] == "msgParserId1102" {
		dissect {
			mapping => { "message" => "tid %{fld1}: %{info} on volume %{fld30} for Windows user ID: %{username}. Additional warnings will be suppressed for approximately 60 minutes" }
			id => "msgParserId1102"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1103
	# line in RSA:  Aggregate reallocation scan on '<device>' was interrupted.
	else if [logstash][msgparser][id] == "msgParserId1103" {
		dissect {
			mapping => { "message" => "Aggregate reallocation scan on '%{device}' was interrupted." }
			id => "msgParserId1103"
			add_field => {
				"event_description" => "Aggregate reallocation scan on device was interrupted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1104
	# line in RSA:  Allocation check on '<id>' is <device>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId1104" {
		dissect {
			mapping => { "message" => "Allocation check on '%{id}' is %{device}, %{event_description}" }
			id => "msgParserId1104"
			add_field => {
				"result" => "Allocation check on volume is over threshold"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1105
	# line in RSA:  Allocation check on '<id>' is <device>, <event_description> 
	else if [logstash][msgparser][id] == "msgParserId1105" {
		dissect {
			mapping => { "message" => "Allocation check on '%{id}' is %{device}, %{event_description}" }
			id => "msgParserId1105"
			add_field => {
				"result" => "Allocation check  under"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1106
	# line in RSA:  Allocation check on '<id>' is under threshold.
	else if [logstash][msgparser][id] == "msgParserId1106" {
		dissect {
			mapping => { "message" => "Allocation check on '%{id}' is under threshold." }
			id => "msgParserId1106"
			add_field => {
				"result" => "Allocation check on volume is under threshold"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1107
	# line in RSA:  WAFL log replay completed, <fld1> seconds
	else if [logstash][msgparser][id] == "msgParserId1107" {
		dissect {
			mapping => { "message" => "WAFL log replay completed, %{fld1} seconds" }
			id => "msgParserId1107"
			add_field => {
				"result" => "WAFL log replay completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1108
	# line in RSA:  The 64-bit space qualifying scanner has completed running on Volume <disk_volume>.
	else if [logstash][msgparser][id] == "msgParserId1108" {
		dissect {
			mapping => { "message" => "The 64-bit space qualifying scanner has completed running on Volume %{disk_volume}." }
			id => "msgParserId1108"
			add_field => {
				"event_description" => "64-bit space qualifying scanner has completed running on volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1109
	# line in RSA:  Volume <fld30>, clone split complete.
	else if [logstash][msgparser][id] == "msgParserId1109" {
		dissect {
			mapping => { "message" => "Volume %{fld30}, clone split complete." }
			id => "msgParserId1109"
			add_field => {
				"result" => "Volume clone split complete"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "wafl.scan.layout.advise.ino:info" {
		# MESSAGE 040473
		# line in RSA:  WAFL layout ratio for volume systeme, inode <fld1> is <fld2> A ratio of <fld3> is optimal. Based on your free space, <fld4> is expected. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WAFL layout ratio for volume systeme, inode %{fld1} is %{fld2} A ratio of %{fld3} is optimal. Based on your free space, %{fld4} is expected." }
				id => "message-040473"
				add_field => {
				"result" => "WAFL layout ratio for volume systeme, inode  is .. A ratio of  is optimal. Based on your free space, . is expected."
					"[event][id]" => "040473"
					"[rsa][message][id1]" => "040473"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040473:01
		# line in RSA:  WAFL layout ratio for volume <fld1> inode <fld2> is <fld3> A ratio of <fld4> is optimal. Based on your free space, <fld5> is expected. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WAFL layout ratio for volume %{fld1} inode %{fld2} is %{fld3} A ratio of %{fld4} is optimal. Based on your free space, %{fld5} is expected." }
				id => "message-040473:01"
				add_field => {
				"result" => "WAFL layout ratio for volume esvnot, inode  is .. A ratio of  is optimal. Based on your free space, . is expected."
					"[event][id]" => "040473:01"
					"[rsa][message][id1]" => "040473:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "wafl.scan.start:info" {
		# MESSAGE 040744
		# line in RSA:  Starting block reallocation on aggregate <device>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting block reallocation on aggregate %{device}." }
				id => "message-040744"
				add_field => {
				"event_description" => "Starting block reallocation on aggregate"
					"[event][id]" => "040744"
					"[rsa][message][id1]" => "040744"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 019906
		# line in RSA:  Starting <process>{ on volume | of the inofile on } <disk_volume>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Starting[\s]+(?<process>[^\s\s]*)([\s]*on[\s]+volume[\s]+|[\s]*of[\s]+the[\s]+inofile[\s]+on[\s]+)[\s]+(?<disk_volume>[^\.]*)\.$" }
				id => "message-019906"
				add_field => {
				"event_description" => "Starting activity on volume"
					"[event][id]" => "019906"
					"[rsa][message][id1]" => "019906"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1114
	# line in RSA:  Deleting snapshot '<fld>' in aggregate '<fld1>' to recover storage
	else if [logstash][msgparser][id] == "msgParserId1114" {
		dissect {
			mapping => { "message" => "Deleting snapshot '%{fld}' in aggregate '%{fld1}' to recover storage" }
			id => "msgParserId1114"
			add_field => {
				"result" => "deleting snapshot"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1115
	# line in RSA:  Deleting snapshot '<id>' in aggregate '<username>' as a <info>.
	else if [logstash][msgparser][id] == "msgParserId1115" {
		dissect {
			mapping => { "message" => "Deleting snapshot '%{id}' in aggregate '%{username}' as a %{info}." }
			id => "msgParserId1115"
			add_field => {
				"event_description" => "Deleting snapshot in aggregate"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1116
	# line in RSA:  asynchronous creation of snapshot named {{ <fld1> } in volume <fld30> successful.  <fld2> 
	else if [logstash][msgparser][id] == "msgParserId1116" {
		grok {
			match => { "message" => "^[\s]*asynchronous[\s]+creation[\s]+of[\s]+snapshot[\s]+named[\s]+\{[\s]+(?<fld1>[^\s]*)[\s]+\}[\s]+in[\s]+volume[\s]+(?<fld30>[^\s]*)[\s]+successful\.[\s]+(?<fld2>[^\s]*)[\s]+$" }
			id => "msgParserId1116"
			add_field => {
				"result" => "asynchronous creation of snapshot successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1117
	# line in RSA:  <interface>: skipping creation of { hourly | nightly | weekly } snapshot (<event_description>) 
	else if [logstash][msgparser][id] == "msgParserId1117" {
		grok {
			match => { "message" => "^[\s]*(?<interface>[^:]*):[\s]+skipping[\s]+creation[\s]+of[\s]+([\s]*hourly[\s]+|[\s]*nightly[\s]+|[\s]*weekly[\s]+)[\s]+snapshot[\s]+\((?<event_description>[^\)]*)\)[\s]+$" }
			id => "msgParserId1117"
			add_field => {
				"result" => "skipping creation of snapshot"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1118
	# line in RSA:  <fld30>: skipping creation of { hourly | nightly | weekly } 
	else if [logstash][msgparser][id] == "msgParserId1118" {
		grok {
			match => { "message" => "^[\s]*(?<fld30>[^:]*):[\s]+skipping[\s]+creation[\s]+of[\s]+([\s]*hourly[\s]+|[\s]*nightly[\s]+|[\s]*weekly[\s]+)[\s]+$" }
			id => "msgParserId1118"
			add_field => {
				"result" => "skipping creation of snapshot"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1119
	# line in RSA:  Snapshot copy <fld1> { on aggregate | on volume } <fld30> was deleted by the <username>. 
	else if [logstash][msgparser][id] == "msgParserId1119" {
		grok {
			match => { "message" => "^[\s]*Snapshot[\s]+copy[\s]+(?<fld1>[^\s]*)[\s]+([\s]*on[\s]+aggregate[\s]+|[\s]*on[\s]+volume[\s]+)[\s]+(?<fld30>[^\s]*)[\s]+was[\s]+deleted[\s]+by[\s]+the[\s]+(?<username>[^\.]*)\.[\s]+$" }
			id => "msgParserId1119"
			add_field => {
				"result" => "snapshot deleted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1120
	# line in RSA:  Reverting volume <fld30> to a previous snapshot.
	else if [logstash][msgparser][id] == "msgParserId1120" {
		dissect {
			mapping => { "message" => "Reverting volume %{fld30} to a previous snapshot." }
			id => "msgParserId1120"
			add_field => {
				"result" => "Reverting volume to a previous snapshot"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1121
	# line in RSA:  The space management policy for volume <id> has changed: <event_description>.
	else if [logstash][msgparser][id] == "msgParserId1121" {
		dissect {
			mapping => { "message" => "The space management policy for volume %{id} has changed: %{event_description}." }
			id => "msgParserId1121"
			add_field => {
				"result" => "space management policy for volume changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1122
	# line in RSA:  { Volume | Aggregate } <disk_volume> Split inofile scan completed.
	else if [logstash][msgparser][id] == "msgParserId1122" {
		grok {
			match => { "message" => "^[\s]*([\s]*Volume[\s]+|[\s]*Aggregate[\s]+)[\s]+(?<disk_volume>[^\s]*)[\s]+Split[\s]+inofile[\s]+scan[\s]+completed\.$" }
			id => "msgParserId1122"
			add_field => {
				"event_description" => "split inofile scan completed"
				"result" => "Volume/Aggregate Split"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1123
	# line in RSA:  WAFL takeover: no partner area found during wafl replay
	else if [logstash][msgparser][id] == "msgParserId1123" {
		dissect {
			mapping => { "message" => "WAFL takeover: no partner area found during wafl replay" }
			id => "msgParserId1123"
			add_field => {
				"result" => "no partner area found during wafl replay"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1124
	# line in RSA:  Aggregate <fld30> has been added to the system.
	else if [logstash][msgparser][id] == "msgParserId1124" {
		dissect {
			mapping => { "message" => "Aggregate %{fld30} has been added to the system." }
			id => "msgParserId1124"
			add_field => {
				"result" => "Aggregate has been added to the system"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1125
	# line in RSA:  Space for volume <device> is guaranteed
	else if [logstash][msgparser][id] == "msgParserId1125" {
		dissect {
			mapping => { "message" => "Space for volume %{device} is guaranteed" }
			id => "msgParserId1125"
			add_field => {
				"event_description" => "Space for volume is guaranteed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1126
	# line in RSA:  Unable to grow volume '<id>' to recover space: <event_description>
	else if [logstash][msgparser][id] == "msgParserId1126" {
		dissect {
			mapping => { "message" => "Unable to grow volume '%{id}' to recover space: %{event_description}" }
			id => "msgParserId1126"
			add_field => {
				"result" => "Unable to grow volume to recover space"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1127
	# line in RSA:  Space for replica volume '<fld30>' is not guaranteed. <info>
	else if [logstash][msgparser][id] == "msgParserId1127" {
		dissect {
			mapping => { "message" => "Space for replica volume '%{fld30}' is not guaranteed. %{info}" }
			id => "msgParserId1127"
			add_field => {
				"result" => "Volume space not guaranteed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1128
	# line in RSA:  file system on volume <id> is full
	else if [logstash][msgparser][id] == "msgParserId1128" {
		dissect {
			mapping => { "message" => "file system on volume %{id} is full" }
			id => "msgParserId1128"
			add_field => {
				"result" => "file system is full"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1129
	# line in RSA:  Space for clone volume '<fld30>' is not guaranteed.
	else if [logstash][msgparser][id] == "msgParserId1129" {
		dissect {
			mapping => { "message" => "Space for clone volume '%{fld30}' is not guaranteed." }
			id => "msgParserId1129"
			add_field => {
				"result" => "Volume space not guaranteed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1130
	# line in RSA:  Space for volume <fld30> is { NOT | not } guaranteed
	else if [logstash][msgparser][id] == "msgParserId1130" {
		grok {
			match => { "message" => "^[\s]*Space[\s]+for[\s]+volume[\s]+(?<fld30>[^\s]*)[\s]+is[\s]+([\s]*NOT[\s]+|[\s]*not[\s]+)[\s]+guaranteed$" }
			id => "msgParserId1130"
			add_field => {
				"result" => "Volume space not guaranteed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1131
	# line in RSA:  Space for replica volume '<fld30>' is not guaranteed.
	else if [logstash][msgparser][id] == "msgParserId1131" {
		dissect {
			mapping => { "message" => "Space for replica volume '%{fld30}' is not guaranteed." }
			id => "msgParserId1131"
			add_field => {
				"result" => "Volume space not guaranteed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1132
	# line in RSA:  Volume <fld30> calculation of inode2parent complete.
	else if [logstash][msgparser][id] == "msgParserId1132" {
		dissect {
			mapping => { "message" => "Volume %{fld30} calculation of inode2parent complete." }
			id => "msgParserId1132"
			add_field => {
				"result" => "Volume calculation of inode2parent complete"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1133
	# line in RSA:  Loading Volume <fld>
	else if [logstash][msgparser][id] == "msgParserId1133" {
		dissect {
			mapping => { "message" => "Loading Volume %{fld}" }
			id => "msgParserId1133"
			add_field => {
				"result" => "Loading Volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1134
	# line in RSA:  file system on Volume sessions is out of inodes
	else if [logstash][msgparser][id] == "msgParserId1134" {
		dissect {
			mapping => { "message" => "file system on Volume sessions is out of inodes" }
			id => "msgParserId1134"
			add_field => {
				"result" => "file system is out of inodes"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1135
	# line in RSA:  Volume clone <fld1> of volume <fld30> was created successfully.
	else if [logstash][msgparser][id] == "msgParserId1135" {
		dissect {
			mapping => { "message" => "Volume clone %{fld1} of volume %{fld30} was created successfully." }
			id => "msgParserId1135"
			add_field => {
				"result" => "Volume created"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1136
	# line in RSA:  Fractional reservation for clone '<id>' was changed to 100 percent because <info>.
	else if [logstash][msgparser][id] == "msgParserId1136" {
		dissect {
			mapping => { "message" => "Fractional reservation for clone '%{id}' was changed to 100 percent because %{info}." }
			id => "msgParserId1136"
			add_field => {
				"event_description" => "Fractional reservation for clone was changed to 100 percent"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1137
	# line in RSA:  Deleting snapshot '<username>' in volume '<id>' to recover storage
	else if [logstash][msgparser][id] == "msgParserId1137" {
		dissect {
			mapping => { "message" => "Deleting snapshot '%{username}' in volume '%{id}' to recover storage" }
			id => "msgParserId1137"
			add_field => {
				"result" => "deleting snapshot in volume to recover storage"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1138
	# line in RSA:  Volume <fld1> has locked snapshots, not splitting. 
	else if [logstash][msgparser][id] == "msgParserId1138" {
		dissect {
			mapping => { "message" => "Volume %{fld1} has locked snapshots, not splitting." }
			id => "msgParserId1138"
			add_field => {
				"result" => "Volume 'esvnotdedup' has locked snapshots, not splitting."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1139
	# line in RSA:  Setting volume size for <hostname> to match nominal size.
	else if [logstash][msgparser][id] == "msgParserId1139" {
		dissect {
			mapping => { "message" => "Setting volume size for %{hostname} to match nominal size." }
			id => "msgParserId1139"
			add_field => {
				"result" => "Volume size set to nominal"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1140
	# line in RSA:  Volume <fld30> destroyed.
	else if [logstash][msgparser][id] == "msgParserId1140" {
		dissect {
			mapping => { "message" => "Volume %{fld30} destroyed." }
			id => "msgParserId1140"
			add_field => {
				"result" => "Volume destroyed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1141
	# line in RSA:  Volume '<fld30>' has been set temporarily offline
	else if [logstash][msgparser][id] == "msgParserId1141" {
		dissect {
			mapping => { "message" => "Volume '%{fld30}' has been set temporarily offline" }
			id => "msgParserId1141"
			add_field => {
				"result" => "Volume has been set temporarily offline"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1142
	# line in RSA: Write failed to file with CIFS space reservations due to lack of disk space in volume <username> (<fld1>). 
	else if [logstash][msgparser][id] == "msgParserId1142" {
		dissect {
			mapping => { "message" => "Write failed to file with CIFS space reservations due to lack of disk space in volume %{username} (%{fld1})." }
			id => "msgParserId1142"
			add_field => {
				"result" => "Write failed due to lack of disk space in volume"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1143
	# line in RSA:  The file system on Volume <id> is using <fld1> percent or more of the files that can be contained on the volume.
	else if [logstash][msgparser][id] == "msgParserId1143" {
		dissect {
			mapping => { "message" => "The file system on Volume %{id} is using %{fld1} percent or more of the files that can be contained on the volume." }
			id => "msgParserId1143"
			add_field => {
				"hostname" => "%{hhost}"
				"info" => "%{$MSG}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_03:error" {
		# MESSAGE 030298
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030298"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030298"
					"[rsa][message][id1]" => "030298"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030298:01
		# line in RSA:  snapvault: source transfer from <fld30> to <username>:<interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld30} to %{username}:%{interface} : %{event_description}" }
				id => "message-030298:01"
				add_field => {
				"result" => "source transfer failed"
					"[event][id]" => "030298:01"
					"[rsa][message][id1]" => "030298:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030298:02
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-030298:02"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "030298:02"
					"[rsa][message][id1]" => "030298:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1146
	# line in RSA:  snapmirror: Network communication error 
	else if [logstash][msgparser][id] == "msgParserId1146" {
		dissect {
			mapping => { "message" => "snapmirror: Network communication error" }
			id => "msgParserId1146"
			add_field => {
				"result" => "snapmirror Network communication error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1147
	# line in RSA:  snapmirror: Network communication error 
	else if [logstash][msgparser][id] == "msgParserId1147" {
		dissect {
			mapping => { "message" => "snapmirror: Network communication error" }
			id => "msgParserId1147"
			add_field => {
				"result" => "snapmirror: Network communication error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_338:error" {
		# MESSAGE 030361:01
		# line in RSA:  snapvault: destination transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-030361:01"
				add_field => {
				"result" => "snapvault: destination transfer from esvfil:/vol/esvedt/esvedt to /vol/esvedt/esvedt : source contains no new data; suspending transfer to destination"
					"[event][id]" => "030361:01"
					"[rsa][message][id1]" => "030361:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030361:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030361:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030361:02"
					"[rsa][message][id1]" => "030361:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030361:03
		# line in RSA:  snapvault: destination transfer from <fld1> to <fld2> : replication destination could not set permissions on a file or directory 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1} to %{fld2} : replication destination could not set permissions on a file or directory" }
				id => "message-030361:03"
				add_field => {
				"result" => "snapvault: destination transfer from esvfil:/vol/esvnot/esvnot to /vol/esvnot/esvnot : replication destination could not set permissions on a file or directory"
					"[event][id]" => "030361:03"
					"[rsa][message][id1]" => "030361:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030361
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030361"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030361"
					"[rsa][message][id1]" => "030361"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_340:error" {
		# MESSAGE 034340:01
		# line in RSA:  snapvault: destination transfer from <fld1> to /vol/preprod/num_pp : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1} to /vol/preprod/num_pp : source contains no new data; suspending transfer to destination" }
				id => "message-034340:01"
				add_field => {
				"result" => "snapvault: destination transfer from esvfil:/vol/preprod/num_pp to /vol/preprod/num_pp : source contains no new data; suspending transfer to destination"
					"[event][id]" => "034340:01"
					"[rsa][message][id1]" => "034340:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034340:02
		# line in RSA:  snapvault: destination transfer from <fld1> to /vol/P/p_quota : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1} to /vol/P/p_quota : source contains no new data; suspending transfer to destination" }
				id => "message-034340:02"
				add_field => {
				"result" => "snapvault: destination transfer from esvfil:/vol/P/p_quota to /vol/P/p_quota : source contains no new data; suspending transfer to destination"
					"[event][id]" => "034340:02"
					"[rsa][message][id1]" => "034340:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034340:03
		# line in RSA:  snapvault: destination transfer from <fld1> to /vol/archivage/archivage : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1} to /vol/archivage/archivage : source contains no new data; suspending transfer to destination" }
				id => "message-034340:03"
				add_field => {
				"result" => "snapvault: destination transfer from esvfil:/vol/archivage/archivage to /vol/archivage/archivage : source contains no new data; suspending transfer to destination"
					"[event][id]" => "034340:03"
					"[rsa][message][id1]" => "034340:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034340:04
		# line in RSA:  snapvault: destination transfer from <fld1> to /vol/administration/administration : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1} to /vol/administration/administration : source contains no new data; suspending transfer to destination" }
				id => "message-034340:04"
				add_field => {
				"result" => "snapvault: destination transfer from esvfil:/vol/administration/administration to /vol/administration/administration : source contains no new data; suspending transfer to destination"
					"[event][id]" => "034340:04"
					"[rsa][message][id1]" => "034340:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034340:05
		# line in RSA:  snapvault: destination transfer from <fld1> to /vol/P/p_comm_qualite : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1} to /vol/P/p_comm_qualite : source contains no new data; suspending transfer to destination" }
				id => "message-034340:05"
				add_field => {
				"result" => "snapvault: destination transfer from esvfil:/vol/P/p_comm_qualite to /vol/P/p_comm_qualite : source contains no new data; suspending transfer to destination"
					"[event][id]" => "034340:05"
					"[rsa][message][id1]" => "034340:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034340:06
		# line in RSA:  snapvault: destination transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-034340:06"
				add_field => {
				"result" => "snapvault: destination transfer from esvfil:/vol/esvged/egedpr to /vol/esvged/egedpr : source contains no new data; suspending transfer to destination"
					"[event][id]" => "034340:06"
					"[rsa][message][id1]" => "034340:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034340
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-034340"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034340"
					"[rsa][message][id1]" => "034340"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_344:error" {
		# MESSAGE 034344:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-034344:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "034344:02"
					"[rsa][message][id1]" => "034344:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034344
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-034344"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034344"
					"[rsa][message][id1]" => "034344"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034344:01
		# line in RSA:  snapvault: destination transfer from <fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld30} to %{interface} : %{event_description}" }
				id => "message-034344:01"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034344:01"
					"[rsa][message][id1]" => "034344:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_345:error" {
		# MESSAGE 030452:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030452:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030452:02"
					"[rsa][message][id1]" => "030452:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030452
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030452"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030452"
					"[rsa][message][id1]" => "030452"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030452:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030452:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030452:01"
					"[rsa][message][id1]" => "030452:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_350:error" {
		# MESSAGE 030367:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030367:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030367:02"
					"[rsa][message][id1]" => "030367:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030367
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030367"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030367"
					"[rsa][message][id1]" => "030367"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030367:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030367:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030367:01"
					"[rsa][message][id1]" => "030367:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_358:error" {
		# MESSAGE 034358:02
		# line in RSA:  snapvault: <fld1> snapshot= <fld2> giving up on update of <fld3> replication destination could not set permissions on a file or directory 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: %{fld1} snapshot= %{fld2} giving up on update of %{fld3} replication destination could not set permissions on a file or directory" }
				id => "message-034358:02"
				add_field => {
				"result" => "snapvault: vol=esvnot snapshot= op=, giving up on update of /vol/esvnot/esvnot: replication destination could not set permissions on a file or directory"
					"[event][id]" => "034358:02"
					"[rsa][message][id1]" => "034358:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034358:03
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-034358:03"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "034358:03"
					"[rsa][message][id1]" => "034358:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034358
		# line in RSA:  snapvault: destination transfer from <fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld30} to %{interface} : %{event_description}" }
				id => "message-034358"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034358"
					"[rsa][message][id1]" => "034358"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034358:01
		# line in RSA:  snapvault: vol=<id> { snapshot=<username> op=<fld1> | path=<username> }, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*snapvault:[\s]+vol=(?<id>[^\s]*)[\s]+([\s]*snapshot=(?<username>[^\s]*)[\s]+op=(?<fld1>[^\s]*)[\s]+|[\s]*path=(?<username>[^\s]*)[\s]+),[\s]+(?<event_description>.*)$" }
				id => "message-034358:01"
				add_field => {
				"result" => "not a snapvaulted qtree"
					"[event][id]" => "034358:01"
					"[rsa][message][id1]" => "034358:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_361:error" {
		# MESSAGE 034361:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-034361:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "034361:02"
					"[rsa][message][id1]" => "034361:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034361
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-034361"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034361"
					"[rsa][message][id1]" => "034361"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034361:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-034361:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "034361:01"
					"[rsa][message][id1]" => "034361:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_363:error" {
		# MESSAGE 030465:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030465:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030465:02"
					"[rsa][message][id1]" => "030465:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030465
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030465"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030465"
					"[rsa][message][id1]" => "030465"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030465:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030465:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030465:01"
					"[rsa][message][id1]" => "030465:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_369:error" {
		# MESSAGE 030337:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030337:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030337:02"
					"[rsa][message][id1]" => "030337:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030337
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030337"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030337"
					"[rsa][message][id1]" => "030337"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030337:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030337:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030337:01"
					"[rsa][message][id1]" => "030337:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_370:error" {
		# MESSAGE 030352:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030352:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030352:02"
					"[rsa][message][id1]" => "030352:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030352
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030352"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030352"
					"[rsa][message][id1]" => "030352"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030352:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030352:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030352:01"
					"[rsa][message][id1]" => "030352:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_374:error" {
		# MESSAGE 030305:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030305:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030305:02"
					"[rsa][message][id1]" => "030305:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030305
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030305"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030305"
					"[rsa][message][id1]" => "030305"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030305:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030305:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030305:01"
					"[rsa][message][id1]" => "030305:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_375:error" {
		# MESSAGE 030306:01
		# line in RSA:  snapvault: vol=applications snapshot=sv_nightly <fld1> giving up on update of /vol/applications/referentiel: source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=applications snapshot=sv_nightly %{fld1} giving up on update of /vol/applications/referentiel: source contains no new data; suspending transfer to destination" }
				id => "message-030306:01"
				add_field => {
				"result" => "snapvault: vol=applications snapshot=sv_nightly op=, giving up on update of /vol/applications/referentiel: source contains no new data; suspending transfer to destination"
					"[event][id]" => "030306:01"
					"[rsa][message][id1]" => "030306:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030306
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030306"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030306"
					"[rsa][message][id1]" => "030306"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_379:error" {
		# MESSAGE 030310:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030310:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030310:02"
					"[rsa][message][id1]" => "030310:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030310
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030310"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030310"
					"[rsa][message][id1]" => "030310"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030310:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030310:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030310:01"
					"[rsa][message][id1]" => "030310:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1159
	# line in RSA: <fld1>: request with incompatible version
	else if [logstash][msgparser][id] == "msgParserId1159" {
		dissect {
			mapping => { "message" => "%{fld1}: request with incompatible version" }
			id => "msgParserId1159"
			add_field => {
				"result" => "request with incompatible version"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_393:error" {
		# MESSAGE 030320:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030320:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030320:02"
					"[rsa][message][id1]" => "030320:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030320
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030320"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030320"
					"[rsa][message][id1]" => "030320"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030320:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030320:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030320:01"
					"[rsa][message][id1]" => "030320:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_397:error" {
		# MESSAGE 030324:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030324:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030324:02"
					"[rsa][message][id1]" => "030324:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030324
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030324"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030324"
					"[rsa][message][id1]" => "030324"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030324:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030324:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030324:01"
					"[rsa][message][id1]" => "030324:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_400:error" {
		# MESSAGE 030330:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030330:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030330:02"
					"[rsa][message][id1]" => "030330:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030330
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030330"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030330"
					"[rsa][message][id1]" => "030330"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030330:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030330:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030330:01"
					"[rsa][message][id1]" => "030330:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_402:error" {
		# MESSAGE 030328:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : could not read from socket 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : could not read from socket" }
				id => "message-030328:02"
				add_field => {
				"result" => "snapvault: source transfer from /vol/esvnot/esvnot to prafil:/vol/esvnot/esvnot : could not read from socket"
					"[event][id]" => "030328:02"
					"[rsa][message][id1]" => "030328:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030328
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030328"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030328"
					"[rsa][message][id1]" => "030328"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030328:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030328:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030328:01"
					"[rsa][message][id1]" => "030328:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_403:error" {
		# MESSAGE 030334:02
		# line in RSA:  snapvault: vol=archnotes path=/vol/archnotes/archnotes, not a snapvaulted qtree, ignoring 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=archnotes path=/vol/archnotes/archnotes, not a snapvaulted qtree, ignoring" }
				id => "message-030334:02"
				add_field => {
				"result" => "snapvault: vol=archnotes path=/vol/archnotes/archnotes, not a snapvaulted qtree, ignoring"
					"[event][id]" => "030334:02"
					"[rsa][message][id1]" => "030334:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030334:03
		# line in RSA:  snapvault: vol=archnotes <fld1> not a snapvaulted qtree, ignoring 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=archnotes %{fld1} not a snapvaulted qtree, ignoring" }
				id => "message-030334:03"
				add_field => {
				"result" => "snapvault: vol=archnotes path=/vol/archnotes/esvged, not a snapvaulted qtree, ignoring"
					"[event][id]" => "030334:03"
					"[rsa][message][id1]" => "030334:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030334
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030334"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030334"
					"[rsa][message][id1]" => "030334"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030334:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030334:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030334:01"
					"[rsa][message][id1]" => "030334:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_488:error" {
		# MESSAGE 040478
		# line in RSA:  snapvault: source transfer from /vol/appliscitrix/appliscitrix to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/appliscitrix/appliscitrix to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040478"
				add_field => {
				"result" => "snapvault source transfer from /vol/appliscitrix/appliscitrix to prafil/vol/appliscitrix/appliscitrix  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040478"
					"[rsa][message][id1]" => "040478"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040478:01
		# line in RSA:  snapvault: source transfer from /vol/backupsql/backupsql to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/backupsql/backupsql to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040478:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/backupsql/backupsql to prafil/vol/backupsql/backupsql  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040478:01"
					"[rsa][message][id1]" => "040478:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040478:02
		# line in RSA:  snapvault: source transfer from /vol/P/p_autre to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_autre to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040478:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_autre to prafil/vol/P/p_autre  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040478:02"
					"[rsa][message][id1]" => "040478:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040478:03
		# line in RSA:  snapvault: source transfer from /vol/num/num_p to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/num/num_p to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040478:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/num/num_p to prafil/vol/num/num_p  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040478:03"
					"[rsa][message][id1]" => "040478:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040478:04
		# line in RSA:  snapvault: source transfer from /vol/P/p_quota to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_quota to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040478:04"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_quota to prafil/vol/P/p_quota  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040478:04"
					"[rsa][message][id1]" => "040478:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040478:05
		# line in RSA:  snapvault: source transfer from /vol/mega/- to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/mega/- to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040478:05"
				add_field => {
				"result" => "snapvault source transfer from /vol/mega/- to prafil/vol/mega/mega  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040478:05"
					"[rsa][message][id1]" => "040478:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040478:06
		# line in RSA:  snapvault: source transfer from /vol/referentiel/referentiel to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/referentiel/referentiel to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040478:06"
				add_field => {
				"result" => "snapvault source transfer from /vol/referentiel/referentiel to prafil/vol/applications/referentiel  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040478:06"
					"[rsa][message][id1]" => "040478:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040478:07
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040478:07"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvedt/esvedt to prafil/vol/esvedt/esvedt  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040478:07"
					"[rsa][message][id1]" => "040478:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_491:error" {
		# MESSAGE 040479
		# line in RSA:  snapvault: source transfer from /vol/P/p_act_sociale to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_act_sociale to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040479"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_act_sociale to prafil/vol/P/p_act_sociale  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040479"
					"[rsa][message][id1]" => "040479"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040479:01
		# line in RSA:  snapvault: source transfer from /vol/fluxes/fluxes to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/fluxes/fluxes to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040479:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/fluxes/fluxes to prafil/vol/fluxes/fluxes  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040479:01"
					"[rsa][message][id1]" => "040479:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040479:02
		# line in RSA:  snapvault: source transfer from /vol/toip/toip to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/toip/toip to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040479:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/toip/toip to prafil/vol/toip/toip  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040479:02"
					"[rsa][message][id1]" => "040479:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040479:03
		# line in RSA:  snapvault: source transfer from /vol/referentiel/referentiel to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/referentiel/referentiel to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040479:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/referentiel/referentiel to prafil/vol/applications/referentiel  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040479:03"
					"[rsa][message][id1]" => "040479:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040479:04
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040479:04"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvwps/esvwps to prafil/vol/esvwps/esvwps  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040479:04"
					"[rsa][message][id1]" => "040479:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_492:error" {
		# MESSAGE 040480
		# line in RSA:  snapvault: source transfer from /vol/referentiel/referentiel to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/referentiel/referentiel to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040480"
				add_field => {
				"result" => "snapvault source transfer from /vol/referentiel/referentiel to prafil/vol/applications/referentiel  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040480"
					"[rsa][message][id1]" => "040480"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040480:01
		# line in RSA:  snapvault: source transfer from /vol/P/p_act_sociale to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_act_sociale to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040480:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_act_sociale to prafil/vol/P/p_act_sociale  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040480:01"
					"[rsa][message][id1]" => "040480:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040480:02
		# line in RSA:  snapvault: source transfer from /vol/P/p_moa_cvg to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_moa_cvg to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040480:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_moa_cvg to prafil/vol/P/p_moa_cvg  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040480:02"
					"[rsa][message][id1]" => "040480:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040480:03
		# line in RSA:  snapvault: source transfer from /vol/sources/sources to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/sources/sources to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040480:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/sources/sources to prafil/vol/sources/sources  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040480:03"
					"[rsa][message][id1]" => "040480:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040480:04
		# line in RSA:  snapvault: source transfer from /vol/mega/- to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/mega/- to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040480:04"
				add_field => {
				"result" => "snapvault source transfer from /vol/mega/- to prafil/vol/mega/mega  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040480:04"
					"[rsa][message][id1]" => "040480:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040480:05
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040480:05"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvedt/esvedt to prafil/vol/esvedt/esvedt  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040480:05"
					"[rsa][message][id1]" => "040480:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_501:error" {
		# MESSAGE 040482
		# line in RSA:  snapvault: source transfer from /vol/P/p_quota to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_quota to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040482"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_quota to prafil/vol/P/p_quota  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040482"
					"[rsa][message][id1]" => "040482"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040482:01
		# line in RSA:  snapvault: source transfer from /vol/P/p_dir_generale to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_dir_generale to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040482:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_dir_generale to prafil/vol/P/p_dir_generale  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040482:01"
					"[rsa][message][id1]" => "040482:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040482:02
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040482:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/sas_pr/esvsas to prafil/vol/sas_pr/esvsas  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040482:02"
					"[rsa][message][id1]" => "040482:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_503:error" {
		# MESSAGE 040483
		# line in RSA:  snapvault: source transfer from /vol/P/p_drh to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_drh to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040483"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_drh to prafil/vol/P/p_drh  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040483"
					"[rsa][message][id1]" => "040483"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040483:01
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040483:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvapp/esvapp to prafil/vol/esvapp/esvapp  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040483:01"
					"[rsa][message][id1]" => "040483:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_509:error" {
		# MESSAGE 040484
		# line in RSA:  snapvault: source transfer from /vol/P/p_comm_qualite to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_comm_qualite to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040484"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_comm_qualite to prafil/vol/P/p_comm_qualite  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040484"
					"[rsa][message][id1]" => "040484"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040484:01
		# line in RSA:  snapvault: source transfer from /vol/w_client/w_client to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/w_client/w_client to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040484:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/w_client/w_client to prafil/vol/w_client/w_client  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040484:01"
					"[rsa][message][id1]" => "040484:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040484:02
		# line in RSA:  snapvault: source transfer from /vol/P/p_dir_generale to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_dir_generale to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040484:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_dir_generale to prafil/vol/P/p_dir_generale  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040484:02"
					"[rsa][message][id1]" => "040484:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040484:03
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040484:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/fluxes/TPG to prafil/vol/fluxes/TPG  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040484:03"
					"[rsa][message][id1]" => "040484:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_513:error" {
		# MESSAGE 040485
		# line in RSA:  snapvault: source transfer from /vol/applications/applications to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/applications/applications to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040485"
				add_field => {
				"result" => "snapvault source transfer from /vol/applications/applications to prafil/vol/applications/applications  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040485"
					"[rsa][message][id1]" => "040485"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040485:01
		# line in RSA:  snapvault: source transfer from /vol/P/p_dir_generale to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_dir_generale to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040485:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_dir_generale to prafil/vol/P/p_dir_generale  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040485:01"
					"[rsa][message][id1]" => "040485:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040485:02
		# line in RSA:  snapvault: source transfer from /vol/referentiel/referentiel to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/referentiel/referentiel to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040485:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/referentiel/referentiel to prafil/vol/applications/referentiel  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040485:02"
					"[rsa][message][id1]" => "040485:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040485:03
		# line in RSA:  snapvault: source transfer from /vol/P/p_dev_prev to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_dev_prev to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040485:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_dev_prev to prafil/vol/P/p_dev_prev  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040485:03"
					"[rsa][message][id1]" => "040485:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040485:04
		# line in RSA:  snapvault: source transfer from /vol/mega/- to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/mega/- to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040485:04"
				add_field => {
				"result" => "snapvault source transfer from /vol/mega/- to prafil/vol/mega/mega  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040485:04"
					"[rsa][message][id1]" => "040485:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040485:05
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040485:05"
				add_field => {
				"result" => "snapvault source transfer from /vol/fluxes/TPG to prafil/vol/fluxes/TPG  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040485:05"
					"[rsa][message][id1]" => "040485:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_514:error" {
		# MESSAGE 040486
		# line in RSA:  snapvault: source transfer from /vol/P/p_moa_cvg to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_moa_cvg to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040486"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_moa_cvg to prafil/vol/P/p_moa_cvg  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040486"
					"[rsa][message][id1]" => "040486"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040486:01
		# line in RSA:  snapvault: source transfer from /vol/P/p_dsio to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_dsio to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040486:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_dsio to prafil/vol/P/p_dsio  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040486:01"
					"[rsa][message][id1]" => "040486:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040486:02
		# line in RSA:  snapvault: source transfer from /vol/sources/sources to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/sources/sources to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040486:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/sources/sources to prafil/vol/sources/sources  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040486:02"
					"[rsa][message][id1]" => "040486:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040486:03
		# line in RSA:  snapvault: source transfer from /vol/P/p_bayard to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_bayard to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040486:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_bayard to prafil/vol/P/p_bayard  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040486:03"
					"[rsa][message][id1]" => "040486:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040486:04
		# line in RSA:  snapvault: source transfer from /vol/P/p_dir_generale to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_dir_generale to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040486:04"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_dir_generale to prafil/vol/P/p_dir_generale  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040486:04"
					"[rsa][message][id1]" => "040486:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040486:05
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040486:05"
				add_field => {
				"result" => "snapvault source transfer from /vol/E_SAS_ET/esvsas to prafil/vol/E_SAS_ET/esvsas  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040486:05"
					"[rsa][message][id1]" => "040486:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1188
	# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
	else if [logstash][msgparser][id] == "msgParserId1188" {
		dissect {
			mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
			id => "msgParserId1188"
			add_field => {
				"result" => "snapvault source transfer from /vol/esvimp/esvimp to prafil/vol/esvimp/esvimp  source contains no new data; suspending transfer to destination"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_524:error" {
		# MESSAGE 040488
		# line in RSA:  snapvault: source transfer from /vol/sources/sources to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/sources/sources to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040488"
				add_field => {
				"result" => "snapvault source transfer from /vol/sources/sources to prafil/vol/sources/sources  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040488"
					"[rsa][message][id1]" => "040488"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040488:01
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040488:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvedt/esvedt to prafil/vol/esvedt/esvedt  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040488:01"
					"[rsa][message][id1]" => "040488:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_529:error" {
		# MESSAGE 040489
		# line in RSA:  snapvault: source transfer from /vol/P/p_dsio to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_dsio to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040489"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_dsio to prafil/vol/P/p_dsio  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040489"
					"[rsa][message][id1]" => "040489"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040489:01
		# line in RSA:  snapvault: source transfer from /vol/sources/sources to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/sources/sources to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040489:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/sources/sources to prafil/vol/sources/sources  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040489:01"
					"[rsa][message][id1]" => "040489:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040489:02
		# line in RSA:  snapvault: source transfer from /vol/mega/- to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/mega/- to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040489:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/mega/- to prafil/vol/mega/mega  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040489:02"
					"[rsa][message][id1]" => "040489:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040489:03
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040489:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/sas_pr/esvsas to prafil/vol/sas_pr/esvsas  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040489:03"
					"[rsa][message][id1]" => "040489:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_534:error" {
		# MESSAGE 040491
		# line in RSA:  snapvault: source transfer from /vol/administration/administration to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/administration/administration to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040491"
				add_field => {
				"result" => "snapvault source transfer from /vol/administration/administration to prafil/vol/administration/administration  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040491"
					"[rsa][message][id1]" => "040491"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040491:01
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040491:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvapp/esvapp to prafil/vol/esvapp/esvapp  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040491:01"
					"[rsa][message][id1]" => "040491:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_556:error" {
		# MESSAGE 040494
		# line in RSA:  snapvault: source transfer from /vol/preprod/num_pp to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/preprod/num_pp to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040494"
				add_field => {
				"result" => "snapvault source transfer from /vol/preprod/num_pp to prafil/vol/preprod/num_pp  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040494"
					"[rsa][message][id1]" => "040494"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040494:01
		# line in RSA:  snapvault: source transfer from /vol/administration/administration to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/administration/administration to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040494:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/administration/administration to prafil/vol/administration/administration  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040494:01"
					"[rsa][message][id1]" => "040494:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040494:02
		# line in RSA:  snapvault: source transfer from /vol/num/num_p to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/num/num_p to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040494:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/num/num_p to prafil/vol/num/num_p  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040494:02"
					"[rsa][message][id1]" => "040494:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040494:03
		# line in RSA:  snapvault: source transfer from /vol/P/p_moa_cvg to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_moa_cvg to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040494:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_moa_cvg to prafil/vol/P/p_moa_cvg  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040494:03"
					"[rsa][message][id1]" => "040494:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040494:04
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040494:04"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvged/esvged to prafil/vol/esvged/esvged  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040494:04"
					"[rsa][message][id1]" => "040494:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_558:error" {
		# MESSAGE 040495
		# line in RSA:  snapvault: source transfer from /vol/administration/administration to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/administration/administration to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040495"
				add_field => {
				"result" => "snapvault source transfer from /vol/administration/administration to prafil/vol/administration/administration  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040495"
					"[rsa][message][id1]" => "040495"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040495:01
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040495:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvedt/esvedt to prafil/vol/esvedt/esvedt  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040495:01"
					"[rsa][message][id1]" => "040495:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_560:error" {
		# MESSAGE 040496
		# line in RSA:  snapvault: source transfer from /vol/w_client/w_client to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/w_client/w_client to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040496"
				add_field => {
				"result" => "snapvault source transfer from /vol/w_client/w_client to prafil/vol/w_client/w_client  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040496"
					"[rsa][message][id1]" => "040496"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040496:01
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040496:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvimp/esvimp to prafil/vol/esvimp/esvimp  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040496:01"
					"[rsa][message][id1]" => "040496:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_564:error" {
		# MESSAGE 040498
		# line in RSA:  snapvault: source transfer from /vol/preprod/num_pp to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/preprod/num_pp to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040498"
				add_field => {
				"result" => "snapvault source transfer from /vol/preprod/num_pp to prafil/vol/preprod/num_pp  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040498"
					"[rsa][message][id1]" => "040498"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040498:01
		# line in RSA:  snapvault: source transfer from /vol/P/p_dsio to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_dsio to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040498:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_dsio to prafil/vol/P/p_dsio  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040498:01"
					"[rsa][message][id1]" => "040498:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040498:02
		# line in RSA:  snapvault: source transfer from /vol/P/p_comm_qualite to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_comm_qualite to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040498:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_comm_qualite to prafil/vol/P/p_comm_qualite  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040498:02"
					"[rsa][message][id1]" => "040498:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040498:03
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040498:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvged/egedpr to prafil/vol/esvged/egedpr  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040498:03"
					"[rsa][message][id1]" => "040498:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_576:error" {
		# MESSAGE 040500
		# line in RSA:  snapvault: source transfer from /vol/applications/applications to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/applications/applications to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040500"
				add_field => {
				"result" => "snapvault source transfer from /vol/applications/applications to prafil/vol/applications/applications  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040500"
					"[rsa][message][id1]" => "040500"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040500:01
		# line in RSA:  snapvault: source transfer from /vol/P/p_quota to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_quota to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040500:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_quota to prafil/vol/P/p_quota  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040500:01"
					"[rsa][message][id1]" => "040500:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040500:02
		# line in RSA:  snapvault: source transfer from /vol/referentiel/referentiel to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/referentiel/referentiel to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040500:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/referentiel/referentiel to prafil/vol/applications/referentiel  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040500:02"
					"[rsa][message][id1]" => "040500:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_580:error" {
		# MESSAGE 040501
		# line in RSA:  snapvault: source transfer from /vol/toip/toip to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/toip/toip to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040501"
				add_field => {
				"result" => "snapvault source transfer from /vol/toip/toip to prafil/vol/toip/toip  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040501"
					"[rsa][message][id1]" => "040501"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040501:01
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040501:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/esvwps/esvwps to prafil/vol/esvwps/esvwps  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040501:01"
					"[rsa][message][id1]" => "040501:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_581:error" {
		# MESSAGE 040502
		# line in RSA:  snapvault: source transfer from /vol/backupsql/backupsql to <fld1> : process was aborted 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/backupsql/backupsql to %{fld1} : process was aborted" }
				id => "message-040502"
				add_field => {
				"result" => "snapvault source transfer from /vol/backupsql/backupsql to prafil/vol/backupsql/backupsql  process was aborted"
					"[event][id]" => "040502"
					"[rsa][message][id1]" => "040502"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040502:01
		# line in RSA:  snapvault: source transfer from /vol/archivage/archivage to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/archivage/archivage to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040502:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/archivage/archivage to prafil/vol/archivage/archivage  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040502:01"
					"[rsa][message][id1]" => "040502:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040502:02
		# line in RSA:  snapvault: source transfer from /vol/num/num_p to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/num/num_p to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040502:02"
				add_field => {
				"result" => "snapvault source transfer from /vol/num/num_p to prafil/vol/num/num_p  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040502:02"
					"[rsa][message][id1]" => "040502:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040502:03
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040502:03"
				add_field => {
				"result" => "snapvault source transfer from /vol/E_SAS_ET/esvsas to prafil/vol/E_SAS_ET/esvsas  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040502:03"
					"[rsa][message][id1]" => "040502:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_592:error" {
		# MESSAGE 040504
		# line in RSA:  snapvault: source transfer from /vol/P/p_moa_cvg to <fld1> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/P/p_moa_cvg to %{fld1} : source contains no new data; suspending transfer to destination" }
				id => "message-040504"
				add_field => {
				"result" => "snapvault source transfer from /vol/P/p_moa_cvg to prafil/vol/P/p_moa_cvg  source contains no new data; suspending transfer to destination"
					"[event][id]" => "040504"
					"[rsa][message][id1]" => "040504"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040504:01
		# line in RSA:  snapvault: source transfer from <fld1> to <fld2> : source contains no new data; suspending transfer to destination 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from %{fld1} to %{fld2} : source contains no new data; suspending transfer to destination" }
				id => "message-040504:01"
				add_field => {
				"result" => "snapvault source transfer from '/vol/archnotes/esvnot to prafil/vol/archnotes/esvnot' or '/vol/esvnot/esvnot to prafil/vol/esvnot/esvnot' source contains no new data; suspending transfer to destination"
					"[event][id]" => "040504:01"
					"[rsa][message][id1]" => "040504:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1196
	# line in RSA:  <id>: <info> 
	else if [logstash][msgparser][id] == "msgParserId1196" {
		dissect {
			mapping => { "message" => "%{id}: %{info}" }
			id => "msgParserId1196"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_314:error" {
		# MESSAGE 030344
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030344"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030344"
					"[rsa][message][id1]" => "030344"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030344:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030344:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030344:01"
					"[rsa][message][id1]" => "030344:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_316:error" {
		# MESSAGE 030356
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030356"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030356"
					"[rsa][message][id1]" => "030356"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030356:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030356:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030356:01"
					"[rsa][message][id1]" => "030356:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1198
	# line in RSA:  snapvault: vol=<id> { snapshot=<username> op=<fld1> | path=<username> }, <event_description>
	else if [logstash][msgparser][id] == "msgParserId1198" {
		grok {
			match => { "message" => "^[\s]*snapvault:[\s]+vol=(?<id>[^\s]*)[\s]+([\s]*snapshot=(?<username>[^\s]*)[\s]+op=(?<fld1>[^\s]*)[\s]+|[\s]*path=(?<username>[^\s]*)[\s]+),[\s]+(?<event_description>.*)$" }
			id => "msgParserId1198"
			add_field => {
				"result" => "destination snapshot does not exist"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1197
	# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId1197" {
		dissect {
			mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
			id => "msgParserId1197"
			add_field => {
				"result" => "destination snapshot does not exist"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_323:error" {
		# MESSAGE 030342
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030342"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030342"
					"[rsa][message][id1]" => "030342"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030342:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030342:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030342:01"
					"[rsa][message][id1]" => "030342:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_324:error" {
		# MESSAGE 030358
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030358"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030358"
					"[rsa][message][id1]" => "030358"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030358:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030358:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030358:01"
					"[rsa][message][id1]" => "030358:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_328:error" {
		# MESSAGE 030346
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030346"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030346"
					"[rsa][message][id1]" => "030346"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030346:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030346:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030346:01"
					"[rsa][message][id1]" => "030346:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_329:error" {
		# MESSAGE 030332
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030332"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030332"
					"[rsa][message][id1]" => "030332"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030332:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030332:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030332:01"
					"[rsa][message][id1]" => "030332:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_331:error" {
		# MESSAGE 030340
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030340"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030340"
					"[rsa][message][id1]" => "030340"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030340:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030340:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030340:01"
					"[rsa][message][id1]" => "030340:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_332:error" {
		# MESSAGE 030331
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030331"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030331"
					"[rsa][message][id1]" => "030331"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030331:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030331:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030331:01"
					"[rsa][message][id1]" => "030331:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_333:error" {
		# MESSAGE 030360
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030360"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030360"
					"[rsa][message][id1]" => "030360"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030360:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030360:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030360:01"
					"[rsa][message][id1]" => "030360:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_334:error" {
		# MESSAGE 030338
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030338"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030338"
					"[rsa][message][id1]" => "030338"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030338:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030338:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030338:01"
					"[rsa][message][id1]" => "030338:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_335:error" {
		# MESSAGE 030450
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030450"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030450"
					"[rsa][message][id1]" => "030450"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030450:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030450:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030450:01"
					"[rsa][message][id1]" => "030450:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_336:error" {
		# MESSAGE 030336
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030336"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030336"
					"[rsa][message][id1]" => "030336"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030336:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030336:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030336:01"
					"[rsa][message][id1]" => "030336:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_337:error" {
		# MESSAGE 030451
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030451"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030451"
					"[rsa][message][id1]" => "030451"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030451:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030451:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030451:01"
					"[rsa][message][id1]" => "030451:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_343:error" {
		# MESSAGE 030363
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030363"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030363"
					"[rsa][message][id1]" => "030363"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034343
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-034343"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034343"
					"[rsa][message][id1]" => "034343"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_346:error" {
		# MESSAGE 030364
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030364"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030364"
					"[rsa][message][id1]" => "030364"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030364:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030364:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030364:01"
					"[rsa][message][id1]" => "030364:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_347:error" {
		# MESSAGE 030365
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030365"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030365"
					"[rsa][message][id1]" => "030365"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030365:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030365:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030365:01"
					"[rsa][message][id1]" => "030365:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_349:error" {
		# MESSAGE 030366
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030366"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030366"
					"[rsa][message][id1]" => "030366"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030366:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030366:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030366:01"
					"[rsa][message][id1]" => "030366:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_351:error" {
		# MESSAGE 030350
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030350"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030350"
					"[rsa][message][id1]" => "030350"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030350:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030350:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030350:01"
					"[rsa][message][id1]" => "030350:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_352:error" {
		# MESSAGE 030454
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030454"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030454"
					"[rsa][message][id1]" => "030454"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030454:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030454:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030454:01"
					"[rsa][message][id1]" => "030454:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_353:error" {
		# MESSAGE 030348
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030348"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030348"
					"[rsa][message][id1]" => "030348"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034353
		# line in RSA:  snapvault: destination transfer from <fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld30} to %{interface} : %{event_description}" }
				id => "message-034353"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034353"
					"[rsa][message][id1]" => "034353"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034353:01
		# line in RSA:  snapvault: vol=<id> { snapshot=<username> op=<fld1> | path=<username> }, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*snapvault:[\s]+vol=(?<id>[^\s]*)[\s]+([\s]*snapshot=(?<username>[^\s]*)[\s]+op=(?<fld1>[^\s]*)[\s]+|[\s]*path=(?<username>[^\s]*)[\s]+),[\s]+(?<event_description>.*)$" }
				id => "message-034353:01"
				add_field => {
				"result" => "not a snapvaulted qtree"
					"[event][id]" => "034353:01"
					"[rsa][message][id1]" => "034353:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_354:error" {
		# MESSAGE 030455
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030455"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030455"
					"[rsa][message][id1]" => "030455"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030455:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030455:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030455:01"
					"[rsa][message][id1]" => "030455:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_356:error" {
		# MESSAGE 030368
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030368"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030368"
					"[rsa][message][id1]" => "030368"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030368:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030368:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030368:01"
					"[rsa][message][id1]" => "030368:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_357:error" {
		# MESSAGE 030349
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030349"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030349"
					"[rsa][message][id1]" => "030349"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030349:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030349:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030349:01"
					"[rsa][message][id1]" => "030349:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_359:error" {
		# MESSAGE 030369
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030369"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030369"
					"[rsa][message][id1]" => "030369"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030369:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030369:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030369:01"
					"[rsa][message][id1]" => "030369:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_360:error" {
		# MESSAGE 030339
		# line in RSA:  snapvault: vol=<id> { snapshot=<username> op=<fld1> | path=<username> }, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*snapvault:[\s]+vol=(?<id>[^\s]*)[\s]+([\s]*snapshot=(?<username>[^\s]*)[\s]+op=(?<fld1>[^\s]*)[\s]+|[\s]*path=(?<username>[^\s]*)[\s]+),[\s]+(?<event_description>.*)$" }
				id => "message-030339"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030339"
					"[rsa][message][id1]" => "030339"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030339:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030339:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030339:01"
					"[rsa][message][id1]" => "030339:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_362:error" {
		# MESSAGE 030343
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030343"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030343"
					"[rsa][message][id1]" => "030343"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030343:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030343:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030343:01"
					"[rsa][message][id1]" => "030343:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_364:error" {
		# MESSAGE 030351
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030351"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030351"
					"[rsa][message][id1]" => "030351"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030351:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030351:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030351:01"
					"[rsa][message][id1]" => "030351:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_365:error" {
		# MESSAGE 030299
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030299"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030299"
					"[rsa][message][id1]" => "030299"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030299:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030299:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030299:01"
					"[rsa][message][id1]" => "030299:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_366:error" {
		# MESSAGE 030300
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030300"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030300"
					"[rsa][message][id1]" => "030300"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030300:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030300:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030300:01"
					"[rsa][message][id1]" => "030300:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_367:error" {
		# MESSAGE 030301
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030301"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030301"
					"[rsa][message][id1]" => "030301"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034367
		# line in RSA:  snapvault: vol=<id> {snapshot=<username> op=<fld1> |path=<username> }, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*snapvault:[\s]+vol=(?<id>[^\s]*)[\s]+(snapshot=(?<username>[^\s]*)[\s]+op=(?<fld1>[^\s]*)[\s]+|path=(?<username>[^\s]*)[\s]+),[\s]+(?<event_description>.*)$" }
				id => "message-034367"
				add_field => {
				"result" => "not a snapvaulted qtree"
					"[event][id]" => "034367"
					"[rsa][message][id1]" => "034367"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_368:error" {
		# MESSAGE 030302
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030302"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030302"
					"[rsa][message][id1]" => "030302"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030302:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030302:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030302:01"
					"[rsa][message][id1]" => "030302:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_372:error" {
		# MESSAGE 030303
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030303"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030303"
					"[rsa][message][id1]" => "030303"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030303:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030303:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030303:01"
					"[rsa][message][id1]" => "030303:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_373:error" {
		# MESSAGE 030304
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030304"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030304"
					"[rsa][message][id1]" => "030304"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030304:01
		# line in RSA:  snapvault: vol=<id> {snapshot=<username> op=<fld1> | path=<username>}, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*snapvault:[\s]+vol=(?<id>[^\s]*)[\s]+(snapshot=(?<username>[^\s]*)[\s]+op=(?<fld1>[^\s]*)[\s]+|[\s]*path=(?<username>[^,]*)),[\s]+(?<event_description>.*)$" }
				id => "message-030304:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030304:01"
					"[rsa][message][id1]" => "030304:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_376:error" {
		# MESSAGE 030307
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030307"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030307"
					"[rsa][message][id1]" => "030307"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030307:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030307:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030307:01"
					"[rsa][message][id1]" => "030307:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_377:error" {
		# MESSAGE 030308
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030308"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030308"
					"[rsa][message][id1]" => "030308"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030308:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030308:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030308:01"
					"[rsa][message][id1]" => "030308:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_378:error" {
		# MESSAGE 030309
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030309"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030309"
					"[rsa][message][id1]" => "030309"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030309:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030309:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030309:01"
					"[rsa][message][id1]" => "030309:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_380:error" {
		# MESSAGE 030311
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030311"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030311"
					"[rsa][message][id1]" => "030311"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030311:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030311:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030311:01"
					"[rsa][message][id1]" => "030311:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_381:error" {
		# MESSAGE 030312
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030312"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030312"
					"[rsa][message][id1]" => "030312"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030312:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030312:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030312:01"
					"[rsa][message][id1]" => "030312:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_382:error" {
		# MESSAGE 030370
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030370"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030370"
					"[rsa][message][id1]" => "030370"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030370:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030370:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030370:01"
					"[rsa][message][id1]" => "030370:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_383:error" {
		# MESSAGE 030313
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030313"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030313"
					"[rsa][message][id1]" => "030313"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030313:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030313:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030313:01"
					"[rsa][message][id1]" => "030313:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_384:error" {
		# MESSAGE 030314
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030314"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030314"
					"[rsa][message][id1]" => "030314"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030314:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030314:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030314:01"
					"[rsa][message][id1]" => "030314:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_385:error" {
		# MESSAGE 030315
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030315"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030315"
					"[rsa][message][id1]" => "030315"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030315:01
		# line in RSA:  snapvault: vol=<id> {snapshot=<username> op=<fld1> | path=<username>}, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*snapvault:[\s]+vol=(?<id>[^\s]*)[\s]+(snapshot=(?<username>[^\s]*)[\s]+op=(?<fld1>[^\s]*)[\s]+|[\s]*path=(?<username>[^,]*)),[\s]+(?<event_description>.*)$" }
				id => "message-030315:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030315:01"
					"[rsa][message][id1]" => "030315:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_386:error" {
		# MESSAGE 030316
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030316"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030316"
					"[rsa][message][id1]" => "030316"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030316:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030316:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030316:01"
					"[rsa][message][id1]" => "030316:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_387:error" {
		# MESSAGE 030466
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030466"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030466"
					"[rsa][message][id1]" => "030466"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030466:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030466:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030466:01"
					"[rsa][message][id1]" => "030466:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_388:error" {
		# MESSAGE 030317
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030317"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030317"
					"[rsa][message][id1]" => "030317"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030317:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030317:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030317:01"
					"[rsa][message][id1]" => "030317:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_389:error" {
		# MESSAGE 030353
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030353"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030353"
					"[rsa][message][id1]" => "030353"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030353:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030353:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030353:01"
					"[rsa][message][id1]" => "030353:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_390:error" {
		# MESSAGE 030329
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030329"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030329"
					"[rsa][message][id1]" => "030329"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030329:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030329:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030329:01"
					"[rsa][message][id1]" => "030329:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_391:error" {
		# MESSAGE 030318
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030318"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030318"
					"[rsa][message][id1]" => "030318"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030318:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030318:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030318:01"
					"[rsa][message][id1]" => "030318:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_392:error" {
		# MESSAGE 030319
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030319"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030319"
					"[rsa][message][id1]" => "030319"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030319:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030319:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030319:01"
					"[rsa][message][id1]" => "030319:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_394:error" {
		# MESSAGE 030321
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030321"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030321"
					"[rsa][message][id1]" => "030321"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030321:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030321:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030321:01"
					"[rsa][message][id1]" => "030321:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_395:error" {
		# MESSAGE 030322
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030322"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030322"
					"[rsa][message][id1]" => "030322"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034395
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-034395"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034395"
					"[rsa][message][id1]" => "034395"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_396:error" {
		# MESSAGE 030323
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030323"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030323"
					"[rsa][message][id1]" => "030323"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030323:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030323:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030323:01"
					"[rsa][message][id1]" => "030323:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_398:error" {
		# MESSAGE 030325
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030325"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030325"
					"[rsa][message][id1]" => "030325"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030325:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030325:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030325:01"
					"[rsa][message][id1]" => "030325:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_399:error" {
		# MESSAGE 030326
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030326"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030326"
					"[rsa][message][id1]" => "030326"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030326:03
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-030326:03"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "030326:03"
					"[rsa][message][id1]" => "030326:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_339:error" {
		# MESSAGE 030326:01
		# line in RSA:  snapvault: destination transfer from <fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld30} to %{interface} : %{event_description}" }
				id => "message-030326:01"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "030326:01"
					"[rsa][message][id1]" => "030326:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030326:02
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-030326:02"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "030326:02"
					"[rsa][message][id1]" => "030326:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_341:error" {
		# MESSAGE 034341
		# line in RSA:  snapvault: destination transfer from <fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld30} to %{interface} : %{event_description}" }
				id => "message-034341"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034341"
					"[rsa][message][id1]" => "034341"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034341:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-034341:01"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034341:01"
					"[rsa][message][id1]" => "034341:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1200
	# line in RSA:  snapvault: destination transfer from <fld30> to <interface> : <event_description>
	else if [logstash][msgparser][id] == "msgParserId1200" {
		dissect {
			mapping => { "message" => "snapvault: destination transfer from %{fld30} to %{interface} : %{event_description}" }
			id => "msgParserId1200"
			add_field => {
				"result" => "source contains no new data"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_371:error" {
		# MESSAGE 034371
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1> giving up on update of <fld2> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1} giving up on update of %{fld2} %{event_description}" }
				id => "message-034371"
				add_field => {
				"result" => "source contains no new data"
					"[event][id]" => "034371"
					"[rsa][message][id1]" => "034371"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 034371:01
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-034371:01"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "034371:01"
					"[rsa][message][id1]" => "034371:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_401:error" {
		# MESSAGE 030327
		# line in RSA:  snapvault: destination transfer from <username>:<fld30> to <interface> : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{username}:%{fld30} to %{interface} : %{event_description}" }
				id => "message-030327"
				add_field => {
				"result" => "destination transfer failed"
					"[event][id]" => "030327"
					"[rsa][message][id1]" => "030327"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030327:01
		# line in RSA:  snapvault: vol=<id> snapshot=<username> op=<fld1>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: vol=%{id} snapshot=%{username} op=%{fld1}, %{event_description}" }
				id => "message-030327:01"
				add_field => {
				"result" => "destination snapshot does not exist"
					"[event][id]" => "030327:01"
					"[rsa][message][id1]" => "030327:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1203
	# line in RSA:  snapvault: source transfer from <fld30> to <interface> : <event_description>
	else if [logstash][msgparser][id] == "msgParserId1203" {
		dissect {
			mapping => { "message" => "snapvault: source transfer from %{fld30} to %{interface} : %{event_description}" }
			id => "msgParserId1203"
			add_field => {
				"result" => "source transfer failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1144
	# line in RSA:  snapvault: source transfer from <fld30> to <username>:<interface> : <event_description>
	else if [logstash][msgparser][id] == "msgParserId1144" {
		dissect {
			mapping => { "message" => "snapvault: source transfer from %{fld30} to %{username}:%{interface} : %{event_description}" }
			id => "msgParserId1144"
			add_field => {
				"result" => "source transfer failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1204
	# line in RSA:  snapmirror: Network communication error
	else if [logstash][msgparser][id] == "msgParserId1204" {
		dissect {
			mapping => { "message" => "snapmirror: Network communication error" }
			id => "msgParserId1204"
			add_field => {
				"result" => "Network communication error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId419
	# line in RSA:  <service>: <action> from if = <interface>, src ip = <daddr>, dst ip = <saddr>  Check options <rule>.
	else if [logstash][msgparser][id] == "msgParserId419" {
		dissect {
			mapping => { "message" => "%{service}: %{action} from if = %{interface}, src ip = %{daddr}, dst ip = %{saddr}  Check options %{rule}." }
			id => "msgParserId419"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1205
	# line in RSA:  snapvault: <fld1>, giving up on update of <id>: destination requested snapshot that does not exist on the source
	else if [logstash][msgparser][id] == "msgParserId1205" {
		dissect {
			mapping => { "message" => "snapvault: %{fld1}, giving up on update of %{id}: destination requested snapshot that does not exist on the source" }
			id => "msgParserId1205"
			add_field => {
				"result" => "snapshot does not exist on source"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1206
	# line in RSA:  snapvault: destination transfer from <fld1>  to <fld2> : destination requested snapshot that does not exist on the source
	else if [logstash][msgparser][id] == "msgParserId1206" {
		dissect {
			mapping => { "message" => "snapvault: destination transfer from %{fld1}  to %{fld2} : destination requested snapshot that does not exist on the source" }
			id => "msgParserId1206"
			add_field => {
				"result" => "snapshot does not exist on source"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_770:error" {
		# MESSAGE 030173
		# line in RSA:  snapvault: <fld1>, giving up on update of <id>: destination requested snapshot that does not exist on the source
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: %{fld1}, giving up on update of %{id}: destination requested snapshot that does not exist on the source" }
				id => "message-030173"
				add_field => {
				"result" => "snapshot does not exist on source"
					"[event][id]" => "030173"
					"[rsa][message][id1]" => "030173"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 030173:01
		# line in RSA:  snapvault: destination transfer from <fld1>  to <fld2> : destination requested snapshot that does not exist on the source
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: destination transfer from %{fld1}  to %{fld2} : destination requested snapshot that does not exist on the source" }
				id => "message-030173:01"
				add_field => {
				"result" => "snapshot does not exist on source"
					"[event][id]" => "030173:01"
					"[rsa][message][id1]" => "030173:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1207
	# line in RSA:  snapvault: source transfer from /vol/ged_pr/levallois to <fld1> : base snapshot for transfer no longer exists on the source 
	else if [logstash][msgparser][id] == "msgParserId1207" {
		dissect {
			mapping => { "message" => "snapvault: source transfer from /vol/ged_pr/levallois to %{fld1} : base snapshot for transfer no longer exists on the source" }
			id => "msgParserId1207"
			add_field => {
				"result" => "snapvault source transfer from /vol/ged_pr/levallois to prafil/vol/ged_pr/levallois  base snapshot for transfer no longer exists on the source"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1208
	# line in RSA:  snapvault: source transfer from /vol/P/p_sansquota to <fld1> : process was aborted 
	else if [logstash][msgparser][id] == "msgParserId1208" {
		dissect {
			mapping => { "message" => "snapvault: source transfer from /vol/P/p_sansquota to %{fld1} : process was aborted" }
			id => "msgParserId1208"
			add_field => {
				"result" => "snapvault source transfer from /vol/P/p_sansquota to prafil/vol/P_cou/p_sansquota  process was aborted"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_95:error" {
		# MESSAGE 040508
		# line in RSA:  snapvault: source transfer from /vol/ged_pr/levallois to <fld1> : base snapshot for transfer no longer exists on the source 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/ged_pr/levallois to %{fld1} : base snapshot for transfer no longer exists on the source" }
				id => "message-040508"
				add_field => {
				"result" => "snapvault source transfer from /vol/ged_pr/levallois to prafil/vol/ged_pr/levallois  base snapshot for transfer no longer exists on the source"
					"[event][id]" => "040508"
					"[rsa][message][id1]" => "040508"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040509:01
		# line in RSA:  snapvault: source transfer from /vol/svp/svp to <fld1> : source qtree does not exist 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/svp/svp to %{fld1} : source qtree does not exist" }
				id => "message-040509:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/svp/svp to prafil/vol/svp_cou/svp_cou  source qtree does not exist"
					"[event][id]" => "040509:01"
					"[rsa][message][id1]" => "040509:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "worker_thread_97:error" {
		# MESSAGE 040510
		# line in RSA:  snapvault: source transfer from /vol/ged_pr/levallois to <fld1> : base snapshot for transfer no longer exists on the source 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/ged_pr/levallois to %{fld1} : base snapshot for transfer no longer exists on the source" }
				id => "message-040510"
				add_field => {
				"result" => "snapvault source transfer from /vol/ged_pr/levallois to prafil/vol/ged_pr/levallois  base snapshot for transfer no longer exists on the source"
					"[event][id]" => "040510"
					"[rsa][message][id1]" => "040510"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 040510:01
		# line in RSA:  snapvault: source transfer from /vol/ged_pr/paradis to <fld1> : update aborted because of network error 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "snapvault: source transfer from /vol/ged_pr/paradis to %{fld1} : update aborted because of network error" }
				id => "message-040510:01"
				add_field => {
				"result" => "snapvault source transfer from /vol/ged_pr/paradis to prafil/vol/ged_pr/paradis  update aborted because of network error"
					"[event][id]" => "040510:01"
					"[rsa][message][id1]" => "040510:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1211
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Number of audit { messages | records } discarded: <dclass_counter1>"
	else if [logstash][msgparser][id] == "msgParserId1211" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Number[\s]+of[\s]+audit[\s]+([\s]*messages[\s]+|[\s]*records[\s]+)[\s]+discarded:[\s]+(?<dclass_counter1>[^\"]*)\"$" }
			id => "msgParserId1211"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1212
	# line in RSA:  <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <logon_id> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId1212" {
		grok {
			match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Primary[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Primary[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Primary[\s]+Logon[\s]+ID:[\s]+(?<logon_id>[^\s]*)[\s]+Client[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Client[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Client[\s]+Logon[\s]+ID:[\s]+(?<sessionid>.*)$" }
			id => "msgParserId1212"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1213
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> User Name: <username> Domain: <domain> Logon ID: <logon_id> Logon Type: <data_type> Logon Process: <process> Authentication Package: <rulename> Workstation Name: <hostname> <info>
	else if [logstash][msgparser][id] == "msgParserId1213" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<logon_id>[^\s]*)[\s]+Logon[\s]+Type:[\s]+(?<data_type>[^\s]*)[\s]+Logon[\s]+Process:[\s]+(?<process>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<rulename>[^\s]*)[\s]+Workstation[\s]+Name:[\s]+(?<hostname>[^\s]*)[\s]+(?<info>.*)$" }
			id => "msgParserId1213"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1214
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Reason: <result> User Name: <username> Domain: <domain> Logon Type: <data_type> Logon Process: <process> Authentication Package: <rulename> Workstation Name: <hostname> <info>
	else if [logstash][msgparser][id] == "msgParserId1214" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Reason:[\s]+(?<result>[^\s]*)[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+Type:[\s]+(?<data_type>[^\s]*)[\s]+Logon[\s]+Process:[\s]+(?<process>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<rulename>[^\s]*)[\s]+Workstation[\s]+Name:[\s]+(?<hostname>[^\s]*)[\s]+(?<info>.*)$" }
			id => "msgParserId1214"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1215
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description><space> Reason: <result> User Name: <username> Domain: <domain> Logon Type: <data_type> Logon Process: <process> Authentication Package: <rulename> Workstation Name: <hostname> <info>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1216
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description><space>Reason: <result> User Name: <username> Domain: <domain> Logon Type: <data_type> Logon Process: <process> Authentication Package: <rulename> Workstation Name: <hostname> <info>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1217
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description><space>Reason: <result> User Name: <username> Domain: <domain> Logon Type: <data_type> Logon Process: <process> Authentication Package: <rulename> Workstation Name: <hostname> Status code: <disposition>Substatus code: <resultcode> { <info> Source Network Address: <saddr> Source Port: <sport> <fld15>|<info>}
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1218
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description><space> User Name: <username> Domain: <domain> Logon ID: <logon_id> Logon Type: <data_type>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	else if [logstash][msgparser][id] == "Security_560_Security" {
		# MESSAGE Security_560_Security:01
		# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Object Server: <obj_server> Object Type: <obj_type> Object Name: <obj_name> access = <fld24> Vol ID = <fld25> Snap ID = <fld26> Inode = <fld27> IP = <daddr> UID = <fld29> Full Path = <directory> Handle ID: <id1> Operation ID: <id2> Process ID: <process_id> Image File Name: <filename> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <logon_id> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid> Accesses: <accesses> Privileges <privilege> Restricted Sid Count: <fld53> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Object[\s]+Server:[\s]+(?<obj_server>[^\s]*)[\s]+Object[\s]+Type:[\s]+(?<obj_type>[^\s]*)[\s]+Object[\s]+Name:[\s]+(?<obj_name>[^\s]*)[\s]+access[\s]+=[\s]+(?<fld24>[^\s]*)[\s]+Vol[\s]+ID[\s]+=[\s]+(?<fld25>[^\s]*)[\s]+Snap[\s]+ID[\s]+=[\s]+(?<fld26>[^\s]*)[\s]+Inode[\s]+=[\s]+(?<fld27>[^\s]*)[\s]+IP[\s]+=[\s]+(?<daddr>[^\s]*)[\s]+UID[\s]+=[\s]+(?<fld29>[^\s]*)[\s]+Full[\s]+Path[\s]+=[\s]+(?<directory>[^\s]*)[\s]+Handle[\s]+ID:[\s]+(?<id1>[^\s]*)[\s]+Operation[\s]+ID:[\s]+(?<id2>[^\s]*)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Image[\s]+File[\s]+Name:[\s]+(?<filename>[^\s]*)[\s]+Primary[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Primary[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Primary[\s]+Logon[\s]+ID:[\s]+(?<logon_id>[^\s]*)[\s]+Client[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Client[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Client[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Accesses:[\s]+(?<accesses>[^\s]*)[\s]+Privileges[\s]+(?<privilege>[^\s]*)[\s]+Restricted[\s]+Sid[\s]+Count:[\s]+(?<fld53>[^\s]*)[\s]+$" }
				id => "message-Security_560_Security:01"
				add_field => {
				"shost" => "%{event_computer}"
					"[event][id]" => "Security_560_Security:01"
					"[rsa][message][id1]" => "Security_560_Security:01"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_560_Security
		# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Object Server: <obj_server> Object Type: <obj_type> Object Name: <obj_name> Handle ID: <id1> Operation ID: <id2> Process ID: <process_id> Image File Name: <filename> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <logon_id> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid> Accesses: <accesses> Privileges <privilege> Restricted Sid Count: <fld53> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Object[\s]+Server:[\s]+(?<obj_server>[^\s]*)[\s]+Object[\s]+Type:[\s]+(?<obj_type>[^\s]*)[\s]+Object[\s]+Name:[\s]+(?<obj_name>[^\s]*)[\s]+Handle[\s]+ID:[\s]+(?<id1>[^\s]*)[\s]+Operation[\s]+ID:[\s]+(?<id2>[^\s]*)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Image[\s]+File[\s]+Name:[\s]+(?<filename>[^\s]*)[\s]+Primary[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Primary[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Primary[\s]+Logon[\s]+ID:[\s]+(?<logon_id>[^\s]*)[\s]+Client[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Client[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Client[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Accesses:[\s]+(?<accesses>[^\s]*)[\s]+Privileges[\s]+(?<privilege>[^\s]*)[\s]+Restricted[\s]+Sid[\s]+Count:[\s]+(?<fld53>[^\s]*)[\s]+$" }
				id => "message-Security_560_Security"
				add_field => {
				"shost" => "%{event_computer}"
					"[event][id]" => "Security_560_Security"
					"[rsa][message][id1]" => "Security_560_Security"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId1221
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Object Server: <obj_server>Handle ID: <id1> Process ID: <process_id> Image File Name: <filename>
	else if [logstash][msgparser][id] == "msgParserId1221" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Object[\s]+Server:[\s]+(?<obj_server>[^H]*)Handle[\s]+ID:[\s]+(?<id1>[^\s]*)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Image[\s]+File[\s]+Name:[\s]+(?<filename>.*)$" }
			id => "msgParserId1221"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1222
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Object Server: <obj_server>Object Type: <obj_type>Object Name: <obj_name> Handle ID: <id1>Operation ID: <id2> Process ID: <process_id> Primary User Name: <username> Primary Domain: <domain>Primary Logon ID: <logon_id> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid> Accesses <accesses> Privileges <privilege>
	else if [logstash][msgparser][id] == "msgParserId1222" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Object[\s]+Server:[\s]+(?<obj_server>[^O]*)Object[\s]+Type:[\s]+(?<obj_type>[^O]*)Object[\s]+Name:[\s]+(?<obj_name>[^\s]*)[\s]+Handle[\s]+ID:[\s]+(?<id1>[^O]*)Operation[\s]+ID:[\s]+(?<id2>[^\s]*)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Primary[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Primary[\s]+Domain:[\s]+(?<domain>[^P]*)Primary[\s]+Logon[\s]+ID:[\s]+(?<logon_id>[^\s]*)[\s]+Client[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Client[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Client[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Accesses[\s]+(?<accesses>[^\s]*)[\s]+Privileges[\s]+(?<privilege>.*)$" }
			id => "msgParserId1222"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1223
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Object Server: <obj_server> Handle ID: <id1> Object Type: <obj_type> Process ID: <process_id> Image File Name: <filename> Access Mask: <accesses>
	else if [logstash][msgparser][id] == "msgParserId1223" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Object[\s]+Server:[\s]+(?<obj_server>[^\s]*)[\s]+Handle[\s]+ID:[\s]+(?<id1>[^\s]*)[\s]+Object[\s]+Type:[\s]+(?<obj_type>[^\s]*)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Image[\s]+File[\s]+Name:[\s]+(?<filename>[^\s]*)[\s]+Access[\s]+Mask:[\s]+(?<accesses>.*)$" }
			id => "msgParserId1223"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1224
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> New Policy: <policy_value> Changed By: <space> User Name: <username> Domain Name: <domain> Logon ID: <logon_id>
	else if [logstash][msgparser][id] == "msgParserId1224" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+New[\s]+Policy:[\s]+(?<policy_value>[^\s]*)[\s]+Changed[\s]+By:[\s]+(?<space>[^\s]*)[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Domain[\s]+Name:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<logon_id>.*)$" }
			id => "msgParserId1224"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1225
	# line in RSA:  <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> New Account Name: <group> New Domain: <domain> New Account ID: <groupid> Caller User Name: <c_username> Caller Domain: <c_domain> Caller Logon ID: <sessionid> Privileges <privilege>
	else if [logstash][msgparser][id] == "msgParserId1225" {
		grok {
			match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+New[\s]+Account[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+New[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+New[\s]+Account[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+Caller[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Caller[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Caller[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Privileges[\s]+(?<privilege>.*)$" }
			id => "msgParserId1225"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1226
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID:<groupid> Caller User Name: <c_username> Caller Domain: <c_domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId1226" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Target[\s]+Account[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Target[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+Target[\s]+Account[\s]+ID:(?<groupid>[^\s]*)[\s]+Caller[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Caller[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Caller[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId1226"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1227
	# line in RSA:  <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> New Account Name: <group> New Domain: <domain> New Account ID:<groupid> Caller User Name: <c_username> Caller Domain: <c_domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId1227" {
		grok {
			match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+New[\s]+Account[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+New[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+New[\s]+Account[\s]+ID:(?<groupid>[^\s]*)[\s]+Caller[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Caller[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Caller[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId1227"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1228
	# line in RSA:  <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Member Name: <username> Member ID: <c_sid> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <c_username> Caller Domain: <c_domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId1228" {
		grok {
			match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Member[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Member[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Target[\s]+Account[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Target[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+Target[\s]+Account[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+Caller[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Caller[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Caller[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId1228"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1229
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <c_username>Caller Domain: <c_domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId1229" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+Target[\s]+Account[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Target[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+Target[\s]+Account[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+Caller[\s]+User[\s]+Name:[\s]+(?<c_username>[^C]*)Caller[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Caller[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId1229"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1230
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> User Name: <username> Domain: <domain> Logon ID: <logon_id> {Assigned|Privileges}: <privilege>
	else if [logstash][msgparser][id] == "msgParserId1230" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>[^\s]*)[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<logon_id>[^\s]*)[\s]+(Assigned|Privileges):[\s]+(?<privilege>.*)$" }
			id => "msgParserId1230"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1231
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description>
	else if [logstash][msgparser][id] == "msgParserId1231" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"(?<event_description>.*)$" }
			id => "msgParserId1231"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1232
	# line in RSA: <fld1> {NetApp: | NetApp} <fld50> [<event_type>] <fld11> <datetime> <fld12> <fld13> <fld14>: <sid>/<event_log>/<event_computer>/<event_source>(<id>) - "The <service> service entered the <disposition> state.
	else if [logstash][msgparser][id] == "msgParserId1232" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(NetApp:[\s]+|[\s]*NetApp)[\s]+(?<fld50>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\][\s]+(?<fld11>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^:]*):[\s]+(?<sid>[^/]*)/(?<event_log>[^/]*)/(?<event_computer>[^/]*)/(?<event_source>[^\(]*)\((?<id>[^\)]*)\)[\s]+\-[\s]+\"The[\s]+(?<service>[^\s]*)[\s]+service[\s]+entered[\s]+the[\s]+(?<disposition>[^\s]*)[\s]+state\.$" }
			id => "msgParserId1232"
			add_field => {
				"shost" => "%{event_computer}"
				"[logstash][fullDateTimeString]" => "%{datetime} %{fld12} %{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1234
	# line in RSA: <username>:<action>:<service>:[<saddr>_<fld2>]:<disposition>
	else if [logstash][msgparser][id] == "msgParserId1234" {
		dissect {
			mapping => { "message" => "%{username}:%{action}:%{service}:[%{saddr}_%{fld2}]:%{disposition}" }
			id => "msgParserId1234"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1237
	# line in RSA:  Could not establish connection with <saddr>.
	else if [logstash][msgparser][id] == "msgParserId1237" {
		dissect {
			mapping => { "message" => "Could not establish connection with %{saddr}." }
			id => "msgParserId1237"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1238
	# line in RSA:  The local NIS group update was successful.
	else if [logstash][msgparser][id] == "msgParserId1238" {
		dissect {
			mapping => { "message" => "The local NIS group update was successful." }
			id => "msgParserId1238"
			add_field => {
				"result" => "The local NIS group update was successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1239
	# line in RSA:  Scrub found <fld1> RAID write signature inconsistencies in <fld30>
	else if [logstash][msgparser][id] == "msgParserId1239" {
		dissect {
			mapping => { "message" => "Scrub found %{fld1} RAID write signature inconsistencies in %{fld30}" }
			id => "msgParserId1239"
			add_field => {
				"result" => "Scrub found checksum errors"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1240
	# line in RSA:  Unable to connect to any of the servers in '<fld11>'.
	else if [logstash][msgparser][id] == "msgParserId1240" {
		dissect {
			mapping => { "message" => "Unable to connect to any of the servers in '%{fld11}'." }
			id => "msgParserId1240"
			add_field => {
				"result" => "Unable to connect to any of the servers"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1241
	# line in RSA:  Telnet daemon socket timed out for the <fld11> connection.
	else if [logstash][msgparser][id] == "msgParserId1241" {
		dissect {
			mapping => { "message" => "Telnet daemon socket timed out for the %{fld11} connection." }
			id => "msgParserId1241"
			add_field => {
				"result" => "Telnet daemon socket timed out"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1243
	# line in RSA: SP communication error, <result>. 
	else if [logstash][msgparser][id] == "msgParserId1243" {
		dissect {
			mapping => { "message" => "SP communication error, %{result}." }
			id => "msgParserId1243"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1244
	# line in RSA: The software driver for the <interface> detected a problem: <result> (<resultcode>). 
	else if [logstash][msgparser][id] == "msgParserId1244" {
		dissect {
			mapping => { "message" => "The software driver for the %{interface} detected a problem: %{result} (%{resultcode})." }
			id => "msgParserId1244"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1245
	# line in RSA:  deviceName="<fld1>", ETime="<fld2>", cdb="<fld3>", victimRetryCount="<fld4>", retryCount="<fld5>", timeoutRetryCount="<fld6>", pathRetryCount="<fld7>", adapterStatus="<fld8>", targetStatus="<fld9>", sSenseKey="<fld10>", sSenseCode="<fld11>", iSenseKey="<fld12>", iASC="<fld13>", iASCQ="<fld14>", pathsTried="<fld15>", basicTimeout="<fld16>", returnCode="<resultcode>", disk_information="<info>" 
	else if [logstash][msgparser][id] == "msgParserId1245" {
		dissect {
			mapping => { "message" => "deviceName=\"%{fld1}\", ETime=\"%{fld2}\", cdb=\"%{fld3}\", victimRetryCount=\"%{fld4}\", retryCount=\"%{fld5}\", timeoutRetryCount=\"%{fld6}\", pathRetryCount=\"%{fld7}\", adapterStatus=\"%{fld8}\", targetStatus=\"%{fld9}\", sSenseKey=\"%{fld10}\", sSenseCode=\"%{fld11}\", iSenseKey=\"%{fld12}\", iASC=\"%{fld13}\", iASCQ=\"%{fld14}\", pathsTried=\"%{fld15}\", basicTimeout=\"%{fld16}\", returnCode=\"%{resultcode}\", disk_information=\"%{info}\"" }
			id => "msgParserId1245"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1246
	# line in RSA:  hwtype="<fld1>"
	else if [logstash][msgparser][id] == "msgParserId1246" {
		dissect {
			mapping => { "message" => "hwtype=\"%{fld1}\"" }
			id => "msgParserId1246"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1247
	# line in RSA:  remoteID="<id>"
	else if [logstash][msgparser][id] == "msgParserId1247" {
		dissect {
			mapping => { "message" => "remoteID=\"%{id}\"" }
			id => "msgParserId1247"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1248
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description>Subject: Security ID:<sid>Account Name:<group>Account Domain:<domain>Logon ID:<logon_id>Logon Type:<data_type>New Logon: Security ID:<fld15>Account Name:<fld16>Account Domain:<fld28>Logon ID:<fld17>Logon GUID:<groupid>Process Information: Process ID:<process_id>Process Name:<process>Network Information: Workstation Name:<hostname>Source Network Address:<saddr>Source Port:<sport>Detailed Authentication Information: Logon Process:<fld18>Authentication Package:<rulename>Transited Services: Package Name (NTLM only):<fld20>Key Length: <info>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1249
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description>Subject: Security ID:<sid>Account Name:<group>Account Domain:<domain>Logon ID:<logon_id>Logon Type:<data_type><info>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1250
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description>Subject: Security ID:<sid>Account Name:<group>Account Domain:<domain>Logon ID:<logon_id>Object: Object Server:<obj_server>Object Type:<obj_type>Object Name:<obj_name>Handle ID:<id1>Process Information: Process ID:<process_id>Process Name:<process>Access Request Information: Transaction ID:<trans_id>Accesses:<accesses>Access Mask:<mask>Privileges Used for Access Check:<fld52>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1251
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description>Subject: Security ID:<sid>Account Name:<group>Account Domain:<domain>Logon ID:<logon_id>Object: Object Server:<obj_server>Object Type:<obj_type>Object Name:<obj_name>Handle ID:<id1>Process Information: Process ID:<process_id>Process Name:<process>Access Request Information: Accesses:<accesses>Access Mask:<mask>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1252
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description>Subject: Security ID:<sid>Account Name:<group>Account Domain:<domain>Logon ID:<logon_id>Logon Type:<data_type>Account For Which Logon Failed: Security ID:<fld31>Account Name:<fld32>Account Domain:<fld33>Failure Information: Failure Reason:<result>Status:<event_state>Sub Status:<resultcode>Process Information: Caller Process ID:<process_id>Caller Process Name:<process>Network Information: Workstation Name:<hostname>Source Network Address:<saddr>Source Port:<sport>Detailed Authentication Information: Logon Process:<fld34>Authentication Package:<rulename>Transited Services: Package Name (NTLM only):<fld36>Key Length: <info>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1253
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description>Subject: Security ID:<sid>Account Name:<group>Account Domain:<domain>Logon ID:<logon_id>Object: Object Server: <obj_server>  Object Type: <obj_type>  Object Name: <obj_name>  Handle ID: <id1>  Process Information: Process ID: <process_id>  Access Request Information: Transaction ID: <trans_id>  Accesses: <accesses>  Access Mask: <fld52>  Privileges Used for Access Check: <privilege>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1254
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Subject: Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object: Object Server: <obj_server>  Handle ID:  <id1>  Process Information: Process ID:  <process_id>  Process Name:  <process> Transaction ID: <trans_id>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1255
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description> Subject: Security ID: <sid>  Account Name: <username> Account Domain: <domain>  Logon ID: <logon_id>  Object: Object Server: <obj_server> Object Type: <obj_type> Object Name: <obj_name> Handle ID: <id1> Process: Process ID: <process_id> Process Name: <process> Permissions Change: Original Security Descriptor: <change_old> New Security Descriptor: <change_new>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1256
	# line in RSA: <fld1>{NetApp:|NetApp}<fld50>[<event_type>]<fld11><datetime><fld12><fld13><fld14>:<fld51>/<event_log>/<event_computer>/<event_source>(<id>) - "<event_description>"
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1257
	# line in RSA: Vserver '<vsys>': LDAP server <daddr> did not respond to query within timeout (<fld1> seconds) interval.
	else if [logstash][msgparser][id] == "msgParserId1257" {
		dissect {
			mapping => { "message" => "Vserver '%{vsys}': LDAP server %{daddr} did not respond to query within timeout (%{fld1} seconds) interval." }
			id => "msgParserId1257"
			add_field => {
				"event_description" => "LDAP server did not respond to query within timeout"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1258
	# line in RSA: Vserver (<vsys>) could not make a connection over the network to server (ip <daddr>, port <dport>) via interface <sinterface>. Error: <result>
	else if [logstash][msgparser][id] == "msgParserId1258" {
		dissect {
			mapping => { "message" => "Vserver (%{vsys}) could not make a connection over the network to server (ip %{daddr}, port %{dport}) via interface %{sinterface}. Error: %{result}" }
			id => "msgParserId1258"
			add_field => {
				"event_description" => "Vserver  could not make a connection over the network to server"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1259
	# line in RSA: None of the LSA servers configured for Vserver (<vsys>) are currently accessible via the network.
	else if [logstash][msgparser][id] == "msgParserId1259" {
		dissect {
			mapping => { "message" => "None of the LSA servers configured for Vserver (%{vsys}) are currently accessible via the network." }
			id => "msgParserId1259"
			add_field => {
				"event_description" => "LSA servers are not accessible"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1260
	# line in RSA: Configuration backup file <filename> cannot be uploaded to the destination URL <url>. Error:<result>
	else if [logstash][msgparser][id] == "msgParserId1260" {
		dissect {
			mapping => { "message" => "Configuration backup file %{filename} cannot be uploaded to the destination URL %{url}. Error:%{result}" }
			id => "msgParserId1260"
			add_field => {
				"event_description" => "Configuration backup file cannot be uploaded to the destination url"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1261
	# line in RSA: No redundancy in the failover configuration for 1 LIFs assigned to node "<node>". LIFs: <fld1>
	else if [logstash][msgparser][id] == "msgParserId1261" {
		dissect {
			mapping => { "message" => "No redundancy in the failover configuration for 1 LIFs assigned to node \"%{node}\". LIFs: %{fld1}" }
			id => "msgParserId1261"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1262
	# line in RSA:  The LIF <fld1> in DR partner Vserver of Vserver <vsys> is not reachable from the local cluster.
	else if [logstash][msgparser][id] == "msgParserId1262" {
		dissect {
			mapping => { "message" => "The LIF %{fld1} in DR partner Vserver of Vserver %{vsys} is not reachable from the local cluster." }
			id => "msgParserId1262"
			add_field => {
				"hostname" => "%{hhost}"
				"info" => "%{$MSG}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[event_type]"
		destination => "[event_type]"
		dictionary => {
			"AUS" => "Success Audit"
			"AUF" => "Failure Audit"
			"ERR" => "Error"
			"WRN" => "Warning"
			"INF" => "Information"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[event_cat]"
		destination => "[event_cat_name]"
		dictionary => {
			"1401060000" => "User.Activity.Successful Logins"
			"1401070000" => "User.Activity.Logoff"
		}
		fallback => "Other.Default"
		override => true
	}
}
filter {
	translate {
		field => "[action]"
		destination => "[event_cat]"
		dictionary => {
			"IN" => "1401060000"
			"END" => "1401070000"
		}
		fallback => "1901000000"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_netappmsg.json"
#			template_name => "netapp_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

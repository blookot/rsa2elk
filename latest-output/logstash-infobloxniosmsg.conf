# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "infobloxnios"
			"[observer][name]" => "Infoblox NIOS"
			"[observer][type]" => "System"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 006
	# line in RSA: <month> <day> <time> <hhostname> {<hhostip><messageid>[<data>]|<hhostip><messageid>}: <!payload>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 001
	# line in RSA: <month> <day> <time> <hhostname> <messageid>[<data>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hhostname} %{messageid}[%{data}]: %{message}" }
			id => "header-001"
			add_field => {
				"[rsa][header][id]" => "001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 005
	# line in RSA: <month> <day> <time> <hhostname> <hdata>: <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hhostname} %{hdata}: %{messageid} %{message}" }
			id => "header-005"
			add_field => {
				"[rsa][header][id]" => "005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 002
	# line in RSA: <month> <day> <time> {<hhostname> -<messageid>:|<hhostname> <messageid>:} <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+((?<hhostname>[^\s]*)[\s]+\-(?<messageid>[^:]*):|(?<hhostname>[^\s]*)[\s]+(?<messageid>[^:]*):)[\s]+(?<message>.*)$" }
			id => "header-002"
			add_field => {
				"[rsa][header][id]" => "002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <messageid>[<data>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{messageid}[%{data}]: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{messageid}: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <month> <day> <time> <hhostname> <fld1> |<messageid> |<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hhostname} %{fld1} |%{messageid} |%{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-infobloxniosmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "httpd" {
		# MESSAGE httpd
		# line in RSA:  <fld1> <fld2>.<fld3> [<username>]: Logout - - ip=<saddr> group=<group> trigger_event=<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2}.%{fld3} [%{username}]: Logout - - ip=%{saddr} group=%{group} trigger_event=%{event_description}" }
				id => "message-httpd"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_source" => "%{hhostname}"
					"[event][id]" => "httpd"
					"[rsa][message][id1]" => "httpd"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE httpd:01
		# line in RSA:  <fld1> <fld2>.<fld3> [<username>]: Login_Allowed - - to=<fld4> ip=<saddr> auth=<authmethod> group=<group> apparently_via=<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2}.%{fld3} [%{username}]: Login_Allowed - - to=%{fld4} ip=%{saddr} auth=%{authmethod} group=%{group} apparently_via=%{info}" }
				id => "message-httpd:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_source" => "%{hhostname}"
					"[event][id]" => "httpd:01"
					"[rsa][message][id1]" => "httpd:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE httpd:02
		# line in RSA:   <fld1> <fld2>.<fld3> [<username>]: Called - <action> message=<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2}.%{fld3} [%{username}]: Called - %{action} message=%{info}" }
				id => "message-httpd:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "httpd:02"
					"[rsa][message][id1]" => "httpd:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE httpd:03
		# line in RSA:   <fld1> <fld2>.<fld3> [<username>]: Created HostAddress <hostip>: Set address="<saddr>",configure_for_dhcp=<fld10>,match_option="<info>",parent=<context>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2}.%{fld3} [%{username}]: Created HostAddress %{hostip}: Set address=\"%{saddr}\",configure_for_dhcp=%{fld10},match_option=\"%{info}\",parent=%{context}" }
				id => "message-httpd:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "httpd:03"
					"[rsa][message][id1]" => "httpd:03"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE httpd:04
		# line in RSA:   <shost>: <fld1> authentication for user <username> failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{shost}: %{fld1} authentication for user %{username} failed" }
				id => "message-httpd:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "httpd:04"
					"[rsa][message][id1]" => "httpd:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE httpd:05
		# line in RSA:   <fld1> <fld2>.<fld3> [<username>]: Called - <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2}.%{fld3} [%{username}]: Called - %{event_description}" }
				id => "message-httpd:05"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "httpd:05"
					"[rsa][message][id1]" => "httpd:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE httpd:07
		# line in RSA:   <fld1> <fld2>.<fld3> [<username>]: Login_Denied - - to=<terminal> ip=<saddr> info=<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2}.%{fld3} [%{username}]: Login_Denied - - to=%{terminal} ip=%{saddr} info=%{info}" }
				id => "message-httpd:07"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhostname}"
					"[event][id]" => "httpd:07"
					"[rsa][message][id1]" => "httpd:07"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE httpd:06
		# line in RSA:  <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-httpd:06"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "httpd:06"
					"[rsa][message][id1]" => "httpd:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "in.tftpd" {
		# MESSAGE in.tftpd:01
		# line in RSA:  RRQ from <saddr> filename <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RRQ from %{saddr} filename %{filename}" }
				id => "message-in.tftpd:01"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "RRQ from remote host"
					"[event][id]" => "in.tftpd:01"
					"[rsa][message][id1]" => "in.tftpd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE in.tftpd:02
		# line in RSA:  sending NAK (<resultcode>, <result>) to <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "sending NAK (%{resultcode}, %{result}) to %{daddr}" }
				id => "message-in.tftpd:02"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "sending NAK to remote host"
					"[event][id]" => "in.tftpd:02"
					"[rsa][message][id1]" => "in.tftpd:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE in.tftpd
		# line in RSA:  connection refused from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "connection refused from %{saddr}" }
				id => "message-in.tftpd"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "in.tftpd"
					"[rsa][message][id1]" => "in.tftpd"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "dhcpd" {
		# MESSAGE dhcpd:12
		# line in RSA: <event_type>: received a REQUEST DHCP packet from relay-agent <interface> with a circuit-id of "<id>" and remote-id of "<smacaddr>" for <hostip> (<dmacaddr>) lease time is { undefined | <duration> } seconds
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_type>[^:]*):[\s]+received[\s]+a[\s]+REQUEST[\s]+DHCP[\s]+packet[\s]+from[\s]+relay\-agent[\s]+(?<interface>[^\s]*)[\s]+with[\s]+a[\s]+circuit\-id[\s]+of[\s]+\"(?<id>[^\"]*)\"[\s]+and[\s]+remote\-id[\s]+of[\s]+\"(?<smacaddr>[^\"]*)\"[\s]+for[\s]+(?<hostip>[^\s]*)[\s]+\((?<dmacaddr>[^\)]*)\)[\s]+lease[\s]+time[\s]+is[\s]+([\s]*undefined[\s]+|[\s]*(?<duration>[^\s]*)[\s]+)[\s]+seconds$" }
				id => "message-dhcpd:12"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "received a REQUEST DHCP packet from relay-agent"
					"[event][id]" => "dhcpd:12"
					"[rsa][message][id1]" => "dhcpd:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:21
		# line in RSA:  bind update on <hostip> from <hostname>(<fld1>) rejected: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "bind update on %{hostip} from %{hostname}(%{fld1}) rejected: %{result}" }
				id => "message-dhcpd:21"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "bind update rejected"
					"[event][id]" => "dhcpd:21"
					"[rsa][message][id1]" => "dhcpd:21"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:10
		# line in RSA:  Unable to add forward map from <shost><fld1>to <daddr>: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to add forward map from %{shost}%{fld1}to %{daddr}: %{result}" }
				id => "message-dhcpd:10"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Unable to add forward map"
					"[event][id]" => "dhcpd:10"
					"[rsa][message][id1]" => "dhcpd:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:13
		# line in RSA:  Average <fld1> dynamic DNS update latency: <result> micro seconds
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Average %{fld1} dynamic DNS update latency: %{result} micro seconds" }
				id => "message-dhcpd:13"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Average dynamic DNS update latency"
					"[event][id]" => "dhcpd:13"
					"[rsa][message][id1]" => "dhcpd:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:15
		# line in RSA:  Dynamic DNS update timeout count in last <info> minutes: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dynamic DNS update timeout count in last %{info} minutes: %{result}" }
				id => "message-dhcpd:15"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Dynamic DNS update timeout count"
					"[event][id]" => "dhcpd:15"
					"[rsa][message][id1]" => "dhcpd:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:22
		# line in RSA:  Removed forward map from <shost><fld1>to <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Removed forward map from %{shost}%{fld1}to %{daddr}" }
				id => "message-dhcpd:22"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Removed forward map"
					"[event][id]" => "dhcpd:22"
					"[rsa][message][id1]" => "dhcpd:22"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:25
		# line in RSA:  Removed reverse map on <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Removed reverse map on %{hostname}" }
				id => "message-dhcpd:25"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Removed reverse map"
					"[event][id]" => "dhcpd:25"
					"[rsa][message][id1]" => "dhcpd:25"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:06
		# line in RSA:  received shutdown -/-/ <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "received shutdown -/-/ %{result}" }
				id => "message-dhcpd:06"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "received shutdown"
					"[event][id]" => "dhcpd:06"
					"[rsa][message][id1]" => "dhcpd:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:18
		# line in RSA:  { Added | added } new forward map from <hostname> <space> <daddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Added[\s]+|[\s]*added[\s]+)[\s]+new[\s]+forward[\s]+map[\s]+from[\s]+(?<hostname>[^\s]*)[\s]+(?<space>[^\s]*)[\s]+(?<daddr>.*)$" }
				id => "message-dhcpd:18"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Added new forward map"
					"[event][id]" => "dhcpd:18"
					"[rsa][message][id1]" => "dhcpd:18"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:19
		# line in RSA:  { Added | added } reverse map from <hostname> <space> <daddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Added[\s]+|[\s]*added[\s]+)[\s]+reverse[\s]+map[\s]+from[\s]+(?<hostname>[^\s]*)[\s]+(?<space>[^\s]*)[\s]+(?<daddr>.*)$" }
				id => "message-dhcpd:19"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "added reverse map"
					"[event][id]" => "dhcpd:19"
					"[rsa][message][id1]" => "dhcpd:19"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd
		# line in RSA:  Abandoning IP address <hostip>: declined
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Abandoning IP address %{hostip}: declined" }
				id => "message-dhcpd"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Abandoning IP declined"
					"[event][id]" => "dhcpd"
					"[rsa][message][id1]" => "dhcpd"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:30
		# line in RSA:  Abandoning IP address <hostip>: pinged before offer
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Abandoning IP address %{hostip}: pinged before offer" }
				id => "message-dhcpd:30"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Abandoning IP pinged before offer"
					"[event][id]" => "dhcpd:30"
					"[rsa][message][id1]" => "dhcpd:30"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:01
		# line in RSA:  DHCPDECLINE of <saddr> from <smacaddr> (<shost>) via <interface>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPDECLINE of %{saddr} from %{smacaddr} (%{shost}) via %{interface}: %{info}" }
				id => "message-dhcpd:01"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPDECLINE"
					"[event][id]" => "dhcpd:01"
					"[rsa][message][id1]" => "dhcpd:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:02
		# line in RSA:  DHCPDECLINE of <saddr> from <smacaddr> via <interface>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPDECLINE of %{saddr} from %{smacaddr} via %{interface}: %{info}" }
				id => "message-dhcpd:02"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPDECLINE"
					"[event][id]" => "dhcpd:02"
					"[rsa][message][id1]" => "dhcpd:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:03
		# line in RSA:  DHCPRELEASE of <saddr> { from <dmacaddr> (<dhost>) via | from <dmacaddr> via } <interface> (<info>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCPRELEASE[\s]+of[\s]+(?<saddr>[^\s]*)[\s]+([\s]*from[\s]+(?<dmacaddr>[^\s]*)[\s]+\((?<dhost>[^\)]*)\)[\s]+via[\s]+|[\s]*from[\s]+(?<dmacaddr>[^\s]*)[\s]+via[\s]+)[\s]+(?<interface>[^\s]*)[\s]+\((?<info>[^\)]*)\)$" }
				id => "message-dhcpd:03"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPRELEASE"
					"[event][id]" => "dhcpd:03"
					"[rsa][message][id1]" => "dhcpd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:04
		# line in RSA:   DHCPDISCOVER from <smacaddr> via <interface>: network <mask>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPDISCOVER from %{smacaddr} via %{interface}: network %{mask}: %{info}" }
				id => "message-dhcpd:04"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPDISCOVER"
					"[event][id]" => "dhcpd:04"
					"[rsa][message][id1]" => "dhcpd:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:07
		# line in RSA:   DHCPREQUEST for <saddr> { (<shost>) from | from } <smacaddr> (<hostname>) via <interface>: ignored (<result>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCPREQUEST[\s]+for[\s]+(?<saddr>[^\s]*)[\s]+([\s]*\((?<shost>[^\)]*)\)[\s]+from[\s]+|[\s]*from[\s]+)[\s]+(?<smacaddr>[^\s]*)[\s]+\((?<hostname>[^\)]*)\)[\s]+via[\s]+(?<interface>[^:]*):[\s]+ignored[\s]+\((?<result>[^\)]*)\)$" }
				id => "message-dhcpd:07"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPREQUEST ignored"
					"[event][id]" => "dhcpd:07"
					"[rsa][message][id1]" => "dhcpd:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:09
		# line in RSA:   DHCPREQUEST for <saddr> { from <smacaddr> (<shost>) via | from <smacaddr> via } <interface>: wrong network
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCPREQUEST[\s]+for[\s]+(?<saddr>[^\s]*)[\s]+([\s]*from[\s]+(?<smacaddr>[^\s]*)[\s]+\((?<shost>[^\)]*)\)[\s]+via[\s]+|[\s]*from[\s]+(?<smacaddr>[^\s]*)[\s]+via[\s]+)[\s]+(?<interface>[^:]*):[\s]+wrong[\s]+network$" }
				id => "message-dhcpd:09"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPREQUEST"
				"result" => "wrong network"
					"[event][id]" => "dhcpd:09"
					"[rsa][message][id1]" => "dhcpd:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:26
		# line in RSA:   DHCPREQUEST for <saddr> { from <smacaddr> (<shost>) via | from <smacaddr> via } <interface>: lease <hostip> unavailable
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCPREQUEST[\s]+for[\s]+(?<saddr>[^\s]*)[\s]+([\s]*from[\s]+(?<smacaddr>[^\s]*)[\s]+\((?<shost>[^\)]*)\)[\s]+via[\s]+|[\s]*from[\s]+(?<smacaddr>[^\s]*)[\s]+via[\s]+)[\s]+(?<interface>[^:]*):[\s]+lease[\s]+(?<hostip>[^\s]*)[\s]+unavailable$" }
				id => "message-dhcpd:26"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPREQUEST"
				"result" => "lease unavailable"
					"[event][id]" => "dhcpd:26"
					"[rsa][message][id1]" => "dhcpd:26"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:08
		# line in RSA:   DHCPREQUEST for <saddr> (<shost>) from <smacaddr> (<hostname>) via <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPREQUEST for %{saddr} (%{shost}) from %{smacaddr} (%{hostname}) via %{interface}" }
				id => "message-dhcpd:08"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPREQUEST"
					"[event][id]" => "dhcpd:08"
					"[rsa][message][id1]" => "dhcpd:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:11
		# line in RSA:   DHCPREQUEST for <saddr> { from <smacaddr> (<shost>) via | from <smacaddr> via } <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCPREQUEST[\s]+for[\s]+(?<saddr>[^\s]*)[\s]+([\s]*from[\s]+(?<smacaddr>[^\s]*)[\s]+\((?<shost>[^\)]*)\)[\s]+via[\s]+|[\s]*from[\s]+(?<smacaddr>[^\s]*)[\s]+via[\s]+)[\s]+(?<interface>.*)$" }
				id => "message-dhcpd:11"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPREQUEST"
					"[event][id]" => "dhcpd:11"
					"[rsa][message][id1]" => "dhcpd:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:31
		# line in RSA:   DHCPRELEASE from <smacaddr> via <saddr>: unknown network segment
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPRELEASE from %{smacaddr} via %{saddr}: unknown network segment" }
				id => "message-dhcpd:31"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPRELEASE"
				"event_description" => "unknown network segment"
					"[event][id]" => "dhcpd:31"
					"[rsa][message][id1]" => "dhcpd:31"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:32
		# line in RSA:   BOOTREQUEST from <smacaddr> via <saddr>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "BOOTREQUEST from %{smacaddr} via %{saddr}: %{event_description}" }
				id => "message-dhcpd:32"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "BOOTREQUEST"
					"[event][id]" => "dhcpd:32"
					"[rsa][message][id1]" => "dhcpd:32"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:33
		# line in RSA:   Reclaiming abandoned lease <saddr>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Reclaiming abandoned lease %{saddr}." }
				id => "message-dhcpd:33"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Reclaiming abandoned lease"
					"[event][id]" => "dhcpd:33"
					"[rsa][message][id1]" => "dhcpd:33"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:34
		# line in RSA:   {balanced|balancing} pool <fld1> <saddr>/<sport>  total <fld2>  free <fld3> backup <fld4> lts <fld5> max-<fld6> {(+/-)<fld7>(<info>)|(+/-)<fld7>|<fld7>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(balanced|balancing)[\s]+pool[\s]+(?<fld1>[^\s]*)[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+total[\s]+(?<fld2>[^\s]*)[\s]+free[\s]+(?<fld3>[^\s]*)[\s]+backup[\s]+(?<fld4>[^\s]*)[\s]+lts[\s]+(?<fld5>[^\s]*)[\s]+max\-(?<fld6>[^\s]*)[\s]+(\(\+/\-\)(?<fld7>[^\(]*)\((?<info>[^\)]*)\)|\(\+/\-\)(?<fld7>.*)|(?<fld7>.*))$" }
				id => "message-dhcpd:34"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:34"
					"[rsa][message][id1]" => "dhcpd:34"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:35
		# line in RSA:   Unable to add reverse map from <shost> to <dhost>: REFUSED
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to add reverse map from %{shost} to %{dhost}: REFUSED" }
				id => "message-dhcpd:35"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => " Unable to add reverse map"
					"[event][id]" => "dhcpd:35"
					"[rsa][message][id1]" => "dhcpd:35"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:36
		# line in RSA:   Forward map from <shost><fld2>to <daddr> FAILED: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Forward map from %{shost}%{fld2}to %{daddr} FAILED: %{fld1}" }
				id => "message-dhcpd:36"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => " Forward map failed"
					"[event][id]" => "dhcpd:36"
					"[rsa][message][id1]" => "dhcpd:36"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:14
		# line in RSA:  DHCPACK on <saddr> { to <dmacaddr> (<dhost>) via | to <dmacaddr> via } <interface> relay <fld1> lease-duration <duration>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCPACK[\s]+on[\s]+(?<saddr>[^\s]*)[\s]+([\s]*to[\s]+(?<dmacaddr>[^\s]*)[\s]+\((?<dhost>[^\)]*)\)[\s]+via[\s]+|[\s]*to[\s]+(?<dmacaddr>[^\s]*)[\s]+via[\s]+)[\s]+(?<interface>[^\s]*)[\s]+relay[\s]+(?<fld1>[^\s]*)[\s]+lease\-duration[\s]+(?<duration>.*)$" }
				id => "message-dhcpd:14"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPACK"
					"[event][id]" => "dhcpd:14"
					"[rsa][message][id1]" => "dhcpd:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:24
		# line in RSA:  DHCPOFFER on <saddr> { to "<dmacaddr>" (<dhost>) via | to <dmacaddr> (<dhost>) via | to <dmacaddr> via } <interface> relay <fld1> lease-duration <duration>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCPOFFER[\s]+on[\s]+(?<saddr>[^\s]*)[\s]+([\s]*to[\s]+\"(?<dmacaddr>[^\"]*)\"[\s]+\((?<dhost>[^\)]*)\)[\s]+via[\s]+|[\s]*to[\s]+(?<dmacaddr>[^\s]*)[\s]+\((?<dhost>[^\)]*)\)[\s]+via[\s]+|[\s]*to[\s]+(?<dmacaddr>[^\s]*)[\s]+via[\s]+)[\s]+(?<interface>[^\s]*)[\s]+relay[\s]+(?<fld1>[^\s]*)[\s]+lease\-duration[\s]+(?<duration>.*)$" }
				id => "message-dhcpd:24"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPOFFER"
					"[event][id]" => "dhcpd:24"
					"[rsa][message][id1]" => "dhcpd:24"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:17
		# line in RSA:  DHCPNAK on <saddr> to <dmacaddr> via <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPNAK on %{saddr} to %{dmacaddr} via %{interface}" }
				id => "message-dhcpd:17"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPNAK"
					"[event][id]" => "dhcpd:17"
					"[rsa][message][id1]" => "dhcpd:17"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:05
		# line in RSA:   DHCPDISCOVER { from <smacaddr> (<shost>) via | from <smacaddr> via } <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCPDISCOVER[\s]+([\s]*from[\s]+(?<smacaddr>[^\s]*)[\s]+\((?<shost>[^\)]*)\)[\s]+via[\s]+|[\s]*from[\s]+(?<smacaddr>[^\s]*)[\s]+via[\s]+)[\s]+(?<interface>.*)$" }
				id => "message-dhcpd:05"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPDISCOVER"
					"[event][id]" => "dhcpd:05"
					"[rsa][message][id1]" => "dhcpd:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:16
		# line in RSA:  DHCPACK to <daddr> (<dmacaddr>) via <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPACK to %{daddr} (%{dmacaddr}) via %{interface}" }
				id => "message-dhcpd:16"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPACK"
					"[event][id]" => "dhcpd:16"
					"[rsa][message][id1]" => "dhcpd:16"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:20
		# line in RSA:  DHCPINFORM from <saddr> via <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPINFORM from %{saddr} via %{interface}" }
				id => "message-dhcpd:20"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPINFORM"
					"[event][id]" => "dhcpd:20"
					"[rsa][message][id1]" => "dhcpd:20"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:23
		# line in RSA:  DHCPEXPIRE on <saddr> to <dmacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPEXPIRE on %{saddr} to %{dmacaddr}" }
				id => "message-dhcpd:23"
				add_field => {
				"event_source" => "%{hhostname}"
				"action" => "DHCPEXPIRE"
					"[event][id]" => "dhcpd:23"
					"[rsa][message][id1]" => "dhcpd:23"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:28
		# line in RSA:  uid lease <hostip> for client <smacaddr> is duplicate on <mask>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "uid lease %{hostip} for client %{smacaddr} is duplicate on %{mask}" }
				id => "message-dhcpd:28"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:28"
					"[rsa][message][id1]" => "dhcpd:28"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:29
		# line in RSA:  Attempt to add forward map "<shost>" (and reverse map "<dhost>") for <saddr> abandoned because of non-retryable failure: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attempt to add forward map \"%{shost}\" (and reverse map \"%{dhost}\") for %{saddr} abandoned because of non-retryable failure: %{result}" }
				id => "message-dhcpd:29"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:29"
					"[rsa][message][id1]" => "dhcpd:29"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE dhcpd:39
		# line in RSA: NOT FREE/BACKUP lease<hostip>End Time<fld1> Bind-State <change_old> Next-Bind-State <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NOT FREE/BACKUP lease%{hostip}End Time%{fld1} Bind-State %{change_old} Next-Bind-State %{change_new}" }
				id => "message-dhcpd:39"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:39"
					"[rsa][message][id1]" => "dhcpd:39"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:41
		# line in RSA: RELEASE on<saddr>to<dmacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RELEASE on%{saddr}to%{dmacaddr}" }
				id => "message-dhcpd:41"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:41"
					"[rsa][message][id1]" => "dhcpd:41"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:42
		# line in RSA: r-l-e:<hostip>,<result>,<fld1>,<macaddr>,<fld3>,<fld4>,<fld5>,<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "r-l-e:%{hostip},%{result},%{fld1},%{macaddr},%{fld3},%{fld4},%{fld5},%{info}" }
				id => "message-dhcpd:42"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:42"
					"[rsa][message][id1]" => "dhcpd:42"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:43
		# line in RSA: failover peer<fld1>:<dclass_counter1>leases added to send queue from pool<fld3><hostip>/<network_port>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "failover peer%{fld1}:%{dclass_counter1}leases added to send queue from pool%{fld3}%{hostip}/%{network_port}" }
				id => "message-dhcpd:43"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:43"
					"[rsa][message][id1]" => "dhcpd:43"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:44
		# line in RSA: DHCPDECLINE from<macaddr>via<hostip>: unknown network segment
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCPDECLINE from%{macaddr}via%{hostip}: unknown network segment" }
				id => "message-dhcpd:44"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "unknown network segment"
					"[event][id]" => "dhcpd:44"
					"[rsa][message][id1]" => "dhcpd:44"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:45
		# line in RSA: Reverse map update for<hostip>abandoned because of non-retryable failure:<disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Reverse map update for%{hostip}abandoned because of non-retryable failure:%{disposition}" }
				id => "message-dhcpd:45"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:45"
					"[rsa][message][id1]" => "dhcpd:45"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:46
		# line in RSA: Reclaiming REQUESTed abandoned IP address<saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Reclaiming REQUESTed abandoned IP address%{saddr}" }
				id => "message-dhcpd:46"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Reclaiming REQUESTed abandoned IP address"
					"[event][id]" => "dhcpd:46"
					"[rsa][message][id1]" => "dhcpd:46"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:47
		# line in RSA: <hostip>: removing client association (<action>){uid=<fld1>hw=<macaddr>|hw=<macaddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostip>[^:]*):[\s]+removing[\s]+client[\s]+association[\s]+\((?<action>[^\)]*)\)(uid=(?<fld1>[^h]*)hw=(?<macaddr>.*)|hw=(?<macaddr>.*))$" }
				id => "message-dhcpd:47"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:47"
					"[rsa][message][id1]" => "dhcpd:47"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:48
		# line in RSA: Lease conflict at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lease conflict at %{hostip}" }
				id => "message-dhcpd:48"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:48"
					"[rsa][message][id1]" => "dhcpd:48"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:49
		# line in RSA: ICMP Echo reply while lease <hostip> valid.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ICMP Echo reply while lease %{hostip} valid." }
				id => "message-dhcpd:49"
				add_field => {
				"event_source" => "%{hhostname}"
				"protocol" => "ICMP"
					"[event][id]" => "dhcpd:49"
					"[rsa][message][id1]" => "dhcpd:49"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:50
		# line in RSA: Lease state <result>. Not abandoning <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lease state %{result}. Not abandoning %{hostip}" }
				id => "message-dhcpd:50"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:50"
					"[rsa][message][id1]" => "dhcpd:50"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:51
		# line in RSA: {Addition|Removal} of {forward|reverse} map for <hostip> deferred
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Addition|Removal)[\s]+of[\s]+(forward|reverse)[\s]+map[\s]+for[\s]+(?<hostip>[^\s]*)[\s]+deferred$" }
				id => "message-dhcpd:51"
				add_field => {
				"event_source" => "%{hhostname}"
				"disposition" => "deferred"
					"[event][id]" => "dhcpd:51"
					"[rsa][message][id1]" => "dhcpd:51"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:52
		# line in RSA: Hostname<change_old>replaced by<hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Hostname%{change_old}replaced by%{hostname}" }
				id => "message-dhcpd:52"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:52"
					"[rsa][message][id1]" => "dhcpd:52"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpd:37
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-dhcpd:37"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpd:37"
					"[rsa][message][id1]" => "dhcpd:37"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "ntpd" {
		# MESSAGE ntpd:05
		# line in RSA:  system event '<event_type>' (<fld1>) status '<result>' (<fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "system event '%{event_type}' (%{fld1}) status '%{result}' (%{fld2})" }
				id => "message-ntpd:05"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "system event status"
					"[event][id]" => "ntpd:05"
					"[rsa][message][id1]" => "ntpd:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ntpd:04
		# line in RSA:  frequency initialized <result> from <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "frequency initialized %{result} from %{filename}" }
				id => "message-ntpd:04"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "frequency initialized from file"
					"[event][id]" => "ntpd:04"
					"[rsa][message][id1]" => "ntpd:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ntpd:03
		# line in RSA:  ntpd exiting on signal <dclass_counter1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ntpd exiting on signal %{dclass_counter1}" }
				id => "message-ntpd:03"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "ntpd exiting on signal"
					"[event][id]" => "ntpd:03"
					"[rsa][message][id1]" => "ntpd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ntpd
		# line in RSA:  time slew <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "time slew %{result}" }
				id => "message-ntpd"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "time slew duraion"
					"[event][id]" => "ntpd"
					"[rsa][message][id1]" => "ntpd"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ntpd:01
		# line in RSA:  <process>: signal <dclass_counter1> had flags <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: signal %{dclass_counter1} had flags %{result}" }
				id => "message-ntpd:01"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "signal had flags"
					"[event][id]" => "ntpd:01"
					"[rsa][message][id1]" => "ntpd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ntpd:02
		# line in RSA:  <event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-ntpd:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "ntpd:02"
					"[rsa][message][id1]" => "ntpd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "named" {
		# MESSAGE named:16
		# line in RSA:   client <saddr>#<sport>:<fld1>: update '<zone>' {approved | denied}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#(?<sport>[^:]*):(?<fld1>[^:]*):[\s]+update[\s]+'(?<zone>[^']*)'[\s]+(approved[\s]+|[\s]*denied)$" }
				id => "message-named:16"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:16"
					"[rsa][message][id1]" => "named:16"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named
		# line in RSA:   client <saddr>#<sport>: update '<zone>/IN' {approved | denied}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#(?<sport>[^:]*):[\s]+update[\s]+'(?<zone>[^/]*)/IN'[\s]+(approved[\s]+|[\s]*denied)$" }
				id => "message-named"
				add_field => {
				"event_source" => "%{hhostname}"
				"domain" => "%{zone}"
					"[event][id]" => "named"
					"[rsa][message][id1]" => "named"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:12
		# line in RSA:   client <saddr>#<sport>/key dhcp_updater_default: signer "<owner>" {approved | denied}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#(?<sport>[^/]*)/key[\s]+dhcp_updater_default:[\s]+signer[\s]+\"(?<owner>[^\"]*)\"[\s]+(approved[\s]+|[\s]*denied)$" }
				id => "message-named:12"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:12"
					"[rsa][message][id1]" => "named:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:01
		# line in RSA:   client <saddr>#{<sport>/<fld1>|<sport>}: signer "<owner>" {approved | denied}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#((?<sport>[^/]*)/(?<fld1>[^:]*)|(?<sport>[^:]*)):[\s]+signer[\s]+\"(?<owner>[^\"]*)\"[\s]+(approved[\s]+|[\s]*denied)$" }
				id => "message-named:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:01"
					"[rsa][message][id1]" => "named:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:17
		# line in RSA:   client <saddr>#<sport>/<fld1>: updating zone '<zone>/{IN|CH|HS}': {<fld2>: <action>|<action>} at '{<hostip>.in-addr.arpa|<hostname>}' {<dns_querytype> "<fld3>"|<dns_querytype> <hostip>|<dns_querytype>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#(?<sport>[^/]*)/(?<fld1>[^:]*):[\s]+updating[\s]+zone[\s]+'(?<zone>[^/]*)/(IN|CH|HS)':[\s]+((?<fld2>[^:]*):[\s]+(?<action>[^\s]*)|(?<action>[^\s]*))[\s]+at[\s]+'((?<hostip>[^\.]*)\.in\-addr\.arpa|(?<hostname>[^']*))'[\s]+((?<dns_querytype>[^\s]*)[\s]+\"(?<fld3>[^\"]*)\"|(?<dns_querytype>[^\s]*)[\s]+(?<hostip>.*)|(?<dns_querytype>.*))$" }
				id => "message-named:17"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "updating zone"
				"domain" => "%{zone}"
					"[event][id]" => "named:17"
					"[rsa][message][id1]" => "named:17"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:18
		# line in RSA:   client <saddr>#<sport>:<fld1>: updating zone '<zone>': { adding | deleting} <info> at '<hostname>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#(?<sport>[^:]*):(?<fld1>[^:]*):[\s]+updating[\s]+zone[\s]+'(?<zone>[^']*)':[\s]+([\s]*adding[\s]+|[\s]*deleting)[\s]+(?<info>[^\s]*)[\s]+at[\s]+'(?<hostname>[^']*)'$" }
				id => "message-named:18"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:18"
					"[rsa][message][id1]" => "named:18"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:02
		# line in RSA:   client <saddr>#<sport>: updating zone '<zone>/{IN|CH|HS}':{<fld1>: <action>|<action>} at '{<hostip>.in-addr.arpa|<hostip>}' {<dns_querytype> "<fld3>"|<dns_querytype> <hostip>|<dns_querytype>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#(?<sport>[^:]*):[\s]+updating[\s]+zone[\s]+'(?<zone>[^/]*)/(IN|CH|HS)':((?<fld1>[^:]*):[\s]+(?<action>[^\s]*)|(?<action>[^\s]*))[\s]+at[\s]+'((?<hostip>[^\.]*)\.in\-addr\.arpa|(?<hostip>[^']*))'[\s]+((?<dns_querytype>[^\s]*)[\s]+\"(?<fld3>[^\"]*)\"|(?<dns_querytype>[^\s]*)[\s]+(?<hostip>.*)|(?<dns_querytype>.*))$" }
				id => "message-named:02"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "updating zone"
				"domain" => "%{zone}"
					"[event][id]" => "named:02"
					"[rsa][message][id1]" => "named:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:19
		# line in RSA:   client <saddr>#<sport>/<fld1>: updating zone '<zone>': update <disposition>: {<hostname>/<dns_querytype>|<hostname>}: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#(?<sport>[^/]*)/(?<fld1>[^:]*):[\s]+updating[\s]+zone[\s]+'(?<zone>[^']*)':[\s]+update[\s]+(?<disposition>[^:]*):[\s]+((?<hostname>[^/]*)/(?<dns_querytype>[^:]*)|(?<hostname>[^:]*)):[\s]+(?<event_description>.*)$" }
				id => "message-named:19"
				add_field => {
				"event_source" => "%{hhostname}"
				"domain" => "%{hostname}"
					"[event][id]" => "named:19"
					"[rsa][message][id1]" => "named:19"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:03
		# line in RSA:   client <saddr>#<sport>: updating zone '<zone>': update <disposition>: <hostname>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport}: updating zone '%{zone}': update %{disposition}: %{hostname}: %{event_description}" }
				id => "message-named:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:03"
					"[rsa][message][id1]" => "named:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:11
		# line in RSA:  zone <zone>: notify from <saddr>#<sport>: zone is up to date
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "zone %{zone}: notify from %{saddr}#%{sport}: zone is up to date" }
				id => "message-named:11"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "notify zone is up to date"
					"[event][id]" => "named:11"
					"[rsa][message][id1]" => "named:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:13
		# line in RSA:  zone <zone>: notify from <saddr>#<sport>: <action>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "zone %{zone}: notify from %{saddr}#%{sport}: %{action}, %{event_description}" }
				id => "message-named:13"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:13"
					"[rsa][message][id1]" => "named:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:14
		# line in RSA:  zone <zone>: refresh: retry limit for master <saddr>#<sport> exceeded (<action>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "zone %{zone}: refresh: retry limit for master %{saddr}#%{sport} exceeded (%{action})" }
				id => "message-named:14"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:14"
					"[rsa][message][id1]" => "named:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:15
		# line in RSA:  zone <zone>: refresh: failure trying master <saddr>#<sport> (source ::#0): <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "zone %{zone}: refresh: failure trying master %{saddr}#%{sport} (source ::#0): %{action}" }
				id => "message-named:15"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:15"
					"[rsa][message][id1]" => "named:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:25
		# line in RSA: DNS format error from <saddr>#<sport> resolving <domain>/<dns_querytype> for client <daddr>#<dport>: {<error>--<result>|<result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DNS[\s]+format[\s]+error[\s]+from[\s]+(?<saddr>[^#]*)#(?<sport>[^\s]*)[\s]+resolving[\s]+(?<domain>[^/]*)/(?<dns_querytype>[^\s]*)[\s]+for[\s]+client[\s]+(?<daddr>[^#]*)#(?<dport>[^:]*):[\s]+((?<error>[^\-]*)\-\-(?<result>.*)|(?<result>.*))$" }
				id => "message-named:25"
				add_field => {
				"ec_activity" => "Request"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhostname}"
				"event_description" => "DNS format error"
					"[event][id]" => "named:25"
					"[rsa][message][id1]" => "named:25"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:63
		# line in RSA: <fld1> <fld2> <fld3>: <severity>: client {<fld9> <saddr>#| <saddr>#}<sport> (#<fld5>): query: <domain> <fld4> (<daddr>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^:]*):[\s]+(?<severity>[^:]*):[\s]+client[\s]+((?<fld9>[^\s]*)[\s]+(?<saddr>[^#]*)#|[\s]*(?<saddr>[^#]*)#)(?<sport>[^\s]*)[\s]+\(#(?<fld5>[^\)]*)\):[\s]+query:[\s]+(?<domain>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+\((?<daddr>[^\)]*)\)$" }
				id => "message-named:63"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:63"
					"[rsa][message][id1]" => "named:63"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:72
		# line in RSA: client <saddr>#<sport> (<fld1>): {view<fld3>: query:|query:} <domain> <fld2> <dns_querytype> <context> (<daddr>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^client[\s]+(?<saddr>[^#]*)#(?<sport>[^\s]*)[\s]+\((?<fld1>[^\)]*)\):[\s]+(view(?<fld3>[^:]*):[\s]+query:|query:)[\s]+(?<domain>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<dns_querytype>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\((?<daddr>[^\)]*)\)$" }
				id => "message-named:72"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:72"
					"[rsa][message][id1]" => "named:72"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:28
		# line in RSA:   <action> (<saddr>#<sport>) <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action} (%{saddr}#%{sport}) %{event_description}" }
				id => "message-named:28"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:28"
					"[rsa][message][id1]" => "named:28"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:71
		# line in RSA: transfer of '<zone>' from <saddr>#<sport>: {failed to connect: <result>|failed while receiving responses: <result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^transfer[\s]+of[\s]+'(?<zone>[^']*)'[\s]+from[\s]+(?<saddr>[^#]*)#(?<sport>[^:]*):[\s]+(failed[\s]+to[\s]+connect:[\s]+(?<result>.*)|failed[\s]+while[\s]+receiving[\s]+responses:[\s]+(?<result>.*))$" }
				id => "message-named:71"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "failed"
					"[event][id]" => "named:71"
					"[rsa][message][id1]" => "named:71"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:70
		# line in RSA: transfer of '<zone>' from <saddr>#<sport>: {connected using <daddr>#<dport>|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^transfer[\s]+of[\s]+'(?<zone>[^']*)'[\s]+from[\s]+(?<saddr>[^#]*)#(?<sport>[^:]*):[\s]+(connected[\s]+using[\s]+(?<daddr>[^#]*)#(?<dport>.*)|(?<event_description>.*))$" }
				id => "message-named:70"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:70"
					"[rsa][message][id1]" => "named:70"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:40
		# line in RSA:  <fld1> client <saddr>#<sport>: {view <fld2>: <protocol>|<protocol>}: query: <domain> <fld3> <dns_querytype> response:<result> {<context> <dns.resptext>|<context>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+client[\s]+(?<saddr>[^#]*)#(?<sport>[^:]*):[\s]+(view[\s]+(?<fld2>[^:]*):[\s]+(?<protocol>[^:]*)|(?<protocol>[^:]*)):[\s]+query:[\s]+(?<domain>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<dns_querytype>[^\s]*)[\s]+response:(?<result>[^\s]*)[\s]+((?<context>[^\s]*)[\s]+(?<dns.resptext>.*)|(?<context>.*))$" }
				id => "message-named:40"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:40"
					"[rsa][message][id1]" => "named:40"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:05
		# line in RSA:  zone '<zone>' <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "zone '%{zone}' %{event_description}" }
				id => "message-named:05"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:05"
					"[rsa][message][id1]" => "named:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:10
		# line in RSA:  client <saddr>#{<sport> <fld22>/<fld21>:|<sport>/<fld21>:|<sport> (<fld21>): |<sport>:} query: <domain> <info> (<daddr>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#((?<sport>[^\s]*)[\s]+(?<fld22>[^/]*)/(?<fld21>[^:]*):|(?<sport>[^/]*)/(?<fld21>[^:]*):|(?<sport>[^\s]*)[\s]+\((?<fld21>[^\)]*)\):[\s]+|(?<sport>[^:]*):)[\s]+query:[\s]+(?<domain>[^\s]*)[\s]+(?<info>[^\s]*)[\s]+\((?<daddr>[^\)]*)\)$" }
				id => "message-named:10"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "dns query"
					"[event][id]" => "named:10"
					"[rsa][message][id1]" => "named:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:29
		# line in RSA:  client <saddr>#<sport>: <fld1>: received notify for zone '<zone>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport}: %{fld1}: received notify for zone '%{zone}'" }
				id => "message-named:29"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "received notify for zone"
					"[event][id]" => "named:29"
					"[rsa][message][id1]" => "named:29"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:08
		# line in RSA:  client <saddr>#<sport>: received notify for zone '<zone>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport}: received notify for zone '%{zone}'" }
				id => "message-named:08"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "client received notify for zone"
					"[event][id]" => "named:08"
					"[rsa][message][id1]" => "named:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:09
		# line in RSA:  client <saddr>#<sport>: update forwarding '<zone>' denied
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport}: update forwarding '%{zone}' denied" }
				id => "message-named:09"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "client update forwarding for zone denied"
					"[event][id]" => "named:09"
					"[rsa][message][id1]" => "named:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:76
		# line in RSA:   zone <zone>: ZRQ {applied|applying} transaction {<operation_id> with SOA serial <serial_number>. Zone version is now <version>.|<fld1>.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*zone[\s]+(?<zone>[^:]*):[\s]+ZRQ[\s]+(applied|applying)[\s]+transaction[\s]+((?<operation_id>[^\s]*)[\s]+with[\s]+SOA[\s]+serial[\s]+(?<serial_number>[^\.]*)\.[\s]+Zone[\s]+version[\s]+is[\s]+now[\s]+(?<version>[^\.]*)\.|(?<fld1>[^\.]*)\.)$" }
				id => "message-named:76"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:76"
					"[rsa][message][id1]" => "named:76"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:75
		# line in RSA:   zone <zone>: ZRQ applied <action> for '<fld1>': <fld2> <fld3> <dns_querytype> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "zone %{zone}: ZRQ applied %{action} for '%{fld1}': %{fld2} %{fld3} %{dns_querytype} %{info}" }
				id => "message-named:75"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:75"
					"[rsa][message][id1]" => "named:75"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:06
		# line in RSA:   {zone_<fld1>|zone <zone>}: <event_description> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(zone_(?<fld1>[^:]*)|zone[\s]+(?<zone>[^:]*)):[\s]+(?<event_description>[^\s]*)[\s]+$" }
				id => "message-named:06"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:06"
					"[rsa][message][id1]" => "named:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:20
		# line in RSA: REFUSED unexpected RCODE resolving '<saddr>.in-addr.arpa/<event_description>/IN': <daddr>#<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "REFUSED unexpected RCODE resolving '%{saddr}.in-addr.arpa/%{event_description}/IN': %{daddr}#%{dport}" }
				id => "message-named:20"
				add_field => {
				"ec_activity" => "Request"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhostname}"
				"action" => "Refused"
				"dns_querytype" => "%{event_description}"
					"[event][id]" => "named:20"
					"[rsa][message][id1]" => "named:20"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:49
		# line in RSA: REFUSED unexpected RCODE resolving '<zone>/<dns_querytype>/IN': {<daddr>#<dport>|<fld1>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^REFUSED[\s]+unexpected[\s]+RCODE[\s]+resolving[\s]+'(?<zone>[^/]*)/(?<dns_querytype>[^/]*)/IN':[\s]+((?<daddr>[^#]*)#(?<dport>.*)|(?<fld1>.*))$" }
				id => "message-named:49"
				add_field => {
				"ec_activity" => "Request"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhostname}"
				"action" => "Refused"
				"domain" => "%{zone}"
					"[event][id]" => "named:49"
					"[rsa][message][id1]" => "named:49"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:24
		# line in RSA: client <saddr>#<sport> {(<domain>): <fld2>: zone transfer|(<domain>): zone transfer} '<zone>' <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^client[\s]+(?<saddr>[^#]*)#(?<sport>[^\s]*)[\s]+(\((?<domain>[^\)]*)\):[\s]+(?<fld2>[^:]*):[\s]+zone[\s]+transfer|\((?<domain>[^\)]*)\):[\s]+zone[\s]+transfer)[\s]+'(?<zone>[^']*)'[\s]+(?<action>.*)$" }
				id => "message-named:24"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:24"
					"[rsa][message][id1]" => "named:24"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:26
		# line in RSA: client <saddr>#<sport> {(<domain>): <fld2>: no more recursive clients |(<domain>): no more recursive clients} (<fld3>) <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^client[\s]+(?<saddr>[^#]*)#(?<sport>[^\s]*)[\s]+(\((?<domain>[^\)]*)\):[\s]+(?<fld2>[^:]*):[\s]+no[\s]+more[\s]+recursive[\s]+clients[\s]+|\((?<domain>[^\)]*)\):[\s]+no[\s]+more[\s]+recursive[\s]+clients)[\s]+\((?<fld3>[^\)]*)\)[\s]+(?<info>.*)$" }
				id => "message-named:26"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:26"
					"[rsa][message][id1]" => "named:26"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:27
		# line in RSA: client <saddr>#<sport> {(<domain>): <fld2> : <fld3>|(<domain>): <fld3>} response from Internet for <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^client[\s]+(?<saddr>[^#]*)#(?<sport>[^\s]*)[\s]+(\((?<domain>[^\)]*)\):[\s]+(?<fld2>[^\s]*)[\s]+:[\s]+(?<fld3>[^\s]*)|\((?<domain>[^\)]*)\):[\s]+(?<fld3>[^\s]*))[\s]+response[\s]+from[\s]+Internet[\s]+for[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-named:27"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:27"
					"[rsa][message][id1]" => "named:27"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:38
		# line in RSA: <fld1> <fld2> <fld3>: <severity>: client {<fld9> <saddr>#| <saddr>#}{<sport>#<fld5> (<fld6>):|<sport> (<fld5>):|<sport>:} {query (<fld7>) '<domain>/<fld4>' <result>|query: <domain>  <fld4> (<daddr>)} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^:]*):[\s]+(?<severity>[^:]*):[\s]+client[\s]+((?<fld9>[^\s]*)[\s]+(?<saddr>[^#]*)#|[\s]*(?<saddr>[^#]*)#)((?<sport>[^#]*)#(?<fld5>[^\s]*)[\s]+\((?<fld6>[^\)]*)\):|(?<sport>[^\s]*)[\s]+\((?<fld5>[^\)]*)\):|(?<sport>[^:]*):)[\s]+(query[\s]+\((?<fld7>[^\)]*)\)[\s]+'(?<domain>[^/]*)/(?<fld4>[^']*)'[\s]+(?<result>[^\s]*)|query:[\s]+(?<domain>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+\((?<daddr>[^\)]*)\))[\s]+$" }
				id => "message-named:38"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:38"
					"[rsa][message][id1]" => "named:38"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:39
		# line in RSA:  <fld1> <fld2> <fld3>: <severity>: error (<result>) resolving '<saddr>.in-addr.arpa/<event_description>/IN': <daddr>#<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3}: %{severity}: error (%{result}) resolving '%{saddr}.in-addr.arpa/%{event_description}/IN': %{daddr}#%{dport}" }
				id => "message-named:39"
				add_field => {
				"ec_activity" => "Request"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhostname}"
				"action" => "Refused"
					"[event][id]" => "named:39"
					"[rsa][message][id1]" => "named:39"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:46
		# line in RSA: <event_description>: Authorization denied for the operation (<fld4>): <fld5> (data="<hostip>", source="<hostname>")
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}: Authorization denied for the operation (%{fld4}): %{fld5} (data=\"%{hostip}\", source=\"%{hostname}\")" }
				id => "message-named:46"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:46"
					"[rsa][message][id1]" => "named:46"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:64
		# line in RSA:   client <saddr>#<sport>/<fld1>: updating zone '<zone>': deleting <info> at <hostname> <dns_querytype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport}/%{fld1}: updating zone '%{zone}': deleting %{info} at %{hostname} %{dns_querytype}" }
				id => "message-named:64"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:64"
					"[rsa][message][id1]" => "named:64"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:45
		# line in RSA:   client <saddr>#<sport>: updating zone '<zone>': deleting <info> at <hostname> <dns_querytype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport}: updating zone '%{zone}': deleting %{info} at %{hostname} %{dns_querytype}" }
				id => "message-named:45"
				add_field => {
				"event_source" => "%{hhostname}"
				"domain" => "%{hostname}"
					"[event][id]" => "named:45"
					"[rsa][message][id1]" => "named:45"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:44
		# line in RSA:  client <saddr>#<sport>/key dhcp_updater_default: updating zone {'<domain>/IN'|'<domain>'}: {deleting an RR at <daddr>.in-addr.arpa |deleting an RR at <daddr>.<fld6> |<fld5>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*client[\s]+(?<saddr>[^#]*)#(?<sport>[^/]*)/key[\s]+dhcp_updater_default:[\s]+updating[\s]+zone[\s]+('(?<domain>[^/]*)/IN'|'(?<domain>[^']*)'):[\s]+(deleting[\s]+an[\s]+RR[\s]+at[\s]+(?<daddr>[^\.]*)\.in\-addr\.arpa[\s]+|deleting[\s]+an[\s]+RR[\s]+at[\s]+(?<daddr>[^\.]*)\.(?<fld6>[^\s]*)[\s]+|(?<fld5>.*))$" }
				id => "message-named:44"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:44"
					"[rsa][message][id1]" => "named:44"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:43
		# line in RSA:  client <saddr>#<sport> (<domain>): query (<fld3>) '<fld4>/<dns_querytype>/IN' <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport} (%{domain}): query (%{fld3}) '%{fld4}/%{dns_querytype}/IN' %{result}" }
				id => "message-named:43"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:43"
					"[rsa][message][id1]" => "named:43"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:42
		# line in RSA: <result> resolving '<saddr>.in-addr.arpa/<event_description>/IN': <daddr>#<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{result} resolving '%{saddr}.in-addr.arpa/%{event_description}/IN': %{daddr}#%{dport}" }
				id => "message-named:42"
				add_field => {
				"event_source" => "%{hhostname}"
				"dns_querytype" => "%{event_description}"
					"[event][id]" => "named:42"
					"[rsa][message][id1]" => "named:42"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:41
		# line in RSA:  <fld1>: unable to find root NS '<domain>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: unable to find root NS '%{domain}'" }
				id => "message-named:41"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:41"
					"[rsa][message][id1]" => "named:41"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:47
		# line in RSA: client <saddr>#<sport>: updating zone '<zone>': update <disposition>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport}: updating zone '%{zone}': update %{disposition}: %{event_description}" }
				id => "message-named:47"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:47"
					"[rsa][message][id1]" => "named:47"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:48
		# line in RSA: client <saddr>#<sport> (<hostname>): query '<zone>' <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport} (%{hostname}): query '%{zone}' %{result}" }
				id => "message-named:48"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:48"
					"[rsa][message][id1]" => "named:48"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:62
		# line in RSA: client <saddr>#<sport>/<fld1> (<hostname>): transfer of '<zone>': <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport}/%{fld1} (%{hostname}): transfer of '%{zone}': %{info}" }
				id => "message-named:62"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:62"
					"[rsa][message][id1]" => "named:62"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:53
		# line in RSA: client <saddr>#<sport> (<hostname>): transfer of '<zone>': <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport} (%{hostname}): transfer of '%{zone}': %{info}" }
				id => "message-named:53"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:53"
					"[rsa][message][id1]" => "named:53"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:77
		# line in RSA: client <saddr>#<sport> (<domain>): query failed (<error>) for <fld1>/IN/<dns_querytype> at <filename>:<fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport} (%{domain}): query failed (%{error}) for %{fld1}/IN/%{dns_querytype} at %{filename}:%{fld2}" }
				id => "message-named:77"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => " query failed"
					"[event][id]" => "named:77"
					"[rsa][message][id1]" => "named:77"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:52
		# line in RSA: client <saddr>#<sport> (<hostname>): <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client %{saddr}#%{sport} (%{hostname}): %{info}" }
				id => "message-named:52"
				add_field => {
				"event_source" => "%{hhostname}"
				"domain" => "%{hostname}"
					"[event][id]" => "named:52"
					"[rsa][message][id1]" => "named:52"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:50
		# line in RSA: <fld1>: <domain>/<dns_querytype> (<saddr>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: %{domain}/%{dns_querytype} (%{saddr}) %{info}" }
				id => "message-named:50"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:50"
					"[rsa][message][id1]" => "named:50"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:51
		# line in RSA: <fld1>: <fld2>: REFUSED
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: %{fld2}: REFUSED" }
				id => "message-named:51"
				add_field => {
				"event_source" => "%{hhostname}"
				"ec_activity" => "Request"
				"ec_outcome" => "Failure"
				"action" => "Refused"
					"[event][id]" => "named:51"
					"[rsa][message][id1]" => "named:51"
					"[event][categoryid]" => "1901000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:54
		# line in RSA: <hostip>#<network_port>: GSS-TSIG authentication failed:<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}#%{network_port}: GSS-TSIG authentication failed:%{event_description}" }
				id => "message-named:54"
				add_field => {
				"event_source" => "%{hhostname}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "named:54"
					"[rsa][message][id1]" => "named:54"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:55
		# line in RSA: success resolving '<domain>/<dns_querytype>' (in '<fld1>'?) {after disabling EDNS|<fld2>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^success[\s]+resolving[\s]+'(?<domain>[^/]*)/(?<dns_querytype>[^']*)'[\s]+\(in[\s]+'(?<fld1>[^']*)'\?\)[\s]+(after[\s]+disabling[\s]+EDNS|(?<fld2>.*))$" }
				id => "message-named:55"
				add_field => {
				"event_source" => "%{hhostname}"
				"ec_outcome" => "Success"
				"zone" => "%{domain}"
					"[event][id]" => "named:55"
					"[rsa][message][id1]" => "named:55"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:56
		# line in RSA: SERVFAIL unexpected RCODE resolving '<domain>/<dns_querytype>/IN':<hostip>#<network_port>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SERVFAIL unexpected RCODE resolving '%{domain}/%{dns_querytype}/IN':%{hostip}#%{network_port}" }
				id => "message-named:56"
				add_field => {
				"event_source" => "%{hhostname}"
				"ec_activity" => "Request"
				"ec_outcome" => "Failure"
				"zone" => "%{domain}"
					"[event][id]" => "named:56"
					"[rsa][message][id1]" => "named:56"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:57
		# line in RSA: FORMERR resolving '<domain>/<dns_querytype>/IN':<hostip>#<network_port>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FORMERR resolving '%{domain}/%{dns_querytype}/IN':%{hostip}#%{network_port}" }
				id => "message-named:57"
				add_field => {
				"event_source" => "%{hhostname}"
				"ec_outcome" => "Error"
				"zone" => "%{domain}"
					"[event][id]" => "named:57"
					"[rsa][message][id1]" => "named:57"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:04
		# line in RSA:   <action> on {IPv4 interface <sinterface>, <saddr>|<saddr>}#<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<action>[^\s]*)[\s]+on[\s]+(IPv4[\s]+interface[\s]+(?<sinterface>[^,]*),[\s]+(?<saddr>[^#]*)|(?<saddr>[^#]*))#(?<sport>.*)$" }
				id => "message-named:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:04"
					"[rsa][message][id1]" => "named:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE named:58
		# line in RSA: lame server resolving '<domain>' (in '<fld2>'?):<hostip>#<network_port>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "lame server resolving '%{domain}' (in '%{fld2}'?):%{hostip}#%{network_port}" }
				id => "message-named:58"
				add_field => {
				"event_source" => "%{hhostname}"
				"zone" => "%{domain}"
					"[event][id]" => "named:58"
					"[rsa][message][id1]" => "named:58"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:59
		# line in RSA: exceeded max queries resolving '<domain>/<dns_querytype>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "exceeded max queries resolving '%{domain}/%{dns_querytype}'" }
				id => "message-named:59"
				add_field => {
				"event_source" => "%{hhostname}"
				"zone" => "%{domain}"
					"[event][id]" => "named:59"
					"[rsa][message][id1]" => "named:59"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:60
		# line in RSA: skipping nameserver '<hostname>' because it is a CNAME, while resolving '<domain>/<dns_querytype>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "skipping nameserver '%{hostname}' because it is a CNAME, while resolving '%{domain}/%{dns_querytype}'" }
				id => "message-named:60"
				add_field => {
				"event_source" => "%{hhostname}"
				"zone" => "%{domain}"
				"event_description" => "skipping nameserver because it is a CNAME"
					"[event][id]" => "named:60"
					"[rsa][message][id1]" => "named:60"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:61
		# line in RSA:  loading configuration from '<filename>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "loading configuration from '%{filename}'" }
				id => "message-named:61"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:61"
					"[rsa][message][id1]" => "named:61"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:73
		# line in RSA:  fetch: <zone>/<dns_querytype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "fetch: %{zone}/%{dns_querytype}" }
				id => "message-named:73"
				add_field => {
				"event_source" => "%{hhostname}"
				"domain" => "%{zone}"
					"[event][id]" => "named:73"
					"[rsa][message][id1]" => "named:73"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:74
		# line in RSA:  decrement_reference: delete from rbt: <fld1> <domain>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "decrement_reference: delete from rbt: %{fld1} %{domain}" }
				id => "message-named:74"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:74"
					"[rsa][message][id1]" => "named:74"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE named:07
		# line in RSA:  {client <saddr>#<sport> (<hostname>): view <fld2>: query: <web_query>|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(client[\s]+(?<saddr>[^#]*)#(?<sport>[^\s]*)[\s]+\((?<hostname>[^\)]*)\):[\s]+view[\s]+(?<fld2>[^:]*):[\s]+query:[\s]+(?<web_query>.*)|(?<event_description>.*))$" }
				id => "message-named:07"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "named:07"
					"[rsa][message][id1]" => "named:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "pidof" {
		# MESSAGE pidof:01
		# line in RSA:  can't read sid from <agent>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "can't read sid from %{agent}" }
				id => "message-pidof:01"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "can't read sid"
					"[event][id]" => "pidof:01"
					"[rsa][message][id1]" => "pidof:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE pidof
		# line in RSA:  can't get program name from <agent>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "can't get program name from %{agent}" }
				id => "message-pidof"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "pidof"
					"[rsa][message][id1]" => "pidof"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "validate_dhcpd" {
		# MESSAGE validate_dhcpd:01
		# line in RSA:   Configured local-address not available as source address for DNS updates. <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configured local-address not available as source address for DNS updates. %{result}" }
				id => "message-validate_dhcpd:01"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Configured local-address not available as source address for DNS updates"
					"[event][id]" => "validate_dhcpd:01"
					"[rsa][message][id1]" => "validate_dhcpd:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE validate_dhcpd
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-validate_dhcpd"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "validate_dhcpd"
					"[rsa][message][id1]" => "validate_dhcpd"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA:  <event_description>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId7"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "kernel" {
		# MESSAGE kernel
		# line in RSA:   Linux version <version> (<from>) (<fld1>) <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Linux version %{version} (%{from}) (%{fld1}) %{fld2}" }
				id => "message-kernel"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "kernel"
					"[rsa][message][id1]" => "kernel"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE kernel:01
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-kernel:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "kernel:01"
					"[rsa][message][id1]" => "kernel:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId120
	# line in RSA:  <event_description> 
	else if [logstash][msgparser][id] == "msgParserId120" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId120"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId121
	# line in RSA:  executing <agent> start
	else if [logstash][msgparser][id] == "msgParserId121" {
		dissect {
			mapping => { "message" => "executing %{agent} start" }
			id => "msgParserId121"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId118
	# line in RSA:   <event_description>
	else if [logstash][msgparser][id] == "msgParserId118" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId118"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "rcsysinit" {
		# MESSAGE rcsysinit
		# line in RSA:   fsck from <version>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "fsck from %{version}" }
				id => "message-rcsysinit"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "rcsysinit"
					"[rsa][message][id1]" => "rcsysinit"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE rcsysinit:01
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-rcsysinit:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "rcsysinit:01"
					"[rsa][message][id1]" => "rcsysinit:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "watchdog" {
		# MESSAGE watchdog
		# line in RSA:   opened <filename>, with timeout = <duration> secs
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "opened %{filename}, with timeout = %{duration} secs" }
				id => "message-watchdog"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "watchdog"
					"[rsa][message][id1]" => "watchdog"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE watchdog:01
		# line in RSA:   <action>, pid = <process_id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action}, pid = %{process_id}" }
				id => "message-watchdog:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "watchdog:01"
					"[rsa][message][id1]" => "watchdog:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE watchdog:02
		# line in RSA:   received <fld1>, cancelling softdog and exiting...
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "received %{fld1}, cancelling softdog and exiting..." }
				id => "message-watchdog:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "watchdog:02"
					"[rsa][message][id1]" => "watchdog:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE watchdog:03
		# line in RSA:   <filename> could not be opened, errno = <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{filename} could not be opened, errno = %{resultcode}" }
				id => "message-watchdog:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "watchdog:03"
					"[rsa][message][id1]" => "watchdog:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE watchdog:04
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-watchdog:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "watchdog:04"
					"[rsa][message][id1]" => "watchdog:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "logger" {
		# MESSAGE logger
		# line in RSA:   <action>: <saddr>/<mask> to <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action}: %{saddr}/%{mask} to %{interface}" }
				id => "message-logger"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "logger"
					"[rsa][message][id1]" => "logger"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE logger:01
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-logger:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "logger:01"
					"[rsa][message][id1]" => "logger:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "openvpn-member" {
		# MESSAGE openvpn-member
		# line in RSA:   read <protocol> [<info>] <event_description> (code=<resultcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "read %{protocol} [%{info}] %{event_description} (code=%{resultcode})" }
				id => "message-openvpn-member"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-member"
					"[rsa][message][id1]" => "openvpn-member"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-member:01
		# line in RSA:   <action> : <event_description> (code=<resultcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action} : %{event_description} (code=%{resultcode})" }
				id => "message-openvpn-member:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-member:01"
					"[rsa][message][id1]" => "openvpn-member:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-member:02
		# line in RSA:   Options error: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Options error: %{event_description}" }
				id => "message-openvpn-member:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-member:02"
					"[rsa][message][id1]" => "openvpn-member:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-member:03
		# line in RSA:   OpenVPN <version> [<protocol>] [<fld2>] <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "OpenVPN %{version} [%{protocol}] [%{fld2}] %{info}" }
				id => "message-openvpn-member:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-member:03"
					"[rsa][message][id1]" => "openvpn-member:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-member:04
		# line in RSA:   <severity>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}: %{event_description}" }
				id => "message-openvpn-member:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-member:04"
					"[rsa][message][id1]" => "openvpn-member:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-member:05
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-openvpn-member:05"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-member:05"
					"[rsa][message][id1]" => "openvpn-member:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd" {
		# MESSAGE sshd
		# line in RSA:   Server listening on <hostip> port <network_port>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server listening on %{hostip} port %{network_port}." }
				id => "message-sshd"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sshd"
					"[rsa][message][id1]" => "sshd"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:01
		# line in RSA:   Accepted password for {root|<username>} from <saddr> port <sport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Accepted[\s]+password[\s]+for[\s]+(root|(?<username>[^\s]*))[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-sshd:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sshd:01"
					"[rsa][message][id1]" => "sshd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:02
		# line in RSA:   Connection closed by <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connection closed by %{hostip}" }
				id => "message-sshd:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sshd:02"
					"[rsa][message][id1]" => "sshd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:03
		# line in RSA:   <severity>: Bind to port <network_port> on <hostip> <result>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}: Bind to port %{network_port} on %{hostip} %{result}: %{event_description}" }
				id => "message-sshd:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sshd:03"
					"[rsa][message][id1]" => "sshd:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:04
		# line in RSA:   <severity>: Cannot bind any address.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}: Cannot bind any address." }
				id => "message-sshd:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sshd:04"
					"[rsa][message][id1]" => "sshd:04"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:05
		# line in RSA:  <action>: logout() <result> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action}: logout() %{result}" }
				id => "message-sshd:05"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhostname}"
				"event_description" => "logout"
					"[event][id]" => "sshd:05"
					"[rsa][message][id1]" => "sshd:05"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:06
		# line in RSA:  Did not receive identification string from <saddr> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Did not receive identification string from %{saddr}" }
				id => "message-sshd:06"
				add_field => {
				"result" => "no identification string"
				"event_description" => "Did not receive identification string from peer"
					"[event][id]" => "sshd:06"
					"[rsa][message][id1]" => "sshd:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:07
		# line in RSA:  Sleep 60 seconds for slowing down ssh login
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sleep 60 seconds for slowing down ssh login" }
				id => "message-sshd:07"
				add_field => {
				"result" => "slowing down ssh login"
				"event_description" => "Sleep 60 seconds"
					"[event][id]" => "sshd:07"
					"[rsa][message][id1]" => "sshd:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:08
		# line in RSA:  <authmethod> authentication succeeded for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{authmethod} authentication succeeded for user %{username}" }
				id => "message-sshd:08"
				add_field => {
				"event_description" => "authentication succeeded"
				"event_source" => "%{hhostname}"
					"[event][id]" => "sshd:08"
					"[rsa][message][id1]" => "sshd:08"
					"[event][categoryid]" => "1302010300"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE sshd:09
		# line in RSA:  User group = <group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User group = %{group}" }
				id => "message-sshd:09"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "User group"
					"[event][id]" => "sshd:09"
					"[rsa][message][id1]" => "sshd:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE sshd:10
		# line in RSA:  Bad protocol version identification '<protocol_detail>' from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Bad protocol version identification '%{protocol_detail}' from %{saddr}" }
				id => "message-sshd:10"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Bad protocol version identification"
					"[event][id]" => "sshd:10"
					"[rsa][message][id1]" => "sshd:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "openvpn-master" {
		# MESSAGE openvpn-master
		# line in RSA:   OpenVPN <version> [<protocol>] [<fld1>] <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "OpenVPN %{version} [%{protocol}] [%{fld1}] %{info}" }
				id => "message-openvpn-master"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-master"
					"[rsa][message][id1]" => "openvpn-master"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-master:01
		# line in RSA:   read <protocol> [<info>]: <event_description> (code=<resultcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "read %{protocol} [%{info}]: %{event_description} (code=%{resultcode})" }
				id => "message-openvpn-master:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-master:01"
					"[rsa][message][id1]" => "openvpn-master:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-master:02
		# line in RSA:  <action> : <event_description> (code=<resultcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action} : %{event_description} (code=%{resultcode})" }
				id => "message-openvpn-master:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-master:02"
					"[rsa][message][id1]" => "openvpn-master:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-master:03
		# line in RSA:   <saddr>:<sport> TLS Error: TLS handshake failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr}:%{sport} TLS Error: TLS handshake failed" }
				id => "message-openvpn-master:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-master:03"
					"[rsa][message][id1]" => "openvpn-master:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-master:04
		# line in RSA:    <fld1>/<saddr>:<sport> [<fld2>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}/%{saddr}:%{sport} [%{fld2}] %{event_description}" }
				id => "message-openvpn-master:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-master:04"
					"[rsa][message][id1]" => "openvpn-master:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-master:05
		# line in RSA:   <saddr>:<sport> [<fld1>] <event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr}:%{sport} [%{fld1}] %{event_description}" }
				id => "message-openvpn-master:05"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-master:05"
					"[rsa][message][id1]" => "openvpn-master:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-master:06
		# line in RSA:   <severity>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}: %{event_description}" }
				id => "message-openvpn-master:06"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-master:06"
					"[rsa][message][id1]" => "openvpn-master:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE openvpn-master:07
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-openvpn-master:07"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "openvpn-master:07"
					"[rsa][message][id1]" => "openvpn-master:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "INFOBLOX-Grid" {
		# MESSAGE INFOBLOX-Grid
		# line in RSA:   Grid member at <saddr> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Grid member at %{saddr} %{event_description}" }
				id => "message-INFOBLOX-Grid"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "INFOBLOX-Grid"
					"[rsa][message][id1]" => "INFOBLOX-Grid"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE INFOBLOX-Grid:02
		# line in RSA:   {Started|Completed} distribution on member with IP address <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(Started|Completed)[\s]+distribution[\s]+on[\s]+member[\s]+with[\s]+IP[\s]+address[\s]+(?<saddr>.*)$" }
				id => "message-INFOBLOX-Grid:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "INFOBLOX-Grid:02"
					"[rsa][message][id1]" => "INFOBLOX-Grid:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE INFOBLOX-Grid:03
		# line in RSA:   Upgrade Complete
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Upgrade Complete" }
				id => "message-INFOBLOX-Grid:03"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Upgrade Complete"
					"[event][id]" => "INFOBLOX-Grid:03"
					"[rsa][message][id1]" => "INFOBLOX-Grid:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE INFOBLOX-Grid:04
		# line in RSA:  Upgrade to <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Upgrade to %{fld1}" }
				id => "message-INFOBLOX-Grid:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "INFOBLOX-Grid:04"
					"[rsa][message][id1]" => "INFOBLOX-Grid:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "db_jnld" {
		# MESSAGE db_jnld
		# line in RSA:   Grid member at <saddr> is online.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Grid member at %{saddr} is online." }
				id => "message-db_jnld"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "db_jnld"
					"[rsa][message][id1]" => "db_jnld"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE db_jnld:01
		# line in RSA:   Resolved conflict for replicated delete of { PTR | TXT | A | CNAME | SRV } "<fld1>" in zone "<zone>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Resolved[\s]+conflict[\s]+for[\s]+replicated[\s]+delete[\s]+of[\s]+([\s]*PTR[\s]+|[\s]*TXT[\s]+|[\s]*A[\s]+|[\s]*CNAME[\s]+|[\s]*SRV[\s]+)[\s]+\"(?<fld1>[^\"]*)\"[\s]+in[\s]+zone[\s]+\"(?<zone>[^\"]*)\"$" }
				id => "message-db_jnld:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "db_jnld:01"
					"[rsa][message][id1]" => "db_jnld:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sSMTP" {
		# MESSAGE sSMTP
		# line in RSA:   Sent mail for <to> (<fld1>) { uid=<uid> username=<username> outbytes=<sbytes> | <space> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Sent[\s]+mail[\s]+for[\s]+(?<to>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+([\s]*uid=(?<uid>[^\s]*)[\s]+username=(?<username>[^\s]*)[\s]+outbytes=(?<sbytes>[^\s]*)[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
				id => "message-sSMTP"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sSMTP"
					"[rsa][message][id1]" => "sSMTP"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sSMTP:02
		# line in RSA:   Cannot open <hostname>:<network_port>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot open %{hostname}:%{network_port}" }
				id => "message-sSMTP:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sSMTP:02"
					"[rsa][message][id1]" => "sSMTP:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sSMTP:03
		# line in RSA:   Unable to locate <hostname>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to locate %{hostname}." }
				id => "message-sSMTP:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sSMTP:03"
					"[rsa][message][id1]" => "sSMTP:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sSMTP:04
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-sSMTP:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "sSMTP:04"
					"[rsa][message][id1]" => "sSMTP:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId158
	# line in RSA:  Backup to <device> was successful - Backup file <filename>
	else if [logstash][msgparser][id] == "msgParserId158" {
		dissect {
			mapping => { "message" => "Backup to %{device} was successful - Backup file %{filename}" }
			id => "msgParserId158"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "scheduled_ftp_backups" {
		# MESSAGE scheduled_ftp_backups
		# line in RSA:  Scheduled backup to the <device> was successful - Backup file <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Scheduled backup to the %{device} was successful - Backup file %{filename}" }
				id => "message-scheduled_ftp_backups"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Scheduled backup to the FTP server was successful"
					"[event][id]" => "scheduled_ftp_backups"
					"[rsa][message][id1]" => "scheduled_ftp_backups"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE failed_scheduled_ftp_backups
		# line in RSA:  Scheduled backup to the <device> failed - <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Scheduled backup to the %{device} failed - %{result}." }
				id => "message-failed_scheduled_ftp_backups"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Scheduled backup to the FTP server failed"
					"[event][id]" => "failed_scheduled_ftp_backups"
					"[rsa][message][id1]" => "failed_scheduled_ftp_backups"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId161
	# line in RSA:  Scheduled backup to the <device> was successful - Backup file <filename>
	else if [logstash][msgparser][id] == "msgParserId161" {
		dissect {
			mapping => { "message" => "Scheduled backup to the %{device} was successful - Backup file %{filename}" }
			id => "msgParserId161"
			add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Scheduled backup to the SCP server was successful"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "python" {
		# MESSAGE python
		# line in RSA:  <action> even though zone '<zone>' in view '<fld1>' is locked.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action} even though zone '%{zone}' in view '%{fld1}' is locked." }
				id => "message-python"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "python"
					"[rsa][message][id1]" => "python"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE python:01
		# line in RSA:   <action> (algorithm=<fld1>, key tag=<fld2>, key size=<fld3>): '<hostname>' in view '<fld4>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action} (algorithm=%{fld1}, key tag=%{fld2}, key size=%{fld3}): '%{hostname}' in view '%{fld4}'." }
				id => "message-python:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "python:01"
					"[rsa][message][id1]" => "python:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE python:02
		# line in RSA:   <action>: '<hostname>' in view '<fld1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action}: '%{hostname}' in view '%{fld1}'." }
				id => "message-python:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "python:02"
					"[rsa][message][id1]" => "python:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE python:03
		# line in RSA:   <action>: FQDN='<domain>', ADDRESS='<saddr>', View='<fld1>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action}: FQDN='%{domain}', ADDRESS='%{saddr}', View='%{fld1}'" }
				id => "message-python:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "python:03"
					"[rsa][message][id1]" => "python:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE python:04
		# line in RSA:   <action>: FQDN='<domain>',  View='<fld1>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action}: FQDN='%{domain}',  View='%{fld1}'" }
				id => "message-python:04"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "python:04"
					"[rsa][message][id1]" => "python:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE python:05
		# line in RSA:   <fld1>: <fld2>.<fld3> [<username>]: Populated <zone> <hostname> DnsView=<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: %{fld2}.%{fld3} [%{username}]: Populated %{zone} %{hostname} DnsView=%{fld4}" }
				id => "message-python:05"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "python:05"
					"[rsa][message][id1]" => "python:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE python:06
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-python:06"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "python:06"
					"[rsa][message][id1]" => "python:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId168
	# line in RSA:   Type: <protocol>, State: <event_state>, Event: <event_description>.
	else if [logstash][msgparser][id] == "msgParserId168" {
		dissect {
			mapping => { "message" => "Type: %{protocol}, State: %{event_state}, Event: %{event_description}." }
			id => "msgParserId168"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "snmptrapd" {
		# MESSAGE snmptrapd
		# line in RSA:   NET-SNMP version <version> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NET-SNMP version %{version} %{event_description}" }
				id => "message-snmptrapd"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "snmptrapd"
					"[rsa][message][id1]" => "snmptrapd"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE snmptrapd:01
		# line in RSA:   lock in <fld1> sleeps more than <duration> milliseconds in <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "lock in %{fld1} sleeps more than %{duration} milliseconds in %{fld2}" }
				id => "message-snmptrapd:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "snmptrapd:01"
					"[rsa][message][id1]" => "snmptrapd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE snmptrapd:02
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-snmptrapd:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "snmptrapd:02"
					"[rsa][message][id1]" => "snmptrapd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ntpdate" {
		# MESSAGE ntpdate
		# line in RSA:   adjust time server <saddr> offset <duration> sec
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "adjust time server %{saddr} offset %{duration} sec" }
				id => "message-ntpdate"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "ntpdate"
					"[rsa][message][id1]" => "ntpdate"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ntpdate:01
		# line in RSA:   <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-ntpdate:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "ntpdate:01"
					"[rsa][message][id1]" => "ntpdate:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId172
	# line in RSA:  Scheduled tasks have been purged
	else if [logstash][msgparser][id] == "msgParserId172" {
		dissect {
			mapping => { "message" => "Scheduled tasks have been purged" }
			id => "msgParserId172"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "serial_console" {
		# MESSAGE serial_console:04
		# line in RSA:  <fld20> <fld21>.<fld22> [<domain>]: Login_Denied - - to=<terminal> apparently_via=<info> ip=<saddr> error=<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld20} %{fld21}.%{fld22} [%{domain}]: Login_Denied - - to=%{terminal} apparently_via=%{info} ip=%{saddr} error=%{result}" }
				id => "message-serial_console:04"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhostname}"
				"event_description" => "Login Denied"
					"[event][id]" => "serial_console:04"
					"[rsa][message][id1]" => "serial_console:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE serial_console:03
		# line in RSA:   No authentication methods succeeded for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No authentication methods succeeded for user %{username}" }
				id => "message-serial_console:03"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_source" => "%{hhostname}"
				"event_description" => "No authentication methods succeeded for user"
					"[event][id]" => "serial_console:03"
					"[rsa][message][id1]" => "serial_console:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE serial_console
		# line in RSA:  <fld1> <fld2>.<fld3> [<username>]: Login_Allowed - - to=<terminal> apparently_via=<info> auth=<authmethod> group=<group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2}.%{fld3} [%{username}]: Login_Allowed - - to=%{terminal} apparently_via=%{info} auth=%{authmethod} group=%{group}" }
				id => "message-serial_console"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_source" => "%{hhostname}"
					"[event][id]" => "serial_console"
					"[rsa][message][id1]" => "serial_console"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE serial_console:01
		# line in RSA:  RADIUS authentication succeeded for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RADIUS authentication succeeded for user %{username}" }
				id => "message-serial_console:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_source" => "%{hhostname}"
				"event_description" => "RADIUS authentication succeeded for user"
					"[event][id]" => "serial_console:01"
					"[rsa][message][id1]" => "serial_console:01"
					"[event][categoryid]" => "1302010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE serial_console:02
		# line in RSA:  User group = <group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User group = %{group}" }
				id => "message-serial_console:02"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "User group identification"
					"[event][id]" => "serial_console:02"
					"[rsa][message][id1]" => "serial_console:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE serial_console:05
		# line in RSA: <fld1> [<username>]: rebooted the system
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} [%{username}]: rebooted the system" }
				id => "message-serial_console:05"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "system reboot"
					"[event][id]" => "serial_console:05"
					"[rsa][message][id1]" => "serial_console:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE serial_console:06
		# line in RSA: Local authentication succeeded for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Local authentication succeeded for user %{username}" }
				id => "message-serial_console:06"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Local authentication succeeded for user"
					"[event][id]" => "serial_console:06"
					"[rsa][message][id1]" => "serial_console:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId193
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId193" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId193"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId194
	# line in RSA: mount <event_description>
	else if [logstash][msgparser][id] == "msgParserId194" {
		dissect {
			mapping => { "message" => "mount %{event_description}" }
			id => "msgParserId194"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "controld" {
		# MESSAGE controld
		# line in RSA:   Distribution Started
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Distribution Started" }
				id => "message-controld"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Distribution Started"
					"[event][id]" => "controld"
					"[rsa][message][id1]" => "controld"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE controld:02
		# line in RSA:   Distribution Complete
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Distribution Complete" }
				id => "message-controld:02"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Distribution Complete"
					"[event][id]" => "controld:02"
					"[rsa][message][id1]" => "controld:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId198
	# line in RSA:   shutting down for system reboot
	else if [logstash][msgparser][id] == "msgParserId198" {
		dissect {
			mapping => { "message" => "shutting down for system reboot" }
			id => "msgParserId198"
			add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "shutting down for system reboot"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId199
	# line in RSA:   ntpd exiting on signal 15
	else if [logstash][msgparser][id] == "msgParserId199" {
		dissect {
			mapping => { "message" => "ntpd exiting on signal 15" }
			id => "msgParserId199"
			add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "ntpd exiting"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "rsyncd" {
		# MESSAGE rsyncd
		# line in RSA:   name lookup failed for <saddr>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "name lookup failed for %{saddr}: %{info}" }
				id => "message-rsyncd"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "rsyncd"
					"[rsa][message][id1]" => "rsyncd"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE rsyncd:01
		# line in RSA:   connect from <shost> (<saddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "connect from %{shost} (%{saddr})" }
				id => "message-rsyncd:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "rsyncd:01"
					"[rsa][message][id1]" => "rsyncd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE rsyncd:02
		# line in RSA:   rsync on <filename> from <shost> (<saddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "rsync on %{filename} from %{shost} (%{saddr})" }
				id => "message-rsyncd:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "rsyncd:02"
					"[rsa][message][id1]" => "rsyncd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE rsyncd:03
		# line in RSA:   sent <sbytes> bytes  received <rbytes> bytes  total size <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "sent %{sbytes} bytes  received %{rbytes} bytes  total size %{fld1}" }
				id => "message-rsyncd:03"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "rsyncd:03"
					"[rsa][message][id1]" => "rsyncd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE rsyncd:04
		# line in RSA:   building file list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "building file list" }
				id => "message-rsyncd:04"
				add_field => {
				"event_description" => "building file list"
				"event_source" => "%{hhostname}"
					"[event][id]" => "rsyncd:04"
					"[rsa][message][id1]" => "rsyncd:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId206
	# line in RSA:  <event_description> 
	else if [logstash][msgparser][id] == "msgParserId206" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId206"
			add_field => {
				"event_source" => "%{hhostname}"
				"info" => "%{hdata}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId207
	# line in RSA:  <fld1> 
	else if [logstash][msgparser][id] == "msgParserId207" {
		dissect {
			mapping => { "message" => "%{fld1}" }
			id => "msgParserId207"
			add_field => {
				"event_source" => "%{hhostname}"
				"info" => "%{hdata}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "netauto_discovery" {
		# MESSAGE netauto_discovery
		# line in RSA: <agent>: Processing path<fld1>, vnid [<fld2>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: Processing path%{fld1}, vnid [%{fld2}]" }
				id => "message-netauto_discovery"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "netauto_discovery"
					"[rsa][message][id1]" => "netauto_discovery"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE netauto_discovery:01
		# line in RSA: <agent>:<fld1>(<fld2>)<hostip>/<fld3>:<product>ver<version> device does not answer to lldpRem OID requests, skipping LLDP Neighbors poll
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1}(%{fld2})%{hostip}/%{fld3}:%{product}ver%{version} device does not answer to lldpRem OID requests, skipping LLDP Neighbors poll" }
				id => "message-netauto_discovery:01"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "device does not answer to lldpRem OID requests, skipping LLDP Neighbors poll"
					"[event][id]" => "netauto_discovery:01"
					"[rsa][message][id1]" => "netauto_discovery:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE netauto_discovery:02
		# line in RSA: <agent>:<space>Static address already set with IP:<hostip>, Processing<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{space}Static address already set with IP:%{hostip}, Processing%{fld1}" }
				id => "message-netauto_discovery:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "netauto_discovery:02"
					"[rsa][message][id1]" => "netauto_discovery:02"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE netauto_discovery:03
		# line in RSA: <agent>:<fld1>(<fld2>)<hostip>/<fld3>: SNMP Credentials: Failed to authenticate
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1}(%{fld2})%{hostip}/%{fld3}: SNMP Credentials: Failed to authenticate" }
				id => "message-netauto_discovery:03"
				add_field => {
				"event_source" => "%{hhostname}"
				"ec_outcome" => "Failure"
					"[event][id]" => "netauto_discovery:03"
					"[rsa][message][id1]" => "netauto_discovery:03"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "netauto_core" {
		# MESSAGE netauto_core:01
		# line in RSA: <agent>: Attempting CLI on device<device>with interface not in table, ip<hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: Attempting CLI on device%{device}with interface not in table, ip%{hostip}" }
				id => "message-netauto_core:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "netauto_core:01"
					"[rsa][message][id1]" => "netauto_core:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE netauto_core
		# line in RSA: netautoctl:<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "netautoctl:%{event_description}" }
				id => "message-netauto_core"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "netauto_core"
					"[rsa][message][id1]" => "netauto_core"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId214
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId214" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId214"
			add_field => {
				"event_source" => "%{hhostname}"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "DIS" {
		# MESSAGE DIS
		# line in RSA: <fld1>:<fld2>: Device<device>/<hostip>login failure<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}:%{fld2}: Device%{device}/%{hostip}login failure%{result}" }
				id => "message-DIS"
				add_field => {
				"event_source" => "%{hhostname}"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "DIS"
					"[rsa][message][id1]" => "DIS"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE DIS:01
		# line in RSA: <fld2>: <fld3>: Attempting discover-now for <hostip> on <fld4>, using session ID
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}: %{fld3}: Attempting discover-now for %{hostip} on %{fld4}, using session ID" }
				id => "message-DIS:01"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "DIS:01"
					"[rsa][message][id1]" => "DIS:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId217
	# line in RSA: <result>
	else if [logstash][msgparser][id] == "msgParserId217" {
		dissect {
			mapping => { "message" => "%{result}" }
			id => "msgParserId217"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "tacacs_acct" {
		# MESSAGE tacacs_acct
		# line in RSA: <fld1>: Server <daddr> port <dport>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: Server %{daddr} port %{dport}: %{event_description}" }
				id => "message-tacacs_acct"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "tacacs_acct"
					"[rsa][message][id1]" => "tacacs_acct"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE tacacs_acct:01
		# line in RSA: <fld1>: Accounting request failed. <fld2>Server is <daddr>, port is <dport>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: Accounting request failed. %{fld2}Server is %{daddr}, port is %{dport}." }
				id => "message-tacacs_acct:01"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Accounting request failed."
					"[event][id]" => "tacacs_acct:01"
					"[rsa][message][id1]" => "tacacs_acct:01"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
		# MESSAGE tacacs_acct:02
		# line in RSA: <fld1>: Read <fld2> bytes from server <daddr> port <dport>, expecting <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: Read %{fld2} bytes from server %{daddr} port %{dport}, expecting %{fld3}" }
				id => "message-tacacs_acct:02"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "tacacs_acct:02"
					"[rsa][message][id1]" => "tacacs_acct:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "dhcpdv6" {
		# MESSAGE dhcpdv6
		# line in RSA: Relay-forward message from <saddr_v6> port <sport>, link address <fld1>, peer address <daddr_v6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Relay-forward message from %{saddr_v6} port %{sport}, link address %{fld1}, peer address %{daddr_v6}" }
				id => "message-dhcpdv6"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Relay-forward message"
					"[event][id]" => "dhcpdv6"
					"[rsa][message][id1]" => "dhcpdv6"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:01
		# line in RSA: Encapsulated Solicit message from <saddr_v6> port <sport> from client DUID <fld1>, transaction ID <id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Encapsulated Solicit message from %{saddr_v6} port %{sport} from client DUID %{fld1}, transaction ID %{id}" }
				id => "message-dhcpdv6:01"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Encapsulated Solicit message"
					"[event][id]" => "dhcpdv6:01"
					"[rsa][message][id1]" => "dhcpdv6:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:02
		# line in RSA: Client <fld1>, IP '<fld2>': No addresses available for this interface
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{fld1}, IP '%{fld2}': No addresses available for this interface" }
				id => "message-dhcpdv6:02"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "IP unknown - No addresses available for this interface"
					"[event][id]" => "dhcpdv6:02"
					"[rsa][message][id1]" => "dhcpdv6:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:03
		# line in RSA: Encapsulating Advertise message to send to <saddr_v6> port <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Encapsulating Advertise message to send to %{saddr_v6} port %{sport}" }
				id => "message-dhcpdv6:03"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Encapsulating Advertise message"
					"[event][id]" => "dhcpdv6:03"
					"[rsa][message][id1]" => "dhcpdv6:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:04
		# line in RSA: Sending Relay-reply message to <saddr_v6> port <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sending Relay-reply message to %{saddr_v6} port %{sport}" }
				id => "message-dhcpdv6:04"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Sending Relay-reply message"
					"[event][id]" => "dhcpdv6:04"
					"[rsa][message][id1]" => "dhcpdv6:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:05
		# line in RSA: Encapsulated Information-request message from <saddr_v6> port <sport>, transaction ID <id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Encapsulated Information-request message from %{saddr_v6} port %{sport}, transaction ID %{id}" }
				id => "message-dhcpdv6:05"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Encapsulated Information-request message"
					"[event][id]" => "dhcpdv6:05"
					"[rsa][message][id1]" => "dhcpdv6:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:06
		# line in RSA: Encapsulating Reply message to send to <saddr_v6> port <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Encapsulating Reply message to send to %{saddr_v6} port %{sport}" }
				id => "message-dhcpdv6:06"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Encapsulating Reply message"
					"[event][id]" => "dhcpdv6:06"
					"[rsa][message][id1]" => "dhcpdv6:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:07
		# line in RSA: Encapsulated Renew message from <saddr_v6> port <sport> from client DUID <fld1>, transaction ID <id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Encapsulated Renew message from %{saddr_v6} port %{sport} from client DUID %{fld1}, transaction ID %{id}" }
				id => "message-dhcpdv6:07"
				add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "Encapsulated Renew message"
					"[event][id]" => "dhcpdv6:07"
					"[rsa][message][id1]" => "dhcpdv6:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:08
		# line in RSA: Reply NA: address <saddr_v6> to client with duid <fld1> iaid = <fld2> static
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Reply NA: address %{saddr_v6} to client with duid %{fld1} iaid = %{fld2} static" }
				id => "message-dhcpdv6:08"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpdv6:08"
					"[rsa][message][id1]" => "dhcpdv6:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE dhcpdv6:09
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-dhcpdv6:09"
				add_field => {
				"event_source" => "%{hhostname}"
					"[event][id]" => "dhcpdv6:09"
					"[rsa][message][id1]" => "dhcpdv6:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId230
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId230" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId230"
			add_field => {
				"event_source" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId231
	# line in RSA: proxying request to <hostname>(<hostip>) <web_method> <url> <protocol> <info>
	else if [logstash][msgparser][id] == "msgParserId231" {
		dissect {
			mapping => { "message" => "proxying request to %{hostname}(%{hostip}) %{web_method} %{url} %{protocol} %{info}" }
			id => "msgParserId231"
			add_field => {
				"event_source" => "%{hhostname}"
				"event_description" => "proxying request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Rename fields
filter {
	mutate {
		rename => {
			"dns.resptext" => "dns_resptext"
		}
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-infobloxniosmsg.json"
#			template_name => "infobloxnios_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

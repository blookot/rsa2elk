# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "rsaaveksa"
			"[observer][name]" => "RSA AVEKSA"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0002
	# line in RSA: %RSAAveksa: <hfld1>^^<hfld2>^^<hfld3>^^<hfld4>^^<hfld5>^^<hfld6>^^<hfld7>^^<hfld8>^^<messageid>^^<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%RSAAveksa:[\s]+(?<message>(?<hfld1>[^\^]*)\^\^(?<hfld2>[^\^]*)\^\^(?<hfld3>[^\^]*)\^\^(?<hfld4>[^\^]*)\^\^(?<hfld5>[^\^]*)\^\^(?<hfld6>[^\^]*)\^\^(?<hfld7>[^\^]*)\^\^(?<hfld8>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: %RSAAveksa: <hfld1> <hfld2>^^<messageid>^^<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%RSAAveksa: %{hfld1} %{hfld2}^^%{messageid}^^%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-rsaaveksamsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <sessionid>^^<fld2>^^<fld3>^^<saddr>^^<fld5>^^<fld6>^^<username>^^<uid>^^<action>^^<fld10>^^<daddr>^^<severity>^^<fld13>^^<fld14>^^<obj_type>^^<obj_name>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{sessionid}^^%{fld2}^^%{fld3}^^%{saddr}^^%{fld5}^^%{fld6}^^%{username}^^%{uid}^^%{action}^^%{fld10}^^%{daddr}^^%{severity}^^%{fld13}^^%{fld14}^^%{obj_type}^^%{obj_name}" }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <username>^^<fld1>^^<fld2>^^<fld3>^^<obj_name>^^<obj_type>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{username}^^%{fld1}^^%{fld2}^^%{fld3}^^%{obj_name}^^%{obj_type}" }
			id => "msgParserId1"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"event_type" => "%{hfld3}"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <sessionid>^^<fld2>^^<fld3>^^<saddr>^^<fld5>^^<fld6>^^<username>^^<uid>^^<action>^^<fld10>^^<daddr>^^<severity>^^<fld13>^^<fld14>^^<obj_type>^^<obj_name>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{sessionid}^^%{fld2}^^%{fld3}^^%{saddr}^^%{fld5}^^%{fld6}^^%{username}^^%{uid}^^%{action}^^%{fld10}^^%{daddr}^^%{severity}^^%{fld13}^^%{fld14}^^%{obj_type}^^%{obj_name}" }
			id => "msgParserId2"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <username>^^<fld1>^^<fld2>^^<fld3>^^<obj_name>^^<obj_type>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{username}^^%{fld1}^^%{fld2}^^%{fld3}^^%{obj_name}^^%{obj_type}" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"event_type" => "%{hfld3}"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <username>^^<fld1>^^<fld2>^^<fld3>^^<obj_name>^^<obj_type>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{username}^^%{fld1}^^%{fld2}^^%{fld3}^^%{obj_name}^^%{obj_type}" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_type" => "%{hfld3}"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <sessionid>^^<fld2>^^<fld3>^^<saddr>^^<fld5>^^<fld6>^^<username>^^<uid>^^<action>^^<fld10>^^<daddr>^^<severity>^^<fld13>^^<fld14>^^<obj_type>^^<obj_name>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{sessionid}^^%{fld2}^^%{fld3}^^%{saddr}^^%{fld5}^^%{fld6}^^%{username}^^%{uid}^^%{action}^^%{fld10}^^%{daddr}^^%{severity}^^%{fld13}^^%{fld14}^^%{obj_type}^^%{obj_name}" }
			id => "msgParserId5"
			add_field => {
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <sessionid>^^<fld2>^^<fld3>^^<saddr>^^<fld5>^^<fld6>^^<username>^^<uid>^^<action>^^<fld10>^^<daddr>^^<severity>^^<fld13>^^<fld14>^^<obj_type>^^<obj_name>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{sessionid}^^%{fld2}^^%{fld3}^^%{saddr}^^%{fld5}^^%{fld6}^^%{username}^^%{uid}^^%{action}^^%{fld10}^^%{daddr}^^%{severity}^^%{fld13}^^%{fld14}^^%{obj_type}^^%{obj_name}" }
			id => "msgParserId6"
			add_field => {
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[fld10]"
		destination => "[result]"
		dictionary => {
			"C" => "Object Created"
			"M" => "Object Modified"
			"V" => "Object Viewed"
			"D" => "Object Deleted"
			"S" => "Success"
			"F" => "Failure"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[fld3]"
		destination => "[logon_type]"
		dictionary => {
			"U" => "User Interface"
			"W" => "Web Service"
			"S" => "System"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-rsaaveksamsg.json"
#			template_name => "rsaaveksa_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

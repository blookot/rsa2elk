# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "mssccm"
			"[observer][name]" => "Microsoft SCCM"
			"[observer][type]" => "Configuration Management"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %NICWIN-<level>-{ <messageid> Server: | <messageid>: } <hevent_log>,<hnumber>,<hday> <hdatetime>,<hevent_id>,SMS Server,<!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-([\s]*(?<messageid>[^\s]*)[\s]+Server:[\s]+|[\s]*(?<messageid>[^:]*):[\s]+)[\s]+(?<message>(?<hevent_log>[^,]*),(?<hnumber>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),SMS[\s]+Server,(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %NICWIN-<level>-{ <messageid> Client: | <messageid>: } <hevent_log>,<hnumber>,<hday> <hdatetime>,<hevent_id>,SMS Client,<!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-([\s]*(?<messageid>[^\s]*)[\s]+Client:[\s]+|[\s]*(?<messageid>[^:]*):[\s]+)[\s]+(?<message>(?<hevent_log>[^,]*),(?<hnumber>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),SMS[\s]+Client,(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %NICWIN-<level>-{ <messageid> Provider: | <messageid>: } <hevent_log>,<hnumber>,<hday> <hdatetime>,<hevent_id>,SMS Provider,<!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-([\s]*(?<messageid>[^\s]*)[\s]+Provider:[\s]+|[\s]*(?<messageid>[^:]*):[\s]+)[\s]+(?<message>(?<hevent_log>[^,]*),(?<hnumber>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),SMS[\s]+Provider,(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %NICWIN-<level>-{ <messageid> Performance Data Provider: | <messageid>: } <hevent_log>,<hnumber>,<hday> <hdatetime>,<hevent_id>,SMS Performance Data Provider,<!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-([\s]*(?<messageid>[^\s]*)[\s]+Performance[\s]+Data[\s]+Provider:[\s]+|[\s]*(?<messageid>[^:]*):[\s]+)[\s]+(?<message>(?<hevent_log>[^,]*),(?<hnumber>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),SMS[\s]+Performance[\s]+Data[\s]+Provider,(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %NICWIN-<level>-<messageid>: <hevent_log>,<hnumber>,<hday> <hdatetime>,<hevent_id>,SmsClient,<!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-(?<messageid>[^:]*):[\s]+(?<message>(?<hevent_log>[^,]*),(?<hnumber>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),SmsClient,(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %NICWIN-<level>-<messageid>_<hfld2>_{ SMS: | SmsClient: | SMS Performance Data Provider: | SMS Provider: | SMS Client: | SMS Server: } <hevent_log>,<hnumber>,<hday> <hdatetime>,<hevent_id>,<hevent_source>,<hevent_user>,<hseverity>,<!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-(?<messageid>[^_]*)_(?<hfld2>[^_]*)_([\s]*SMS:[\s]+|[\s]*SmsClient:[\s]+|[\s]*SMS[\s]+Performance[\s]+Data[\s]+Provider:[\s]+|[\s]*SMS[\s]+Provider:[\s]+|[\s]*SMS[\s]+Client:[\s]+|[\s]*SMS[\s]+Server:[\s]+)[\s]+(?<message>(?<hevent_log>[^,]*),(?<hnumber>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),(?<hevent_source>[^,]*),(?<hevent_user>[^,]*),(?<hseverity>[^,]*),(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_mssccmmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_log>,<fld>,<day> <fld2>,<id>,<event_source>,<event_user>,<severity>,<event_computer>,<category>,<fld1>,<event_description>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld},%{day} %{fld2},%{id},%{event_source},%{event_user},%{severity},%{event_computer},%{category},%{fld1},%{event_description}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application" {
		# MESSAGE Application
		# line in RSA: <event_log>,<fld>,<day> <fld2>,<id>,{SmsClient|SMS Performance Data Provider|SMS Provider|SMS Client|SMS Server},<event_user>,Information,<event_computer>,<category>,<fld1>,<event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld>[^,]*),(?<day>[^\s]*)[\s]+(?<fld2>[^,]*),(?<id>[^,]*),(SmsClient|SMS[\s]+Performance[\s]+Data[\s]+Provider|SMS[\s]+Provider|SMS[\s]+Client|SMS[\s]+Server),(?<event_user>[^,]*),Information,(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld1>[^,]*),(?<event_description>.*)$" }
				id => "message-Application"
				add_field => {
					"[event][id]" => "Application"
					"[rsa][message][id1]" => "Application"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application:01
		# line in RSA: <event_log>,<fld>,<day> <fld2>,<id>,{SmsClient|SMS Performance Data Provider|SMS Provider|SMS Client|SMS Server},<event_user>,Warning,<event_computer>,<category>,<fld1>,<event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld>[^,]*),(?<day>[^\s]*)[\s]+(?<fld2>[^,]*),(?<id>[^,]*),(SmsClient|SMS[\s]+Performance[\s]+Data[\s]+Provider|SMS[\s]+Provider|SMS[\s]+Client|SMS[\s]+Server),(?<event_user>[^,]*),Warning,(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld1>[^,]*),(?<event_description>.*)$" }
				id => "message-Application:01"
				add_field => {
					"[event][id]" => "Application:01"
					"[rsa][message][id1]" => "Application:01"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application:02
		# line in RSA: <event_log>,<fld>,<day> <fld2>,<id>,{SmsClient|SMS Performance Data Provider|SMS Provider|SMS Client|SMS Server},<event_user>,Error,<event_computer>,<category>,<fld1>,<event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld>[^,]*),(?<day>[^\s]*)[\s]+(?<fld2>[^,]*),(?<id>[^,]*),(SmsClient|SMS[\s]+Performance[\s]+Data[\s]+Provider|SMS[\s]+Provider|SMS[\s]+Client|SMS[\s]+Server),(?<event_user>[^,]*),Error,(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld1>[^,]*),(?<event_description>.*)$" }
				id => "message-Application:02"
				add_field => {
					"[event][id]" => "Application:02"
					"[rsa][message][id1]" => "Application:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application:03
		# line in RSA: <event_log>,<fld>,<day> <fld2>,<id>,{SmsClient|SMS Performance Data Provider|SMS Provider|SMS Client|SMS Server},<event_user>,<severity>,<event_computer>,<category>,<fld1>,<event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld>[^,]*),(?<day>[^\s]*)[\s]+(?<fld2>[^,]*),(?<id>[^,]*),(SmsClient|SMS[\s]+Performance[\s]+Data[\s]+Provider|SMS[\s]+Provider|SMS[\s]+Client|SMS[\s]+Server),(?<event_user>[^,]*),(?<severity>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld1>[^,]*),(?<event_description>.*)$" }
				id => "message-Application:03"
				add_field => {
					"[event][id]" => "Application:03"
					"[rsa][message][id1]" => "Application:03"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_mssccmmsg.json"
#			template_name => "mssccm_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

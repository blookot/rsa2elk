# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "secudesi"
			"[observer][name]" => "Secude Security Intelligence"
			"[observer][type]" => "Analysis"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %secudesi-<level>: <msgIdPart1>^^<Hfld2>^^<Hfld3>^^<Hdate>^^<Htime>^^<Hfld4>^^<Hfld5>^^<Hclient>^^<Hfld6>^^<Hterminal>^^<Hfld7>^^<Hfld8>^^<msgIdPart2>^^<Hfld1>^^<!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%secudesi\-(?<level>[^:]*):[\s]+(?<message>(?<msgIdPart1>[^\^]*)\^\^(?<Hfld2>[^\^]*)\^\^(?<Hfld3>[^\^]*)\^\^(?<Hdate>[^\^]*)\^\^(?<Htime>[^\^]*)\^\^(?<Hfld4>[^\^]*)\^\^(?<Hfld5>[^\^]*)\^\^(?<Hclient>[^\^]*)\^\^(?<Hfld6>[^\^]*)\^\^(?<Hterminal>[^\^]*)\^\^(?<Hfld7>[^\^]*)\^\^(?<Hfld8>[^\^]*)\^\^(?<msgIdPart2>[^\^]*)\^\^(?<Hfld1>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %secudesi-<level>: <msgIdPart1>^^<Hfld2>^^<Hdate>^^<Htime>^^<Hfld3>^^<Husername>^^<Hcode>^^<msgIdPart2>^^<Hfld1>^^<!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%secudesi\-(?<level>[^:]*):[\s]+(?<message>(?<msgIdPart1>[^\^]*)\^\^(?<Hfld2>[^\^]*)\^\^(?<Hdate>[^\^]*)\^\^(?<Htime>[^\^]*)\^\^(?<Hfld3>[^\^]*)\^\^(?<Husername>[^\^]*)\^\^(?<Hcode>[^\^]*)\^\^(?<msgIdPart2>[^\^]*)\^\^(?<Hfld1>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %secudesi-<level>: <msgIdPart1>^^<Hfld2>^^<Hdate>^^<Htime>^^<Hclient>^^<Husername>^^<msgIdPart2>^^<Hfld1>^^<!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%secudesi\-(?<level>[^:]*):[\s]+(?<message>(?<msgIdPart1>[^\^]*)\^\^(?<Hfld2>[^\^]*)\^\^(?<Hdate>[^\^]*)\^\^(?<Htime>[^\^]*)\^\^(?<Hclient>[^\^]*)\^\^(?<Husername>[^\^]*)\^\^(?<msgIdPart2>[^\^]*)\^\^(?<Hfld1>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %secudesi-<level>: <msgIdPart1>^^<Hfld1>^^<Hdate>^^<Htime>^^<Hfld2>^^<msgIdPart2>^^<!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%secudesi\-(?<level>[^:]*):[\s]+(?<message>(?<msgIdPart1>[^\^]*)\^\^(?<Hfld1>[^\^]*)\^\^(?<Hdate>[^\^]*)\^\^(?<Htime>[^\^]*)\^\^(?<Hfld2>[^\^]*)\^\^(?<msgIdPart2>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-secudesimsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <id>^^<id2>^^<instance>^^<date>^^<time>^^<event_type>^^<fld1>^^<hostname>^^<username>^^<terminal>^^<event_source>^^<service>^^<id1>^^<category>^^<info>^^<fld2>^^<severity>^^<event_description>^^<doc_number>^^<fld3>^^<fld4>^^<fld5>^^<fld6>^^<fld7>^^<fld8>^^<fld9>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{id}^^%{id2}^^%{instance}^^%{date}^^%{time}^^%{event_type}^^%{fld1}^^%{hostname}^^%{username}^^%{terminal}^^%{event_source}^^%{service}^^%{id1}^^%{category}^^%{info}^^%{fld2}^^%{severity}^^%{event_description}^^%{doc_number}^^%{fld3}^^%{fld4}^^%{fld5}^^%{fld6}^^%{fld7}^^%{fld8}^^%{fld9}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <id>^^<id2>^^<date>^^<time>^^<instance>^^<id1>^^<event_description>^^<param>^^<change_new>^^<change_old>^^{<fld1>^^<fld2>^^<fld3> | <fld1>}
	else if [logstash][msgparser][id] == "msgParserId1" {
		grok {
			match => { "message" => "^(?<id>[^\^]*)\^\^(?<id2>[^\^]*)\^\^(?<date>[^\^]*)\^\^(?<time>[^\^]*)\^\^(?<instance>[^\^]*)\^\^(?<id1>[^\^]*)\^\^(?<event_description>[^\^]*)\^\^(?<param>[^\^]*)\^\^(?<change_new>[^\^]*)\^\^(?<change_old>[^\^]*)\^\^((?<fld1>[^\^]*)\^\^(?<fld2>[^\^]*)\^\^(?<fld3>[^\s]*)[\s]+|[\s]*(?<fld1>.*))$" }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <id>^^<id2>^^<date>^^<time>^^<hostname>^^<username>^^<event_source>^^<id1>^^<event_description>^^<obj_type>^^<obj_name>^^<fld1>^^<tbl_name>^^<index>^^<entry>^^<action>^^<change_old>^^<change_new>^^<fld2>^^<fld3>^^<fld4>^^<fld5>^^<fld6>^^<fld7>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{id}^^%{id2}^^%{date}^^%{time}^^%{hostname}^^%{username}^^%{event_source}^^%{id1}^^%{event_description}^^%{obj_type}^^%{obj_name}^^%{fld1}^^%{tbl_name}^^%{index}^^%{entry}^^%{action}^^%{change_old}^^%{change_new}^^%{fld2}^^%{fld3}^^%{fld4}^^%{fld5}^^%{fld6}^^%{fld7}" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <id>^^<id2>^^<date>^^<time>^^<hostname>^^<username>^^<id1>^^<event_description>^^<operation_id>^^<service>^^<obj_type>^^<obj_name>^^<fld1>^^<event_user>^^<fld2>^^<fld3>^^<fld4>^^<fld5>^^<fld6>^^<fld7>^^<fld8>^^<fld9>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{id}^^%{id2}^^%{date}^^%{time}^^%{hostname}^^%{username}^^%{id1}^^%{event_description}^^%{operation_id}^^%{service}^^%{obj_type}^^%{obj_name}^^%{fld1}^^%{event_user}^^%{fld2}^^%{fld3}^^%{fld4}^^%{fld5}^^%{fld6}^^%{fld7}^^%{fld8}^^%{fld9}" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <id>^^<id2>^^<date>^^<time>^^<hostname>^^<username>^^<event_source>^^<id1>^^<event_description>^^<service>^^<tbl_name>^^<info>^^<index>^^<entry>^^<change_old>^^<change_new>^^<fld2>^^<fld3>^^<fld4>^^<fld5>^^<fld6>^^<fld7>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{id}^^%{id2}^^%{date}^^%{time}^^%{hostname}^^%{username}^^%{event_source}^^%{id1}^^%{event_description}^^%{service}^^%{tbl_name}^^%{info}^^%{index}^^%{entry}^^%{change_old}^^%{change_new}^^%{fld2}^^%{fld3}^^%{fld4}^^%{fld5}^^%{fld6}^^%{fld7}" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <id>^^<id2>^^<date>^^<time>^^<hostname>^^<id1>^^<event_description>^^<fld1>^^<fld2>^^<fld3>^^<fld4>^^<fld5>^^<fld6>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{id}^^%{id2}^^%{date}^^%{time}^^%{hostname}^^%{id1}^^%{event_description}^^%{fld1}^^%{fld2}^^%{fld3}^^%{fld4}^^%{fld5}^^%{fld6}" }
			id => "msgParserId5"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <id>^^<id2>^^<instance>^^<date>^^<time>^^<id1>^^<event_description>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{id}^^%{id2}^^%{instance}^^%{date}^^%{time}^^%{id1}^^%{event_description}" }
			id => "msgParserId6"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{date} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy HH:mm:ss" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-secudesimsg.json"
#			template_name => "secudesi_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

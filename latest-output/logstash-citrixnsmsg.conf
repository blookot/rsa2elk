# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "citrixns"
			"[observer][name]" => "Citrix NetScaler"
			"[observer][type]" => "Application Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hdatetime>  <hfld1> : <msgIdPart1> <msgIdPart2> <hfld2>:<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hdatetime}  %{hfld1} : %{msgIdPart1} %{msgIdPart2} %{hfld2}:%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hdatetime>  <hfld1> : <msgIdPart1> <msgIdPart2> :<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hdatetime}  %{hfld1} : %{msgIdPart1} %{msgIdPart2} :%{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hdatetime>  <hfld1> : <hfld2> <msgIdPart1> {<msgIdPart2> <hfld3> |<msgIdPart2> }:<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hdatetime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+:[\s]+(?<hfld2>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+((?<msgIdPart2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+|(?<msgIdPart2>[^\s]*)[\s]+):(?<message>.*)$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: CEF:0|Citrix|<fld1>|<fld2>|<fld3>|<messageid>| <!payload:fld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^CEF:0\|Citrix\|(?<message>(?<fld1>[^\|]*)\|(?<fld2>[^\|]*)\|(?<fld3>[^\|]*)\|(?<messageid>[^\|]*)\|[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: CEF:0|Citrix|<product>|<version>|<rule>|<hfld1>|<severity>| <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "CEF:0|Citrix|%{product}|%{version}|%{rule}|%{hfld1}|%{severity}| %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "CITRIX_TVM"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-citrixnsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:   {Extracted_groups "<group>" | Extracted_groups "<group>} 
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^[\s]*(Extracted_groups[\s]+\"(?<group>[^\"]*)\"[\s]+|[\s]*Extracted_groups[\s]+\"(?<group>[^\s]*))[\s]+$" }
			id => "msgParserId0"
			add_field => {
				"event_description" => "The groups extracted after user logs in"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:   User <username> - Client_ip <saddr> - Failure_reason "<result>"
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "User %{username} - Client_ip %{saddr} - Failure_reason \"%{result}\"" }
			id => "msgParserId1"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "The aaa module failed to login the user"
				"severity" => "Alert"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA:   Source <saddr>:<sport> --> Destination <daddr>:<dport> - Protocol <protocol> - TimeStamp <info> - Hitcount <dclass_counter1> - Hit Rule <rulename> - Data <message_body>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "Source %{saddr}:%{sport} --> Destination %{daddr}:%{dport} - Protocol %{protocol} - TimeStamp %{info} - Hitcount %{dclass_counter1} - Hit Rule %{rulename} - Data %{message_body}" }
			id => "msgParserId2"
			add_field => {
				"event_description" => "ACL_PKT_LOG"
				"severity" => "Notice"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA:   <saddr> <fld2> <rule_group> <info>: <url> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{saddr} %{fld2} %{rule_group} %{info}: %{url} <%{disposition}>" }
			id => "msgParserId3"
			add_field => {
				"event_description" => "AppFw Buffer Overflow violation in Cookie"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:   <saddr> <fld2> <rule_group> <info>: <url> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{saddr} %{fld2} %{rule_group} %{info}: %{url} <%{disposition}>" }
			id => "msgParserId4"
			add_field => {
				"event_description" => "AppFw Buffer Overflow violation in HTTP Headers"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "APPFW_APPFW_BUFFEROVERFLOW_URL" {
		# MESSAGE APPFW_APPFW_BUFFEROVERFLOW_URL
		# line in RSA:   <saddr> <fld2> <rule_group> <info>: <url> <<<disposition>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} %{fld2} %{rule_group} %{info}: %{url} <%{disposition}>" }
				id => "message-APPFW_APPFW_BUFFEROVERFLOW_URL"
				add_field => {
				"event_description" => "AppFw Buffer Overflow violation in URL"
				"severity" => "Informational"
					"[event][id]" => "APPFW_APPFW_BUFFEROVERFLOW_URL"
					"[rsa][message][id1]" => "APPFW_APPFW_BUFFEROVERFLOW_URL"
					"[event][categoryid]" => "1201000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE APPFW_APPFW_BUFFEROVERFLOW_URL:01
		# line in RSA: <saddr> <fld2> <info>: <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} %{fld2} %{info}: %{url}" }
				id => "message-APPFW_APPFW_BUFFEROVERFLOW_URL:01"
				add_field => {
				"event_description" => "AppFw Buffer Overflow violation in URL"
				"severity" => "Informational"
					"[event][id]" => "APPFW_APPFW_BUFFEROVERFLOW_URL:01"
					"[rsa][message][id1]" => "APPFW_APPFW_BUFFEROVERFLOW_URL:01"
					"[event][categoryid]" => "1201000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA:   <saddr> {<fld2> <fld3> <rule_group> <url> Cookie|<fld2> <rule_group> <url> Cookie|<rule_group> <url> Cookie} validation failed for <fld3> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+((?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Cookie|(?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Cookie|(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Cookie)[\s]+validation[\s]+failed[\s]+for[\s]+(?<fld3>[^\s]*)[\s]+<(?<disposition>[^>]*)>$" }
			id => "msgParserId6"
			add_field => {
				"event_description" => "AppFw Cookie violation"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA:   <saddr> {<fld2> <rule_group> Disallow|<rule_group> Disallow} Deny URL: <url> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId7" {
		grok {
			match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+((?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+Disallow|(?<rule_group>[^\s]*)[\s]+Disallow)[\s]+Deny[\s]+URL:[\s]+(?<url>[^\s]*)[\s]+<(?<disposition>[^>]*)>$" }
			id => "msgParserId7"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Policy"
				"event_description" => "AppFw DenyURL violation"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA:   <saddr> {<fld1> <fld2> <rule_group> <url> Field consistency|<fld2> <rule_group> <url> Field consistency|<rule_group> <url> Field consistency} <info> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId8" {
		grok {
			match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+((?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Field[\s]+consistency|(?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Field[\s]+consistency|(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Field[\s]+consistency)[\s]+(?<info>[^\s]*)[\s]+<(?<disposition>[^>]*)>$" }
			id => "msgParserId8"
			add_field => {
				"event_description" => "AppFw Field Consistency violation"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA:   <saddr> {<fld2> <rule_group> <url> Field|<rule_group> <url> Field} <info> ="<fld4>" <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId9" {
		grok {
			match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+((?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Field|(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Field)[\s]+(?<info>[^\s]*)[\s]+=\"(?<fld4>[^\"]*)\"[\s]+<(?<disposition>[^>]*)>$" }
			id => "msgParserId9"
			add_field => {
				"event_description" => "AppFw Field Format violation"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "APPFW_APPFW_SQL" {
		# MESSAGE APPFW_APPFW_SQL
		# line in RSA:   <saddr> {<fld2> <rule_group> <url> SQL|<rule_group> <url> SQL} <info> <<<disposition>>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+((?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+SQL|(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+SQL)[\s]+(?<info>[^\s]*)[\s]+<(?<disposition>[^>]*)>$" }
				id => "message-APPFW_APPFW_SQL"
				add_field => {
				"event_description" => "AppFw SQL Injection violation"
				"severity" => "Informational"
					"[event][id]" => "APPFW_APPFW_SQL"
					"[rsa][message][id1]" => "APPFW_APPFW_SQL"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE APPFW_APPFW_SQL_1
		# line in RSA:   <saddr> {<fld2> <rule_group> <url> |<rule_group> <url> } <info> <<<disposition>>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+((?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+|(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+)[\s]+(?<info>[^\s]*)[\s]+<(?<disposition>[^>]*)>$" }
				id => "message-APPFW_APPFW_SQL_1"
				add_field => {
				"event_description" => "AppFw SQL Injection violation"
				"severity" => "Informational"
					"[event][id]" => "APPFW_APPFW_SQL_1"
					"[rsa][message][id1]" => "APPFW_APPFW_SQL_1"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA:   <saddr> { <fld2> <rule_group> <url> Maximum no. | <rule_group> <url> Maximum no. } of potential credit card numbers seen <<<info>>
	else if [logstash][msgparser][id] == "msgParserId12" {
		grok {
			match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+([\s]*(?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Maximum[\s]+no\.[\s]+|[\s]*(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Maximum[\s]+no\.[\s]+)[\s]+of[\s]+potential[\s]+credit[\s]+card[\s]+numbers[\s]+seen[\s]+<(?<info>[^>]*)>$" }
			id => "msgParserId12"
			add_field => {
				"event_description" => "AppFw SafeCommerce credit cards seen"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA:   <saddr> { <fld2> <rule_group> <url> Transformed (<info>) Maximum no. | <rule_group> <url> (<info>) } potential credit card numbers seen in server response
	else if [logstash][msgparser][id] == "msgParserId13" {
		grok {
			match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+([\s]*(?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Transformed[\s]+\((?<info>[^\)]*)\)[\s]+Maximum[\s]+no\.[\s]+|[\s]*(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+\((?<info>[^\)]*)\)[\s]+)[\s]+potential[\s]+credit[\s]+card[\s]+numbers[\s]+seen[\s]+in[\s]+server[\s]+response$" }
			id => "msgParserId13"
			add_field => {
				"event_description" => "AppFw SafeCommerce Transformed for credit cards seen in server repsonse"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA:   <saddr> {<fld2> <fld3> <rule_group> Disallow|<fld2> <rule_group> Disallow|<rule_group> Disallow} Illegal URL: <url> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId14" {
		grok {
			match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+((?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+Disallow|(?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+Disallow|(?<rule_group>[^\s]*)[\s]+Disallow)[\s]+Illegal[\s]+URL:[\s]+(?<url>[^\s]*)[\s]+<(?<disposition>[^>]*)>$" }
			id => "msgParserId14"
			add_field => {
				"event_description" => "AppFw StartURL violation"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA:   <saddr> {<fld2> <rule_group> <url> Cross-site|<rule_group> <url> Cross-site} script <info> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId15" {
		grok {
			match => { "message" => "^[\s]*(?<saddr>[^\s]*)[\s]+((?<fld2>[^\s]*)[\s]+(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Cross\-site|(?<rule_group>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+Cross\-site)[\s]+script[\s]+(?<info>[^\s]*)[\s]+<(?<disposition>[^>]*)>$" }
			id => "msgParserId15"
			add_field => {
				"event_description" => "AppFw XSS violation"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "APPFW_AF_400_RESP" {
		# MESSAGE APPFW_AF_400_RESP
		# line in RSA:   <saddr> "<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} \"%{info}\"" }
				id => "message-APPFW_AF_400_RESP"
				add_field => {
				"event_description" => "AppFw Request error. Generated 400 Response"
				"severity" => "Informational"
					"[event][id]" => "APPFW_AF_400_RESP"
					"[rsa][message][id1]" => "APPFW_AF_400_RESP"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE APPFW_AF_400_RESP:01
		# line in RSA: <saddr> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} %{info}" }
				id => "message-APPFW_AF_400_RESP:01"
				add_field => {
				"event_description" => "AppFw Request error. Generated 400 Response"
				"severity" => "Informational"
					"[event][id]" => "APPFW_AF_400_RESP:01"
					"[rsa][message][id1]" => "APPFW_AF_400_RESP:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA:   <saddr> <fld10> Match found with Safe Object: <info> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{saddr} %{fld10} Match found with Safe Object: %{info} <%{disposition}>" }
			id => "msgParserId17"
			add_field => {
				"event_description" => "AppFw Safe Object"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "APPFW_APPFW_CSRF_TAG" {
		# MESSAGE APPFW_APPFW_CSRF_TAG
		# line in RSA:   <saddr> <fld10> CSRF Tag validation failed: <<<disposition>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} %{fld10} CSRF Tag validation failed: <%{disposition}>" }
				id => "message-APPFW_APPFW_CSRF_TAG"
				add_field => {
				"event_description" => "AppFw CSRF Tag Validation Failed"
				"severity" => "Informational"
					"[event][id]" => "APPFW_APPFW_CSRF_TAG"
					"[rsa][message][id1]" => "APPFW_APPFW_CSRF_TAG"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE APPFW_APPFW_CSRF_TAG:01
		# line in RSA: <saddr> <fld1> <fld2> <fld3> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} %{fld1} %{fld2} %{fld3} %{url}" }
				id => "message-APPFW_APPFW_CSRF_TAG:01"
				add_field => {
				"severity" => "Informational"
					"[event][id]" => "APPFW_APPFW_CSRF_TAG:01"
					"[rsa][message][id1]" => "APPFW_APPFW_CSRF_TAG:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA:   Memory allocation request for <bytes> bytes failed.  Call stack PCs: <fld1>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "Memory allocation request for %{bytes} bytes failed.  Call stack PCs: %{fld1}" }
			id => "msgParserId19"
			add_field => {
				"event_description" => "Memory allocation request for some bytes failed"
				"severity" => "Warning"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "APPFW_Message" {
		# MESSAGE APPFW_Message
		# line in RSA:   "{Invalid rule id |Duplicate rule id }<fld1>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*\"(Invalid[\s]+rule[\s]+id[\s]+|Duplicate[\s]+rule[\s]+id[\s]+)(?<fld1>[^\"]*)\"$" }
				id => "message-APPFW_Message"
				add_field => {
				"event_description" => "Invalid/Duplicate Rule id"
				"severity" => "Warning"
					"[event][id]" => "APPFW_Message"
					"[rsa][message][id1]" => "APPFW_Message"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE APPFW_Message:01
		# line in RSA: "Setting default custom settings for profile <fld1> (<fld2>)"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"Setting default custom settings for profile %{fld1} (%{fld2})\"" }
				id => "message-APPFW_Message:01"
				add_field => {
				"event_description" => "Setting default custom settings for profile"
				"severity" => "Warning"
					"[event][id]" => "APPFW_Message:01"
					"[rsa][message][id1]" => "APPFW_Message:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE APPFW_Message:02
		# line in RSA: "Setting same CustomSettings( ) to profile. <fld2>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"Setting same CustomSettings( ) to profile. %{fld2}\"" }
				id => "message-APPFW_Message:02"
				add_field => {
				"event_description" => "Setting same CustomSettings( ) to profile."
					"[event][id]" => "APPFW_Message:02"
					"[rsa][message][id1]" => "APPFW_Message:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA:   "{HASTATE |<network_service>: }<info>"
	else if [logstash][msgparser][id] == "msgParserId23" {
		grok {
			match => { "message" => "^[\s]*\"(HASTATE[\s]+|(?<network_service>[^:]*):[\s]+)(?<info>[^\"]*)\"$" }
			id => "msgParserId23"
			add_field => {
				"event_description" => "Routing details"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA:   <process> ended { for <dclass_counter1> | <space> }
	else if [logstash][msgparser][id] == "msgParserId24" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\s]*)[\s]+ended[\s]+([\s]*for[\s]+(?<dclass_counter1>[^\s]*)[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
			id => "msgParserId24"
			add_field => {
				"event_description" => "Alert process ended"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA:   <process> started { for <dclass_counter1> | <space> }
	else if [logstash][msgparser][id] == "msgParserId25" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\s]*)[\s]+started[\s]+([\s]*for[\s]+(?<dclass_counter1>[^\s]*)[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
			id => "msgParserId25"
			add_field => {
				"event_description" => "Alert process started"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA:   CONFIG <info>
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "CONFIG %{info}" }
			id => "msgParserId26"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Stop"
				"ec_theme" => "Configuration"
				"event_description" => "Configuration read completed from ns.conf file during boot-up"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA:   CONFIG <info>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "CONFIG %{info}" }
			id => "msgParserId27"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Start"
				"ec_theme" => "Configuration"
				"event_description" => "Configuration read started from ns.conf file during boot-up"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA:   <obj_type> {"<obj_name>" - State <event_state>| "<obj_name>"}
	else if [logstash][msgparser][id] == "msgParserId28" {
		grok {
			match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+(\"(?<obj_name>[^\"]*)\"[\s]+\-[\s]+State[\s]+(?<event_state>.*)|[\s]*\"(?<obj_name>[^\"]*)\")$" }
			id => "msgParserId28"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Stop"
				"event_description" => "Device Down"
				"severity" => "Notice"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s", "yyyy/M/d:HH:m:s" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA:   <obj_type> "<obj_name>" - State <event_state>
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "%{obj_type} \"%{obj_name}\" - State %{event_state}" }
			id => "msgParserId29"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Stop"
				"event_description" => "Device Out Of Service"
				"severity" => "Notice"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA:   <obj_type> { "<obj_name>" - State <event_state>| "<obj_name>" }
	else if [logstash][msgparser][id] == "msgParserId30" {
		grok {
			match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+([\s]*\"(?<obj_name>[^\"]*)\"[\s]+\-[\s]+State[\s]+(?<event_state>.*)|[\s]*\"(?<obj_name>[^\"]*)\"[\s]+)$" }
			id => "msgParserId30"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Start"
				"event_description" => "Device UP"
				"severity" => "Notice"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s", "yyyy/M/d:HH:m:s" ] }
		}
	}
	# PARSER msgParserId31
	# line in RSA:   <obj_type> {<obj_name> - State <event_state> | "<obj_name>"| <obj_name>}
	else if [logstash][msgparser][id] == "msgParserId31" {
		grok {
			match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+((?<obj_name>[^\s]*)[\s]+\-[\s]+State[\s]+(?<event_state>[^\s]*)[\s]+|[\s]*\"(?<obj_name>[^\"]*)\"|[\s]*(?<obj_name>.*))$" }
			id => "msgParserId31"
			add_field => {
				"event_description" => "The monitor bound to the service is down"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId32
	# line in RSA:   <obj_type> {<obj_name> - State <event_state> | <obj_name> }
	else if [logstash][msgparser][id] == "msgParserId32" {
		grok {
			match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+((?<obj_name>[^\s]*)[\s]+\-[\s]+State[\s]+(?<event_state>[^\s]*)[\s]+|[\s]*(?<obj_name>[^\s]*)[\s]+)$" }
			id => "msgParserId32"
			add_field => {
				"event_description" => "The monitor bound to the service is up"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId33
	# line in RSA:   <obj_type> "<obj_name>" - State <event_state>
	else if [logstash][msgparser][id] == "msgParserId33" {
		dissect {
			mapping => { "message" => "%{obj_type} \"%{obj_name}\" - State %{event_state}" }
			id => "msgParserId33"
			add_field => {
				"event_description" => "The monitor bound to the service is up"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId34
	# line in RSA:   <obj_type> <obj_name> - State <event_state>
	else if [logstash][msgparser][id] == "msgParserId34" {
		dissect {
			mapping => { "message" => "%{obj_type} %{obj_name} - State %{event_state}" }
			id => "msgParserId34"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"event_description" => "Route is Down"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId35
	# line in RSA:   <obj_type> <obj_name> - State <event_state>
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "%{obj_type} %{obj_name} - State %{event_state}" }
			id => "msgParserId35"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Start"
				"event_description" => "Route is UP"
				"severity" => "Debug"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId36
	# line in RSA:   CPU_started <info>
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "CPU_started %{info}" }
			id => "msgParserId36"
			add_field => {
				"event_description" => "CPU Started"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId37
	# line in RSA:   SAVECONFIG <info>
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "SAVECONFIG %{info}" }
			id => "msgParserId37"
			add_field => {
				"event_description" => "Save configuration started"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId38
	# line in RSA:   System started - <info>
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "System started - %{info}" }
			id => "msgParserId38"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Start"
				"event_description" => "Netscaler Started"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "EVENT_STATECHANGE" {
		# MESSAGE EVENT_STATECHANGE
		# line in RSA:   <obj_type> "<obj_name>" - State <event_state>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} \"%{obj_name}\" - State %{event_state}" }
				id => "message-EVENT_STATECHANGE"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Start"
				"event_description" => "HA State has changed"
				"severity" => "Informational"
					"[event][id]" => "EVENT_STATECHANGE"
					"[rsa][message][id1]" => "EVENT_STATECHANGE"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE EVENT_STATECHANGE_HEARTBEAT
		# line in RSA:   <obj_type> (<obj_name>) - <event_state> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} (%{obj_name}) - %{event_state} %{info}" }
				id => "message-EVENT_STATECHANGE_HEARTBEAT"
				add_field => {
				"event_description" => "Heartbeat State report"
				"severity" => "Informational"
					"[event][id]" => "EVENT_STATECHANGE_HEARTBEAT"
					"[rsa][message][id1]" => "EVENT_STATECHANGE_HEARTBEAT"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE EVENT_STATECHANGE:01
		# line in RSA:   <obj_type> "<obj_name>" - <event_state> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} \"%{obj_name}\" - %{event_state} %{info}" }
				id => "message-EVENT_STATECHANGE:01"
				add_field => {
					"[event][id]" => "EVENT_STATECHANGE:01"
					"[rsa][message][id1]" => "EVENT_STATECHANGE:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId42
	# line in RSA:   SAVECONFIG<info>
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "SAVECONFIG%{info}" }
			id => "msgParserId42"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Stop"
				"event_description" => "Save configuration stopped"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId43
	# line in RSA:   System stopped - <info>
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "System stopped - %{info}" }
			id => "msgParserId43"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Stop"
				"event_description" => "Netscaler Stopped"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId44
	# line in RSA:  <info>
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId44"
			add_field => {
				"event_description" => "Unknown Event"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "PITBOSS_Message" {
		# MESSAGE PITBOSS_Message1
		# line in RSA: "{ <fld1> <fld10> Adding | Adding } <info>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^\"([\s]*(?<fld1>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+Adding[\s]+|[\s]*Adding[\s]+)[\s]+(?<info>[^\"]*)\"$" }
				id => "message-PITBOSS_Message1"
				add_field => {
				"event_description" => "Pitboss watch is added"
				"severity" => "Informational"
					"[event][id]" => "PITBOSS_Message1"
					"[rsa][message][id1]" => "PITBOSS_Message1"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE PITBOSS_Message2
		# line in RSA: "{ <fld1> <fld10> Deleting | Deleting }<info>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^\"([\s]*(?<fld1>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+Deleting[\s]+|[\s]*Deleting[\s]+)(?<info>[^\"]*)\"$" }
				id => "message-PITBOSS_Message2"
				add_field => {
				"event_description" => "Pitboss watch is deleted"
				"severity" => "Informational"
					"[event][id]" => "PITBOSS_Message2"
					"[rsa][message][id1]" => "PITBOSS_Message2"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE PITBOSS_Message3
		# line in RSA:   "<fld1> <fld10> {Pitboss policy is|PB_OP_CHANGE_POLICY new policy|pb_op_longer_hb} <info>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*\"(?<fld1>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(Pitboss[\s]+policy[\s]+is|PB_OP_CHANGE_POLICY[\s]+new[\s]+policy|pb_op_longer_hb)[\s]+(?<info>[^\"]*)\"$" }
				id => "message-PITBOSS_Message3"
				add_field => {
				"event_description" => "Pitboss policy"
				"severity" => "Informational"
					"[event][id]" => "PITBOSS_Message3"
					"[rsa][message][id1]" => "PITBOSS_Message3"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE PITBOSS_Message4
		# line in RSA:  "{ <fld1> <fld10> process | process } <info>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*\"([\s]*(?<fld1>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+process[\s]+|[\s]*process[\s]+)[\s]+(?<info>[^\"]*)\"$" }
				id => "message-PITBOSS_Message4"
				add_field => {
				"event_description" => "Process"
				"severity" => "Informational"
					"[event][id]" => "PITBOSS_Message4"
					"[rsa][message][id1]" => "PITBOSS_Message4"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE PITBOSS_Message5
		# line in RSA:  "{ <fld1> <fld10> New | New } <info>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*\"([\s]*(?<fld1>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+New[\s]+|[\s]*New[\s]+)[\s]+(?<info>[^\"]*)\"$" }
				id => "message-PITBOSS_Message5"
				add_field => {
				"event_description" => "Process"
				"severity" => "Informational"
					"[event][id]" => "PITBOSS_Message5"
					"[rsa][message][id1]" => "PITBOSS_Message5"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "ROUTING_Message" {
		# MESSAGE ROUTING_Message
		# line in RSA:  "IMI: <event_description> : nodeID(<fld1>) IP(<saddr>) instance(<fld2>) Configuration Coordinator(<fld3>) Nodeset(<fld4>)"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"IMI: %{event_description} : nodeID(%{fld1}) IP(%{saddr}) instance(%{fld2}) Configuration Coordinator(%{fld3}) Nodeset(%{fld4})\"" }
				id => "message-ROUTING_Message"
				add_field => {
					"[event][id]" => "ROUTING_Message"
					"[rsa][message][id1]" => "ROUTING_Message"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE ROUTING_Message:01
		# line in RSA:   "{HASTATE |<network_service>: }<info>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*\"(HASTATE[\s]+|(?<network_service>[^:]*):[\s]+)(?<info>[^\"]*)\"$" }
				id => "message-ROUTING_Message:01"
				add_field => {
				"event_description" => "Routing details"
				"severity" => "Informational"
					"[event][id]" => "ROUTING_Message:01"
					"[rsa][message][id1]" => "ROUTING_Message:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE ROUTING_Message:02
		# line in RSA:   "<fld1> started"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{fld1} started\"" }
				id => "message-ROUTING_Message:02"
				add_field => {
					"[event][id]" => "ROUTING_Message:02"
					"[rsa][message][id1]" => "ROUTING_Message:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA:  <obj_type> Command "<action>" <info>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "%{obj_type} Command \"%{action}\" %{info}" }
			id => "msgParserId52"
			add_field => {
				"event_description" => "User has executed a command in ZebOS(vtysh)"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SNMP_TRAP_SENT" {
		# MESSAGE SNMP_TRAP_SENT7
		# line in RSA:   <obj_type> ( <space>entityName = {"<obj_name>(<info>...",|"<obj_name>...",} alarmEntityCurState = <event_state>, {svcServiceFullName.<fld2> = "<service>", nsPartitionName = <fld4>|vsvrFullName.<fld3> = "<obj_server>", nsPartitionName = <fld4>|svcGrpMemberFullName.<fld6> = "<fld7>", nsPartitionName = <fld4>|sysIpAddress = <hostip>})
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+\([\s]+(?<space>[^e]*)entityName[\s]+=[\s]+(\"(?<obj_name>[^\(]*)\((?<info>[^\.]*)\.\.\.\",|\"(?<obj_name>[^\.]*)\.\.\.\",)[\s]+alarmEntityCurState[\s]+=[\s]+(?<event_state>[^,]*),[\s]+(svcServiceFullName\.(?<fld2>[^\s]*)[\s]+=[\s]+\"(?<service>[^\"]*)\",[\s]+nsPartitionName[\s]+=[\s]+(?<fld4>[^\)]*)|vsvrFullName\.(?<fld3>[^\s]*)[\s]+=[\s]+\"(?<obj_server>[^\"]*)\",[\s]+nsPartitionName[\s]+=[\s]+(?<fld4>[^\)]*)|svcGrpMemberFullName\.(?<fld6>[^\s]*)[\s]+=[\s]+\"(?<fld7>[^\"]*)\",[\s]+nsPartitionName[\s]+=[\s]+(?<fld4>[^\)]*)|sysIpAddress[\s]+=[\s]+(?<hostip>[^\)]*))\)$" }
				id => "message-SNMP_TRAP_SENT7"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT7"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT7"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT8
		# line in RSA:   <obj_type> ( entityName = "<obj_name>...", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( entityName = \"%{obj_name}...\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT8"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
					"[event][id]" => "SNMP_TRAP_SENT8"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT8"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT9
		# line in RSA:   <obj_type> ( haNicsMonitorFailed = <obj_name>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( haNicsMonitorFailed = %{obj_name}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT9"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
					"[event][id]" => "SNMP_TRAP_SENT9"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT9"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT10
		# line in RSA:   <obj_type> ( <space>haPeerSystemState = "<event_state>", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( %{space}haPeerSystemState = \"%{event_state}\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT10"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT10"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT10"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT11
		# line in RSA:   <obj_type> ( sysHealthDiskName = "<obj_name>", sysHealthDiskPerusage = <fld2>, alarmHighThreshold = <dclass_counter2>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( sysHealthDiskName = \"%{obj_name}\", sysHealthDiskPerusage = %{fld2}, alarmHighThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT11"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT11"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT11"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT12
		# line in RSA:   <obj_type> ( vsvrName = "<dclass_counter1_string>", vsvrRequestRate = "<dclass_counter1>", alarmHighThreshold = <dclass_counter2>, vsvrFullName = "<fld1>", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( vsvrName = \"%{dclass_counter1_string}\", vsvrRequestRate = \"%{dclass_counter1}\", alarmHighThreshold = %{dclass_counter2}, vsvrFullName = \"%{fld1}\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT12"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT12"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT12"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT13
		# line in RSA:   <obj_type> ( monServiceName = "<fld1>", monitorName = "<dclass_counter1_string>", responseTimeoutThreshold = <dclass_counter1>, alarmMonrespto = <dclass_counter2>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( monServiceName = \"%{fld1}\", monitorName = \"%{dclass_counter1_string}\", responseTimeoutThreshold = %{dclass_counter1}, alarmMonrespto = %{dclass_counter2}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT13"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT13"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT13"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT14
		# line in RSA:   <obj_type> ( sysHealthCounterName = "<dclass_counter1_string>", sysHealthCounterValue = <dclass_counter1>, alarmNormalThreshold = <dclass_counter2>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( sysHealthCounterName = \"%{dclass_counter1_string}\", sysHealthCounterValue = %{dclass_counter1}, alarmNormalThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT14"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT14"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT14"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT15
		# line in RSA:   <obj_type> ( sysHealthCounterName = "<dclass_counter1_string>", sysHealthCounterValue = <dclass_counter1>, alarmLowThreshold = <dclass_counter2>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( sysHealthCounterName = \"%{dclass_counter1_string}\", sysHealthCounterValue = %{dclass_counter1}, alarmLowThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT15"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT15"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT15"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT16
		# line in RSA:   <obj_type> ( sysHealthCounterName = "<dclass_counter1_string>", sysHealthCounterValue = <dclass_counter1>, alarmHighThreshold = <dclass_counter2>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( sysHealthCounterName = \"%{dclass_counter1_string}\", sysHealthCounterValue = %{dclass_counter1}, alarmHighThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT16"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT16"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT16"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT17
		# line in RSA:   <obj_type> ( alarmRateLmtThresholdExceeded = "<obj_name>: "<info>...", ipAddressGathered = "<fld1>", stringComputed = "<fld2>", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( alarmRateLmtThresholdExceeded = \"%{obj_name}: \"%{info}...\", ipAddressGathered = \"%{fld1}\", stringComputed = \"%{fld2}\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT17"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT17"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT17"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT
		# line in RSA:   <obj_type> ( entityName = "<obj_name>{ (<info>..." | (<info>" }, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+\([\s]+entityName[\s]+=[\s]+\"(?<obj_name>[^\s\s]*)([\s]*\((?<info>[^\.]*)\.\.\.\"[\s]+|[\s]*\((?<info>[^\"]*)\"[\s]+),[\s]+sysIpAddress[\s]+=[\s]+(?<hostip>[^\)]*)\)$" }
				id => "message-SNMP_TRAP_SENT"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT6
		# line in RSA:   <obj_type> ( appfwLogMsg = <obj_name>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( appfwLogMsg = %{obj_name}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT6"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT6"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT6"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT5
		# line in RSA:   <obj_type> ( <space> {partition id = <fld12>, nsUserName = "<username>",|nsUserName = "<username>",} configurationCmd = "<action>", authorizationStatus = <event_state>, commandExecutionStatus = <disposition>, {commandFailureReason = "<result>", nsClientIPAddr = <saddr>, sysIpAddress =<hostip>|commandFailureReason = "<result>", nsClientIPAddr = <saddr>, nsPartitionName = <fld1>|nsClientIPAddr = <saddr>, nsPartitionName = <fld1>|nsClientIPAddr = <saddr>, sysIpAddress =<hostip> |sysIpAddress =<hostip>})
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+\([\s]+(?<space>[^\s]*)[\s]+(partition[\s]+id[\s]+=[\s]+(?<fld12>[^,]*),[\s]+nsUserName[\s]+=[\s]+\"(?<username>[^\"]*)\",|nsUserName[\s]+=[\s]+\"(?<username>[^\"]*)\",)[\s]+configurationCmd[\s]+=[\s]+\"(?<action>[^\"]*)\",[\s]+authorizationStatus[\s]+=[\s]+(?<event_state>[^,]*),[\s]+commandExecutionStatus[\s]+=[\s]+(?<disposition>[^,]*),[\s]+(commandFailureReason[\s]+=[\s]+\"(?<result>[^\"]*)\",[\s]+nsClientIPAddr[\s]+=[\s]+(?<saddr>[^,]*),[\s]+sysIpAddress[\s]+=(?<hostip>[^\)]*)|commandFailureReason[\s]+=[\s]+\"(?<result>[^\"]*)\",[\s]+nsClientIPAddr[\s]+=[\s]+(?<saddr>[^,]*),[\s]+nsPartitionName[\s]+=[\s]+(?<fld1>[^\)]*)|nsClientIPAddr[\s]+=[\s]+(?<saddr>[^,]*),[\s]+nsPartitionName[\s]+=[\s]+(?<fld1>[^\)]*)|nsClientIPAddr[\s]+=[\s]+(?<saddr>[^,]*),[\s]+sysIpAddress[\s]+=(?<hostip>[^\s]*)[\s]+|sysIpAddress[\s]+=(?<hostip>[^\)]*))\)$" }
				id => "message-SNMP_TRAP_SENT5"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT5"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT5"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT1
		# line in RSA:   <obj_type> ( nsUserName = "<username>", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( nsUserName = \"%{username}\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT1"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"obj_name" => "%{username}"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT1"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT1"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT2
		# line in RSA:   <obj_type> ( nsCPUusage = <dclass_counter1>, alarm <trigger_val> = <dclass_counter2>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( nsCPUusage = %{dclass_counter1}, alarm %{trigger_val} = %{dclass_counter2}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT2"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT2"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT2"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT3
		# line in RSA:   <obj_type> ( sysHealthDiskName = "<filename>", sysHealthDiskPerusage = <dclass_counter1>, alarmNormalThreshold = <dclass_counter2>, sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( sysHealthDiskName = \"%{filename}\", sysHealthDiskPerusage = %{dclass_counter1}, alarmNormalThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT3"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT3"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT3"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT4
		# line in RSA:   <obj_type> ( sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT4"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT4"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT4"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT18
		# line in RSA:   <obj_type> (entityName = "<obj_name>", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} (entityName = \"%{obj_name}\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT18"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
					"[event][id]" => "SNMP_TRAP_SENT18"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT18"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT19
		# line in RSA:   <obj_type> ( <space> nsUserName = "<username>", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} ( %{space} nsUserName = \"%{username}\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT19"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT19"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT19"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT21
		# line in RSA:   <obj_type> (partition id = <fld12>, {entityName = "<obj_name>(<fld4>|entityName = "<obj_name>}...", {svcGrpMemberFullName.<fld2> = "<fld3>", sysIpAddress = <hostip>|vsvrFullName.<fld2> = "<fld3>", sysIpAddress = <hostip>|sysIpAddress = <hostip> } )
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+\(partition[\s]+id[\s]+=[\s]+(?<fld12>[^,]*),[\s]+(entityName[\s]+=[\s]+\"(?<obj_name>[^\(]*)\((?<fld4>[^\.]*)|entityName[\s]+=[\s]+\"(?<obj_name>[^\.]*))\.\.\.\",[\s]+(svcGrpMemberFullName\.(?<fld2>[^\s]*)[\s]+=[\s]+\"(?<fld3>[^\"]*)\",[\s]+sysIpAddress[\s]+=[\s]+(?<hostip>[^\s]*)|vsvrFullName\.(?<fld2>[^\s]*)[\s]+=[\s]+\"(?<fld3>[^\"]*)\",[\s]+sysIpAddress[\s]+=[\s]+(?<hostip>[^\s]*)|sysIpAddress[\s]+=[\s]+(?<hostip>[^\s]*)[\s]+)[\s]+\)$" }
				id => "message-SNMP_TRAP_SENT21"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT21"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT21"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT22
		# line in RSA:   <obj_type> (entityName = {"<obj_name>..." |"<obj_name>"}, {svcGrpMemberFullName.<fld2>|vsvrFullName.<fld2>|svcServiceFullName.<fld2>} = "<fld3>", nsPartitionName = <fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+\(entityName[\s]+=[\s]+(\"(?<obj_name>[^\.]*)\.\.\.\"[\s]+|\"(?<obj_name>[^\"]*)\"),[\s]+(svcGrpMemberFullName\.(?<fld2>[^\s]*)|vsvrFullName\.(?<fld2>[^\s]*)|svcServiceFullName\.(?<fld2>[^\s]*))[\s]+=[\s]+\"(?<fld3>[^\"]*)\",[\s]+nsPartitionName[\s]+=[\s]+(?<fld1>[^\)]*)\)$" }
				id => "message-SNMP_TRAP_SENT22"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT22"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT22"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT23
		# line in RSA:   <obj_type> (platformRateLimitPacketDropCount = <dclass_counter1>, platformLicensedThroughput = <fld2>, nsPartitionName = <fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} (platformRateLimitPacketDropCount = %{dclass_counter1}, platformLicensedThroughput = %{fld2}, nsPartitionName = %{fld3})" }
				id => "message-SNMP_TRAP_SENT23"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT23"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT23"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT24
		# line in RSA:   <obj_type> (vsvrName.<fld2> = "<fld3>", vsvrCurSoValue = <fld4>, vsvrSoMethod = "<fld5>", vsvrSoThresh = "<info>", vsvrFullName.<fld6> = "<fld7>", nsPartitionName = <fld8>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} (vsvrName.%{fld2} = \"%{fld3}\", vsvrCurSoValue = %{fld4}, vsvrSoMethod = \"%{fld5}\", vsvrSoThresh = \"%{info}\", vsvrFullName.%{fld6} = \"%{fld7}\", nsPartitionName = %{fld8})" }
				id => "message-SNMP_TRAP_SENT24"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT24"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT24"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT25
		# line in RSA:   <obj_type> ({partition id = <fld12>, sslCertKeyName.<fld1> = "<fld2>",| sslCertKeyName.<fld1> = "<fld2>",} sslDaysToExpire.<fld3> = <dclass_counter1>, {nsPartitionName = <fld4>|sysIpAddress = <hostip>})
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+\((partition[\s]+id[\s]+=[\s]+(?<fld12>[^,]*),[\s]+sslCertKeyName\.(?<fld1>[^\s]*)[\s]+=[\s]+\"(?<fld2>[^\"]*)\",|[\s]*sslCertKeyName\.(?<fld1>[^\s]*)[\s]+=[\s]+\"(?<fld2>[^\"]*)\",)[\s]+sslDaysToExpire\.(?<fld3>[^\s]*)[\s]+=[\s]+(?<dclass_counter1>[^,]*),[\s]+(nsPartitionName[\s]+=[\s]+(?<fld4>[^\)]*)|sysIpAddress[\s]+=[\s]+(?<hostip>[^\)]*))\)$" }
				id => "message-SNMP_TRAP_SENT25"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT25"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT25"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT26
		# line in RSA:   <obj_type> (nsUserName = "<username>", nsPartitionName = <fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} (nsUserName = \"%{username}\", nsPartitionName = %{fld1})" }
				id => "message-SNMP_TRAP_SENT26"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
					"[event][id]" => "SNMP_TRAP_SENT26"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT26"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT20
		# line in RSA:   <info> (sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info} (sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT20"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT20"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT20"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT28
		# line in RSA: <obj_type>(lldpRemLocalPortNum.<fld1>= "<fld5>", lldpRemChassisId.<fld2>= "<dmacaddr>", lldpRemPortId.<fld3>= "<dinterface>", sysIpAddress =<hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type}(lldpRemLocalPortNum.%{fld1}= \"%{fld5}\", lldpRemChassisId.%{fld2}= \"%{dmacaddr}\", lldpRemPortId.%{fld3}= \"%{dinterface}\", sysIpAddress =%{hostip})" }
				id => "message-SNMP_TRAP_SENT28"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT28"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT28"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT29
		# line in RSA: <obj_type>(haNicMonitorSucceeded = "<fld1>", sysIpAddress =<hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type}(haNicMonitorSucceeded = \"%{fld1}\", sysIpAddress =%{hostip})" }
				id => "message-SNMP_TRAP_SENT29"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT29"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT29"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT:04
		# line in RSA: <fld1>:StatusPoll:<fld2> - Device State changed to <disposition> for <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}:StatusPoll:%{fld2} - Device State changed to %{disposition} for %{saddr}" }
				id => "message-SNMP_TRAP_SENT:04"
				add_field => {
				"event_description" => "Device State changed"
					"[event][id]" => "SNMP_TRAP_SENT:04"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT:05
		# line in RSA: <fld1>:UserLogin:<username> - <event_description> from client IP Address <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}:UserLogin:%{username} - %{event_description} from client IP Address %{saddr}" }
				id => "message-SNMP_TRAP_SENT:05"
				add_field => {
					"[event][id]" => "SNMP_TRAP_SENT:05"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT:05"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT:01
		# line in RSA: <obj_type> (appfwLogMsg = "<obj_name> <info>",{sysIpAddress = <hostip>|nsPartitionName =<fld1>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<obj_type>[^\s]*)[\s]+\(appfwLogMsg[\s]+=[\s]+\"(?<obj_name>[^\s]*)[\s]+(?<info>[^\"]*)\",(sysIpAddress[\s]+=[\s]+(?<hostip>.*)|nsPartitionName[\s]+=(?<fld1>.*))$" }
				id => "message-SNMP_TRAP_SENT:01"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT:01"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT:02
		# line in RSA: <obj_type> (haNicsMonitorFailed = "<fld1>", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} (haNicsMonitorFailed = \"%{fld1}\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT:02"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT:02"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT27
		# line in RSA:   <obj_type> (partition id = <fld1>, entityName = "<obj_name>(<fld31>", svcServiceFullName.<fld2> = "<fld3>", sysIpAddress = <hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type} (partition id = %{fld1}, entityName = \"%{obj_name}(%{fld31}\", svcServiceFullName.%{fld2} = \"%{fld3}\", sysIpAddress = %{hostip})" }
				id => "message-SNMP_TRAP_SENT27"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
				"severity" => "Notice"
					"[event][id]" => "SNMP_TRAP_SENT27"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT27"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_SENT:03
		# line in RSA: <obj_type>(sysHealthCounterName.PowerSupply1Status = "<dclass_counter1_string>", sysHealthCounterValue.PowerSupply1Status = <dclass_counter1>, sysHealthPowerSupplyStatus = "<result>", sysIpAddress =<hostip>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{obj_type}(sysHealthCounterName.PowerSupply1Status = \"%{dclass_counter1_string}\", sysHealthCounterValue.PowerSupply1Status = %{dclass_counter1}, sysHealthPowerSupplyStatus = \"%{result}\", sysIpAddress =%{hostip})" }
				id => "message-SNMP_TRAP_SENT:03"
				add_field => {
				"event_description" => "SNMP TRAP SENT"
					"[event][id]" => "SNMP_TRAP_SENT:03"
					"[rsa][message][id1]" => "SNMP_TRAP_SENT:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId84
	# line in RSA:   User <username> - Client IP <hostip> - Vserver <saddr>:<sport> - Client_security_expression "CLIENT.REG('<info>').VALUE == <trigger_val> || <change_new> - <result>
	else if [logstash][msgparser][id] == "msgParserId84" {
		dissect {
			mapping => { "message" => "User %{username} - Client IP %{hostip} - Vserver %{saddr}:%{sport} - Client_security_expression \"CLIENT.REG('%{info}').VALUE == %{trigger_val} || %{change_new} - %{result}" }
			id => "msgParserId84"
			add_field => {
				"event_description" => "SNMP TRAP SENT"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId85
	# line in RSA:   { ClientIP <saddr> | SPCBId <sessionid> - ClientIP <saddr> } - ClientPort <sport> - VserverServiceIP <daddr> - VserverServicePort <dport> - ClientVersion <s_sslver> - CipherSuite "<s_cipher>" - Reason "<result>"
	else if [logstash][msgparser][id] == "msgParserId85" {
		grok {
			match => { "message" => "^[\s]*([\s]*ClientIP[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*SPCBId[\s]+(?<sessionid>[^\s]*)[\s]+\-[\s]+ClientIP[\s]+(?<saddr>[^\s]*)[\s]+)[\s]+\-[\s]+ClientPort[\s]+(?<sport>[^\s]*)[\s]+\-[\s]+VserverServiceIP[\s]+(?<daddr>[^\s]*)[\s]+\-[\s]+VserverServicePort[\s]+(?<dport>[^\s]*)[\s]+\-[\s]+ClientVersion[\s]+(?<s_sslver>[^\s]*)[\s]+\-[\s]+CipherSuite[\s]+\"(?<s_cipher>[^\"]*)\"[\s]+\-[\s]+Reason[\s]+\"(?<result>[^\"]*)\"$" }
			id => "msgParserId85"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"event_description" => "SSL Handshake failed"
				"severity" => "Debug"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId86
	# line in RSA:   { SPCBId <sessionid> ClientIP | ClientIP } <saddr> - ClientPort <sport> - VserverServiceIP <daddr> - VserverServicePort <dport> - ClientVersion <s_sslver> - CipherSuite "<s_cipher>" - Session <info>
	else if [logstash][msgparser][id] == "msgParserId86" {
		grok {
			match => { "message" => "^[\s]*([\s]*SPCBId[\s]+(?<sessionid>[^\s]*)[\s]+ClientIP[\s]+|[\s]*ClientIP[\s]+)[\s]+(?<saddr>[^\s]*)[\s]+\-[\s]+ClientPort[\s]+(?<sport>[^\s]*)[\s]+\-[\s]+VserverServiceIP[\s]+(?<daddr>[^\s]*)[\s]+\-[\s]+VserverServicePort[\s]+(?<dport>[^\s]*)[\s]+\-[\s]+ClientVersion[\s]+(?<s_sslver>[^\s]*)[\s]+\-[\s]+CipherSuite[\s]+\"(?<s_cipher>[^\"]*)\"[\s]+\-[\s]+Session[\s]+(?<info>.*)$" }
			id => "msgParserId86"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"event_description" => "SSL Handshake succeeded"
				"severity" => "Debug"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId87
	# line in RSA:   SPCBId <sessionid> - SubjectName "<cert_subject>"
	else if [logstash][msgparser][id] == "msgParserId87" {
		dissect {
			mapping => { "message" => "SPCBId %{sessionid} - SubjectName \"%{cert_subject}\"" }
			id => "msgParserId87"
			add_field => {
				"severity" => "Debug"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MM/dd/yyyy:HH:m:s", "dd/MM/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId88
	# line in RSA:   SPCBId <sessionid> - IssuerName "<fld1>"
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "SPCBId %{sessionid} - IssuerName \"%{fld1}\"" }
			id => "msgParserId88"
			add_field => {
				"severity" => "Debug"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MM/dd/yyyy:HH:m:s", "dd/MM/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId89
	# line in RSA:   Extracted_groups "<group>"
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "Extracted_groups \"%{group}\"" }
			id => "msgParserId89"
			add_field => {
				"event_description" => "The groups extracted after user logs into SSLVPN"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId90
	# line in RSA:  User <username> : - Client IP <hostip> - Vserver <saddr>:<sport> - Client security expression CLIENT.REG('<info>') { EXISTS | .VALUE == <trigger_val> } evaluated to <change_new>(<ntype>)
	else if [logstash][msgparser][id] == "msgParserId90" {
		grok {
			match => { "message" => "^[\s]*User[\s]+(?<username>[^\s]*)[\s]+:[\s]+\-[\s]+Client[\s]+IP[\s]+(?<hostip>[^\s]*)[\s]+\-[\s]+Vserver[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Client[\s]+security[\s]+expression[\s]+CLIENT\.REG\('(?<info>[^']*)'\)[\s]+([\s]*EXISTS[\s]+|[\s]*\.VALUE[\s]+==[\s]+(?<trigger_val>[^\s]*)[\s]+)[\s]+evaluated[\s]+to[\s]+(?<change_new>[^\(]*)\((?<ntype>[^\)]*)\)$" }
			id => "msgParserId90"
			add_field => {
				"event_description" => "SSLVPN session Client Security expression EXISTS and evaluated"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId91
	# line in RSA:  Context <fld1> - { SessionId: <sessionid> User | <fld5> User } <username> : Group(s) <group> : { Vserver <hostip> - <fld6> | - <fld7> } {GMT <web_method>|<web_method>} <url> <fld8>
	else if [logstash][msgparser][id] == "msgParserId91" {
		grok {
			match => { "message" => "^[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+([\s]*SessionId:[\s]+(?<sessionid>[^\s]*)[\s]+User[\s]+|[\s]*(?<fld5>[^\s]*)[\s]+User[\s]+)[\s]+(?<username>[^\s]*)[\s]+:[\s]+Group\(s\)[\s]+(?<group>[^\s]*)[\s]+:[\s]+([\s]*Vserver[\s]+(?<hostip>[^\s]*)[\s]+\-[\s]+(?<fld6>[^\s]*)[\s]+|[\s]*\-[\s]+(?<fld7>[^\s]*)[\s]+)[\s]+(GMT[\s]+(?<web_method>[^\s]*)|(?<web_method>[^\s]*))[\s]+(?<url>[^\s]*)[\s]+(?<fld8>.*)$" }
			id => "msgParserId91"
			add_field => {
				"ec_activity" => "Request"
				"event_description" => "SSLVPN session receives a HTTP request"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SSLVPN_ICAEND_CONNSTAT" {
		# MESSAGE SSLVPN_ICAEND_CONNSTAT
		# line in RSA:  Source <saddr>:<sport> - Destination <dtransaddr>:<dtransport> - Start_time {" <fld10> GMT"|" <fld10>"| <fld10>} - End_time {" <fld11> GMT"|" <fld11>"| <fld11>} - Duration <duration_string> - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes> - Total_compressedbytes_send <comp_sbytes> - Total_compressedbytes_recv <comp_rbytes> - Compression_ratio_send <dclass_ratio1> - Compression_ratio_recv <dclass_ratio2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+Start_time[\s]+(\"[\s]+(?<fld10>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld10>[^\"]*)\"|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+End_time[\s]+(\"[\s]+(?<fld11>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld11>[^\"]*)\"|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Duration[\s]+(?<duration_string>[^\s]*)[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>[^\s]*)[\s]+\-[\s]+Total_compressedbytes_send[\s]+(?<comp_sbytes>[^\s]*)[\s]+\-[\s]+Total_compressedbytes_recv[\s]+(?<comp_rbytes>[^\s]*)[\s]+\-[\s]+Compression_ratio_send[\s]+(?<dclass_ratio1>[^\s]*)[\s]+\-[\s]+Compression_ratio_recv[\s]+(?<dclass_ratio2>.*)$" }
				id => "message-SSLVPN_ICAEND_CONNSTAT"
				add_field => {
				"event_description" => "ICA connection related information for a connection belonging to a SSLVPN session"
				"severity" => "Informational"
					"[event][id]" => "SSLVPN_ICAEND_CONNSTAT"
					"[rsa][message][id1]" => "SSLVPN_ICAEND_CONNSTAT"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SSLVPN_ICAEND_CONNSTAT:01
		# line in RSA:  Source <saddr>:<sport> - Destination <dtransaddr>:<dtransport> - username:domainname <username>:<ddomain> - startTime {" <fld10> GMT"|" <fld10>"| <fld10>} - endTime {" <fld11> GMT"|" <fld11>"| <fld11>} - Duration <duration_string> - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes> - Total_compressedbytes_send <comp_sbytes> - Total_compressedbytes_recv <comp_rbytes> - Compression_ratio_send <dclass_ratio1> - Compression_ratio_recv <dclass_ratio2>{- connectionId <connectionid>|<fld2>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
	}
	# PARSER msgParserId93
	# line in RSA:  { Context <fld1> - SessionId: <sessionid>- User <username> | Context <fld1> - User <username> | User <username> } - Client_ip <saddr> - Nat_ip {"<stransaddr>"|<stransaddr>} - Vserver <daddr>:<dport> - Browser_type <fld2> - SSLVPN_client_type <info> - Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId93" {
		grok {
			match => { "message" => "^[\s]*([\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*User[\s]+(?<username>[^\s]*)[\s]+)[\s]+\-[\s]+Client_ip[\s]+(?<saddr>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+(\"(?<stransaddr>[^\"]*)\"|(?<stransaddr>[^\s]*))[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Browser_type[\s]+(?<fld2>[^\s]*)[\s]+\-[\s]+SSLVPN_client_type[\s]+(?<info>[^\s]*)[\s]+\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId93"
			add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"event_description" => "SSLVPN login succeeds"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId94
	# line in RSA:  { Context <fld1> - SessionId: <sessionid>- User <username> | Context <fld1> - User <username> | User <username> } - Client_ip <saddr> - Nat_ip {"<stransaddr>"|<stransaddr>} - Vserver <daddr>:<dport> - Start_time {" <fld10> GMT"|" <fld10>"| <fld10>} - End_time {" <fld11> GMT"|" <fld11>"| <fld11>} - Duration <duration_string>  - Http_resources_accessed <fld3> - NonHttp_services_accessed <fld4> - Total_TCP_connections <fld5> - Total_UDP_flows <fld6> - Total_policies_allowed <fld7> - Total_policies_denied <fld8> - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes> - Total_compressedbytes_send <comp_sbytes> - Total_compressedbytes_recv <comp_rbytes> - Compression_ratio_send <dclass_ratio1> - Compression_ratio_recv <dclass_ratio2> - LogoutMethod "<result>" - Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId94" {
		grok {
			match => { "message" => "^[\s]*([\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*User[\s]+(?<username>[^\s]*)[\s]+)[\s]+\-[\s]+Client_ip[\s]+(?<saddr>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+(\"(?<stransaddr>[^\"]*)\"|(?<stransaddr>[^\s]*))[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Start_time[\s]+(\"[\s]+(?<fld10>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld10>[^\"]*)\"|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+End_time[\s]+(\"[\s]+(?<fld11>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld11>[^\"]*)\"|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Duration[\s]+(?<duration_string>[^\s]*)[\s]+\-[\s]+Http_resources_accessed[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+NonHttp_services_accessed[\s]+(?<fld4>[^\s]*)[\s]+\-[\s]+Total_TCP_connections[\s]+(?<fld5>[^\s]*)[\s]+\-[\s]+Total_UDP_flows[\s]+(?<fld6>[^\s]*)[\s]+\-[\s]+Total_policies_allowed[\s]+(?<fld7>[^\s]*)[\s]+\-[\s]+Total_policies_denied[\s]+(?<fld8>[^\s]*)[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>[^\s]*)[\s]+\-[\s]+Total_compressedbytes_send[\s]+(?<comp_sbytes>[^\s]*)[\s]+\-[\s]+Total_compressedbytes_recv[\s]+(?<comp_rbytes>[^\s]*)[\s]+\-[\s]+Compression_ratio_send[\s]+(?<dclass_ratio1>[^\s]*)[\s]+\-[\s]+Compression_ratio_recv[\s]+(?<dclass_ratio2>[^\s]*)[\s]+\-[\s]+LogoutMethod[\s]+\"(?<result>[^\"]*)\"[\s]+\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId94"
			add_field => {
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"event_description" => "SSLVPN session logs out"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId95
	# line in RSA:  { Context <fld1> - SessionId: <sessionid>- User <username> | Context <fld1> - User <username> | User <username> } - Client_ip <saddr> - Nat_ip {"<stransaddr>"|<stransaddr>} - Vserver <daddr>:<dport> - Last_contact <fld2> - Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId95" {
		grok {
			match => { "message" => "^[\s]*([\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*User[\s]+(?<username>[^\s]*)[\s]+)[\s]+\-[\s]+Client_ip[\s]+(?<saddr>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+(\"(?<stransaddr>[^\"]*)\"|(?<stransaddr>[^\s]*))[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Last_contact[\s]+(?<fld2>[^\s]*)[\s]+\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId95"
			add_field => {
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"event_description" => "SSLVPN TCP Connection Timed Out"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId96
	# line in RSA:  Context <fld1> - SessionId: <sessionid>- User <username> - Client_ip <hostip> - Nat_ip {"<stransaddr>"|<stransaddr>} - Vserver <daddr>:<dport> - Source <saddr>:<sport> - Destination <dtransaddr>:<dtransport> - Start_time {" <fld10> GMT"|" <fld10>"| <fld10>} - End_time {" <fld11> GMT"|" <fld11>"| <fld11>} - Duration <duration_string>  - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes> - Access <disposition> - Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId96" {
		grok {
			match => { "message" => "^[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+\-[\s]+Client_ip[\s]+(?<hostip>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+(\"(?<stransaddr>[^\"]*)\"|(?<stransaddr>[^\s]*))[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+Start_time[\s]+(\"[\s]+(?<fld10>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld10>[^\"]*)\"|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+End_time[\s]+(\"[\s]+(?<fld11>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld11>[^\"]*)\"|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Duration[\s]+(?<duration_string>[^\s]*)[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>[^\s]*)[\s]+\-[\s]+Access[\s]+(?<disposition>[^\s]*)[\s]+\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId96"
			add_field => {
				"event_description" => "SSLVPN UDP Flow Statistics"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SSLVPN_ICASTART" {
		# MESSAGE SSLVPN_ICASTART
		# line in RSA:  Server port = <dport> - Server server ip = <daddr> - username:domain_name = <username>:<ddomain> - application name = <application>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server port = %{dport} - Server server ip = %{daddr} - username:domain_name = %{username}:%{ddomain} - application name = %{application}" }
				id => "message-SSLVPN_ICASTART"
				add_field => {
				"event_description" => "ICA started"
				"severity" => "Informational"
					"[event][id]" => "SSLVPN_ICASTART"
					"[rsa][message][id1]" => "SSLVPN_ICASTART"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE SSLVPN_ICASTART:01
		# line in RSA:  Source <saddr>:<sport> - Destination <dtransaddr>:<dtransport> - username:domainname <username>:<ddomain> - applicationName <application> - startTime {" <fld10> GMT"|" <fld10>"| <fld10>} - connectionId <fld5>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+username:domainname[\s]+(?<username>[^:]*):(?<ddomain>[^\s]*)[\s]+\-[\s]+applicationName[\s]+(?<application>[^\s]*)[\s]+\-[\s]+startTime[\s]+(\"[\s]+(?<fld10>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld10>[^\"]*)\"|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+connectionId[\s]+(?<fld5>.*)$" }
				id => "message-SSLVPN_ICASTART:01"
				add_field => {
					"[event][id]" => "SSLVPN_ICASTART:01"
					"[rsa][message][id1]" => "SSLVPN_ICASTART:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId99
	# line in RSA:   { "<action>: <fld1> " | "<action> <fld1>" | "<action>: <fld1> }
	else if [logstash][msgparser][id] == "msgParserId99" {
		grok {
			match => { "message" => "^[\s]*([\s]*\"(?<action>[^:]*):[\s]+(?<fld1>[^\s]*)[\s]+\"[\s]+|[\s]*\"(?<action>[^\s]*)[\s]+(?<fld1>[^\"]*)\"[\s]+|[\s]*\"(?<action>[^:]*):[\s]+(?<fld1>[^\s]*)[\s]+)$" }
			id => "msgParserId99"
			add_field => {
				"event_description" => "Message"
				"severity" => "Notice"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId100
	# line in RSA:  { Context <fld1> - SessionId: <sessionid>- User <username> | Context <fld1> - User <username> | User <username> } - Client_ip <hostip> - Nat_ip <stransaddr> - Vserver <daddr>:<dport> - Source <saddr>:<sport> - Destination <dtransaddr>:<dtransport> - Start_time {" <fld10> GMT"|" <fld10>"| <fld10>} - End_time {" <fld11> GMT"|" <fld11>"| <fld11>} - Duration <duration_string> - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes> - Total_compressedbytes_send <comp_sbytes> - Total_compressedbytes_recv <comp_rbytes> - Compression_ratio_send <dclass_ratio1> - Compression_ratio_recv <dclass_ratio2> - Access <disposition> - Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId100" {
		grok {
			match => { "message" => "^[\s]*([\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*User[\s]+(?<username>[^\s]*)[\s]+)[\s]+\-[\s]+Client_ip[\s]+(?<hostip>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+(?<stransaddr>[^\s]*)[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+Start_time[\s]+(\"[\s]+(?<fld10>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld10>[^\"]*)\"|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+End_time[\s]+(\"[\s]+(?<fld11>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld11>[^\"]*)\"|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Duration[\s]+(?<duration_string>[^\s]*)[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>[^\s]*)[\s]+\-[\s]+Total_compressedbytes_send[\s]+(?<comp_sbytes>[^\s]*)[\s]+\-[\s]+Total_compressedbytes_recv[\s]+(?<comp_rbytes>[^\s]*)[\s]+\-[\s]+Compression_ratio_send[\s]+(?<dclass_ratio1>[^\s]*)[\s]+\-[\s]+Compression_ratio_recv[\s]+(?<dclass_ratio2>[^\s]*)[\s]+\-[\s]+Access[\s]+(?<disposition>[^\s]*)[\s]+\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId100"
			add_field => {
				"event_description" => "TCP connection related information for a connection belonging to a SSLVPN session"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId101
	# line in RSA:   Source <saddr>:<sport> - Vserver <daddr>:<dport> - NatIP <stransaddr>:<stransport> - Destination <dtransaddr>:<dtransport> - Delink Time { <fld11> GMT| <fld11>} - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes>
	else if [logstash][msgparser][id] == "msgParserId101" {
		grok {
			match => { "message" => "^[\s]*Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+NatIP[\s]+(?<stransaddr>[^:]*):(?<stransport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+Delink[\s]+Time[\s]+([\s]*(?<fld11>[^\s]*)[\s]+GMT|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>.*)$" }
			id => "msgParserId101"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Start"
				"event_description" => "A Server side and a Client side TCP connection is delinked"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "TCP_CONN_TERMINATE" {
		# MESSAGE TCP_CONN_TERMINATE
		# line in RSA:   Source <saddr>:<sport> - Destination <daddr>:<dport> - Start Time { <fld10> GMT| <fld10>} - End Time { <fld11> GMT| <fld11>} - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Start[\s]+Time[\s]+([\s]*(?<fld10>[^\s]*)[\s]+GMT|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+End[\s]+Time[\s]+([\s]*(?<fld11>[^\s]*)[\s]+GMT|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>.*)$" }
				id => "message-TCP_CONN_TERMINATE"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"event_description" => "TCP connection terminated"
				"severity" => "Informational"
					"[event][id]" => "TCP_CONN_TERMINATE"
					"[rsa][message][id1]" => "TCP_CONN_TERMINATE"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE TCP_CONN_TERMINATE:01
		# line in RSA: Source <saddr>Total_bytes_send <sbytes> - Total_bytes_recv <rbytes>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source %{saddr}Total_bytes_send %{sbytes} - Total_bytes_recv %{rbytes}" }
				id => "message-TCP_CONN_TERMINATE:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"event_description" => "TCP connection terminated"
				"severity" => "Informational"
					"[event][id]" => "TCP_CONN_TERMINATE:01"
					"[rsa][message][id1]" => "TCP_CONN_TERMINATE:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId103
	# line in RSA:   Source <saddr>:<sport> - Vserver <daddr>:<dport> - NatIP <stransaddr>:<stransport> - Destination <dtransaddr>:<dtransport> - Delink Time { <fld11> GMT| <fld11>} Total_bytes_send <sbytes> - Total_bytes_recv <rbytes>
	else if [logstash][msgparser][id] == "msgParserId103" {
		grok {
			match => { "message" => "^[\s]*Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+NatIP[\s]+(?<stransaddr>[^:]*):(?<stransport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+Delink[\s]+Time[\s]+([\s]*(?<fld11>[^\s]*)[\s]+GMT|[\s]*(?<fld11>[^\s]*))[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>.*)$" }
			id => "msgParserId103"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Start"
				"event_description" => "A Server side and a Client side TCP connection is delinked. This is not tracked by Netscaler"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId104
	# line in RSA:   Source <saddr>:<sport> - Destination <daddr>:<dport> - NatIP <stransaddr>:<stransport> - Destination <dtransaddr>:<dtransport> - Start Time { <fld10> GMT| <fld10>} - Delink Time { <fld11> GMT| <fld11>} - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes> - <info>
	else if [logstash][msgparser][id] == "msgParserId104" {
		grok {
			match => { "message" => "^[\s]*Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+NatIP[\s]+(?<stransaddr>[^:]*):(?<stransport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+Start[\s]+Time[\s]+([\s]*(?<fld10>[^\s]*)[\s]+GMT|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+Delink[\s]+Time[\s]+([\s]*(?<fld11>[^\s]*)[\s]+GMT|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>[^\s]*)[\s]+\-[\s]+(?<info>.*)$" }
			id => "msgParserId104"
			add_field => {
				"ec_subject" => "NetworkComm"
				"event_description" => "A server side and a client side TCP connection for RNAT are delinked"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "UI_CMD_EXECUTED" {
		# MESSAGE UI_CMD_EXECUTED:Login
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "login <fld11>" - Status "Success<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"login %{fld11}\" - Status \"Success%{info}\"" }
				id => "message-UI_CMD_EXECUTED:Login"
				add_field => {
				"event_description" => "UI command executed in NetScaler"
				"severity" => "Informational"
				"disposition" => "Success"
				"ec_activity" => "Logon"
				"action" => "%{login}%{fld11}"
					"[event][id]" => "UI_CMD_EXECUTED:Login"
					"[rsa][message][id1]" => "UI_CMD_EXECUTED:Login"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE UI_CMD_EXECUTED:LoginFail
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "login <fld11>" - Status "ERROR:<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"login %{fld11}\" - Status \"ERROR:%{info}\"" }
				id => "message-UI_CMD_EXECUTED:LoginFail"
				add_field => {
				"event_description" => "UI command executed in NetScaler"
				"severity" => "Informational"
				"disposition" => "Error"
				"ec_activity" => "Logon"
				"action" => "%{login}%{fld11}"
					"[event][id]" => "UI_CMD_EXECUTED:LoginFail"
					"[rsa][message][id1]" => "UI_CMD_EXECUTED:LoginFail"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE UI_CMD_EXECUTED:Logout
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "logout <fld11>" - Status "Success<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"logout %{fld11}\" - Status \"Success%{info}\"" }
				id => "message-UI_CMD_EXECUTED:Logout"
				add_field => {
				"event_description" => "UI command executed in NetScaler"
				"severity" => "Informational"
				"disposition" => "Success"
				"ec_activity" => "Logoff"
				"action" => "%{logout}%{fld11}"
					"[event][id]" => "UI_CMD_EXECUTED:Logout"
					"[rsa][message][id1]" => "UI_CMD_EXECUTED:Logout"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE UI_CMD_EXECUTED
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "<action>" - Status "<disposition>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{action}\" - Status \"%{disposition}\"" }
				id => "message-UI_CMD_EXECUTED"
				add_field => {
				"event_description" => "CLI or GUI command executed in NetScaler"
				"severity" => "Informational"
					"[event][id]" => "UI_CMD_EXECUTED"
					"[rsa][message][id1]" => "UI_CMD_EXECUTED"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE UI_CMD_EXECUTED:01_Login
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "login <fld11>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"login %{fld11}\"" }
				id => "message-UI_CMD_EXECUTED:01_Login"
				add_field => {
				"event_description" => "UI command executed in NetScaler"
				"severity" => "Informational"
				"ec_activity" => "Logon"
				"action" => "%{login}%{fld11}"
					"[event][id]" => "UI_CMD_EXECUTED:01_Login"
					"[rsa][message][id1]" => "UI_CMD_EXECUTED:01_Login"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE UI_CMD_EXECUTED:01_Logout
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "logout <fld11>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"logout %{fld11}\"" }
				id => "message-UI_CMD_EXECUTED:01_Logout"
				add_field => {
				"event_description" => "UI command executed in NetScaler"
				"severity" => "Informational"
				"ec_activity" => "Logoff"
				"action" => "%{logout}%{fld11}"
					"[event][id]" => "UI_CMD_EXECUTED:01_Logout"
					"[rsa][message][id1]" => "UI_CMD_EXECUTED:01_Logout"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE UI_CMD_EXECUTED:01
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "<action>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{action}\"" }
				id => "message-UI_CMD_EXECUTED:01"
				add_field => {
				"event_description" => "CLI or GUI command executed in NetScaler"
				"severity" => "Informational"
					"[event][id]" => "UI_CMD_EXECUTED:01"
					"[rsa][message][id1]" => "UI_CMD_EXECUTED:01"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId109
	# line in RSA:  Context <fld1> - SessionId: <sessionid>- User <username> - Client_ip <hostip> - Nat_ip {"<stransaddr>"|<stransaddr>} - Vserver <daddr>:<dport> - Source <saddr>:<sport> - Destination <dtransaddr>:<dtransport> - Total_bytes_send <comp_sbytes> - Total_bytes_recv <comp_rbytes> - Denied_by_policy "<fld2>" - Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId109" {
		grok {
			match => { "message" => "^[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+\-[\s]+Client_ip[\s]+(?<hostip>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+(\"(?<stransaddr>[^\"]*)\"|(?<stransaddr>[^\s]*))[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+Total_bytes_send[\s]+(?<comp_sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<comp_rbytes>[^\s]*)[\s]+\-[\s]+Denied_by_policy[\s]+\"(?<fld2>[^\"]*)\"[\s]+\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId109"
			add_field => {
				"ec_activity" => "Request"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId110
	# line in RSA:  <fld1> - State Init
	else if [logstash][msgparser][id] == "msgParserId110" {
		dissect {
			mapping => { "message" => "%{fld1} - State Init" }
			id => "msgParserId110"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "CLUSTERD_Message" {
		# MESSAGE CLUSTERD_Message:01
		# line in RSA:  "REC: status <info> from client <fld1> for ID <id>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"REC: status %{info} from client %{fld1} for ID %{id}\"" }
				id => "message-CLUSTERD_Message:01"
				add_field => {
					"[event][id]" => "CLUSTERD_Message:01"
					"[rsa][message][id1]" => "CLUSTERD_Message:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE CLUSTERD_Message:02
		# line in RSA:  { "<info>(<saddr>) port(<sport>) msglen(<fld1>) rcv(<packets>) R(<result>) " | "<info> "} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*\"(?<info>[^\(]*)\((?<saddr>[^\)]*)\)[\s]+port\((?<sport>[^\)]*)\)[\s]+msglen\((?<fld1>[^\)]*)\)[\s]+rcv\((?<packets>[^\)]*)\)[\s]+R\((?<result>[^\)]*)\)[\s]+\"[\s]+|[\s]*\"(?<info>[^\s]*)[\s]+\")[\s]+$" }
				id => "message-CLUSTERD_Message:02"
				add_field => {
					"[event][id]" => "CLUSTERD_Message:02"
					"[rsa][message][id1]" => "CLUSTERD_Message:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId113
	# line in RSA:  {"crypto: driver <fld1> registers alg <fld2> flags <fld3> maxoplen <fld4> " | "<info> "}
	else if [logstash][msgparser][id] == "msgParserId113" {
		grok {
			match => { "message" => "^[\s]*(\"crypto:[\s]+driver[\s]+(?<fld1>[^\s]*)[\s]+registers[\s]+alg[\s]+(?<fld2>[^\s]*)[\s]+flags[\s]+(?<fld3>[^\s]*)[\s]+maxoplen[\s]+(?<fld4>[^\s]*)[\s]+\"[\s]+|[\s]*\"(?<info>[^\s]*)[\s]+\")$" }
			id => "msgParserId113"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId114
	# line in RSA:  "<event_type>: <info> " 
	else if [logstash][msgparser][id] == "msgParserId114" {
		dissect {
			mapping => { "message" => "\"%{event_type}: %{info} \"" }
			id => "msgParserId114"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId115
	# line in RSA:  { Context <fld1> - SessionId: <sessionid>- User <username> | Context <fld1> - User <username> | User <username> } - Vserver <daddr>:<dport> - Total_bytes_send <sbytes> - Remote_host <hostname> - Denied_url <url> - Denied_by_policy <policyname> - Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId115" {
		grok {
			match => { "message" => "^[\s]*([\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*User[\s]+(?<username>[^\s]*)[\s]+)[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Remote_host[\s]+(?<hostname>[^\s]*)[\s]+\-[\s]+Denied_url[\s]+(?<url>[^\s]*)[\s]+\-[\s]+Denied_by_policy[\s]+(?<policyname>[^\s]*)[\s]+\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId115"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId116
	# line in RSA:  Client <saddr> - { Profile <info>, <event_description> | Profile <info> - <event_description>} - URL 
	else if [logstash][msgparser][id] == "msgParserId116" {
		grok {
			match => { "message" => "^[\s]*Client[\s]+(?<saddr>[^\s]*)[\s]+\-[\s]+([\s]*Profile[\s]+(?<info>[^,]*),[\s]+(?<event_description>[^\s]*)[\s]+|[\s]*Profile[\s]+(?<info>[^\s]*)[\s]+\-[\s]+(?<event_description>[^\s]*))[\s]+\-[\s]+URL[\s]+$" }
			id => "msgParserId116"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Source" {
		# MESSAGE Source:01
		# line in RSA: Source <saddr>:<sport> - Vserver <daddr>:<dport> - NatIP <stransaddr>:<stransport> - Destination <dtransaddr>:<dtransport> - Delink Time { <fld11> GMT - Total_bytes_send <sbytes> | <fld11> - Total_bytes_send <sbytes> | <fld11> GMT Total_bytes_send <sbytes> | <fld11>  Total_bytes_send <sbytes>}  - Total_bytes_recv <rbytes>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+NatIP[\s]+(?<stransaddr>[^:]*):(?<stransport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<dtransaddr>[^:]*):(?<dtransport>[^\s]*)[\s]+\-[\s]+Delink[\s]+Time[\s]+([\s]*(?<fld11>[^\s]*)[\s]+GMT[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+|[\s]*(?<fld11>[^\s]*)[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+|[\s]*(?<fld11>[^\s]*)[\s]+GMT[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+|[\s]*(?<fld11>[^\s]*)[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*))[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>.*)$" }
				id => "message-Source:01"
				add_field => {
				"event_description" => "A Server side and a Client side TCP connection is delinked"
					"[event][id]" => "Source:01"
					"[rsa][message][id1]" => "Source:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Source:02
		# line in RSA:  Source <saddr>:<sport> - Destination <daddr>:<dport> - Start Time { <fld10> GMT| <fld10>} - End Time { <fld11> GMT| <fld11>} - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Source[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\-[\s]+Destination[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Start[\s]+Time[\s]+([\s]*(?<fld10>[^\s]*)[\s]+GMT|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+End[\s]+Time[\s]+([\s]*(?<fld11>[^\s]*)[\s]+GMT|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>.*)$" }
				id => "message-Source:02"
				add_field => {
					"[event][id]" => "Source:02"
					"[rsa][message][id1]" => "Source:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId119
	# line in RSA: User <username> - Remote_ip <saddr> - Command "<fld1>" - Status "<result>"
	else if [logstash][msgparser][id] == "msgParserId119" {
		dissect {
			mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{fld1}\" - Status \"%{result}\"" }
			id => "msgParserId119"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId120
	# line in RSA:  SPCBId <sessionid> - ClientIP <saddr> - ClientPort <sport> - VserverServiceIP <daddr> - VserverServicePort <dport> - ClientVersion <s_sslver> - CipherSuite "<s_cipher>" - <result>
	else if [logstash][msgparser][id] == "msgParserId120" {
		dissect {
			mapping => { "message" => "SPCBId %{sessionid} - ClientIP %{saddr} - ClientPort %{sport} - VserverServiceIP %{daddr} - VserverServicePort %{dport} - ClientVersion %{s_sslver} - CipherSuite \"%{s_cipher}\" - %{result}" }
			id => "msgParserId120"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"severity" => "Debug"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId121
	# line in RSA: <product>|<version>|<rule>|<fld1>|<severity>|src=<saddr> spt=<sport> method=<web_method> request=<url> msg=<info> cn1=<fld2> cn2=<fld3> cs1=<policyname> cs2=<fld5> cs3=<fld6> cs4=<severity> cs5=<fld8> act=<action>
	else if [logstash][msgparser][id] == "msgParserId121" {
		dissect {
			mapping => { "message" => "%{product}|%{version}|%{rule}|%{fld1}|%{severity}|src=%{saddr} spt=%{sport} method=%{web_method} request=%{url} msg=%{info} cn1=%{fld2} cn2=%{fld3} cs1=%{policyname} cs2=%{fld5} cs3=%{fld6} cs4=%{severity} cs5=%{fld8} act=%{action}" }
			id => "msgParserId121"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId122
	# line in RSA: <product>|<version>|<rule>|<fld1>|<severity>|src=<saddr> spt=<sport> method=<web_method> request=<url> msg=<info> cn1=<fld2> cn2=<fld3> cs1=<policyname> cs2=<fld5> cs3=<fld6> cs4=<severity> cs5=<fld8> cs6=<fld9> act=<action>
	else if [logstash][msgparser][id] == "msgParserId122" {
		dissect {
			mapping => { "message" => "%{product}|%{version}|%{rule}|%{fld1}|%{severity}|src=%{saddr} spt=%{sport} method=%{web_method} request=%{url} msg=%{info} cn1=%{fld2} cn2=%{fld3} cs1=%{policyname} cs2=%{fld5} cs3=%{fld6} cs4=%{severity} cs5=%{fld8} cs6=%{fld9} act=%{action}" }
			id => "msgParserId122"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId123
	# line in RSA: <product>|<version>|<rule>|<fld1>|<severity>|src=<saddr> spt=<sport> method=<web_method> request=<url> msg=<info> cn1=<fld2> cn2=<fld3> cs1=<policyname> cs2=<fld5> cs4=<severity> cs5=<fld8> act=<action>
	else if [logstash][msgparser][id] == "msgParserId123" {
		dissect {
			mapping => { "message" => "%{product}|%{version}|%{rule}|%{fld1}|%{severity}|src=%{saddr} spt=%{sport} method=%{web_method} request=%{url} msg=%{info} cn1=%{fld2} cn2=%{fld3} cs1=%{policyname} cs2=%{fld5} cs4=%{severity} cs5=%{fld8} act=%{action}" }
			id => "msgParserId123"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId124
	# line in RSA: src=<saddr> spt=<sport> method=<web_method> request=<url> msg=<info> cn1=<fld2> cn2=<fld3> cs1=<policyname> cs2=<fld5> cs4=<severity> cs5=<fld8> act=<action>
	else if [logstash][msgparser][id] == "msgParserId124" {
		dissect {
			mapping => { "message" => "src=%{saddr} spt=%{sport} method=%{web_method} request=%{url} msg=%{info} cn1=%{fld2} cn2=%{fld3} cs1=%{policyname} cs2=%{fld5} cs4=%{severity} cs5=%{fld8} act=%{action}" }
			id => "msgParserId124"
			add_field => {
				"vid" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId125
	# line in RSA: <saddr> <fld1> <fld2> <fld3> <url> <event_description>
	else if [logstash][msgparser][id] == "msgParserId125" {
		dissect {
			mapping => { "message" => "%{saddr} %{fld1} %{fld2} %{fld3} %{url} %{event_description}" }
			id => "msgParserId125"
			add_field => {
				"ec_subject" => "NetworkComm"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId126
	# line in RSA: <saddr> <fld1> <fld2> <rule_group> <url>  Unknown content-type header value=<fld4> <info> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId126" {
		dissect {
			mapping => { "message" => "%{saddr} %{fld1} %{fld2} %{rule_group} %{url}  Unknown content-type header value=%{fld4} %{info} <%{disposition}>" }
			id => "msgParserId126"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId127
	# line in RSA: <saddr> <fld1> <fld2> <rule_group> <url> WSI check failed: <fld4>: <info> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId127" {
		dissect {
			mapping => { "message" => "%{saddr} %{fld1} %{fld2} %{rule_group} %{url} WSI check failed: %{fld4}: %{info} <%{disposition}>" }
			id => "msgParserId127"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId128
	# line in RSA: <saddr> <fld2> <fld3> <rule_group> <url> Referer header check failed: referer header URL '<web_referer>' not in Start URL or closure list <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId128" {
		dissect {
			mapping => { "message" => "%{saddr} %{fld2} %{fld3} %{rule_group} %{url} Referer header check failed: referer header URL '%{web_referer}' not in Start URL or closure list <%{disposition}>" }
			id => "msgParserId128"
			add_field => {
				"ec_subject" => "NetworkComm"
				"severity" => "Informational"
				"event_description" => "referer header URL not in Start URL or closure list"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "RESPONDER_Message" {
		# MESSAGE RESPONDER_Message
		# line in RSA: "URL<url>Client IP<hostip>Client Dest<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"URL%{url}Client IP%{hostip}Client Dest%{fld1}" }
				id => "message-RESPONDER_Message"
				add_field => {
				"severity" => "Informational"
					"[event][id]" => "RESPONDER_Message"
					"[rsa][message][id1]" => "RESPONDER_Message"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE RESPONDER_Message:01
		# line in RSA: "NSRateLimit=<filter>, ClientIP=<saddr>" 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"NSRateLimit=%{filter}, ClientIP=%{saddr}\"" }
				id => "message-RESPONDER_Message:01"
				add_field => {
				"severity" => "Informational"
					"[event][id]" => "RESPONDER_Message:01"
					"[rsa][message][id1]" => "RESPONDER_Message:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId141
	# line in RSA:   <saddr> <fld1> - <fld2> - <event_description> <<<disposition>>
	else if [logstash][msgparser][id] == "msgParserId141" {
		dissect {
			mapping => { "message" => "%{saddr} %{fld1} - %{fld2} - %{event_description} <%{disposition}>" }
			id => "msgParserId141"
			add_field => {
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "APPFW_APPFW_SIGNATURE_MATCH" {
		# MESSAGE APPFW_APPFW_SIGNATURE_MATCH
		# line in RSA:  <saddr> <fld1> - <fld2> - <rule_group> <url> <event_description> rule ID <rule_uid>: <info> <<<disposition>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} %{fld1} - %{fld2} - %{rule_group} %{url} %{event_description} rule ID %{rule_uid}: %{info} <%{disposition}>" }
				id => "message-APPFW_APPFW_SIGNATURE_MATCH"
				add_field => {
				"filename" => "%{webpage}"
				"severity" => "Informational"
					"[event][id]" => "APPFW_APPFW_SIGNATURE_MATCH"
					"[rsa][message][id1]" => "APPFW_APPFW_SIGNATURE_MATCH"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE APPFW_APPFW_SIGNATURE_MATCH:01
		# line in RSA:  <saddr> <fld1> <fld2> <rule_group> <url> Signature violation rule ID <rule_uid>: <info> <<<disposition>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} %{fld1} %{fld2} %{rule_group} %{url} Signature violation rule ID %{rule_uid}: %{info} <%{disposition}>" }
				id => "message-APPFW_APPFW_SIGNATURE_MATCH:01"
				add_field => {
				"event_description" => "Signature violation"
					"[event][id]" => "APPFW_APPFW_SIGNATURE_MATCH:01"
					"[rsa][message][id1]" => "APPFW_APPFW_SIGNATURE_MATCH:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "GUI_CMD_EXECUTED" {
		# MESSAGE GUI_CMD_EXECUTED:01
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "<action>" -serverIP <daddr> -serverPort <dport> -logLevel <fld1> -dateFormat <fld2> -logFacility <fld3> -tcp <fld4> -acl <fld5> -timeZone <fld6> -userDefinedAuditlog <fld7> -appflowExport <fld8>" - Status "<disposition>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{action}\" -serverIP %{daddr} -serverPort %{dport} -logLevel %{fld1} -dateFormat %{fld2} -logFacility %{fld3} -tcp %{fld4} -acl %{fld5} -timeZone %{fld6} -userDefinedAuditlog %{fld7} -appflowExport %{fld8}\" - Status \"%{disposition}\"" }
				id => "message-GUI_CMD_EXECUTED:01"
				add_field => {
				"event_description" => "CLI or GUI command executed in NetScaler"
				"severity" => "Informational"
					"[event][id]" => "GUI_CMD_EXECUTED:01"
					"[rsa][message][id1]" => "GUI_CMD_EXECUTED:01"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE GUI_CMD_EXECUTED:02
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "<action> -priority <fld1> -devno <fld2>" - Status "<disposition>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{action} -priority %{fld1} -devno %{fld2}\" - Status \"%{disposition}\"" }
				id => "message-GUI_CMD_EXECUTED:02"
				add_field => {
				"event_description" => "CLI or GUI command executed in NetScaler"
				"severity" => "Informational"
					"[event][id]" => "GUI_CMD_EXECUTED:02"
					"[rsa][message][id1]" => "GUI_CMD_EXECUTED:02"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE GUI_CMD_EXECUTED:Login
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "login <fld11>" - Status "Success<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"login %{fld11}\" - Status \"Success%{info}\"" }
				id => "message-GUI_CMD_EXECUTED:Login"
				add_field => {
				"event_description" => "GUI command executed in NetScaler"
				"severity" => "Informational"
				"disposition" => "Success"
				"ec_activity" => "Logon"
				"action" => "%{login}%{fld11}"
					"[event][id]" => "GUI_CMD_EXECUTED:Login"
					"[rsa][message][id1]" => "GUI_CMD_EXECUTED:Login"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE GUI_CMD_EXECUTED:Logout
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "logout <fld11>" - Status "Success<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"logout %{fld11}\" - Status \"Success%{info}\"" }
				id => "message-GUI_CMD_EXECUTED:Logout"
				add_field => {
				"event_description" => "GUI command executed in NetScaler"
				"severity" => "Informational"
				"disposition" => "Success"
				"ec_activity" => "Logoff"
				"action" => "%{logout}%{fld11}"
					"[event][id]" => "GUI_CMD_EXECUTED:Logout"
					"[rsa][message][id1]" => "GUI_CMD_EXECUTED:Logout"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE GUI_CMD_EXECUTED
		# line in RSA:   User <username> - Remote_ip <saddr> - Command "<action>" - Status "<disposition>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{action}\" - Status \"%{disposition}\"" }
				id => "message-GUI_CMD_EXECUTED"
				add_field => {
				"event_description" => "CLI or GUI command executed in NetScaler"
				"severity" => "Informational"
					"[event][id]" => "GUI_CMD_EXECUTED"
					"[rsa][message][id1]" => "GUI_CMD_EXECUTED"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE GUI_CMD_EXECUTED:03
		# line in RSA:  User <username> - Remote_ip <saddr> - Command "<action> - Status "<disposition>" - Message "<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{action} - Status \"%{disposition}\" - Message \"%{info}\"" }
				id => "message-GUI_CMD_EXECUTED:03"
				add_field => {
				"event_description" => "CLI or GUI command executed in NetScaler"
					"[event][id]" => "GUI_CMD_EXECUTED:03"
					"[rsa][message][id1]" => "GUI_CMD_EXECUTED:03"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId108
	# line in RSA:   User <username> - Remote_ip <saddr> - Command "<action>" - Status "<disposition>"
	else if [logstash][msgparser][id] == "msgParserId108" {
		dissect {
			mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{action}\" - Status \"%{disposition}\"" }
			id => "msgParserId108"
			add_field => {
				"event_description" => "CLI or GUI command executed in NetScaler"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId149
	# line in RSA:   User <username> - Remote_ip <saddr> - Command "<action>" - Status "<disposition>"
	else if [logstash][msgparser][id] == "msgParserId149" {
		dissect {
			mapping => { "message" => "User %{username} - Remote_ip %{saddr} - Command \"%{action}\" - Status \"%{disposition}\"" }
			id => "msgParserId149"
			add_field => {
				"event_description" => "API command executed in NetScaler"
				"severity" => "Informational"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId150
	# line in RSA:  "<event_type>: {<result> for user <username> = <fld1> | <info>} " 
	else if [logstash][msgparser][id] == "msgParserId150" {
		grok {
			match => { "message" => "^[\s]*\"(?<event_type>[^:]*):[\s]+((?<result>[^\s]*)[\s]+for[\s]+user[\s]+(?<username>[^\s]*)[\s]+=[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*(?<info>[^\s]*))[\s]+\"[\s]+$" }
			id => "msgParserId150"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "AAATM_Message" {
		# MESSAGE AAATM_Message:04
		# line in RSA: "<event_type>: created session for <<<domain>> with cookie: <<<web_cookie>>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{event_type}: created session for <%{domain}> with cookie: <%{web_cookie}>\"" }
				id => "message-AAATM_Message:04"
				add_field => {
					"[event][id]" => "AAATM_Message:04"
					"[rsa][message][id1]" => "AAATM_Message:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE AAATM_Message
		# line in RSA:  "<event_type>: {<fld1> for user <username> |<info> } " 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*\"(?<event_type>[^:]*):[\s]+((?<fld1>[^\s]*)[\s]+for[\s]+user[\s]+(?<username>[^\s]*)[\s]+|(?<info>[^\s]*)[\s]+)[\s]+\"[\s]+$" }
				id => "message-AAATM_Message"
				add_field => {
					"[event][id]" => "AAATM_Message"
					"[rsa][message][id1]" => "AAATM_Message"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE AAATM_Message:01
		# line in RSA:  "<fld1> creating session <info>" 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{fld1} creating session %{info}\"" }
				id => "message-AAATM_Message:01"
				add_field => {
				"event_type" => "creating session"
					"[event][id]" => "AAATM_Message:01"
					"[rsa][message][id1]" => "AAATM_Message:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE AAATM_Message:02
		# line in RSA:  "cookie idx is <fld1>, <info>" 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"cookie idx is %{fld1}, %{info}\"" }
				id => "message-AAATM_Message:02"
				add_field => {
				"event_type" => "cookie idx"
					"[event][id]" => "AAATM_Message:02"
					"[rsa][message][id1]" => "AAATM_Message:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE AAATM_Message:03
		# line in RSA:  "sent request to <fld1> for authentication, user <<<domain>\<username>>, client ip <saddr>" 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"sent request to %{fld1} for authentication, user <%{domain}\%{username}>, client ip %{saddr}\"" }
				id => "message-AAATM_Message:03"
				add_field => {
				"event_type" => "sent request"
					"[event][id]" => "AAATM_Message:03"
					"[rsa][message][id1]" => "AAATM_Message:03"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE AAATM_Message:05
		# line in RSA:  "authentication succeeded for user <<<domain>\<username>>, client ip <saddr>, setting up session" 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"authentication succeeded for user <%{domain}\%{username}>, client ip %{saddr}, setting up session\"" }
				id => "message-AAATM_Message:05"
				add_field => {
				"event_type" => "setting up session"
					"[event][id]" => "AAATM_Message:05"
					"[rsa][message][id1]" => "AAATM_Message:05"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE AAATM_Message:06
		# line in RSA:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-AAATM_Message:06"
				add_field => {
					"[event][id]" => "AAATM_Message:06"
					"[rsa][message][id1]" => "AAATM_Message:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId158
	# line in RSA:  Context <fld1> - SessionId: <sessionid>- <event_computer> User <username> : Group(s) <group> : Vserver <daddr>:<dport> - <fld2> <timezone>{: SSO is <fld3> : <web_method>|<web_method>} <url> <fld4>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
	# PARSER msgParserId159
	# line in RSA:  Sessionid <sessionid> - User <username> - Client_ip <saddr> - Nat_ip { "<stransaddr>"| <stransaddr>} - Vserver_ip <daddr> - Errmsg " <event_description> " 
	else if [logstash][msgparser][id] == "msgParserId159" {
		grok {
			match => { "message" => "^[\s]*Sessionid[\s]+(?<sessionid>[^\s]*)[\s]+\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+\-[\s]+Client_ip[\s]+(?<saddr>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+([\s]*\"(?<stransaddr>[^\"]*)\"|[\s]*(?<stransaddr>[^\s]*))[\s]+\-[\s]+Vserver_ip[\s]+(?<daddr>[^\s]*)[\s]+\-[\s]+Errmsg[\s]+\"[\s]+(?<event_description>[^\s]*)[\s]+\"[\s]+$" }
			id => "msgParserId159"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId160
	# line in RSA:  session_guid <fld1> - device_serial_number <fld2> - client_cookie <fld3> - flags <fld4> - ica_rtt <fld5> - clientside_rxbytes <rbytes>- clientside_txbytes <sbytes> - clientside_packet_retransmits <fld6> - serverside_packet_retransmits <fld7> - clientside_rtt <fld8> - serverside_rtt <fld9> - clientside_jitter <fld10> - serverside_jitter <fld11>
	else if [logstash][msgparser][id] == "msgParserId160" {
		dissect {
			mapping => { "message" => "session_guid %{fld1} - device_serial_number %{fld2} - client_cookie %{fld3} - flags %{fld4} - ica_rtt %{fld5} - clientside_rxbytes %{rbytes}- clientside_txbytes %{sbytes} - clientside_packet_retransmits %{fld6} - serverside_packet_retransmits %{fld7} - clientside_rtt %{fld8} - serverside_rtt %{fld9} - clientside_jitter %{fld10} - serverside_jitter %{fld11}" }
			id => "msgParserId160"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId161
	# line in RSA:  session_guid <fld1> - device_serial_number <fld2> - client_cookie <fld3> - flags <fld4> - channel_update_begin <fld5> - channel_update_end <fld6> - channel_id_1 <fld7> - channel_id_1_val <fld8> - channel_id_2 <fld9> - channel_id_2_val <fld10> -channel_id_3 <fld11> - channel_id_3_val <fld12> - channel_id_4 <fld13> - channel_id_4_val <fld14> -channel_id_5 <fld15> - channel_id_5_val <fld16> 
	else if [logstash][msgparser][id] == "msgParserId161" {
		dissect {
			mapping => { "message" => "session_guid %{fld1} - device_serial_number %{fld2} - client_cookie %{fld3} - flags %{fld4} - channel_update_begin %{fld5} - channel_update_end %{fld6} - channel_id_1 %{fld7} - channel_id_1_val %{fld8} - channel_id_2 %{fld9} - channel_id_2_val %{fld10} -channel_id_3 %{fld11} - channel_id_3_val %{fld12} - channel_id_4 %{fld13} - channel_id_4_val %{fld14} -channel_id_5 %{fld15} - channel_id_5_val %{fld16}" }
			id => "msgParserId161"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId162
	# line in RSA:  session_guid <fld1> - device_serial_number <fld2> - client_cookie <fld3> - flags <fld4> - nsica_session_status <fld5> - nsica_session_client_ip <saddr> - nsica_session_client_port <sport> - nsica_session_server_ip <daddr> - nsica_session_server_port <dport> - nsica_session_reconnect_count <fld6> - nsica_session_acr_count <fld7> - connection_priority <fld8> - timestamp <fld9> 
	else if [logstash][msgparser][id] == "msgParserId162" {
		dissect {
			mapping => { "message" => "session_guid %{fld1} - device_serial_number %{fld2} - client_cookie %{fld3} - flags %{fld4} - nsica_session_status %{fld5} - nsica_session_client_ip %{saddr} - nsica_session_client_port %{sport} - nsica_session_server_ip %{daddr} - nsica_session_server_port %{dport} - nsica_session_reconnect_count %{fld6} - nsica_session_acr_count %{fld7} - connection_priority %{fld8} - timestamp %{fld9}" }
			id => "msgParserId162"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId163
	# line in RSA:  <info> 
	else if [logstash][msgparser][id] == "msgParserId163" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId163"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId164
	# line in RSA:  session_guid <fld1> - device_serial_number <fld2> - client_cookie <fld3> - flags <fld4> - session_setup_time <fld5>  - client_ip <saddr> - client_type <fld6> - client_launcher <fld7> - client_version <version> - client_hostname <shost> - domain_name <domain> - server_name <dhost> - connection_priority <fld8>
	else if [logstash][msgparser][id] == "msgParserId164" {
		dissect {
			mapping => { "message" => "session_guid %{fld1} - device_serial_number %{fld2} - client_cookie %{fld3} - flags %{fld4} - session_setup_time %{fld5}  - client_ip %{saddr} - client_type %{fld6} - client_launcher %{fld7} - client_version %{version} - client_hostname %{shost} - domain_name %{domain} - server_name %{dhost} - connection_priority %{fld8}" }
			id => "msgParserId164"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId165
	# line in RSA:  session_guid <fld1> - device_serial_number <fld2> - client_cookie <fld3> - flags <fld4> - launch_mechanism <fld5> - app_launch_time <fld6>  - app_process_id <fld7> - app_name <fld8> - module_path <filename> 
	else if [logstash][msgparser][id] == "msgParserId165" {
		dissect {
			mapping => { "message" => "session_guid %{fld1} - device_serial_number %{fld2} - client_cookie %{fld3} - flags %{fld4} - launch_mechanism %{fld5} - app_launch_time %{fld6}  - app_process_id %{fld7} - app_name %{fld8} - module_path %{filename}" }
			id => "msgParserId165"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId166
	# line in RSA:  session_guid <fld1> - device_serial_number <fld2> - client_cookie <fld3> - flags <fld4> - session_end_time <fld5> 
	else if [logstash][msgparser][id] == "msgParserId166" {
		dissect {
			mapping => { "message" => "session_guid %{fld1} - device_serial_number %{fld2} - client_cookie %{fld3} - flags %{fld4} - session_end_time %{fld5}" }
			id => "msgParserId166"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId167
	# line in RSA:  session_guid <fld1> - device_serial_number <fld2> - client_cookie <fld3> - flags <fld4> - app_termination_type <fld5> - app_process_id <fld6> - app_termination_time <fld7> 
	else if [logstash][msgparser][id] == "msgParserId167" {
		dissect {
			mapping => { "message" => "session_guid %{fld1} - device_serial_number %{fld2} - client_cookie %{fld3} - flags %{fld4} - app_termination_type %{fld5} - app_process_id %{fld6} - app_termination_time %{fld7}" }
			id => "msgParserId167"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId170
	# line in RSA:  { Context <fld1> - SessionId: <sessionid>- User <username> | Context <fld1> - User <username> | User <username> } - Client_ip <saddr> - Nat_ip {"<stransaddr>"|<stransaddr>} - Vserver <daddr>:<dport> - Browser_type <user_agent>- Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId170" {
		grok {
			match => { "message" => "^[\s]*([\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*User[\s]+(?<username>[^\s]*)[\s]+)[\s]+\-[\s]+Client_ip[\s]+(?<saddr>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+(\"(?<stransaddr>[^\"]*)\"|(?<stransaddr>[^\s]*))[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Browser_type[\s]+(?<user_agent>[^\-]*)\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId170"
			add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId171
	# line in RSA:  { Context <fld1> - SessionId: <sessionid>- User <username> | Context <fld1> - User <username> | User <username> } - Client_ip <saddr> - Nat_ip {"<stransaddr>"|<stransaddr>} - Vserver <daddr>:<dport> - Start_time {" <fld10> GMT"|" <fld10>"| <fld10>} - End_time {" <fld11> GMT"|" <fld11>"| <fld11>} - Duration <duration_string>  - Http_resources_accessed <fld3> - Total_TCP_connections <fld5> - Total_policies_allowed <fld7> - Total_policies_denied <fld8> - Total_bytes_send <sbytes> - Total_bytes_recv <rbytes> - Total_compressedbytes_send <fld12> - Total_compressedbytes_recv <fld13> - Compression_ratio_send <dclass_ratio1> - Compression_ratio_recv <dclass_ratio2> - LogoutMethod "<result>" - Group(s) "<group>"
	else if [logstash][msgparser][id] == "msgParserId171" {
		grok {
			match => { "message" => "^[\s]*([\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+SessionId:[\s]+(?<sessionid>[^\-]*)\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*Context[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+User[\s]+(?<username>[^\s]*)[\s]+|[\s]*User[\s]+(?<username>[^\s]*)[\s]+)[\s]+\-[\s]+Client_ip[\s]+(?<saddr>[^\s]*)[\s]+\-[\s]+Nat_ip[\s]+(\"(?<stransaddr>[^\"]*)\"|(?<stransaddr>[^\s]*))[\s]+\-[\s]+Vserver[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\-[\s]+Start_time[\s]+(\"[\s]+(?<fld10>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld10>[^\"]*)\"|[\s]*(?<fld10>[^\s]*))[\s]+\-[\s]+End_time[\s]+(\"[\s]+(?<fld11>[^\s]*)[\s]+GMT\"|\"[\s]+(?<fld11>[^\"]*)\"|[\s]*(?<fld11>[^\s]*))[\s]+\-[\s]+Duration[\s]+(?<duration_string>[^\s]*)[\s]+\-[\s]+Http_resources_accessed[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+Total_TCP_connections[\s]+(?<fld5>[^\s]*)[\s]+\-[\s]+Total_policies_allowed[\s]+(?<fld7>[^\s]*)[\s]+\-[\s]+Total_policies_denied[\s]+(?<fld8>[^\s]*)[\s]+\-[\s]+Total_bytes_send[\s]+(?<sbytes>[^\s]*)[\s]+\-[\s]+Total_bytes_recv[\s]+(?<rbytes>[^\s]*)[\s]+\-[\s]+Total_compressedbytes_send[\s]+(?<fld12>[^\s]*)[\s]+\-[\s]+Total_compressedbytes_recv[\s]+(?<fld13>[^\s]*)[\s]+\-[\s]+Compression_ratio_send[\s]+(?<dclass_ratio1>[^\s]*)[\s]+\-[\s]+Compression_ratio_recv[\s]+(?<dclass_ratio2>[^\s]*)[\s]+\-[\s]+LogoutMethod[\s]+\"(?<result>[^\"]*)\"[\s]+\-[\s]+Group\(s\)[\s]+\"(?<group>[^\"]*)\"$" }
			id => "msgParserId171"
			add_field => {
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId83
	# line in RSA: <fld1>:UserLogin:<username> - <event_description> from client IP Address <saddr>
	else if [logstash][msgparser][id] == "msgParserId83" {
		dissect {
			mapping => { "message" => "%{fld1}:UserLogin:%{username} - %{event_description} from client IP Address %{saddr}" }
			id => "msgParserId83"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy:HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[event_cat]"
		destination => "[event_cat_name]"
		dictionary => {
			"1204010000" => "Content.Web Traffic.Successful"
			"1204020000" => "Content.Web Traffic.Denied"
		}
		fallback => "Other.Default"
		override => true
	}
}
filter {
	translate {
		field => "[action]"
		destination => "[event_cat]"
		dictionary => {
			"not blocked" => "1204010000"
			"blocked" => "1204020000"
		}
		fallback => "1901000000"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-citrixnsmsg.json"
#			template_name => "citrixns_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

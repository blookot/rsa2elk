# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "fsecureav"
			"[observer][name]" => "F-Secure Anti-Virus"
			"[observer][type]" => "Anti Virus"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %NICWIN-<hlevel>-Application_<messageid>_FSecure-FSecure-F-Secure: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-Application_%{messageid}_FSecure-FSecure-F-Secure: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %NICWIN-<hlevel>-Application_<messageid>_F-Secure: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-Application_%{messageid}_F-Secure: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: fsma: <msgIdPart1> <msgIdPart2> <msgIdPart3> :<!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^fsma:[\s]+(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<msgIdPart3>[^\s]*)[\s]+:(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: fsaua[<hpid>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "fsaua[%{hpid}]: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "F-Secure_fsaua"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-fsecureavmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "101" {
		# MESSAGE 101
		# line in RSA: <event_log>,<fld11>,<fld12> <fld21>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<fld3>  <fld4>  <fld5>  <shost>  <username>  F-Secure Anti-Virus   Virus definition database(s) <db_name>  updated successfully.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{fld21},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{fld3}  %{fld4}  %{fld5}  %{shost}  %{username}  F-Secure Anti-Virus   Virus definition database(s) %{db_name}  updated successfully." }
				id => "message-101"
				add_field => {
				"ec_subject" => "SignatureDB"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
					"[event][id]" => "101"
					"[rsa][message][id1]" => "101"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 101:01
		# line in RSA: <event_log>,<fld11>,<fld12> <fld21>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<fld3>  <fld4>  <fld5>  <shost>  <username>  <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{fld21},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{fld3}  %{fld4}  %{fld5}  %{shost}  %{username}  %{event_description}" }
				id => "message-101:01"
				add_field => {
					"[event][id]" => "101:01"
					"[rsa][message][id1]" => "101:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "102" {
		# MESSAGE 102:01
		# line in RSA: <event_log>,<fld11>,<fld12> <fld21>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<fld3>  <fld4>  <fld5>  <shost>  <username>  F-Secure Anti-Virus <space> Bad or missing manifest file certificate: <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{fld21},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{fld3}  %{fld4}  %{fld5}  %{shost}  %{username}  F-Secure Anti-Virus %{space} Bad or missing manifest file certificate: %{filename}" }
				id => "message-102:01"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
					"[event][id]" => "102:01"
					"[rsa][message][id1]" => "102:01"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 102
		# line in RSA: <event_log>,<fld11>,<fld12> <fld21>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<fld3>  <fld4>  <fld5>  <shost>  <username>  F-Secure Management Agent <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{fld21},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{fld3}  %{fld4}  %{fld5}  %{shost}  %{username}  F-Secure Management Agent %{event_description}" }
				id => "message-102"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
					"[event][id]" => "102"
					"[rsa][message][id1]" => "102"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "103" {
		# MESSAGE 103:01
		# line in RSA: <event_log>,<fld11>,<fld12> <fld21>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<fld3>  <fld4>  <fld5>  <shost>  <username>  F-Secure Anti-Virus  <space> Malicious code found in file <filename> Infection: <virusname> Action: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{fld21},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{fld3}  %{fld4}  %{fld5}  %{shost}  %{username}  F-Secure Anti-Virus  %{space} Malicious code found in file %{filename} Infection: %{virusname} Action: %{action}" }
				id => "message-103:01"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "103:01"
					"[rsa][message][id1]" => "103:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 103
		# line in RSA: <event_log>,<fld11>,<fld12> <fld21>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<fld3>  <fld4>  <fld5>  <shost>  <username>  F-Secure Anti-Virus <space> Manual scanning was finished - <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{fld21},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{fld3}  %{fld4}  %{fld5}  %{shost}  %{username}  F-Secure Anti-Virus %{space} Manual scanning was finished - %{disposition}" }
				id => "message-103"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "103"
					"[rsa][message][id1]" => "103"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "F-Secure_Linux_Security" {
		# MESSAGE F-Secure_Linux_Security:01
		# line in RSA:  F-Secure Linux Security: Malicious code found in file <filename> Infection: <virusname> Action: <action> userinfo:<space>uid <uid>/pid <process_id>/<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "F-Secure Linux Security: Malicious code found in file %{filename} Infection: %{virusname} Action: %{action} userinfo:%{space}uid %{uid}/pid %{process_id}/%{fld1}" }
				id => "message-F-Secure_Linux_Security:01"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "F-Secure_Linux_Security:01"
					"[rsa][message][id1]" => "F-Secure_Linux_Security:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE F-Secure_Linux_Security
		# line in RSA:  F-Secure Linux Security: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "F-Secure Linux Security: %{event_description}" }
				id => "message-F-Secure_Linux_Security"
				add_field => {
					"[event][id]" => "F-Secure_Linux_Security"
					"[rsa][message][id1]" => "F-Secure_Linux_Security"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA:  F-Secure Security Platform: <event_description>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "F-Secure Security Platform: %{event_description}" }
			id => "msgParserId8"
			add_field => {
				"ec_subject" => "SignatureDB"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA:  Downloaded <obj_name> version '<version>' from <shost>, <info>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "Downloaded %{obj_name} version '%{version}' from %{shost}, %{info}" }
			id => "msgParserId9"
			add_field => {
				"obj_type" => " Update patch/definition"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-fsecureavmsg.json"
#			template_name => "fsecureav_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

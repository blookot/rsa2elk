# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "trendmicro"
			"[observer][name]" => "Trend Micro"
			"[observer][type]" => "Anti Virus"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %TRENDMICRO-<hserver> <messageid> Alert!! <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%TRENDMICRO-%{hserver} %{messageid} Alert!! %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: %TRENDMICRO <messageid> Alert!! <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%TRENDMICRO %{messageid} Alert!! %{message}" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %TRENDMICRO <messageid> { alert. | Alert } <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TRENDMICRO[\s]+(?<messageid>[^\s]*)[\s]+([\s]*alert\.[\s]+|[\s]*Alert[\s]+)[\s]+(?<message>.*)$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: %TRENDMICRO !!<messageid> { Alert!! | Detection!! } <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TRENDMICRO[\s]+!!(?<messageid>[^\s]*)[\s]+([\s]*Alert!![\s]+|[\s]*Detection!![\s]+)[\s]+(?<message>.*)$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: %TRENDMICRO !!<messageid> { alert. | Alert | Detection } <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TRENDMICRO[\s]+!!(?<messageid>[^\s]*)[\s]+([\s]*alert\.[\s]+|[\s]*Alert[\s]+|[\s]*Detection[\s]+)[\s]+(?<message>.*)$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %TRENDMICRO <messageid> Manager (<hserver>) notification: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TRENDMICRO[\s]+(?<message>(?<messageid>[^\s]*)[\s]+Manager[\s]+\((?<hserver>[^\)]*)\)[\s]+notification:[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %TRENDMICRO  <messageid> of { viruses/malware: | spyware/grayware: } <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TRENDMICRO[\s]+(?<message>(?<messageid>[^\s]*)[\s]+of[\s]+([\s]*viruses/malware:[\s]+|[\s]*spyware/grayware:[\s]+)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %TRENDMICRO TMCM=<messageid>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%TRENDMICRO TMCM=%{messageid},%{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %TRENDMICRO  <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%TRENDMICRO  %{messageid}: %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <month> <day> <time> TMCM:SLF_INCIDENT_EVT_<messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} TMCM:SLF_INCIDENT_EVT_%{messageid} %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <month> <day> <time> TMCM:<hfld>_<messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} TMCM:%{hfld}_%{messageid} %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <month> <day> <time> TMCM:<messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} TMCM:%{messageid} %{message}" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0014
	# line in RSA: %TRENDMICRO <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%TRENDMICRO %{messageid} %{message}" }
			id => "header-0014"
			add_field => {
				"[rsa][header][id]" => "0014"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: <fld1> TMCM:<p_msgid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{fld1} TMCM:%{p_msgid} %{message}" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "TRENDMICRO_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9998
	# line in RSA: %TRENDMICRO TMCM=<p_msgid>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%TRENDMICRO TMCM=%{p_msgid},%{message}" }
			id => "header-9998"
			add_field => {
				"[rsa][header][id]" => "9998"
				"[rsa][message][id2]" => "TRENDMICRO_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_trendmicromsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Control" {
		# MESSAGE Control
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info>. Virus: <virusname> Infected file: <filename> File path: <directory> Source: <shost> Destination: <dhost> Managed Product: <product> Computer: <hostname> Scan engine: <component_version> Virus pattern: <content_version>  Event date/time: <fld9> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Control Manager (%{fld15}) notification: %{event_description}. %{info}. Virus: %{virusname} Infected file: %{filename} File path: %{directory} Source: %{shost} Destination: %{dhost} Managed Product: %{product} Computer: %{hostname} Scan engine: %{component_version} Virus pattern: %{content_version}  Event date/time: %{fld9}" }
				id => "message-Control"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Control"
					"[rsa][message][id1]" => "Control"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Control:01
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info> Virus: <virusname> { Infected file: <filename> File path: <directory> | Alert trigger number: <fld14> } Scan engine: <component_version> Virus pattern: <content_version> Event date/time: <fld9> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Control[\s]+Manager[\s]+\((?<fld15>[^\)]*)\)[\s]+notification:[\s]+(?<event_description>[^\.]*)\.[\s]+(?<info>[^\s]*)[\s]+Virus:[\s]+(?<virusname>[^\s]*)[\s]+([\s]*Infected[\s]+file:[\s]+(?<filename>[^\s]*)[\s]+File[\s]+path:[\s]+(?<directory>[^\s]*)[\s]+|[\s]*Alert[\s]+trigger[\s]+number:[\s]+(?<fld14>[^\s]*)[\s]+)[\s]+Scan[\s]+engine:[\s]+(?<component_version>[^\s]*)[\s]+Virus[\s]+pattern:[\s]+(?<content_version>[^\s]*)[\s]+Event[\s]+date/time:[\s]+(?<fld9>[^\s]*)[\s]+$" }
				id => "message-Control:01"
				add_field => {
					"[event][id]" => "Control:01"
					"[rsa][message][id1]" => "Control:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Control:02
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info>. Spyware/Grayware: <threat_name> Infected file: <filename> { File path: <directory> Source: <shost> Destination: <dhost> Managed Product: <product> Computer: <hostname> | File path: <directory> } Scan engine: <component_version> Spyware/Grayware pattern: <content_version> Event date/time: <fld9>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Control[\s]+Manager[\s]+\((?<fld15>[^\)]*)\)[\s]+notification:[\s]+(?<event_description>[^\.]*)\.[\s]+(?<info>[^\.]*)\.[\s]+Spyware/Grayware:[\s]+(?<threat_name>[^\s]*)[\s]+Infected[\s]+file:[\s]+(?<filename>[^\s]*)[\s]+([\s]*File[\s]+path:[\s]+(?<directory>[^\s]*)[\s]+Source:[\s]+(?<shost>[^\s]*)[\s]+Destination:[\s]+(?<dhost>[^\s]*)[\s]+Managed[\s]+Product:[\s]+(?<product>[^\s]*)[\s]+Computer:[\s]+(?<hostname>[^\s]*)[\s]+|[\s]*File[\s]+path:[\s]+(?<directory>[^\s]*)[\s]+)[\s]+Scan[\s]+engine:[\s]+(?<component_version>[^\s]*)[\s]+Spyware/Grayware[\s]+pattern:[\s]+(?<content_version>[^\s]*)[\s]+Event[\s]+date/time:[\s]+(?<fld9>.*)$" }
				id => "message-Control:02"
				add_field => {
					"[event][id]" => "Control:02"
					"[rsa][message][id1]" => "Control:02"
					"[event][categoryid]" => "1003050000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Control:03
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. The anti-spam <info> Server/Entity: <fld2> Computer: <hostname> Product: <product> Event date/time: <fld9>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Control Manager (%{fld15}) notification: %{event_description}. The anti-spam %{info} Server/Entity: %{fld2} Computer: %{hostname} Product: %{product} Event date/time: %{fld9}" }
				id => "message-Control:03"
				add_field => {
				"ec_subject" => "SignatureDB"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
					"[event][id]" => "Control:03"
					"[rsa][message][id1]" => "Control:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Control:04
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info> { Managed Product: | Server/Entity: } <fld1> Computer: <hostname> Product: <product> Event date/time: <fld9>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Control[\s]+Manager[\s]+\((?<fld15>[^\)]*)\)[\s]+notification:[\s]+(?<event_description>[^\.]*)\.[\s]+(?<info>[^\s]*)[\s]+([\s]*Managed[\s]+Product:[\s]+|[\s]*Server/Entity:[\s]+)[\s]+(?<fld1>[^\s]*)[\s]+Computer:[\s]+(?<hostname>[^\s]*)[\s]+Product:[\s]+(?<product>[^\s]*)[\s]+Event[\s]+date/time:[\s]+(?<fld9>.*)$" }
				id => "message-Control:04"
				add_field => {
				"ec_subject" => "SignatureDB"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
					"[event][id]" => "Control:04"
					"[rsa][message][id1]" => "Control:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Control:05
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info> Threat Information: <fld1> Required {Scan | scan} engine: <component_version> Required {Virus | virus} pattern: <content_version> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Control[\s]+Manager[\s]+\((?<fld15>[^\)]*)\)[\s]+notification:[\s]+(?<event_description>[^\.]*)\.[\s]+(?<info>[^\s]*)[\s]+Threat[\s]+Information:[\s]+(?<fld1>[^\s]*)[\s]+Required[\s]+(Scan[\s]+|[\s]*scan)[\s]+engine:[\s]+(?<component_version>[^\s]*)[\s]+Required[\s]+(Virus[\s]+|[\s]*virus)[\s]+pattern:[\s]+(?<content_version>[^\s]*)[\s]+$" }
				id => "message-Control:05"
				add_field => {
					"[event][id]" => "Control:05"
					"[rsa][message][id1]" => "Control:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Control:06
		# line in RSA:  Control Manager (<fld15>) notification: Test Message. <info>. { Please click | <fld1>. Click } Services > { Damage Cleanup > | Vulnerability Assessment > } Current Task for details.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Control[\s]+Manager[\s]+\((?<fld15>[^\)]*)\)[\s]+notification:[\s]+Test[\s]+Message\.[\s]+(?<info>[^\.]*)\.[\s]+([\s]*Please[\s]+click[\s]+|[\s]*(?<fld1>[^\.]*)\.[\s]+Click[\s]+)[\s]+Services[\s]+>[\s]+([\s]*Damage[\s]+Cleanup[\s]+>[\s]+|[\s]*Vulnerability[\s]+Assessment[\s]+>[\s]+)[\s]+Current[\s]+Task[\s]+for[\s]+details\.$" }
				id => "message-Control:06"
				add_field => {
				"event_description" => "Test Message"
				"ec_subject" => "Service"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
					"[event][id]" => "Control:06"
					"[rsa][message][id1]" => "Control:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Control:07
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info> Product: <product> Event date/time: <fld9>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Control Manager (%{fld15}) notification: %{event_description}. %{info} Product: %{product} Event date/time: %{fld9}" }
				id => "message-Control:07"
				add_field => {
					"[event][id]" => "Control:07"
					"[rsa][message][id1]" => "Control:07"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Control:08
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. A network virus from source <shost> has been detected on <dhost>. <info> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Control Manager (%{fld15}) notification: %{event_description}. A network virus from source %{shost} has been detected on %{dhost}. %{info}" }
				id => "message-Control:08"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Control:08"
					"[rsa][message][id1]" => "Control:08"
					"[event][categoryid]" => "1003010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Control:09
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info> Check the Event log and start Outbreak Prevention Mode immediately.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Control Manager (%{fld15}) notification: %{event_description}. %{info} Check the Event log and start Outbreak Prevention Mode immediately." }
				id => "message-Control:09"
				add_field => {
					"[event][id]" => "Control:09"
					"[rsa][message][id1]" => "Control:09"
					"[event][categoryid]" => "1003010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Control:10
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Control Manager (%{fld15}) notification: %{event_description}. %{info}." }
				id => "message-Control:10"
				add_field => {
					"[event][id]" => "Control:10"
					"[rsa][message][id1]" => "Control:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Control:11
		# line in RSA:  Control Manager (<fld15>) notification: <event_description>. <info> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Control Manager (%{fld15}) notification: %{event_description}. %{info}" }
				id => "message-Control:11"
				add_field => {
					"[event][id]" => "Control:11"
					"[rsa][message][id1]" => "Control:11"
					"[event][categoryid]" => "1003010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA:  Number of { viruses/malware: | spyware/grayware: } <dclass_counter1> Number of {computers | endpoints}: <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId12" {
		grok {
			match => { "message" => "^[\s]*Number[\s]+of[\s]+([\s]*viruses/malware:[\s]+|[\s]*spyware/grayware:[\s]+)[\s]+(?<dclass_counter1>[^\s]*)[\s]+Number[\s]+of[\s]+(computers[\s]+|[\s]*endpoints):[\s]+(?<dclass_counter2>.*)$" }
			id => "msgParserId12"
			add_field => {
				"event_description" => "virus(s) detected on client(s)"
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA:  <dclass_counter1> virus detected on <dclass_counter2> clients.
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{dclass_counter1} virus detected on %{dclass_counter2} clients." }
			id => "msgParserId13"
			add_field => {
				"event_description" => "virus detected on client(s)"
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Spyware/Grayware" {
		# MESSAGE Spyware/Grayware:01
		# line in RSA:  <threat_name> Computer: <hostname> Domain: <domain> IP address: <hostip> User ID: <event_user> Date/Time: <fld9> Result: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{threat_name} Computer: %{hostname} Domain: %{domain} IP address: %{hostip} User ID: %{event_user} Date/Time: %{fld9} Result: %{result}" }
				id => "message-Spyware/Grayware:01"
				add_field => {
				"event_description" => "Spyware/Grayware detected"
					"[event][id]" => "Spyware/Grayware:01"
					"[rsa][message][id1]" => "Spyware/Grayware:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Spyware/Grayware
		# line in RSA:  <threat_name> Computer: <hostname> Domain: <domain> Date/Time: <fld9> Result: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{threat_name} Computer: %{hostname} Domain: %{domain} Date/Time: %{fld9} Result: %{result}" }
				id => "message-Spyware/Grayware"
				add_field => {
				"event_description" => "Spyware/Grayware detected"
					"[event][id]" => "Spyware/Grayware"
					"[rsa][message][id1]" => "Spyware/Grayware"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA:  <product> detected <threat_name> on <hostname>(<username>) in <domain> domains.  File:<filename> { Scanned by <service> Detection date: | Detection date: } <fld9> Action: <action>
	else if [logstash][msgparser][id] == "msgParserId16" {
		grok {
			match => { "message" => "^[\s]*(?<product>[^\s]*)[\s]+detected[\s]+(?<threat_name>[^\s]*)[\s]+on[\s]+(?<hostname>[^\(]*)\((?<username>[^\)]*)\)[\s]+in[\s]+(?<domain>[^\s]*)[\s]+domains\.[\s]+File:(?<filename>[^\s]*)[\s]+([\s]*Scanned[\s]+by[\s]+(?<service>[^\s]*)[\s]+Detection[\s]+date:[\s]+|[\s]*Detection[\s]+date:[\s]+)[\s]+(?<fld9>[^\s]*)[\s]+Action:[\s]+(?<action>.*)$" }
			id => "msgParserId16"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld9}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Virus" {
		# MESSAGE Virus
		# line in RSA:  <threat_name> is detected on <hostname>(<username>) in <domain> domain. Infected file: <filename> Detection date: <fld9> Action: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{threat_name} is detected on %{hostname}(%{username}) in %{domain} domain. Infected file: %{filename} Detection date: %{fld9} Action: %{action}" }
				id => "message-Virus"
				add_field => {
					"[event][id]" => "Virus"
					"[rsa][message][id1]" => "Virus"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy.M.d H:m:s" ] }
			}
		}
		# MESSAGE Virus:01
		# line in RSA:   <threat_name> on <hostname>(<username>) Action: <action> file: <filename> { Scanned by DCS Detection | Detection } date: <fld9>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<threat_name>[^\s]*)[\s]+on[\s]+(?<hostname>[^\(]*)\((?<username>[^\)]*)\)[\s]+Action:[\s]+(?<action>[^\s]*)[\s]+file:[\s]+(?<filename>[^\s]*)[\s]+([\s]*Scanned[\s]+by[\s]+DCS[\s]+Detection[\s]+|[\s]*Detection[\s]+)[\s]+date:[\s]+(?<fld9>.*)$" }
				id => "message-Virus:01"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Virus:01"
					"[rsa][message][id1]" => "Virus:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Virus:02
		# line in RSA:  <product> detected <threat_name> on <hostname>(<username>) in <domain> domains.  File: <filename> Detection date: <fld9> Action: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{product} detected %{threat_name} on %{hostname}(%{username}) in %{domain} domains.  File: %{filename} Detection date: %{fld9} Action: %{action}" }
				id => "message-Virus:02"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Virus:02"
					"[rsa][message][id1]" => "Virus:02"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Virus:03
		# line in RSA:  Date: <fld9> UserID: <username> Computer: <hostname> Path:<filename>  Virus: <threat_name> Action Taken: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Date: %{fld9} UserID: %{username} Computer: %{hostname} Path:%{filename}  Virus: %{threat_name} Action Taken: %{action}" }
				id => "message-Virus:03"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Virus:03"
					"[rsa][message][id1]" => "Virus:03"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Virus/Malware" {
		# MESSAGE Virus/Malware:03
		# line in RSA:  <threat_name> Computer: <hostname> Domain: <domain> IP address: <hostip> User ID: <event_user> MAC address : <macaddr> File: <filename> Date/Time: <fld9> Result: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{threat_name} Computer: %{hostname} Domain: %{domain} IP address: %{hostip} User ID: %{event_user} MAC address : %{macaddr} File: %{filename} Date/Time: %{fld9} Result: %{result}" }
				id => "message-Virus/Malware:03"
				add_field => {
				"event_description" => "virus detected"
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Virus/Malware:03"
					"[rsa][message][id1]" => "Virus/Malware:03"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Virus/Malware:04
		# line in RSA:  <threat_name> Computer: <hostname> Domain: <domain> File: <filename> Date/Time: <fld9> Source Address: <saddr> Destination Address: <daddr> Result: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{threat_name} Computer: %{hostname} Domain: %{domain} File: %{filename} Date/Time: %{fld9} Source Address: %{saddr} Destination Address: %{daddr} Result: %{result}" }
				id => "message-Virus/Malware:04"
				add_field => {
				"event_description" => "virus detected"
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Virus/Malware:04"
					"[rsa][message][id1]" => "Virus/Malware:04"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Virus/Malware
		# line in RSA:  <threat_name> {Computer: | Endpoint: } <hostname> Domain: <domain> File: <filename> Date/Time: <fld9> Result: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<threat_name>[^\s]*)[\s]+(Computer:[\s]+|[\s]*Endpoint:[\s]+)[\s]+(?<hostname>[^\s]*)[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+File:[\s]+(?<filename>[^\s]*)[\s]+Date/Time:[\s]+(?<fld9>[^\s]*)[\s]+Result:[\s]+(?<result>.*)$" }
				id => "message-Virus/Malware"
				add_field => {
				"event_description" => "virus detected"
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Virus/Malware"
					"[rsa][message][id1]" => "Virus/Malware"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "M-d-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Virus/Malware:01
		# line in RSA:  <threat_name> Computer: <hostname> IP address: <hostip> User ID: <username> SMCTRENDAV2:<fld10> File: <filename> Date/Time: <fld9> Result: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{threat_name} Computer: %{hostname} IP address: %{hostip} User ID: %{username} SMCTRENDAV2:%{fld10} File: %{filename} Date/Time: %{fld9} Result: %{result}" }
				id => "message-Virus/Malware:01"
				add_field => {
				"event_description" => "virus detected"
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Virus/Malware:01"
					"[rsa][message][id1]" => "Virus/Malware:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Virus/Malware:02
		# line in RSA:  <threat_name> Computer: <hostname> IP address: <hostip> User ID: <username> SMCTRENDAV1:<fld10> File: <filename> Date/Time: <fld9> Result: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{threat_name} Computer: %{hostname} IP address: %{hostip} User ID: %{username} SMCTRENDAV1:%{fld10} File: %{filename} Date/Time: %{fld9} Result: %{result}" }
				id => "message-Virus/Malware:02"
				add_field => {
				"event_description" => "virus detected"
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "Virus/Malware:02"
					"[rsa][message][id1]" => "Virus/Malware:02"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld9}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "EVT_UPDATE_SUCCESS" {
		# MESSAGE EVT_UPDATE_SUCCESS:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>T<fld2>" Component="<fld12>" Component version="<fld13>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}T%{fld2}\" Component=\"%{fld12}\" Component version=\"%{fld13}\"" }
				id => "message-EVT_UPDATE_SUCCESS:01"
				add_field => {
				"ec_subject" => "SignatureDB"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
					"[event][id]" => "EVT_UPDATE_SUCCESS:01"
					"[rsa][message][id1]" => "EVT_UPDATE_SUCCESS:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EVT_UPDATE_SUCCESS:02
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-EVT_UPDATE_SUCCESS:02"
				add_field => {
					"[event][id]" => "EVT_UPDATE_SUCCESS:02"
					"[rsa][message][id1]" => "EVT_UPDATE_SUCCESS:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "EVT_UPDATE_FAIL" {
		# MESSAGE EVT_UPDATE_FAIL:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>T<fld2>" Component="<fld12>" Component version="<fld13>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}T%{fld2}\" Component=\"%{fld12}\" Component version=\"%{fld13}\"" }
				id => "message-EVT_UPDATE_FAIL:01"
				add_field => {
				"ec_subject" => "SignatureDB"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
					"[event][id]" => "EVT_UPDATE_FAIL:01"
					"[rsa][message][id1]" => "EVT_UPDATE_FAIL:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EVT_UPDATE_FAIL:02
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-EVT_UPDATE_FAIL:02"
				add_field => {
					"[event][id]" => "EVT_UPDATE_FAIL:02"
					"[rsa][message][id1]" => "EVT_UPDATE_FAIL:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "EVT_REALTIME_SCAN_ENABLED" {
		# MESSAGE EVT_REALTIME_SCAN_ENABLED:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>T<fld2>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}T%{fld2}\"" }
				id => "message-EVT_REALTIME_SCAN_ENABLED:01"
				add_field => {
					"[event][id]" => "EVT_REALTIME_SCAN_ENABLED:01"
					"[rsa][message][id1]" => "EVT_REALTIME_SCAN_ENABLED:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EVT_REALTIME_SCAN_ENABLED:02
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-EVT_REALTIME_SCAN_ENABLED:02"
				add_field => {
					"[event][id]" => "EVT_REALTIME_SCAN_ENABLED:02"
					"[rsa][message][id1]" => "EVT_REALTIME_SCAN_ENABLED:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "EVT_REALTIME_SCAN_DISABLED" {
		# MESSAGE EVT_REALTIME_SCAN_DISABLED:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>T<fld2>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}T%{fld2}\"" }
				id => "message-EVT_REALTIME_SCAN_DISABLED:01"
				add_field => {
					"[event][id]" => "EVT_REALTIME_SCAN_DISABLED:01"
					"[rsa][message][id1]" => "EVT_REALTIME_SCAN_DISABLED:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EVT_REALTIME_SCAN_DISABLED:02
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-EVT_REALTIME_SCAN_DISABLED:02"
				add_field => {
					"[event][id]" => "EVT_REALTIME_SCAN_DISABLED:02"
					"[rsa][message][id1]" => "EVT_REALTIME_SCAN_DISABLED:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "PRODUCT_SERVICE_STARTED" {
		# MESSAGE PRODUCT_SERVICE_STARTED:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>T<fld2>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}T%{fld2}\"" }
				id => "message-PRODUCT_SERVICE_STARTED:01"
				add_field => {
					"[event][id]" => "PRODUCT_SERVICE_STARTED:01"
					"[rsa][message][id1]" => "PRODUCT_SERVICE_STARTED:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE PRODUCT_SERVICE_STARTED:02
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-PRODUCT_SERVICE_STARTED:02"
				add_field => {
					"[event][id]" => "PRODUCT_SERVICE_STARTED:02"
					"[rsa][message][id1]" => "PRODUCT_SERVICE_STARTED:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "PRODUCT_SERVICE_STOPPED" {
		# MESSAGE PRODUCT_SERVICE_STOPPED:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>T<fld2>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}T%{fld2}\"" }
				id => "message-PRODUCT_SERVICE_STOPPED:01"
				add_field => {
					"[event][id]" => "PRODUCT_SERVICE_STOPPED:01"
					"[rsa][message][id1]" => "PRODUCT_SERVICE_STOPPED:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE PRODUCT_SERVICE_STOPPED:02
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-PRODUCT_SERVICE_STOPPED:02"
				add_field => {
					"[event][id]" => "PRODUCT_SERVICE_STOPPED:02"
					"[rsa][message][id1]" => "PRODUCT_SERVICE_STOPPED:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId30
	# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>" Email subject="<subject>" Email sender="<from>" Email recipient="<to>" Policy rule="<policyname>" Action on content="<disposition>" Action on email="<action>"
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}\" Email subject=\"%{subject}\" Email sender=\"%{from}\" Email recipient=\"%{to}\" Policy rule=\"%{policyname}\" Action on content=\"%{disposition}\" Action on email=\"%{action}\"" }
			id => "msgParserId30"
			add_field => {
				"ec_subject" => "Message"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "VIRUS_FOUND_PASS_THRU" {
		# MESSAGE VIRUS_FOUND_PASS_THRU:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld43>" {Virus="<threat_name>" Infected file="<filename>" File path="<directory>"|Virus="<threat_name>"} Action taken="<action>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Infection source="<fld5>" Infection source IP="<fld6>" Destination IP="<fld7>" { Source IP="<fld8>" Domain="<domain>" | Source IP="<fld8>" } ScanMethod="<event_source>" User="<username>" Event time (local)="<fld1>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld43>[^\"]*)\"[\s]+(Virus=\"(?<threat_name>[^\"]*)\"[\s]+Infected[\s]+file=\"(?<filename>[^\"]*)\"[\s]+File[\s]+path=\"(?<directory>[^\"]*)\"|Virus=\"(?<threat_name>[^\"]*)\")[\s]+Action[\s]+taken=\"(?<action>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Infection[\s]+source=\"(?<fld5>[^\"]*)\"[\s]+Infection[\s]+source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld7>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+)[\s]+ScanMethod=\"(?<event_source>[^\"]*)\"[\s]+User=\"(?<username>[^\"]*)\"[\s]+Event[\s]+time[\s]+\(local\)=\"(?<fld1>[^\"]*)\"$" }
				id => "message-VIRUS_FOUND_PASS_THRU:01"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "VIRUS_FOUND_PASS_THRU:01"
					"[rsa][message][id1]" => "VIRUS_FOUND_PASS_THRU:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE VIRUS_FOUND_PASS_THRU
		# line in RSA: Security product="<product>" Security product node<space>="<hostname>" Security product IP="<hostip>" Event time="<fld1>" {Virus="<threat_name>" Infected file="<filename>" File path="<directory>"|Virus="<threat_name>"} Action taken="<action>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Infection source="<fld5>" Infection source IP="<fld6>" Destination IP="<fld7>" { Source IP="<fld8>" Domain="<domain>" | Source IP="<fld8>" }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node(?<space>[^=]*)=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld1>[^\"]*)\"[\s]+(Virus=\"(?<threat_name>[^\"]*)\"[\s]+Infected[\s]+file=\"(?<filename>[^\"]*)\"[\s]+File[\s]+path=\"(?<directory>[^\"]*)\"|Virus=\"(?<threat_name>[^\"]*)\")[\s]+Action[\s]+taken=\"(?<action>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Infection[\s]+source=\"(?<fld5>[^\"]*)\"[\s]+Infection[\s]+source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld7>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+)$" }
				id => "message-VIRUS_FOUND_PASS_THRU"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "VIRUS_FOUND_PASS_THRU"
					"[rsa][message][id1]" => "VIRUS_FOUND_PASS_THRU"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "VIRUS_FOUND_DELETE_SUCCESS" {
		# MESSAGE VIRUS_FOUND_DELETE_SUCCESS:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld43>" {Virus="<threat_name>" Infected file="<filename>" File path="<directory>"|Virus="<threat_name>"} Action taken="<action>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Infection source="<fld5>" Infection source IP="<fld6>" Destination IP="<fld7>" { Source IP="<fld8>" Domain="<domain>" | Source IP="<fld8>" } ScanMethod="<event_source>" User="<username>" Event time (local)="<fld1>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld43>[^\"]*)\"[\s]+(Virus=\"(?<threat_name>[^\"]*)\"[\s]+Infected[\s]+file=\"(?<filename>[^\"]*)\"[\s]+File[\s]+path=\"(?<directory>[^\"]*)\"|Virus=\"(?<threat_name>[^\"]*)\")[\s]+Action[\s]+taken=\"(?<action>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Infection[\s]+source=\"(?<fld5>[^\"]*)\"[\s]+Infection[\s]+source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld7>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+)[\s]+ScanMethod=\"(?<event_source>[^\"]*)\"[\s]+User=\"(?<username>[^\"]*)\"[\s]+Event[\s]+time[\s]+\(local\)=\"(?<fld1>[^\"]*)\"$" }
				id => "message-VIRUS_FOUND_DELETE_SUCCESS:01"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Delete"
				"ec_theme" => "TEV"
				"ec_outcome" => "Success"
					"[event][id]" => "VIRUS_FOUND_DELETE_SUCCESS:01"
					"[rsa][message][id1]" => "VIRUS_FOUND_DELETE_SUCCESS:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE VIRUS_FOUND_DELETE_SUCCESS
		# line in RSA: Security product="<product>" Security product node<space>="<hostname>" Security product IP="<hostip>" Event time="<fld1>" {Virus="<threat_name>" Infected file="<filename>" File path="<directory>"|Virus="<threat_name>"} Action taken="<action>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Infection source="<fld5>" Infection source IP="<fld6>" Destination IP="<fld7>" { Source IP="<fld8>" Domain="<domain>" | Source IP="<fld8>" }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node(?<space>[^=]*)=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld1>[^\"]*)\"[\s]+(Virus=\"(?<threat_name>[^\"]*)\"[\s]+Infected[\s]+file=\"(?<filename>[^\"]*)\"[\s]+File[\s]+path=\"(?<directory>[^\"]*)\"|Virus=\"(?<threat_name>[^\"]*)\")[\s]+Action[\s]+taken=\"(?<action>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Infection[\s]+source=\"(?<fld5>[^\"]*)\"[\s]+Infection[\s]+source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld7>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+)$" }
				id => "message-VIRUS_FOUND_DELETE_SUCCESS"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Delete"
				"ec_theme" => "TEV"
				"ec_outcome" => "Success"
					"[event][id]" => "VIRUS_FOUND_DELETE_SUCCESS"
					"[rsa][message][id1]" => "VIRUS_FOUND_DELETE_SUCCESS"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "VIRUS_FOUND_CLEAN_SUCCESS" {
		# MESSAGE VIRUS_FOUND_CLEAN_SUCCESS:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld43>" {Virus="<threat_name>" Infected file="<filename>" File path="<directory>"|Virus="<threat_name>"} Action taken="<action>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Infection source="<fld5>" Infection source IP="<fld6>" Destination IP="<fld7>" { Source IP="<fld8>" Domain="<domain>" | Source IP="<fld8>" } ScanMethod="<event_source>" User="<username>" Event time (local)="<fld1>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld43>[^\"]*)\"[\s]+(Virus=\"(?<threat_name>[^\"]*)\"[\s]+Infected[\s]+file=\"(?<filename>[^\"]*)\"[\s]+File[\s]+path=\"(?<directory>[^\"]*)\"|Virus=\"(?<threat_name>[^\"]*)\")[\s]+Action[\s]+taken=\"(?<action>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Infection[\s]+source=\"(?<fld5>[^\"]*)\"[\s]+Infection[\s]+source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld7>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+)[\s]+ScanMethod=\"(?<event_source>[^\"]*)\"[\s]+User=\"(?<username>[^\"]*)\"[\s]+Event[\s]+time[\s]+\(local\)=\"(?<fld1>[^\"]*)\"$" }
				id => "message-VIRUS_FOUND_CLEAN_SUCCESS:01"
				add_field => {
				"ec_subject" => "Virus"
				"ec_theme" => "TEV"
				"ec_outcome" => "Success"
					"[event][id]" => "VIRUS_FOUND_CLEAN_SUCCESS:01"
					"[rsa][message][id1]" => "VIRUS_FOUND_CLEAN_SUCCESS:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE VIRUS_FOUND_CLEAN_SUCCESS
		# line in RSA: Security product="<product>" Security product node<space>="<hostname>" Security product IP="<hostip>" Event time="<fld1>" {Virus="<threat_name>" Infected file="<filename>" File path="<directory>"|Virus="<threat_name>"} Action taken="<action>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Infection source="<fld5>" Infection source IP="<fld6>" Destination IP="<fld7>" { Source IP="<fld8>" Domain="<domain>" | Source IP="<fld8>" }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node(?<space>[^=]*)=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld1>[^\"]*)\"[\s]+(Virus=\"(?<threat_name>[^\"]*)\"[\s]+Infected[\s]+file=\"(?<filename>[^\"]*)\"[\s]+File[\s]+path=\"(?<directory>[^\"]*)\"|Virus=\"(?<threat_name>[^\"]*)\")[\s]+Action[\s]+taken=\"(?<action>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Infection[\s]+source=\"(?<fld5>[^\"]*)\"[\s]+Infection[\s]+source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld7>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+)$" }
				id => "message-VIRUS_FOUND_CLEAN_SUCCESS"
				add_field => {
				"ec_subject" => "Virus"
				"ec_theme" => "TEV"
				"ec_outcome" => "Success"
					"[event][id]" => "VIRUS_FOUND_CLEAN_SUCCESS"
					"[rsa][message][id1]" => "VIRUS_FOUND_CLEAN_SUCCESS"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "yyyy-M-d'T'H:m:s'Z'" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "VIRUS_FOUND_QUARANTINE_SUCCESS" {
		# MESSAGE VIRUS_FOUND_QUARANTINE_SUCCESS:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld43>" {Virus="<threat_name>" Infected file="<filename>" File path="<directory>"|Virus="<threat_name>"} Action taken="<action>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Infection source="<fld5>" Infection source IP="<fld6>" Destination IP="<fld7>" { Source IP="<fld8>" Domain="<domain>" | Source IP="<fld8>" } ScanMethod="<event_source>" User="<username>" Event time (local)="<fld1>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld43>[^\"]*)\"[\s]+(Virus=\"(?<threat_name>[^\"]*)\"[\s]+Infected[\s]+file=\"(?<filename>[^\"]*)\"[\s]+File[\s]+path=\"(?<directory>[^\"]*)\"|Virus=\"(?<threat_name>[^\"]*)\")[\s]+Action[\s]+taken=\"(?<action>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Infection[\s]+source=\"(?<fld5>[^\"]*)\"[\s]+Infection[\s]+source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld7>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld8>[^\"]*)\"[\s]+)[\s]+ScanMethod=\"(?<event_source>[^\"]*)\"[\s]+User=\"(?<username>[^\"]*)\"[\s]+Event[\s]+time[\s]+\(local\)=\"(?<fld1>[^\"]*)\"$" }
				id => "message-VIRUS_FOUND_QUARANTINE_SUCCESS:01"
				add_field => {
					"[event][id]" => "VIRUS_FOUND_QUARANTINE_SUCCESS:01"
					"[rsa][message][id1]" => "VIRUS_FOUND_QUARANTINE_SUCCESS:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE VIRUS_FOUND_QUARANTINE_SUCCESS
		# line in RSA: Security product=<product> Security product node=<hostname> Security product IP=<hostip> Event time=<fld1> Virus=<threat_name> Infected file=<filename> File path=<directory> Action taken=<action> Result=<result> Infection destination=<dhost> Infection destination IP=<daddr> Infection source=<fld5> Infection source IP=<fld6> Destination IP=<fld7> Source IP=<fld8> Domain=<domain> ScanMethod=<event_source> User=<username> Event time (local)=<fld1> User=<username> Managing server entity=<obj_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=%{product} Security product node=%{hostname} Security product IP=%{hostip} Event time=%{fld1} Virus=%{threat_name} Infected file=%{filename} File path=%{directory} Action taken=%{action} Result=%{result} Infection destination=%{dhost} Infection destination IP=%{daddr} Infection source=%{fld5} Infection source IP=%{fld6} Destination IP=%{fld7} Source IP=%{fld8} Domain=%{domain} ScanMethod=%{event_source} User=%{username} Event time (local)=%{fld1} User=%{username} Managing server entity=%{obj_name}" }
				id => "message-VIRUS_FOUND_QUARANTINE_SUCCESS"
				add_field => {
					"[event][id]" => "VIRUS_FOUND_QUARANTINE_SUCCESS"
					"[rsa][message][id1]" => "VIRUS_FOUND_QUARANTINE_SUCCESS"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>" Grayware/Spyware="<threat_name>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Destination IP="<fld5>" { Source IP="<fld6>" Domain="<domain>" | Source IP="<fld6>" }
	else if [logstash][msgparser][id] == "msgParserId39" {
		grok {
			match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld1>[^\"]*)\"[\s]+Grayware/Spyware=\"(?<threat_name>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld5>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+)$" }
			id => "msgParserId39"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId40
	# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>" Grayware/Spyware="<threat_name>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Destination IP="<fld5>" { Source IP="<fld6>" Domain="<domain>" | Source IP="<fld6>" }
	else if [logstash][msgparser][id] == "msgParserId40" {
		grok {
			match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node=\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+IP=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld1>[^\"]*)\"[\s]+Grayware/Spyware=\"(?<threat_name>[^\"]*)\"[\s]+Result=\"(?<result>[^\"]*)\"[\s]+Infection[\s]+destination=\"(?<dhost>[^\"]*)\"[\s]+Infection[\s]+destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<fld5>[^\"]*)\"[\s]+([\s]*Source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+Domain=\"(?<domain>[^\"]*)\"[\s]+|[\s]*Source[\s]+IP=\"(?<fld6>[^\"]*)\"[\s]+)$" }
			id => "msgParserId40"
			add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId27"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA: ServiceInfo="<info>",EventTime="<fld1>",SecurityProductNode="<hostname>",SecurityProductIP="<hostip>",SecurityProduct="<product>",ProductVersion="<version>"
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "ServiceInfo=\"%{info}\",EventTime=\"%{fld1}\",SecurityProductNode=\"%{hostname}\",SecurityProductIP=\"%{hostip}\",SecurityProduct=\"%{product}\",ProductVersion=\"%{version}\"" }
			id => "msgParserId41"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId42
	# line in RSA: EventTime="<fld1>",SecurityProductNode="<hostname>",SecurityProductIP="<hostip>",SecurityProduct="<product>",ProductVersion="<version>",VirusName="<threat_name>",VirusCount="<dclass_counter1>",ScanEngine="<component_version>",VirusPattern="<content_version>"
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "EventTime=\"%{fld1}\",SecurityProductNode=\"%{hostname}\",SecurityProductIP=\"%{hostip}\",SecurityProduct=\"%{product}\",ProductVersion=\"%{version}\",VirusName=\"%{threat_name}\",VirusCount=\"%{dclass_counter1}\",ScanEngine=\"%{component_version}\",VirusPattern=\"%{content_version}\"" }
			id => "msgParserId42"
			add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId43
	# line in RSA: Security product="<product>" Security product node{=| =}"<hostname>" Security product {IP|ip}="<hostip>" Event time="<fld1>" URL="<url>" Source IP="<saddr>" Destination IP="<daddr>" Policy rule="<rule>" Blocking type="<fld14>"
	else if [logstash][msgparser][id] == "msgParserId43" {
		grok {
			match => { "message" => "^Security[\s]+product=\"(?<product>[^\"]*)\"[\s]+Security[\s]+product[\s]+node(=|[\s]*=)\"(?<hostname>[^\"]*)\"[\s]+Security[\s]+product[\s]+(IP|ip)=\"(?<hostip>[^\"]*)\"[\s]+Event[\s]+time=\"(?<fld1>[^\"]*)\"[\s]+URL=\"(?<url>[^\"]*)\"[\s]+Source[\s]+IP=\"(?<saddr>[^\"]*)\"[\s]+Destination[\s]+IP=\"(?<daddr>[^\"]*)\"[\s]+Policy[\s]+rule=\"(?<rule>[^\"]*)\"[\s]+Blocking[\s]+type=\"(?<fld14>[^\"]*)\"$" }
			id => "msgParserId43"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SLF_ACTIVITY_EVT_OUTBREAK_ALERT" {
		# MESSAGE SLF_ACTIVITY_EVT_OUTBREAK_ALERT:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld43>" Grayware/Spyware="<threat_name>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Destination IP="<fld7>" Source IP="<fld8>" Event time (local)="<fld1>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld43}\" Grayware/Spyware=\"%{threat_name}\" Result=\"%{result}\" Infection destination=\"%{dhost}\" Infection destination IP=\"%{daddr}\" Destination IP=\"%{fld7}\" Source IP=\"%{fld8}\" Event time (local)=\"%{fld1}\"" }
				id => "message-SLF_ACTIVITY_EVT_OUTBREAK_ALERT:01"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "SLF_ACTIVITY_EVT_OUTBREAK_ALERT:01"
					"[rsa][message][id1]" => "SLF_ACTIVITY_EVT_OUTBREAK_ALERT:01"
					"[event][categoryid]" => "1003050000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:m:s a", "M/d/yyyy HH:m:s", "M/d/yyyy H:m:s a", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE SLF_ACTIVITY_EVT_OUTBREAK_ALERT
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>" Grayware/Spyware="<threat_name>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Destination IP="<fld7>" Source IP="<fld8>" Managing server entity="<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}\" Grayware/Spyware=\"%{threat_name}\" Result=\"%{result}\" Infection destination=\"%{dhost}\" Infection destination IP=\"%{daddr}\" Destination IP=\"%{fld7}\" Source IP=\"%{fld8}\" Managing server entity=\"%{info}\"" }
				id => "message-SLF_ACTIVITY_EVT_OUTBREAK_ALERT"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "SLF_ACTIVITY_EVT_OUTBREAK_ALERT"
					"[rsa][message][id1]" => "SLF_ACTIVITY_EVT_OUTBREAK_ALERT"
					"[event][categoryid]" => "1003050000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:m:s a", "M/d/yyyy HH:m:s", "M/d/yyyy H:m:s a", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "EVT_UNKNOWN" {
		# MESSAGE EVT_UNKNOWN:01
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>" Grayware/Spyware="<threat_name>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Destination IP="<fld7>" Source IP="<fld8>" Domain="<domain>" ScanMethod="<event_source>" Infected file="<filename>" File path="<directory>" User="<username>" Managing server entity="<info>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}\" Grayware/Spyware=\"%{threat_name}\" Result=\"%{result}\" Infection destination=\"%{dhost}\" Infection destination IP=\"%{daddr}\" Destination IP=\"%{fld7}\" Source IP=\"%{fld8}\" Domain=\"%{domain}\" ScanMethod=\"%{event_source}\" Infected file=\"%{filename}\" File path=\"%{directory}\" User=\"%{username}\" Managing server entity=\"%{info}\"" }
				id => "message-EVT_UNKNOWN:01"
				add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
					"[event][id]" => "EVT_UNKNOWN:01"
					"[rsa][message][id1]" => "EVT_UNKNOWN:01"
					"[event][categoryid]" => "1003000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:m:s a", "M/d/yyyy HH:m:s", "M/d/yyyy H:m:s a", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE EVT_UNKNOWN
		# line in RSA: Security product="<product>" Security product node="<hostname>" Security product IP="<hostip>" Event time="<fld1>" Grayware/Spyware="<threat_name>" Result="<result>" Infection destination="<dhost>" Infection destination IP="<daddr>" Destination IP="<fld7>" Source IP="<fld8>" Domain="<domain>" Domain="<fld9>" Domain="<fld10>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=\"%{product}\" Security product node=\"%{hostname}\" Security product IP=\"%{hostip}\" Event time=\"%{fld1}\" Grayware/Spyware=\"%{threat_name}\" Result=\"%{result}\" Infection destination=\"%{dhost}\" Infection destination IP=\"%{daddr}\" Destination IP=\"%{fld7}\" Source IP=\"%{fld8}\" Domain=\"%{domain}\" Domain=\"%{fld9}\" Domain=\"%{fld10}\"" }
				id => "message-EVT_UNKNOWN"
				add_field => {
					"[event][id]" => "EVT_UNKNOWN"
					"[rsa][message][id1]" => "EVT_UNKNOWN"
					"[event][categoryid]" => "1207000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId48
	# line in RSA: TMCM server="<hostid>" Industry="<fld5>" Security product="<product>" Security product version="<version>" Security product node="<hostname>" Security product ip="<hostip>" Event time="<fld43>" Security agent name="<agent>" Security agent ip="<saddr>" Security agent domain="<sdomain>" Policy rule="<policyname>" Action taken="<action>" Email sender="<from>" Email subject="<subject>" C&C risk level="<reputation_num>" C&C list source="<fld7>" C&C channel="<fld8>" C&C url="<url>" C&C url category="<filter>" C&C ip port="<fld22>" C&C email recipient="<to>" C&C address first monitored="<fld9>" C&C address last activity="<fld10>" C&C server location="<location_desc>" Malware families="<fld21>" Targeted attack group="<group>" Event time (local)="<fld1>"
	else if [logstash][msgparser][id] == "msgParserId48" {
		dissect {
			mapping => { "message" => "TMCM server=\"%{hostid}\" Industry=\"%{fld5}\" Security product=\"%{product}\" Security product version=\"%{version}\" Security product node=\"%{hostname}\" Security product ip=\"%{hostip}\" Event time=\"%{fld43}\" Security agent name=\"%{agent}\" Security agent ip=\"%{saddr}\" Security agent domain=\"%{sdomain}\" Policy rule=\"%{policyname}\" Action taken=\"%{action}\" Email sender=\"%{from}\" Email subject=\"%{subject}\" C&C risk level=\"%{reputation_num}\" C&C list source=\"%{fld7}\" C&C channel=\"%{fld8}\" C&C url=\"%{url}\" C&C url category=\"%{filter}\" C&C ip port=\"%{fld22}\" C&C email recipient=\"%{to}\" C&C address first monitored=\"%{fld9}\" C&C address last activity=\"%{fld10}\" C&C server location=\"%{location_desc}\" Malware families=\"%{fld21}\" Targeted attack group=\"%{group}\" Event time (local)=\"%{fld1}\"" }
			id => "msgParserId48"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy HH:m:s", "M/d/yyyy H:m:s a", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId49
	# line in RSA: <event_type> Compromised Host: <shost> IP Address: <saddr> Domain: <domain>\\ Date/Time: <event_time_string> Callback address: <url> C&C risk level: <risk> C&C list source: <fld7> Action: <action>
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "%{event_type} Compromised Host: %{shost} IP Address: %{saddr} Domain: %{domain}\\ Date/Time: %{event_time_string} Callback address: %{url} C&C risk level: %{risk} C&C list source: %{fld7} Action: %{action}" }
			id => "msgParserId49"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "TRENDMICRO_GENERIC" {
		# MESSAGE TRENDMICRO_GENERIC
		# line in RSA: Security product=<product> Security product node=<hostname> Security product IP=<hostip> Event time=<fld1> Grayware/Spyware=<threat_name> Result=<result> Infection destination=<dhost> Infection destination IP=<daddr> Destination IP=<fld2> Source IP=<fld3> Event time (local)=<p_time1> Component=<fld5> Component version=<fld6> Email subject=<subject> Email sender=<from> Email recipient=<to> Policy rule=<policyname> Action on content=<disposition> Action on email=<action> Virus=<fld7> Infected file=<filename> File path=<directory> Action taken=<fld8> Domain=<domain> URL=<url> Blocking type=<fld9> TMCM server=<hostid> Industry=<fld10> Security product version=<version> Security agent name=<agent> Security agent ip=<fld11> Security agent domain=<sdomain> C&C risk level=<reputation_num> C&C list source=<fld12> C&C channel=<fld13> C&C url=<fld14> C&C url category=<filter> C&C ip port=<fld15> C&C email recipient=<fld16> C&C address first monitored=<fld17> C&C address last activity=<fld18> C&C server location=<location_desc> Malware families=<fld19> Targeted attack group=<group> Managing server entity=<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security product=%{product} Security product node=%{hostname} Security product IP=%{hostip} Event time=%{fld1} Grayware/Spyware=%{threat_name} Result=%{result} Infection destination=%{dhost} Infection destination IP=%{daddr} Destination IP=%{fld2} Source IP=%{fld3} Event time (local)=%{p_time1} Component=%{fld5} Component version=%{fld6} Email subject=%{subject} Email sender=%{from} Email recipient=%{to} Policy rule=%{policyname} Action on content=%{disposition} Action on email=%{action} Virus=%{fld7} Infected file=%{filename} File path=%{directory} Action taken=%{fld8} Domain=%{domain} URL=%{url} Blocking type=%{fld9} TMCM server=%{hostid} Industry=%{fld10} Security product version=%{version} Security agent name=%{agent} Security agent ip=%{fld11} Security agent domain=%{sdomain} C&C risk level=%{reputation_num} C&C list source=%{fld12} C&C channel=%{fld13} C&C url=%{fld14} C&C url category=%{filter} C&C ip port=%{fld15} C&C email recipient=%{fld16} C&C address first monitored=%{fld17} C&C address last activity=%{fld18} C&C server location=%{location_desc} Malware families=%{fld19} Targeted attack group=%{group} Managing server entity=%{info}" }
				id => "message-TRENDMICRO_GENERIC"
				add_field => {
				"vid" => "%{p_msgid}"
					"[event][id]" => "%{p_msgid}"
					"[rsa][message][id1]" => "TRENDMICRO_GENERIC"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{p_time1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE TRENDMICRO_GENERIC1
		# line in RSA: ServiceInfo=<info>,EventTime=<p_time1>,SecurityProductNode=<hostname>,SecurityProductIP=<hostip>,SecurityProduct=<product>,ProductVersion=<version>,VirusName=<threat_name>,VirusCount=<dclass_counter1>,ScanEngine=<component_version>,VirusPattern=<content_version>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ServiceInfo=%{info},EventTime=%{p_time1},SecurityProductNode=%{hostname},SecurityProductIP=%{hostip},SecurityProduct=%{product},ProductVersion=%{version},VirusName=%{threat_name},VirusCount=%{dclass_counter1},ScanEngine=%{component_version},VirusPattern=%{content_version}" }
				id => "message-TRENDMICRO_GENERIC1"
				add_field => {
				"vid" => "%{p_msgid}"
					"[event][id]" => "%{p_msgid}"
					"[rsa][message][id1]" => "TRENDMICRO_GENERIC1"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{p_time1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy HH:m:s", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_trendmicromsg.json"
#			template_name => "trendmicro_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

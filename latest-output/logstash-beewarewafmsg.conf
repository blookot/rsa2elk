# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "beewarewaf"
			"[observer][name]" => "Beeware Web Application Firewall"
			"[observer][type]" => "Application Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1> <hfld2> <hfld3> Beeware <hfld4> : <hfld5> <hfld6> [<hfld7> <hfld8> <hfld9> <hfld10> <hfld11>] [error] ICX rejected the request: sid=<hfld12>, time=<hfld13>, IpSrc=<hfld14>, reason=<<<messageid> <!payload:hfld5>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+Beeware[\s]+(?<hfld4>[^\s]*)[\s]+:[\s]+(?<message>(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^\s]*)[\s]+\[(?<hfld7>[^\s]*)[\s]+(?<hfld8>[^\s]*)[\s]+(?<hfld9>[^\s]*)[\s]+(?<hfld10>[^\s]*)[\s]+(?<hfld11>[^\]]*)\][\s]+\[error\][\s]+ICX[\s]+rejected[\s]+the[\s]+request:[\s]+sid=(?<hfld12>[^,]*),[\s]+time=(?<hfld13>[^,]*),[\s]+IpSrc=(?<hfld14>[^,]*),[\s]+reason=<(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1> <hfld2> <hfld3> WEBSERVER Beeware: <hfld4> <hfld5> [IAM] <hfld6>/<hfld7> : <hfld8> - <messageid> <!payload:hfld4>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+WEBSERVER[\s]+Beeware:[\s]+(?<message>(?<hfld4>[^\s]*)[\s]+(?<hfld5>[^\s]*)[\s]+\[IAM\][\s]+(?<hfld6>[^/]*)/(?<hfld7>[^\s]*)[\s]+:[\s]+(?<hfld8>[^\s]*)[\s]+\-[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hfld1> <hfld2> <hfld3> Beeware <hfld4> : <hfld5> <hfld6> [<messageid>] <!payload:hfld5>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+Beeware[\s]+(?<hfld4>[^\s]*)[\s]+:[\s]+(?<message>(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^\s]*)[\s]+\[(?<messageid>[^\]]*)\][\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-beewarewafmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <hostname> <hostip> [<fld7> <fld8> <fld9> <fld10> <fld11>] [error] ICX rejected the request: sid=<<<fld12>>, time=<<<fld13> <fld14> <fld15>>, IpSrc=<<<saddr>>, reason=<<<rulename>>, proto=<<<protocol>>, method=<<<web_method>>, uri=<<<fld17>>, query=<<<web_query>>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{hostname} %{hostip} [%{fld7} %{fld8} %{fld9} %{fld10} %{fld11}] [error] ICX rejected the request: sid=<%{fld12}>, time=<%{fld13} %{fld14} %{fld15}>, IpSrc=<%{saddr}>, reason=<%{rulename}>, proto=<%{protocol}>, method=<%{web_method}>, uri=<%{fld17}>, query=<%{web_query}>" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <hostname> <hostip> [IAM] <fld6>/<fld7> : <fld8> <fld9> - <event_type> <username> Perimeter authentication successful from <saddr> on <url> 
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{hostname} %{hostip} [IAM] %{fld6}/%{fld7} : %{fld8} %{fld9} - %{event_type} %{username} Perimeter authentication successful from %{saddr} on %{url}" }
			id => "msgParserId1"
			add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld8} %{fld9}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <hostname> <hostip> [IAM] <fld6>/<fld7> : <fld8> <fld9> - <event_type> <username> Perimeter authentication failed from <saddr> on <url> 
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{hostname} %{hostip} [IAM] %{fld6}/%{fld7} : %{fld8} %{fld9} - %{event_type} %{username} Perimeter authentication failed from %{saddr} on %{url}" }
			id => "msgParserId2"
			add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld8} %{fld9}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <hostname> <hostip> [<action>] <fld22>[<fld23>] : <fld13> <fld14> - <threat_name> in GET_VAR from <saddr> on <url>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{hostname} %{hostip} [%{action}] %{fld22}[%{fld23}] : %{fld13} %{fld14} - %{threat_name} in GET_VAR from %{saddr} on %{url}" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld13} %{fld14}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-beewarewafmsg.json"
#			template_name => "beewarewaf_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

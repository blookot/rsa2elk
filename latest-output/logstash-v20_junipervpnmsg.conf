# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "junipervpn"
			"[observer][name]" => "Pulse Secure"
			"[observer][type]" => "VPN"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 2222
	# line in RSA: { Juniper | Neoteris }: id=<messageid> <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+id=(?<messageid>[^\s]*)[\s]+(?<message>.*)$" }
			id => "header-2222"
			add_field => {
				"[rsa][header][id]" => "2222"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1110
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>]!Root - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\]!Root[\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-1110"
			add_field => {
				"[rsa][header][id]" => "1110"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1111
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <hfld2> - <messageid> Tracing <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<hfld2>[^\s]*)[\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+Tracing[\s]+(?<payload>.*))$" }
			id => "header-1111"
			add_field => {
				"[rsa][header][id]" => "1111"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <hfld2>:<messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<hfld2>[^:]*):(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <husername1> from <messageid> <!payload:husername1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<husername1>[^\s]*)[\s]+from[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0033
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <husername1> <messageid> <!payload:husername1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<husername1>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0033"
			add_field => {
				"[rsa][header][id]" => "0033"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <husername1> - <messageid> <!payload:husername1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<husername1>[^\s]*)[\s]+\-[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: info - [<hfld0>] - <husername>(<hfld11>)[<hgroup>] - <datetime> - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^info[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+\-[\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<datetime>[^\s]*)[\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> <node> <hfld0> <husername> <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<node>[^\s]*)[\s]+(?<hfld0>[^\s]*)[\s]+(?<husername>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> <node> <hfld0> <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<node>[^\s]*)[\s]+(?<hfld0>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> <node> <hfld0> <husername> <husername1>/<messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<node>[^\s]*)[\s]+(?<hfld0>[^\s]*)[\s]+(?<husername>[^\s]*)[\s]+(?<husername1>[^/]*)/(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: { Juniper | Neoteris }: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <hfld2> has been assigned by the <msgIdPart1> <msgIdPart2> <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+):[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+has[\s]+been[\s]+assigned[\s]+by[\s]+the[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2123
	# line in RSA: <hfld1>T<hfld2>Z : id=<messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1}T%{hfld2}Z : id=%{messageid} %{message}" }
			id => "header-2123"
			add_field => {
				"[rsa][header][id]" => "2123"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2223
	# line in RSA: <hfld1> <hfld2> <hfld3>{ Juniper | Neoteris | <hostname>}: id=<messageid> <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s\s\s]*)([\s]*Juniper[\s]+|[\s]*Neoteris[\s]+|[\s]*(?<hostname>[^:]*)):[\s]+id=(?<messageid>[^\s]*)[\s]+(?<message>.*)$" }
			id => "header-2223"
			add_field => {
				"[rsa][header][id]" => "2223"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2231
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> : Juniper:<hfld12> <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <hdomain>\<husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+:[\s]+Juniper:(?<hfld12>[^\s]*)[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<hdomain>[^\\]*)\\(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2231"
			add_field => {
				"[rsa][header][id]" => "2231"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2229
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> : Juniper:<hfld12> <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+:[\s]+Juniper:(?<hfld12>[^\s]*)[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2229"
			add_field => {
				"[rsa][header][id]" => "2229"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2230
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> : Juniper: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <hdomain>\<husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+:[\s]+Juniper:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<hdomain>[^\\]*)\\(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2230"
			add_field => {
				"[rsa][header][id]" => "2230"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2228
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> : Juniper: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+:[\s]+Juniper:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2228"
			add_field => {
				"[rsa][header][id]" => "2228"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 22331
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> <hostname> PulseSecure: - - - <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+(?<hostname>[^\s]*)[\s]+PulseSecure:[\s]+\-[\s]+\-[\s]+\-[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-22331"
			add_field => {
				"[rsa][header][id]" => "22331"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 22332
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>-<hfld7>:<hfld8> <hostname> PulseSecure: - - - <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\-]*)\-(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+(?<hostname>[^\s]*)[\s]+PulseSecure:[\s]+\-[\s]+\-[\s]+\-[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-22332"
			add_field => {
				"[rsa][header][id]" => "22332"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 22333
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>Z <hostname> PulseSecure: - - - <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^Z]*)Z[\s]+(?<hostname>[^\s]*)[\s]+PulseSecure:[\s]+\-[\s]+\-[\s]+\-[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-22333"
			add_field => {
				"[rsa][header][id]" => "22333"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2233
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> <hostname> PulseSecure: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+(?<hostname>[^\s]*)[\s]+PulseSecure:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2233"
			add_field => {
				"[rsa][header][id]" => "2233"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2234
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> PulseSecure: <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+PulseSecure:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2234"
			add_field => {
				"[rsa][header][id]" => "2234"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2226
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> : <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2226"
			add_field => {
				"[rsa][header][id]" => "2226"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2224
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>-<hfld7>:<hfld8> : <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\-]*)\-(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2224"
			add_field => {
				"[rsa][header][id]" => "2224"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2227
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>+<hfld7>:<hfld8> : <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <husername1> from <messageid> <!payload:husername1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\+]*)\+(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<husername1>[^\s]*)[\s]+from[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2227"
			add_field => {
				"[rsa][header][id]" => "2227"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2225
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>-<hfld7>:<hfld8> : <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <husername1> from <messageid> <!payload:husername1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<hfld6>[^\-]*)\-(?<hfld7>[^:]*):(?<hfld8>[^\s]*)[\s]+:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<husername1>[^\s]*)[\s]+from[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2225"
			add_field => {
				"[rsa][header][id]" => "2225"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 2232
	# line in RSA: <hfld1>-<hfld2>-<hfld3>T<hfld4>:<hfld5>:<hfld6>Z : <hfld31>-<hfld32>-<hfld33> <time> - <node> - [<hfld0>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:hfld6>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\-]*)\-(?<hfld2>[^\-]*)\-(?<hfld3>[^T]*)T(?<hfld4>[^:]*):(?<hfld5>[^:]*):(?<message>(?<hfld6>[^Z]*)Z[\s]+:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<node>[^\s]*)[\s]+\-[\s]+\[(?<hfld0>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-2232"
			add_field => {
				"[rsa][header][id]" => "2232"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3337
	# line in RSA: <hfld1>T<hfld2>Z  PulseSecure: <hfld31>-<hfld32>-<hfld33> <time> - <fld3> - [<fld4>] System()[] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^T]*)T(?<hfld2>[^Z]*)Z[\s]+PulseSecure:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+\[(?<fld4>[^\]]*)\][\s]+System\(\)\[\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-3337"
			add_field => {
				"[rsa][header][id]" => "3337"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3333
	# line in RSA: <hfld1>T<hfld2>Z  PulseSecure: <hfld31>-<hfld32>-<hfld33> <time> - <fld3> - [<fld4>] {Root::System()[]|System()[]|Root::<husername>(<hfld11>)[<hgroup>]} - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^T]*)T(?<hfld2>[^Z]*)Z[\s]+PulseSecure:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+\[(?<fld4>[^\]]*)\][\s]+(Root::System\(\)\[\]|System\(\)\[\]|Root::(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\])[\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-3333"
			add_field => {
				"[rsa][header][id]" => "3333"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3334
	# line in RSA: <hdatetime>  PulseSecure: id=<messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hdatetime}  PulseSecure: id=%{messageid} %{message}" }
			id => "header-3334"
			add_field => {
				"[rsa][header][id]" => "3334"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3335
	# line in RSA: <hfld1>T<hfld2>Z  PulseSecure: <hfld31>-<hfld32>-<hfld33> <time> - <hfld3> - [<hfld4>] Root::<husername>(<hfld11>)[<hgroup>] - {<husername1> - <hfld7> <messageid>|<husername1> <messageid>} <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^T]*)T(?<hfld2>[^Z]*)Z[\s]+PulseSecure:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<hfld3>[^\s]*)[\s]+\-[\s]+\[(?<hfld4>[^\]]*)\][\s]+Root::(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+((?<husername1>[^\s]*)[\s]+\-[\s]+(?<hfld7>[^\s]*)[\s]+(?<messageid>[^\s]*)|(?<husername1>[^\s]*)[\s]+(?<messageid>[^\s]*))[\s]+(?<payload>.*))$" }
			id => "header-3335"
			add_field => {
				"[rsa][header][id]" => "3335"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3336
	# line in RSA: <hfld1>T<hfld2>Z  PulseSecure: <hfld31>-<hfld32>-<hfld33> <time> - <hfld3> - [<hfld4>] <husername>(<hfld11>)[<hgroup>] - <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^T]*)T(?<hfld2>[^Z]*)Z[\s]+PulseSecure:[\s]+(?<hfld31>[^\-]*)\-(?<hfld32>[^\-]*)\-(?<hfld33>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+\-[\s]+(?<hfld3>[^\s]*)[\s]+\-[\s]+\[(?<hfld4>[^\]]*)\][\s]+(?<husername>[^\(]*)\((?<hfld11>[^\)]*)\)\[(?<hgroup>[^\]]*)\][\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-3336"
			add_field => {
				"[rsa][header][id]" => "3336"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_junipervpnmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "ACE" {
		# MESSAGE 000001
		# line in RSA: ACE Auth Process: { New PIN | Next Token } cancelled for '<c_username>' due to <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ACE[\s]+Auth[\s]+Process:[\s]+([\s]*New[\s]+PIN[\s]+|[\s]*Next[\s]+Token[\s]+)[\s]+cancelled[\s]+for[\s]+'(?<c_username>[^']*)'[\s]+due[\s]+to[\s]+(?<result>.*)$" }
				id => "message-000001"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "New PIN cancelled"
					"[event][id]" => "000001"
					"[rsa][message][id1]" => "000001"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000002
		# line in RSA: ACE Auth: Fail to connect to the auth process.  Error=<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ACE Auth: Fail to connect to the auth process.  Error=%{result}" }
				id => "message-000002"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Fail to connect to the auth process"
					"[event][id]" => "000002"
					"[rsa][message][id1]" => "000002"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000003
		# line in RSA: ACE Auth: Fail to read data from the auth process: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ACE Auth: Fail to read data from the auth process: %{result}" }
				id => "message-000003"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Fail to read data from the auth process"
					"[event][id]" => "000003"
					"[rsa][message][id1]" => "000003"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Access" {
		# MESSAGE 000004
		# line in RSA: Access blocked after DNS lookup. Check Web ACL settings - Host: <hostip>, Request: {<web_method> <webpage> <fld1> | <url>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+blocked[\s]+after[\s]+DNS[\s]+lookup\.[\s]+Check[\s]+Web[\s]+ACL[\s]+settings[\s]+\-[\s]+Host:[\s]+(?<hostip>[^,]*),[\s]+Request:[\s]+((?<web_method>[^\s]*)[\s]+(?<webpage>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*(?<url>.*))$" }
				id => "message-000004"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "access blocked"
					"[event][id]" => "000004"
					"[rsa][message][id1]" => "000004"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000005
		# line in RSA: Access denied to Windows directory <directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Access denied to Windows directory %{directory}" }
				id => "message-000005"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "access denied to windows directory"
					"[event][id]" => "000005"
					"[rsa][message][id1]" => "000005"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Account" {
		# MESSAGE 000006
		# line in RSA: Account { disabled | locked-out } by password management on auth server '<hostname>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Account[\s]+([\s]*disabled[\s]+|[\s]*locked\-out[\s]+)[\s]+by[\s]+password[\s]+management[\s]+on[\s]+auth[\s]+server[\s]+'(?<hostname>[^']*)'$" }
				id => "message-000006"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "access blocked or disabled"
					"[event][id]" => "000006"
					"[rsa][message][id1]" => "000006"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000007
		# line in RSA: Account expired by password management on auth server '<hostname>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Account expired by password management on auth server '%{hostname}'" }
				id => "message-000007"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "access blocked or disabled"
					"[event][id]" => "000007"
					"[rsa][message][id1]" => "000007"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA: Accessing Dfs root <shost> on domain controller <daddr>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "Accessing Dfs root %{shost} on domain controller %{daddr}" }
			id => "msgParserId7"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Accessing Dfs root"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "A" {
		# MESSAGE 000009
		# line in RSA: A Trusted Client CA has not been configured for '<fld1>'. Consequently, the status of the certificate for '<fld2>' could not be checked. You can enable Auto-import of Intermediate <fld3> to configure intermediate <fld4> automaticallly.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "A Trusted Client CA has not been configured for '%{fld1}'. Consequently, the status of the certificate for '%{fld2}' could not be checked. You can enable Auto-import of Intermediate %{fld3} to configure intermediate %{fld4} automaticallly." }
				id => "message-000009"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000009"
					"[rsa][message][id1]" => "000009"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001119
		# line in RSA: A new User realm "<realm>" is duplicated from realm "<fld2>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "A new User realm \"%{realm}\" is duplicated from realm \"%{fld2}\"" }
				id => "message-001119"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "001119"
					"[rsa][message][id1]" => "001119"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA: Action in Policy '<policyname>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "Action in Policy '%{policyname}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId10"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "action modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: Activated in cluster: '<fld1>'
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "Activated in cluster: '%{fld1}'" }
			id => "msgParserId11"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Active" {
		# MESSAGE 000012
		# line in RSA: <info>: Admin Password changed for user '<c_username>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Admin Password changed for user '%{c_username}'." }
				id => "message-000012"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Admin Password changed"
					"[event][id]" => "000012"
					"[rsa][message][id1]" => "000012"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000013
		# line in RSA: <info>: Admin User name changed from '<change_old>' to '<change_new>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Admin User name changed from '%{change_old}' to '%{change_new}'." }
				id => "message-000013"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => " Username changed"
					"[event][id]" => "000013"
					"[rsa][message][id1]" => "000013"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000014
		# line in RSA: Active user '<c_username>' in realm '<fld1>' is deleted since <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Active user '%{c_username}' in realm '%{fld1}' is deleted since %{result}" }
				id => "message-000014"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "active user deleted"
					"[event][id]" => "000014"
					"[rsa][message][id1]" => "000014"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000015
		# line in RSA: <info>: Authentication protocols allowed changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Authentication protocols allowed changed from '%{change_old}' to '%{change_new}'" }
				id => "message-000015"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Authentication protocols allowed changed"
					"[event][id]" => "000015"
					"[rsa][message][id1]" => "000015"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA: <fld1>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{fld1}" }
			id => "msgParserId16"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: Agent login succeeded for <c_username>/<fld1> from { endpoint using RADIUS authentication |<fld3> with <fld2>|<smacaddr>.}
	else if [logstash][msgparser][id] == "msgParserId17" {
		grok {
			match => { "message" => "^Agent[\s]+login[\s]+succeeded[\s]+for[\s]+(?<c_username>[^/]*)/(?<fld1>[^\s]*)[\s]+from[\s]+([\s]*endpoint[\s]+using[\s]+RADIUS[\s]+authentication[\s]+|(?<fld3>[^\s]*)[\s]+with[\s]+(?<fld2>.*)|(?<smacaddr>[^\.]*)\.)$" }
			id => "msgParserId17"
			add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Agent login succeeded"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: All images less than <fld1> will be cached by clients
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "All images less than %{fld1} will be cached by clients" }
			id => "msgParserId18"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <change_attribute> changed from '<change_old>' to '<change_new>'
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{change_attribute} changed from '%{change_old}' to '%{change_new}'" }
			id => "msgParserId19"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Allowed SSL and TLS"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA: Annotation started in meeting '<info>' (ID: <id>).
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "Annotation started in meeting '%{info}' (ID: %{id})." }
			id => "msgParserId20"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting started"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA: Applet file '<filename>' is not found.
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "Applet file '%{filename}' is not found." }
			id => "msgParserId21"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "file invoke"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: Archive { Directory | Server | system configuration schedule | user accounts schedule | XML configuration } {changed | schedule changed}  from <change_old> to <change_new>
	else if [logstash][msgparser][id] == "msgParserId22" {
		grok {
			match => { "message" => "^Archive[\s]+([\s]*Directory[\s]+|[\s]*Server[\s]+|[\s]*system[\s]+configuration[\s]+schedule[\s]+|[\s]*user[\s]+accounts[\s]+schedule[\s]+|[\s]*XML[\s]+configuration[\s]+)[\s]+(changed[\s]+|[\s]*schedule[\s]+changed)[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>.*)$" }
			id => "msgParserId22"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "archive change"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Archiving" {
		# MESSAGE 000025
		# line in RSA: Archiving could not { connect | write } to { '<url>' | <url> }, { System Config | User Accounts | User Access log | Clientlogs | Xml Config | Admin Access log | Events log | Sensors log} not archived
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Archiving[\s]+could[\s]+not[\s]+([\s]*connect[\s]+|[\s]*write[\s]+)[\s]+to[\s]+([\s]*'(?<url>[^']*)'[\s]+|[\s]*(?<url>[^\s]*)[\s]+),[\s]+([\s]*System[\s]+Config[\s]+|[\s]*User[\s]+Accounts[\s]+|[\s]*User[\s]+Access[\s]+log[\s]+|[\s]*Clientlogs[\s]+|[\s]*Xml[\s]+Config[\s]+|[\s]*Admin[\s]+Access[\s]+log[\s]+|[\s]*Events[\s]+log[\s]+|[\s]*Sensors[\s]+log)[\s]+not[\s]+archived$" }
				id => "message-000025"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "could not connect or write"
					"[event][id]" => "000025"
					"[rsa][message][id1]" => "000025"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000026
		# line in RSA: Archiving could not login to <dhost> as user '<c_username>', { User Accounts | System Config } not archived
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Archiving[\s]+could[\s]+not[\s]+login[\s]+to[\s]+(?<dhost>[^\s]*)[\s]+as[\s]+user[\s]+'(?<c_username>[^']*)',[\s]+([\s]*User[\s]+Accounts[\s]+|[\s]*System[\s]+Config[\s]+)[\s]+not[\s]+archived$" }
				id => "message-000026"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "could not login"
					"[event][id]" => "000026"
					"[rsa][message][id1]" => "000026"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000027
		# line in RSA: Archiving could not login to <dhost> as user '<c_username>', {User Access log | Clientlogs | Xml Config | Admin Access log | Events log} not archived
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Archiving[\s]+could[\s]+not[\s]+login[\s]+to[\s]+(?<dhost>[^\s]*)[\s]+as[\s]+user[\s]+'(?<c_username>[^']*)',[\s]+(User[\s]+Access[\s]+log[\s]+|[\s]*Clientlogs[\s]+|[\s]*Xml[\s]+Config[\s]+|[\s]*Admin[\s]+Access[\s]+log[\s]+|[\s]*Events[\s]+log)[\s]+not[\s]+archived$" }
				id => "message-000027"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "could not login"
					"[event][id]" => "000027"
					"[rsa][message][id1]" => "000027"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId26
	# line in RSA: ARP Timeout for internal port set to <fld1> for node <fld2>.
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "ARP Timeout for internal port set to %{fld1} for node %{fld2}." }
			id => "msgParserId26"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: Attempt to connect to unauthorized or non-existing bookmark '<daddr>'.
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "Attempt to connect to unauthorized or non-existing bookmark '%{daddr}'." }
			id => "msgParserId27"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "unauthorized or non-existing bookmark"
				"action" => "Attempt to connect "
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Attendee" {
		# MESSAGE 000030
		# line in RSA: Attendee <c_username> (<fld1>) (<fld4>) { added to | updated for } meeting ID <id>. Role: <user_role>, Joined: <fld2>, Left: <fld3>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Attendee[\s]+(?<c_username>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+\((?<fld4>[^\)]*)\)[\s]+([\s]*added[\s]+to[\s]+|[\s]*updated[\s]+for[\s]+)[\s]+meeting[\s]+ID[\s]+(?<id>[^\.]*)\.[\s]+Role:[\s]+(?<user_role>[^,]*),[\s]+Joined:[\s]+(?<fld2>[^,]*),[\s]+Left:[\s]+(?<fld3>[^\.]*)\.$" }
				id => "message-000030"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000030"
					"[rsa][message][id1]" => "000030"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000031
		# line in RSA: Attendee {(useruid<c_username>) | (sid<fld3>)} property <fld1> updated from '<change_old>' to '<change_new>' for meeting ID <id>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Attendee[\s]+(\(useruid(?<c_username>[^\)]*)\)[\s]+|[\s]*\(sid(?<fld3>[^\)]*)\))[\s]+property[\s]+(?<fld1>[^\s]*)[\s]+updated[\s]+from[\s]+'(?<change_old>[^']*)'[\s]+to[\s]+'(?<change_new>[^']*)'[\s]+for[\s]+meeting[\s]+ID[\s]+(?<id>[^\.]*)\.$" }
				id => "message-000031"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000031"
					"[rsa][message][id1]" => "000031"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000032
		# line in RSA: Attendee <uid> {(useruid<c_username>) | (<fld1>)} { added to | updated for } meeting ID <id>. Role: <user_role>, Joined: <fld1>, Left: <fld2>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Attendee[\s]+(?<uid>[^\s]*)[\s]+(\(useruid(?<c_username>[^\)]*)\)[\s]+|[\s]*\((?<fld1>[^\)]*)\))[\s]+([\s]*added[\s]+to[\s]+|[\s]*updated[\s]+for[\s]+)[\s]+meeting[\s]+ID[\s]+(?<id>[^\.]*)\.[\s]+Role:[\s]+(?<user_role>[^,]*),[\s]+Joined:[\s]+(?<fld1>[^,]*),[\s]+Left:[\s]+(?<fld2>[^\.]*)\.$" }
				id => "message-000032"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000032"
					"[rsa][message][id1]" => "000032"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000033
		# line in RSA: Attendee <c_username> removed from meeting '<info>' (ID: <id>) by <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attendee %{c_username} removed from meeting '%{info}' (ID: %{id}) by %{fld1}" }
				id => "message-000033"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "attendee removed"
					"[event][id]" => "000033"
					"[rsa][message][id1]" => "000033"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000034
		# line in RSA: Attendee <c_username> left meeting '<info>' (ID: <id>) after <duration> minute(s). Total Data Transmitted: <bytes> KB.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attendee %{c_username} left meeting '%{info}' (ID: %{id}) after %{duration} minute(s). Total Data Transmitted: %{bytes} KB." }
				id => "message-000034"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "attendee left"
					"[event][id]" => "000034"
					"[rsa][message][id1]" => "000034"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000035
		# line in RSA: Attendee <c_username> joined meeting '<info>' (ID: <id>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attendee %{c_username} joined meeting '%{info}' (ID: %{id})." }
				id => "message-000035"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000035"
					"[rsa][message][id1]" => "000035"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId34
	# line in RSA: Attributes not supported by NAS <daddr>: {Administrators = <administrator>, Analysts = <fld1>|SSID = <ssid>}
	else if [logstash][msgparser][id] == "msgParserId34" {
		grok {
			match => { "message" => "^Attributes[\s]+not[\s]+supported[\s]+by[\s]+NAS[\s]+(?<daddr>[^:]*):[\s]+(Administrators[\s]+=[\s]+(?<administrator>[^,]*),[\s]+Analysts[\s]+=[\s]+(?<fld1>.*)|SSID[\s]+=[\s]+(?<ssid>.*))$" }
			id => "msgParserId34"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Attributes not supported by NAS"
				"saddr" => "%{hfld0}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId35
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId35"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Authentication" {
		# MESSAGE 000037
		# line in RSA: Authentication token <fld1> is created for administrative logon recovery
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication token %{fld1} is created for administrative logon recovery" }
				id => "message-000037"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000037"
					"[rsa][message][id1]" => "000037"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001137
		# line in RSA: Authentication requests from IP address <saddr> are temporarily locked out
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication requests from IP address %{saddr} are temporarily locked out" }
				id => "message-001137"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "001137"
					"[rsa][message][id1]" => "001137"
					"[event][categoryid]" => "1301010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "License" {
		# MESSAGE License
		# line in RSA: License server low-level protocol error, server=<obj_server>, Code = [<resultcode>] : <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "License server low-level protocol error, server=%{obj_server}, Code = [%{resultcode}] : %{result}" }
				id => "message-License"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "License"
					"[rsa][message][id1]" => "License"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE License:02
		# line in RSA: License hardware ID mismatch for mask nation matter fan jargon piano producer, '<fld1>' with '<fld2>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "License hardware ID mismatch for mask nation matter fan jargon piano producer, '%{fld1}' with '%{fld2}'." }
				id => "message-License:02"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"event_description" => "License Hardware ID mismatch"
					"[event][id]" => "License:02"
					"[rsa][message][id1]" => "License:02"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE License:03
		# line in RSA: License Server Protocol Error: Code=(<resultcode>) Error="<result>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "License Server Protocol Error: Code=(%{resultcode}) Error=\"%{result}\"" }
				id => "message-License:03"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "License:03"
					"[rsa][message][id1]" => "License:03"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000152
		# line in RSA: License for '<fld1>' - '<fld2>' activated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "License for '%{fld1}' - '%{fld2}' activated" }
				id => "message-000152"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "license activation"
					"[event][id]" => "000152"
					"[rsa][message][id1]" => "000152"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000446
		# line in RSA: License for '<fld1>' - '<fld2>' installed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "License for '%{fld1}' - '%{fld2}' installed" }
				id => "message-000446"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "license installation"
					"[event][id]" => "000446"
					"[rsa][message][id1]" => "000446"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE License:04
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-License:04"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "License:04"
					"[rsa][message][id1]" => "License:04"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Server" {
		# MESSAGE Server
		# line in RSA: {Server shutdown requested by serial/console|Server shutdown}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Server[\s]+shutdown[\s]+requested[\s]+by[\s]+serial/console|Server[\s]+shutdown)$" }
				id => "message-Server"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"event_description" => " Server shutdown"
					"[event][id]" => "Server"
					"[rsa][message][id1]" => "Server"
					"[event][categoryid]" => "1611000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000289
		# line in RSA: Server {reboot | restart}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Server[\s]+(reboot[\s]+|[\s]*restart)$" }
				id => "message-000289"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000289"
					"[rsa][message][id1]" => "000289"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId42
	# line in RSA: Authorized <protocol> connection to <daddr>:{ <dport> as <c_username> | <dport>}
	else if [logstash][msgparser][id] == "msgParserId42" {
		grok {
			match => { "message" => "^Authorized[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+to[\s]+(?<daddr>[^:]*):([\s]*(?<dport>[^\s]*)[\s]+as[\s]+(?<c_username>[^\s]*)[\s]+|[\s]*(?<dport>.*))$" }
			id => "msgParserId42"
			add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId43
	# line in RSA: Auto-allow display {enabled | disabled}.
	else if [logstash][msgparser][id] == "msgParserId43" {
		grok {
			match => { "message" => "^Auto\-allow[\s]+display[\s]+(enabled[\s]+|[\s]*disabled)\.$" }
			id => "msgParserId43"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Attribute changed for Auto-allow display"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId44
	# line in RSA: Automatic version monitoring is now disabled
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "Automatic version monitoring is now disabled" }
			id => "msgParserId44"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Automatic version monitoring disabled"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Browser" {
		# MESSAGE 000040
		# line in RSA: Browser on host <dhost> is not supported for { Host Checker or Cache Cleaner | Host Checker }: <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Browser[\s]+on[\s]+host[\s]+(?<dhost>[^\s]*)[\s]+is[\s]+not[\s]+supported[\s]+for[\s]+([\s]*Host[\s]+Checker[\s]+or[\s]+Cache[\s]+Cleaner[\s]+|[\s]*Host[\s]+Checker[\s]+):[\s]+(?<info>.*)$" }
				id => "message-000040"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Browser not supported"
					"[event][id]" => "000040"
					"[rsa][message][id1]" => "000040"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000041
		# line in RSA: Browser realm restrictions successfully passed for <c_username> { Users | <user_role> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Browser[\s]+realm[\s]+restrictions[\s]+successfully[\s]+passed[\s]+for[\s]+(?<c_username>[^\s]*)[\s]+([\s]*Users[\s]+|[\s]*(?<user_role>[^\s]*)[\s]+)$" }
				id => "message-000041"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Browser realm restrictions successfully passed"
					"[event][id]" => "000041"
					"[rsa][message][id1]" => "000041"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000452
		# line in RSA: Browser realm restrictions failed for <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Browser realm restrictions failed for %{c_username}" }
				id => "message-000452"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Browser realm restrictions failed"
					"[event][id]" => "000452"
					"[rsa][message][id1]" => "000452"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Cache" {
		# MESSAGE 000042
		# line in RSA: Cache Cleaner is running on host <dhost> for user '<c_username>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cache Cleaner is running on host %{dhost} for user '%{c_username}'." }
				id => "message-000042"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Cache Cleaner running on host"
					"[event][id]" => "000042"
					"[rsa][message][id1]" => "000042"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000043
		# line in RSA: Cache Cleaner is running on host <dhost>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cache Cleaner is running on host %{dhost}." }
				id => "message-000043"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Cache Cleaner running on host"
					"[event][id]" => "000043"
					"[rsa][message][id1]" => "000043"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000044
		# line in RSA: Cache Cleaner running on host <dhost> will exit as the user login timed out.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cache Cleaner running on host %{dhost} will exit as the user login timed out." }
				id => "message-000044"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Cache Cleaner exit - user time out"
					"[event][id]" => "000044"
					"[rsa][message][id1]" => "000044"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000045
		# line in RSA: Cache Cleaner restriction for realm '<fld1>' is updated to '<fld2>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cache Cleaner restriction for realm '%{fld1}' is updated to '%{fld2}'" }
				id => "message-000045"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Cache Cleaner restriction updated"
					"[event][id]" => "000045"
					"[rsa][message][id1]" => "000045"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000046
		# line in RSA: Cache Cleaner realm restrictions successfully passed for <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cache Cleaner realm restrictions successfully passed for %{c_username}" }
				id => "message-000046"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Cache Cleaner realm restrictions successfully passed"
					"[event][id]" => "000046"
					"[rsa][message][id1]" => "000046"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId53
	# line in RSA: Cancelled login for '<c_username>' from IP <saddr> because user cancelled { New PIN | Next Token } operation.
	else if [logstash][msgparser][id] == "msgParserId53" {
		grok {
			match => { "message" => "^Cancelled[\s]+login[\s]+for[\s]+'(?<c_username>[^']*)'[\s]+from[\s]+IP[\s]+(?<saddr>[^\s]*)[\s]+because[\s]+user[\s]+cancelled[\s]+([\s]*New[\s]+PIN[\s]+|[\s]*Next[\s]+Token[\s]+)[\s]+operation\.$" }
			id => "msgParserId53"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "user cancelled New PIN operation"
				"action" => "Cancelled Login"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Cannot" {
		# MESSAGE 000047
		# line in RSA: Cannot determine realm for AD server <dhost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot determine realm for AD server %{dhost}" }
				id => "message-000047"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Cannot determine realm for AD server"
					"[event][id]" => "000047"
					"[rsa][message][id1]" => "000047"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000048
		# line in RSA: Cannot read file <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot read file %{filename}" }
				id => "message-000048"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Cannot read file"
					"[event][id]" => "000048"
					"[rsa][message][id1]" => "000048"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId56
	# line in RSA: Case sensitive matching Option in Policy '<policyname>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId56" {
		dissect {
			mapping => { "message" => "Case sensitive matching Option in Policy '%{policyname}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId56"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "policy modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId57
	# line in RSA: Caught signal <fld1> (<fld2>)
	else if [logstash][msgparser][id] == "msgParserId57" {
		dissect {
			mapping => { "message" => "Caught signal %{fld1} (%{fld2})" }
			id => "msgParserId57"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Certificate" {
		# MESSAGE 000051
		# line in RSA: Certificate realm restrictions successfully passed for <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Certificate realm restrictions successfully passed for %{c_username}" }
				id => "message-000051"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "certificate restriction"
					"[event][id]" => "000051"
					"[rsa][message][id1]" => "000051"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000052
		# line in RSA: Certificate realm restrictions failed for <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Certificate realm restrictions failed for %{c_username}" }
				id => "message-000052"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "certificate restriction"
					"[event][id]" => "000052"
					"[rsa][message][id1]" => "000052"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Testing" {
		# MESSAGE 000052:01
		# line in RSA: Testing Certificate realm restrictions <disposition> for <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Testing Certificate realm restrictions %{disposition} for %{c_username}" }
				id => "message-000052:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "certificate restriction"
					"[event][id]" => "000052:01"
					"[rsa][message][id1]" => "000052:01"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Testing
		# line in RSA: Testing Password realm restrictions failed for <uid>/<authmethod>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Testing Password realm restrictions failed for %{uid}/%{authmethod}" }
				id => "message-Testing"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "Testing"
					"[rsa][message][id1]" => "Testing"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000611
		# line in RSA: Testing Source IP realm restrictions failed for <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Testing Source IP realm restrictions failed for %{c_username}" }
				id => "message-000611"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "restrictions failed"
					"[event][id]" => "000611"
					"[rsa][message][id1]" => "000611"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId61
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId61"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId62
	# line in RSA: Changeset: Exceeded maximum of '<trigger_val>' write attempts.
	else if [logstash][msgparser][id] == "msgParserId62" {
		dissect {
			mapping => { "message" => "Changeset: Exceeded maximum of '%{trigger_val}' write attempts." }
			id => "msgParserId62"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Exceeded maximum of write attempts"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId63
	# line in RSA: Chased Dfs referral on <daddr> from <shost> to <dhost>.
	else if [logstash][msgparser][id] == "msgParserId63" {
		dissect {
			mapping => { "message" => "Chased Dfs referral on %{daddr} from %{shost} to %{dhost}." }
			id => "msgParserId63"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Chased Dfs referral"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Chat" {
		# MESSAGE 000056
		# line in RSA: Chat session for meeting '<info>' (ID: <id>) started.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Chat session for meeting '%{info}' (ID: %{id}) started." }
				id => "message-000056"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000056"
					"[rsa][message][id1]" => "000056"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000493
		# line in RSA: Chat session for meeting '<info>' (ID: <id>) ended. Total Sharing Time: <duration>, Total Data Sent: <sbytes>, Total Data Received: <rbytes>, Total Data Transmitted: <bytes>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Chat session for meeting '%{info}' (ID: %{id}) ended. Total Sharing Time: %{duration}, Total Data Sent: %{sbytes}, Total Data Received: %{rbytes}, Total Data Transmitted: %{bytes}." }
				id => "message-000493"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000493"
					"[rsa][message][id1]" => "000493"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId66
	# line in RSA: Clearing { sensorslog | admin | access | events | ncpacketlog } logfile after archiving
	else if [logstash][msgparser][id] == "msgParserId66" {
		grok {
			match => { "message" => "^Clearing[\s]+([\s]*sensorslog[\s]+|[\s]*admin[\s]+|[\s]*access[\s]+|[\s]*events[\s]+|[\s]*ncpacketlog[\s]+)[\s]+logfile[\s]+after[\s]+archiving$" }
			id => "msgParserId66"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Client-side" {
		# MESSAGE 000058
		# line in RSA: Client-side Log <filename> uploaded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client-side Log %{filename} uploaded" }
				id => "message-000058"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Client-side Log uploaded"
					"[event][id]" => "000058"
					"[rsa][message][id1]" => "000058"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000058:02
		# line in RSA: Client-side certificate requirement turned on as optional for realm '<fld1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client-side certificate requirement turned on as optional for realm '%{fld1}'." }
				id => "message-000058:02"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Client-side certificate requirement turned on as optional for realm"
					"[event][id]" => "000058:02"
					"[rsa][message][id1]" => "000058:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Closed" {
		# MESSAGE 000059
		# line in RSA: Closed connection to Meeting_ID: <id>; Version: <fld2>; Protocol: <protocol>; cap: <fld3> port <dport> after <duration> seconds, with <bytes> bytes read (<fld6>) and <fld4> bytes written (<fld5>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Closed connection to Meeting_ID: %{id}; Version: %{fld2}; Protocol: %{protocol}; cap: %{fld3} port %{dport} after %{duration} seconds, with %{bytes} bytes read (%{fld6}) and %{fld4} bytes written (%{fld5})" }
				id => "message-000059"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000059"
					"[rsa][message][id1]" => "000059"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000060
		# line in RSA: {Closed connection to <daddr> port <dport> |  Closed connection to <daddr>} after <duration> seconds, with <bytes> {bytes read (<fld3>) and <fld1> bytes written (<fld2>) | bytes read and <fld1> bytes written}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Closed[\s]+connection[\s]+to[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\s]*)[\s]+|[\s]*Closed[\s]+connection[\s]+to[\s]+(?<daddr>[^\s]*))[\s]+after[\s]+(?<duration>[^\s]*)[\s]+seconds,[\s]+with[\s]+(?<bytes>[^\s]*)[\s]+(bytes[\s]+read[\s]+\((?<fld3>[^\)]*)\)[\s]+and[\s]+(?<fld1>[^\s]*)[\s]+bytes[\s]+written[\s]+\((?<fld2>[^\)]*)\)[\s]+|[\s]*bytes[\s]+read[\s]+and[\s]+(?<fld1>[^\s]*)[\s]+bytes[\s]+written)$" }
				id => "message-000060"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"event_description" => "Closed connection to port"
					"[event][id]" => "000060"
					"[rsa][message][id1]" => "000060"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000449
		# line in RSA: Closed <protocol> connection to <daddr>:<dport> (connection broker "<fld8>:<network_port>", pool "<pool_name>").
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Closed %{protocol} connection to %{daddr}:%{dport} (connection broker \"%{fld8}:%{network_port}\", pool \"%{pool_name}\")." }
				id => "message-000449"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Closed connection"
					"[event][id]" => "000449"
					"[rsa][message][id1]" => "000449"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId72
	# line in RSA: Completed syncing state (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId72" {
		dissect {
			mapping => { "message" => "Completed syncing state (%{fld1})" }
			id => "msgParserId72"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Connected" {
		# MESSAGE 000062
		# line in RSA: Connected to Meeting_ID: <id>; Version: <fld2>; Protocol: <protocol>; cap: <fld3> port <dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connected to Meeting_ID: %{id}; Version: %{fld2}; Protocol: %{protocol}; cap: %{fld3} port %{dport}" }
				id => "message-000062"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000062"
					"[rsa][message][id1]" => "000062"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000063
		# line in RSA: Connected to <daddr> port <dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connected to %{daddr} port %{dport}" }
				id => "message-000063"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000063"
					"[rsa][message][id1]" => "000063"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Connection" {
		# MESSAGE 000064
		# line in RSA: Connection from IP <saddr> not authenticated yet (URL=<url>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connection from IP %{saddr} not authenticated yet (URL=%{url})" }
				id => "message-000064"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "Process"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Unknown"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000064"
					"[rsa][message][id1]" => "000064"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000065
		# line in RSA: Connection to { ssh | telnet }://<daddr>:<dport> closed
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Connection[\s]+to[\s]+([\s]*ssh[\s]+|[\s]*telnet[\s]+)://(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+closed$" }
				id => "message-000065"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"ec_outcome" => "Unknown"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000065"
					"[rsa][message][id1]" => "000065"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId77
	# line in RSA: <daddr>:<dport> has been assigned by the connection broker "<fld8>:<network_port>" from pool "<pool_name>" for <protocol> connection.
	else if [logstash][msgparser][id] == "msgParserId77" {
		dissect {
			mapping => { "message" => "%{daddr}:%{dport} has been assigned by the connection broker \"%{fld8}:%{network_port}\" from pool \"%{pool_name}\" for %{protocol} connection." }
			id => "msgParserId77"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "connection broker assigned"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId78
	# line in RSA: Cookies will not be set to maximize security
	else if [logstash][msgparser][id] == "msgParserId78" {
		dissect {
			mapping => { "message" => "Cookies will not be set to maximize security" }
			id => "msgParserId78"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Could" {
		# MESSAGE 000067
		# line in RSA: Could not connect to LDAP server <fld1>: Failed binding to admin <c_username>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Could not connect to LDAP server %{fld1}: Failed binding to admin %{c_username}: %{info}" }
				id => "message-000067"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000067"
					"[rsa][message][id1]" => "000067"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000068
		# line in RSA: Could not connect to LDAP server <daddr>:<dport> via <protocol>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Could not connect to LDAP server %{daddr}:%{dport} via %{protocol}" }
				id => "message-000068"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Could not connect to server"
					"[event][id]" => "000068"
					"[rsa][message][id1]" => "000068"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000069
		# line in RSA: Could not change password for user <c_username> { : | . <result>. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Could[\s]+not[\s]+change[\s]+password[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+([\s]*:[\s]+|[\s]*\.[\s]+(?<result>[^\.]*)\.[\s]+)$" }
				id => "message-000069"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Could not change password"
					"[event][id]" => "000069"
					"[rsa][message][id1]" => "000069"
					"[event][categoryid]" => "1402040101"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000070
		# line in RSA: Could not export Xml Config, not archived
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Could not export Xml Config, not archived" }
				id => "message-000070"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Could not export Xml Config"
					"[event][id]" => "000070"
					"[rsa][message][id1]" => "000070"
					"[event][categoryid]" => "1701050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId83
	# line in RSA: could not get the realm info
	else if [logstash][msgparser][id] == "msgParserId83" {
		dissect {
			mapping => { "message" => "could not get the realm info" }
			id => "msgParserId83"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "could not get the realm info"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId84
	# line in RSA: Creating state snapshot, triggered by <fld1>
	else if [logstash][msgparser][id] == "msgParserId84" {
		dissect {
			mapping => { "message" => "Creating state snapshot, triggered by %{fld1}" }
			id => "msgParserId84"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "creating snapshot"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId85
	# line in RSA: Daylight Savings Time setting changed from "<change_old>" to "<change_new>"
	else if [logstash][msgparser][id] == "msgParserId85" {
		dissect {
			mapping => { "message" => "Daylight Savings Time setting changed from \"%{change_old}\" to \"%{change_new}\"" }
			id => "msgParserId85"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "time change"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId86
	# line in RSA: Default DNS Search domain changed from <change_old> to <change_new> for node <dhost> for cluster <fld1>.
	else if [logstash][msgparser][id] == "msgParserId86" {
		dissect {
			mapping => { "message" => "Default DNS Search domain changed from %{change_old} to %{change_new} for node %{dhost} for cluster %{fld1}." }
			id => "msgParserId86"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Default DNS Search domain changed"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Deleted" {
		# MESSAGE 000075
		# line in RSA: Deleted server '<fld1>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deleted server '%{fld1}'" }
				id => "message-000075"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000075"
					"[rsa][message][id1]" => "000075"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000480
		# line in RSA: Deleted the sign-in page '<webpage>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deleted the sign-in page '%{webpage}'" }
				id => "message-000480"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Deleted the sign-in page"
					"[event][id]" => "000480"
					"[rsa][message][id1]" => "000480"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId89
	# line in RSA: Description in Policy '<policyname>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "Description in Policy '%{policyname}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId89"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId90
	# line in RSA: Device Certificate "<cert_subject>": Setting "<change_attribute>" changed from '<change_old>' to '<change_new>'
	else if [logstash][msgparser][id] == "msgParserId90" {
		dissect {
			mapping => { "message" => "Device Certificate \"%{cert_subject}\": Setting \"%{change_attribute}\" changed from '%{change_old}' to '%{change_new}'" }
			id => "msgParserId90"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Device Certificate setting changed"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId91
	# line in RSA: DESCRIPTION in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId91" {
		dissect {
			mapping => { "message" => "DESCRIPTION in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId91"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId92
	# line in RSA: Detected duplicate IP address on { device <fld1> | <fld1> } { port for | for } ip <daddr>, mac <fld2>. VIP not activated
	else if [logstash][msgparser][id] == "msgParserId92" {
		grok {
			match => { "message" => "^Detected[\s]+duplicate[\s]+IP[\s]+address[\s]+on[\s]+([\s]*device[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)[\s]+([\s]*port[\s]+for[\s]+|[\s]*for[\s]+)[\s]+ip[\s]+(?<daddr>[^,]*),[\s]+mac[\s]+(?<fld2>[^\.]*)\.[\s]+VIP[\s]+not[\s]+activated$" }
			id => "msgParserId92"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Detected duplicate IP address"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId93
	# line in RSA: Disabled node(s) '<info>' in cluster <group_object>
	else if [logstash][msgparser][id] == "msgParserId93" {
		dissect {
			mapping => { "message" => "Disabled node(s) '%{info}' in cluster %{group_object}" }
			id => "msgParserId93"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Disabled node(s)in cluster"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId94
	# line in RSA: DISPLAYNAME in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId94" {
		dissect {
			mapping => { "message" => "DISPLAYNAME in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId94"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId95
	# line in RSA: DNS lookup <hostip> (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId95" {
		dissect {
			mapping => { "message" => "DNS lookup %{hostip} (%{fld1})" }
			id => "msgParserId95"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "DNS lookup function"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Downloaded" {
		# MESSAGE 000085
		# line in RSA: Downloaded { templates | Windows } file { "<filename>" | <filename> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Downloaded[\s]+([\s]*templates[\s]+|[\s]*Windows[\s]+)[\s]+file[\s]+([\s]*\"(?<filename>[^\"]*)\"[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)$" }
				id => "message-000085"
				add_field => {
				"event_type" => "VPN"
				"saddr" => "%{hfld0}"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "downloaded file"
					"[event][id]" => "000085"
					"[rsa][message][id1]" => "000085"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000086
		# line in RSA: Downloaded file(s) <filename> from <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Downloaded file(s) %{filename} from %{fld21}" }
				id => "message-000086"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "downloaded file"
					"[event][id]" => "000086"
					"[rsa][message][id1]" => "000086"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000087
		# line in RSA: Downloaded new CRL (<bytes> bytes) from '<url>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Downloaded new CRL (%{bytes} bytes) from '%{url}'" }
				id => "message-000087"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Downloaded new CRL"
					"[event][id]" => "000087"
					"[rsa][message][id1]" => "000087"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000487
		# line in RSA: Downloaded system software package.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Downloaded system software package." }
				id => "message-000487"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Downloaded system software package"
					"[event][id]" => "000487"
					"[rsa][message][id1]" => "000487"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000687
		# line in RSA: Downloaded Identical CRL (<bytes> bytes) from '<url>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Downloaded Identical CRL (%{bytes} bytes) from '%{url}'" }
				id => "message-000687"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Downloaded Identical CRL"
					"[event][id]" => "000687"
					"[rsa][message][id1]" => "000687"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "DSID" {
		# MESSAGE 000088
		# line in RSA: DSID will not be included in any URLs to maximize security
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DSID will not be included in any URLs to maximize security" }
				id => "message-000088"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000088"
					"[rsa][message][id1]" => "000088"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000491
		# line in RSA: DSID will be included in Java related URLs for Safari and some versions of Mozilla browsers to maximize usability
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DSID will be included in Java related URLs for Safari and some versions of Mozilla browsers to maximize usability" }
				id => "message-000491"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Allowed SSL and TLS"
					"[event][id]" => "000491"
					"[rsa][message][id1]" => "000491"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId103
	# line in RSA: Duplicated <obj_type> profile "<obj_name>"
	else if [logstash][msgparser][id] == "msgParserId103" {
		dissect {
			mapping => { "message" => "Duplicated %{obj_type} profile \"%{obj_name}\"" }
			id => "msgParserId103"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Duplicated profile"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Enabled" {
		# MESSAGE 000090
		# line in RSA: Enabled <obj_type> for [<dhost>:<dport>] in terminal services profile '<obj_name>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Enabled %{obj_type} for [%{dhost}:%{dport}] in terminal services profile '%{obj_name}'" }
				id => "message-000090"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "enabled Terminal server function"
					"[event][id]" => "000090"
					"[rsa][message][id1]" => "000090"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000091
		# line in RSA: Enabled <obj_type> in  Application profile "<obj_name>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Enabled %{obj_type} in  Application profile \"%{obj_name}\"" }
				id => "message-000091"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Enabled SAM ACL in  Application profile"
					"[event][id]" => "000091"
					"[rsa][message][id1]" => "000091"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Enabled:01
		# line in RSA: Enabled node(s) '<fld1>' in cluster <parent_node>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Enabled node(s) '%{fld1}' in cluster %{parent_node}" }
				id => "message-Enabled:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Enabled node in cluster"
					"[event][id]" => "Enabled:01"
					"[rsa][message][id1]" => "Enabled:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Endpoint" {
		# MESSAGE 000092
		# line in RSA: Endpoint Assurance: [InitializeEngine] Initializing TNCS....
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Endpoint Assurance: [InitializeEngine] Initializing TNCS...." }
				id => "message-000092"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Endpoint Assurance InitializeEngine Initializing TNCS...."
					"[event][id]" => "000092"
					"[rsa][message][id1]" => "000092"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000093
		# line in RSA: Endpoint Assurance: [Connection ID: <fld1>] NotifyConnectionChange returned error.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Endpoint Assurance: [Connection ID: %{fld1}] NotifyConnectionChange returned error." }
				id => "message-000093"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "NotifyConnectionChange returned error"
					"[event][id]" => "000093"
					"[rsa][message][id1]" => "000093"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId109
	# line in RSA: ENDPOINT_HEARTBEAT_INTERVAL in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId109" {
		dissect {
			mapping => { "message" => "ENDPOINT_HEARTBEAT_INTERVAL in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId109"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "ENDPOINT_HEARTBEAT_INTERVAL in Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId110
	# line in RSA: ENDPOINT_HEARTBEAT_TIMEOUT in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId110" {
		dissect {
			mapping => { "message" => "ENDPOINT_HEARTBEAT_TIMEOUT in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId110"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "ENDPOINT_HEARTBEAT_TIMEOUT in Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Error" {
		# MESSAGE 000094
		# line in RSA: Error downloading CRL from '<filename>': Failed, <result>: [<fld1>] <fld2>: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error downloading CRL from '%{filename}': Failed, %{result}: [%{fld1}] %{fld2}: %{fld3}" }
				id => "message-000094"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Error downloading CRL"
					"[event][id]" => "000094"
					"[rsa][message][id1]" => "000094"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Error:01
		# line in RSA: Error downloading CRL from '<url>': <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error downloading CRL from '%{url}': %{info}" }
				id => "message-Error:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"event_description" => "Error downloading CRL"
					"[event][id]" => "Error:01"
					"[rsa][message][id1]" => "Error:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId112
	# line in RSA: ESAP package (version '<version>') {uploaded | activated | deleted | installed}.
	else if [logstash][msgparser][id] == "msgParserId112" {
		grok {
			match => { "message" => "^ESAP[\s]+package[\s]+\(version[\s]+'(?<version>[^']*)'\)[\s]+(uploaded[\s]+|[\s]*activated[\s]+|[\s]*deleted[\s]+|[\s]*installed)\.$" }
			id => "msgParserId112"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "ESAP package operation"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Exported" {
		# MESSAGE 000096
		# line in RSA: Exported sessions configuration by administrator <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Exported sessions configuration by administrator %{c_username}" }
				id => "message-000096"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "exported"
					"[event][id]" => "000096"
					"[rsa][message][id1]" => "000096"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000097
		# line in RSA: Exported log by administrator <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Exported log by administrator %{c_username}" }
				id => "message-000097"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "exported"
					"[event][id]" => "000097"
					"[rsa][message][id1]" => "000097"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000715
		# line in RSA: { Exported snapshot by administrator <c_username> | Exported snapshot by administrator}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Exported[\s]+snapshot[\s]+by[\s]+administrator[\s]+(?<c_username>[^\s]*)[\s]+|[\s]*Exported[\s]+snapshot[\s]+by[\s]+administrator)$" }
				id => "message-000715"
				add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"action" => "exported"
				"saddr" => "%{hfld0}"
					"[event][id]" => "000715"
					"[rsa][message][id1]" => "000715"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000716
		# line in RSA: { Exported ivs configuration by administrator <c_username> | Exported ivs configuration by administrator}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Exported[\s]+ivs[\s]+configuration[\s]+by[\s]+administrator[\s]+(?<c_username>[^\s]*)[\s]+|[\s]*Exported[\s]+ivs[\s]+configuration[\s]+by[\s]+administrator)$" }
				id => "message-000716"
				add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"action" => "exported"
				"saddr" => "%{hfld0}"
					"[event][id]" => "000716"
					"[rsa][message][id1]" => "000716"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000601
		# line in RSA: Exported system configuration by administrator <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Exported system configuration by administrator %{c_username}" }
				id => "message-000601"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "exported"
					"[event][id]" => "000601"
					"[rsa][message][id1]" => "000601"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000602
		# line in RSA: Exported user configuration by administrator <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Exported user configuration by administrator %{c_username}" }
				id => "message-000602"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "exported"
					"[event][id]" => "000602"
					"[rsa][message][id1]" => "000602"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000609
		# line in RSA: Exported Pulse Secure installer configuration for component set Default
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Exported Pulse Secure installer configuration for component set Default" }
				id => "message-000609"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "exported"
					"[event][id]" => "000609"
					"[rsa][message][id1]" => "000609"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId117
	# line in RSA: Extra Action in Policy '<policyname>' is modified to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId117" {
		dissect {
			mapping => { "message" => "Extra Action in Policy '%{policyname}' is modified to [%{change_new}]" }
			id => "msgParserId117"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "policy modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId118
	# line in RSA: Fail to list shares <directory> for user <c_username> with error <resultcode>.
	else if [logstash][msgparser][id] == "msgParserId118" {
		dissect {
			mapping => { "message" => "Fail to list shares %{directory} for user %{c_username} with error %{resultcode}." }
			id => "msgParserId118"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Fail to list shares for user"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Failed" {
		# MESSAGE 000101
		# line in RSA: Failed to list Windows share <directory> in <fld1> for user <c_username> with error <resultcode>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to list Windows share %{directory} in %{fld1} for user %{c_username} with error %{resultcode}." }
				id => "message-000101"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Failed to list Windows share"
					"[event][id]" => "000101"
					"[rsa][message][id1]" => "000101"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000102
		# line in RSA: <action> for '<c_username>' from IP <saddr> because <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action} for '%{c_username}' from IP %{saddr} because %{result}." }
				id => "message-000102"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000102"
					"[rsa][message][id1]" => "000102"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000103
		# line in RSA: Failed to add Windows share. <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to add Windows share. %{result}." }
				id => "message-000103"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Failed to add Windows share"
					"[event][id]" => "000103"
					"[rsa][message][id1]" => "000103"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000104
		# line in RSA: Failed to find Dfs referral on <daddr> for <directory> with error <resultcode>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to find Dfs referral on %{daddr} for %{directory} with error %{resultcode}." }
				id => "message-000104"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Failed to find Dfs Referral"
					"[event][id]" => "000104"
					"[rsa][message][id1]" => "000104"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000105
		# line in RSA: Failed to read Windows directory <directory> with error <resultcode>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to read Windows directory %{directory} with error %{resultcode}." }
				id => "message-000105"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Failed to read Windows directory"
					"[event][id]" => "000105"
					"[rsa][message][id1]" => "000105"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000106
		# line in RSA: Failed to set ACLs for user with NCIP <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to set ACLs for user with NCIP %{fld1}" }
				id => "message-000106"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Failed to set ACLs"
					"[event][id]" => "000106"
					"[rsa][message][id1]" => "000106"
					"[event][categoryid]" => "1501050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Failed:02
		# line in RSA: Failed to register with license server <hostip> - client <shost> is already registered with mid <hostid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to register with license server %{hostip} - client %{shost} is already registered with mid %{hostid}" }
				id => "message-Failed:02"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"event_description" => "Failed to register with license"
					"[event][id]" => "Failed:02"
					"[rsa][message][id1]" => "Failed:02"
					"[event][categoryid]" => "1501050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Fetch" {
		# MESSAGE 000107
		# line in RSA: Fetch Kerberos { TGT | TGS } for user <c_username>, TGT user <fld1>, realm <fld2>, host <hostname> failed: Fetch TGS fetch error: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Fetch[\s]+Kerberos[\s]+([\s]*TGT[\s]+|[\s]*TGS[\s]+)[\s]+for[\s]+user[\s]+(?<c_username>[^,]*),[\s]+TGT[\s]+user[\s]+(?<fld1>[^,]*),[\s]+realm[\s]+(?<fld2>[^,]*),[\s]+host[\s]+(?<hostname>[^\s]*)[\s]+failed:[\s]+Fetch[\s]+TGS[\s]+fetch[\s]+error:[\s]+(?<result>.*)$" }
				id => "message-000107"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Fetch TGS/TGT fetch error"
					"[event][id]" => "000107"
					"[rsa][message][id1]" => "000107"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000108
		# line in RSA: Fetch Kerberos { TGT | TGS } for user <c_username>, realm <realm> failed: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Fetch[\s]+Kerberos[\s]+([\s]*TGT[\s]+|[\s]*TGS[\s]+)[\s]+for[\s]+user[\s]+(?<c_username>[^,]*),[\s]+realm[\s]+(?<realm>[^\s]*)[\s]+failed:[\s]+(?<result>.*)$" }
				id => "message-000108"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Fetch TGS/TGT fetch error"
					"[event][id]" => "000108"
					"[rsa][message][id1]" => "000108"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId128
	# line in RSA: Finished delete past meetings. A total of <fld1> meetings are deleted.
	else if [logstash][msgparser][id] == "msgParserId128" {
		dissect {
			mapping => { "message" => "Finished delete past meetings. A total of %{fld1} meetings are deleted." }
			id => "msgParserId128"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId129
	# line in RSA: Forcing off { user <c_username>/<fld1> | user <c_username>(<fld1>) }
	else if [logstash][msgparser][id] == "msgParserId129" {
		grok {
			match => { "message" => "^Forcing[\s]+off[\s]+([\s]*user[\s]+(?<c_username>[^/]*)/(?<fld1>[^\s]*)[\s]+|[\s]*user[\s]+(?<c_username>[^\(]*)\((?<fld1>[^\)]*)\)[\s]+)$" }
			id => "msgParserId129"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Forcing off user"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId130
	# line in RSA: Forming cluster: '<fld1>'
	else if [logstash][msgparser][id] == "msgParserId130" {
		dissect {
			mapping => { "message" => "Forming cluster: '%{fld1}'" }
			id => "msgParserId130"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Ftp" {
		# MESSAGE 000456
		# line in RSA: Ftp <filename> to archive <url> succeeded; <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Ftp %{filename} to archive %{url} succeeded; %{info}" }
				id => "message-000456"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000456"
					"[rsa][message][id1]" => "000456"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000112
		# line in RSA: Ftp <filename> to archive <url> succeeded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Ftp %{filename} to archive %{url} succeeded" }
				id => "message-000112"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000112"
					"[rsa][message][id1]" => "000112"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "FTP" {
		# MESSAGE 000113
		# line in RSA: FTP Username changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FTP Username changed from %{change_old} to %{change_new}" }
				id => "message-000113"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "FTP Username changed"
					"[event][id]" => "000113"
					"[rsa][message][id1]" => "000113"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000114
		# line in RSA: FTP Password changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FTP Password changed" }
				id => "message-000114"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "FTP Password changed"
					"[event][id]" => "000114"
					"[rsa][message][id1]" => "000114"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "firewall" {
		# MESSAGE firewall:01
		# line in RSA: time="<fld1>" pri=<severity> fw=<fld2> vpn=<fld8> user=<username> realm=<realm> roles="<fld15>" type=<fld9> msg="<resultcode>: <event_description> for <c_username>/<fld10> from<saddr>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "time=\"%{fld1}\" pri=%{severity} fw=%{fld2} vpn=%{fld8} user=%{username} realm=%{realm} roles=\"%{fld15}\" type=%{fld9} msg=\"%{resultcode}: %{event_description} for %{c_username}/%{fld10} from%{saddr}\"" }
				id => "message-firewall:01"
				add_field => {
				"event_type" => "VPN"
					"[event][id]" => "firewall:01"
					"[rsa][message][id1]" => "firewall:01"
					"[event][categoryid]" => "1301020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE firewall:02
		# line in RSA: time="<fld1>" pri=<severity> fw=<fld2> vpn=<fld8> user=<username> realm=<realm> roles="<fld15>" type=<fld9> proto=<protocol> src=<saddr> dst=<daddr> dstname=<dhost> sent=<sbytes> rcvd=<rbytes> msg="<resultcode>: <event_description> to the device: <dclass_counter1>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "time=\"%{fld1}\" pri=%{severity} fw=%{fld2} vpn=%{fld8} user=%{username} realm=%{realm} roles=\"%{fld15}\" type=%{fld9} proto=%{protocol} src=%{saddr} dst=%{daddr} dstname=%{dhost} sent=%{sbytes} rcvd=%{rbytes} msg=\"%{resultcode}: %{event_description} to the device: %{dclass_counter1}\"" }
				id => "message-firewall:02"
				add_field => {
				"event_type" => "VPN"
					"[event][id]" => "firewall:02"
					"[rsa][message][id1]" => "firewall:02"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE firewall:03
		# line in RSA: time="<fld1>" pri=<severity> fw=<fld2> vpn=<fld8> user=<username> realm=<realm> roles="<fld15>" type=<fld9> msg="<resultcode>: <event_description> using auth server <fld6> (<fld5>).  Reason: <result>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "time=\"%{fld1}\" pri=%{severity} fw=%{fld2} vpn=%{fld8} user=%{username} realm=%{realm} roles=\"%{fld15}\" type=%{fld9} msg=\"%{resultcode}: %{event_description} using auth server %{fld6} (%{fld5}).  Reason: %{result}\"" }
				id => "message-firewall:03"
				add_field => {
				"event_type" => "VPN"
					"[event][id]" => "firewall:03"
					"[rsa][message][id1]" => "firewall:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE firewall:04
		# line in RSA: time="<fld1>" pri=<severity> fw=<fld2> vpn=<fld8> user=<username> realm=<realm> roles="<fld15>" type=<fld9> proto=<protocol> src=<saddr> dst=<daddr> dstname=<dhost> sent=<sbytes> rcvd=<rbytes> msg="<resultcode>: Archiving could not connect to '<url>', {System | Xml} Config not archived
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^time=\"(?<fld1>[^\"]*)\"[\s]+pri=(?<severity>[^\s]*)[\s]+fw=(?<fld2>[^\s]*)[\s]+vpn=(?<fld8>[^\s]*)[\s]+user=(?<username>[^\s]*)[\s]+realm=(?<realm>[^\s]*)[\s]+roles=\"(?<fld15>[^\"]*)\"[\s]+type=(?<fld9>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+dst=(?<daddr>[^\s]*)[\s]+dstname=(?<dhost>[^\s]*)[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+msg=\"(?<resultcode>[^:]*):[\s]+Archiving[\s]+could[\s]+not[\s]+connect[\s]+to[\s]+'(?<url>[^']*)',[\s]+(System[\s]+|[\s]*Xml)[\s]+Config[\s]+not[\s]+archived$" }
				id => "message-firewall:04"
				add_field => {
				"event_type" => "VPN"
					"[event][id]" => "firewall:04"
					"[rsa][message][id1]" => "firewall:04"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE firewall:05
		# line in RSA: time="<fld1>" pri=<severity> fw=<fld2> vpn=<fld8> user=<username> realm=<realm> roles="<fld15>" proto=<protocol> src=<saddr> dst=<daddr> dstname=<dhost> type=<fld9>vpn op=<web_method> arg=<url> result=<result> sent=<sbytes> rcvd=<rbytes> agent=<fld12> duration=<duration>msg="<resultcode>: <event_description> with NCIP <stransaddr>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "time=\"%{fld1}\" pri=%{severity} fw=%{fld2} vpn=%{fld8} user=%{username} realm=%{realm} roles=\"%{fld15}\" proto=%{protocol} src=%{saddr} dst=%{daddr} dstname=%{dhost} type=%{fld9}vpn op=%{web_method} arg=%{url} result=%{result} sent=%{sbytes} rcvd=%{rbytes} agent=%{fld12} duration=%{duration}msg=\"%{resultcode}: %{event_description} with NCIP %{stransaddr}\"" }
				id => "message-firewall:05"
				add_field => {
				"event_type" => "VPN"
					"[event][id]" => "firewall:05"
					"[rsa][message][id1]" => "firewall:05"
					"[event][categoryid]" => "1613040200"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE firewall
		# line in RSA: time=<fld1> fw=<fld2> pri=<severity> proto=<protocol> rule=<rulename> duration=<duration> sent=<sbytes> rcvd=<rbytes> src=<saddr> srcname=<shost> dst=<daddr> dstname=<dhost> cat_site=<fld3> cat_page=<fld4> catlevel_site=<fld5> catlevel_page=<fld6> cat_action=<fld7> user=<username> op=<web_method> arg=<url> result=<result> vpn=<fld8> type=<fld9> msg=<fld10> ref=<fld11> agent=<fld12> cache=<fld13> ivs=<fld14> realm=<realm> roles=<fld15>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "time=%{fld1} fw=%{fld2} pri=%{severity} proto=%{protocol} rule=%{rulename} duration=%{duration} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} srcname=%{shost} dst=%{daddr} dstname=%{dhost} cat_site=%{fld3} cat_page=%{fld4} catlevel_site=%{fld5} catlevel_page=%{fld6} cat_action=%{fld7} user=%{username} op=%{web_method} arg=%{url} result=%{result} vpn=%{fld8} type=%{fld9} msg=%{fld10} ref=%{fld11} agent=%{fld12} cache=%{fld13} ivs=%{fld14} realm=%{realm} roles=%{fld15}" }
				id => "message-firewall"
				add_field => {
				"event_description" => "%{fld10}"
				"event_type" => "VPN"
					"[event][id]" => "firewall"
					"[rsa][message][id1]" => "firewall"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId141
	# line in RSA: Got SAML SSO Cookie from <url>
	else if [logstash][msgparser][id] == "msgParserId141" {
		dissect {
			mapping => { "message" => "Got SAML SSO Cookie from %{url}" }
			id => "msgParserId141"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Got SAML SSO Cookie"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Host" {
		# MESSAGE 008117
		# line in RSA: Host Checker policy '<policyname>' <disposition> on host { '<saddr>' address '<smacaddr>' | <saddr> } for user '<domain>\<username>' reason '<result>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Host[\s]+Checker[\s]+policy[\s]+'(?<policyname>[^']*)'[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+host[\s]+([\s]*'(?<saddr>[^']*)'[\s]+address[\s]+'(?<smacaddr>[^']*)'[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+for[\s]+user[\s]+'(?<domain>[^\\]*)\\(?<username>[^']*)'[\s]+reason[\s]+'(?<result>[^']*)'\.$" }
				id => "message-008117"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
					"[event][id]" => "008117"
					"[rsa][message][id1]" => "008117"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 007117
		# line in RSA: Host Checker policy '<policyname>' <disposition> on host { '<saddr>' address '<smacaddr>' | <saddr> } for user '<domain>\<username>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Host[\s]+Checker[\s]+policy[\s]+'(?<policyname>[^']*)'[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+host[\s]+([\s]*'(?<saddr>[^']*)'[\s]+address[\s]+'(?<smacaddr>[^']*)'[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+for[\s]+user[\s]+'(?<domain>[^\\]*)\\(?<username>[^']*)'\.$" }
				id => "message-007117"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
					"[event][id]" => "007117"
					"[rsa][message][id1]" => "007117"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000117
		# line in RSA: Host Checker policy '<policyname>' <disposition> on host { '<saddr>' address '<smacaddr>' | <saddr> } for user { '<username>' reason '<result>'. |'<username>'. Reason: '<result>'. | '<username>'.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Host[\s]+Checker[\s]+policy[\s]+'(?<policyname>[^']*)'[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+host[\s]+([\s]*'(?<saddr>[^']*)'[\s]+address[\s]+'(?<smacaddr>[^']*)'[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+reason[\s]+'(?<result>[^']*)'\.[\s]+|'(?<username>[^']*)'\.[\s]+Reason:[\s]+'(?<result>[^']*)'\.[\s]+|[\s]*'(?<username>[^']*)'\.)$" }
				id => "message-000117"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
					"[event][id]" => "000117"
					"[rsa][message][id1]" => "000117"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 0005789
		# line in RSA: Host Checker policy '<policyname>' <disposition> on host { <saddr><space>. Reason: '<result>'. | <saddr><space>. }
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE 0005788
		# line in RSA: Host Checker realm {restrictions successfully <disposition>|restrictions <disposition>} for <c_username>/<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Host[\s]+Checker[\s]+realm[\s]+(restrictions[\s]+successfully[\s]+(?<disposition>[^\s]*)|restrictions[\s]+(?<disposition>[^\s]*))[\s]+for[\s]+(?<c_username>[^/]*)/(?<info>.*)$" }
				id => "message-0005788"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "0005788"
					"[rsa][message][id1]" => "0005788"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000579
		# line in RSA: Host Checker running on host <hostname> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Host Checker running on host %{hostname} %{event_description}" }
				id => "message-000579"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"saddr" => "%{hfld0}"
					"[event][id]" => "000579"
					"[rsa][message][id1]" => "000579"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000577:01
		# line in RSA: Host Checker restriction for realm <fld1> is <disposition> to '<event_description>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Host Checker restriction for realm %{fld1} is %{disposition} to '%{event_description}'" }
				id => "message-000577:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000577:01"
					"[rsa][message][id1]" => "000577:01"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000577
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-000577"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000577"
					"[rsa][message][id1]" => "000577"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId149
	# line in RSA: HOSTPORT.NETWORKCONNECT Policies are reordered [<info>]
	else if [logstash][msgparser][id] == "msgParserId149" {
		dissect {
			mapping => { "message" => "HOSTPORT.NETWORKCONNECT Policies are reordered [%{info}]" }
			id => "msgParserId149"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId150
	# line in RSA: IDP Sensor bwsensor1 - timestamp=[<fld6>] severity=[<fld7>] policyStr=[<fld5>] category=[<category>] protocol=[<protocol>] attackStr=[<fld1>] rulebaseStr=[<rule>] rulebaseType=[<fld2>] srcAddr=[<saddr>] srcPort=[<sport>] dstAddr=[<daddr>] dstPort=[<dport>] action=[<action>] policyVersion=[<fld3>] ruleNumber=[<fld4>]
	else if [logstash][msgparser][id] == "msgParserId150" {
		dissect {
			mapping => { "message" => "IDP Sensor bwsensor1 - timestamp=[%{fld6}] severity=[%{fld7}] policyStr=[%{fld5}] category=[%{category}] protocol=[%{protocol}] attackStr=[%{fld1}] rulebaseStr=[%{rule}] rulebaseType=[%{fld2}] srcAddr=[%{saddr}] srcPort=[%{sport}] dstAddr=[%{daddr}] dstPort=[%{dport}] action=[%{action}] policyVersion=[%{fld3}] ruleNumber=[%{fld4}]" }
			id => "msgParserId150"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "IMAP:" {
		# MESSAGE 000120
		# line in RSA: <protocol>: Receive invalid command '<web_method> <webpage> <fld1>' from '<saddr>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol}: Receive invalid command '%{web_method} %{webpage} %{fld1}' from '%{saddr}'" }
				id => "message-000120"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "IMAP - Received invalid command"
					"[event][id]" => "000120"
					"[rsa][message][id1]" => "000120"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000121
		# line in RSA: <protocol>: Cannot create client connection because <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol}: Cannot create client connection because %{result}." }
				id => "message-000121"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "IMAP - Cannot create client connection"
					"[event][id]" => "000121"
					"[rsa][message][id1]" => "000121"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId153
	# line in RSA: Imported <fld1> configuration.
	else if [logstash][msgparser][id] == "msgParserId153" {
		dissect {
			mapping => { "message" => "Imported %{fld1} configuration." }
			id => "msgParserId153"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Imported Configuration"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId154
	# line in RSA: Installed configuration pushed from <saddr>
	else if [logstash][msgparser][id] == "msgParserId154" {
		dissect {
			mapping => { "message" => "Installed configuration pushed from %{saddr}" }
			id => "msgParserId154"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Installed configuration"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Instrumentation" {
		# MESSAGE 000124
		# line in RSA: Instrumentation of uploaded file <filename> succeeded, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Instrumentation of uploaded file %{filename} succeeded, %{info}" }
				id => "message-000124"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Instrumentation of uploaded file succeeded"
					"[event][id]" => "000124"
					"[rsa][message][id1]" => "000124"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000125
		# line in RSA: Instrumentation succeeded for <fld1>, <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Instrumentation succeeded for %{fld1}, %{fld2}" }
				id => "message-000125"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000125"
					"[rsa][message][id1]" => "000125"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000126
		# line in RSA: Instrumentation failed for <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Instrumentation failed for %{fld1}" }
				id => "message-000126"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000126"
					"[rsa][message][id1]" => "000126"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId158
	# line in RSA: Instrumented archive <filename> from the container-file <fld21>
	else if [logstash][msgparser][id] == "msgParserId158" {
		dissect {
			mapping => { "message" => "Instrumented archive %{filename} from the container-file %{fld21}" }
			id => "msgParserId158"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Instrumented archive"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId159
	# line in RSA: Internal error starting CRL download.  CRL updates may be delayed.  (code=<fld1>)
	else if [logstash][msgparser][id] == "msgParserId159" {
		dissect {
			mapping => { "message" => "Internal error starting CRL download.  CRL updates may be delayed.  (code=%{fld1})" }
			id => "msgParserId159"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => " Internal error"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "internal" {
		# MESSAGE 000129
		# line in RSA: internal gateway '<saddr>' unreachable
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "internal gateway '%{saddr}' unreachable" }
				id => "message-000129"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "gateway unreachable"
					"[event][id]" => "000129"
					"[rsa][message][id1]" => "000129"
					"[event][categoryid]" => "1603030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000130
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-000130"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000130"
					"[rsa][message][id1]" => "000130"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId161
	# line in RSA: InvalidUrl: <url>
	else if [logstash][msgparser][id] == "msgParserId161" {
		dissect {
			mapping => { "message" => "InvalidUrl: %{url}" }
			id => "msgParserId161"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Invalid Url"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "IP" {
		# MESSAGE 000133
		# line in RSA: IP Address Restriction [<daddr>/<fld1>] is added to Role '<user_role>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP Address Restriction [%{daddr}/%{fld1}] is added to Role '%{user_role}'" }
				id => "message-000133"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "IP Address Restriction added to Role"
					"[event][id]" => "000133"
					"[rsa][message][id1]" => "000133"
					"[event][categoryid]" => "1501020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000134
		# line in RSA: IP Address Restriction [<daddr>/<fld1>] is deleted from Role '<user_role>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP Address Restriction [%{daddr}/%{fld1}] is deleted from Role '%{user_role}'" }
				id => "message-000134"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "IP Address Restriction deleted from Role"
					"[event][id]" => "000134"
					"[rsa][message][id1]" => "000134"
					"[event][categoryid]" => "1501030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000135
		# line in RSA: IP based matching Option in Policy '<policyname>' is modified from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP based matching Option in Policy '%{policyname}' is modified from [%{change_old}] to [%{change_new}]" }
				id => "message-000135"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "IP based matching modified"
					"[event][id]" => "000135"
					"[rsa][message][id1]" => "000135"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000136
		# line in RSA: '<c_username>' from IP <saddr> successfully created new PIN.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "'%{c_username}' from IP %{saddr} successfully created new PIN." }
				id => "message-000136"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "New PIN"
					"[event][id]" => "000136"
					"[rsa][message][id1]" => "000136"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000137
		# line in RSA: <c_username>/<fld1> from IP <saddr> { via external port authenticated | authenticated } successfully using { ACE | NT/Active directory } authentication.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<c_username>[^/]*)/(?<fld1>[^\s]*)[\s]+from[\s]+IP[\s]+(?<saddr>[^\s]*)[\s]+([\s]*via[\s]+external[\s]+port[\s]+authenticated[\s]+|[\s]*authenticated[\s]+)[\s]+successfully[\s]+using[\s]+([\s]*ACE[\s]+|[\s]*NT/Active[\s]+directory[\s]+)[\s]+authentication\.$" }
				id => "message-000137"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "success"
				"action" => "authenticated"
					"[event][id]" => "000137"
					"[rsa][message][id1]" => "000137"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000138
		# line in RSA: <c_username>/<fld1> logged out from IP (<saddr>) because user started new session from IP (<daddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{c_username}/%{fld1} logged out from IP (%{saddr}) because user started new session from IP (%{daddr})." }
				id => "message-000138"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "success"
				"action" => "user logged out"
					"[event][id]" => "000138"
					"[rsa][message][id1]" => "000138"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000139
		# line in RSA: <c_username>/<fld1> password changed successfully from IP <saddr> on <shost> auth server.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{c_username}/%{fld1} password changed successfully from IP %{saddr} on %{shost} auth server." }
				id => "message-000139"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "success"
				"action" => "password change"
					"[event][id]" => "000139"
					"[rsa][message][id1]" => "000139"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000140
		# line in RSA: <c_username>/<fld1> password change failed from IP <saddr> on <shost> auth server.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{c_username}/%{fld1} password change failed from IP %{saddr} on %{shost} auth server." }
				id => "message-000140"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "failed"
				"action" => "password change"
					"[event][id]" => "000140"
					"[rsa][message][id1]" => "000140"
					"[event][categoryid]" => "1402040101"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000141
		# line in RSA: <c_username>/<fld1> from IP <saddr> via { external | internal } port authenticated successfully using { LDAP | Local | NT/Active directory } authentication.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<c_username>[^/]*)/(?<fld1>[^\s]*)[\s]+from[\s]+IP[\s]+(?<saddr>[^\s]*)[\s]+via[\s]+([\s]*external[\s]+|[\s]*internal[\s]+)[\s]+port[\s]+authenticated[\s]+successfully[\s]+using[\s]+([\s]*LDAP[\s]+|[\s]*Local[\s]+|[\s]*NT/Active[\s]+directory[\s]+)[\s]+authentication\.$" }
				id => "message-000141"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "success"
				"action" => "authenticated"
					"[event][id]" => "000141"
					"[rsa][message][id1]" => "000141"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId171
	# line in RSA: IP/Netmask (<info>) added to the allowed IP list for the realm <group_object>
	else if [logstash][msgparser][id] == "msgParserId171" {
		dissect {
			mapping => { "message" => "IP/Netmask (%{info}) added to the allowed IP list for the realm %{group_object}" }
			id => "msgParserId171"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "IP/Netmask added"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "IVE" {
		# MESSAGE 000143
		# line in RSA: IVE Anonymous Authentication server instance { name changes from '<change_old>' to '<change_new>' | name '<fld20>' created | '<fld20>' deleted }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IVE[\s]+Anonymous[\s]+Authentication[\s]+server[\s]+instance[\s]+([\s]*name[\s]+changes[\s]+from[\s]+'(?<change_old>[^']*)'[\s]+to[\s]+'(?<change_new>[^']*)'[\s]+|[\s]*name[\s]+'(?<fld20>[^']*)'[\s]+created[\s]+|[\s]*'(?<fld20>[^']*)'[\s]+deleted[\s]+)\.$" }
				id => "message-000143"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000143"
					"[rsa][message][id1]" => "000143"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000144
		# line in RSA: IVE {Local Authentication server '<dhost>' | Certificate "<dhost>" }: <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IVE[\s]+(Local[\s]+Authentication[\s]+server[\s]+'(?<dhost>[^']*)'[\s]+|[\s]*Certificate[\s]+\"(?<dhost>[^\"]*)\"[\s]+):[\s]+(?<info>.*)$" }
				id => "message-000144"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "server policy change"
					"[event][id]" => "000144"
					"[rsa][message][id1]" => "000144"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId174
	# line in RSA: <application> in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId174" {
		dissect {
			mapping => { "message" => "%{application} in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId174"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Application modified from role"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId175
	# line in RSA: Joined cluster <group_object>
	else if [logstash][msgparser][id] == "msgParserId175" {
		dissect {
			mapping => { "message" => "Joined cluster %{group_object}" }
			id => "msgParserId175"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Joined cluster"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "JSAM" {
		# MESSAGE 000146
		# line in RSA: <application> [<fld2>] is added to Role '<user_role>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{application} [%{fld2}] is added to Role '%{user_role}'" }
				id => "message-000146"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Application added to role"
					"[event][id]" => "000146"
					"[rsa][message][id1]" => "000146"
					"[event][categoryid]" => "1501020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000147
		# line in RSA: <application> [<fld2>] is deleted from Role '<user_role>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{application} [%{fld2}] is deleted from Role '%{user_role}'" }
				id => "message-000147"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Application deleted from role"
					"[event][id]" => "000147"
					"[rsa][message][id1]" => "000147"
					"[event][categoryid]" => "1501030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000148
		# line in RSA: <application> in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{application} in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
				id => "message-000148"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Application modified from role"
					"[event][id]" => "000148"
					"[rsa][message][id1]" => "000148"
					"[event][categoryid]" => "1501030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Key" {
		# MESSAGE 000149
		# line in RSA: Key Exchange number <fld1> occured for user with NCIP <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Key Exchange number %{fld1} occured for user with NCIP %{daddr}" }
				id => "message-000149"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "key exchange"
					"[event][id]" => "000149"
					"[rsa][message][id1]" => "000149"
					"[event][categoryid]" => "1613040200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Key_01
		# line in RSA: Key Exchange number <fld1> occurred for user with NCIP <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Key Exchange number %{fld1} occurred for user with NCIP %{daddr}" }
				id => "message-Key_01"
				add_field => {
				"event_type" => "VPN"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"realm" => "%{hfld11}"
				"domain" => "%{hdomain}"
				"action" => "key exchange"
					"[event][id]" => "Key_01"
					"[rsa][message][id1]" => "Key_01"
					"[event][categoryid]" => "1613040200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "LDAP" {
		# MESSAGE 000150
		# line in RSA: LDAP server <fld1>: <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LDAP server %{fld1}: %{fld2}" }
				id => "message-000150"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000150"
					"[rsa][message][id1]" => "000150"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000151
		# line in RSA: LDAP <c_username>: Could not bind to LDAP server code=<fld1> '<result>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LDAP %{c_username}: Could not bind to LDAP server code=%{fld1} '%{result}: %{info}" }
				id => "message-000151"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "could not bind to LDAP server"
					"[event][id]" => "000151"
					"[rsa][message][id1]" => "000151"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId184
	# line in RSA: Lockout option {initial trigger of failed attempts|rate of failed attempts|lockout period} changed from <change_old> to <change_new>
	else if [logstash][msgparser][id] == "msgParserId184" {
		grok {
			match => { "message" => "^Lockout[\s]+option[\s]+(initial[\s]+trigger[\s]+of[\s]+failed[\s]+attempts|rate[\s]+of[\s]+failed[\s]+attempts|lockout[\s]+period)[\s]+changed[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>.*)$" }
			id => "msgParserId184"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "failed attempts changed"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Login" {
		# MESSAGE 000154
		# line in RSA: Login failed using auth server <fld6> { - <fld4> | <fld4> } (<fld5>).  Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Login[\s]+failed[\s]+using[\s]+auth[\s]+server[\s]+(?<fld6>[^\s]*)[\s]+([\s]*\-[\s]+(?<fld4>[^\s]*)[\s]+|[\s]*(?<fld4>[^\s]*)[\s]+)[\s]+\((?<fld5>[^\)]*)\)\.[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-000154"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "login"
					"[event][id]" => "000154"
					"[rsa][message][id1]" => "000154"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000155
		# line in RSA: Login failed {. <space> | (<info>). } Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Login[\s]+failed[\s]+(\.[\s]+(?<space>[^\s]*)[\s]+|[\s]*\((?<info>[^\)]*)\)\.[\s]+)[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-000155"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "login"
					"[event][id]" => "000155"
					"[rsa][message][id1]" => "000155"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000156
		# line in RSA: Login succeeded for <c_username>/<fld1> from <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login succeeded for %{c_username}/%{fld1} from %{fld2}" }
				id => "message-000156"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"saddr" => "%{hfld0}"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "success"
				"action" => "login"
					"[event][id]" => "000156"
					"[rsa][message][id1]" => "000156"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000157
		# line in RSA: Login failed using auth server <fld6>. <space> Reason: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed using auth server %{fld6}. %{space} Reason: %{result}" }
				id => "message-000157"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "login"
					"[event][id]" => "000157"
					"[rsa][message][id1]" => "000157"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000158
		# line in RSA: Login { from IP | from } <saddr> for <c_username>/<fld1> { New PIN | Next token } required.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Login[\s]+([\s]*from[\s]+IP[\s]+|[\s]*from[\s]+)[\s]+(?<saddr>[^\s]*)[\s]+for[\s]+(?<c_username>[^/]*)/(?<fld1>[^\s]*)[\s]+([\s]*New[\s]+PIN[\s]+|[\s]*Next[\s]+token[\s]+)[\s]+required\.$" }
				id => "message-000158"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "New PIN/token required"
				"action" => "login"
					"[event][id]" => "000158"
					"[rsa][message][id1]" => "000158"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000159
		# line in RSA: Login failed from <saddr> for <c_username>/<fld1> using ACE server.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed from %{saddr} for %{c_username}/%{fld1} using ACE server." }
				id => "message-000159"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "failed"
				"action" => "login"
					"[event][id]" => "000159"
					"[rsa][message][id1]" => "000159"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000160
		# line in RSA: Login failed from <saddr> for <c_username>/<fld1>.  All roles restricted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed from %{saddr} for %{c_username}/%{fld1}.  All roles restricted." }
				id => "message-000160"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "All roles restricted"
				"action" => "login"
					"[event][id]" => "000160"
					"[rsa][message][id1]" => "000160"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000161
		# line in RSA: Login rejected from IP <saddr> for <c_username>/<fld1>. IP address is blocked.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login rejected from IP %{saddr} for %{c_username}/%{fld1}. IP address is blocked." }
				id => "message-000161"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "Service"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "IP address is blocked"
				"action" => "Login rejected"
					"[event][id]" => "000161"
					"[rsa][message][id1]" => "000161"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000162
		# line in RSA: Login failed from <saddr> after <fld1> failed attempts. Subsequent attempts will be blocked for <duration> minutes.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed from %{saddr} after %{fld1} failed attempts. Subsequent attempts will be blocked for %{duration} minutes." }
				id => "message-000162"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "Login failure"
				"action" => "Subsequent login attempts will be blocked"
					"[event][id]" => "000162"
					"[rsa][message][id1]" => "000162"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000163
		# line in RSA: Login failed from <saddr> for <c_username>/<fld1>.  Not mapped to any roles.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed from %{saddr} for %{c_username}/%{fld1}.  Not mapped to any roles." }
				id => "message-000163"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "All roles restricted"
				"action" => "login"
					"[event][id]" => "000163"
					"[rsa][message][id1]" => "000163"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000164
		# line in RSA: Login rejected login from <saddr>. <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login rejected login from %{saddr}. %{result}" }
				id => "message-000164"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Login rejected"
					"[event][id]" => "000164"
					"[rsa][message][id1]" => "000164"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000165
		# line in RSA: Login failed from <saddr> for <c_username>/<fld1> using NT/Active service directory server.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed from %{saddr} for %{c_username}/%{fld1} using NT/Active service directory server." }
				id => "message-000165"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "All roles restricted"
				"action" => "login"
					"[event][id]" => "000165"
					"[rsa][message][id1]" => "000165"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000167
		# line in RSA: Login rejected from IP <saddr> End-users are not allowed to sign in via the management network.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login rejected from IP %{saddr} End-users are not allowed to sign in via the management network." }
				id => "message-000167"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "End-users are not allowed"
				"action" => "Login rejected"
					"[event][id]" => "000167"
					"[rsa][message][id1]" => "000167"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000168
		# line in RSA: Login failed from <saddr> for <c_username>/<fld1> Users using LDAP server.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed from %{saddr} for %{c_username}/%{fld1} Users using LDAP server." }
				id => "message-000168"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "failed"
				"action" => "login"
					"[event][id]" => "000168"
					"[rsa][message][id1]" => "000168"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000169
		# line in RSA: Login rejected from IP <saddr> for <c_username>. <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login rejected from IP %{saddr} for %{c_username}. %{result}" }
				id => "message-000169"
				add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "login"
					"[event][id]" => "000169"
					"[rsa][message][id1]" => "000169"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId200
	# line in RSA: Logout from  { <saddr> (session:<sessionid>) | <saddr> }
	else if [logstash][msgparser][id] == "msgParserId200" {
		grok {
			match => { "message" => "^Logout[\s]+from[\s]+([\s]*(?<saddr>[^\s]*)[\s]+\(session:(?<sessionid>[^\)]*)\)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)$" }
			id => "msgParserId200"
			add_field => {
				"event_type" => "VPN"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "success"
				"action" => "logout"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "management" {
		# MESSAGE 000171
		# line in RSA: management gateway '<daddr>' up.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "management gateway '%{daddr}' up." }
				id => "message-000171"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "management gateway up"
					"[event][id]" => "000171"
					"[rsa][message][id1]" => "000171"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE management
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-management"
				add_field => {
				"event_type" => "VPN"
				"username" => "%{husername}"
				"hostip" => "%{hfld0}"
				"group" => "%{hgroup}"
				"realm" => "%{hfld11}"
					"[event][id]" => "management"
					"[rsa][message][id1]" => "management"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId203
	# line in RSA: Max session timeout for <c_username>
	else if [logstash][msgparser][id] == "msgParserId203" {
		dissect {
			mapping => { "message" => "Max session timeout for %{c_username}" }
			id => "msgParserId203"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "Max"
				"action" => "session timeout"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId204
	# line in RSA: Maximum number of <fld1> session <trigger_val> reached for user <c_username>
	else if [logstash][msgparser][id] == "msgParserId204" {
		dissect {
			mapping => { "message" => "Maximum number of %{fld1} session %{trigger_val} reached for user %{c_username}" }
			id => "msgParserId204"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Maximum number sessions reached for user"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Meeting" {
		# MESSAGE 000494
		# line in RSA: Meeting '<info>' (ID: <id>) ended. Total Attendee Minutes: <duration>, Total Meeting Attendees: <fld2>, Total Data Transmitted: <bytes>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Meeting '%{info}' (ID: %{id}) ended. Total Attendee Minutes: %{duration}, Total Meeting Attendees: %{fld2}, Total Data Transmitted: %{bytes}." }
				id => "message-000494"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting notification"
					"[event][id]" => "000494"
					"[rsa][message][id1]" => "000494"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000496
		# line in RSA: Meeting '<info>' (ID: <id>) ended on schedule.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Meeting '%{info}' (ID: %{id}) ended on schedule." }
				id => "message-000496"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting notification"
					"[event][id]" => "000496"
					"[rsa][message][id1]" => "000496"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000174
		# line in RSA: Meeting '<info>' (ID: <id>) started.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Meeting '%{info}' (ID: %{id}) started." }
				id => "message-000174"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting notification"
					"[event][id]" => "000174"
					"[rsa][message][id1]" => "000174"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId208
	# line in RSA: MEETINGS feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId208" {
		dissect {
			mapping => { "message" => "MEETINGS feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId208"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId209
	# line in RSA: MEETINGS_PASSWORD_OPT in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId209" {
		dissect {
			mapping => { "message" => "MEETINGS_PASSWORD_OPT in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId209"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId210
	# line in RSA: MEETINGS_REMOTE_CONTROL in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId210" {
		dissect {
			mapping => { "message" => "MEETINGS_REMOTE_CONTROL in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId210"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId211
	# line in RSA: Mismatch HTML tag <fld1> with <fld2>
	else if [logstash][msgparser][id] == "msgParserId211" {
		dissect {
			mapping => { "message" => "Mismatch HTML tag %{fld1} with %{fld2}" }
			id => "msgParserId211"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "mismatched HTML tag"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Modified" {
		# MESSAGE 000179
		# line in RSA: Modified <obj_type> profile "<obj_name>" from allowed servers [<change_old>] to allowed servers [<change_new>].
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Modified %{obj_type} profile \"%{obj_name}\" from allowed servers [%{change_old}] to allowed servers [%{change_new}]." }
				id => "message-000179"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Modified WSAM Destination profile for allowed server"
					"[event][id]" => "000179"
					"[rsa][message][id1]" => "000179"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000180
		# line in RSA: Modified roles option in web profile '<obj_name>' from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Modified roles option in web profile '%{obj_name}' from [%{change_old}] to [%{change_new}]" }
				id => "message-000180"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "roles option modified"
					"[event][id]" => "000180"
					"[rsa][message][id1]" => "000180"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000181
		# line in RSA: Modified <obj_type> option in terminal services profile '<obj_name>' from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Modified %{obj_type} option in terminal services profile '%{obj_name}' from [%{change_old}] to [%{change_new}]" }
				id => "message-000181"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "terminal server option modified"
					"[event][id]" => "000181"
					"[rsa][message][id1]" => "000181"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000182
		# line in RSA: Modified <fld19> in <obj_type> profile { '<obj_name>' | "<obj_name>" }  from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Modified[\s]+(?<fld19>[^\s]*)[\s]+in[\s]+(?<obj_type>[^\s]*)[\s]+profile[\s]+([\s]*'(?<obj_name>[^']*)'[\s]+|[\s]*\"(?<obj_name>[^\"]*)\"[\s]+)[\s]+from[\s]+\[(?<change_old>[^\]]*)\][\s]+to[\s]+\[(?<change_new>[^\]]*)\]$" }
				id => "message-000182"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Application profile option modified"
					"[event][id]" => "000182"
					"[rsa][message][id1]" => "000182"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000183
		# line in RSA: Modified filter Registry Check
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Modified filter Registry Check" }
				id => "message-000183"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Modified filter Registry Check"
					"[event][id]" => "000183"
					"[rsa][message][id1]" => "000183"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000184
		# line in RSA: Modified <obj_type> in web profile '<obj_name>' from servers
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Modified %{obj_type} in web profile '%{obj_name}' from servers" }
				id => "message-000184"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "web profile option modified"
					"[event][id]" => "000184"
					"[rsa][message][id1]" => "000184"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000185
		# line in RSA: Modified <obj_type> in web profile '<obj_name>' from resources [<change_old>] to resources [<change_new>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Modified %{obj_type} in web profile '%{obj_name}' from resources [%{change_old}] to resources [%{change_new}]" }
				id => "message-000185"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "web profile option modified"
					"[event][id]" => "000185"
					"[rsa][message][id1]" => "000185"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000186
		# line in RSA: Modified <obj_type> in Web Profile '<obj_name>' from [<change_old>] to [<change_new>].
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Modified %{obj_type} in Web Profile '%{obj_name}' from [%{change_old}] to [%{change_new}]." }
				id => "message-000186"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "web profile option modified"
					"[event][id]" => "000186"
					"[rsa][message][id1]" => "000186"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000550
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-000550"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"hostip" => "%{hfld0}"
					"[event][id]" => "000550"
					"[rsa][message][id1]" => "000550"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId221
	# line in RSA: Name in { Policy '<policyname>' | <fld1> profile "<obj_name>" } is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId221" {
		grok {
			match => { "message" => "^Name[\s]+in[\s]+([\s]*Policy[\s]+'(?<policyname>[^']*)'[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+profile[\s]+\"(?<obj_name>[^\"]*)\"[\s]+)[\s]+is[\s]+modified[\s]+from[\s]+\[(?<change_old>[^\]]*)\][\s]+to[\s]+\[(?<change_new>[^\]]*)\]$" }
			id => "msgParserId221"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Name in Policy modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "NC" {
		# MESSAGE 000188
		# line in RSA: NC feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NC feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
				id => "message-000188"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000188"
					"[rsa][message][id1]" => "000188"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000189
		# line in RSA: NC Packet Log log has been cleared.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NC Packet Log log has been cleared." }
				id => "message-000189"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000189"
					"[rsa][message][id1]" => "000189"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Netegrity" {
		# MESSAGE 000190
		# line in RSA: Netegrity Server: Validate cookie fail for request from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Netegrity Server: Validate cookie fail for request from %{saddr}" }
				id => "message-000190"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "cookie validation error"
					"[event][id]" => "000190"
					"[rsa][message][id1]" => "000190"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000191
		# line in RSA: Netegrity authentication failed for request from <saddr> { . ErrorNum= | because } <result>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Netegrity[\s]+authentication[\s]+failed[\s]+for[\s]+request[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+([\s]*\.[\s]+ErrorNum=[\s]+|[\s]*because[\s]+)[\s]+(?<result>[^\.]*)\.$" }
				id => "message-000191"
				add_field => {
				"event_type" => "VPN"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "authentication failure"
					"[event][id]" => "000191"
					"[rsa][message][id1]" => "000191"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000192
		# line in RSA: Netegrity authentication denied. <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Netegrity authentication denied. %{result}" }
				id => "message-000192"
				add_field => {
				"event_type" => "VPN"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "authentication denied"
					"[event][id]" => "000192"
					"[rsa][message][id1]" => "000192"
					"[event][categoryid]" => "1301010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Network" {
		# MESSAGE 000461
		# line in RSA: Network Connect: Session started for user <c_username> { group <group_object> with | with } IP <saddr>, hostname <hostname> {{<fld20>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Network[\s]+Connect:[\s]+Session[\s]+started[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+([\s]*group[\s]+(?<group_object>[^\s]*)[\s]+with[\s]+|[\s]*with[\s]+)[\s]+IP[\s]+(?<saddr>[^,]*),[\s]+hostname[\s]+(?<hostname>[^\s]*)[\s]+\{(?<fld20>[^\}]*)\}$" }
				id => "message-000461"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "session started/ended"
				"action" => "connect"
					"[event][id]" => "000461"
					"[rsa][message][id1]" => "000461"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000462
		# line in RSA: Network Connect: Session started for user <c_username> { group <group_object> with | with } IP <saddr>, hostname <hostname>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Network[\s]+Connect:[\s]+Session[\s]+started[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+([\s]*group[\s]+(?<group_object>[^\s]*)[\s]+with[\s]+|[\s]*with[\s]+)[\s]+IP[\s]+(?<saddr>[^,]*),[\s]+hostname[\s]+(?<hostname>.*)$" }
				id => "message-000462"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "session started/ended"
				"action" => "connect"
					"[event][id]" => "000462"
					"[rsa][message][id1]" => "000462"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000193
		# line in RSA: Network Connect: Session started for user <c_username> { group <group_object> with | with } IP <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Network[\s]+Connect:[\s]+Session[\s]+started[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+([\s]*group[\s]+(?<group_object>[^\s]*)[\s]+with[\s]+|[\s]*with[\s]+)[\s]+IP[\s]+(?<saddr>.*)$" }
				id => "message-000193"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "session started/ended"
				"action" => "connect"
					"[event][id]" => "000193"
					"[rsa][message][id1]" => "000193"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000477
		# line in RSA: Network Connect: Session ended for user <c_username> { group <group_object> with | with } IP <saddr>, hostname <hostname> {{<fld20>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Network[\s]+Connect:[\s]+Session[\s]+ended[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+([\s]*group[\s]+(?<group_object>[^\s]*)[\s]+with[\s]+|[\s]*with[\s]+)[\s]+IP[\s]+(?<saddr>[^,]*),[\s]+hostname[\s]+(?<hostname>[^\s]*)[\s]+\{(?<fld20>[^\}]*)\}$" }
				id => "message-000477"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "session started/ended"
				"action" => "Session ended"
					"[event][id]" => "000477"
					"[rsa][message][id1]" => "000477"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000478
		# line in RSA: Network Connect: Session ended for user <c_username> { group <group_object> with | with } IP <saddr>, hostname <hostname>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Network[\s]+Connect:[\s]+Session[\s]+ended[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+([\s]*group[\s]+(?<group_object>[^\s]*)[\s]+with[\s]+|[\s]*with[\s]+)[\s]+IP[\s]+(?<saddr>[^,]*),[\s]+hostname[\s]+(?<hostname>.*)$" }
				id => "message-000478"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "session started/ended"
				"action" => "Session ended"
					"[event][id]" => "000478"
					"[rsa][message][id1]" => "000478"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000194
		# line in RSA: Network Connect: Session ended for user <c_username> { group <group_object> with | with } IP <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Network[\s]+Connect:[\s]+Session[\s]+ended[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+([\s]*group[\s]+(?<group_object>[^\s]*)[\s]+with[\s]+|[\s]*with[\s]+)[\s]+IP[\s]+(?<saddr>.*)$" }
				id => "message-000194"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "session started/ended"
				"action" => "Session ended"
					"[event][id]" => "000194"
					"[rsa][message][id1]" => "000194"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000195
		# line in RSA: Network Connect: IP address cannot be allocated to user <c_username>. Solution: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Connect: IP address cannot be allocated to user %{c_username}. Solution: %{result}" }
				id => "message-000195"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "IP address cannot be allocated to user"
					"[event][id]" => "000195"
					"[rsa][message][id1]" => "000195"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000196
		# line in RSA: Network Connect: Set <fld1> '<daddr>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Connect: Set %{fld1} '%{daddr}'" }
				id => "message-000196"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Set Server IP address"
					"[event][id]" => "000196"
					"[rsa][message][id1]" => "000196"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000197
		# line in RSA: Network Connect client-side logging option updated from "<change_old>" to "<change_new>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Connect client-side logging option updated from \"%{change_old}\" to \"%{change_new}\"" }
				id => "message-000197"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Network Connect client-side logging option updated"
					"[event][id]" => "000197"
					"[rsa][message][id1]" => "000197"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000198
		# line in RSA: Network Connect: No suitable pool / DHCP server found for user. Please check whether user's roles are mapped to any connection profiles by <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Connect: No suitable pool / DHCP server found for user. Please check whether user's roles are mapped to any connection profiles by %{fld1}" }
				id => "message-000198"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "session started/ended"
				"action" => "No suitable pool found for user"
					"[event][id]" => "000198"
					"[rsa][message][id1]" => "000198"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000200
		# line in RSA: Network Connect: DHCP : Lease expired for user <c_username> IP <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Connect: DHCP : Lease expired for user %{c_username} IP %{daddr}" }
				id => "message-000200"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Lease expired for user"
					"[event][id]" => "000200"
					"[rsa][message][id1]" => "000200"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000201
		# line in RSA: Network Connect: <c_username>: Session failover attempted with IP <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Connect: %{c_username}: Session failover attempted with IP %{daddr}" }
				id => "message-000201"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Session failover attempted with IP"
					"[event][id]" => "000201"
					"[rsa][message][id1]" => "000201"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000451
		# line in RSA: Network Connect: User with IP <hostip> connected with <protocol> transport mode.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Connect: User with IP %{hostip} connected with %{protocol} transport mode." }
				id => "message-000451"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Connection transport mode"
					"[event][id]" => "000451"
					"[rsa][message][id1]" => "000451"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000199
		# line in RSA: Network Connect: ACL count = <dclass_counter1>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Connect: ACL count = %{dclass_counter1}." }
				id => "message-000199"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "connect"
					"[event][id]" => "000199"
					"[rsa][message][id1]" => "000199"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId241
	# line in RSA: NETWORK_CONNECT_AUTO_LAUNCH in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId241" {
		dissect {
			mapping => { "message" => "NETWORK_CONNECT_AUTO_LAUNCH in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId241"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId242
	# line in RSA: NETWORK_CONNECT_AUTO_UPGRADE in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId242" {
		dissect {
			mapping => { "message" => "NETWORK_CONNECT_AUTO_UPGRADE in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId242"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId243
	# line in RSA: NETWORK_CONNECT_SPLIT_TUNNELING in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId243" {
		dissect {
			mapping => { "message" => "NETWORK_CONNECT_SPLIT_TUNNELING in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId243"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "No" {
		# MESSAGE 000205
		# line in RSA: No shares to connect to <fld1>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No shares to connect to %{fld1}." }
				id => "message-000205"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "connect fail"
					"[event][id]" => "000205"
					"[rsa][message][id1]" => "000205"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000206
		# line in RSA: No change detected in the virus { signatures | signature } list - using existing version.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^No[\s]+change[\s]+detected[\s]+in[\s]+the[\s]+virus[\s]+([\s]*signatures[\s]+|[\s]*signature[\s]+)[\s]+list[\s]+\-[\s]+using[\s]+existing[\s]+version\.$" }
				id => "message-000206"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000206"
					"[rsa][message][id1]" => "000206"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000207
		# line in RSA: No new virus { signatures lists | signature list }  available from '<url>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^No[\s]+new[\s]+virus[\s]+([\s]*signatures[\s]+lists[\s]+|[\s]*signature[\s]+list[\s]+)[\s]+available[\s]+from[\s]+'(?<url>[^']*)'\.$" }
				id => "message-000207"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "No new virus signature list available"
					"[event][id]" => "000207"
					"[rsa][message][id1]" => "000207"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000208
		# line in RSA: No change detected in the patch management data - using existing version.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No change detected in the patch management data - using existing version." }
				id => "message-000208"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000208"
					"[rsa][message][id1]" => "000208"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000581
		# line in RSA: No new patch management data available from '<url>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No new patch management data available from '%{url}'." }
				id => "message-000581"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000581"
					"[rsa][message][id1]" => "000581"
					"[event][categoryid]" => "1601000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Node" {
		# MESSAGE 000209
		# line in RSA: Node '<fld1>' { is now enabled | activated } in cluster '<group_object>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Node[\s]+'(?<fld1>[^']*)'[\s]+([\s]*is[\s]+now[\s]+enabled[\s]+|[\s]*activated[\s]+)[\s]+in[\s]+cluster[\s]+'(?<group_object>[^']*)'$" }
				id => "message-000209"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Node activated or enabled"
					"[event][id]" => "000209"
					"[rsa][message][id1]" => "000209"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000210
		# line in RSA: Node '<fld1>' { is now disabled | deactivated } in cluster '<group_object>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Node[\s]+'(?<fld1>[^']*)'[\s]+([\s]*is[\s]+now[\s]+disabled[\s]+|[\s]*deactivated[\s]+)[\s]+in[\s]+cluster[\s]+'(?<group_object>[^']*)'$" }
				id => "message-000210"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Node deactivated or disabled"
					"[event][id]" => "000210"
					"[rsa][message][id1]" => "000210"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000211
		# line in RSA: Node '<dhost>' is now reachable from node '<shost>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Node '%{dhost}' is now reachable from node '%{shost}'" }
				id => "message-000211"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Node now reachable"
					"[event][id]" => "000211"
					"[rsa][message][id1]" => "000211"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000212
		# line in RSA: Node '<dhost>' is now unreachable from node '<shost>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Node '%{dhost}' is now unreachable from node '%{shost}'" }
				id => "message-000212"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Node now unreachable"
					"[event][id]" => "000212"
					"[rsa][message][id1]" => "000212"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "NTP" {
		# MESSAGE 000213
		# line in RSA: NTP server '<daddr>' is unreachable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NTP server '%{daddr}' is unreachable." }
				id => "message-000213"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "NTP server is unreachable"
					"[event][id]" => "000213"
					"[rsa][message][id1]" => "000213"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001213
		# line in RSA: NTP server '<dhost>' is unreachable or the symmetric key provided is incorrect.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NTP server '%{dhost}' is unreachable or the symmetric key provided is incorrect." }
				id => "message-001213"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "NTP server is unreachable"
					"[event][id]" => "001213"
					"[rsa][message][id1]" => "001213"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 002213
		# line in RSA: <fld6>Z : <fld31>-<fld32>-<fld33> <fld34> - <fld35> - [<fld36>] <fld37>(<fld11>)[<fld38>] - NTP server '<dhost>' is unreachable or the symmetric key provided is incorrect.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld6}Z : %{fld31}-%{fld32}-%{fld33} %{fld34} - %{fld35} - [%{fld36}] %{fld37}(%{fld11})[%{fld38}] - NTP server '%{dhost}' is unreachable or the symmetric key provided is incorrect." }
				id => "message-002213"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "NTP server is unreachable"
					"[event][id]" => "002213"
					"[rsa][message][id1]" => "002213"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Using" {
		# MESSAGE 000719
		# line in RSA: Using secondary NTP server '<daddr>' as primary NTP server is unreachable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Using secondary NTP server '%{daddr}' as primary NTP server is unreachable." }
				id => "message-000719"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Using secondary NTP server"
					"[event][id]" => "000719"
					"[rsa][message][id1]" => "000719"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001719
		# line in RSA: <fld6>Z : <fld31>-<fld32>-<fld33> <fld34> - <fld35> - [<fld36>] <fld37>(<fld11>)[<fld38>] - Using secondary NTP server '<dhost>' as primary NTP server is unreachable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld6}Z : %{fld31}-%{fld32}-%{fld33} %{fld34} - %{fld35} - [%{fld36}] %{fld37}(%{fld11})[%{fld38}] - Using secondary NTP server '%{dhost}' as primary NTP server is unreachable." }
				id => "message-001719"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Using secondary NTP server"
					"[event][id]" => "001719"
					"[rsa][message][id1]" => "001719"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId257
	# line in RSA: IMV Log Message [Connection ID: <connectionid>] [IMV: Pulse Secure - CertAuth IMV]<result>.
	else if [logstash][msgparser][id] == "msgParserId257" {
		dissect {
			mapping => { "message" => "IMV Log Message [Connection ID: %{connectionid}] [IMV: Pulse Secure - CertAuth IMV]%{result}." }
			id => "msgParserId257"
			add_field => {
				"event_type" => "IMV Log Message"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Number" {
		# MESSAGE 000214
		# line in RSA: Number of concurrent users logged in to the {IVE | device}: <dclass_counter1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Number[\s]+of[\s]+concurrent[\s]+users[\s]+logged[\s]+in[\s]+to[\s]+the[\s]+(IVE[\s]+|[\s]*device):[\s]+(?<dclass_counter1>.*)$" }
				id => "message-000214"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "count of concurrent users"
					"[event][id]" => "000214"
					"[rsa][message][id1]" => "000214"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001214
		# line in RSA: <fld6>Z : <fld31>-<fld32>-<fld33> <fld34> - <fld35> - [<fld36>] <fld37>(<fld11>)[<fld38>] - Number of concurrent users logged in to the {IVE | device}: <dclass_counter1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld6>[^Z]*)Z[\s]+:[\s]+(?<fld31>[^\-]*)\-(?<fld32>[^\-]*)\-(?<fld33>[^\s]*)[\s]+(?<fld34>[^\s]*)[\s]+\-[\s]+(?<fld35>[^\s]*)[\s]+\-[\s]+\[(?<fld36>[^\]]*)\][\s]+(?<fld37>[^\(]*)\((?<fld11>[^\)]*)\)\[(?<fld38>[^\]]*)\][\s]+\-[\s]+Number[\s]+of[\s]+concurrent[\s]+users[\s]+logged[\s]+in[\s]+to[\s]+the[\s]+(IVE[\s]+|[\s]*device):[\s]+(?<dclass_counter1>.*)$" }
				id => "message-001214"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "count of concurrent users"
					"[event][id]" => "001214"
					"[rsa][message][id1]" => "001214"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000215
		# line in RSA: Number of concurrent mail users logged in to the email proxy: <dclass_counter2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Number of concurrent mail users logged in to the email proxy: %{dclass_counter2}" }
				id => "message-000215"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "count mail users"
					"[event][id]" => "000215"
					"[rsa][message][id1]" => "000215"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001215
		# line in RSA: <fld6>Z : <fld31>-<fld32>-<fld33> <fld34> - <fld35> - [<fld36>] <fld37>(<fld11>)[<fld38>] - Number of concurrent mail users logged in to the email proxy: <dclass_counter2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld6}Z : %{fld31}-%{fld32}-%{fld33} %{fld34} - %{fld35} - [%{fld36}] %{fld37}(%{fld11})[%{fld38}] - Number of concurrent mail users logged in to the email proxy: %{dclass_counter2}" }
				id => "message-001215"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "count mail users"
					"[event][id]" => "001215"
					"[rsa][message][id1]" => "001215"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000488
		# line in RSA: Number of <fld5> connections: <dclass_counter1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Number of %{fld5} connections: %{dclass_counter1}" }
				id => "message-000488"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Number of connections"
				"a" => "Number of "
				"b" => " connections"
					"[event][id]" => "000488"
					"[rsa][message][id1]" => "000488"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001488
		# line in RSA: Number of concurrent users (<fld5>) exceeded the system limit (<fld6>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Number of concurrent users (%{fld5}) exceeded the system limit (%{fld6})." }
				id => "message-001488"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Number of concurrent users"
					"[event][id]" => "001488"
					"[rsa][message][id1]" => "001488"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 002488
		# line in RSA: <fld6>Z : <fld31>-<fld32>-<fld33> <fld34> - <fld35> - [<fld36>] <fld37>(<fld11>)[<fld38>] - Number of <fld15> connections: <fld16>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld6}Z : %{fld31}-%{fld32}-%{fld33} %{fld34} - %{fld35} - [%{fld36}] %{fld37}(%{fld11})[%{fld38}] - Number of %{fld15} connections: %{fld16}" }
				id => "message-002488"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Number of connections"
					"[event][id]" => "002488"
					"[rsa][message][id1]" => "002488"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId265
	# line in RSA: One of the mirror drives has been removed
	else if [logstash][msgparser][id] == "msgParserId265" {
		dissect {
			mapping => { "message" => "One of the mirror drives has been removed" }
			id => "msgParserId265"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "drive removed"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId266
	# line in RSA: Opened terminal applet window to { telnet | ssh }:{ //<daddr>:<dport> (<fld1>) | //<daddr>:<dport> }
	else if [logstash][msgparser][id] == "msgParserId266" {
		grok {
			match => { "message" => "^Opened[\s]+terminal[\s]+applet[\s]+window[\s]+to[\s]+([\s]*telnet[\s]+|[\s]*ssh[\s]+):([\s]*//(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*//(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+)$" }
			id => "msgParserId266"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "opened applet"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId267
	# line in RSA: Opening <protocol> connection to <daddr>:{ <dport> as <c_username> | <dport>}
	else if [logstash][msgparser][id] == "msgParserId267" {
		grok {
			match => { "message" => "^Opening[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+to[\s]+(?<daddr>[^:]*):([\s]*(?<dport>[^\s]*)[\s]+as[\s]+(?<c_username>[^\s]*)[\s]+|[\s]*(?<dport>.*))$" }
			id => "msgParserId267"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId268
	# line in RSA: Outbound <network_service> Agent lost connection at host: <saddr>, port: <sport>
	else if [logstash][msgparser][id] == "msgParserId268" {
		dissect {
			mapping => { "message" => "Outbound %{network_service} Agent lost connection at host: %{saddr}, port: %{sport}" }
			id => "msgParserId268"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => " Outbound Agent lost connection at host"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Password" {
		# MESSAGE 000219
		# line in RSA: Password realm restrictions failed for <c_username>/<fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Password realm restrictions failed for %{c_username}/%{fld20}" }
				id => "message-000219"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "real restrictions"
				"action" => "failed"
					"[event][id]" => "000219"
					"[rsa][message][id1]" => "000219"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000220
		# line in RSA: Password realm restrictions successfully passed for { <c_username>\<fld1> | <fld1> } /<fld2> <fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Password[\s]+realm[\s]+restrictions[\s]+successfully[\s]+passed[\s]+for[\s]+([\s]*(?<c_username>[^\\]*)\\(?<fld1>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)[\s]+/(?<fld2>[^\s]*)[\s]+(?<fld3>.*)$" }
				id => "message-000220"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "realm restrictions"
				"action" => "successfull"
					"[event][id]" => "000220"
					"[rsa][message][id1]" => "000220"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Password
		# line in RSA: Password realm restrictions successfully passed for <c_username>/<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Password realm restrictions successfully passed for %{c_username}/%{fld2}" }
				id => "message-Password"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "realm restrictions"
				"action" => "successfull"
					"[event][id]" => "Password"
					"[rsa][message][id1]" => "Password"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000458
		# line in RSA: Password restriction for realm '<realm>' is Enabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Password restriction for realm '%{realm}' is Enabled" }
				id => "message-000458"
				add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "realm restriction Enabled"
				"action" => "Password Restriction Enabled"
					"[event][id]" => "000458"
					"[rsa][message][id1]" => "000458"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000787
		# line in RSA: Password change failed for user <domain>\<c_username>/<fld1>. Reason : <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Password change failed for user %{domain}\%{c_username}/%{fld1}. Reason : %{result}" }
				id => "message-000787"
				add_field => {
				"ec_subject" => "Password"
				"ec_activity" => "Modify"
				"ec_outcome" => "Failure"
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Password change failed"
					"[event][id]" => "000787"
					"[rsa][message][id1]" => "000787"
					"[event][categoryid]" => "1402040101"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "password" {
		# MESSAGE 000221
		# line in RSA: <c_username> password change failed on <hostname> auth server.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{c_username} password change failed on %{hostname} auth server." }
				id => "message-000221"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "password change failed"
					"[event][id]" => "000221"
					"[rsa][message][id1]" => "000221"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000222
		# line in RSA: <c_username> password changed successfully on <hostname> auth server.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{c_username} password changed successfully on %{hostname} auth server." }
				id => "message-000222"
				add_field => {
				"ec_subject" => "Password"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "password change successful"
					"[event][id]" => "000222"
					"[rsa][message][id1]" => "000222"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId276
	# line in RSA: Ping host <hostip>
	else if [logstash][msgparser][id] == "msgParserId276" {
		dissect {
			mapping => { "message" => "Ping host %{hostip}" }
			id => "msgParserId276"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Policy" {
		# MESSAGE 000224
		# line in RSA: Policy '<policyname>' is duplicated from '<info>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy '%{policyname}' is duplicated from '%{info}'" }
				id => "message-000224"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Policy duplicated"
					"[event][id]" => "000224"
					"[rsa][message][id1]" => "000224"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000225
		# line in RSA: Policy '<policyname>' is created
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy '%{policyname}' is created" }
				id => "message-000225"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000225"
					"[rsa][message][id1]" => "000225"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000226
		# line in RSA: Policy Trace log is nearly full, currently <fld1> full
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy Trace log is nearly full, currently %{fld1} full" }
				id => "message-000226"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000226"
					"[rsa][message][id1]" => "000226"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000227
		# line in RSA: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-000227"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000227"
					"[rsa][message][id1]" => "000227"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "port" {
		# MESSAGE 000228
		# line in RSA: port <network_port> left port { got connection | is now active }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^port[\s]+(?<network_port>[^\s]*)[\s]+left[\s]+port[\s]+([\s]*got[\s]+connection[\s]+|[\s]*is[\s]+now[\s]+active[\s]+)$" }
				id => "message-000228"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000228"
					"[rsa][message][id1]" => "000228"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000229
		# line in RSA: port <network_port> gateway '<daddr>' up.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "port %{network_port} gateway '%{daddr}' up." }
				id => "message-000229"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "port is up"
					"[event][id]" => "000229"
					"[rsa][message][id1]" => "000229"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000230
		# line in RSA: port <network_port> NIC down
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "port %{network_port} NIC down" }
				id => "message-000230"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "port is down"
					"[event][id]" => "000230"
					"[rsa][message][id1]" => "000230"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId284
	# line in RSA: Presenter control given to <c_username> in meeting '<info>' (ID: <id>)
	else if [logstash][msgparser][id] == "msgParserId284" {
		dissect {
			mapping => { "message" => "Presenter control given to %{c_username} in meeting '%{info}' (ID: %{id})" }
			id => "msgParserId284"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Primary" {
		# MESSAGE 000233
		# line in RSA: Primary authentication successful for <c_username>/<fld1> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Primary authentication successful for %{c_username}/%{fld1} from %{saddr}" }
				id => "message-000233"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Primary authentication successful"
					"[event][id]" => "000233"
					"[rsa][message][id1]" => "000233"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000234
		# line in RSA: Primary authentication failed for <c_username>/<fld1> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Primary authentication failed for %{c_username}/%{fld1} from %{saddr}" }
				id => "message-000234"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Primary authentication failed"
					"[event][id]" => "000234"
					"[rsa][message][id1]" => "000234"
					"[event][categoryid]" => "1301020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId287
	# line in RSA: Push of entire configuration to target '<dhost>' (url=<url>) as part of job '<event_time_string>' finished. Result=<result>
	else if [logstash][msgparser][id] == "msgParserId287" {
		dissect {
			mapping => { "message" => "Push of entire configuration to target '%{dhost}' (url=%{url}) as part of job '%{event_time_string}' finished. Result=%{result}" }
			id => "msgParserId287"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Push of entire configuration to target finished"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "RADIUS:" {
		# MESSAGE 000468
		# line in RSA: <network_service>: Truncated request (<info>) received from <saddr>,  <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{network_service}: Truncated request (%{info}) received from %{saddr},  %{result}" }
				id => "message-000468"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Truncated request received"
					"[event][id]" => "000468"
					"[rsa][message][id1]" => "000468"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000469
		# line in RSA: <network_service>: <category> -- Authentication request received from unknown <obj_type> Client <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{network_service}: %{category} -- Authentication request received from unknown %{obj_type} Client %{saddr}" }
				id => "message-000469"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Warning - Authentication RADIUS request received from unknown Client"
					"[event][id]" => "000469"
					"[rsa][message][id1]" => "000469"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000470
		# line in RSA: <network_service>: RADIUS request received from unknown <obj_type> Client <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{network_service}: RADIUS request received from unknown %{obj_type} Client %{saddr}" }
				id => "message-000470"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "RADIUS request received from unknown Client"
					"[event][id]" => "000470"
					"[rsa][message][id1]" => "000470"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000236
		# line in RSA: RADIUS: <fld1>: Unable to retrieve server certificate information
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RADIUS: %{fld1}: Unable to retrieve server certificate information" }
				id => "message-000236"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Unable to retrieve server certificate information"
					"[event][id]" => "000236"
					"[rsa][message][id1]" => "000236"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000237
		# line in RSA: RADIUS: <fld1> configuration failure
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RADIUS: %{fld1} configuration failure" }
				id => "message-000237"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Configuration failure"
					"[event][id]" => "000237"
					"[rsa][message][id1]" => "000237"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Radius" {
		# MESSAGE 000238
		# line in RSA: Radius Server <shost>: Login failed for <c_username> because host <dhost> is unreachable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Radius Server %{shost}: Login failed for %{c_username} because host %{dhost} is unreachable." }
				id => "message-000238"
				add_field => {
				"saddr" => "%{hfld0}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Login Failed"
				"result" => "Host unreachable"
					"[event][id]" => "000238"
					"[rsa][message][id1]" => "000238"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000239
		# line in RSA: Radius server Radius Authentication: { Next Token | New Pin } Challenge Expression changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Radius[\s]+server[\s]+Radius[\s]+Authentication:[\s]+([\s]*Next[\s]+Token[\s]+|[\s]*New[\s]+Pin[\s]+)[\s]+Challenge[\s]+Expression[\s]+changed[\s]+from[\s]+'(?<change_old>[^']*)'[\s]+to[\s]+'(?<change_new>[^']*)'$" }
				id => "message-000239"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Expression Changed"
					"[event][id]" => "000239"
					"[rsa][message][id1]" => "000239"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000240
		# line in RSA: Radius server apiaxu1: Secondary server changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Radius server apiaxu1: Secondary server changed from '%{change_old}' to '%{change_new}'" }
				id => "message-000240"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Expression Changed"
					"[event][id]" => "000240"
					"[rsa][message][id1]" => "000240"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000285
		# line in RSA: <network_service>: Failed to send radius accounting <obj_type> request for <c_username>(<fld1>)[<category>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{network_service}: Failed to send radius accounting %{obj_type} request for %{c_username}(%{fld1})[%{category}]" }
				id => "message-000285"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Failed to send radius accounting request"
					"[event][id]" => "000285"
					"[rsa][message][id1]" => "000285"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000479
		# line in RSA: <network_service>: Successfully sent radius accounting <obj_type> request for <c_username>(<fld1>)[<category>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{network_service}: Successfully sent radius accounting %{obj_type} request for %{c_username}(%{fld1})[%{category}]" }
				id => "message-000479"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Successfully sent radius accounting request"
					"[event][id]" => "000479"
					"[rsa][message][id1]" => "000479"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000497
		# line in RSA: Radius authentication { was resumed | accepted} for <fld1> (realm '<realm>') from location-group '<group>' and attributes are: NAS-IP-Address = <daddr>,NAS-Port = <dport>,NAS-Port-Type = <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Radius[\s]+authentication[\s]+([\s]*was[\s]+resumed[\s]+|[\s]*accepted)[\s]+for[\s]+(?<fld1>[^\s]*)[\s]+\(realm[\s]+'(?<realm>[^']*)'\)[\s]+from[\s]+location\-group[\s]+'(?<group>[^']*)'[\s]+and[\s]+attributes[\s]+are:[\s]+NAS\-IP\-Address[\s]+=[\s]+(?<daddr>[^,]*),NAS\-Port[\s]+=[\s]+(?<dport>[^,]*),NAS\-Port\-Type[\s]+=[\s]+(?<fld2>.*)$" }
				id => "message-000497"
				add_field => {
				"event_type" => "VPN"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Radius authentication resumed/accepted"
					"[event][id]" => "000497"
					"[rsa][message][id1]" => "000497"
					"[event][categoryid]" => "1302010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000499
		# line in RSA: Radius authentication rejected for <username> (realm '<realm>') from location-group '<group>' and attributes are: NAS-IP-Address = <daddr>,NAS-Port = <dport>,NAS-Port-Type = <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Radius authentication rejected for %{username} (realm '%{realm}') from location-group '%{group}' and attributes are: NAS-IP-Address = %{daddr},NAS-Port = %{dport},NAS-Port-Type = %{fld2}" }
				id => "message-000499"
				add_field => {
				"event_type" => "VPN"
				"action" => "Radius authentication rejected"
					"[event][id]" => "000499"
					"[rsa][message][id1]" => "000499"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "RADIUS" {
		# MESSAGE RADIUS
		# line in RSA: RADIUS authentication rejected for <username> (realm '<realm>') from location-group '<group>' and attributes are: {NAS-IP-Address = <daddr>,NAS-Port = <dport>,NAS-Port-Type = <fld2>|NAS-IP-Address = <daddr>,NAS-Port = <dport>|NAS-Port = <dport>,NAS-Port-Type = <fld2>|NAS-IP-Address = <daddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RADIUS[\s]+authentication[\s]+rejected[\s]+for[\s]+(?<username>[^\s]*)[\s]+\(realm[\s]+'(?<realm>[^']*)'\)[\s]+from[\s]+location\-group[\s]+'(?<group>[^']*)'[\s]+and[\s]+attributes[\s]+are:[\s]+(NAS\-IP\-Address[\s]+=[\s]+(?<daddr>[^,]*),NAS\-Port[\s]+=[\s]+(?<dport>[^,]*),NAS\-Port\-Type[\s]+=[\s]+(?<fld2>.*)|NAS\-IP\-Address[\s]+=[\s]+(?<daddr>[^,]*),NAS\-Port[\s]+=[\s]+(?<dport>.*)|NAS\-Port[\s]+=[\s]+(?<dport>[^,]*),NAS\-Port\-Type[\s]+=[\s]+(?<fld2>.*)|NAS\-IP\-Address[\s]+=[\s]+(?<daddr>.*))$" }
				id => "message-RADIUS"
				add_field => {
				"event_type" => "VPN"
				"action" => "Radius authentication rejected"
				"saddr" => "%{hfld0}"
					"[event][id]" => "RADIUS"
					"[rsa][message][id1]" => "RADIUS"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE RADIUS:01
		# line in RSA: RADIUS {<action> Rates per <fld1> second(s): Current Rate = <fld2> Average Rate =  <fld3> Peak rate = <fld4>|Retry Statistics: Total Transactions Retried: <fld1>, Total Retry Packets: <fld2>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RADIUS[\s]+((?<action>[^\s]*)[\s]+Rates[\s]+per[\s]+(?<fld1>[^\s]*)[\s]+second\(s\):[\s]+Current[\s]+Rate[\s]+=[\s]+(?<fld2>[^\s]*)[\s]+Average[\s]+Rate[\s]+=[\s]+(?<fld3>[^\s]*)[\s]+Peak[\s]+rate[\s]+=[\s]+(?<fld4>.*)|Retry[\s]+Statistics:[\s]+Total[\s]+Transactions[\s]+Retried:[\s]+(?<fld1>[^,]*),[\s]+Total[\s]+Retry[\s]+Packets:[\s]+(?<fld2>.*))$" }
				id => "message-RADIUS:01"
				add_field => {
				"event_type" => "VPN"
				"saddr" => "%{hfld0}"
					"[event][id]" => "RADIUS:01"
					"[rsa][message][id1]" => "RADIUS:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE RADIUS:02
		# line in RSA: RADIUS authentication { was resumed | accepted} for <fld1> (realm '<realm>') from location-group '<group>' and attributes are: {NAS-IP-Address = <daddr>,NAS-Port = <dport>,NAS-Port-Type = <fld2>|NAS-Port = <dport>,NAS-Port-Type = <fld2>|NAS-IP-Address = <daddr>|NAS-Port = <dport>|NAS-Port-Type = <fld2>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RADIUS[\s]+authentication[\s]+([\s]*was[\s]+resumed[\s]+|[\s]*accepted)[\s]+for[\s]+(?<fld1>[^\s]*)[\s]+\(realm[\s]+'(?<realm>[^']*)'\)[\s]+from[\s]+location\-group[\s]+'(?<group>[^']*)'[\s]+and[\s]+attributes[\s]+are:[\s]+(NAS\-IP\-Address[\s]+=[\s]+(?<daddr>[^,]*),NAS\-Port[\s]+=[\s]+(?<dport>[^,]*),NAS\-Port\-Type[\s]+=[\s]+(?<fld2>.*)|NAS\-Port[\s]+=[\s]+(?<dport>[^,]*),NAS\-Port\-Type[\s]+=[\s]+(?<fld2>.*)|NAS\-IP\-Address[\s]+=[\s]+(?<daddr>.*)|NAS\-Port[\s]+=[\s]+(?<dport>.*)|NAS\-Port\-Type[\s]+=[\s]+(?<fld2>.*))$" }
				id => "message-RADIUS:02"
				add_field => {
				"event_type" => "VPN"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Radius authentication resumed/accepted"
				"saddr" => "%{hfld0}"
					"[event][id]" => "RADIUS:02"
					"[rsa][message][id1]" => "RADIUS:02"
					"[event][categoryid]" => "1302010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Raid" {
		# MESSAGE 000241
		# line in RSA: Raid status is Recovering
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Raid status is Recovering" }
				id => "message-000241"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "status recovering"
					"[event][id]" => "000241"
					"[rsa][message][id1]" => "000241"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Raid
		# line in RSA: Raid status is Failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Raid status is Failed" }
				id => "message-Raid"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "status failed"
					"[event][id]" => "Raid"
					"[rsa][message][id1]" => "Raid"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Realm" {
		# MESSAGE 000460
		# line in RSA: <group>: Password Expiration Warning changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{group}: Password Expiration Warning changed from '%{change_old}' to '%{change_new}'" }
				id => "message-000460"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Password Expiration Warning changed"
					"[event][id]" => "000460"
					"[rsa][message][id1]" => "000460"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000242
		# line in RSA: Realm <fld24>: { Added | Deleted } User Name role mapping rule { '<rule>': | <rule>: } user = { (<c_username>) | '<c_username>' }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Realm[\s]+(?<fld24>[^:]*):[\s]+([\s]*Added[\s]+|[\s]*Deleted[\s]+)[\s]+User[\s]+Name[\s]+role[\s]+mapping[\s]+rule[\s]+([\s]*'(?<rule>[^']*)':[\s]+|[\s]*(?<rule>[^:]*):[\s]+)[\s]+user[\s]+=[\s]+([\s]*\((?<c_username>[^\)]*)\)[\s]+|[\s]*'(?<c_username>[^']*)'[\s]+)$" }
				id => "message-000242"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role mapping change"
					"[event][id]" => "000242"
					"[rsa][message][id1]" => "000242"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000243
		# line in RSA: Realm <fld24>, rule <rule>: { Roles | Values | Stop } changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Realm[\s]+(?<fld24>[^,]*),[\s]+rule[\s]+(?<rule>[^:]*):[\s]+([\s]*Roles[\s]+|[\s]*Values[\s]+|[\s]*Stop[\s]+)[\s]+changed[\s]+from[\s]+'(?<change_old>[^']*)'[\s]+to[\s]+'(?<change_new>[^']*)'$" }
				id => "message-000243"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "values changed"
					"[event][id]" => "000243"
					"[rsa][message][id1]" => "000243"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000244
		# line in RSA: Realm <fld24>: Rule order changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Realm %{fld24}: Rule order changed" }
				id => "message-000244"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Rule order changed"
					"[event][id]" => "000244"
					"[rsa][message][id1]" => "000244"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000246
		# line in RSA: Realm <fld24>: { Added | Deleted | Detected } Group role mapping { rule: | rule '<rule>': | rule <rule>: } groups = <group_object>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Realm[\s]+(?<fld24>[^:]*):[\s]+([\s]*Added[\s]+|[\s]*Deleted[\s]+|[\s]*Detected[\s]+)[\s]+Group[\s]+role[\s]+mapping[\s]+([\s]*rule:[\s]+|[\s]*rule[\s]+'(?<rule>[^']*)':[\s]+|[\s]*rule[\s]+(?<rule>[^:]*):[\s]+)[\s]+groups[\s]+=[\s]+(?<group_object>.*)$" }
				id => "message-000246"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role mapping change"
					"[event][id]" => "000246"
					"[rsa][message][id1]" => "000246"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000247
		# line in RSA: Realm <fld24>: { Added | Deleted } Custom Expression role mapping rule: <rule>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Realm[\s]+(?<fld24>[^:]*):[\s]+([\s]*Added[\s]+|[\s]*Deleted[\s]+)[\s]+Custom[\s]+Expression[\s]+role[\s]+mapping[\s]+rule:[\s]+(?<rule>.*)$" }
				id => "message-000247"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role mapping rule change"
					"[event][id]" => "000247"
					"[rsa][message][id1]" => "000247"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000248
		# line in RSA: Realm <fld24>: { Authentication server | Directory/Attribute server | User Selects Role } changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Realm[\s]+(?<fld24>[^:]*):[\s]+([\s]*Authentication[\s]+server[\s]+|[\s]*Directory/Attribute[\s]+server[\s]+|[\s]*User[\s]+Selects[\s]+Role[\s]+)[\s]+changed[\s]+from[\s]+'(?<change_old>[^']*)'[\s]+to[\s]+'(?<change_new>[^']*)'$" }
				id => "message-000248"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "server/role change"
					"[event][id]" => "000248"
					"[rsa][message][id1]" => "000248"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000249
		# line in RSA: Realm <fld24> - Realm, rule <rule>: Rule Name changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Realm %{fld24} - Realm, rule %{rule}: Rule Name changed from '%{change_old}' to '%{change_new}'" }
				id => "message-000249"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Rule Name changed"
					"[event][id]" => "000249"
					"[rsa][message][id1]" => "000249"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000250
		# line in RSA: Realm authen realm bp two-factor: Added Attribute role mapping rule: <rule>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Realm authen realm bp two-factor: Added Attribute role mapping rule: %{rule}" }
				id => "message-000250"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role mapping rule change"
					"[event][id]" => "000250"
					"[rsa][message][id1]" => "000250"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000251
		# line in RSA: <fld24>, rule <rule>: Rule Name changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld24}, rule %{rule}: Rule Name changed from '%{change_old}' to '%{change_new}'" }
				id => "message-000251"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Realm rule change"
					"[event][id]" => "000251"
					"[rsa][message][id1]" => "000251"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000252
		# line in RSA: Realm Digipass: Added Attribute role mapping rule: <c_username>Message = '<info>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Realm Digipass: Added Attribute role mapping rule: %{c_username}Message = '%{info}'" }
				id => "message-000252"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Realm rule added"
					"[event][id]" => "000252"
					"[rsa][message][id1]" => "000252"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000254
		# line in RSA: <network_service>: Maximum Concurrent Sessions changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{network_service}: Maximum Concurrent Sessions changed from '%{change_old}' to '%{change_new}'" }
				id => "message-000254"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Maximum Concurrent Sessions changed"
					"[event][id]" => "000254"
					"[rsa][message][id1]" => "000254"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000459
		# line in RSA: <network_service>: Password Management changed from '<change_old>' to '<change_new>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{network_service}: Password Management changed from '%{change_old}' to '%{change_new}'" }
				id => "message-000459"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Password Management changed"
					"[event][id]" => "000459"
					"[rsa][message][id1]" => "000459"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Delete" {
		# MESSAGE 000245
		# line in RSA: Delete windows share <directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Delete windows share %{directory}" }
				id => "message-000245"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Delete windows share"
					"[event][id]" => "000245"
					"[rsa][message][id1]" => "000245"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000603
		# line in RSA: Delete tcpdump results
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Delete tcpdump results" }
				id => "message-000603"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Delete tcpdump results"
					"[event][id]" => "000603"
					"[rsa][message][id1]" => "000603"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId319
	# line in RSA: ReceiveMessage: <result>.
	else if [logstash][msgparser][id] == "msgParserId319" {
		dissect {
			mapping => { "message" => "ReceiveMessage: %{result}." }
			id => "msgParserId319"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "ReceiveMessage"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Received" {
		# MESSAGE 000471
		# line in RSA: Received a RADIUS Accounting Stop { request for user <c_username>, | request. } <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Received[\s]+a[\s]+RADIUS[\s]+Accounting[\s]+Stop[\s]+([\s]*request[\s]+for[\s]+user[\s]+(?<c_username>[^,]*),[\s]+|[\s]*request\.[\s]+)[\s]+(?<result>.*)$" }
				id => "message-000471"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Received a RADIUS Accounting Stop request"
					"[event][id]" => "000471"
					"[rsa][message][id1]" => "000471"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000475
		# line in RSA: Received a RADIUS Accounting Start, <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received a RADIUS Accounting Start, %{result}" }
				id => "message-000475"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Received a RADIUS Accounting Start error"
					"[event][id]" => "000475"
					"[rsa][message][id1]" => "000475"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000467
		# line in RSA: Received Netconf RPC request: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received Netconf RPC request: %{info}" }
				id => "message-000467"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Received Netconf RPC request"
					"[event][id]" => "000467"
					"[rsa][message][id1]" => "000467"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000256
		# line in RSA: Received a SAML SOAP Request from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received a SAML SOAP Request from %{saddr}" }
				id => "message-000256"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Received a SAML SOAP Request"
					"[event][id]" => "000256"
					"[rsa][message][id1]" => "000256"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000503
		# line in RSA: Received error from VMware server for method <fld1>. Error code: <resultcode>. Error message: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received error from VMware server for method %{fld1}. Error code: %{resultcode}. Error message: %{result}" }
				id => "message-000503"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Received error"
					"[event][id]" => "000503"
					"[rsa][message][id1]" => "000503"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Rejected" {
		# MESSAGE 000257
		# line in RSA: Rejected an attempt to login from  <daddr> with domainname included in username by <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Rejected an attempt to login from  %{daddr} with domainname included in username by %{c_username}" }
				id => "message-000257"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Rejected login attempt"
					"[event][id]" => "000257"
					"[rsa][message][id1]" => "000257"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Rejected:02
		# line in RSA: Rejected registration request from <shost> - expected machineid <fld1> presented machineid <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Rejected registration request from %{shost} - expected machineid %{fld1} presented machineid %{fld2}" }
				id => "message-Rejected:02"
				add_field => {
				"ec_outcome" => "Error"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"event_description" => "Rejected registration request"
					"[event][id]" => "Rejected:02"
					"[rsa][message][id1]" => "Rejected:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Remote" {
		# MESSAGE 000259
		# line in RSA: Remote address for user <c_username> changed from <saddr> to <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Remote address for user %{c_username} changed from %{saddr} to %{daddr}" }
				id => "message-000259"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Remote address change"
					"[event][id]" => "000259"
					"[rsa][message][id1]" => "000259"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000260
		# line in RSA: Remote control { given to | taken from } <c_username> in meeting '<info>' (ID: <id>).
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Remote[\s]+control[\s]+([\s]*given[\s]+to[\s]+|[\s]*taken[\s]+from[\s]+)[\s]+(?<c_username>[^\s]*)[\s]+in[\s]+meeting[\s]+'(?<info>[^']*)'[\s]+\(ID:[\s]+(?<id>[^\)]*)\)\.$" }
				id => "message-000260"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000260"
					"[rsa][message][id1]" => "000260"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId329
	# line in RSA: Request to connect to { <fld20>::<daddr> port | <daddr> port } <dport> permission denied
	else if [logstash][msgparser][id] == "msgParserId329" {
		grok {
			match => { "message" => "^Request[\s]+to[\s]+connect[\s]+to[\s]+([\s]*(?<fld20>[^:]*)::(?<daddr>[^\s]*)[\s]+port[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+port[\s]+)[\s]+(?<dport>[^\s]*)[\s]+permission[\s]+denied$" }
			id => "msgParserId329"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "connection request"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId330
	# line in RSA: Requesting user to confirm access to invalid SSL site - Host: <dhost>, Port: <dport>, Request: <web_method> <webpage> <fld1>
	else if [logstash][msgparser][id] == "msgParserId330" {
		dissect {
			mapping => { "message" => "Requesting user to confirm access to invalid SSL site - Host: %{dhost}, Port: %{dport}, Request: %{web_method} %{webpage} %{fld1}" }
			id => "msgParserId330"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId331
	# line in RSA: Resources in Policy '<policyname>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId331" {
		dissect {
			mapping => { "message" => "Resources in Policy '%{policyname}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId331"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "resources modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId332
	# line in RSA: Restarting services after import
	else if [logstash][msgparser][id] == "msgParserId332" {
		dissect {
			mapping => { "message" => "Restarting services after import" }
			id => "msgParserId332"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Services restart"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId333
	# line in RSA: RESTRICTIONS_CERT_CUSTOMIZED in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId333" {
		dissect {
			mapping => { "message" => "RESTRICTIONS_CERT_CUSTOMIZED in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId333"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId334
	# line in RSA: RESTRICTIONS_HC_CUSTOMIZED in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId334" {
		dissect {
			mapping => { "message" => "RESTRICTIONS_HC_CUSTOMIZED in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId334"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId335
	# line in RSA: RESTRICTIONS_HC_POLICIES in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId335" {
		dissect {
			mapping => { "message" => "RESTRICTIONS_HC_POLICIES in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId335"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId336
	# line in RSA: RESTRICTIONS_HC_EVALUATELOGIC in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId336" {
		dissect {
			mapping => { "message" => "RESTRICTIONS_HC_EVALUATELOGIC in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId336"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId337
	# line in RSA: RESTRICTIONS_IP_CUSTOMIZED in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId337" {
		dissect {
			mapping => { "message" => "RESTRICTIONS_IP_CUSTOMIZED in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId337"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId338
	# line in RSA: RESTRICTIONS_UA_CUSTOMIZED in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId338" {
		dissect {
			mapping => { "message" => "RESTRICTIONS_UA_CUSTOMIZED in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId338"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Role" {
		# MESSAGE 000272
		# line in RSA: Role '<user_role>' is { created | deleted }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Role[\s]+'(?<user_role>[^']*)'[\s]+is[\s]+([\s]*created[\s]+|[\s]*deleted[\s]+)$" }
				id => "message-000272"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role deleted"
					"[event][id]" => "000272"
					"[rsa][message][id1]" => "000272"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000273
		# line in RSA: Role '<user_role>' is duplicated from '<info>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Role '%{user_role}' is duplicated from '%{info}'" }
				id => "message-000273"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role duplicated"
					"[event][id]" => "000273"
					"[rsa][message][id1]" => "000273"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Roles" {
		# MESSAGE 000274
		# line in RSA: { Roles Option | Roles } in Policy '<policyname>' is modified from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Roles[\s]+Option[\s]+|[\s]*Roles[\s]+)[\s]+in[\s]+Policy[\s]+'(?<policyname>[^']*)'[\s]+is[\s]+modified[\s]+from[\s]+\[(?<change_old>[^\]]*)\][\s]+to[\s]+\[(?<change_new>[^\]]*)\]$" }
				id => "message-000274"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "roles modified"
					"[event][id]" => "000274"
					"[rsa][message][id1]" => "000274"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000275
		# line in RSA: Roles for user <c_username> on host <daddr> changed from <change_old> to { <change_new> during policy reevaluation | <change_new> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Roles[\s]+for[\s]+user[\s]+(?<c_username>[^\s]*)[\s]+on[\s]+host[\s]+(?<daddr>[^\s]*)[\s]+changed[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+([\s]*(?<change_new>[^\s]*)[\s]+during[\s]+policy[\s]+reevaluation[\s]+|[\s]*(?<change_new>[^\s]*)[\s]+)$" }
				id => "message-000275"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Roles for user changed"
					"[event][id]" => "000275"
					"[rsa][message][id1]" => "000275"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId343
	# line in RSA: Rules in Policy '<policyname>' are reordered [<fld2>]
	else if [logstash][msgparser][id] == "msgParserId343" {
		dissect {
			mapping => { "message" => "Rules in Policy '%{policyname}' are reordered [%{fld2}]" }
			id => "msgParserId343"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "policy setup"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId344
	# line in RSA: SA - <c_username> logged out from IP (<daddr>) because <result> from IP (<saddr>).
	else if [logstash][msgparser][id] == "msgParserId344" {
		dissect {
			mapping => { "message" => "SA - %{c_username} logged out from IP (%{daddr}) because %{result} from IP (%{saddr})." }
			id => "msgParserId344"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "user logged out"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId345
	# line in RSA: SAM feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId345" {
		dissect {
			mapping => { "message" => "SAM feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId345"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId346
	# line in RSA: SAM_AUTO_HOST_MAPPING in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId346" {
		dissect {
			mapping => { "message" => "SAM_AUTO_HOST_MAPPING in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId346"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId347
	# line in RSA: SAM_AUTO_LAUNCH in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId347" {
		dissect {
			mapping => { "message" => "SAM_AUTO_LAUNCH in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId347"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId348
	# line in RSA: SAM_AUTO_ALLOW_APPLICATIONS in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId348" {
		dissect {
			mapping => { "message" => "SAM_AUTO_ALLOW_APPLICATIONS in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId348"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId349
	# line in RSA: SAM_CONFIG in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId349" {
		dissect {
			mapping => { "message" => "SAM_CONFIG in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId349"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SCP" {
		# MESSAGE 000284
		# line in RSA: SCP <obj_type> to archive <filename> succeeded; <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCP %{obj_type} to archive %{filename} succeeded; %{result}" }
				id => "message-000284"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "SCP successfully logged logs to archive"
					"[event][id]" => "000284"
					"[rsa][message][id1]" => "000284"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000283
		# line in RSA: SCP { System Config | User Accounts | Xml Config } to archive <fld1> succeeded
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCP[\s]+([\s]*System[\s]+Config[\s]+|[\s]*User[\s]+Accounts[\s]+|[\s]*Xml[\s]+Config[\s]+)[\s]+to[\s]+archive[\s]+(?<fld1>[^\s]*)[\s]+succeeded$" }
				id => "message-000283"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "archive succeeded"
					"[event][id]" => "000283"
					"[rsa][message][id1]" => "000283"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Secondary" {
		# MESSAGE 000290
		# line in RSA: Secondary authentication successful for <c_username>/<fld2> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Secondary authentication successful for %{c_username}/%{fld2} from %{saddr}" }
				id => "message-000290"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "authentication successful"
					"[event][id]" => "000290"
					"[rsa][message][id1]" => "000290"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000291
		# line in RSA: Secondary authentication failed for <c_username>/<fld2> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Secondary authentication failed for %{c_username}/%{fld2} from %{saddr}" }
				id => "message-000291"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Secondary authentication failed"
					"[event][id]" => "000291"
					"[rsa][message][id1]" => "000291"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Sending" {
		# MESSAGE 000292
		# line in RSA: Sending <info> SNMP trap to <daddr>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sending %{info} SNMP trap to %{daddr}:%{dport}" }
				id => "message-000292"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "sending trap"
					"[event][id]" => "000292"
					"[rsa][message][id1]" => "000292"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000293
		# line in RSA: Sending a SAML SOAP Response to <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sending a SAML SOAP Response to %{daddr}" }
				id => "message-000293"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Sending a SAML SOAP Response"
					"[event][id]" => "000293"
					"[rsa][message][id1]" => "000293"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Sending:03
		# line in RSA: Sending cluster status: clustername= <fld1>, clusterid= <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sending cluster status: clustername= %{fld1}, clusterid= %{fld2}" }
				id => "message-Sending:03"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Sending cluster status"
					"[event][id]" => "Sending:03"
					"[rsa][message][id1]" => "Sending:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId358
	# line in RSA: Sent SAML Artifact to <url>
	else if [logstash][msgparser][id] == "msgParserId358" {
		dissect {
			mapping => { "message" => "Sent SAML Artifact to %{url}" }
			id => "msgParserId358"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Sent SAML Artifact"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId359
	# line in RSA: Service '<info>' removed
	else if [logstash][msgparser][id] == "msgParserId359" {
		dissect {
			mapping => { "message" => "Service '%{info}' removed" }
			id => "msgParserId359"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Service Removed"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Session" {
		# MESSAGE 000296
		# line in RSA: Session for user <c_username> on host <daddr> has been terminated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session for user %{c_username} on host %{daddr} has been terminated" }
				id => "message-000296"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "no error"
				"action" => "session termination"
					"[event][id]" => "000296"
					"[rsa][message][id1]" => "000296"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000297
		# line in RSA: Session timed out for {<c_username>/<fld23>(session:<sessionid>)|<c_username>/<fld23>|<c_username>} due to inactivity <info>. Idle session identified
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Session[\s]+timed[\s]+out[\s]+for[\s]+((?<c_username>[^/]*)/(?<fld23>[^\(]*)\(session:(?<sessionid>[^\)]*)\)|(?<c_username>[^/]*)/(?<fld23>[^\s]*)|(?<c_username>[^\s]*))[\s]+due[\s]+to[\s]+inactivity[\s]+(?<info>[^\.]*)\.[\s]+Idle[\s]+session[\s]+identified$" }
				id => "message-000297"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "inactivity"
				"action" => "session timed out"
					"[event][id]" => "000297"
					"[rsa][message][id1]" => "000297"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000474
		# line in RSA: Session Deletion Disconnect Message sent to RADIUS Client <c_username> for agent at <smacaddr> timed out
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session Deletion Disconnect Message sent to RADIUS Client %{c_username} for agent at %{smacaddr} timed out" }
				id => "message-000474"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "timed out"
				"action" => "Session Deletion Disconnect Message sent to RADIUS Client"
					"[event][id]" => "000474"
					"[rsa][message][id1]" => "000474"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000500
		# line in RSA: Session resumed from user agent {'<user_agent>'|<user_agent>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Session[\s]+resumed[\s]+from[\s]+user[\s]+agent[\s]+('(?<user_agent>[^']*)'|(?<user_agent>.*))$" }
				id => "message-000500"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "resumed"
				"action" => "Session resumed from user agent"
					"[event][id]" => "000500"
					"[rsa][message][id1]" => "000500"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000504
		# line in RSA: Session has already exceeded its maximum session length
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session has already exceeded its maximum session length" }
				id => "message-000504"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000504"
					"[rsa][message][id1]" => "000504"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000505
		# line in RSA: Session extended for <fld1> from {<smacaddr>.|<smacaddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Session[\s]+extended[\s]+for[\s]+(?<fld1>[^\s]*)[\s]+from[\s]+((?<smacaddr>[^\.]*)\.|(?<smacaddr>.*))$" }
				id => "message-000505"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000505"
					"[rsa][message][id1]" => "000505"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001296
		# line in RSA: Session not extended for {<c_username>/<fld2>|<c_username>} from <smacaddr> <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Session[\s]+not[\s]+extended[\s]+for[\s]+((?<c_username>[^/]*)/(?<fld2>[^\s]*)|(?<c_username>[^\s]*))[\s]+from[\s]+(?<smacaddr>[^\s]*)[\s]+(?<event_description>.*)$" }
				id => "message-001296"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "001296"
					"[rsa][message][id1]" => "001296"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId367
	# line in RSA: SESSION feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId367" {
		dissect {
			mapping => { "message" => "SESSION feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId367"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId368
	# line in RSA: SESSION_IDLE_TIMEOUT in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId368" {
		dissect {
			mapping => { "message" => "SESSION_IDLE_TIMEOUT in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId368"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId369
	# line in RSA: SESSION_MAX_TIMEOUT in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId369" {
		dissect {
			mapping => { "message" => "SESSION_MAX_TIMEOUT in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId369"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId370
	# line in RSA: SESSION_REMINDER_TIME in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId370" {
		dissect {
			mapping => { "message" => "SESSION_REMINDER_TIME in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId370"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId371
	# line in RSA: SESSION_ROAMING in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId371" {
		dissect {
			mapping => { "message" => "SESSION_ROAMING in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId371"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId372
	# line in RSA: SESSION_ROAMING_NETMASK in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId372" {
		dissect {
			mapping => { "message" => "SESSION_ROAMING_NETMASK in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId372"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Set" {
		# MESSAGE 000304
		# line in RSA: Set mail server password
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Set mail server password" }
				id => "message-000304"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Set mail server password"
					"[event][id]" => "000304"
					"[rsa][message][id1]" => "000304"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000305
		# line in RSA: Set mail server username <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Set mail server username %{c_username}" }
				id => "message-000305"
				add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Set mail server username"
					"[event][id]" => "000305"
					"[rsa][message][id1]" => "000305"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId375
	# line in RSA: SESSION_TIMEOUT_WARNING in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId375" {
		dissect {
			mapping => { "message" => "SESSION_TIMEOUT_WARNING in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId375"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Sharing" {
		# MESSAGE 000495
		# line in RSA: Sharing session for meeting '<info>' (ID: <id>) ended. Total Sharing Time: <duration>, Total Data Sent: <sbytes>, Total Data Received: <rbytes>, Total Data Transmitted: <bytes>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sharing session for meeting '%{info}' (ID: %{id}) ended. Total Sharing Time: %{duration}, Total Data Sent: %{sbytes}, Total Data Received: %{rbytes}, Total Data Transmitted: %{bytes}." }
				id => "message-000495"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000495"
					"[rsa][message][id1]" => "000495"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000307
		# line in RSA: Sharing session for meeting '<info>' (ID: <id>) started.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sharing session for meeting '%{info}' (ID: %{id}) started." }
				id => "message-000307"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000307"
					"[rsa][message][id1]" => "000307"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000308
		# line in RSA: Sharing application(s) <info> for meeting '<fld20>' (ID: <id>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sharing application(s) %{info} for meeting '%{fld20}' (ID: %{id})" }
				id => "message-000308"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000308"
					"[rsa][message][id1]" => "000308"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000309
		# line in RSA: Sharing desktop for meeting '<info>' (ID: <id>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sharing desktop for meeting '%{info}' (ID: %{id})" }
				id => "message-000309"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "sharing desktop"
					"[event][id]" => "000309"
					"[rsa][message][id1]" => "000309"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SiteMinder" {
		# MESSAGE 000310
		# line in RSA: SiteMinder <c_username> logged out from IP (<daddr>) because <result> from IP (<saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SiteMinder %{c_username} logged out from IP (%{daddr}) because %{result} from IP (%{saddr})." }
				id => "message-000310"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "user logged out"
					"[event][id]" => "000310"
					"[rsa][message][id1]" => "000310"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000311
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-000311"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000311"
					"[rsa][message][id1]" => "000311"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId381
	# line in RSA: {- <username> - <c_username>|<c_username>} logged out from IP (<daddr>) because <result> from IP (<saddr>).
	else if [logstash][msgparser][id] == "msgParserId381" {
		grok {
			match => { "message" => "^(\-[\s]+(?<username>[^\s]*)[\s]+\-[\s]+(?<c_username>[^\s]*)|(?<c_username>[^\s]*))[\s]+logged[\s]+out[\s]+from[\s]+IP[\s]+\((?<daddr>[^\)]*)\)[\s]+because[\s]+(?<result>[^\s]*)[\s]+from[\s]+IP[\s]+\((?<saddr>[^\)]*)\)\.$" }
			id => "msgParserId381"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "user logged out"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId382
	# line in RSA: SNMP trap settings for <info> turned { off | on }
	else if [logstash][msgparser][id] == "msgParserId382" {
		grok {
			match => { "message" => "^SNMP[\s]+trap[\s]+settings[\s]+for[\s]+(?<info>[^\s]*)[\s]+turned[\s]+([\s]*off[\s]+|[\s]*on[\s]+)$" }
			id => "msgParserId382"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "SNMP trap settings"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId383
	# line in RSA: SMTP: <info>
	else if [logstash][msgparser][id] == "msgParserId383" {
		dissect {
			mapping => { "message" => "SMTP: %{info}" }
			id => "msgParserId383"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SOAP" {
		# MESSAGE 000465
		# line in RSA: SOAP login succeeded for <c_username> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SOAP login succeeded for %{c_username} from %{saddr}" }
				id => "message-000465"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "success"
				"action" => "SOAP login succesful"
					"[event][id]" => "000465"
					"[rsa][message][id1]" => "000465"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000466
		# line in RSA: SOAP logout from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SOAP logout from %{saddr}" }
				id => "message-000466"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "success"
				"action" => "SOAP logout succesful"
					"[event][id]" => "000466"
					"[rsa][message][id1]" => "000466"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Source" {
		# MESSAGE 000315
		# line in RSA: Source IP realm restrictions successfully passed for <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source IP realm restrictions successfully passed for %{c_username}" }
				id => "message-000315"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "restrictions passed"
					"[event][id]" => "000315"
					"[rsa][message][id1]" => "000315"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000316
		# line in RSA: Source IP restriction for realm '<fld24>' is Enabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source IP restriction for realm '%{fld24}' is Enabled" }
				id => "message-000316"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "realm enabled"
					"[event][id]" => "000316"
					"[rsa][message][id1]" => "000316"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SSL" {
		# MESSAGE 000317
		# line in RSA: SSL negotiation failed while client at source IP '<saddr>' was trying to connect to '<daddr>'. Reason: '<result>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL negotiation failed while client at source IP '%{saddr}' was trying to connect to '%{daddr}'. Reason: '%{result}'" }
				id => "message-000317"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "SSL negotiation failed"
					"[event][id]" => "000317"
					"[rsa][message][id1]" => "000317"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001317
		# line in RSA: <fld6>Z : <fld31>-<fld32>-<fld33> <fld34> - <fld35> - [<fld36>] <fld37>(<fld11>)[<fld38>] - SSL negotiation failed while client at source IP '<saddr>' was trying to connect to '<daddr>'. Reason: '<result>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld6}Z : %{fld31}-%{fld32}-%{fld33} %{fld34} - %{fld35} - [%{fld36}] %{fld37}(%{fld11})[%{fld38}] - SSL negotiation failed while client at source IP '%{saddr}' was trying to connect to '%{daddr}'. Reason: '%{result}'" }
				id => "message-001317"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "SSL negotiation failed"
					"[event][id]" => "001317"
					"[rsa][message][id1]" => "001317"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000318
		# line in RSA: SSL connection dropped because client at source IP '<saddr>' negotiated a cipher with strength less than the configured '<fld1>' cipher strength while connecting to '<daddr>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL connection dropped because client at source IP '%{saddr}' negotiated a cipher with strength less than the configured '%{fld1}' cipher strength while connecting to '%{daddr}'" }
				id => "message-000318"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "SSL connection dropped"
				"result" => "client negotiated a cipher with strength less than the configured cipher strength"
					"[event][id]" => "000318"
					"[rsa][message][id1]" => "000318"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId391
	# line in RSA: <action>
	else if [logstash][msgparser][id] == "msgParserId391" {
		dissect {
			mapping => { "message" => "%{action}" }
			id => "msgParserId391"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Started" {
		# MESSAGE 000321
		# line in RSA: Started system software version <fld1> { Release (build <fld2>) | (build <fld3>) } successfully
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Started[\s]+system[\s]+software[\s]+version[\s]+(?<fld1>[^\s]*)[\s]+([\s]*Release[\s]+\(build[\s]+(?<fld2>[^\)]*)\)[\s]+|[\s]*\(build[\s]+(?<fld3>[^\)]*)\)[\s]+)[\s]+successfully$" }
				id => "message-000321"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000321"
					"[rsa][message][id1]" => "000321"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000322
		# line in RSA: Started { system software upgrade | syncing state }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Started[\s]+([\s]*system[\s]+software[\s]+upgrade[\s]+|[\s]*syncing[\s]+state[\s]+)$" }
				id => "message-000322"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000322"
					"[rsa][message][id1]" => "000322"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000323
		# line in RSA: Started deleting past meetings ...
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Started deleting past meetings ..." }
				id => "message-000323"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000323"
					"[rsa][message][id1]" => "000323"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Starting" {
		# MESSAGE 000463
		# line in RSA: Starting push of entire configuration to target '<dhost>' (url=<url>) as part of job '<event_time_string>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting push of entire configuration to target '%{dhost}' (url=%{url}) as part of job '%{event_time_string}'" }
				id => "message-000463"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Starting push of entire configuration to target"
					"[event][id]" => "000463"
					"[rsa][message][id1]" => "000463"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000324
		# line in RSA: Starting services: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting services: %{info}" }
				id => "message-000324"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000324"
					"[rsa][message][id1]" => "000324"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Starting
		# line in RSA: Starting <agent> session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting %{agent} session." }
				id => "message-Starting"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "Starting"
					"[rsa][message][id1]" => "Starting"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId397
	# line in RSA: Statistics Archive - <fld1> - <fld2> - <info>
	else if [logstash][msgparser][id] == "msgParserId397" {
		dissect {
			mapping => { "message" => "Statistics Archive - %{fld1} - %{fld2} - %{info}" }
			id => "msgParserId397"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Successfully" {
		# MESSAGE 000326
		# line in RSA: Successfully connected invitee <c_username> to meeting '<info>' (ID: <id>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully connected invitee %{c_username} to meeting '%{info}' (ID: %{id})." }
				id => "message-000326"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting connection"
					"[event][id]" => "000326"
					"[rsa][message][id1]" => "000326"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000327
		# line in RSA: Successfully exported configuration in XML to file '<filename>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully exported configuration in XML to file '%{filename}'" }
				id => "message-000327"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "successful configuration export"
					"[event][id]" => "000327"
					"[rsa][message][id1]" => "000327"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000328
		# line in RSA: Successfully imported configuration from XML file '<filename>' using '<fld2>' mode.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully imported configuration from XML file '%{filename}' using '%{fld2}' mode." }
				id => "message-000328"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "imported configuration"
					"[event][id]" => "000328"
					"[rsa][message][id1]" => "000328"
					"[event][categoryid]" => "1701040000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000448
		# line in RSA: Successfully opened <protocol> connection to <daddr>:<dport> (connection broker "<fld8>:<network_port>", pool "<pool_name>").
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully opened %{protocol} connection to %{daddr}:%{dport} (connection broker \"%{fld8}:%{network_port}\", pool \"%{pool_name}\")." }
				id => "message-000448"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Successfully opened connection"
					"[event][id]" => "000448"
					"[rsa][message][id1]" => "000448"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Successfully:02
		# line in RSA: Successfully registered with license server <hostip> using machineid <hostid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully registered with license server %{hostip} using machineid %{hostid}" }
				id => "message-Successfully:02"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "Successfully:02"
					"[rsa][message][id1]" => "Successfully:02"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId403
	# line in RSA: Super Admin session created using token <fld1> from <saddr>
	else if [logstash][msgparser][id] == "msgParserId403" {
		dissect {
			mapping => { "message" => "Super Admin session created using token %{fld1} from %{saddr}" }
			id => "msgParserId403"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId404
	# line in RSA: Syslog server <daddr> (<info>) { added for | removed from } { Admin Access | User Access | Events | Sensors} logs
	else if [logstash][msgparser][id] == "msgParserId404" {
		grok {
			match => { "message" => "^Syslog[\s]+server[\s]+(?<daddr>[^\s]*)[\s]+\((?<info>[^\)]*)\)[\s]+([\s]*added[\s]+for[\s]+|[\s]*removed[\s]+from[\s]+)[\s]+([\s]*Admin[\s]+Access[\s]+|[\s]*User[\s]+Access[\s]+|[\s]*Events[\s]+|[\s]*Sensors)[\s]+logs$" }
			id => "msgParserId404"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "server added or removed"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "System" {
		# MESSAGE 000331
		# line in RSA: System process detected a { Cache Cleaner | Host Checker } time out on host <daddr> for user '<c_username>'  (last update at <event_time_string>).
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+process[\s]+detected[\s]+a[\s]+([\s]*Cache[\s]+Cleaner[\s]+|[\s]*Host[\s]+Checker[\s]+)[\s]+time[\s]+out[\s]+on[\s]+host[\s]+(?<daddr>[^\s]*)[\s]+for[\s]+user[\s]+'(?<c_username>[^']*)'[\s]+\(last[\s]+update[\s]+at[\s]+(?<event_time_string>[^\)]*)\)\.$" }
				id => "message-000331"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "time out"
					"[event][id]" => "000331"
					"[rsa][message][id1]" => "000331"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000332
		# line in RSA: System error: [<fld1>] { Init | Instrument } class file error <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+error:[\s]+\[(?<fld1>[^\]]*)\][\s]+([\s]*Init[\s]+|[\s]*Instrument[\s]+)[\s]+class[\s]+file[\s]+error[\s]+(?<filename>.*)$" }
				id => "message-000332"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "file error"
					"[event][id]" => "000332"
					"[rsa][message][id1]" => "000332"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000333
		# line in RSA: System date modified to <change_new>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System date modified to %{change_new}." }
				id => "message-000333"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "system date modification"
					"[event][id]" => "000333"
					"[rsa][message][id1]" => "000333"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 001334
		# line in RSA: System software upgrade failed. <event_description>. Please disable the cluster node and retry.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System software upgrade failed. %{event_description}. Please disable the cluster node and retry." }
				id => "message-001334"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "System software upgrade failed"
					"[event][id]" => "001334"
					"[rsa][message][id1]" => "001334"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE system:01
		# line in RSA: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-system:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "System Config skipped"
					"[event][id]" => "system:01"
					"[rsa][message][id1]" => "system:01"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId410
	# line in RSA: TCPPkt: PROT=<protocol> DESTIP=<daddr> SRCPORT=<sport> DSTPORT=<dport> WINDOW=<fld1> { SYN | ACK PSH | ACK }
	else if [logstash][msgparser][id] == "msgParserId410" {
		grok {
			match => { "message" => "^TCPPkt:[\s]+PROT=(?<protocol>[^\s]*)[\s]+DESTIP=(?<daddr>[^\s]*)[\s]+SRCPORT=(?<sport>[^\s]*)[\s]+DSTPORT=(?<dport>[^\s]*)[\s]+WINDOW=(?<fld1>[^\s]*)[\s]+([\s]*SYN[\s]+|[\s]*ACK[\s]+PSH[\s]+|[\s]*ACK[\s]+)$" }
			id => "msgParserId410"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "packet status"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId411
	# line in RSA: Terminal Services Session <info>
	else if [logstash][msgparser][id] == "msgParserId411" {
		dissect {
			mapping => { "message" => "Terminal Services Session %{info}" }
			id => "msgParserId411"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Terminal Services Session"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId412
	# line in RSA: TERMINAL feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId412" {
		dissect {
			mapping => { "message" => "TERMINAL feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId412"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "The" {
		# MESSAGE 000337
		# line in RSA: The current virus { signatures | signature } list  { downloaded | imported } { successfully from '<url>' | successfully. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+current[\s]+virus[\s]+([\s]*signatures[\s]+|[\s]*signature[\s]+)[\s]+list[\s]+([\s]*downloaded[\s]+|[\s]*imported[\s]+)[\s]+([\s]*successfully[\s]+from[\s]+'(?<url>[^']*)'[\s]+|[\s]*successfully\.[\s]+)$" }
				id => "message-000337"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "current virus signatures list downloaded successfully"
					"[event][id]" => "000337"
					"[rsa][message][id1]" => "000337"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000338
		# line in RSA: The current patch management data { downloaded successfully from '<url>' | imported successfully }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+current[\s]+patch[\s]+management[\s]+data[\s]+([\s]*downloaded[\s]+successfully[\s]+from[\s]+'(?<url>[^']*)'[\s]+|[\s]*imported[\s]+successfully[\s]+)$" }
				id => "message-000338"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "current patch management data downloaded/imported successfully"
					"[event][id]" => "000338"
					"[rsa][message][id1]" => "000338"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000501
		# line in RSA: The XML request to the server [<saddr>] failed with error code [<resultcode>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The XML request to the server [%{saddr}] failed with error code [%{resultcode}]" }
				id => "message-000501"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "XML request to the server failed"
					"[event][id]" => "000501"
					"[rsa][message][id1]" => "000501"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000502
		# line in RSA: The XML request to the server [<saddr>] timed out. The current value of timeout is [<resultcode>], <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The XML request to the server [%{saddr}] timed out. The current value of timeout is [%{resultcode}], %{info}" }
				id => "message-000502"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "XML request to the server timed out"
					"[event][id]" => "000502"
					"[rsa][message][id1]" => "000502"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000512
		# line in RSA: The X.509 certificate for '<fld1>' issued by <fld2> successfully passed CRL checking
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The X.509 certificate for '%{fld1}' issued by %{fld2} successfully passed CRL checking" }
				id => "message-000512"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "The X.509 certificate successfully passed CRL checking"
					"[event][id]" => "000512"
					"[rsa][message][id1]" => "000512"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE The
		# line in RSA: The X.509 certificate for '{ CN=<user_address> | emailAddress=<user_address>, <info> }' issued by <fld11> successfully passed OCSP checking
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+X\.509[\s]+certificate[\s]+for[\s]+'([\s]*CN=(?<user_address>[^\s]*)[\s]+|[\s]*emailAddress=(?<user_address>[^,]*),[\s]+(?<info>[^\s]*)[\s]+)'[\s]+issued[\s]+by[\s]+(?<fld11>[^\s]*)[\s]+successfully[\s]+passed[\s]+OCSP[\s]+checking$" }
				id => "message-The"
				add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"action" => "Successfully passed OCSP checking"
					"[event][id]" => "The"
					"[rsa][message][id1]" => "The"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000714
		# line in RSA: The X.509 certificate for '{ CN=<user_address> | emailAddress=<user_address>, <info> }' issued by <fld11> failed in { OCSP checking; | CRL checking; Status '<resultcode>'; } Detail: '<fld10>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+X\.509[\s]+certificate[\s]+for[\s]+'([\s]*CN=(?<user_address>[^\s]*)[\s]+|[\s]*emailAddress=(?<user_address>[^,]*),[\s]+(?<info>[^\s]*)[\s]+)'[\s]+issued[\s]+by[\s]+(?<fld11>[^\s]*)[\s]+failed[\s]+in[\s]+([\s]*OCSP[\s]+checking;[\s]+|[\s]*CRL[\s]+checking;[\s]+Status[\s]+'(?<resultcode>[^']*)';[\s]+)[\s]+Detail:[\s]+'(?<fld10>[^']*)'$" }
				id => "message-000714"
				add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"action" => "Failed in checking"
					"[event][id]" => "000714"
					"[rsa][message][id1]" => "000714"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE The:01
		# line in RSA: The maximun number of sessions per user for realm '<realm>' is updated to <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The maximun number of sessions per user for realm '%{realm}' is updated to %{fld1}" }
				id => "message-The:01"
				add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"hostip" => "%{hfld0}"
				"username" => "%{husername}"
					"[event][id]" => "The:01"
					"[rsa][message][id1]" => "The:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId418
	# line in RSA: There is no MAC Address Realm associated with Location Group <obj_name>.
	else if [logstash][msgparser][id] == "msgParserId418" {
		dissect {
			mapping => { "message" => "There is no MAC Address Realm associated with Location Group %{obj_name}." }
			id => "msgParserId418"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "no MAC Address Realm associated with Location Group"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId419
	# line in RSA: Telnet/SSH Session [<fld1>] is added to Role '<user_role>'
	else if [logstash][msgparser][id] == "msgParserId419" {
		dissect {
			mapping => { "message" => "Telnet/SSH Session [%{fld1}] is added to Role '%{user_role}'" }
			id => "msgParserId419"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Role added"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Time" {
		# MESSAGE 000340
		# line in RSA: Time adjusted by <fld1> seconds.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Time adjusted by %{fld1} seconds." }
				id => "message-000340"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Time adjusted"
					"[event][id]" => "000340"
					"[rsa][message][id1]" => "000340"
					"[event][categoryid]" => "1601000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000580
		# line in RSA: Time zone changed to <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Time zone changed to %{fld1}" }
				id => "message-000580"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Time zone changed"
					"[event][id]" => "000580"
					"[rsa][message][id1]" => "000580"
					"[event][categoryid]" => "1601000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId422
	# line in RSA: Trace route to host <hostip>
	else if [logstash][msgparser][id] == "msgParserId422" {
		dissect {
			mapping => { "message" => "Trace route to host %{hostip}" }
			id => "msgParserId422"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Trace route to host"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId423
	# line in RSA: Transport mode { failed | switched } over to <protocol> for user with NCIP <daddr>
	else if [logstash][msgparser][id] == "msgParserId423" {
		grok {
			match => { "message" => "^Transport[\s]+mode[\s]+([\s]*failed[\s]+|[\s]*switched[\s]+)[\s]+over[\s]+to[\s]+(?<protocol>[^\s]*)[\s]+for[\s]+user[\s]+with[\s]+NCIP[\s]+(?<daddr>.*)$" }
			id => "msgParserId423"
			add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Transport mode failed/switched"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Turn" {
		# MESSAGE 000343
		# line in RSA: Turn { off | on } recording { for <c_username> | <space> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Turn[\s]+([\s]*off[\s]+|[\s]*on[\s]+)[\s]+recording[\s]+([\s]*for[\s]+(?<c_username>[^\s]*)[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
				id => "message-000343"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Turn recording off or on"
					"[event][id]" => "000343"
					"[rsa][message][id1]" => "000343"
					"[event][categoryid]" => "1601000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000344
		# line in RSA: Turn on tcpdump
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Turn on tcpdump" }
				id => "message-000344"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Turn on tcpdump"
					"[event][id]" => "000344"
					"[rsa][message][id1]" => "000344"
					"[event][categoryid]" => "1601000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId426
	# line in RSA: UDPPkt: PROT=<protocol> DESTIP=<daddr> SRCPORT=<sport> DSTPORT=<dport>
	else if [logstash][msgparser][id] == "msgParserId426" {
		dissect {
			mapping => { "message" => "UDPPkt: PROT=%{protocol} DESTIP=%{daddr} SRCPORT=%{sport} DSTPORT=%{dport}" }
			id => "msgParserId426"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "packet status"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId427
	# line in RSA: UI feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId427" {
		dissect {
			mapping => { "message" => "UI feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId427"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId428
	# line in RSA: UI_BROWSING_TOOLBAR in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId428" {
		dissect {
			mapping => { "message" => "UI_BROWSING_TOOLBAR in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId428"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId429
	# line in RSA: UI_CUSTOM_PAGE_URL in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId429" {
		dissect {
			mapping => { "message" => "UI_CUSTOM_PAGE_URL in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId429"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId430
	# line in RSA: UI_CUSTOM_PAGE_URL_ALLOW_SUB in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId430" {
		dissect {
			mapping => { "message" => "UI_CUSTOM_PAGE_URL_ALLOW_SUB in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId430"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId431
	# line in RSA: UI_ENABLE_HIER_MENU in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId431" {
		dissect {
			mapping => { "message" => "UI_ENABLE_HIER_MENU in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId431"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId432
	# line in RSA: UI_HEADER_BACKGROUND_COLOR in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId432" {
		dissect {
			mapping => { "message" => "UI_HEADER_BACKGROUND_COLOR in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId432"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId433
	# line in RSA: UI_HEADER_LOGO in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId433" {
		dissect {
			mapping => { "message" => "UI_HEADER_LOGO in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId433"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId434
	# line in RSA: UI_NOTIFICATION_MESSAGE in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId434" {
		dissect {
			mapping => { "message" => "UI_NOTIFICATION_MESSAGE in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId434"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId435
	# line in RSA: UI_PANEL_ORDER in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId435" {
		dissect {
			mapping => { "message" => "UI_PANEL_ORDER in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId435"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId436
	# line in RSA: UI_SHOW_COPYRIGHT in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId436" {
		dissect {
			mapping => { "message" => "UI_SHOW_COPYRIGHT in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId436"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId437
	# line in RSA: UI_SHOW_NOTIFICATION in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId437" {
		dissect {
			mapping => { "message" => "UI_SHOW_NOTIFICATION in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId437"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId438
	# line in RSA: UI_SHOW_USERNAME in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId438" {
		dissect {
			mapping => { "message" => "UI_SHOW_USERNAME in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId438"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId439
	# line in RSA: UI_START_PAGE in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId439" {
		dissect {
			mapping => { "message" => "UI_START_PAGE in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId439"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId440
	# line in RSA: UI_SUB_HEADER_BACKGROUND_COLOR in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId440" {
		dissect {
			mapping => { "message" => "UI_SUB_HEADER_BACKGROUND_COLOR in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId440"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId441
	# line in RSA: UI_SUB_HEADER_FONT_COLOR in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId441" {
		dissect {
			mapping => { "message" => "UI_SUB_HEADER_FONT_COLOR in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId441"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId442
	# line in RSA: Updating terminal bookmark <shost>
	else if [logstash][msgparser][id] == "msgParserId442" {
		dissect {
			mapping => { "message" => "Updating terminal bookmark %{shost}" }
			id => "msgParserId442"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Updating bookmark"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Uploaded" {
		# MESSAGE 000362
		# line in RSA: Uploaded Windows file <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Uploaded Windows file %{filename}" }
				id => "message-000362"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000362"
					"[rsa][message][id1]" => "000362"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000363
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-000363"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000363"
					"[rsa][message][id1]" => "000363"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Unable" {
		# MESSAGE 000364
		# line in RSA: Unable to resolve hostname: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to resolve hostname: %{hostname}" }
				id => "message-000364"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "hostname unresolved"
					"[event][id]" => "000364"
					"[rsa][message][id1]" => "000364"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000365
		# line in RSA: Unable to open connection to server <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to open connection to server %{hostname}" }
				id => "message-000365"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "unable to open connction to server"
					"[event][id]" => "000365"
					"[rsa][message][id1]" => "000365"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000366
		# line in RSA: Unable to establish SSL session with remote server <dhost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to establish SSL session with remote server %{dhost}" }
				id => "message-000366"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "unable to establish SSL session"
					"[event][id]" => "000366"
					"[rsa][message][id1]" => "000366"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000367
		# line in RSA: Unable to retrieve <web_cookie> cookie with domain '<fld1>' for <c_username>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to retrieve %{web_cookie} cookie with domain '%{fld1}' for %{c_username}." }
				id => "message-000367"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "unable to retrieve cookie"
					"[event][id]" => "000367"
					"[rsa][message][id1]" => "000367"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000368
		# line in RSA: Unable to import current virus signatures list. Reason: <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to import current virus signatures list. Reason: %{result}." }
				id => "message-000368"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Unable to import current virus signatures list"
					"[event][id]" => "000368"
					"[rsa][message][id1]" => "000368"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000369
		# line in RSA: Unable to download current virus signature list from '<info>'. Reason: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to download current virus signature list from '%{info}'. Reason: %{result}" }
				id => "message-000369"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Unable to download current virus signature list"
					"[event][id]" => "000369"
					"[rsa][message][id1]" => "000369"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000370
		# line in RSA: Unable to accept SSL connection. <space> Error= <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to accept SSL connection. %{space} Error= %{result}." }
				id => "message-000370"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Unable to accept SSL connection"
					"[event][id]" => "000370"
					"[rsa][message][id1]" => "000370"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000371
		# line in RSA: Unable to download current patch management data from '<info>'. Reason: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to download current patch management data from '%{info}'. Reason: %{result}" }
				id => "message-000371"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Unable to download current patch management data"
					"[event][id]" => "000371"
					"[rsa][message][id1]" => "000371"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000450
		# line in RSA: Unable to load desktops for <fld1>. Received error code <fld2> and user error message <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to load desktops for %{fld1}. Received error code %{fld2} and user error message %{result}." }
				id => "message-000450"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Unable to load desktops"
					"[event][id]" => "000450"
					"[rsa][message][id1]" => "000450"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Updated" {
		# MESSAGE 000372
		# line in RSA: Updated { the order of the | the } sign-in { page '<policyname>' | policy '<policyname>' | policies }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Updated[\s]+([\s]*the[\s]+order[\s]+of[\s]+the[\s]+|[\s]*the[\s]+)[\s]+sign\-in[\s]+([\s]*page[\s]+'(?<policyname>[^']*)'[\s]+|[\s]*policy[\s]+'(?<policyname>[^']*)'[\s]+|[\s]*policies[\s]+)$" }
				id => "message-000372"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "page updated"
					"[event][id]" => "000372"
					"[rsa][message][id1]" => "000372"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000373
		# line in RSA: Updated meeting { ID <id> | '<info>' } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Updated[\s]+meeting[\s]+([\s]*ID[\s]+(?<id>[^\s]*)[\s]+|[\s]*'(?<info>[^']*)'[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000373"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "meeting update"
					"[event][id]" => "000373"
					"[rsa][message][id1]" => "000373"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000374
		# line in RSA: Updated the SMTP email server configuration <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Updated the SMTP email server configuration %{info}" }
				id => "message-000374"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "email server configuration update"
					"[event][id]" => "000374"
					"[rsa][message][id1]" => "000374"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000375
		# line in RSA: Updated the bookmark <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Updated the bookmark %{url}" }
				id => "message-000375"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Bookmark updated"
					"[event][id]" => "000375"
					"[rsa][message][id1]" => "000375"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE 000376
		# line in RSA: User Accounts modified. Added <fld1> with username <c_username> to authentication server <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Accounts modified. Added %{fld1} with username %{c_username} to authentication server %{fld2}." }
				id => "message-000376"
				add_field => {
				"saddr" => "%{hfld0}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User Accounts modified"
					"[event][id]" => "000376"
					"[rsa][message][id1]" => "000376"
					"[event][categoryid]" => "1402010301"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000377
		# line in RSA: User Agent Restriction [<fld20>] is { added to | deleted from } Role '<user_role>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+Agent[\s]+Restriction[\s]+\[(?<fld20>[^\]]*)\][\s]+is[\s]+([\s]*added[\s]+to[\s]+|[\s]*deleted[\s]+from[\s]+)[\s]+Role[\s]+'(?<user_role>[^']*)'$" }
				id => "message-000377"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000377"
					"[rsa][message][id1]" => "000377"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000378
		# line in RSA: User Preferences affected. User <fld1> { disabled Autostart client-server session option | enabled Autostart client-server session option. | deleted cookies. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+Preferences[\s]+affected\.[\s]+User[\s]+(?<fld1>[^\s]*)[\s]+([\s]*disabled[\s]+Autostart[\s]+client\-server[\s]+session[\s]+option[\s]+|[\s]*enabled[\s]+Autostart[\s]+client\-server[\s]+session[\s]+option\.[\s]+|[\s]*deleted[\s]+cookies\.[\s]+)$" }
				id => "message-000378"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000378"
					"[rsa][message][id1]" => "000378"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000379
		# line in RSA: User Accounts modified. Removed username <c_username> from authentication server <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Accounts modified. Removed username %{c_username} from authentication server %{fld2}." }
				id => "message-000379"
				add_field => {
				"saddr" => "%{hfld0}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User Accounts modified"
					"[event][id]" => "000379"
					"[rsa][message][id1]" => "000379"
					"[event][categoryid]" => "1402010302"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000380
		# line in RSA: User Accounts modified. Changed password for username <c_username>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Accounts modified. Changed password for username %{c_username}." }
				id => "message-000380"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Password"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User Accounts modified"
					"[event][id]" => "000380"
					"[rsa][message][id1]" => "000380"
					"[event][categoryid]" => "1402010302"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000381
		# line in RSA: User Limit realm restrictions successfully passed for <c_username>/<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Limit realm restrictions successfully passed for %{c_username}/%{fld1}" }
				id => "message-000381"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User Limit restriction passed"
					"[event][id]" => "000381"
					"[rsa][message][id1]" => "000381"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000382
		# line in RSA: User Accounts modified. Changed full name for username <c_username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Accounts modified. Changed full name for username %{c_username}" }
				id => "message-000382"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User Accounts modified"
					"[event][id]" => "000382"
					"[rsa][message][id1]" => "000382"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000383
		# line in RSA: User account state of <c_username> is changed to Disabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User account state of %{c_username} is changed to Disabled" }
				id => "message-000383"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User Account state is changed to Disabled"
					"[event][id]" => "000383"
					"[rsa][message][id1]" => "000383"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000384
		# line in RSA: User account state of <c_username> is changed to Enabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User account state of %{c_username} is changed to Enabled" }
				id => "message-000384"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User account state is changed to Enabled"
					"[event][id]" => "000384"
					"[rsa][message][id1]" => "000384"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE User:01
		# line in RSA: User assigned RADIUS attribute(s) ({Administrators='<administrator>' Analysts='<fld1>'|Fortinet-Access-Profile='<profile>' Fortinet-Group-Name='<group>'|Juniper-Local-User-Name='<username>' Juniper-Junosspace-Profiles='<profile>'|Fortinet-Group-Name='<group>'})
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+assigned[\s]+RADIUS[\s]+attribute\(s\)[\s]+\((Administrators='(?<administrator>[^']*)'[\s]+Analysts='(?<fld1>[^']*)'|Fortinet\-Access\-Profile='(?<profile>[^']*)'[\s]+Fortinet\-Group\-Name='(?<group>[^']*)'|Juniper\-Local\-User\-Name='(?<username>[^']*)'[\s]+Juniper\-Junosspace\-Profiles='(?<profile>[^']*)'|Fortinet\-Group\-Name='(?<group>[^']*)')\)$" }
				id => "message-User:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"saddr" => "%{hfld0}"
					"[event][id]" => "User:01"
					"[rsa][message][id1]" => "User:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE User
		# line in RSA: User Accounts archive skipped since the previous User Accounts archive has not completed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Accounts archive skipped since the previous User Accounts archive has not completed" }
				id => "message-User"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User Accounts archive skipped"
					"[event][id]" => "User"
					"[rsa][message][id1]" => "User"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE User:02
		# line in RSA: User Record Synchronization [<fld1>] failed to {request|push} all data for <c_username> in <fld2> because the request could not be sent
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+Record[\s]+Synchronization[\s]+\[(?<fld1>[^\]]*)\][\s]+failed[\s]+to[\s]+(request|push)[\s]+all[\s]+data[\s]+for[\s]+(?<c_username>[^\s]*)[\s]+in[\s]+(?<fld2>[^\s]*)[\s]+because[\s]+the[\s]+request[\s]+could[\s]+not[\s]+be[\s]+sent$" }
				id => "message-User:02"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "User:02"
					"[rsa][message][id1]" => "User:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000386
		# line in RSA: User Limit realm restrictions failed for <c_username>/<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Limit realm restrictions failed for %{c_username}/%{fld1}" }
				id => "message-000386"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User Limit restriction failed"
					"[event][id]" => "000386"
					"[rsa][message][id1]" => "000386"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000387
		# line in RSA: User Access log { has been cleared | is full }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+Access[\s]+log[\s]+([\s]*has[\s]+been[\s]+cleared[\s]+|[\s]*is[\s]+full[\s]+)$" }
				id => "message-000387"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User access log activiy"
					"[event][id]" => "000387"
					"[rsa][message][id1]" => "000387"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000388
		# line in RSA: User Access log is nearly full, currently <fld1> full
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Access log is nearly full, currently %{fld1} full" }
				id => "message-000388"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "log is nearly full"
					"[event][id]" => "000388"
					"[rsa][message][id1]" => "000388"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000389
		# line in RSA: User chose to continue accessing invalid SSL site - Host: <dhost>, Port: <dport>, Request: <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User chose to continue accessing invalid SSL site - Host: %{dhost}, Port: %{dport}, Request: %{url}" }
				id => "message-000389"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "accessing invalid SSL site"
					"[event][id]" => "000389"
					"[rsa][message][id1]" => "000389"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000390
		# line in RSA: User has exceeded the limit of <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User has exceeded the limit of %{info}" }
				id => "message-000390"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User limit exceeded"
					"[event][id]" => "000390"
					"[rsa][message][id1]" => "000390"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000391
		# line in RSA: User is signing in, installing <fld1> Agent
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User is signing in, installing %{fld1} Agent" }
				id => "message-000391"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User is signing in"
					"[event][id]" => "000391"
					"[rsa][message][id1]" => "000391"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000392
		# line in RSA: User is signing in, not installing <fld1> Agent, disabled for <policyname> policy
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User is signing in, not installing %{fld1} Agent, disabled for %{policyname} policy" }
				id => "message-000392"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User is signing in"
					"[event][id]" => "000392"
					"[rsa][message][id1]" => "000392"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000393
		# line in RSA: User is signing in, not installing <fld1> Agent, unsupported browser is <user_agent>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User is signing in, not installing %{fld1} Agent, unsupported browser is %{user_agent}" }
				id => "message-000393"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User is signing in"
					"[event][id]" => "000393"
					"[rsa][message][id1]" => "000393"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000394
		# line in RSA: User is denied permission <info> with the present options
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User is denied permission %{info} with the present options" }
				id => "message-000394"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "website permission denied to user"
					"[event][id]" => "000394"
					"[rsa][message][id1]" => "000394"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000395
		# line in RSA: User <c_username> not logged in: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{c_username} not logged in: %{info}" }
				id => "message-000395"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User not logged in"
					"[event][id]" => "000395"
					"[rsa][message][id1]" => "000395"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000396
		# line in RSA: <result>.  Login rejected
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{result}.  Login rejected" }
				id => "message-000396"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Login rejected"
					"[event][id]" => "000396"
					"[rsa][message][id1]" => "000396"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000397
		# line in RSA: User '<c_username>' is accessing applet file: '<filename>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User '%{c_username}' is accessing applet file: '%{filename}'." }
				id => "message-000397"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "User access"
					"[event][id]" => "000397"
					"[rsa][message][id1]" => "000397"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000397:01
		# line in RSA: User chose to proceed on the sign-in notification page <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User chose to proceed on the sign-in notification page %{event_description}" }
				id => "message-000397:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"hostip" => "%{hfld0}"
					"[event][id]" => "000397:01"
					"[rsa][message][id1]" => "000397:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000582
		# line in RSA: User Record Synchronization [<fld1>] requested all data for <c_username> in <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Record Synchronization [%{fld1}] requested all data for %{c_username} in %{fld2}" }
				id => "message-000582"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000582"
					"[rsa][message][id1]" => "000582"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000585
		# line in RSA: User Record Synchronization [<fld1>] { received "<fld22>" | received <fld22> } from <shost> for <c_username> in <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+Record[\s]+Synchronization[\s]+\[(?<fld1>[^\]]*)\][\s]+([\s]*received[\s]+\"(?<fld22>[^\"]*)\"[\s]+|[\s]*received[\s]+(?<fld22>[^\s]*)[\s]+)[\s]+from[\s]+(?<shost>[^\s]*)[\s]+for[\s]+(?<c_username>[^\s]*)[\s]+in[\s]+(?<fld2>.*)$" }
				id => "message-000585"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000585"
					"[rsa][message][id1]" => "000585"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000588
		# line in RSA: User Record Synchronization [<fld1>] server <shost> accepted push of <fld11> data for <c_username> in <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Record Synchronization [%{fld1}] server %{shost} accepted push of %{fld11} data for %{c_username} in %{fld2}" }
				id => "message-000588"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000588"
					"[rsa][message][id1]" => "000588"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000586
		# line in RSA: User Record Synchronization [<fld1>] pushed <fld11> data for <c_username> in <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Record Synchronization [%{fld1}] pushed %{fld11} data for %{c_username} in %{fld2}" }
				id => "message-000586"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000586"
					"[rsa][message][id1]" => "000586"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000587
		# line in RSA: User Record Synchronization [<fld1>] accepted pushed [<fld3>] data from <shost> for <c_username> in <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Record Synchronization [%{fld1}] accepted pushed [%{fld3}] data from %{shost} for %{c_username} in %{fld2}" }
				id => "message-000587"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000587"
					"[rsa][message][id1]" => "000587"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000589
		# line in RSA: User Record Synchronization [<fld1>] responded with { "<fld31>" | <fld31> } to request for [<fld21>] data from <shost> for <c_username> in <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+Record[\s]+Synchronization[\s]+\[(?<fld1>[^\]]*)\][\s]+responded[\s]+with[\s]+([\s]*\"(?<fld31>[^\"]*)\"[\s]+|[\s]*(?<fld31>[^\s]*)[\s]+)[\s]+to[\s]+request[\s]+for[\s]+\[(?<fld21>[^\]]*)\][\s]+data[\s]+from[\s]+(?<shost>[^\s]*)[\s]+for[\s]+(?<c_username>[^\s]*)[\s]+in[\s]+(?<fld2>.*)$" }
				id => "message-000589"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000589"
					"[rsa][message][id1]" => "000589"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000590
		# line in RSA: User Record Synchronization [<fld1>] rejected [<fld3>] data received from <shost> for <c_username> in <fld2> because the data in the cache is newer
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Record Synchronization [%{fld1}] rejected [%{fld3}] data received from %{shost} for %{c_username} in %{fld2} because the data in the cache is newer" }
				id => "message-000590"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000590"
					"[rsa][message][id1]" => "000590"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000592
		# line in RSA: User Record Synchronization [<fld1>] pushed [<fld3>] data to all peers for <fld4> in <fld7>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User Record Synchronization [%{fld1}] pushed [%{fld3}] data to all peers for %{fld4} in %{fld7}" }
				id => "message-000592"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000592"
					"[rsa][message][id1]" => "000592"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId469
	# line in RSA: Local Authentication server <shost>: <info>
	else if [logstash][msgparser][id] == "msgParserId469" {
		dissect {
			mapping => { "message" => "Local Authentication server %{shost}: %{info}" }
			id => "msgParserId469"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "server policy change"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId483
	# line in RSA: user '<c_username>' associated with authentication server '<hostname>' is deleted.
	else if [logstash][msgparser][id] == "msgParserId483" {
		dissect {
			mapping => { "message" => "user '%{c_username}' associated with authentication server '%{hostname}' is deleted." }
			id => "msgParserId483"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "user is deleted"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId484
	# line in RSA: Users will be shown the last login time
	else if [logstash][msgparser][id] == "msgParserId484" {
		dissect {
			mapping => { "message" => "Users will be shown the last login time" }
			id => "msgParserId484"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId485
	# line in RSA: Validation check succeeded for file "<filename>"
	else if [logstash][msgparser][id] == "msgParserId485" {
		dissect {
			mapping => { "message" => "Validation check succeeded for file \"%{filename}\"" }
			id => "msgParserId485"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Validation check succeeded for file"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "VIP" {
		# MESSAGE 000399
		# line in RSA: VIP <daddr> deactivated on { interface <fld1> | '<fld1>' port }, reason <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VIP[\s]+(?<daddr>[^\s]*)[\s]+deactivated[\s]+on[\s]+([\s]*interface[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*'(?<fld1>[^']*)'[\s]+port[\s]+),[\s]+reason[\s]+(?<result>.*)$" }
				id => "message-000399"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIP deactivated"
					"[event][id]" => "000399"
					"[rsa][message][id1]" => "000399"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000400
		# line in RSA: VIP <daddr> activated on { interface <fld1> | '<fld1>' port }, reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VIP[\s]+(?<daddr>[^\s]*)[\s]+activated[\s]+on[\s]+([\s]*interface[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*'(?<fld1>[^']*)'[\s]+port[\s]+),[\s]+reason:[\s]+(?<result>.*)$" }
				id => "message-000400"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIP activated"
					"[event][id]" => "000400"
					"[rsa][message][id1]" => "000400"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000401
		# line in RSA: VIP <daddr> failed over to  <dhost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIP %{daddr} failed over to  %{dhost}" }
				id => "message-000401"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIP failed"
					"[event][id]" => "000401"
					"[rsa][message][id1]" => "000401"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "VIPs" {
		# MESSAGE 000402
		# line in RSA: VIPs activated on node <fld1> on all ports, reason: other node yielded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIPs activated on node %{fld1} on all ports, reason: other node yielded" }
				id => "message-000402"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIPs activated on node  on all ports, reason other node yielded"
					"[event][id]" => "000402"
					"[rsa][message][id1]" => "000402"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000403
		# line in RSA: VIPs activated on node <fld1> on all ports, reason: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIPs activated on node %{fld1} on all ports, reason: %{result}" }
				id => "message-000403"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIPs activated on node  on all ports"
					"[event][id]" => "000403"
					"[rsa][message][id1]" => "000403"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000404
		# line in RSA: VIPs deactivated on node <fld1> on all ports, reason cleanup
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIPs deactivated on node %{fld1} on all ports, reason cleanup" }
				id => "message-000404"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIPs deactivated on node  on all ports, reason cleanup"
					"[event][id]" => "000404"
					"[rsa][message][id1]" => "000404"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000405
		# line in RSA: VIPs deactivated on node <fld1> on all ports, reason rebooting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIPs deactivated on node %{fld1} on all ports, reason rebooting" }
				id => "message-000405"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIPs deactivated on node  on all ports, reason rebooting"
					"[event][id]" => "000405"
					"[rsa][message][id1]" => "000405"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000406
		# line in RSA: VIPs deactivated on node <fld1> on all ports, { reason: | reason } <fld18>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VIPs[\s]+deactivated[\s]+on[\s]+node[\s]+(?<fld1>[^\s]*)[\s]+on[\s]+all[\s]+ports,[\s]+([\s]*reason:[\s]+|[\s]*reason[\s]+)[\s]+(?<fld18>.*)$" }
				id => "message-000406"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIPs deactivated on node on all ports"
					"[event][id]" => "000406"
					"[rsa][message][id1]" => "000406"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000407
		# line in RSA: VIPs failed over to node <fld1>, reason: <fld18>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIPs failed over to node %{fld1}, reason: %{fld18}" }
				id => "message-000407"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VIPs failed over to node"
					"[event][id]" => "000407"
					"[rsa][message][id1]" => "000407"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Virtual" {
		# MESSAGE 000408
		# line in RSA: Virtual port '<sport>' added.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Virtual port '%{sport}' added." }
				id => "message-000408"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "added"
					"[event][id]" => "000408"
					"[rsa][message][id1]" => "000408"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000409
		# line in RSA: Virtual port '<sport>' removed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Virtual port '%{sport}' removed." }
				id => "message-000409"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "removed"
					"[event][id]" => "000409"
					"[rsa][message][id1]" => "000409"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId497
	# line in RSA: VLAN/RADIUS Attribute Change Disconnect Message sent to RADIUS Client <c_username> for agent at <smacaddr> timed out
	else if [logstash][msgparser][id] == "msgParserId497" {
		dissect {
			mapping => { "message" => "VLAN/RADIUS Attribute Change Disconnect Message sent to RADIUS Client %{c_username} for agent at %{smacaddr} timed out" }
			id => "msgParserId497"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"result" => "timed out"
				"action" => "VLAN/RADIUS Attribute Change Disconnect Message sent to RADIUS Client"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId498
	# line in RSA: <change_attribute> value changed from <change_old> to <change_new>
	else if [logstash][msgparser][id] == "msgParserId498" {
		dissect {
			mapping => { "message" => "%{change_attribute} value changed from %{change_old} to %{change_new}" }
			id => "msgParserId498"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "VMware Server Connection Timeout"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "WARNING:" {
		# MESSAGE 000410
		# line in RSA: WARNING: Syntax Check failed for custom template '<c_username>' in custom sign-in page '<filename>'. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WARNING: Syntax Check failed for custom template '%{c_username}' in custom sign-in page '%{filename}'. %{info}" }
				id => "message-000410"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Syntax Check failed for custom template"
					"[event][id]" => "000410"
					"[rsa][message][id1]" => "000410"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000411
		# line in RSA: WARNING: Required template variable '<fld1>' is missing from custom template '<c_username>' in custom sign-in page '<filename>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WARNING: Required template variable '%{fld1}' is missing from custom template '%{c_username}' in custom sign-in page '%{filename}'" }
				id => "message-000411"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Required template variable missing from custom template"
					"[event][id]" => "000411"
					"[rsa][message][id1]" => "000411"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000412
		# line in RSA: WARNING: The custom template '<c_username>' in custom sign-in page '<filename>' is out of date.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WARNING: The custom template '%{c_username}' in custom sign-in page '%{filename}' is out of date." }
				id => "message-000412"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "custom template in custom sign-in page is out of date"
					"[event][id]" => "000412"
					"[rsa][message][id1]" => "000412"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId502
	# line in RSA: Watchdog restarting <info> services (<fld1>).
	else if [logstash][msgparser][id] == "msgParserId502" {
		dissect {
			mapping => { "message" => "Watchdog restarting %{info} services (%{fld1})." }
			id => "msgParserId502"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "restart server"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Watchdog:" {
		# MESSAGE 000414
		# line in RSA: Watchdog: check { cgi login | webserver } error num <fld1>. Response from webserver is: <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Watchdog:[\s]+check[\s]+([\s]*cgi[\s]+login[\s]+|[\s]*webserver[\s]+)[\s]+error[\s]+num[\s]+(?<fld1>[^\.]*)\.[\s]+Response[\s]+from[\s]+webserver[\s]+is:[\s]+(?<info>.*)$" }
				id => "message-000414"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "webserver or cgi login error"
					"[event][id]" => "000414"
					"[rsa][message][id1]" => "000414"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000415
		# line in RSA: Watchdog: process <fld1> has exceeded number of file descriptors.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Watchdog: process %{fld1} has exceeded number of file descriptors." }
				id => "message-000415"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "webserver error"
					"[event][id]" => "000415"
					"[rsa][message][id1]" => "000415"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "WebRequest" {
		# MESSAGE 000416
		# line in RSA: WebRequest completed, <fld19> to { <url> from <daddr> result=<resultcode> sent=<sbytes> received=<rbytes> in <duration> seconds | <url> from <daddr> <fld1> | <url> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^WebRequest[\s]+completed,[\s]+(?<fld19>[^\s]*)[\s]+to[\s]+([\s]*(?<url>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+result=(?<resultcode>[^\s]*)[\s]+sent=(?<sbytes>[^\s]*)[\s]+received=(?<rbytes>[^\s]*)[\s]+in[\s]+(?<duration>[^\s]*)[\s]+seconds[\s]+|[\s]*(?<url>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*(?<url>[^\s]*)[\s]+)$" }
				id => "message-000416"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "web request"
					"[event][id]" => "000416"
					"[rsa][message][id1]" => "000416"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000432
		# line in RSA: <fld1>: Host: <daddr>, Request: { <web_method> <webpage> <fld2> | <web_method> <webpage> | <webpage> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^:]*):[\s]+Host:[\s]+(?<daddr>[^,]*),[\s]+Request:[\s]+([\s]*(?<web_method>[^\s]*)[\s]+(?<webpage>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+|[\s]*(?<web_method>[^\s]*)[\s]+(?<webpage>[^\s]*)[\s]+|[\s]*(?<webpage>[^\s]*)[\s]+)$" }
				id => "message-000432"
				add_field => {
				"saddr" => "%{hfld0}"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000432"
					"[rsa][message][id1]" => "000432"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId506
	# line in RSA: WEB feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId506" {
		dissect {
			mapping => { "message" => "WEB feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId506"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "WEB feature modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Web" {
		# MESSAGE 000419
		# line in RSA: Web { Bookmarks | Bookmark } in Role '<user_role>' is { modified from <change_old> to <change_new> | reordered }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Web[\s]+([\s]*Bookmarks[\s]+|[\s]*Bookmark[\s]+)[\s]+in[\s]+Role[\s]+'(?<user_role>[^']*)'[\s]+is[\s]+([\s]*modified[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>[^\s]*)[\s]+|[\s]*reordered[\s]+)$" }
				id => "message-000419"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
					"[event][id]" => "000419"
					"[rsa][message][id1]" => "000419"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000420
		# line in RSA: Web Bookmark [<fld1>] is { added to | deleted from } Role '<user_role>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Web[\s]+Bookmark[\s]+\[(?<fld1>[^\]]*)\][\s]+is[\s]+([\s]*added[\s]+to[\s]+|[\s]*deleted[\s]+from[\s]+)[\s]+Role[\s]+'(?<user_role>[^']*)'$" }
				id => "message-000420"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
					"[event][id]" => "000420"
					"[rsa][message][id1]" => "000420"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000421
		# line in RSA: Web SSO: Fetched Kerberos { Service Ticket | TGT Ticket } Client: <c_username>, Server: <hostname>, authtime: <fld5> startime: <fld1>, endtime: <fld2>, endtime sec: <fld3>, current sec: <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Web[\s]+SSO:[\s]+Fetched[\s]+Kerberos[\s]+([\s]*Service[\s]+Ticket[\s]+|[\s]*TGT[\s]+Ticket[\s]+)[\s]+Client:[\s]+(?<c_username>[^,]*),[\s]+Server:[\s]+(?<hostname>[^,]*),[\s]+authtime:[\s]+(?<fld5>[^\s]*)[\s]+startime:[\s]+(?<fld1>[^,]*),[\s]+endtime:[\s]+(?<fld2>[^,]*),[\s]+endtime[\s]+sec:[\s]+(?<fld3>[^,]*),[\s]+current[\s]+sec:[\s]+(?<fld4>.*)$" }
				id => "message-000421"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Fetched Kerberos TGT or Service Ticket - Web SSO"
					"[event][id]" => "000421"
					"[rsa][message][id1]" => "000421"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000422
		# line in RSA: Web SSO: Authentication successful. Credential Used: UserUID: <fld1>, Username: <c_username>, { Domain: <fld2> Server Domain: <domain>, | Server Domain: <domain>, } Auth Type: (<authmethod>) <fld3>, Cred Type: (<fld4>) <fld5>, Target: <hostname>, Password: <fld6>, Workstation: <fld7>, <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Web[\s]+SSO:[\s]+Authentication[\s]+successful\.[\s]+Credential[\s]+Used:[\s]+UserUID:[\s]+(?<fld1>[^,]*),[\s]+Username:[\s]+(?<c_username>[^,]*),[\s]+([\s]*Domain:[\s]+(?<fld2>[^\s]*)[\s]+Server[\s]+Domain:[\s]+(?<domain>[^,]*),[\s]+|[\s]*Server[\s]+Domain:[\s]+(?<domain>[^,]*),[\s]+)[\s]+Auth[\s]+Type:[\s]+\((?<authmethod>[^\)]*)\)[\s]+(?<fld3>[^,]*),[\s]+Cred[\s]+Type:[\s]+\((?<fld4>[^\)]*)\)[\s]+(?<fld5>[^,]*),[\s]+Target:[\s]+(?<hostname>[^,]*),[\s]+Password:[\s]+(?<fld6>[^,]*),[\s]+Workstation:[\s]+(?<fld7>[^,]*),[\s]+(?<info>.*)$" }
				id => "message-000422"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Authentication Successful - Web SSO"
					"[event][id]" => "000422"
					"[rsa][message][id1]" => "000422"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000423
		# line in RSA: Web SSO: Authentication successful. Credential Used: UserUID: <fld1>, Username: <c_username>, NTLMHash: <fld2>, Domain: <fld3>, Server Domain: <domain>, Auth Type: (<authmethod>) <fld4>, Cred Type: (<fld5>) <fld6>, Target: <hostname>, Workstation: <fld7>, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web SSO: Authentication successful. Credential Used: UserUID: %{fld1}, Username: %{c_username}, NTLMHash: %{fld2}, Domain: %{fld3}, Server Domain: %{domain}, Auth Type: (%{authmethod}) %{fld4}, Cred Type: (%{fld5}) %{fld6}, Target: %{hostname}, Workstation: %{fld7}, %{info}" }
				id => "message-000423"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Authentication Successful - Web SSO"
					"[event][id]" => "000423"
					"[rsa][message][id1]" => "000423"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000424
		# line in RSA: Web SSO: Authentication successful. Credential Used: UserUID: <fld1>, Username: <c_username>, BasicHash: <fld2>, { Realm: <fld3>, Auth Type: (<authmethod>) <fld4> | Auth Type: (<authmethod>) <fld5>, } Cred Type: (<fld6>) <fld7>, Target: <hostname>, Password: <fld8>, <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Web[\s]+SSO:[\s]+Authentication[\s]+successful\.[\s]+Credential[\s]+Used:[\s]+UserUID:[\s]+(?<fld1>[^,]*),[\s]+Username:[\s]+(?<c_username>[^,]*),[\s]+BasicHash:[\s]+(?<fld2>[^,]*),[\s]+([\s]*Realm:[\s]+(?<fld3>[^,]*),[\s]+Auth[\s]+Type:[\s]+\((?<authmethod>[^\)]*)\)[\s]+(?<fld4>[^\s]*)[\s]+|[\s]*Auth[\s]+Type:[\s]+\((?<authmethod>[^\)]*)\)[\s]+(?<fld5>[^,]*),[\s]+)[\s]+Cred[\s]+Type:[\s]+\((?<fld6>[^\)]*)\)[\s]+(?<fld7>[^,]*),[\s]+Target:[\s]+(?<hostname>[^,]*),[\s]+Password:[\s]+(?<fld8>[^,]*),[\s]+(?<info>.*)$" }
				id => "message-000424"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Authentication Successful - Web SSO"
					"[event][id]" => "000424"
					"[rsa][message][id1]" => "000424"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000425
		# line in RSA: Web SSO: Authentication successful. Credential Used: UserUID: <fld1>, Auth Type: (<authmethod>) <fld2>, Target: <hostname>, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web SSO: Authentication successful. Credential Used: UserUID: %{fld1}, Auth Type: (%{authmethod}) %{fld2}, Target: %{hostname}, %{info}" }
				id => "message-000425"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Authentication Successful - Web SSO"
					"[event][id]" => "000425"
					"[rsa][message][id1]" => "000425"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000453
		# line in RSA: Web SSO: Authentication successful. Credential Used: Username: <c_username>, Realm: <fld1>, Auth Type: (<authmethod>) <fld2>, Cred Type: (<fld3>) <fld4>, Target: <hostname>, Has Ticket: <fld5>, Policy Auth: <fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web SSO: Authentication successful. Credential Used: Username: %{c_username}, Realm: %{fld1}, Auth Type: (%{authmethod}) %{fld2}, Cred Type: (%{fld3}) %{fld4}, Target: %{hostname}, Has Ticket: %{fld5}, Policy Auth: %{fld6}" }
				id => "message-000453"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Authentication Successful - Web SSO"
					"[event][id]" => "000453"
					"[rsa][message][id1]" => "000453"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000454
		# line in RSA: Web SSO: Authentication successful. Credential Used: Username: <c_username>, Error: (<fld1>) <fld2>, Realm: <fld3>, Auth Type: (<authmethod>) <fld4>, Target: <hostname>, Has Ticket: <fld5>, Policy Auth: <fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web SSO: Authentication successful. Credential Used: Username: %{c_username}, Error: (%{fld1}) %{fld2}, Realm: %{fld3}, Auth Type: (%{authmethod}) %{fld4}, Target: %{hostname}, Has Ticket: %{fld5}, Policy Auth: %{fld6}" }
				id => "message-000454"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Authentication Successful - Web SSO"
					"[event][id]" => "000454"
					"[rsa][message][id1]" => "000454"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000455
		# line in RSA: Web SSO: Fetched Kerberos { Service Ticket | TGT Ticket } Client: <c_username>, Server: <hostname>, auth <fld5>, start <fld1>, end <fld2>, renew <fld3>, current <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Web[\s]+SSO:[\s]+Fetched[\s]+Kerberos[\s]+([\s]*Service[\s]+Ticket[\s]+|[\s]*TGT[\s]+Ticket[\s]+)[\s]+Client:[\s]+(?<c_username>[^,]*),[\s]+Server:[\s]+(?<hostname>[^,]*),[\s]+auth[\s]+(?<fld5>[^,]*),[\s]+start[\s]+(?<fld1>[^,]*),[\s]+end[\s]+(?<fld2>[^,]*),[\s]+renew[\s]+(?<fld3>[^,]*),[\s]+current[\s]+(?<fld4>.*)$" }
				id => "message-000455"
				add_field => {
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"event_type" => "VPN"
				"action" => "Fetched Kerberos TGT or Service Ticket - Web SSO"
					"[event][id]" => "000455"
					"[rsa][message][id1]" => "000455"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld5}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yy H:m:s" ] }
			}
		}
		# MESSAGE Web:01
		# line in RSA: Web SSO: Authentication successful. Credential Used: Username: <c_username>, BasicHash: <fld1>, Realm: <fld3>, Auth Type: (<authmethod>) <fld4>, Cred Type: (<fld5>) <fld6>, Target: <hostname>, Password: <fld6>, Policy Auth: <fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web SSO: Authentication successful. Credential Used: Username: %{c_username}, BasicHash: %{fld1}, Realm: %{fld3}, Auth Type: (%{authmethod}) %{fld4}, Cred Type: (%{fld5}) %{fld6}, Target: %{hostname}, Password: %{fld6}, Policy Auth: %{fld6}" }
				id => "message-Web:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"hostip" => "%{hfld0}"
				"realm" => "%{hfld11}"
				"action" => "Web SSO: Authentication successful"
					"[event][id]" => "Web:01"
					"[rsa][message][id1]" => "Web:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Web:02
		# line in RSA: Web request connection from <saddr> timed out. Requested URI <url>, bytes received <rbytes>, bytes expected <fld1>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web request connection from %{saddr} timed out. Requested URI %{url}, bytes received %{rbytes}, bytes expected %{fld1}." }
				id => "message-Web:02"
				add_field => {
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"event_type" => "VPN"
					"[event][id]" => "Web:02"
					"[rsa][message][id1]" => "Web:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000599
		# line in RSA: Web SSO: Authentication successful. Credential Used: Username: <c_username>, NTLMHash: <fld2>, HashLength: <fld3> Realm: <fld1>, Auth Type: (<authmethod>) <fld4>, Cred Type: (<fld3>) <fld4>, Target: <hostname>, Workstation: <fld5>, Policy Auth: <fld6>, Server Realm: <fld7>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web SSO: Authentication successful. Credential Used: Username: %{c_username}, NTLMHash: %{fld2}, HashLength: %{fld3} Realm: %{fld1}, Auth Type: (%{authmethod}) %{fld4}, Cred Type: (%{fld3}) %{fld4}, Target: %{hostname}, Workstation: %{fld5}, Policy Auth: %{fld6}, Server Realm: %{fld7}" }
				id => "message-000599"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Authentication Successful - Web SSO"
					"[event][id]" => "000599"
					"[rsa][message][id1]" => "000599"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId519
	# line in RSA: WEB_FLASH_CONTENT in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId519" {
		dissect {
			mapping => { "message" => "WEB_FLASH_CONTENT in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId519"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId520
	# line in RSA: WEB_JAVA_APPLETS in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId520" {
		dissect {
			mapping => { "message" => "WEB_JAVA_APPLETS in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId520"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId521
	# line in RSA: WEB_MASK_HOSTNAMES in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId521" {
		dissect {
			mapping => { "message" => "WEB_MASK_HOSTNAMES in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId521"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId522
	# line in RSA: WEB_PERSISTENT_COOKIES in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId522" {
		dissect {
			mapping => { "message" => "WEB_PERSISTENT_COOKIES in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId522"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId523
	# line in RSA: WEB_REWRITE_FILE_URLS in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId523" {
		dissect {
			mapping => { "message" => "WEB_REWRITE_FILE_URLS in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId523"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId524
	# line in RSA: WEB_REWRITE_PDF in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId524" {
		dissect {
			mapping => { "message" => "WEB_REWRITE_PDF in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId524"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId525
	# line in RSA: WEB_UNTRUSTED_SSL_SITES_WARN_ON_CERT_PROBLEMS in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId525" {
		dissect {
			mapping => { "message" => "WEB_UNTRUSTED_SSL_SITES_WARN_ON_CERT_PROBLEMS in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId525"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "WEB_UNTRUSTED_SSL_SITES_WARN_ON_CERT_PROBLEMS role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId527
	# line in RSA: WEBURL.ACCESS Policies are reordered [<info>]
	else if [logstash][msgparser][id] == "msgParserId527" {
		dissect {
			mapping => { "message" => "WEBURL.ACCESS Policies are reordered [%{info}]" }
			id => "msgParserId527"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId528
	# line in RSA: WEBURL.REWRITING Policies are reordered [<info>]
	else if [logstash][msgparser][id] == "msgParserId528" {
		dissect {
			mapping => { "message" => "WEBURL.REWRITING Policies are reordered [%{info}]" }
			id => "msgParserId528"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Windows" {
		# MESSAGE 000435
		# line in RSA: Windows Bookmark [<info>] is added to Role '<user_role>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Windows Bookmark [%{info}] is added to Role '%{user_role}'" }
				id => "message-000435"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Windows bookmark added to role"
					"[event][id]" => "000435"
					"[rsa][message][id1]" => "000435"
					"[event][categoryid]" => "1501020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000436
		# line in RSA: Windows Bookmark [<info>] is deleted from Role '<user_role>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Windows Bookmark [%{info}] is deleted from Role '%{user_role}'" }
				id => "message-000436"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Windows bookmark deleted from role"
					"[event][id]" => "000436"
					"[rsa][message][id1]" => "000436"
					"[event][categoryid]" => "1501030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000437
		# line in RSA: Windows Bookmark in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Windows Bookmark in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
				id => "message-000437"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "Windows bookmark modified"
					"[event][id]" => "000437"
					"[rsa][message][id1]" => "000437"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId532
	# line in RSA: WINDOWS_FILES feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId532" {
		dissect {
			mapping => { "message" => "WINDOWS_FILES feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId532"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "WINS" {
		# MESSAGE 000439
		# line in RSA: WINS server changed from <change_old> to { "<change_new>" | <change_new> } for node <dhost> for cluster <group_object>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^WINS[\s]+server[\s]+changed[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+([\s]*\"(?<change_new>[^\"]*)\"[\s]+|[\s]*(?<change_new>[^\s]*)[\s]+)[\s]+for[\s]+node[\s]+(?<dhost>[^\s]*)[\s]+for[\s]+cluster[\s]+(?<group_object>[^\.]*)\.$" }
				id => "message-000439"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "WINS server IP changed"
					"[event][id]" => "000439"
					"[rsa][message][id1]" => "000439"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000440
		# line in RSA: WINS server set to <daddr> for node <dhost> for cluster <group_object>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WINS server set to %{daddr} for node %{dhost} for cluster %{group_object}." }
				id => "message-000440"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "WINS server IP set"
					"[event][id]" => "000440"
					"[rsa][message][id1]" => "000440"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId535
	# line in RSA: WINTERMSERV feature in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
	else if [logstash][msgparser][id] == "msgParserId535" {
		dissect {
			mapping => { "message" => "WINTERMSERV feature in Role '%{user_role}' is modified from [%{change_old}] to [%{change_new}]" }
			id => "msgParserId535"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "feature in Role modified"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "WSAM" {
		# MESSAGE 000442
		# line in RSA: WSAM { Application | Allowed Server } in Role '<user_role>' is modified from [<change_old>] to [<change_new>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^WSAM[\s]+([\s]*Application[\s]+|[\s]*Allowed[\s]+Server[\s]+)[\s]+in[\s]+Role[\s]+'(?<user_role>[^']*)'[\s]+is[\s]+modified[\s]+from[\s]+\[(?<change_old>[^\]]*)\][\s]+to[\s]+\[(?<change_new>[^\]]*)\]$" }
				id => "message-000442"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role modified"
					"[event][id]" => "000442"
					"[rsa][message][id1]" => "000442"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000443
		# line in RSA: WSAM { Application | Allowed Server } [<info>] is added to Role '<user_role>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^WSAM[\s]+([\s]*Application[\s]+|[\s]*Allowed[\s]+Server[\s]+)[\s]+\[(?<info>[^\]]*)\][\s]+is[\s]+added[\s]+to[\s]+Role[\s]+'(?<user_role>[^']*)'$" }
				id => "message-000443"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role added"
					"[event][id]" => "000443"
					"[rsa][message][id1]" => "000443"
					"[event][categoryid]" => "1501020000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000444
		# line in RSA: WSAM { Application | Allowed Server } [<info>] is deleted from Role '<user_role>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^WSAM[\s]+([\s]*Application[\s]+|[\s]*Allowed[\s]+Server[\s]+)[\s]+\[(?<info>[^\]]*)\][\s]+is[\s]+deleted[\s]+from[\s]+Role[\s]+'(?<user_role>[^']*)'$" }
				id => "message-000444"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "role deleted"
					"[event][id]" => "000444"
					"[rsa][message][id1]" => "000444"
					"[event][categoryid]" => "1501030000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId539
	# line in RSA: Zip compression of content is now enabled
	else if [logstash][msgparser][id] == "msgParserId539" {
		dissect {
			mapping => { "message" => "Zip compression of content is now enabled" }
			id => "msgParserId539"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Leased" {
		# MESSAGE 000583
		# line in RSA: Leased <fld1> units of '<fld11>' {from <shost> for node <fld12>, client name: <fld13>|from <shost>} - reserved: <fld4> maximum: <fld3> incremental quantum: <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Leased[\s]+(?<fld1>[^\s]*)[\s]+units[\s]+of[\s]+'(?<fld11>[^']*)'[\s]+(from[\s]+(?<shost>[^\s]*)[\s]+for[\s]+node[\s]+(?<fld12>[^,]*),[\s]+client[\s]+name:[\s]+(?<fld13>[^\s]*)|from[\s]+(?<shost>[^\s]*))[\s]+\-[\s]+reserved:[\s]+(?<fld4>[^\s]*)[\s]+maximum:[\s]+(?<fld3>[^\s]*)[\s]+incremental[\s]+quantum:[\s]+(?<fld2>.*)$" }
				id => "message-000583"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000583"
					"[rsa][message][id1]" => "000583"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Leased:01
		# line in RSA: Leased <fld11> from <shost> for node<node>, client name: <fld13> <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Leased %{fld11} from %{shost} for node%{node}, client name: %{fld13} %{result}" }
				id => "message-Leased:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "Leased:01"
					"[rsa][message][id1]" => "Leased:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Leased:02
		# line in RSA: Leased<fld1>units of '<fld11>' to<dhost>- reserved<fld4>maximum<fld3>incremental quantum<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Leased%{fld1}units of '%{fld11}' to%{dhost}- reserved%{fld4}maximum%{fld3}incremental quantum%{fld2}" }
				id => "message-Leased:02"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "Leased:02"
					"[rsa][message][id1]" => "Leased:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId544
	# line in RSA: Lease request (Lease { Renew | Query }) received from client {<shost> for feature <fld1>, requsting <fld2>|<shost>}
	else if [logstash][msgparser][id] == "msgParserId544" {
		grok {
			match => { "message" => "^Lease[\s]+request[\s]+\(Lease[\s]+([\s]*Renew[\s]+|[\s]*Query[\s]+)\)[\s]+received[\s]+from[\s]+client[\s]+((?<shost>[^\s]*)[\s]+for[\s]+feature[\s]+(?<fld1>[^,]*),[\s]+requsting[\s]+(?<fld2>.*)|(?<shost>.*))$" }
			id => "msgParserId544"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId546
	# line in RSA: Fan<severity>: Fan<fld1>is running below threshold (<fld2>)
	else if [logstash][msgparser][id] == "msgParserId546" {
		dissect {
			mapping => { "message" => "Fan%{severity}: Fan%{fld1}is running below threshold (%{fld2})" }
			id => "msgParserId546"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId547
	# line in RSA: Auto-update parameters for virus signatures list changed - url=<url> uid=<uid> interval=<fld3> password=<fld4>
	else if [logstash][msgparser][id] == "msgParserId547" {
		dissect {
			mapping => { "message" => "Auto-update parameters for virus signatures list changed - url=%{url} uid=%{uid} interval=%{fld3} password=%{fld4}" }
			id => "msgParserId547"
			add_field => {
				"event_type" => "VPN"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Client" {
		# MESSAGE 000591
		# line in RSA: Client <c_username>  (node: <fld12>) has succesfully surrendered license: Add <fld11> simultaneous users to <fld13> key: '<fld21>' to server <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client %{c_username}  (node: %{fld12}) has succesfully surrendered license: Add %{fld11} simultaneous users to %{fld13} key: '%{fld21}' to server %{saddr}" }
				id => "message-000591"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000591"
					"[rsa][message][id1]" => "000591"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE Client:02
		# line in RSA: Client {<hostid> added to cluster <fld1>, cluster id <fld2>|deleted: Lease Client ID=<shost>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Client[\s]+((?<hostid>[^\s]*)[\s]+added[\s]+to[\s]+cluster[\s]+(?<fld1>[^,]*),[\s]+cluster[\s]+id[\s]+(?<fld2>.*)|deleted:[\s]+Lease[\s]+Client[\s]+ID=(?<shost>.*))$" }
				id => "message-Client:02"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "Client:02"
					"[rsa][message][id1]" => "Client:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId557
	# line in RSA: CRL checking started for certificate '<fld1>' issued by <fld2>
	else if [logstash][msgparser][id] == "msgParserId557" {
		dissect {
			mapping => { "message" => "CRL checking started for certificate '%{fld1}' issued by %{fld2}" }
			id => "msgParserId557"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "VPN" {
		# MESSAGE 000594
		# line in RSA: VPN Tunneling: User with IP <daddr> connected with SSL transport {mode.|mode}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VPN[\s]+Tunneling:[\s]+User[\s]+with[\s]+IP[\s]+(?<daddr>[^\s]*)[\s]+connected[\s]+with[\s]+SSL[\s]+transport[\s]+(mode\.|mode)$" }
				id => "message-000594"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000594"
					"[rsa][message][id1]" => "000594"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000595
		# line in RSA: VPN Tunneling: Session ended for user with {IPv4 address | IP} <daddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VPN[\s]+Tunneling:[\s]+Session[\s]+ended[\s]+for[\s]+user[\s]+with[\s]+(IPv4[\s]+address[\s]+|[\s]*IP)[\s]+(?<daddr>.*)$" }
				id => "message-000595"
				add_field => {
				"event_type" => "VPN"
				"event_description" => "VPN session ended"
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000595"
					"[rsa][message][id1]" => "000595"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000596
		# line in RSA: VPN Tunneling: Session started for user with {IPv4 address | IP} <daddr>, hostname <dhost>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VPN[\s]+Tunneling:[\s]+Session[\s]+started[\s]+for[\s]+user[\s]+with[\s]+(IPv4[\s]+address[\s]+|[\s]*IP)[\s]+(?<daddr>[^,]*),[\s]+hostname[\s]+(?<dhost>.*)$" }
				id => "message-000596"
				add_field => {
				"event_type" => "VPN"
				"event_description" => "VPN session started"
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000596"
					"[rsa][message][id1]" => "000596"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000597
		# line in RSA: VPN Tunneling: User with IP <daddr> connected with ESP transport {mode.|mode}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VPN[\s]+Tunneling:[\s]+User[\s]+with[\s]+IP[\s]+(?<daddr>[^\s]*)[\s]+connected[\s]+with[\s]+ESP[\s]+transport[\s]+(mode\.|mode)$" }
				id => "message-000597"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000597"
					"[rsa][message][id1]" => "000597"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000717
		# line in RSA: VPN Tunneling: Optimized ACL count = <dclass_counter1>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN Tunneling: Optimized ACL count = %{dclass_counter1}." }
				id => "message-000717"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000717"
					"[rsa][message][id1]" => "000717"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000795
		# line in RSA: VPN Tunneling:<c_username>/ : Session failover attempted with IP <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN Tunneling:%{c_username}/ : Session failover attempted with IP %{daddr}" }
				id => "message-000795"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000795"
					"[rsa][message][id1]" => "000795"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE 000600
		# line in RSA: VPN Tunneling: ACL count = <dclass_counter1>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN Tunneling: ACL count = %{dclass_counter1}." }
				id => "message-000600"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
					"[event][id]" => "000600"
					"[rsa][message][id1]" => "000600"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE VPN:01
		# line in RSA: VPN Tunneling: IPv4 address cannot be allocated to user <username>. Solution: <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN Tunneling: IPv4 address cannot be allocated to user %{username}. Solution: %{result}." }
				id => "message-VPN:01"
				add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"domain" => "%{hdomain}"
				"action" => "IPv4 address cannot be allocated to user"
					"[event][id]" => "VPN:01"
					"[rsa][message][id1]" => "VPN:01"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId564
	# line in RSA: Conductor control given to {<domain>\<username> | <username>} in meeting '<info>' (ID: <id>).
	else if [logstash][msgparser][id] == "msgParserId564" {
		grok {
			match => { "message" => "^Conductor[\s]+control[\s]+given[\s]+to[\s]+((?<domain>[^\\]*)\\(?<username>[^\s]*)[\s]+|[\s]*(?<username>[^\s]*))[\s]+in[\s]+meeting[\s]+'(?<info>[^']*)'[\s]+\(ID:[\s]+(?<id>[^\)]*)\)\.$" }
			id => "msgParserId564"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"saddr" => "%{hfld0}"
				"group" => "%{hgroup}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId573
	# line in RSA: OCSP checking started for certificate '{ CN=<user_address> | emailAddress=<user_address>, <info> }' issued by <fld11>
	else if [logstash][msgparser][id] == "msgParserId573" {
		grok {
			match => { "message" => "^OCSP[\s]+checking[\s]+started[\s]+for[\s]+certificate[\s]+'([\s]*CN=(?<user_address>[^\s]*)[\s]+|[\s]*emailAddress=(?<user_address>[^,]*),[\s]+(?<info>[^\s]*)[\s]+)'[\s]+issued[\s]+by[\s]+(?<fld11>.*)$" }
			id => "msgParserId573"
			add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"action" => "OCSP checking started for certificate"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId577
	# line in RSA: Missing or invalid client certificate
	else if [logstash][msgparser][id] == "msgParserId577" {
		dissect {
			mapping => { "message" => "Missing or invalid client certificate" }
			id => "msgParserId577"
			add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"event_description" => "Missing or invalid client certificate"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId578
	# line in RSA: Ending <user_agent> session.
	else if [logstash][msgparser][id] == "msgParserId578" {
		dissect {
			mapping => { "message" => "Ending %{user_agent} session." }
			id => "msgParserId578"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"result" => "Ending session"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId580
	# line in RSA: client certificate received: <fld1>
	else if [logstash][msgparser][id] == "msgParserId580" {
		dissect {
			mapping => { "message" => "client certificate received: %{fld1}" }
			id => "msgParserId580"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "certificate received"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId582
	# line in RSA: <c_username> SharePoint logged out from IP (<daddr>) because <result> from IP (<saddr>).
	else if [logstash][msgparser][id] == "msgParserId582" {
		dissect {
			mapping => { "message" => "%{c_username} SharePoint logged out from IP (%{daddr}) because %{result} from IP (%{saddr})." }
			id => "msgParserId582"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"action" => "user logged out"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId584
	# line in RSA: Port Probe <hostip>:<network_port>
	else if [logstash][msgparser][id] == "msgParserId584" {
		dissect {
			mapping => { "message" => "Port Probe %{hostip}:%{network_port}" }
			id => "msgParserId584"
			add_field => {
				"event_type" => "VPN"
				"realm" => "%{hfld11}"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"domain" => "%{hdomain}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}
	# PARSER msgParserId585
	# line in RSA: Requested authentication protocol may not be available
	else if [logstash][msgparser][id] == "msgParserId585" {
		dissect {
			mapping => { "message" => "Requested authentication protocol may not be available" }
			id => "msgParserId585"
			add_field => {
				"event_type" => "VPN"
				"group" => "%{hgroup}"
				"username" => "%{husername}"
				"event_description" => "Requested authentication protocol may not be available"
				"saddr" => "%{hfld0}"
				"[logstash][fullDateTimeString]" => "%{hfld31} %{hfld32} %{hfld33} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_junipervpnmsg.json"
#			template_name => "junipervpn_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "brocadeswitch"
			"[observer][name]" => "Brocade FastIron Switch"
			"[observer][type]" => "Switch"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hmonth> <hday> <htime> <haddr> <msgIdPart1> <msgIdPart2> by <husername> from src IP <hsaddr> <msgIdPart3>, <!payload:haddr>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<haddr>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+by[\s]+(?<husername>[^\s]*)[\s]+from[\s]+src[\s]+IP[\s]+(?<hsaddr>[^\s]*)[\s]+(?<msgIdPart3>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hday> <htime> <haddr> <msgIdPart1>-<msgIdPart2> <!payload:haddr>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<haddr>[^\s]*)[\s]+(?<msgIdPart1>[^\-]*)\-(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}-%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <hmonth> <hday> <htime> <haddr> Stack <hfld1>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} %{haddr} Stack %{hfld1}: %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "Stack"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hmonth> <hday> <htime> <haddr> <msgIdPart1> <msgIdPart2> <!payload:haddr>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<haddr>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hmonth> <hday> <htime> <haddr> <messageid>! <!payload:haddr>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<haddr>[^\s]*)[\s]+(?<messageid>[^!]*)![\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <hmonth> <hday> <htime> <haddr> Security: SSH access <!payload:haddr>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<haddr>[^\s]*)[\s]+Security:[\s]+SSH[\s]+access[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "Security"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth> <hday> <htime> <haddr> <messageid>: <!payload:haddr>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<haddr>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <hmonth> <hday> <htime> <haddr> <messageid> <!payload:haddr>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<haddr>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-brocadeswitchmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_description>. A license for '<protocol>' feature must be purchased and installed or the feature 'OSPFv2' must be deactivated to become compliant with the terms and conditions of use.
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_description}. A license for '%{protocol}' feature must be purchased and installed or the feature 'OSPFv2' must be deactivated to become compliant with the terms and conditions of use." }
			id => "msgParserId0"
			add_field => {
				"event_source" => "%{haddr}"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:  <event_source> DOT1X: Port <portname> - mac <macaddr> AuthControlledPortStatus change: <state>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{event_source} DOT1X: Port %{portname} - mac %{macaddr} AuthControlledPortStatus change: %{state}" }
			id => "msgParserId1"
			add_field => {
				"event_description" => "DOT1X AuthControlledPortStatus change"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA:  <event_source>, Interface <hostname> <interface>, <reason>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{event_source}, Interface %{hostname} %{interface}, %{reason}" }
			id => "msgParserId2"
			add_field => {
				"event_description" => "Interface status"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "L4_server" {
		# MESSAGE Max_Connection_Rate_Reached
		# line in RSA:  <event_source>, L4 server <hostip> <hostname> max connection rate <info> reached in asm App <portname> at <device>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}, L4 server %{hostip} %{hostname} max connection rate %{info} reached in asm App %{portname} at %{device}" }
				id => "message-Max_Connection_Rate_Reached"
				add_field => {
				"event_description" => "max connection rate reached in asm App"
					"[event][id]" => "Max_Connection_Rate_Reached"
					"[rsa][message][id1]" => "Max_Connection_Rate_Reached"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Port_Down
		# line in RSA:  <event_source>, L4 server <hostip> <hostname> port <sport> is down { due to <reason> | <space> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_source>[^,]*),[\s]+L4[\s]+server[\s]+(?<hostip>[^\s]*)[\s]+(?<hostname>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+is[\s]+down[\s]+([\s]*due[\s]+to[\s]+(?<reason>[^\s]*)[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
				id => "message-Port_Down"
				add_field => {
				"event_description" => "Port Down"
					"[event][id]" => "Port_Down"
					"[rsa][message][id1]" => "Port_Down"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Port_Up
		# line in RSA:  <event_source>, L4 server <hostip> <hostname> port <sport> is up
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}, L4 server %{hostip} %{hostname} port %{sport} is up" }
				id => "message-Port_Up"
				add_field => {
				"event_description" => "Port Down"
					"[event][id]" => "Port_Up"
					"[rsa][message][id1]" => "Port_Up"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Hostname_Down
		# line in RSA:  <event_source>, L4 server <hostip> <hostname> is down
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}, L4 server %{hostip} %{hostname} is down" }
				id => "message-Hostname_Down"
				add_field => {
				"event_description" => "Hostname Down"
					"[event][id]" => "Hostname_Down"
					"[rsa][message][id1]" => "Hostname_Down"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Hostname_Up
		# line in RSA:  <event_source>, L4 server <hostip> <hostname> is up
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}, L4 server %{hostip} %{hostname} is up" }
				id => "message-Hostname_Up"
				add_field => {
				"event_description" => "Hostname Up"
					"[event][id]" => "Hostname_Up"
					"[rsa][message][id1]" => "Hostname_Up"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA:  <event_source>, list 10 denied <protocol> <saddr>(<sport>)(Ethernet <sinterface> <smacaddr>) -> <daddr>(<dport>), <info>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{event_source}, list 10 denied %{protocol} %{saddr}(%{sport})(Ethernet %{sinterface} %{smacaddr}) -> %{daddr}(%{dport}), %{info}" }
			id => "msgParserId8"
			add_field => {
				"event_description" => "list denied tcp connection"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: <logip> running-config was changed from <network_service> client <saddr>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{logip} running-config was changed from %{network_service} client %{saddr}" }
			id => "msgParserId9"
			add_field => {
				"event_description" => "Current running configuration changed."
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security" {
		# MESSAGE Security_running-config_changed
		# line in RSA:  <event_source>Security: running-config was changed by  from <network_service> Management
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}Security: running-config was changed by  from %{network_service} Management" }
				id => "message-Security_running-config_changed"
				add_field => {
				"event_description" => "running configuration changed."
					"[event][id]" => "Security_running-config_changed"
					"[rsa][message][id1]" => "Security_running-config_changed"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security_time_changed
		# line in RSA: <event_source>Security: Time is updated by <network_service> server "<application>" from  "<fld1>" to "<fld2>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}Security: Time is updated by %{network_service} server \"%{application}\" from  \"%{fld1}\" to \"%{fld2}\"" }
				id => "message-Security_time_changed"
				add_field => {
				"event_description" => "Time is updated"
					"[event][id]" => "Security_time_changed"
					"[rsa][message][id1]" => "Security_time_changed"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security_New_User_Added
		# line in RSA: <logip> Security: user <username> added by <host> from <network_service> session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} Security: user %{username} added by %{host} from %{network_service} session." }
				id => "message-Security_New_User_Added"
				add_field => {
				"event_description" => "New User added."
					"[event][id]" => "Security_New_User_Added"
					"[rsa][message][id1]" => "Security_New_User_Added"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security_SSH_login_successful
		# line in RSA:  <event_source> Security: SSH login by <username> from src IP <saddr>{,| from} src MAC <smacaddr> { to <info> using RSA as Server Host Key.| <state> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_source>[^\s]*)[\s]+Security:[\s]+SSH[\s]+login[\s]+by[\s]+(?<username>[^\s]*)[\s]+from[\s]+src[\s]+IP[\s]+(?<saddr>[^,\s]*)(,|[\s]*from)[\s]+src[\s]+MAC[\s]+(?<smacaddr>[^\s]*)[\s]+([\s]*to[\s]+(?<info>[^\s]*)[\s]+using[\s]+RSA[\s]+as[\s]+Server[\s]+Host[\s]+Key\.|[\s]*(?<state>[^\s]*)[\s]+)$" }
				id => "message-Security_SSH_login_successful"
				add_field => {
				"event_description" => "SSH Login"
					"[event][id]" => "Security_SSH_login_successful"
					"[rsa][message][id1]" => "Security_SSH_login_successful"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security_SSH_logout_successful
		# line in RSA: <event_source> Security: SSH logout by <username> from src IP <saddr>{,| from} { src MAC <smacaddr> from <info> using RSA as Server Host Key.| src MAC <smacaddr> <state> | src MAC <smacaddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_source>[^\s]*)[\s]+Security:[\s]+SSH[\s]+logout[\s]+by[\s]+(?<username>[^\s]*)[\s]+from[\s]+src[\s]+IP[\s]+(?<saddr>[^,\s]*)(,|[\s]*from)[\s]+([\s]*src[\s]+MAC[\s]+(?<smacaddr>[^\s]*)[\s]+from[\s]+(?<info>[^\s]*)[\s]+using[\s]+RSA[\s]+as[\s]+Server[\s]+Host[\s]+Key\.|[\s]*src[\s]+MAC[\s]+(?<smacaddr>[^\s]*)[\s]+(?<state>[^\s]*)[\s]+|[\s]*src[\s]+MAC[\s]+(?<smacaddr>.*))$" }
				id => "message-Security_SSH_logout_successful"
				add_field => {
				"event_description" => "SSH Logout"
					"[event][id]" => "Security_SSH_logout_successful"
					"[rsa][message][id1]" => "Security_SSH_logout_successful"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security_SSH_session_rejected
		# line in RSA: <event_source> Security: Access to <privilege> is rejected for ssh session due to Incorrect username or password
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} Security: Access to %{privilege} is rejected for ssh session due to Incorrect username or password" }
				id => "message-Security_SSH_session_rejected"
				add_field => {
				"event_description" => "SSH session rejected"
					"[event][id]" => "Security_SSH_session_rejected"
					"[rsa][message][id1]" => "Security_SSH_session_rejected"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security_Telnet_login_successful
		# line in RSA: <logip> Security: telnet {login <fld1> | login} from src IP <saddr>, src MAC <smacaddr> to <info> mode 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<logip>[^\s]*)[\s]+Security:[\s]+telnet[\s]+(login[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*login)[\s]+from[\s]+src[\s]+IP[\s]+(?<saddr>[^,]*),[\s]+src[\s]+MAC[\s]+(?<smacaddr>[^\s]*)[\s]+to[\s]+(?<info>[^\s]*)[\s]+mode[\s]+$" }
				id => "message-Security_Telnet_login_successful"
				add_field => {
				"user_address" => "%{saddr}"
				"event_description" => "Successful Telnet login for user."
					"[event][id]" => "Security_Telnet_login_successful"
					"[rsa][message][id1]" => "Security_Telnet_login_successful"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security_Telnet_logout_successful
		# line in RSA: <logip> Security: telnet logout from src IP <saddr>, src MAC <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} Security: telnet logout from src IP %{saddr}, src MAC %{smacaddr}" }
				id => "message-Security_Telnet_logout_successful"
				add_field => {
				"event_description" => "Successful Telnet logout for user."
					"[event][id]" => "Security_Telnet_logout_successful"
					"[rsa][message][id1]" => "Security_Telnet_logout_successful"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security_Web_login_successful
		# line in RSA: <logip> Security: Web login by <username> from src IP <saddr> src MAC <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} Security: Web login by %{username} from src IP %{saddr} src MAC %{smacaddr}" }
				id => "message-Security_Web_login_successful"
				add_field => {
				"c_username" => "%{username}"
				"user_address" => "%{saddr}"
				"event_description" => "Successful Web login for the user."
					"[event][id]" => "Security_Web_login_successful"
					"[rsa][message][id1]" => "Security_Web_login_successful"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security:01
		# line in RSA: <event_source> Security: <event_description> by un-authenticated telnet user from src IP <saddr> from src MAC <smacaddr> {from|to} <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_source>[^\s]*)[\s]+Security:[\s]+(?<event_description>[^\s]*)[\s]+by[\s]+un\-authenticated[\s]+telnet[\s]+user[\s]+from[\s]+src[\s]+IP[\s]+(?<saddr>[^\s]*)[\s]+from[\s]+src[\s]+MAC[\s]+(?<smacaddr>[^\s]*)[\s]+(from|to)[\s]+(?<info>.*)$" }
				id => "message-Security:01"
				add_field => {
					"[event][id]" => "Security:01"
					"[rsa][message][id1]" => "Security:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE Security
		# line in RSA: <event_source> Security: <event_description> {by user <username> from src IP <saddr>|from src IP <saddr>}<action>, <fld1> attempt(s)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_source>[^\s]*)[\s]+Security:[\s]+(?<event_description>[^\s]*)[\s]+(by[\s]+user[\s]+(?<username>[^\s]*)[\s]+from[\s]+src[\s]+IP[\s]+(?<saddr>.*)|from[\s]+src[\s]+IP[\s]+(?<saddr>.*))(?<action>[^,]*),[\s]+(?<fld1>[^\s]*)[\s]+attempt\(s\)$" }
				id => "message-Security"
				add_field => {
					"[event][id]" => "Security"
					"[rsa][message][id1]" => "Security"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA: <logip> SNMP: Auth. failure, intruder IP:  <saddr>
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{logip} SNMP: Auth. failure, intruder IP:  %{saddr}" }
			id => "msgParserId21"
			add_field => {
				"user_address" => "%{saddr}"
				"event_description" => "SNMP authorization failure."
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: <logip> startup-config was changed from <network_service> client <saddr>
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{logip} startup-config was changed from %{network_service} client %{saddr}" }
			id => "msgParserId22"
			add_field => {
				"event_description" => "Start-up configuration changed."
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "STP" {
		# MESSAGE STP_Bridge_Status
		# line in RSA: <logip> STP: VLAN <vlan> Port <fld1> Bridge TC Event (<status>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} STP: VLAN %{vlan} Port %{fld1} Bridge TC Event (%{status})" }
				id => "message-STP_Bridge_Status"
				add_field => {
				"event_description" => "Bridge TC Event."
					"[event][id]" => "STP_Bridge_Status"
					"[rsa][message][id1]" => "STP_Bridge_Status"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE STP_VLAN_Startup_State
		# line in RSA:  <logip> STP: VLAN <vlan> Port <portname> STP State -> <status> (<state>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} STP: VLAN %{vlan} Port %{portname} STP State -> %{status} (%{state})" }
				id => "message-STP_VLAN_Startup_State"
				add_field => {
				"event_description" => "VLAN Startup State status"
					"[event][id]" => "STP_VLAN_Startup_State"
					"[rsa][message][id1]" => "STP_VLAN_Startup_State"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE STP_VLAN_New_RootBridge
		# line in RSA: Turner_Stroud STP: VLAN <vlan> New RootBridge: <fld1> RootPort: <fld2> (<fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Turner_Stroud STP: VLAN %{vlan} New RootBridge: %{fld1} RootPort: %{fld2} (%{fld3})" }
				id => "message-STP_VLAN_New_RootBridge"
				add_field => {
					"[event][id]" => "STP_VLAN_New_RootBridge"
					"[rsa][message][id1]" => "STP_VLAN_New_RootBridge"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE STP_VLAN_RootBridge
		# line in RSA: Turner_Stroud STP: VLAN <vlan> Bridge is RootBridge: <fld1> (<fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Turner_Stroud STP: VLAN %{vlan} Bridge is RootBridge: %{fld1} (%{fld3})" }
				id => "message-STP_VLAN_RootBridge"
				add_field => {
					"[event][id]" => "STP_VLAN_RootBridge"
					"[rsa][message][id1]" => "STP_VLAN_RootBridge"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "System" {
		# MESSAGE System_Fan_Speed_Changed
		# line in RSA:  <event_source> System: Fan speed changed automatically to <state> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} System: Fan speed changed automatically to %{state}" }
				id => "message-System_Fan_Speed_Changed"
				add_field => {
				"event_description" => "Fan speed changed automatically"
					"[event][id]" => "System_Fan_Speed_Changed"
					"[rsa][message][id1]" => "System_Fan_Speed_Changed"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE System_Ethernet_Interface_down
		# line in RSA:  <event_source> System: Interface ethernet <interface>, state down
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} System: Interface ethernet %{interface}, state down" }
				id => "message-System_Ethernet_Interface_down"
				add_field => {
				"event_description" => "Ethernet interface state change to down"
					"[event][id]" => "System_Ethernet_Interface_down"
					"[rsa][message][id1]" => "System_Ethernet_Interface_down"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE System_Ethernet_Interface_up
		# line in RSA:  <logip> System: Interface ethernet <interface>, state up 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} System: Interface ethernet %{interface}, state up" }
				id => "message-System_Ethernet_Interface_up"
				add_field => {
				"event_description" => "Ethernet interface state change to up"
				"state" => "up"
					"[event][id]" => "System_Ethernet_Interface_up"
					"[rsa][message][id1]" => "System_Ethernet_Interface_up"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE System_Reboot_Warm_Start
		# line in RSA: <logip> System: Warm start 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} System: Warm start" }
				id => "message-System_Reboot_Warm_Start"
				add_field => {
				"event_description" => "Warm Start."
					"[event][id]" => "System_Reboot_Warm_Start"
					"[rsa][message][id1]" => "System_Reboot_Warm_Start"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE System_Stack_Power_supply_status
		# line in RSA: <logip> System: Stack unit <serial_number>   Power supply <fld2>  is <status>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} System: Stack unit %{serial_number}   Power supply %{fld2}  is %{status}" }
				id => "message-System_Stack_Power_supply_status"
				add_field => {
				"event_description" => "Power Supply status for the stack unit."
					"[event][id]" => "System_Stack_Power_supply_status"
					"[rsa][message][id1]" => "System_Stack_Power_supply_status"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE System_Syslog_Enabled
		# line in RSA: <logip> System: Syslog operation enabled by <host> from <network_service> session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} System: Syslog operation enabled by %{host} from %{network_service} session." }
				id => "message-System_Syslog_Enabled"
				add_field => {
				"event_description" => "Syslog Enabled."
					"[event][id]" => "System_Syslog_Enabled"
					"[rsa][message][id1]" => "System_Syslog_Enabled"
					"[event][categoryid]" => "1701060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE System_Syslog_Disabled
		# line in RSA: <logip> System: Syslog operation disabled by <host> from <network_service> session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{logip} System: Syslog operation disabled by %{host} from %{network_service} session." }
				id => "message-System_Syslog_Disabled"
				add_field => {
				"event_description" => "Syslog Disabled."
					"[event][id]" => "System_Syslog_Disabled"
					"[rsa][message][id1]" => "System_Syslog_Disabled"
					"[event][categoryid]" => "1701070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE System:01
		# line in RSA:  <event_source> System: {Interface <interface>, <event_description>|<info>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_source>[^\s]*)[\s]+System:[\s]+(Interface[\s]+(?<interface>[^,]*),[\s]+(?<event_description>.*)|(?<info>.*))$" }
				id => "message-System:01"
				add_field => {
					"[event][id]" => "System:01"
					"[rsa][message][id1]" => "System:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId34
	# line in RSA:  <event_source>, Warning! <hostname> ARP table not in FINISH for <number> sec
	else if [logstash][msgparser][id] == "msgParserId34" {
		dissect {
			mapping => { "message" => "%{event_source}, Warning! %{hostname} ARP table not in FINISH for %{number} sec" }
			id => "msgParserId34"
			add_field => {
				"event_description" => "ARP table not in FINISH"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	# PARSER msgParserId35
	# line in RSA:  <logip> Web access by <username> from src IP <saddr> rejected, <number> attempt(s)
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "%{logip} Web access by %{username} from src IP %{saddr} rejected, %{number} attempt(s)" }
			id => "msgParserId35"
			add_field => {
				"c_username" => "%{username}"
				"user_address" => "%{saddr}"
				"event_description" => "Web Access rejected for user."
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "raslogd" {
		# MESSAGE raslogd
		# line in RSA:  <event_source>raslogd: <fld51>/<fld52>/<fld53>-<fld54>, [SEC-1193], <serial_number>, <fld3>, <severity>, <hostname>, Security violation: <action> failure attempt via <network_service>. IP Addr: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}raslogd: %{fld51}/%{fld52}/%{fld53}-%{fld54}, [SEC-1193], %{serial_number}, %{fld3}, %{severity}, %{hostname}, Security violation: %{action} failure attempt via %{network_service}. IP Addr: %{saddr}" }
				id => "message-raslogd"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Security violation: Login failure attempt"
					"[event][id]" => "raslogd"
					"[rsa][message][id1]" => "raslogd"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld51} %{fld52} %{fld53} %{fld54}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE raslogd:01
		# line in RSA:  <event_source>raslogd: AUDIT,<fld51>/<fld52>/<fld53>-<fld54> <fld55>, [SEC-3021], <severity>, SECURITY, <fld31>, <location_desc>, <fld11>, , , , , , , Event:<fld12>, Status: <disposition>, <fld13>: Failed login attempt via REMOTE, IP Addr: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}raslogd: AUDIT,%{fld51}/%{fld52}/%{fld53}-%{fld54} %{fld55}, [SEC-3021], %{severity}, SECURITY, %{fld31}, %{location_desc}, %{fld11}, , , , , , , Event:%{fld12}, Status: %{disposition}, %{fld13}: Failed login attempt via REMOTE, IP Addr: %{saddr}" }
				id => "message-raslogd:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Failed login attempt."
					"[event][id]" => "raslogd:01"
					"[rsa][message][id1]" => "raslogd:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld51} %{fld52} %{fld53} %{fld54}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE raslogd:02
		# line in RSA:  <event_source>raslogd: AUDIT, <fld51>/<fld52>/<fld53>-<fld54> <fld55>, [AN-1014], <severity>, FABRIC, <fld20>, <location_desc>, <fld11>, , , , , , , Frame timeout detected, tx port <sport> rx port <dport>, sid <fld23>, did <fld24>, timestamp <fld25>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}raslogd: AUDIT, %{fld51}/%{fld52}/%{fld53}-%{fld54} %{fld55}, [AN-1014], %{severity}, FABRIC, %{fld20}, %{location_desc}, %{fld11}, , , , , , , Frame timeout detected, tx port %{sport} rx port %{dport}, sid %{fld23}, did %{fld24}, timestamp %{fld25}" }
				id => "message-raslogd:02"
				add_field => {
				"event_description" => "Frame timeout detected."
					"[event][id]" => "raslogd:02"
					"[rsa][message][id1]" => "raslogd:02"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{fld51} %{fld52} %{fld53} %{fld54}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE raslogd:03
		# line in RSA:  <event_source>raslogd: <fld51>/<fld52>/<fld53>-<fld54>, [LOG-1004], <serial_number>, <fld1>, <severity>, <hostname>, Log message AN-1014 flooding detected and blocked.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}raslogd: %{fld51}/%{fld52}/%{fld53}-%{fld54}, [LOG-1004], %{serial_number}, %{fld1}, %{severity}, %{hostname}, Log message AN-1014 flooding detected and blocked." }
				id => "message-raslogd:03"
				add_field => {
				"event_description" => "Log message AN-1014 flooding detected and blocked."
					"[event][id]" => "raslogd:03"
					"[rsa][message][id1]" => "raslogd:03"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{fld51} %{fld52} %{fld53} %{fld54}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE raslogd:04
		# line in RSA:  <event_source>raslogd: <fld51>/<fld52>/<fld53>-<fld54>, [C2-1014], <serial_number>, <fld1>, <severity>, <hostname>, Link Reset on Port <fld2>,P<sport>(<fld3>) vc_no=<fld4> crd(s)lost=<fld5> auto trigger.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}raslogd: %{fld51}/%{fld52}/%{fld53}-%{fld54}, [C2-1014], %{serial_number}, %{fld1}, %{severity}, %{hostname}, Link Reset on Port %{fld2},P%{sport}(%{fld3}) vc_no=%{fld4} crd(s)lost=%{fld5} auto trigger." }
				id => "message-raslogd:04"
				add_field => {
				"event_description" => "Link Reset on Port."
					"[event][id]" => "raslogd:04"
					"[rsa][message][id1]" => "raslogd:04"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{fld51} %{fld52} %{fld53} %{fld54}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMd HH:m:s" ] }
			}
		}
		# MESSAGE raslogd:05
		# line in RSA:  <event_source>raslogd: [<fld5>][<fld6>][<fld7>][<fld8> value="<serial_number>"][<fld9>][<fld10> value="<severity>"][<fld11>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}raslogd: [%{fld5}][%{fld6}][%{fld7}][%{fld8} value=\"%{serial_number}\"][%{fld9}][%{fld10} value=\"%{severity}\"][%{fld11}] %{event_description}" }
				id => "message-raslogd:05"
				add_field => {
					"[event][id]" => "raslogd:05"
					"[rsa][message][id1]" => "raslogd:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "NTP" {
		# MESSAGE NTP_sym_active_association
		# line in RSA:  <event_source> NTP: sym_active association is mobilized for <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} NTP: sym_active association is mobilized for %{saddr}" }
				id => "message-NTP_sym_active_association"
				add_field => {
					"[event][id]" => "NTP_sym_active_association"
					"[rsa][message][id1]" => "NTP_sym_active_association"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE NTP_System_clock
		# line in RSA:  <event_source> NTP: System clock is synchronized to <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} NTP: System clock is synchronized to %{saddr}" }
				id => "message-NTP_System_clock"
				add_field => {
					"[event][id]" => "NTP_System_clock"
					"[rsa][message][id1]" => "NTP_System_clock"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE NTP
		# line in RSA:  <event_source> NTP: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} NTP: %{info}" }
				id => "message-NTP"
				add_field => {
					"[event][id]" => "NTP"
					"[rsa][message][id1]" => "NTP"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "PORT" {
		# MESSAGE PORT
		# line in RSA:  <event_source> PORT: <interface> disabled by <username> from <network_service> session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} PORT: %{interface} disabled by %{username} from %{network_service} session." }
				id => "message-PORT"
				add_field => {
					"[event][id]" => "PORT"
					"[rsa][message][id1]" => "PORT"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE PORT:01
		# line in RSA:  <event_source> PORT: <interface> enabled by <username> from <network_service> session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} PORT: %{interface} enabled by %{username} from %{network_service} session." }
				id => "message-PORT:01"
				add_field => {
					"[event][id]" => "PORT:01"
					"[rsa][message][id1]" => "PORT:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
		# MESSAGE PORT:02
		# line in RSA:  <event_source> PORT: <interface>, added ip address <saddr> by <username> from <network_service> session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source} PORT: %{interface}, added ip address %{saddr} by %{username} from %{network_service} session." }
				id => "message-PORT:02"
				add_field => {
					"[event][id]" => "PORT:02"
					"[rsa][message][id1]" => "PORT:02"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA:  <event_source> VLAN: Id <vlan> added by <username> from <network_service> session.
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "%{event_source} VLAN: Id %{vlan} added by %{username} from %{network_service} session." }
			id => "msgParserId49"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMMd H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[event_cat]"
		destination => "[event_cat_name]"
		dictionary => {
			"1401060000" => "User.Activity.Successful Logins"
			"1401070000" => "User.Activity.Logoff"
		}
		fallback => "Other.Default"
		override => true
	}
}
filter {
	translate {
		field => "[event_description]"
		destination => "[event_cat]"
		dictionary => {
			"telnet login" => "1401060000"
			"telnet logout" => "1401070000"
		}
		fallback => "1901000000"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-brocadeswitchmsg.json"
#			template_name => "brocadeswitch_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "dragonids"
			"[observer][name]" => "Dragon IDS"
			"[observer][type]" => "IDS"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %{DRAGONIDS|dragonids}-<hdata> <alarmname> <sensorname> <hsaddr> <hdaddr> <hsport> <hdport> <hprot> <data> <messageid> <!payload:sensorname>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%(DRAGONIDS|dragonids)\-(?<hdata>[^\s]*)[\s]+(?<alarmname>[^\s]*)[\s]+(?<message>(?<sensorname>[^\s]*)[\s]+(?<hsaddr>[^\s]*)[\s]+(?<hdaddr>[^\s]*)[\s]+(?<hsport>[^\s]*)[\s]+(?<hdport>[^\s]*)[\s]+(?<hprot>[^\s]*)[\s]+(?<data>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %{ DRAGONIDS | dragonids } <alarmname> <sensorname> <hsaddr> <hdaddr> <hsport> <hdport> <hprot> <data> <messageid> <!payload:sensorname>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%([\s]*DRAGONIDS[\s]+|[\s]*dragonids[\s]+)[\s]+(?<alarmname>[^\s]*)[\s]+(?<message>(?<sensorname>[^\s]*)[\s]+(?<hsaddr>[^\s]*)[\s]+(?<hdaddr>[^\s]*)[\s]+(?<hsport>[^\s]*)[\s]+(?<hdport>[^\s]*)[\s]+(?<hprot>[^\s]*)[\s]+(?<data>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %{ DRAGONIDS | dragonids } <alarmname> <sensorname> <hsaddr> <hdaddr> <hsport> <hdport> <hprot> <data> <messageid>+<hsigid> <!payload:sensorname>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%([\s]*DRAGONIDS[\s]+|[\s]*dragonids[\s]+)[\s]+(?<alarmname>[^\s]*)[\s]+(?<message>(?<sensorname>[^\s]*)[\s]+(?<hsaddr>[^\s]*)[\s]+(?<hdaddr>[^\s]*)[\s]+(?<hsport>[^\s]*)[\s]+(?<hdport>[^\s]*)[\s]+(?<hprot>[^\s]*)[\s]+(?<data>[^\s]*)[\s]+(?<messageid>[^\+]*)\+(?<hsigid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %{ DRAGONIDS | dragonids }-<hdata> <alarmname> <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%([\s]*DRAGONIDS[\s]+|[\s]*dragonids[\s]+)\-(?<hdata>[^\s]*)[\s]+(?<alarmname>[^\s]*)[\s]+(?<message>.*)$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "DragonIDS_AlertLog"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %{ DRAGONIDS | dragonids } <alarmname> <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%([\s]*DRAGONIDS[\s]+|[\s]*dragonids[\s]+)[\s]+(?<alarmname>[^\s]*)[\s]+(?<message>.*)$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "DragonIDS_AlertLog"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_dragonidsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:    <sensor> <saddr> <daddr> <sport> <dport> <protocol> <direction> <signame> <fld1> {(<event_description>)|<event_description>}
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^[\s]*(?<sensor>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<direction>[^\s]*)[\s]+(?<signame>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(\((?<event_description>[^\)]*)\)|(?<event_description>.*))$" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:    <sensor> <saddr> <daddr> <sport> <dport> <protocol> <direction> <signame> <event_time> {(<event_description>)|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId1" {
		grok {
			match => { "message" => "^[\s]*(?<sensor>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<direction>[^\s]*)[\s]+(?<signame>[^\s]*)[\s]+(?<event_time>[^\s]*)[\s]+(\((?<event_description>[^\)]*)\)|(?<event_description>.*))$" }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{event_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA:    <sensor> <saddr> <daddr> <sport> <dport> <protocol> <direction> <signame> <fld1> {(<event_description>)|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId2" {
		grok {
			match => { "message" => "^[\s]*(?<sensor>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<direction>[^\s]*)[\s]+(?<signame>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(\((?<event_description>[^\)]*)\)|(?<event_description>.*))$" }
			id => "msgParserId2"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA:    <sensor> <saddr> <daddr> <sport> <dport> <protocol> <direction> <signame> <fld1> {(<event_description>)|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^[\s]*(?<sensor>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<direction>[^\s]*)[\s]+(?<signame>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(\((?<event_description>[^\)]*)\)|(?<event_description>.*))$" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:    <sensor> <saddr> <daddr> <sport> <dport> <protocol> <direction> <signame> <fld1> {(<event_description>)|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^[\s]*(?<sensor>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<direction>[^\s]*)[\s]+(?<signame>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(\((?<event_description>[^\)]*)\)|(?<event_description>.*))$" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd H:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA:    <sensor> <saddr> <daddr> <sport> <dport> <protocol> <direction> <signame> <fld1> {(<event_description>)|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId5" {
		grok {
			match => { "message" => "^[\s]*(?<sensor>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<direction>[^\s]*)[\s]+(?<signame>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(\((?<event_description>[^\)]*)\)|(?<event_description>.*))$" }
			id => "msgParserId5"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd H:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA:    <sensor> <saddr> <daddr> <sport> <dport> <protocol> <direction> <signame> <event_time> {(<event_description>)|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^[\s]*(?<sensor>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<direction>[^\s]*)[\s]+(?<signame>[^\s]*)[\s]+(?<event_time>[^\s]*)[\s]+(\((?<event_description>[^\)]*)\)|(?<event_description>.*))$" }
			id => "msgParserId6"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{event_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd H:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA:    <sensor> <saddr> <daddr> <sport> <dport> <protocol> <direction> <signame> <event_time> {(<event_description>)|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId7" {
		grok {
			match => { "message" => "^[\s]*(?<sensor>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<direction>[^\s]*)[\s]+(?<signame>[^\s]*)[\s]+(?<event_time>[^\s]*)[\s]+(\((?<event_description>[^\)]*)\)|(?<event_description>.*))$" }
			id => "msgParserId7"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{event_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[protocol]"
		destination => "[protocol]"
		dictionary => {
			"1" => "ICMP"
			"6" => "TCP"
			"17" => "UDP"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_dragonidsmsg.json"
#			template_name => "dragonids_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

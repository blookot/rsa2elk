# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "vmware_esx_esxi"
			"[observer][name]" => "VMware ESX / ESXi"
			"[observer][type]" => "Virtualization"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hmonth> <hday> <year> <htime> %VMWARE_ESX EVENT: Time=[<hdatetime>],DeviceType=<product>,Type=<messageid>,<!payload:hdatetime>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<year>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+%VMWARE_ESX[\s]+EVENT:[\s]+Time=\[(?<message>(?<hdatetime>[^\]]*)\],DeviceType=(?<product>[^,]*),Type=(?<messageid>[^,]*),(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hday> <year> <htime> %VMWARE_ESX TASK: Time=[<hdatetime>],Description=<messageid>,<!payload:hdatetime>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<year>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+%VMWARE_ESX[\s]+TASK:[\s]+Time=\[(?<message>(?<hdatetime>[^\]]*)\],Description=(?<messageid>[^,]*),(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <fld1> <hfld2> <hfld3> <messageid>: [<hdate> <htime>.<hfld4> <hfld5> <hseverity> <hfld6>] <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<fld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+\[(?<hdate>[^\s]*)[\s]+(?<htime>[^\.]*)\.(?<hfld4>[^\s]*)[\s]+(?<hfld5>[^\s]*)[\s]+(?<hseverity>[^\s]*)[\s]+(?<hfld6>[^\]]*)\][\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <fld1>T<fld2>Z <hhostname> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<fld1>[^T]*)T(?<fld2>[^Z]*)Z[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <fld1>T<fld2>Z <hhostname> <messageid>[<fld3>]:<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<fld1>[^T]*)T(?<fld2>[^Z]*)Z[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<fld3>[^\]]*)\]:(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: Section for VMware <fld1>  <hhostname> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^Section[\s]+for[\s]+VMware[\s]+(?<fld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <hhostname> <messageid>[<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <fld1> <fld2> <fld3> <hhostname> <messageid>[<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9998
	# line in RSA: <hmonth> <hday> <year> <htime> %VMWARE_ESX TASK: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{year} %{htime} %VMWARE_ESX TASK: %{message}" }
			id => "header-9998"
			add_field => {
				"[rsa][header][id]" => "9998"
				"[rsa][message][id2]" => "VMWareESX_TVM_TASK"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: <hmonth> <hday> <year> <htime> %VMWARE_ESX EVENT: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{year} %{htime} %VMWARE_ESX EVENT: %{message}" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "VMWareESX_TVM_EVENT"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <hmonth> <hdate> <htime> <hhostname> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: <fld1>T<fld2>Z <hhostname> <hfld1>: <messageid> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<fld1>[^T]*)T(?<fld2>[^Z]*)Z[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<hfld1>[^:]*):[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-vmware_esx_esximsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld20>],Description=<event_description>,EventChainId=<id>,Key=<operation_id>,QueuedAt=[<event_queue_time>],State=<result>,Name=<event_type>,Target=<vm_target>,StartedAt=[<starttime>]
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{fld20}],Description=%{event_description},EventChainId=%{id},Key=%{operation_id},QueuedAt=[%{event_queue_time}],State=%{result},Name=%{event_type},Target=%{vm_target},StartedAt=[%{starttime}]" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <fld20>],Description=<event_description>,EventChainId=<id>,Key=<operation_id>,QueuedAt=[<event_queue_time>],State=<result>,Name=<event_type>,Target=<vm_target>,StartedAt=[<starttime>]
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{fld20}],Description=%{event_description},EventChainId=%{id},Key=%{operation_id},QueuedAt=[%{event_queue_time}],State=%{result},Name=%{event_type},Target=%{vm_target},StartedAt=[%{starttime}]" }
			id => "msgParserId1"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <fld20>],Description=<event_description>,EventChainId=<id>,Key=<operation_id>,QueuedAt=[<event_queue_time>],State=<result>,Name=<event_type>,Target=<vm_target>,StartedAt=[<starttime>]
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{fld20}],Description=%{event_description},EventChainId=%{id},Key=%{operation_id},QueuedAt=[%{event_queue_time}],State=%{result},Name=%{event_type},Target=%{vm_target},StartedAt=[%{starttime}]" }
			id => "msgParserId2"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld20>],Description=<event_description>,EventChainId=<id>,Key=<operation_id>,QueuedAt=[<event_queue_time>],State=<result>,Name=<event_type>,Target=<vm_target>,StartedAt=[<starttime>]
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{fld20}],Description=%{event_description},EventChainId=%{id},Key=%{operation_id},QueuedAt=[%{event_queue_time}],State=%{result},Name=%{event_type},Target=%{vm_target},StartedAt=[%{starttime}]" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Stop"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <fld20>],Description=<event_description>,EventChainId=<id>,Key=<operation_id>,QueuedAt=[<event_queue_time>],State=<result>,Name=<event_type>,Target=<vm_target>,StartedAt=[<starttime>]
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{fld20}],Description=%{event_description},EventChainId=%{id},Key=%{operation_id},QueuedAt=[%{event_queue_time}],State=%{result},Name=%{event_type},Target=%{vm_target},StartedAt=[%{starttime}]" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "Time"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <fld20>],Description=<event_description>,EventChainId=<id>,Key=<operation_id>,QueuedAt=[<event_queue_time>],State=<result>,Name=<event_type>,Target=<vm_target>,StartedAt=[<starttime>]
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{fld20}],Description=%{event_description},EventChainId=%{id},Key=%{operation_id},QueuedAt=[%{event_queue_time}],State=%{result},Name=%{event_type},Target=%{vm_target},StartedAt=[%{starttime}]" }
			id => "msgParserId5"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId6"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId7"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId8"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId9"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId10"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId11"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId12"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId13"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId14"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId15"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId16"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId17"
			add_field => {
				"ec_subject" => "Password"
				"ec_activity" => "Modify"
				"ec_theme" => "Password"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId18"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <fld20>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{fld20}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId19"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA: <fld1>],DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "%{fld1}],DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId20"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "cimserver" {
		# MESSAGE cimserver:01
		# line in RSA:  <agent>: Still waiting for poll thread for node <fld19> to start <fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: Still waiting for poll thread for node %{fld19} to start %{fld20}" }
				id => "message-cimserver:01"
				add_field => {
					"[event][id]" => "cimserver:01"
					"[rsa][message][id1]" => "cimserver:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE cimserver:02
		# line in RSA:  <agent>: trying to {popen | open} <fld21>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^:]*):[\s]+trying[\s]+to[\s]+(popen[\s]+|[\s]*open)[\s]+(?<fld21>.*)$" }
				id => "message-cimserver:02"
				add_field => {
					"[event][id]" => "cimserver:02"
					"[rsa][message][id1]" => "cimserver:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE cimserver:03
		# line in RSA:  <agent>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{event_description}" }
				id => "message-cimserver:03"
				add_field => {
					"[event][id]" => "cimserver:03"
					"[rsa][message][id1]" => "cimserver:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Hostd" {
		# MESSAGE Hostd:01
		# line in RSA:   <agent>: <application>: creating new subrequest <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{application}: creating new subrequest %{fld2}" }
				id => "message-Hostd:01"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "creating new subrequest"
					"[event][id]" => "Hostd:01"
					"[rsa][message][id1]" => "Hostd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:02
		# line in RSA:  <agent>: <fld1>: <application>: doing map lookup for user "<username>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{fld1}: %{application}: doing map lookup for user \"%{username}\"" }
				id => "message-Hostd:02"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "doing map lookup for user"
					"[event][id]" => "Hostd:02"
					"[rsa][message][id1]" => "Hostd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:03
		# line in RSA:  <agent>: <process>(<application>): authentication failure; logname=<fld1> uid=<uid> euid=<fld3> tty=<fld8> ruser=<c_username> rhost=<shost> user=<username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{process}(%{application}): authentication failure; logname=%{fld1} uid=%{uid} euid=%{fld3} tty=%{fld8} ruser=%{c_username} rhost=%{shost} user=%{username}" }
				id => "message-Hostd:03"
				add_field => {
				"hostname" => "%{hhostname}"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "authentication failure"
					"[event][id]" => "Hostd:03"
					"[rsa][message][id1]" => "Hostd:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:04
		# line in RSA:  <agent>: <process>(<application>): check pass; <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{process}(%{application}): check pass; %{event_description}" }
				id => "message-Hostd:04"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "Service"
				"ec_outcome" => "Failure"
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:04"
					"[rsa][message][id1]" => "Hostd:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:05
		# line in RSA:  <agent>: Rejected password for user <username> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: Rejected password for user %{username} from %{saddr}" }
				id => "message-Hostd:05"
				add_field => {
				"hostname" => "%{hhostname}"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
				"event_description" => "Rejected password"
					"[event][id]" => "Hostd:05"
					"[rsa][message][id1]" => "Hostd:05"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:06
		# line in RSA:  <agent>: [<fld2>] <fld1>:Validate -> Valid {evaluation|license} detected for <application> <fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^:]*):[\s]+\[(?<fld2>[^\]]*)\][\s]+(?<fld1>[^:]*):Validate[\s]+\->[\s]+Valid[\s]+(evaluation|license)[\s]+detected[\s]+for[\s]+(?<application>[^\s]*)[\s]+(?<fld3>.*)$" }
				id => "message-Hostd:06"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Valid evaluation detected"
					"[event][id]" => "Hostd:06"
					"[rsa][message][id1]" => "Hostd:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:07
		# line in RSA:  <agent>: [<fld2>] New proxy client SSL(<protocol>(local=<saddr>:<sport>, peer=<daddr>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2}] New proxy client SSL(%{protocol}(local=%{saddr}:%{sport}, peer=%{daddr}:%{dport}" }
				id => "message-Hostd:07"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "New proxy client SSL"
					"[event][id]" => "Hostd:07"
					"[rsa][message][id1]" => "Hostd:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:08
		# line in RSA:  <agent>: [<fld2>] Group lookup failed for <group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2}] Group lookup failed for %{group}" }
				id => "message-Hostd:08"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Group lookup failed"
					"[event][id]" => "Hostd:08"
					"[rsa][message][id1]" => "Hostd:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:09
		# line in RSA:  <agent>: [<fld2>] Event <id> : Cannot login <username>@<saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2}] Event %{id} : Cannot login %{username}@%{saddr}" }
				id => "message-Hostd:09"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Cannot login"
					"[event][id]" => "Hostd:09"
					"[rsa][message][id1]" => "Hostd:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:10
		# line in RSA:  <agent>: [{<fld2> <severity> '<fld3>'|<fld2>}] HTTP Transaction failed on stream <protocol>(local=<saddr>:<sport>, peer=<daddr>:<dport>) with error <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^:]*):[\s]+\[((?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+'(?<fld3>[^']*)'|(?<fld2>[^\]]*))\][\s]+HTTP[\s]+Transaction[\s]+failed[\s]+on[\s]+stream[\s]+(?<protocol>[^\(]*)\(local=(?<saddr>[^:]*):(?<sport>[^,]*),[\s]+peer=(?<daddr>[^:]*):(?<dport>[^\)]*)\)[\s]+with[\s]+error[\s]+(?<info>.*)$" }
				id => "message-Hostd:10"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "HTTP Transaction failed"
					"[event][id]" => "Hostd:10"
					"[rsa][message][id1]" => "Hostd:10"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:11
		# line in RSA: <agent>: [<fld2>] Load: Loading existing file: <url> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2}] Load: Loading existing file: %{url}" }
				id => "message-Hostd:11"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:11"
					"[rsa][message][id1]" => "Hostd:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:12
		# line in RSA: <agent>: [<fld2>] <fld1>:[<fld3>] item: '<application>' State: '<result>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2}] %{fld1}:[%{fld3}] item: '%{application}' State: '%{result}'" }
				id => "message-Hostd:12"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:12"
					"[rsa][message][id1]" => "Hostd:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:13
		# line in RSA: <agent>: [<fld2>] SSL Handshake failed for stream <protocol>(local=<saddr>, peer=<daddr>), error=<result> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2}] SSL Handshake failed for stream %{protocol}(local=%{saddr}, peer=%{daddr}), error=%{result}" }
				id => "message-Hostd:13"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:13"
					"[rsa][message][id1]" => "Hostd:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:15
		# line in RSA:  <agent>: Accepted password for user <username> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: Accepted password for user %{username} from %{saddr}" }
				id => "message-Hostd:15"
				add_field => {
				"hostname" => "%{hhostname}"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
				"event_description" => "Accepted password"
					"[event][id]" => "Hostd:15"
					"[rsa][message][id1]" => "Hostd:15"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:17
		# line in RSA: <agent>: [<fld1><severity>'<fld2>'] Calculated {write|read} I/O size<fld3>for scsi<fld4>:<fld5>is out of range --<fld6>,prevBytes =<fld7>curBytes =<fld8>prevCommands =<fld9>curCommands =<fld10>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Hostd:18
		# line in RSA: <agent>: [<fld1>info {'<fld2>' opID=<fld3>user=<username>|'<fld2>' opID=<fld3>|'<fld2>'}] Activation [<fld4>] : Invoke done [<fld5>] on [<fld6>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):[\s]+\[(?<fld1>[^i]*)info[\s]+('(?<fld2>[^']*)'[\s]+opID=(?<fld3>[^u]*)user=(?<username>[^\]]*)|'(?<fld2>[^']*)'[\s]+opID=(?<fld3>[^\]]*)|'(?<fld2>[^']*)')\][\s]+Activation[\s]+\[(?<fld4>[^\]]*)\][\s]+:[\s]+Invoke[\s]+done[\s]+\[(?<fld5>[^\]]*)\][\s]+on[\s]+\[(?<fld6>[^\]]*)\]$" }
				id => "message-Hostd:18"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:18"
					"[rsa][message][id1]" => "Hostd:18"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:19
		# line in RSA: <agent>: [<fld1><severity>{'<fld2>' opID=<fld3> user=<username>|'<fld2>' opID=<fld3>|'<fld2>' user=<username>}] GetVffsInVFlashResource: VFFS volume [<fld4>] does not exist.
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Hostd:20
		# line in RSA: <agent>: [<fld1><severity>{'PropertyCollector' opID=<fld2>|'PropertyCollector'}] ComputeGUReq took<fld3>microSec
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Hostd:22
		# line in RSA: <agent>: [<fld1><severity>'<fld2>'] Failed to read header on stream <<io_obj p:<fld3>,<fld4>, <<<protocol>'<saddr>'>, <<TCP '<daddr>'>>:<fld7>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'%{fld2}'] Failed to read header on stream <io_obj p:%{fld3},%{fld4}, <%{protocol}'%{saddr}'>, <TCP '%{daddr}'>>:%{fld7}" }
				id => "message-Hostd:22"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:22"
					"[rsa][message][id1]" => "Hostd:22"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:21
		# line in RSA: <agent>: [<fld1><severity>'<fld3>' opID=<fld4>user=<username>]<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'%{fld3}' opID=%{fld4}user=%{username}]%{fld5}" }
				id => "message-Hostd:21"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:21"
					"[rsa][message][id1]" => "Hostd:21"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:14
		# line in RSA: <agent>: [<fld2> <severity> <fld3>] <event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2} %{severity} %{fld3}] %{event_description}" }
				id => "message-Hostd:14"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:14"
					"[rsa][message][id1]" => "Hostd:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hostd:33
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<username>|<fld2> sub=<fld3>}] Upgrade is required for virtual machine, version: <version>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<username>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+Upgrade[\s]+is[\s]+required[\s]+for[\s]+virtual[\s]+machine,[\s]+version:[\s]+(?<version>.*)$" }
				id => "message-Hostd:33"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:33"
					"[rsa][message][id1]" => "Hostd:33"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:32
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<username>|<fld2> sub=<fld3>}] ha-license-manager:Validate -> Valid license detected for "<product>" (<fld5>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<username>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+ha\-license\-manager:Validate[\s]+\->[\s]+Valid[\s]+license[\s]+detected[\s]+for[\s]+\"(?<product>[^\"]*)\"[\s]+\((?<fld5>[^\)]*)\)$" }
				id => "message-Hostd:32"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Valid license detected"
					"[event][id]" => "Hostd:32"
					"[rsa][message][id1]" => "Hostd:32"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:31
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<username>|<fld2> sub=<fld3>}] Load: Loading existing file: <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<username>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+Load:[\s]+Loading[\s]+existing[\s]+file:[\s]+(?<filename>.*)$" }
				id => "message-Hostd:31"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Loading existing file"
					"[event][id]" => "Hostd:31"
					"[rsa][message][id1]" => "Hostd:31"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:30
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<username>|<fld2> sub=<fld3>}] <fld5> : User <fld8>@<saddr> logged out (<fld6>, user agent: <user_agent>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<username>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+(?<fld5>[^\s]*)[\s]+:[\s]+User[\s]+(?<fld8>[^@]*)@(?<saddr>[^\s]*)[\s]+logged[\s]+out[\s]+\((?<fld6>[^,]*),[\s]+user[\s]+agent:[\s]+(?<user_agent>[^\)]*)\)$" }
				id => "message-Hostd:30"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:30"
					"[rsa][message][id1]" => "Hostd:30"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:29
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<username>|<fld2> sub=<fld3>}] UpdateFileInfo: Failed to find file size for <filename>: <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<username>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+UpdateFileInfo:[\s]+Failed[\s]+to[\s]+find[\s]+file[\s]+size[\s]+for[\s]+(?<filename>[^:]*):[\s]+(?<info>.*)$" }
				id => "message-Hostd:29"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Failed to find file size"
					"[event][id]" => "Hostd:29"
					"[rsa][message][id1]" => "Hostd:29"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:28
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<username>|<fld2> sub=<fld3>}] <fld5> : User <fld6>@<saddr> logged in as <user_agent>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<username>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+(?<fld5>[^\s]*)[\s]+:[\s]+User[\s]+(?<fld6>[^@]*)@(?<saddr>[^\s]*)[\s]+logged[\s]+in[\s]+as[\s]+(?<user_agent>.*)$" }
				id => "message-Hostd:28"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:28"
					"[rsa][message][id1]" => "Hostd:28"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:27
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<fld5>|<fld2> sub=<fld3>}] [Auth]: User <username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<fld5>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+\[Auth\]:[\s]+User[\s]+(?<username>.*)$" }
				id => "message-Hostd:27"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:27"
					"[rsa][message][id1]" => "Hostd:27"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:26
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<fld5>|<fld2> sub=<fld3>}] Task Completed : <fld6> Status <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<fld5>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+Task[\s]+Completed[\s]+:[\s]+(?<fld6>[^\s]*)[\s]+Status[\s]+(?<result>.*)$" }
				id => "message-Hostd:26"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:26"
					"[rsa][message][id1]" => "Hostd:26"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:25
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<fld5>|<fld2> sub=<fld3>}] Ticket issued for CIMOM version <version>, user <username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<fld5>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+Ticket[\s]+issued[\s]+for[\s]+CIMOM[\s]+version[\s]+(?<version>[^,]*),[\s]+user[\s]+(?<username>.*)$" }
				id => "message-Hostd:25"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Ticket issued for CIMOM version"
					"[event][id]" => "Hostd:25"
					"[rsa][message][id1]" => "Hostd:25"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:24
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<username>|<fld2> sub=<fld3>}] <fld8>, prevTime = <fld5> curTime = <fld6> previIOTime = <fld7>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<username>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+(?<fld8>[^,]*),[\s]+prevTime[\s]+=[\s]+(?<fld5>[^\s]*)[\s]+curTime[\s]+=[\s]+(?<fld6>[^\s]*)[\s]+previIOTime[\s]+=[\s]+(?<fld7>.*)$" }
				id => "message-Hostd:24"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:24"
					"[rsa][message][id1]" => "Hostd:24"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:23
		# line in RSA: <agent>:<severity> hostd[<fld1>] [{<fld2> sub=<fld3> opID=<fld4> user=<username>|<fld2> sub=<fld3>}] <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+hostd\[(?<fld1>[^\]]*)\][\s]+\[((?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\s]*)[\s]+opID=(?<fld4>[^\s]*)[\s]+user=(?<username>[^\]]*)|(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*))\][\s]+(?<event_description>.*)$" }
				id => "message-Hostd:23"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:23"
					"[rsa][message][id1]" => "Hostd:23"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Hostd:16
		# line in RSA: <agent>:<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{event_description}" }
				id => "message-Hostd:16"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Hostd:16"
					"[rsa][message][id1]" => "Hostd:16"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "hostd-probe" {
		# MESSAGE hostd-probe:05
		# line in RSA: <agent>: <severity> hostd-probe[<fld1>] [<fld2> <fld3>] Current working directory: <directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{severity} hostd-probe[%{fld1}] [%{fld2} %{fld3}] Current working directory: %{directory}" }
				id => "message-hostd-probe:05"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "hostd-probe:05"
					"[rsa][message][id1]" => "hostd-probe:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE hostd-probe:04
		# line in RSA: <agent>: <severity> hostd-probe[<fld1>] [<fld2> <fld3>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{severity} hostd-probe[%{fld1}] [%{fld2} %{fld3}] %{event_description}" }
				id => "message-hostd-probe:04"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "hostd-probe:04"
					"[rsa][message][id1]" => "hostd-probe:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE hostd-probe:03
		# line in RSA: <agent>: Section for VMware ESX, pid=<process_id>, version=<version>, build=<fld3>, option=<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: Section for VMware ESX, pid=%{process_id}, version=%{version}, build=%{fld3}, option=%{fld4}" }
				id => "message-hostd-probe:03"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "hostd-probe:03"
					"[rsa][message][id1]" => "hostd-probe:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE hostd-probe:02
		# line in RSA: <agent>: id=<fld2>, version=<version>, build=<fld3>, option=<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: id=%{fld2}, version=%{version}, build=%{fld3}, option=%{fld4}" }
				id => "message-hostd-probe:02"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "hostd-probe:02"
					"[rsa][message][id1]" => "hostd-probe:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE hostd-probe
		# line in RSA: <agent>: [<fld2> <severity> <fld3>] <event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2} %{severity} %{fld3}] %{event_description}" }
				id => "message-hostd-probe"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "hostd-probe"
					"[rsa][message][id1]" => "hostd-probe"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE hostd-probe:01
		# line in RSA: <agent>: <event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{event_description}" }
				id => "message-hostd-probe:01"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "hostd-probe:01"
					"[rsa][message][id1]" => "hostd-probe:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Rhttpproxy" {
		# MESSAGE Rhttpproxy:01
		# line in RSA: <agent>: [<fld1><severity>'<fld2>'] The client closed the stream, not unexpectedly.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'%{fld2}'] The client closed the stream, not unexpectedly." }
				id => "message-Rhttpproxy:01"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy:01"
					"[rsa][message][id1]" => "Rhttpproxy:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rhttpproxy:02
		# line in RSA: <agent>: [<fld1><severity>'<fld2>'] New proxy client {<<SSL(<<io_obj p:|<<io_obj p:}<fld3>,<fld4>, <<<protocol>'<saddr>:<sport>'>,{<<TCP '<daddr>:<dport>'>>)>|<<TCP '<daddr>:<dport>'>>)|<<TCP '<daddr>:<dport>'>>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Rhttpproxy:03
		# line in RSA: <agent>: [<fld1><severity>'<fld2>'] Connected to <shost> :<network_port>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'%{fld2}'] Connected to %{shost} :%{network_port}" }
				id => "message-Rhttpproxy:03"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy:03"
					"[rsa][message][id1]" => "Rhttpproxy:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rhttpproxy:04
		# line in RSA: <agent>: <severity> rhttpproxy[<fld1>] [<fld2> <fld3>] New proxy client {<<SSL(<<io_obj p:|<<io_obj p:}<fld5>,<fld4>, <<<protocol>'<saddr>:<sport>'>,{<<TCP '<daddr>:<dport>'>>)>|<<TCP '<daddr>:<dport>'>>)|<<TCP '<daddr>:<dport>'>>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):[\s]+(?<severity>[^\s]*)[\s]+rhttpproxy\[(?<fld1>[^\]]*)\][\s]+\[(?<fld2>[^\s]*)[\s]+(?<fld3>[^\]]*)\][\s]+New[\s]+proxy[\s]+client[\s]+(<SSL\(<io_obj[\s]+p:|<io_obj[\s]+p:)(?<fld5>[^,]*),(?<fld4>[^,]*),[\s]+<(?<protocol>[^']*)'(?<saddr>[^:]*):(?<sport>[^']*)'>,(<TCP[\s]+'(?<daddr>[^:]*):(?<dport>[^']*)'>>\)>|<TCP[\s]+'(?<daddr>[^:]*):(?<dport>[^']*)'>>\)|<TCP[\s]+'(?<daddr>[^:]*):(?<dport>[^']*)'>>)$" }
				id => "message-Rhttpproxy:04"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy:04"
					"[rsa][message][id1]" => "Rhttpproxy:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Rhttpproxy:05
		# line in RSA: <agent>: <severity> rhttpproxy[<fld1>] [<fld2> <fld3>] Connected to <shost>: <fld4> over <<io_obj p:<fld5>, <fld6>, <<<protocol>'<saddr>:<sport>'>, <<TCP '<daddr>:<dport>'>> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{severity} rhttpproxy[%{fld1}] [%{fld2} %{fld3}] Connected to %{shost}: %{fld4} over <io_obj p:%{fld5}, %{fld6}, <%{protocol}'%{saddr}:%{sport}'>, <TCP '%{daddr}:%{dport}'>>" }
				id => "message-Rhttpproxy:05"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy:05"
					"[rsa][message][id1]" => "Rhttpproxy:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Rhttpproxy:06
		# line in RSA: <agent>: <severity> rhttpproxy[<fld7>] [<fld2> <fld3>] Resolved endpoint : [<fld4>] _serverNamespace = <fld5> {_isRedirect = <fld6>|action = <action>} _port = <network_port>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):[\s]+(?<severity>[^\s]*)[\s]+rhttpproxy\[(?<fld7>[^\]]*)\][\s]+\[(?<fld2>[^\s]*)[\s]+(?<fld3>[^\]]*)\][\s]+Resolved[\s]+endpoint[\s]+:[\s]+\[(?<fld4>[^\]]*)\][\s]+_serverNamespace[\s]+=[\s]+(?<fld5>[^\s]*)[\s]+(_isRedirect[\s]+=[\s]+(?<fld6>[^\s]*)|action[\s]+=[\s]+(?<action>[^\s]*))[\s]+_port[\s]+=[\s]+(?<network_port>.*)$" }
				id => "message-Rhttpproxy:06"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy:06"
					"[rsa][message][id1]" => "Rhttpproxy:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Rhttpproxy:08
		# line in RSA: <agent>: <severity> rhttpproxy[<fld4>] [<fld2> <fld3>] SSL Handshake failed for stream <<SSL(<<io_obj p:<fld5>,<fld7>, <<<protocol>'<saddr>:<sport>'>, <<TCP '<daddr>:<dport>'>>)>: <fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{severity} rhttpproxy[%{fld4}] [%{fld2} %{fld3}] SSL Handshake failed for stream <SSL(<io_obj p:%{fld5},%{fld7}, <%{protocol}'%{saddr}:%{sport}'>, <TCP '%{daddr}:%{dport}'>>)>: %{fld6}" }
				id => "message-Rhttpproxy:08"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy:08"
					"[rsa][message][id1]" => "Rhttpproxy:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Rhttpproxy:07
		# line in RSA: <agent>: <severity> rhttpproxy[<fld4>] [<fld2> <fld3>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{severity} rhttpproxy[%{fld4}] [%{fld2} %{fld3}] %{event_description}" }
				id => "message-Rhttpproxy:07"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy:07"
					"[rsa][message][id1]" => "Rhttpproxy:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Rhttpproxy
		# line in RSA: <agent>: [<fld2> <severity> <fld3>] <event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2} %{severity} %{fld3}] %{event_description}" }
				id => "message-Rhttpproxy"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy"
					"[rsa][message][id1]" => "Rhttpproxy"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rhttpproxy:09
		# line in RSA: <agent>: Section for VMware ESX, pid=<process_id>, version=<version>, build=<fld3>, option=<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: Section for VMware ESX, pid=%{process_id}, version=%{version}, build=%{fld3}, option=%{fld4}" }
				id => "message-Rhttpproxy:09"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Rhttpproxy:09"
					"[rsa][message][id1]" => "Rhttpproxy:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Vpxa" {
		# MESSAGE Vpxa:01
		# line in RSA: <agent>: [<fld2> <severity> <fld3>] User agent is <application> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2} %{severity} %{fld3}] User agent is %{application}" }
				id => "message-Vpxa:01"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:01"
					"[rsa][message][id1]" => "Vpxa:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Vpxa:02
		# line in RSA:  <agent>: [<fld2> <severity> <fld3>] [<fld4>] Refreshing datastore with url <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2} %{severity} %{fld3}] [%{fld4}] Refreshing datastore with url %{url}" }
				id => "message-Vpxa:02"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Refreshing datastore with url"
					"[event][id]" => "Vpxa:02"
					"[rsa][message][id1]" => "Vpxa:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Vpxa:07
		# line in RSA: <agent>: [<fld1><severity>'<fld2>' opID=<fld3>] [Url] Resolved localPath<filename>to URL<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'%{fld2}' opID=%{fld3}] [Url] Resolved localPath%{filename}to URL%{url}" }
				id => "message-Vpxa:07"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:07"
					"[rsa][message][id1]" => "Vpxa:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Vpxa:08
		# line in RSA: <agent>: [<fld1><severity> '<fld2>' opID=<fld3>] [VpxaDatastore] url:<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity} '%{fld2}' opID=%{fld3}] [VpxaDatastore] url:%{url}" }
				id => "message-Vpxa:08"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:08"
					"[rsa][message][id1]" => "Vpxa:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Vpxa:09
		# line in RSA: <agent>: [<fld1><severity>'Default' opID=<fld2>] [UrlHelper::SetLocalIP] localip =<saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'Default' opID=%{fld2}] [UrlHelper::SetLocalIP] localip =%{saddr}" }
				id => "message-Vpxa:09"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:09"
					"[rsa][message][id1]" => "Vpxa:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Vpxa:10
		# line in RSA: <agent>: [<fld1><severity>'Default' opID=<fld2>] [UrlHelper::{SetNonDatastores|SetDatastores}]<fld3>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Vpxa:11
		# line in RSA: <agent>: [<fld1><severity>'<fld2>'] [<fld3>] Connection removed; cnx: <<io_obj p:<fld4>,<fld5>, <<<protocol>'<saddr>:<sport>'>, <<TCP '<daddr>:<dport>'>>;<fld8>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'%{fld2}'] [%{fld3}] Connection removed; cnx: <io_obj p:%{fld4},%{fld5}, <%{protocol}'%{saddr}:%{sport}'>, <TCP '%{daddr}:%{dport}'>>;%{fld8}" }
				id => "message-Vpxa:11"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Connection removed"
					"[event][id]" => "Vpxa:11"
					"[rsa][message][id1]" => "Vpxa:11"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Vpxa:12
		# line in RSA: <agent>:<severity> vpxa[<fld1>] [<fld2> sub=<fld3>] [<fld9>] Connection removed; cnx: <<io_obj p:<fld4>,<fld5>, <<<protocol>'<saddr>:<sport>'>, <<TCP '<daddr>:<dport>'>>;<fld8>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{severity} vpxa[%{fld1}] [%{fld2} sub=%{fld3}] [%{fld9}] Connection removed; cnx: <io_obj p:%{fld4},%{fld5}, <%{protocol}'%{saddr}:%{sport}'>, <TCP '%{daddr}:%{dport}'>>;%{fld8}" }
				id => "message-Vpxa:12"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Connection removed"
					"[event][id]" => "Vpxa:12"
					"[rsa][message][id1]" => "Vpxa:12"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Vpxa:13
		# line in RSA: <agent>:<severity> vpxa[<fld1>] [<fld2> sub=<fld3>] [Url] Resolved localPath<filename>to URL<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{severity} vpxa[%{fld1}] [%{fld2} sub=%{fld3}] [Url] Resolved localPath%{filename}to URL%{url}" }
				id => "message-Vpxa:13"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Resolved localPath"
					"[event][id]" => "Vpxa:13"
					"[rsa][message][id1]" => "Vpxa:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Vpxa:14
		# line in RSA: <agent>:<severity> vpxa[<fld1>] [<fld2> sub=<fld3>] [<fld4>] DsPathToLocalPath conversion: [<fld5>] <change_old> -> <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{severity} vpxa[%{fld1}] [%{fld2} sub=%{fld3}] [%{fld4}] DsPathToLocalPath conversion: [%{fld5}] %{change_old} -> %{change_new}" }
				id => "message-Vpxa:14"
				add_field => {
				"hostname" => "%{hhostname}"
				"change_attribute" => "filename"
					"[event][id]" => "Vpxa:14"
					"[rsa][message][id1]" => "Vpxa:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Vpxa:15
		# line in RSA: <agent>:<severity> vpxa[<fld1>] [<fld2> sub=<fld3>] [<fld4>] Refreshing datastore with url <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{severity} vpxa[%{fld1}] [%{fld2} sub=%{fld3}] [%{fld4}] Refreshing datastore with url %{url}" }
				id => "message-Vpxa:15"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Refreshing datastore with url"
				"change_attribute" => "filename"
					"[event][id]" => "Vpxa:15"
					"[rsa][message][id1]" => "Vpxa:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Vpxa:16
		# line in RSA: <agent>:<severity> vpxa[<fld1>] [<fld2> sub=<fld3>] [UrlHelper::{SetNonDatastores|SetDatastores}]<fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<severity>[^\s]*)[\s]+vpxa\[(?<fld1>[^\]]*)\][\s]+\[(?<fld2>[^\s]*)[\s]+sub=(?<fld3>[^\]]*)\][\s]+\[UrlHelper::(SetNonDatastores|SetDatastores)\](?<fld4>.*)$" }
				id => "message-Vpxa:16"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:16"
					"[rsa][message][id1]" => "Vpxa:16"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Vpxa:04
		# line in RSA: <agent>: [<fld2> <severity> <fld3>] [<fld4>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2} %{severity} %{fld3}] [%{fld4}] %{event_description}" }
				id => "message-Vpxa:04"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:04"
					"[rsa][message][id1]" => "Vpxa:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Vpxa:05
		# line in RSA: <agent>: [<fld2> <severity> <fld3>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld2} %{severity} %{fld3}] %{event_description}" }
				id => "message-Vpxa:05"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:05"
					"[rsa][message][id1]" => "Vpxa:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Vpxa:19
		# line in RSA: <agent>:<severity> vpxa[<fld1>] [<fld2> sub=<fld3>] [HostChanged] <fld4>:<hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{severity} vpxa[%{fld1}] [%{fld2} sub=%{fld3}] [HostChanged] %{fld4}:%{hostname}" }
				id => "message-Vpxa:19"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:19"
					"[rsa][message][id1]" => "Vpxa:19"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Vpxa:17
		# line in RSA: <agent>:<severity> vpxa[<fld1>] [<fld2> sub=<fld3> opID=<fld4>] [<fld5>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{severity} vpxa[%{fld1}] [%{fld2} sub=%{fld3} opID=%{fld4}] [%{fld5}] %{event_description}" }
				id => "message-Vpxa:17"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:17"
					"[rsa][message][id1]" => "Vpxa:17"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Vpxa:18
		# line in RSA: <agent>:<severity> vpxa[<fld1>] [<fld2> sub=<fld3>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{severity} vpxa[%{fld1}] [%{fld2} sub=%{fld3}] %{event_description}" }
				id => "message-Vpxa:18"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:18"
					"[rsa][message][id1]" => "Vpxa:18"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Vpxa:06
		# line in RSA: <agent>:<event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{event_description}" }
				id => "message-Vpxa:06"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Vpxa:06"
					"[rsa][message][id1]" => "Vpxa:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA:  <agent>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{agent}: %{event_description}" }
			id => "msgParserId23"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "vmkernel" {
		# MESSAGE vmkernel:01
		# line in RSA: <agent>:<fld1>)<severity>: Ipfix: IpfixPCParseID:<fld2>:IpfixPCParseID failed for<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})%{severity}: Ipfix: IpfixPCParseID:%{fld2}:IpfixPCParseID failed for%{fld3}" }
				id => "message-vmkernel:01"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:01"
					"[rsa][message][id1]" => "vmkernel:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:02
		# line in RSA: <agent>:<fld1>)World:<fld2>: VC opID<fld5>maps to vmkernel opID<fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})World:%{fld2}: VC opID%{fld5}maps to vmkernel opID%{fld6}" }
				id => "message-vmkernel:02"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:02"
					"[rsa][message][id1]" => "vmkernel:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:03
		# line in RSA: <agent>:<fld1>){ScsiDeviceIO:|NMP:}{<fld2>: Cmd(<fld3>)<fld4>, CmdSN<fld5>from world<fld6>|<fld2>:<fld3>: Cmd<fld4>(<fld5>)}to dev "<fld7>"{on path "<fld8>" Failed:<fld9>|failed<fld9>}{Valid sense data:<fld10>. Act:<fld11>|Valid sense data:<fld110>.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<fld1>[^\)]*)\)(ScsiDeviceIO:|NMP:)((?<fld2>[^:]*):[\s]+Cmd\((?<fld3>[^\)]*)\)(?<fld4>[^,]*),[\s]+CmdSN(?<fld5>[^f]*)from[\s]+world(?<fld6>[^t]*)|(?<fld2>[^:]*):(?<fld3>[^:]*):[\s]+Cmd(?<fld4>[^\(]*)\((?<fld5>[^\)]*)\))to[\s]+dev[\s]+\"(?<fld7>[^\"]*)\"(on[\s]+path[\s]+\"(?<fld8>[^\"]*)\"[\s]+Failed:(?<fld9>[^VV]*)|failed(?<fld9>[^VV]*))(Valid[\s]+sense[\s]+data:(?<fld10>[^\.]*)\.[\s]+Act:(?<fld11>.*)|Valid[\s]+sense[\s]+data:(?<fld110>[^\.]*)\.)$" }
				id => "message-vmkernel:03"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:03"
					"[rsa][message][id1]" => "vmkernel:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:04
		# line in RSA: <agent>:<fld1>)NetPort:<network_port>: enabled port<fld2>with mac<dmacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})NetPort:%{network_port}: enabled port%{fld2}with mac%{dmacaddr}" }
				id => "message-vmkernel:04"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:04"
					"[rsa][message][id1]" => "vmkernel:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:05
		# line in RSA: <agent>:<fld1>)<severity>: ScsiClaimrule:<fld3>: Path<fld4>is claimed by plugin NMP, but current claimrule number <fld5> indicates that it should be claimed by plugin PowerPath.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})%{severity}: ScsiClaimrule:%{fld3}: Path%{fld4}is claimed by plugin NMP, but current claimrule number %{fld5} indicates that it should be claimed by plugin PowerPath." }
				id => "message-vmkernel:05"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:05"
					"[rsa][message][id1]" => "vmkernel:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:06
		# line in RSA: <agent>:<fld1>){<severity>: ScsiDeviceIO:<fld2>:|ScsiDeviceIO:<fld3>:}Device naa.<fld4>{performance has deteriorated.|performance has improved.}<fld5>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<fld1>[^\)]*)\)((?<severity>[^:]*):[\s]+ScsiDeviceIO:(?<fld2>[^:]*):|ScsiDeviceIO:(?<fld3>[^:]*):)Device[\s]+naa\.(?<fld4>[^pp]*)(performance[\s]+has[\s]+deteriorated\.|performance[\s]+has[\s]+improved\.)(?<fld5>.*)$" }
				id => "message-vmkernel:06"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:06"
					"[rsa][message][id1]" => "vmkernel:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:07
		# line in RSA: <agent>:<fld2>)PowerPath: EmcpEsxLogEvent:<fld3>: Info:<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld2})PowerPath: EmcpEsxLogEvent:%{fld3}: Info:%{info}" }
				id => "message-vmkernel:07"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:07"
					"[rsa][message][id1]" => "vmkernel:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:08
		# line in RSA: <agent>:<fld1>)<severity>: ScsiDeviceIO:<fld2>: IEC page to device "<device>" has bad pagecode: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})%{severity}: ScsiDeviceIO:%{fld2}: IEC page to device \"%{device}\" has bad pagecode: %{resultcode}" }
				id => "message-vmkernel:08"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:08"
					"[rsa][message][id1]" => "vmkernel:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:09
		# line in RSA: <agent>:<fld1>)NetPort:<network_port>: disabled port<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})NetPort:%{network_port}: disabled port%{fld3}" }
				id => "message-vmkernel:09"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:09"
					"[rsa][message][id1]" => "vmkernel:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:10
		# line in RSA: <agent>:<fld1>)NetPort:<network_port>: resuming traffic on DV port<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})NetPort:%{network_port}: resuming traffic on DV port%{fld3}" }
				id => "message-vmkernel:10"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:10"
					"[rsa][message][id1]" => "vmkernel:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:11
		# line in RSA: <agent>:<fld1>)Team.etherswitch: TeamESPolicySet:<fld2>: {Update: Port<fld3>|Port<fld3>}<fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<fld1>[^\)]*)\)Team\.etherswitch:[\s]+TeamESPolicySet:(?<fld2>[^:]*):[\s]+(Update:[\s]+Port(?<fld3>.*)|Port(?<fld3>.*))(?<fld4>.*)$" }
				id => "message-vmkernel:11"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:11"
					"[rsa][message][id1]" => "vmkernel:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel:12
		# line in RSA: <agent>:<fld1>opID=<fld2>)FS3Misc:<fld3>:<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1}opID=%{fld2})FS3Misc:%{fld3}:%{fld4}" }
				id => "message-vmkernel:12"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel:12"
					"[rsa][message][id1]" => "vmkernel:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkernel
		# line in RSA: <agent>:<fld1>)<fld3>:<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})%{fld3}:%{fld4}" }
				id => "message-vmkernel"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkernel"
					"[rsa][message][id1]" => "vmkernel"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId84
	# line in RSA: <agent>:<fld1>T<fld3>Z<fld4>: {<fld5>:Serve client ::ffff:<saddr> done|<fld5>:Serve client ::ffff:<saddr>|getXMLDataFile:733:xmlDataFile: <filename>|<fld6>}
	else if [logstash][msgparser][id] == "msgParserId84" {
		grok {
			match => { "message" => "^(?<agent>[^:]*):(?<fld1>[^T]*)T(?<fld3>[^Z]*)Z(?<fld4>[^:]*):[\s]+((?<fld5>[^:]*):Serve[\s]+client[\s]+::ffff:(?<saddr>[^\s]*)[\s]+done|(?<fld5>[^:]*):Serve[\s]+client[\s]+::ffff:(?<saddr>.*)|getXMLDataFile:733:xmlDataFile:[\s]+(?<filename>.*)|(?<fld6>.*))$" }
			id => "msgParserId84"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "vmauthd" {
		# MESSAGE vmauthd:06
		# line in RSA: <agent>[<fld2>]:<fld3>: Connected to <fld4>, remote end sent pid: <process_id> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld2}]:%{fld3}: Connected to %{fld4}, remote end sent pid: %{process_id}" }
				id => "message-vmauthd:06"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmauthd:06"
					"[rsa][message][id1]" => "vmauthd:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE vmauthd:05
		# line in RSA: <agent>[<fld2>]: PREF Optional preferences file not found at <directory> <info> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld2}]: PREF Optional preferences file not found at %{directory} %{info}" }
				id => "message-vmauthd:05"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "PREF Optional preferences file not found"
					"[event][id]" => "vmauthd:05"
					"[rsa][message][id1]" => "vmauthd:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE vmauthd:04
		# line in RSA: <agent>[<fld2>]: <fld3>: Cannot open file "<directory>": <info> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld2}]: %{fld3}: Cannot open file \"%{directory}\": %{info}" }
				id => "message-vmauthd:04"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmauthd:04"
					"[rsa][message][id1]" => "vmauthd:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE vmauthd:03
		# line in RSA: <agent>[<fld2>]: <event_description>, session = <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld2}]: %{event_description}, session = %{fld3}" }
				id => "message-vmauthd:03"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmauthd:03"
					"[rsa][message][id1]" => "vmauthd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE vmauthd:02
		# line in RSA: <agent>[<fld2>]: Connect from remote socket (<saddr>:<sport>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld2}]: Connect from remote socket (%{saddr}:%{sport})." }
				id => "message-vmauthd:02"
				add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Connect from remote socket"
					"[event][id]" => "vmauthd:02"
					"[rsa][message][id1]" => "vmauthd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE vmauthd:01
		# line in RSA: <agent>[<fld2>]: Connect from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld2}]: Connect from %{saddr}" }
				id => "message-vmauthd:01"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmauthd:01"
					"[rsa][message][id1]" => "vmauthd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE vmauthd
		# line in RSA: <agent>[<fld2>]: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld2}]: %{event_description}" }
				id => "message-vmauthd"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmauthd"
					"[rsa][message][id1]" => "vmauthd"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Fdm" {
		# MESSAGE Fdm:01
		# line in RSA: <agent>: [<fld1><severity>'Cluster' opID=<fld3>] [<fld4>] hostId=<hostid>state=<event_state>master=<fld12>isolated=<fld8>host-list-version=<fld9>config-version=<fld10>{vm-metadata-version=<fld11>|compat-version=<fld11>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Fdm:02
		# line in RSA: <agent>: [<fld1><severity>'<fld2>' opID=<fld3>] [<fld4>]{vm<filename>from<fld5>changed inventory<space>dvsSwitchMap= [<fld6>]|vm<filename>changed  guestHB=<fld5>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Fdm:03
		# line in RSA: <agent>: [<fld1><severity>'<fld2>' opID=<fld3>] [<fld4>]<fld5>Vms have been updated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'%{fld2}' opID=%{fld3}] [%{fld4}]%{fld5}Vms have been updated" }
				id => "message-Fdm:03"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Fdm:03"
					"[rsa][message][id1]" => "Fdm:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Fdm:04
		# line in RSA: <agent>: [<fld1><severity>'Cluster' opID=<fld2>] [<fld3>] Datastore<fld4>accessibility on host<shost>change:<fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld1}%{severity}'Cluster' opID=%{fld2}] [%{fld3}] Datastore%{fld4}accessibility on host%{shost}change:%{fld6}" }
				id => "message-Fdm:04"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Fdm:04"
					"[rsa][message][id1]" => "Fdm:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Fdm:05
		# line in RSA: <agent>: [<fld1><severity>'Cluster' opID=<fld2>] VersionChange:{fetching version|version}[<fld3>]<fld4>from<shost>,<saddr>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Fdm:06
		# line in RSA: <agent>: [<fld1><severity>'Election' opID=<fld2>] CheckVersion: {Version[<fld3>] Other host GT :|Pending version change} <fld4>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Fdm:07
		# line in RSA: <agent>: [<fld1><severity>{'Cluster' opID=<fld2>|'Cluster'}] [<fld3>] version<fld4>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Fdm
		# line in RSA: <agent>:<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{event_description}" }
				id => "message-Fdm"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "Fdm"
					"[rsa][message][id1]" => "Fdm"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId112
	# line in RSA: <agent>[<fld1>]: <<<fld2>> <<<severity>> <<<saddr>><space>MAC=<fld3><event_description> 
	else if [logstash][msgparser][id] == "msgParserId112" {
		dissect {
			mapping => { "message" => "%{agent}[%{fld1}]: <%{fld2}> <%{severity}> <%{saddr}>%{space}MAC=%{fld3}%{event_description}" }
			id => "msgParserId112"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId113
	# line in RSA: <agent>:<fld1><fld3>Z -<fld7>
	else if [logstash][msgparser][id] == "msgParserId113" {
		dissect {
			mapping => { "message" => "%{agent}:%{fld1}%{fld3}Z -%{fld7}" }
			id => "msgParserId113"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId114
	# line in RSA: <agent>[<fld1>]: <<<fld2>> <<<severity>> <<<saddr>><event_description> 
	else if [logstash][msgparser][id] == "msgParserId114" {
		dissect {
			mapping => { "message" => "%{agent}[%{fld1}]: <%{fld2}> <%{severity}> <%{saddr}>%{event_description}" }
			id => "msgParserId114"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId115
	# line in RSA: <agent>[<fld1>]:<event_description> 
	else if [logstash][msgparser][id] == "msgParserId115" {
		dissect {
			mapping => { "message" => "%{agent}[%{fld1}]:%{event_description}" }
			id => "msgParserId115"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId116
	# line in RSA: <agent>:<event_description> 
	else if [logstash][msgparser][id] == "msgParserId116" {
		dissect {
			mapping => { "message" => "%{agent}:%{event_description}" }
			id => "msgParserId116"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId117
	# line in RSA: <agent>:<fld1>T<fld3>Z{<fld4>:<fld7>|<fld7>}
	else if [logstash][msgparser][id] == "msgParserId117" {
		grok {
			match => { "message" => "^(?<agent>[^:]*):(?<fld1>[^T]*)T(?<fld3>[^Z]*)Z((?<fld4>[^:]*):(?<fld7>.*)|(?<fld7>.*))$" }
			id => "msgParserId117"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "vmkwarning" {
		# MESSAGE vmkwarning:01
		# line in RSA: <agent>:<fld1>)<severity>: Ipfix: IpfixPCParseID:<fld2>:IpfixPCParseID failed for<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})%{severity}: Ipfix: IpfixPCParseID:%{fld2}:IpfixPCParseID failed for%{fld3}" }
				id => "message-vmkwarning:01"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkwarning:01"
					"[rsa][message][id1]" => "vmkwarning:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkwarning:02
		# line in RSA: <agent>:<fld1>)<severity>: ScsiClaimrule:<fld3>: Path<fld4>is claimed by plugin NMP, but current claimrule number <fld5> indicates that it should be claimed by plugin PowerPath.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})%{severity}: ScsiClaimrule:%{fld3}: Path%{fld4}is claimed by plugin NMP, but current claimrule number %{fld5} indicates that it should be claimed by plugin PowerPath." }
				id => "message-vmkwarning:02"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkwarning:02"
					"[rsa][message][id1]" => "vmkwarning:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkwarning:03
		# line in RSA: <agent>:<fld1>)<severity>: ScsiDevice:<fld2>: The number of devices allocated has reached the maximum:<fld3>. The device for plug-in PowerPath will not be allocated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})%{severity}: ScsiDevice:%{fld2}: The number of devices allocated has reached the maximum:%{fld3}. The device for plug-in PowerPath will not be allocated." }
				id => "message-vmkwarning:03"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkwarning:03"
					"[rsa][message][id1]" => "vmkwarning:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkwarning:04
		# line in RSA: <agent>:<fld1>){<severity>: ScsiDeviceIO:<fld2>:|ScsiDeviceIO:<fld3>:}Device naa.<fld4>{performance has deteriorated.|performance has improved.}<fld5>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):(?<fld1>[^\)]*)\)((?<severity>[^:]*):[\s]+ScsiDeviceIO:(?<fld2>[^:]*):|ScsiDeviceIO:(?<fld3>[^:]*):)Device[\s]+naa\.(?<fld4>[^pp]*)(performance[\s]+has[\s]+deteriorated\.|performance[\s]+has[\s]+improved\.)(?<fld5>.*)$" }
				id => "message-vmkwarning:04"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkwarning:04"
					"[rsa][message][id1]" => "vmkwarning:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE vmkwarning
		# line in RSA: <agent>:<fld1>)<severity>:<event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1})%{severity}:%{event_description}" }
				id => "message-vmkwarning"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "vmkwarning"
					"[rsa][message][id1]" => "vmkwarning"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sfcb-vmware_raw" {
		# MESSAGE sfcb-vmware_raw:01
		# line in RSA: <agent>[<fld1>]: IpmiIfcRhFruInv: return <resultcode> due to bad FRU header version <version>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld1}]: IpmiIfcRhFruInv: return %{resultcode} due to bad FRU header version %{version}" }
				id => "message-sfcb-vmware_raw:01"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "sfcb-vmware_raw:01"
					"[rsa][message][id1]" => "sfcb-vmware_raw:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sfcb-vmware_raw
		# line in RSA: <agent>[<fld1>]:<event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{fld1}]:%{event_description}" }
				id => "message-sfcb-vmware_raw"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "sfcb-vmware_raw"
					"[rsa][message][id1]" => "sfcb-vmware_raw"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId124
	# line in RSA: <agent>[<fld1>]: <fld2> <fld3> <fld4>: <severity>:<event_description> 
	else if [logstash][msgparser][id] == "msgParserId124" {
		dissect {
			mapping => { "message" => "%{agent}[%{fld1}]: %{fld2} %{fld3} %{fld4}: %{severity}:%{event_description}" }
			id => "msgParserId124"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "cimslp" {
		# MESSAGE cimslp
		# line in RSA: <agent>: <fld1>(errcode=<resultcode>, peerinfo=<space>(<info>) <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: %{fld1}(errcode=%{resultcode}, peerinfo=%{space}(%{info}) %{fld3}" }
				id => "message-cimslp"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "cimslp"
					"[rsa][message][id1]" => "cimslp"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE cimslp:02
		# line in RSA: <agent>:<fld1>:<fld2>(service:<fld3>:<url>) rc = <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{fld1}:%{fld2}(service:%{fld3}:%{url}) rc = %{fld4}" }
				id => "message-cimslp:02"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "cimslp:02"
					"[rsa][message][id1]" => "cimslp:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE cimslp:01
		# line in RSA: <agent>:<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}:%{event_description}" }
				id => "message-cimslp:01"
				add_field => {
				"hostname" => "%{hhostname}"
					"[event][id]" => "cimslp:01"
					"[rsa][message][id1]" => "cimslp:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId126
	# line in RSA: <agent>[<fld1>]:<event_description>
	else if [logstash][msgparser][id] == "msgParserId126" {
		dissect {
			mapping => { "message" => "%{agent}[%{fld1}]:%{event_description}" }
			id => "msgParserId126"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId129
	# line in RSA: Time=<fld20>,Description=<event_description>,EventChainId=<id>,Key=<operation_id>,QueuedAt=<fld21>,State=<result>,Name=<event_type>,Target=<vm_target>,StartedAt=<fld22>
	else if [logstash][msgparser][id] == "msgParserId129" {
		dissect {
			mapping => { "message" => "Time=%{fld20},Description=%{event_description},EventChainId=%{id},Key=%{operation_id},QueuedAt=%{fld21},State=%{result},Name=%{event_type},Target=%{vm_target},StartedAt=%{fld22}" }
			id => "msgParserId129"
			add_field => {
				"vid" => "%{event_description}"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId130
	# line in RSA: Time=<fld20>,DeviceType=<product>,Type=<event_type>,Key=<operation_id>,User=<username>,EventChain=<id>,DataCenter=<group>,Host=<hostip>,VirtualMachine=<vsys>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId130" {
		dissect {
			mapping => { "message" => "Time=%{fld20},DeviceType=%{product},Type=%{event_type},Key=%{operation_id},User=%{username},EventChain=%{id},DataCenter=%{group},Host=%{hostip},VirtualMachine=%{vsys},Description=%{event_description}" }
			id => "msgParserId130"
			add_field => {
				"vid" => "%{event_type}"
				"[logstash][fullDateTimeString]" => "%{fld20}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s", "MMM d yy H:m:s", "MMM d H:m:s" ] }
		}
	}
	# PARSER msgParserId131
	# line in RSA: <agent>: <<<fld1>>, <fld2> Error <resultcode> <fld3>
	else if [logstash][msgparser][id] == "msgParserId131" {
		dissect {
			mapping => { "message" => "%{agent}: <%{fld1}>, %{fld2} Error %{resultcode} %{fld3}" }
			id => "msgParserId131"
			add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Error in opening and reading the slot file"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId132
	# line in RSA: <agent>:<severity> vsansystem[<fld1>] [<fld2> sub=<fld3> opID=<fld4>] <event_description>
	else if [logstash][msgparser][id] == "msgParserId132" {
		dissect {
			mapping => { "message" => "%{agent}:%{severity} vsansystem[%{fld1}] [%{fld2} sub=%{fld3} opID=%{fld4}] %{event_description}" }
			id => "msgParserId132"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId133
	# line in RSA: <agent>:<fld1>
	else if [logstash][msgparser][id] == "msgParserId133" {
		dissect {
			mapping => { "message" => "%{agent}:%{fld1}" }
			id => "msgParserId133"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId134
	# line in RSA: <agent>:<fld1>,<fld2> [<fld3>] <event_description>
	else if [logstash][msgparser][id] == "msgParserId134" {
		dissect {
			mapping => { "message" => "%{agent}:%{fld1},%{fld2} [%{fld3}] %{event_description}" }
			id => "msgParserId134"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId135
	# line in RSA: <agent>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId135" {
		dissect {
			mapping => { "message" => "%{agent}: %{event_description}" }
			id => "msgParserId135"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId136
	# line in RSA: <agent>:<fld1>:<fld2>:<severity>:<info>
	else if [logstash][msgparser][id] == "msgParserId136" {
		dissect {
			mapping => { "message" => "%{agent}:%{fld1}:%{fld2}:%{severity}:%{info}" }
			id => "msgParserId136"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId137
	# line in RSA: <agent>:<info>
	else if [logstash][msgparser][id] == "msgParserId137" {
		dissect {
			mapping => { "message" => "%{agent}:%{info}" }
			id => "msgParserId137"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId138
	# line in RSA: <fld1>: Creating archive
	else if [logstash][msgparser][id] == "msgParserId138" {
		dissect {
			mapping => { "message" => "%{fld1}: Creating archive" }
			id => "msgParserId138"
			add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Creating archive"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-vmware_esx_esximsg.json"
#			template_name => "vmware_esx_esxi_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

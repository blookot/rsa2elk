# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "emcisilon"
			"[observer][name]" => "EMC Isilon"
			"[observer][type]" => "Storage"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %ISILON-<hlevel>: [<hfld1> <hfld2>] <hhostip>: <messageid> <!payload:hhostip>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ISILON\-(?<hlevel>[^:]*):[\s]+\[(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\]]*)\][\s]+(?<message>(?<hhostip>[^:]*):[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %ISILON-<hlevel>: [<hfld1> <hfld2>] <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ISILON\-(?<hlevel>[^:]*):[\s]+\[(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\]]*)\][\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %ISILON-<hlevel>: <hdate>T<hfld1> <<<hfld2>> <hfld3>(<hfld4>) <hagent>[<hfld7>]: <hfld5>|<hfld6>|<hfld8>|<messageid>|<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ISILON\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^T]*)T(?<hfld1>[^\s]*)[\s]+<(?<hfld2>[^>]*)>[\s]+(?<hfld3>[^\(]*)\((?<hfld4>[^\)]*)\)[\s]+(?<hagent>[^\[]*)\[(?<hfld7>[^\]]*)\]:[\s]+(?<hfld5>[^\|]*)\|(?<hfld6>[^\|]*)\|(?<hfld8>[^\|]*)\|(?<message>(?<messageid>[^\|]*)\|(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %ISILON-<hlevel>: <hdate>T<hfld1> <<<hfld2>> <hfld3>(<hfld4>) <hagent>[<hfld7>]: <hfld5>|<hfld6>|<messageid>|<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ISILON\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^T]*)T(?<hfld1>[^\s]*)[\s]+<(?<hfld2>[^>]*)>[\s]+(?<hfld3>[^\(]*)\((?<hfld4>[^\)]*)\)[\s]+(?<hagent>[^\[]*)\[(?<hfld7>[^\]]*)\]:[\s]+(?<hfld5>[^\|]*)\|(?<hfld6>[^\|]*)\|(?<message>(?<messageid>[^\|]*)\|(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: %ISILON-<hlevel>: <hdate>T<hfld1> <<<hfld2>> <hfld3>(<hfld4>) <messageid>[<hfld7>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ISILON\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^T]*)T(?<hfld1>[^\s]*)[\s]+<(?<hfld2>[^>]*)>[\s]+(?<hfld3>[^\(]*)\((?<hfld4>[^\)]*)\)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<hfld7>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %ISILON-<hlevel>: <hdate>T<hfld1> <<<hfld2>> <hfld3>(<hfld4>) <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ISILON\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^T]*)T(?<hfld1>[^\s]*)[\s]+<(?<hfld2>[^>]*)>[\s]+(?<hfld3>[^\(]*)\((?<hfld4>[^\)]*)\)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %ISILON-<hlevel>: <hmonth> <hdate> <htime> <hagent>[<hfld1>]: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ISILON\-(?<hlevel>[^:]*):[\s]+(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hagent>[^\[]*)\[(?<hfld1>[^\]]*)\]:[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <hdate>T<hfld1> <<<hfld2>> <hfld3>(<hfld4>) <hagent>[<hfld7>]: <hfld5>|<hfld6>|<hfld8>|<messageid>|<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hdate>[^T]*)T(?<hfld1>[^\s]*)[\s]+<(?<hfld2>[^>]*)>[\s]+(?<hfld3>[^\(]*)\((?<hfld4>[^\)]*)\)[\s]+(?<hagent>[^\[]*)\[(?<hfld7>[^\]]*)\]:[\s]+(?<hfld5>[^\|]*)\|(?<hfld6>[^\|]*)\|(?<hfld8>[^\|]*)\|(?<message>(?<messageid>[^\|]*)\|(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: <hdate>T<hfld1> <<<hfld2>> <hfld3>(<hfld4>) <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hdate>[^T]*)T(?<hfld1>[^\s]*)[\s]+<(?<hfld2>[^>]*)>[\s]+(?<hfld3>[^\(]*)\((?<hfld4>[^\)]*)\)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <hdate>T<hfld1> <messageid>[<hfld7>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hdate>[^T]*)T(?<hfld1>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<hfld7>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <hmonth> <hdate> <htime> <hagent>[<hfld1>]: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hagent>[^\[]*)\[(?<hfld1>[^\]]*)\]:[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: <hdate>T<hfld1> <hostname> <messageid>[<hfld7>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hdate>[^T]*)T(?<hfld1>[^\s]*)[\s]+(?<hostname>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<hfld7>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-emcisilonmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_type>|<result>|<fld1>|<fld2>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_type}|%{result}|%{fld1}|%{fld2}" }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"event_description" => "Access"
				"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <event_type>|<result>|<fld1>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{event_type}|%{result}|%{fld1}" }
			id => "msgParserId1"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <hostip>: connect
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{hostip}: connect" }
			id => "msgParserId2"
			add_field => {
				"event_description" => "connect"
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <event_type>|<result>|<fld1>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{event_type}|%{result}|%{fld1}" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "ALM"
				"event_description" => "File Delete"
				"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <event_type>|<result>|<fld1>|<fld2>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{event_type}|%{result}|%{fld1}|%{fld2}" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Read"
				"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "LOGON" {
		# MESSAGE LOGON:01
		# line in RSA: <event_type>|STATUS_LOGON_FAILURE|<daddr>|<saddr>| { <group>\<username> | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_type>[^\|]*)\|STATUS_LOGON_FAILURE\|(?<daddr>[^\|]*)\|(?<saddr>[^\|]*)\|[\s]+([\s]*(?<group>[^\\]*)\\(?<username>[^\s]*)[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-LOGON:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "STATUS_LOGON_FAILURE"
					"[event][id]" => "LOGON:01"
					"[rsa][message][id1]" => "LOGON:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE LOGON
		# line in RSA: <event_type>|<result>|<daddr>|<saddr>| { <group>\<username> | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_type>[^\|]*)\|(?<result>[^\|]*)\|(?<daddr>[^\|]*)\|(?<saddr>[^\|]*)\|[\s]+([\s]*(?<group>[^\\]*)\\(?<username>[^\s]*)[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-LOGON"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "LOGON"
					"[rsa][message][id1]" => "LOGON"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA: <event_type>|<result>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{event_type}|%{result}" }
			id => "msgParserId7"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA: last message repeated <fld1> times
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "last message repeated %{fld1} times" }
			id => "msgParserId8"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: logfile first created
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "logfile first created" }
			id => "msgParserId9"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "OPEN" {
		# MESSAGE OPEN:01
		# line in RSA: <event_type>|<result>|<fld1>|<fld2>|DIR|<fld3>|<fld4>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}|%{result}|%{fld1}|%{fld2}|DIR|%{fld3}|%{fld4}|%{filename}" }
				id => "message-OPEN:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"event_description" => "Dir Open"
					"[event][id]" => "OPEN:01"
					"[rsa][message][id1]" => "OPEN:01"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE OPEN
		# line in RSA: <event_type>|<result>|<fld1>|<fld2>|FILE|<fld3>|<fld4>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}|%{result}|%{fld1}|%{fld2}|FILE|%{fld3}|%{fld4}|%{filename}" }
				id => "message-OPEN"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"event_description" => "File Open"
					"[event][id]" => "OPEN"
					"[rsa][message][id1]" => "OPEN"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE OPEN:02
		# line in RSA: <event_type>|<result>|<fld1>|DIR|<fld3>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}|%{result}|%{fld1}|DIR|%{fld3}|%{filename}" }
				id => "message-OPEN:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"event_description" => "Dir Open"
					"[event][id]" => "OPEN:02"
					"[rsa][message][id1]" => "OPEN:02"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE OPEN:03
		# line in RSA: <event_type>|<result>|<fld1>|FILE|<fld3>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}|%{result}|%{fld1}|FILE|%{fld3}|%{filename}" }
				id => "message-OPEN:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Read"
				"ec_theme" => "ALM"
				"event_description" => "File Open"
					"[event][id]" => "OPEN:03"
					"[rsa][message][id1]" => "OPEN:03"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
	}
	# PARSER msgParserId14
	# line in RSA: <event_type>|<result>|<fld1>|<filename>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{event_type}|%{result}|%{fld1}|%{filename}" }
			id => "msgParserId14"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"event_description" => "File Rename"
				"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA: <hostip>: user <username> logged in
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "%{hostip}: user %{username} logged in" }
			id => "msgParserId15"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA:  users: add user <username>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "users: add user %{username}" }
			id => "msgParserId16"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "users/delete" {
		# MESSAGE users/delete
		# line in RSA:  users/delete user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "users/delete user %{username}" }
				id => "message-users/delete"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "ALM"
					"[event][id]" => "users/delete"
					"[rsa][message][id1]" => "users/delete"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE users/delete:01
		# line in RSA:  users/delete group <group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "users/delete group %{group}" }
				id => "message-users/delete:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "ALM"
					"[event][id]" => "users/delete:01"
					"[rsa][message][id1]" => "users/delete:01"
					"[event][categoryid]" => "1402010100"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "users/modify" {
		# MESSAGE users/modify
		# line in RSA:  users/modify user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "users/modify user %{username}" }
				id => "message-users/modify"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
					"[event][id]" => "users/modify"
					"[rsa][message][id1]" => "users/modify"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
			}
		}
		# MESSAGE users/modify:01
		# line in RSA:  users/modify group <group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "users/modify group %{group}" }
				id => "message-users/modify:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
					"[event][id]" => "users/modify:01"
					"[rsa][message][id1]" => "users/modify:01"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA: <agent>[<process_id>]: request: <sessionid>; uid: <uid>; sid: <sid>; remote_addr: <saddr>; uri: <url>; method: <web_method>; args[<fld1>/<fld2>]: <info>
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{agent}[%{process_id}]: request: %{sessionid}; uid: %{uid}; sid: %{sid}; remote_addr: %{saddr}; uri: %{url}; method: %{web_method}; args[%{fld1}/%{fld2}]: %{info}" }
			id => "msgParserId21"
			add_field => {
				"event_description" => "Config changes"
				"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "audit_protocol" {
		# MESSAGE audit_protocol:02
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|SMB|OPEN|<result>|<fld4>|FILE|<action>|<fld5>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|SMB|OPEN|%{result}|%{fld4}|FILE|%{action}|%{fld5}|%{filename}" }
				id => "message-audit_protocol:02"
				add_field => {
				"event_type" => "OPEN"
				"protocol" => "SMB"
					"[event][id]" => "audit_protocol:02"
					"[rsa][message][id1]" => "audit_protocol:02"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:021
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|<fld6>|OPEN|<result>|<fld4>|FILE|<action>|<fld5>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|%{fld6}|OPEN|%{result}|%{fld4}|FILE|%{action}|%{fld5}|%{filename}" }
				id => "message-audit_protocol:021"
				add_field => {
				"event_type" => "OPEN"
				"protocol" => "%{fld6}"
					"[event][id]" => "audit_protocol:021"
					"[rsa][message][id1]" => "audit_protocol:021"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:03
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|SMB|OPEN|<result>|<fld4>|DIR|<action>|<fld5>|<directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|SMB|OPEN|%{result}|%{fld4}|DIR|%{action}|%{fld5}|%{directory}" }
				id => "message-audit_protocol:03"
				add_field => {
				"event_type" => "OPEN"
				"protocol" => "SMB"
					"[event][id]" => "audit_protocol:03"
					"[rsa][message][id1]" => "audit_protocol:03"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:031
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|<fld6>|OPEN|<result>|<fld4>|DIR|<action>|<fld5>|<directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|%{fld6}|OPEN|%{result}|%{fld4}|DIR|%{action}|%{fld5}|%{directory}" }
				id => "message-audit_protocol:031"
				add_field => {
				"event_type" => "OPEN"
				"protocol" => "%{fld6}"
					"[event][id]" => "audit_protocol:031"
					"[rsa][message][id1]" => "audit_protocol:031"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:04
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|SMB|DELETE|<result>|FILE|<fld5>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|SMB|DELETE|%{result}|FILE|%{fld5}|%{filename}" }
				id => "message-audit_protocol:04"
				add_field => {
				"event_type" => "DELETE"
				"protocol" => "SMB"
					"[event][id]" => "audit_protocol:04"
					"[rsa][message][id1]" => "audit_protocol:04"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:041
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|<fld4>|DELETE|<result>|FILE|<fld5>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|%{fld4}|DELETE|%{result}|FILE|%{fld5}|%{filename}" }
				id => "message-audit_protocol:041"
				add_field => {
				"event_type" => "DELETE"
				"protocol" => "%{fld4}"
					"[event][id]" => "audit_protocol:041"
					"[rsa][message][id1]" => "audit_protocol:041"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:05
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|SMB|SET_SECURITY|<result>|FILE|<fld5>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|SMB|SET_SECURITY|%{result}|FILE|%{fld5}|%{filename}" }
				id => "message-audit_protocol:05"
				add_field => {
				"event_type" => "SET_SECURITY"
				"protocol" => "SMB"
					"[event][id]" => "audit_protocol:05"
					"[rsa][message][id1]" => "audit_protocol:05"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:051
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|<fld4>|SET_SECURITY|<result>|FILE|<fld5>|<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|%{fld4}|SET_SECURITY|%{result}|FILE|%{fld5}|%{filename}" }
				id => "message-audit_protocol:051"
				add_field => {
				"event_type" => "SET_SECURITY"
				"protocol" => "%{fld4}"
					"[event][id]" => "audit_protocol:051"
					"[rsa][message][id1]" => "audit_protocol:051"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:06
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|SMB|RENAME|<result>|FILE|<fld5>|<filename_src>|<filename_dst>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|SMB|RENAME|%{result}|FILE|%{fld5}|%{filename_src}|%{filename_dst}" }
				id => "message-audit_protocol:06"
				add_field => {
				"event_type" => "RENAME"
				"protocol" => "SMB"
					"[event][id]" => "audit_protocol:06"
					"[rsa][message][id1]" => "audit_protocol:06"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:061
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld1>|<fld2>|<fld3>|<saddr>|<fld4>|RENAME|<result>|FILE|<fld5>|<filename_src>|<filename_dst>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld1}|%{fld2}|%{fld3}|%{saddr}|%{fld4}|RENAME|%{result}|FILE|%{fld5}|%{filename_src}|%{filename_dst}" }
				id => "message-audit_protocol:061"
				add_field => {
				"event_type" => "RENAME"
				"protocol" => "%{fld4}"
					"[event][id]" => "audit_protocol:061"
					"[rsa][message][id1]" => "audit_protocol:061"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld2>|<saddr>|CLOSE|<result>|DIR|<fld3>|<fld4>|<directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld2}|%{saddr}|CLOSE|%{result}|DIR|%{fld3}|%{fld4}|%{directory}" }
				id => "message-audit_protocol"
				add_field => {
				"event_type" => "CLOSE"
					"[event][id]" => "audit_protocol"
					"[rsa][message][id1]" => "audit_protocol"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
		# MESSAGE audit_protocol:01
		# line in RSA: audit_protocol[<process_id>]: <sid>|<fld2>|<saddr>|OPEN|<result>|<fld4>|DIR|<action>|<directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "audit_protocol[%{process_id}]: %{sid}|%{fld2}|%{saddr}|OPEN|%{result}|%{fld4}|DIR|%{action}|%{directory}" }
				id => "message-audit_protocol:01"
				add_field => {
				"event_type" => "OPEN"
					"[event][id]" => "audit_protocol:01"
					"[rsa][message][id1]" => "audit_protocol:01"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss'Z'", "yyyy-M-d HH:m:ss" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-emcisilonmsg.json"
#			template_name => "emcisilon_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

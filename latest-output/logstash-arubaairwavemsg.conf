# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "arubaairwave"
			"[observer][name]" => "Aruba Networks AirWave"
			"[observer][type]" => "Configuration Management"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <messageid> AP <hfld3> <hfld4> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "AMP (%{hfld1})[%{hfld2}]: %{messageid} AP %{hfld3} %{hfld4} %{message}" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <hfld3> (<hfld4>): <messageid> <!payload:hfld3>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<hfld3>[^\s]*)[\s]+\((?<hfld4>[^\)]*)\):[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <hfld3> (<hfld5>) <messageid> <!payload:hfld3>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<hfld3>[^\s]*)[\s]+\((?<hfld5>[^\)]*)\)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <hfld3> <hfld4> <hfld5> <hfld6> <hfld7> <msgIdPart1> <msgIdPart2> <!payload:hfld3>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^\s]*)[\s]+(?<hfld7>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <hfld3> <hfld4> <hfld5> <hfld6> <msgIdPart1> <msgIdPart2>: <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^\s]*)[\s]+(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <hfld3> <hfld4> <hfld5> <hfld6> <msgIdPart1> <msgIdPart2> <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^\s]*)[\s]+(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <hfld3>: <msgIdPart1> <msgIdPart2> <!payload:hfld3>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<hfld3>[^:]*):[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <msgIdPart1> <msgIdPart2>: <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <msgIdPart1> <msgIdPart2> <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: AMP (<hfld1>)[<hfld2>]: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^AMP[\s]+\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-arubaairwavemsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: Added Role <username> (<user_role>) <event_user> <event_type>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "Added Role %{username} (%{user_role}) %{event_user} %{event_type}" }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "ALM"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: Deleted Role <username> (<user_role>) <event_user> <event_type>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "Deleted Role %{username} (%{user_role}) %{event_user} %{event_type}" }
			id => "msgParserId1"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "ALM"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: Trigger "<trigger_desc>" { added <event_user> <event_type> | modified <event_user> <event_type> }
	else if [logstash][msgparser][id] == "msgParserId2" {
		grok {
			match => { "message" => "^Trigger[\s]+\"(?<trigger_desc>[^\"]*)\"[\s]+([\s]*added[\s]+(?<event_user>[^\s]*)[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*modified[\s]+(?<event_user>[^\s]*)[\s]+(?<event_type>[^\s]*)[\s]+)$" }
			id => "msgParserId2"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: Configuration Mismatch: Device: <node>: All device types (<fld43>) <event_user> <event_type> 
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "Configuration Mismatch: Device: %{node}: All device types (%{fld43}) %{event_user} %{event_type}" }
			id => "msgParserId3"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: System backed up and saved to <filename> <event_user> <event_type>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "System backed up and saved to %{filename} %{event_user} %{event_type}" }
			id => "msgParserId4"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA: Restarting service { Client Monitor Worker | Performance Monitor | Rest API Server } <event_user> <event_type>
	else if [logstash][msgparser][id] == "msgParserId5" {
		grok {
			match => { "message" => "^Restarting[\s]+service[\s]+([\s]*Client[\s]+Monitor[\s]+Worker[\s]+|[\s]*Performance[\s]+Monitor[\s]+|[\s]*Rest[\s]+API[\s]+Server[\s]+)[\s]+(?<event_user>[^\s]*)[\s]+(?<event_type>.*)$" }
			id => "msgParserId5"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: <node> {(id: <id>):|(id: <id>)} Updated <fld43> Device ID: <fld44> <fld9>
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^(?<node>[^\s]*)[\s]+(\(id:[\s]+(?<id>[^\)]*)\):|\(id:[\s]+(?<id>[^\)]*)\))[\s]+Updated[\s]+(?<fld43>[^\s]*)[\s]+Device[\s]+ID:[\s]+(?<fld44>[^\s]*)[\s]+(?<fld9>.*)$" }
			id => "msgParserId6"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA: <node> {(id: <id>):|(id: <id>)} Created <fld43> Device ID: <fld44> <fld9>
	else if [logstash][msgparser][id] == "msgParserId7" {
		grok {
			match => { "message" => "^(?<node>[^\s]*)[\s]+(\(id:[\s]+(?<id>[^\)]*)\):|\(id:[\s]+(?<id>[^\)]*)\))[\s]+Created[\s]+(?<fld43>[^\s]*)[\s]+Device[\s]+ID:[\s]+(?<fld44>[^\s]*)[\s]+(?<fld9>.*)$" }
			id => "msgParserId7"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: <node> {(id: <id>):|(id: <id>)} Authorized <fld43> Device ID: <fld44> <fld9>
	else if [logstash][msgparser][id] == "msgParserId8" {
		grok {
			match => { "message" => "^(?<node>[^\s]*)[\s]+(\(id:[\s]+(?<id>[^\)]*)\):|\(id:[\s]+(?<id>[^\)]*)\))[\s]+Authorized[\s]+(?<fld43>[^\s]*)[\s]+Device[\s]+ID:[\s]+(?<fld44>[^\s]*)[\s]+(?<fld9>.*)$" }
			id => "msgParserId8"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA: <node> {(id: <id>):|(id: <id>)} Configuration change submitted <fld43> Device ID: <fld44> <fld9>
	else if [logstash][msgparser][id] == "msgParserId9" {
		grok {
			match => { "message" => "^(?<node>[^\s]*)[\s]+(\(id:[\s]+(?<id>[^\)]*)\):|\(id:[\s]+(?<id>[^\)]*)\))[\s]+Configuration[\s]+change[\s]+submitted[\s]+(?<fld43>[^\s]*)[\s]+Device[\s]+ID:[\s]+(?<fld44>[^\s]*)[\s]+(?<fld9>.*)$" }
			id => "msgParserId9"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA: NMS server <hostip>:<network_port> added <event_user> <event_type>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "NMS server %{hostip}:%{network_port} added %{event_user} %{event_type}" }
			id => "msgParserId10"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA: <node> {(id: <id>):|(id: <id>)} ap (id <fld12>): <fld13> Creating: Device (<info>) <fld43>  ID: <fld14> <fld15>
	else if [logstash][msgparser][id] == "msgParserId11" {
		grok {
			match => { "message" => "^(?<node>[^\s]*)[\s]+(\(id:[\s]+(?<id>[^\)]*)\):|\(id:[\s]+(?<id>[^\)]*)\))[\s]+ap[\s]+\(id[\s]+(?<fld12>[^\)]*)\):[\s]+(?<fld13>[^\s]*)[\s]+Creating:[\s]+Device[\s]+\((?<info>[^\)]*)\)[\s]+(?<fld43>[^\s]*)[\s]+ID:[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>.*)$" }
			id => "msgParserId11"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA: <node> {(id: <id>):|(id: <id>)} Converting from device type '<change_old>' to '<change_new>'. <fld13> Device ID: <fld14> <fld15>
	else if [logstash][msgparser][id] == "msgParserId12" {
		grok {
			match => { "message" => "^(?<node>[^\s]*)[\s]+(\(id:[\s]+(?<id>[^\)]*)\):|\(id:[\s]+(?<id>[^\)]*)\))[\s]+Converting[\s]+from[\s]+device[\s]+type[\s]+'(?<change_old>[^']*)'[\s]+to[\s]+'(?<change_new>[^']*)'\.[\s]+(?<fld13>[^\s]*)[\s]+Device[\s]+ID:[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>.*)$" }
			id => "msgParserId12"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA: <node> {(id: <id>):|(id: <id>)} Firmware changed to '<change_new>'. <fld13> Device ID: <fld14> <fld15>
	else if [logstash][msgparser][id] == "msgParserId13" {
		grok {
			match => { "message" => "^(?<node>[^\s]*)[\s]+(\(id:[\s]+(?<id>[^\)]*)\):|\(id:[\s]+(?<id>[^\)]*)\))[\s]+Firmware[\s]+changed[\s]+to[\s]+'(?<change_new>[^']*)'\.[\s]+(?<fld13>[^\s]*)[\s]+Device[\s]+ID:[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>.*)$" }
			id => "msgParserId13"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Configuration_verification" {
		# MESSAGE Configuration_verification
		# line in RSA: Configuration verification: <event_description> System Device ID: <id> <fld14>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuration verification: %{event_description} System Device ID: %{id} %{fld14}" }
				id => "message-Configuration_verification"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Configuration_verification"
					"[rsa][message][id1]" => "Configuration_verification"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Configuration_verification:01
		# line in RSA: Aruba Instant Virtual Controller<fld1> Configuration verification <disposition>; configuration is <fld5><space>System<space>Device<space> ID: <id> Top <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aruba Instant Virtual Controller%{fld1} Configuration verification %{disposition}; configuration is %{fld5}%{space}System%{space}Device%{space} ID: %{id} Top %{fld4}" }
				id => "message-Configuration_verification:01"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"event_description" => "Configuration verification"
					"[event][id]" => "Configuration_verification:01"
					"[rsa][message][id1]" => "Configuration_verification:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA: Up <fld13> Device ID: <id> <fld15>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "Up %{fld13} Device ID: %{id} %{fld15}" }
			id => "msgParserId15"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Status_changed" {
		# MESSAGE Status_changed
		# line in RSA: Status changed to '<event_state>' <fld13> Device ID: <id> <fld15>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Status changed to '%{event_state}' %{fld13} Device ID: %{id} %{fld15}" }
				id => "message-Status_changed"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Status_changed"
					"[rsa][message][id1]" => "Status_changed"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Status_changed:02
		# line in RSA: Aruba Instant Virtual Controller <fld1> Status changed to '<event_state>'<space>System<space>Device<space> ID: <id> Top <location_desc>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Aruba Instant Virtual Controller %{fld1} Status changed to '%{event_state}'%{space}System%{space}Device%{space} ID: %{id} Top %{location_desc}" }
				id => "message-Status_changed:02"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Status_changed:02"
					"[rsa][message][id1]" => "Status_changed:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA: Desired config changed while verifying, flagging for re-verify System Device ID: <id> <fld15>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "Desired config changed while verifying, flagging for re-verify System Device ID: %{id} %{fld15}" }
			id => "msgParserId17"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Discovered_System" {
		# MESSAGE Discovered_System
		# line in RSA: <fld21> { LWAPP | IOS } <fld22> Discovered System Device ID: <id> <fld15>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld21>[^\s]*)[\s]+([\s]*LWAPP[\s]+|[\s]*IOS[\s]+)[\s]+(?<fld22>[^\s]*)[\s]+Discovered[\s]+System[\s]+Device[\s]+ID:[\s]+(?<id>[^\s]*)[\s]+(?<fld15>.*)$" }
				id => "message-Discovered_System"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Discovered_System"
					"[rsa][message][id1]" => "Discovered_System"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Discovered_System:01
		# line in RSA: Discovered System Device ID: <id> <fld15>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Discovered System Device ID: %{id} %{fld15}" }
				id => "message-Discovered_System:01"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Discovered_System:01"
					"[rsa][message][id1]" => "Discovered_System:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA: <severity>: No data has been processed since AMP reboot (<fld1> <fld2>). <event_user> <event_type> 
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "%{severity}: No data has been processed since AMP reboot (%{fld1} %{fld2}). %{event_user} %{event_type}" }
			id => "msgParserId20"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Disk_Usage" {
		# MESSAGE Disk_Usage:01
		# line in RSA: Disk Usage: : <info> (<severity>) <event_user> <event_type>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Disk Usage: : %{info} (%{severity}) %{event_user} %{event_type}" }
				id => "message-Disk_Usage:01"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Disk_Usage:01"
					"[rsa][message][id1]" => "Disk_Usage:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Disk_Usage
		# line in RSA: <severity>: Disk Usage <info> System <event_type>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}: Disk Usage %{info} System %{event_type}" }
				id => "message-Disk_Usage"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Disk_Usage"
					"[rsa][message][id1]" => "Disk_Usage"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Device" {
		# MESSAGE Device
		# line in RSA: <node> - { <fld2>: Configuration Mismatch All device types System <event_type> | <fld2>: AP Usage Usage >= <fld3> Kbps for <fld4> minutes. System <event_type> | <fld2>: Client Count Client Count on Devices is at least <fld3> and for <fld4>  minutes. System <event_type> | <fld2>: Channel Utilization Interference (%) >= <fld3> for <fld4> minutes. System <event_type> | <fld2>: Rogue Device Classified Classification = <threat_name> and Threat Level = <threat_val> (<event_description>). Notes: Rogue on WIRED System <event_type> | <fld2>: Device IDS Events Count >= <fld3> for <fld4> minutes. System <event_type> | <fld2>: Device Down Device has rebooted: Device uptime value changed (current: <fld3> mins <fld4> secs, calculated: <fld5> days <fld6> hrs <fld7> mins <fld8> secs). System <event_type> | <fld2>: Device Down Device Type is Access Point, Device Type is Controller or Minutes Down Threshold >= <fld3> minutes. System <event_type> | <fld2>: Device Down AP is down (SNMP Trap - <fld3> from <fld4>). System <event_type> | <fld2>: Device Resources Percent CPU Utilization >= <fld3> or Percent Memory Utilization >= <fld4> for 5 minutes. System <event_type>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<node>[^\s]*)[\s]+\-[\s]+([\s]*(?<fld2>[^:]*):[\s]+Configuration[\s]+Mismatch[\s]+All[\s]+device[\s]+types[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+AP[\s]+Usage[\s]+Usage[\s]+>=[\s]+(?<fld3>[^\s]*)[\s]+Kbps[\s]+for[\s]+(?<fld4>[^\s]*)[\s]+minutes\.[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+Client[\s]+Count[\s]+Client[\s]+Count[\s]+on[\s]+Devices[\s]+is[\s]+at[\s]+least[\s]+(?<fld3>[^\s]*)[\s]+and[\s]+for[\s]+(?<fld4>[^\s]*)[\s]+minutes\.[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+Channel[\s]+Utilization[\s]+Interference[\s]+\(%\)[\s]+>=[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+(?<fld4>[^\s]*)[\s]+minutes\.[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+Rogue[\s]+Device[\s]+Classified[\s]+Classification[\s]+=[\s]+(?<threat_name>[^\s]*)[\s]+and[\s]+Threat[\s]+Level[\s]+=[\s]+(?<threat_val>[^\s]*)[\s]+\((?<event_description>[^\)]*)\)\.[\s]+Notes:[\s]+Rogue[\s]+on[\s]+WIRED[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+Device[\s]+IDS[\s]+Events[\s]+Count[\s]+>=[\s]+(?<fld3>[^\s]*)[\s]+for[\s]+(?<fld4>[^\s]*)[\s]+minutes\.[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+Device[\s]+Down[\s]+Device[\s]+has[\s]+rebooted:[\s]+Device[\s]+uptime[\s]+value[\s]+changed[\s]+\(current:[\s]+(?<fld3>[^\s]*)[\s]+mins[\s]+(?<fld4>[^\s]*)[\s]+secs,[\s]+calculated:[\s]+(?<fld5>[^\s]*)[\s]+days[\s]+(?<fld6>[^\s]*)[\s]+hrs[\s]+(?<fld7>[^\s]*)[\s]+mins[\s]+(?<fld8>[^\s]*)[\s]+secs\)\.[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+Device[\s]+Down[\s]+Device[\s]+Type[\s]+is[\s]+Access[\s]+Point,[\s]+Device[\s]+Type[\s]+is[\s]+Controller[\s]+or[\s]+Minutes[\s]+Down[\s]+Threshold[\s]+>=[\s]+(?<fld3>[^\s]*)[\s]+minutes\.[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+Device[\s]+Down[\s]+AP[\s]+is[\s]+down[\s]+\(SNMP[\s]+Trap[\s]+\-[\s]+(?<fld3>[^\s]*)[\s]+from[\s]+(?<fld4>[^\)]*)\)\.[\s]+System[\s]+(?<event_type>[^\s]*)[\s]+|[\s]*(?<fld2>[^:]*):[\s]+Device[\s]+Resources[\s]+Percent[\s]+CPU[\s]+Utilization[\s]+>=[\s]+(?<fld3>[^\s]*)[\s]+or[\s]+Percent[\s]+Memory[\s]+Utilization[\s]+>=[\s]+(?<fld4>[^\s]*)[\s]+for[\s]+5[\s]+minutes\.[\s]+System[\s]+(?<event_type>.*))$" }
				id => "message-Device"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"event_state" => "Device Down"
					"[event][id]" => "Device"
					"[rsa][message][id1]" => "Device"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:01
		# line in RSA:  Device Resources: Device: <device>: Percent CPU Utilization >= <fld3> or Percent Memory Utilization >= <fld4> for <fld5> minutes (Warning) System <event_type>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Device Resources: Device: %{device}: Percent CPU Utilization >= %{fld3} or Percent Memory Utilization >= %{fld4} for %{fld5} minutes (Warning) System %{event_type}" }
				id => "message-Device:01"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Device:01"
					"[rsa][message][id1]" => "Device:01"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:02
		# line in RSA:  Device IDS Events: Device:<device>: Count >= <fld3> for <fld4> minutes (Warning) System  <event_type>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Device IDS Events: Device:%{device}: Count >= %{fld3} for %{fld4} minutes (Warning) System  %{event_type}" }
				id => "message-Device:02"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Device:02"
					"[rsa][message][id1]" => "Device:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:03
		# line in RSA:  Device Down: Device:<device> { - <fld3>: Device Type | : Device Type } is <fld4> and Minutes Down Threshold >= <fld5> minutes (Warning) System <event_type>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Device[\s]+Down:[\s]+Device:(?<device>[^\s]*)[\s]+([\s]*\-[\s]+(?<fld3>[^:]*):[\s]+Device[\s]+Type[\s]+|[\s]*:[\s]+Device[\s]+Type[\s]+)[\s]+is[\s]+(?<fld4>[^\s]*)[\s]+and[\s]+Minutes[\s]+Down[\s]+Threshold[\s]+>=[\s]+(?<fld5>[^\s]*)[\s]+minutes[\s]+\(Warning\)[\s]+System[\s]+(?<event_type>.*)$" }
				id => "message-Device:03"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Device:03"
					"[rsa][message][id1]" => "Device:03"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:04
		# line in RSA:  Device Up: {Device: <macaddr> - <device>|Device:<device>}: All device types (Normal) System <event_type>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Device[\s]+Up:[\s]+(Device:[\s]+(?<macaddr>[^\s]*)[\s]+\-[\s]+(?<device>[^:]*)|Device:(?<device>[^:]*)):[\s]+All[\s]+device[\s]+types[\s]+\(Normal\)[\s]+System[\s]+(?<event_type>.*)$" }
				id => "message-Device:04"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Device:04"
					"[rsa][message][id1]" => "Device:04"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:05
		# line in RSA:  Device Event: Device: <device>: SNMP Trap Category is Hardware or SNMP Trap Category is Software (Normal) System <event_type>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Device Event: Device: %{device}: SNMP Trap Category is Hardware or SNMP Trap Category is Software (Normal) System %{event_type}" }
				id => "message-Device:05"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"event_description" => "SNMP Trap Category is Hardware or SNMP Trap Category is Software."
					"[event][id]" => "Device:05"
					"[rsa][message][id1]" => "Device:05"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Aruba" {
		# MESSAGE Aruba:01
		# line in RSA: {<fld1> Configuration|<fld15> <fld6> <fld7> Configuration|Configuration} verification { : <fld10> | <fld10> configuration is good <space> } {System Device ID: | System Device ID: } <id> Top <fld5> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<fld1>[^\s]*)[\s]+Configuration|(?<fld15>[^\s]*)[\s]+(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+Configuration|Configuration)[\s]+verification[\s]+([\s]*:[\s]+(?<fld10>[^\s]*)[\s]+|[\s]*(?<fld10>[^\s]*)[\s]+configuration[\s]+is[\s]+good[\s]+(?<space>[^\s]*)[\s]+)[\s]+(System[\s]+Device[\s]+ID:[\s]+|[\s]*System[\s]+Device[\s]+ID:[\s]+)[\s]+(?<id>[^\s]*)[\s]+Top[\s]+(?<fld5>[^\s]*)[\s]+$" }
				id => "message-Aruba:01"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Aruba:01"
					"[rsa][message][id1]" => "Aruba:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Aruba:02
		# line in RSA: {<fld1> Status|<fld5> <fld6> <fld7> Status|Status} changed to {'<event_state> (SNMP Trap - <fld8> from <saddr>)'|'<event_state>'}<space>{ System Device ID: <id>| System Device ID: <id>}  Top <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<fld1>[^\s]*)[\s]+Status|(?<fld5>[^\s]*)[\s]+(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+Status|Status)[\s]+changed[\s]+to[\s]+('(?<event_state>[^\s]*)[\s]+\(SNMP[\s]+Trap[\s]+\-[\s]+(?<fld8>[^\s]*)[\s]+from[\s]+(?<saddr>[^\)]*)\)'|'(?<event_state>[^']*)')(?<space>[^\s\s]*)([\s]*System[\s]+Device[\s]+ID:[\s]+(?<id>[^\s]*)|[\s]*System[\s]+Device[\s]+ID:[\s]+(?<id>[^\s]*))[\s]+Top[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Aruba:02"
				add_field => {
				"ec_theme" => "Configuration"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Aruba:02"
					"[rsa][message][id1]" => "Aruba:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Aruba:03
		# line in RSA: {Aruba <fldq5> <fld25> | <fld5> } Updated upstream device to { <fld2>, <fld1> | <fld2> } System Device ID:<id> Top <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Aruba[\s]+(?<fldq5>[^\s]*)[\s]+(?<fld25>[^\s]*)[\s]+|[\s]*(?<fld5>[^\s]*)[\s]+)[\s]+Updated[\s]+upstream[\s]+device[\s]+to[\s]+([\s]*(?<fld2>[^,]*),[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*(?<fld2>[^\s]*)[\s]+)[\s]+System[\s]+Device[\s]+ID:(?<id>[^\s]*)[\s]+Top[\s]+(?<fld4>.*)$" }
				id => "message-Aruba:03"
				add_field => {
				"ec_theme" => "Configuration"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Aruba:03"
					"[rsa][message][id1]" => "Aruba:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Aruba:04
		# line in RSA: { <fld15> <fld6> <fld7> | <fld1> } Configuration status changed to '<event_state>' System Device ID: <id> Top <fld5>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<fld15>[^\s]*)[\s]+(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)[\s]+Configuration[\s]+status[\s]+changed[\s]+to[\s]+'(?<event_state>[^']*)'[\s]+System[\s]+Device[\s]+ID:[\s]+(?<id>[^\s]*)[\s]+Top[\s]+(?<fld5>.*)$" }
				id => "message-Aruba:04"
				add_field => {
				"ec_subject" => "Configuration"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Aruba:04"
					"[rsa][message][id1]" => "Aruba:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Aruba:05
		# line in RSA: <fld1> { Device has rebooted: Device uptime value changed <fld2> | Up | Down | Un-setting upstream device } System Device ID: <id> Top <fld5>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+([\s]*Device[\s]+has[\s]+rebooted:[\s]+Device[\s]+uptime[\s]+value[\s]+changed[\s]+(?<fld2>[^\s]*)[\s]+|[\s]*Up[\s]+|[\s]*Down[\s]+|[\s]*Un\-setting[\s]+upstream[\s]+device[\s]+)[\s]+System[\s]+Device[\s]+ID:[\s]+(?<id>[^\s]*)[\s]+Top[\s]+(?<fld5>.*)$" }
				id => "message-Aruba:05"
				add_field => {
				"ec_theme" => "Configuration"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Aruba:05"
					"[rsa][message][id1]" => "Aruba:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Aruba:06
		# line in RSA: <fld5> <fld6> <fld7> <network_service> Error: pattern match timed-out System Device ID:<id> Top <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld5} %{fld6} %{fld7} %{network_service} Error: pattern match timed-out System Device ID:%{id} Top %{fld4}" }
				id => "message-Aruba:06"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"a" => "Error: pattern match timed-out"
				"event_description" => "%{network_service}%{a}"
					"[event][id]" => "Aruba:06"
					"[rsa][message][id1]" => "Aruba:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Aruba:07
		# line in RSA: <fld5> <fld6> <fld7> Backup Operation Failed, Failed to establish connection to device.Device is down or <network_service> credentials are incorrect System Device ID:<id> Top <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld5} %{fld6} %{fld7} Backup Operation Failed, Failed to establish connection to device.Device is down or %{network_service} credentials are incorrect System Device ID:%{id} Top %{fld4}" }
				id => "message-Aruba:07"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"event_description" => "Backup Operation Failed, Failed to establish connection to device."
					"[event][id]" => "Aruba:07"
					"[rsa][message][id1]" => "Aruba:07"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Aruba:08
		# line in RSA: <fld5> <fld6> <fld7> Error in SNMP polling: Timeout(<fld11>) System Device ID:<id> Top <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld5} %{fld6} %{fld7} Error in SNMP polling: Timeout(%{fld11}) System Device ID:%{id} Top %{fld4}" }
				id => "message-Aruba:08"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"event_description" => "Error in SNMP polling: Timeout"
					"[event][id]" => "Aruba:08"
					"[rsa][message][id1]" => "Aruba:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: <event_description>. <fld2> WebUserAudit    <fld1>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "%{event_description}. %{fld2} WebUserAudit    %{fld1}" }
			id => "msgParserId39"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA: Logged in from <saddr> <fld2> WebUserAudit    <fld1>
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "Logged in from %{saddr} %{fld2} WebUserAudit    %{fld1}" }
			id => "msgParserId40"
			add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Cisco_Catalyst" {
		# MESSAGE Cisco_Catalyst
		# line in RSA: Cisco Catalyst <fld5> <fld6> Error in SNMP polling: Timeout(<fld11>) System Device ID:<id> Top <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cisco Catalyst %{fld5} %{fld6} Error in SNMP polling: Timeout(%{fld11}) System Device ID:%{id} Top %{fld4}" }
				id => "message-Cisco_Catalyst"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
				"event_description" => "Error in SNMP polling: Timeout"
					"[event][id]" => "Cisco_Catalyst"
					"[rsa][message][id1]" => "Cisco_Catalyst"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Cisco_Catalyst:01
		# line in RSA: Cisco Catalyst <fld5> Cisco Systems, <fld6> Status changed to '<event_state>' System Device ID: <id> Top <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cisco Catalyst %{fld5} Cisco Systems, %{fld6} Status changed to '%{event_state}' System Device ID: %{id} Top %{fld4}" }
				id => "message-Cisco_Catalyst:01"
				add_field => {
				"ec_theme" => "Configuration"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Cisco_Catalyst:01"
					"[rsa][message][id1]" => "Cisco_Catalyst:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Cisco_Catalyst:03
		# line in RSA: Cisco Catalyst <fld5> <hostname> Configuration status changed to '<network_service> Error: (problem connecting to "<daddr>", port <dport>: Connection refused) in username or password prompt: ' System Device ID: <id> Top <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cisco Catalyst %{fld5} %{hostname} Configuration status changed to '%{network_service} Error: (problem connecting to \"%{daddr}\", port %{dport}: Connection refused) in username or password prompt: ' System Device ID: %{id} Top %{fld4}" }
				id => "message-Cisco_Catalyst:03"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Cisco_Catalyst:03"
					"[rsa][message][id1]" => "Cisco_Catalyst:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Cisco_Catalyst:02
		# line in RSA: Cisco Catalyst <fld5> {Cisco Systems, <fld6> | <fld6> } Configuration status changed to '<event_state>' System Device ID: <id> Top <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Cisco[\s]+Catalyst[\s]+(?<fld5>[^\s]*)[\s]+(Cisco[\s]+Systems,[\s]+(?<fld6>[^\s]*)[\s]+|[\s]*(?<fld6>[^\s]*)[\s]+)[\s]+Configuration[\s]+status[\s]+changed[\s]+to[\s]+'(?<event_state>[^']*)'[\s]+System[\s]+Device[\s]+ID:[\s]+(?<id>[^\s]*)[\s]+Top[\s]+(?<fld4>.*)$" }
				id => "message-Cisco_Catalyst:02"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Cisco_Catalyst:02"
					"[rsa][message][id1]" => "Cisco_Catalyst:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Cisco_Catalyst:04
		# line in RSA: Cisco Catalyst <fld5> <hostname> <network_service> Error: problem connecting to "<daddr>", port <dport>: Connection refused System Device ID: <id> Top <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cisco Catalyst %{fld5} %{hostname} %{network_service} Error: problem connecting to \"%{daddr}\", port %{dport}: Connection refused System Device ID: %{id} Top %{fld4}" }
				id => "message-Cisco_Catalyst:04"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Cisco_Catalyst:04"
					"[rsa][message][id1]" => "Cisco_Catalyst:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Cisco_Catalyst:05
		# line in RSA: Cisco Catalyst <fld5> <hostname> Down System Device ID: <id> Top <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cisco Catalyst %{fld5} %{hostname} Down System Device ID: %{id} Top %{fld4}" }
				id => "message-Cisco_Catalyst:05"
				add_field => {
				"event_computer" => "%{hfld1}"
				"process_id" => "%{hfld2}"
					"[event][id]" => "Cisco_Catalyst:05"
					"[rsa][message][id1]" => "Cisco_Catalyst:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-arubaairwavemsg.json"
#			template_name => "arubaairwave_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ibmmfzossyslog"
			"[observer][name]" => "IBM Mainframe zOS System Log"
			"[observer][type]" => "Mainframe"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %IBMMFZOSSYSLOGTVM-4: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%IBMMFZOSSYSLOGTVM-4: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "IBMMFZOSSYSLOG_TVM"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %IBMMFZOSSYSLOG-<hfld5>: RecType=<messageid>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%IBMMFZOSSYSLOG-%{hfld5}: RecType=%{messageid}|%{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-ibmmfzossyslogmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "N" {
		# MESSAGE N:01
		# line in RSA: ReqType=<fld2>|RoutCd=<fld3>|Sysname=<hostname>|Timestamp=<fld5> <fld55>|JulDate=<fld6>|Time=<fld7>|ReqFlags=<fld8>|ConsoleId=<fld9>|AttnFlag=<fld10>|MsgCode=<fld11>|Message=<info>|
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ReqType=%{fld2}|RoutCd=%{fld3}|Sysname=%{hostname}|Timestamp=%{fld5} %{fld55}|JulDate=%{fld6}|Time=%{fld7}|ReqFlags=%{fld8}|ConsoleId=%{fld9}|AttnFlag=%{fld10}|MsgCode=%{fld11}|Message=%{info}|" }
				id => "message-N:01"
				add_field => {
					"[event][id]" => "N:01"
					"[rsa][message][id1]" => "N:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy H:m:s" ] }
			}
		}
		# MESSAGE N
		# line in RSA: ReqType=<fld2>|RoutCd=<fld3>|Sysname=<hostname>|Timestamp=<fld5> <fld55>|JulDate=<fld6>|Time=<fld7>|ReqFlags=<fld8>|ConsoleId=<fld9>|AttnFlag=<fld10>|Message=<info>|
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ReqType=%{fld2}|RoutCd=%{fld3}|Sysname=%{hostname}|Timestamp=%{fld5} %{fld55}|JulDate=%{fld6}|Time=%{fld7}|ReqFlags=%{fld8}|ConsoleId=%{fld9}|AttnFlag=%{fld10}|Message=%{info}|" }
				id => "message-N"
				add_field => {
					"[event][id]" => "N"
					"[rsa][message][id1]" => "N"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld5} %{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId0
	# line in RSA: ReqType=<fld2>|RoutCd=<fld3>|Sysname=<hostname>|Timestamp=<fld5> <fld55>|JulDate=<fld6>|Time=<fld7>|ReqFlags=<fld8>|ConsoleId=<fld9>|AttnFlag=<fld10>|MsgCode=<fld11>|Message=<info>|
	else if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "ReqType=%{fld2}|RoutCd=%{fld3}|Sysname=%{hostname}|Timestamp=%{fld5} %{fld55}|JulDate=%{fld6}|Time=%{fld7}|ReqFlags=%{fld8}|ConsoleId=%{fld9}|AttnFlag=%{fld10}|MsgCode=%{fld11}|Message=%{info}|" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld5} %{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: ReqType=<fld2>|RoutCd=<fld3>|Sysname=<hostname>|Timestamp=<fld5> <fld55>|JulDate=<fld6>|Time=<fld7>|ReqFlags=<fld8>|ConsoleId=<fld9>|AttnFlag=<fld10>|MsgCode=<fld11>|Message=<info>|JobId= <operation_id>|
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "ReqType=%{fld2}|RoutCd=%{fld3}|Sysname=%{hostname}|Timestamp=%{fld5} %{fld55}|JulDate=%{fld6}|Time=%{fld7}|ReqFlags=%{fld8}|ConsoleId=%{fld9}|AttnFlag=%{fld10}|MsgCode=%{fld11}|Message=%{info}|JobId= %{operation_id}|" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld5} %{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: ReqType=<fld2>|RoutCd=<fld3>|Sysname=<hostname>|Timestamp=<fld5> <fld55>|JulDate=<fld6>|Time=<fld7>|ReqFlags=<fld8>|ConsoleId=<fld9>|JobId= <operation_id>|MsgCode=<fld11>|AttnFlag=<fld10>|Message=<info>|
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "ReqType=%{fld2}|RoutCd=%{fld3}|Sysname=%{hostname}|Timestamp=%{fld5} %{fld55}|JulDate=%{fld6}|Time=%{fld7}|ReqFlags=%{fld8}|ConsoleId=%{fld9}|JobId= %{operation_id}|MsgCode=%{fld11}|AttnFlag=%{fld10}|Message=%{info}|" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld5} %{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: ReqType=<fld2>|RoutCd=<fld3>|Sysname=<hostname>|Timestamp=<fld5> <fld55>|JulDate=<fld6>|Time=<fld7>|ReqFlags=<fld8>|ConsoleId=<fld9>|AttnFlag=<fld10>|MsgNmbr= <fld13>|MsgCode=<fld11>|Message=<info>|
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "ReqType=%{fld2}|RoutCd=%{fld3}|Sysname=%{hostname}|Timestamp=%{fld5} %{fld55}|JulDate=%{fld6}|Time=%{fld7}|ReqFlags=%{fld8}|ConsoleId=%{fld9}|AttnFlag=%{fld10}|MsgNmbr= %{fld13}|MsgCode=%{fld11}|Message=%{info}|" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld5} %{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: ReqType=<fld2>|MsgCode=<fld11>|Message=<info>|
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "ReqType=%{fld2}|MsgCode=%{fld11}|Message=%{info}|" }
			id => "msgParserId5"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: RecType=<event_type>|ReqType=<fld2>|RoutCd=<fld3>|Sysname=<hostname>|Timestamp=<event_time_string>|JulDate=<fld6>|Time=<fld7>|ReqFlags=<fld8>|ConsoleId=<fld9>|JobId=<jobnum>|AttnFlag=<fld10>|MsgNmbr=<fld13>|MsgCode=<fld11>|Message=<msg>|
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "RecType=%{event_type}|ReqType=%{fld2}|RoutCd=%{fld3}|Sysname=%{hostname}|Timestamp=%{event_time_string}|JulDate=%{fld6}|Time=%{fld7}|ReqFlags=%{fld8}|ConsoleId=%{fld9}|JobId=%{jobnum}|AttnFlag=%{fld10}|MsgNmbr=%{fld13}|MsgCode=%{fld11}|Message=%{msg}|" }
			id => "msgParserId6"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{event_time_string}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M-d-yyyy H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-ibmmfzossyslogmsg.json"
#			template_name => "ibmmfzossyslog_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

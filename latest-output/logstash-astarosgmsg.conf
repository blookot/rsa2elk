# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "astarosg"
			"[observer][name]" => "Astaro Security Gateway"
			"[observer][type]" => "Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1>  <messageid>[<process_id>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1}  %{messageid}[%{process_id}]: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1> <hostname> <messageid>[<process_id>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hostname} %{messageid}[%{process_id}]: %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hfld1> <hostname> reverseproxy: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hostname} reverseproxy: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "reverseproxy"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hfld1> <hostname> <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hostname} %{messageid}: %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hfld1>  <id>[<process_id>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1}  %{id}[%{process_id}]: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "astarosg_TVM"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: device="<product>" date=<hdate> time=<htime> timezone="<timezone>" device_name="<device>" device_id=<hardware_id> log_id=<id> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "device=\"%{product}\" date=%{hdate} time=%{htime} timezone=\"%{timezone}\" device_name=\"%{device}\" device_id=%{hardware_id} log_id=%{id} %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "Sophos_Firewall"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-astarosgmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "named" {
		# MESSAGE named:01
		# line in RSA: received control channel command '<action>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "received control channel command '%{action}'" }
				id => "message-named:01"
				add_field => {
					"[event][id]" => "named:01"
					"[rsa][message][id1]" => "named:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:02
		# line in RSA: flushing caches in all views <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "flushing caches in all views %{disposition}" }
				id => "message-named:02"
				add_field => {
					"[event][id]" => "named:02"
					"[rsa][message][id1]" => "named:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:03
		# line in RSA: error (<result>) resolving '<dhost>': <daddr>#<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "error (%{result}) resolving '%{dhost}': %{daddr}#%{dport}" }
				id => "message-named:03"
				add_field => {
					"[event][id]" => "named:03"
					"[rsa][message][id1]" => "named:03"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:04
		# line in RSA: received <action> signal to <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "received %{action} signal to %{fld3}" }
				id => "message-named:04"
				add_field => {
					"[event][id]" => "named:04"
					"[rsa][message][id1]" => "named:04"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:05
		# line in RSA: loading configuration from '<filename>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "loading configuration from '%{filename}'" }
				id => "message-named:05"
				add_field => {
					"[event][id]" => "named:05"
					"[rsa][message][id1]" => "named:05"
					"[event][categoryid]" => "1701060000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:06
		# line in RSA: no <protocol> interfaces found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "no %{protocol} interfaces found" }
				id => "message-named:06"
				add_field => {
					"[event][id]" => "named:06"
					"[rsa][message][id1]" => "named:06"
					"[event][categoryid]" => "1804000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:07
		# line in RSA: sizing zone task pool based on <fld3> zones
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "sizing zone task pool based on %{fld3} zones" }
				id => "message-named:07"
				add_field => {
					"[event][id]" => "named:07"
					"[rsa][message][id1]" => "named:07"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:08
		# line in RSA: automatic empty zone: view <fld3>: <dns_ptr_record>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "automatic empty zone: view %{fld3}: %{dns_ptr_record}" }
				id => "message-named:08"
				add_field => {
					"[event][id]" => "named:08"
					"[rsa][message][id1]" => "named:08"
					"[event][categoryid]" => "1805000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:09
		# line in RSA: reloading <obj_type> <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "reloading %{obj_type} %{disposition}" }
				id => "message-named:09"
				add_field => {
				"action" => "reloading"
					"[event][id]" => "named:09"
					"[rsa][message][id1]" => "named:09"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:10
		# line in RSA: zone <dhost>/<fld3>: loaded serial <operation_id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "zone %{dhost}/%{fld3}: loaded serial %{operation_id}" }
				id => "message-named:10"
				add_field => {
				"action" => "loaded"
					"[event][id]" => "named:10"
					"[rsa][message][id1]" => "named:10"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:11
		# line in RSA: all zones loaded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "all zones loaded" }
				id => "message-named:11"
				add_field => {
				"action" => "loaded"
					"[event][id]" => "named:11"
					"[rsa][message][id1]" => "named:11"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:12
		# line in RSA: running
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "running" }
				id => "message-named:12"
				add_field => {
				"disposition" => "running"
				"action" => "running"
					"[event][id]" => "named:12"
					"[rsa][message][id1]" => "named:12"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:13
		# line in RSA: using built-in root key for view <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "using built-in root key for view %{fld3}" }
				id => "message-named:13"
				add_field => {
				"context" => "built-in root key"
					"[event][id]" => "named:13"
					"[rsa][message][id1]" => "named:13"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:14
		# line in RSA: zone <dns_ptr_record>/<fld3>: (<username>) <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "zone %{dns_ptr_record}/%{fld3}: (%{username}) %{action}" }
				id => "message-named:14"
				add_field => {
					"[event][id]" => "named:14"
					"[rsa][message][id1]" => "named:14"
					"[event][categoryid]" => "1805000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE named:15
		# line in RSA: too many timeouts resolving '<fld3>' (<fld4>): disabling EDNS
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "too many timeouts resolving '%{fld3}' (%{fld4}): disabling EDNS" }
				id => "message-named:15"
				add_field => {
				"event_description" => "named:too many timeouts resolving DNS."
					"[event][id]" => "named:15"
					"[rsa][message][id1]" => "named:15"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE named:16
		# line in RSA: FORMERR resolving '<hostname>': <saddr>#<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FORMERR resolving '%{hostname}': %{saddr}#%{fld3}" }
				id => "message-named:16"
				add_field => {
				"event_description" => "named:FORMERR resolving DNS."
					"[event][id]" => "named:16"
					"[rsa][message][id1]" => "named:16"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE named:17
		# line in RSA: unexpected RCODE (SERVFAIL) resolving '<hostname>': <saddr>#<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "unexpected RCODE (SERVFAIL) resolving '%{hostname}': %{saddr}#%{fld3}" }
				id => "message-named:17"
				add_field => {
				"event_description" => "named:unexpected RCODE (SERVFAIL) resolving DNS."
					"[event][id]" => "named:17"
					"[rsa][message][id1]" => "named:17"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "httpproxy" {
		# MESSAGE httpproxy:09
		# line in RSA: Integrated HTTP-Proxy <version>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Integrated HTTP-Proxy %{version}" }
				id => "message-httpproxy:09"
				add_field => {
				"event_description" => "httpproxy:Integrated HTTP-Proxy."
					"[event][id]" => "httpproxy:09"
					"[rsa][message][id1]" => "httpproxy:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:10
		# line in RSA: [<fld2>] parse_address (<fld3>) getaddrinfo: passthrough.fw-notify.net: Name or service not known
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] parse_address (%{fld3}) getaddrinfo: passthrough.fw-notify.net: Name or service not known" }
				id => "message-httpproxy:10"
				add_field => {
				"event_description" => "httpproxy:Name or service not known."
					"[event][id]" => "httpproxy:10"
					"[rsa][message][id1]" => "httpproxy:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:11
		# line in RSA: [<fld2>] confd_config_filter (<fld3>) failed to resolve passthrough.fw-notify.net, using <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] confd_config_filter (%{fld3}) failed to resolve passthrough.fw-notify.net, using %{saddr}" }
				id => "message-httpproxy:11"
				add_field => {
				"event_description" => "httpproxy:failed to resolve passthrough."
					"[event][id]" => "httpproxy:11"
					"[rsa][message][id1]" => "httpproxy:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:12
		# line in RSA: [<fld2>] ssl_log_errors (<fld3>) <fld4>ssl handshake failure<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] ssl_log_errors (%{fld3}) %{fld4}ssl handshake failure%{fld5}" }
				id => "message-httpproxy:12"
				add_field => {
				"event_description" => "httpproxy:ssl handshake failure."
					"[event][id]" => "httpproxy:12"
					"[rsa][message][id1]" => "httpproxy:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:13
		# line in RSA: [<fld2>] sc_decrypt (<fld3>) EVP_DecryptFinal failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] sc_decrypt (%{fld3}) EVP_DecryptFinal failed" }
				id => "message-httpproxy:13"
				add_field => {
				"event_description" => "httpproxy:EVP_DecryptFinal failed."
					"[event][id]" => "httpproxy:13"
					"[rsa][message][id1]" => "httpproxy:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:14
		# line in RSA: [<fld2>] sc_server_cmd (<fld3>) decrypt failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] sc_server_cmd (%{fld3}) decrypt failed" }
				id => "message-httpproxy:14"
				add_field => {
				"event_description" => "httpproxy:decrypt failed."
					"[event][id]" => "httpproxy:14"
					"[rsa][message][id1]" => "httpproxy:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:15
		# line in RSA: [<fld2>] clamav_reload (<fld3>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] clamav_reload (%{fld3}) %{info}" }
				id => "message-httpproxy:15"
				add_field => {
				"event_description" => "httpproxy:reloading av pattern"
					"[event][id]" => "httpproxy:15"
					"[rsa][message][id1]" => "httpproxy:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:16
		# line in RSA: [<fld2>] sc_check_servers (<fld3>) server '<hostname>' access time: <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] sc_check_servers (%{fld3}) server '%{hostname}' access time: %{fld4}" }
				id => "message-httpproxy:16"
				add_field => {
				"event_description" => "httpproxy:sc_check_servers.Server checked."
					"[event][id]" => "httpproxy:16"
					"[rsa][message][id1]" => "httpproxy:16"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:17
		# line in RSA: [<fld2>] main (<fld3>) shutdown finished, exiting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] main (%{fld3}) shutdown finished, exiting" }
				id => "message-httpproxy:17"
				add_field => {
				"event_description" => "httpproxy:shutdown finished, exiting."
					"[event][id]" => "httpproxy:17"
					"[rsa][message][id1]" => "httpproxy:17"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:18
		# line in RSA: [<fld2>] main (<fld3>) reading configuration
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] main (%{fld3}) reading configuration" }
				id => "message-httpproxy:18"
				add_field => {
				"event_description" => "httpproxy:"
					"[event][id]" => "httpproxy:18"
					"[rsa][message][id1]" => "httpproxy:18"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:19
		# line in RSA: [<fld2>] main (<fld3>) reading profiles
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] main (%{fld3}) reading profiles" }
				id => "message-httpproxy:19"
				add_field => {
				"event_description" => "httpproxy:reading profiles"
					"[event][id]" => "httpproxy:19"
					"[rsa][message][id1]" => "httpproxy:19"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:20
		# line in RSA: [<fld2>] main (<fld3>) finished startup
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] main (%{fld3}) finished startup" }
				id => "message-httpproxy:20"
				add_field => {
				"event_description" => "httpproxy:finished startup"
					"[event][id]" => "httpproxy:20"
					"[rsa][message][id1]" => "httpproxy:20"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:21
		# line in RSA: [<fld2>] read_request_headers (<fld3>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] read_request_headers (%{fld3}) %{info}" }
				id => "message-httpproxy:21"
				add_field => {
				"event_description" => "httpproxy:read_request_headers related message."
					"[event][id]" => "httpproxy:21"
					"[rsa][message][id1]" => "httpproxy:21"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:22
		# line in RSA: [<fld2>] epoll_loop (<fld3>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] epoll_loop (%{fld3}) %{info}" }
				id => "message-httpproxy:22"
				add_field => {
				"event_description" => "httpproxy:epoll_loop related message."
					"[event][id]" => "httpproxy:22"
					"[rsa][message][id1]" => "httpproxy:22"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:23
		# line in RSA: [<fld2>] scan_exit (<fld3>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] scan_exit (%{fld3}) %{info}" }
				id => "message-httpproxy:23"
				add_field => {
				"event_description" => "httpproxy:scan_exit related message."
					"[event][id]" => "httpproxy:23"
					"[rsa][message][id1]" => "httpproxy:23"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:24
		# line in RSA: [<fld2>] epoll_exit (<fld3>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] epoll_exit (%{fld3}) %{info}" }
				id => "message-httpproxy:24"
				add_field => {
				"event_description" => "httpproxy:epoll_exit related message."
					"[event][id]" => "httpproxy:24"
					"[rsa][message][id1]" => "httpproxy:24"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:25
		# line in RSA: [<fld2>] disk_cache_exit (<fld3>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] disk_cache_exit (%{fld3}) %{info}" }
				id => "message-httpproxy:25"
				add_field => {
				"event_description" => "httpproxy:disk_cache_exit related message."
					"[event][id]" => "httpproxy:25"
					"[rsa][message][id1]" => "httpproxy:25"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:26
		# line in RSA: [<fld2>] disk_cache_zap (<fld3>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] disk_cache_zap (%{fld3}) %{info}" }
				id => "message-httpproxy:26"
				add_field => {
				"event_description" => "httpproxy:disk_cache_zap related message."
					"[event][id]" => "httpproxy:26"
					"[rsa][message][id1]" => "httpproxy:26"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:27
		# line in RSA: [<fld2>] scanner_init (<fld3>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld2}] scanner_init (%{fld3}) %{info}" }
				id => "message-httpproxy:27"
				add_field => {
				"event_description" => "httpproxy:scanner_init related message."
					"[event][id]" => "httpproxy:27"
					"[rsa][message][id1]" => "httpproxy:27"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpproxy:01
		# line in RSA: id=<rule> severity=<severity> sys=<vsys> sub=<network_service> name=<event_description> action=<action> method=<web_method> srcip=<saddr> dstip=<daddr> user=<username> ad_domain=<fld1> statuscode=<resultcode> cached=<fld2> profile=<policyname> filteraction=<fld3> size=<rbytes> request=<connectionid> url=<url> referer=<web_referer> error=<result> authtime=<fld4> dnstime=<fld5> cattime=<fld6> avscantime=<fld7> fullreqtime=<fld8> device=<fld9> auth=<fld10> ua=<fld11> exceptions=<fld12> group=<group> reason=<rule_group> category=<policy_id> categoryname=<info> extension=<fld13> filename=<filename> content-type=<content_type>  function=<action> file=<filename> line=<fld14> message=<context> time=<fld15>  reputation=<fld16> application=<fld17> app-id=<fld18>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "id=%{rule} severity=%{severity} sys=%{vsys} sub=%{network_service} name=%{event_description} action=%{action} method=%{web_method} srcip=%{saddr} dstip=%{daddr} user=%{username} ad_domain=%{fld1} statuscode=%{resultcode} cached=%{fld2} profile=%{policyname} filteraction=%{fld3} size=%{rbytes} request=%{connectionid} url=%{url} referer=%{web_referer} error=%{result} authtime=%{fld4} dnstime=%{fld5} cattime=%{fld6} avscantime=%{fld7} fullreqtime=%{fld8} device=%{fld9} auth=%{fld10} ua=%{fld11} exceptions=%{fld12} group=%{group} reason=%{rule_group} category=%{policy_id} categoryname=%{info} extension=%{fld13} filename=%{filename} content-type=%{content_type}  function=%{action} file=%{filename} line=%{fld14} message=%{context} time=%{fld15}  reputation=%{fld16} application=%{fld17} app-id=%{fld18}" }
				id => "message-httpproxy:01"
				add_field => {
					"[event][id]" => "httpproxy:01"
					"[rsa][message][id1]" => "httpproxy:01"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId37
	# line in RSA: T=<fld3> ------ 1 - [exit] <action>: <disposition>
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "T=%{fld3} ------ 1 - [exit] %{action}: %{disposition}" }
			id => "msgParserId37"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
		}
	}
	# PARSER msgParserId38
	# line in RSA: id=<rule> severity=<severity> sys=<vsys> sub=<network_service> name=<event_description> action=<action> fwrule=<policy_id> seq=<fld23> initf=<sinterface> outitf=<dinterface> dstmac=<dmacaddr> srcmac=<smacaddr> srcip=<saddr> dstip=<daddr> proto=<fld24> length=<fld25> tos=<fld26> prec=<fld27> ttl=<fld28> srcport=<sport> dstport=<dport> tcpflags=<fld29> info=<context> code=<fld30> type=<fld31>
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "id=%{rule} severity=%{severity} sys=%{vsys} sub=%{network_service} name=%{event_description} action=%{action} fwrule=%{policy_id} seq=%{fld23} initf=%{sinterface} outitf=%{dinterface} dstmac=%{dmacaddr} srcmac=%{smacaddr} srcip=%{saddr} dstip=%{daddr} proto=%{fld24} length=%{fld25} tos=%{fld26} prec=%{fld27} ttl=%{fld28} srcport=%{sport} dstport=%{dport} tcpflags=%{fld29} info=%{context} code=%{fld30} type=%{fld31}" }
			id => "msgParserId38"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "reverseproxy" {
		# MESSAGE reverseproxy:01
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] ModSecurity for Apache/<fld5> (<fld6>) configured.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] ModSecurity for Apache/%{fld5} (%{fld6}) configured." }
				id => "message-reverseproxy:01"
				add_field => {
				"disposition" => "configured"
					"[event][id]" => "reverseproxy:01"
					"[rsa][message][id1]" => "reverseproxy:01"
					"[event][categoryid]" => "1701060000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:02
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] ModSecurity: <fld5> compiled version="<fld6>"; loaded version="<fld7>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] ModSecurity: %{fld5} compiled version=\"%{fld6}\"; loaded version=\"%{fld7}\"" }
				id => "message-reverseproxy:02"
				add_field => {
					"[event][id]" => "reverseproxy:02"
					"[rsa][message][id1]" => "reverseproxy:02"
					"[event][categoryid]" => "1702000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:03
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] ModSecurity: <fld5> compiled version="<fld6>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] ModSecurity: %{fld5} compiled version=\"%{fld6}\"" }
				id => "message-reverseproxy:03"
				add_field => {
					"[event][id]" => "reverseproxy:03"
					"[rsa][message][id1]" => "reverseproxy:03"
					"[event][categoryid]" => "1702000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:04
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] <fld5> configured -- <disposition> normal operations
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] %{fld5} configured -- %{disposition} normal operations" }
				id => "message-reverseproxy:04"
				add_field => {
				"event_id" => "AH00292"
					"[event][id]" => "reverseproxy:04"
					"[rsa][message][id1]" => "reverseproxy:04"
					"[event][categoryid]" => "1702000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:06
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [<fld5>] Hostname in <network_service> request (<fld6>) does not match the server name (<ddomain>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [%{fld5}] Hostname in %{network_service} request (%{fld6}) does not match the server name (%{ddomain})" }
				id => "message-reverseproxy:06"
				add_field => {
				"comments" => "server certificate has a different hostname from actual hostname"
					"[event][id]" => "reverseproxy:06"
					"[rsa][message][id1]" => "reverseproxy:06"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:07
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH00297: <action> {received. Doing|received.  Doing} graceful <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^\[(?<fld3>[^\]]*)\][\s]+\[(?<event_log>[^:]*):(?<severity>[^\]]*)\][\s]+\[pid[\s]+(?<process_id>[^:]*):(?<fld4>[^\]]*)\][\s]+AH00297:[\s]+(?<action>[^\s]*)[\s]+(received\.[\s]+Doing|received\.[\s]+Doing)[\s]+graceful[\s]+(?<disposition>.*)$" }
				id => "message-reverseproxy:07"
				add_field => {
				"event_id" => "AH00297"
					"[event][id]" => "reverseproxy:07"
					"[rsa][message][id1]" => "reverseproxy:07"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:08
		# line in RSA: AH00112: Warning: DocumentRoot [<web_root>] does not exist
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AH00112: Warning: DocumentRoot [%{web_root}] does not exist" }
				id => "message-reverseproxy:08"
				add_field => {
				"event_id" => "AH00112"
					"[event][id]" => "reverseproxy:08"
					"[rsa][message][id1]" => "reverseproxy:08"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:09
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH00094: Command line: '<web_root>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH00094: Command line: '%{web_root}'" }
				id => "message-reverseproxy:09"
				add_field => {
				"event_id" => "AH00094"
					"[event][id]" => "reverseproxy:09"
					"[rsa][message][id1]" => "reverseproxy:09"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:10
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH00291: long lost child came home! (pid <fld5>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH00291: long lost child came home! (pid %{fld5})" }
				id => "message-reverseproxy:10"
				add_field => {
				"event_id" => "AH00291"
					"[event][id]" => "reverseproxy:10"
					"[rsa][message][id1]" => "reverseproxy:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:11
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH02572: Failed to configure at least one certificate and key for <fld5>:<fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH02572: Failed to configure at least one certificate and key for %{fld5}:%{fld6}" }
				id => "message-reverseproxy:11"
				add_field => {
				"event_id" => "AH02572"
					"[event][id]" => "reverseproxy:11"
					"[rsa][message][id1]" => "reverseproxy:11"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:12
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] SSL Library Error: error:<resultcode>:<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] SSL Library Error: error:%{resultcode}:%{result}" }
				id => "message-reverseproxy:12"
				add_field => {
				"context" => "SSL Library Error"
					"[event][id]" => "reverseproxy:12"
					"[rsa][message][id1]" => "reverseproxy:12"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:13
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH02312: Fatal error initialising mod_ssl, <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH02312: Fatal error initialising mod_ssl, %{disposition}." }
				id => "message-reverseproxy:13"
				add_field => {
				"result" => "Fatal error"
				"event_id" => "AH02312"
					"[event][id]" => "reverseproxy:13"
					"[rsa][message][id1]" => "reverseproxy:13"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:14
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH00020: Configuration Failed, <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH00020: Configuration Failed, %{disposition}" }
				id => "message-reverseproxy:14"
				add_field => {
				"result" => "Configuration Failed"
				"event_id" => "AH00020"
					"[event][id]" => "reverseproxy:14"
					"[rsa][message][id1]" => "reverseproxy:14"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:15
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH00098: pid file <filename> overwritten -- Unclean shutdown of previous Apache run?
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH00098: pid file %{filename} overwritten -- Unclean shutdown of previous Apache run?" }
				id => "message-reverseproxy:15"
				add_field => {
				"context" => "Unclean shutdown"
				"event_id" => "AH00098"
					"[event][id]" => "reverseproxy:15"
					"[rsa][message][id1]" => "reverseproxy:15"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:16
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH00295: caught <action>, <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH00295: caught %{action}, %{disposition}" }
				id => "message-reverseproxy:16"
				add_field => {
				"event_id" => "AH00295"
					"[event][id]" => "reverseproxy:16"
					"[rsa][message][id1]" => "reverseproxy:16"
					"[event][categoryid]" => "1611000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:17
		# line in RSA: [<fld3>] [<event_log>:<result>] [pid <process_id>:<fld4>] [client <gateway>] ModSecurity: Warning. <rulename> [file "<filename>"] [line "<fld5>"] {[id "<rule>"] [rev "<fld6>"]|[id "<rule>"]} [msg "<comments>"] [data "<daddr>"] [severity "<severity>"] [ver "<policyname>"] [maturity "<fld7>"] [accuracy "<fld8>"] <context> [hostname "<dhost>"] [uri "<web_root>"] [unique_id "<operation_id>"]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^\[(?<fld3>[^\]]*)\][\s]+\[(?<event_log>[^:]*):(?<result>[^\]]*)\][\s]+\[pid[\s]+(?<process_id>[^:]*):(?<fld4>[^\]]*)\][\s]+\[client[\s]+(?<gateway>[^\]]*)\][\s]+ModSecurity:[\s]+Warning\.[\s]+(?<rulename>[^\s]*)[\s]+\[file[\s]+\"(?<filename>[^\"]*)\"\][\s]+\[line[\s]+\"(?<fld5>[^\"]*)\"\][\s]+(\[id[\s]+\"(?<rule>[^\"]*)\"\][\s]+\[rev[\s]+\"(?<fld6>[^\"]*)\"\]|\[id[\s]+\"(?<rule>[^\"]*)\"\])[\s]+\[msg[\s]+\"(?<comments>[^\"]*)\"\][\s]+\[data[\s]+\"(?<daddr>[^\"]*)\"\][\s]+\[severity[\s]+\"(?<severity>[^\"]*)\"\][\s]+\[ver[\s]+\"(?<policyname>[^\"]*)\"\][\s]+\[maturity[\s]+\"(?<fld7>[^\"]*)\"\][\s]+\[accuracy[\s]+\"(?<fld8>[^\"]*)\"\][\s]+(?<context>[^\s]*)[\s]+\[hostname[\s]+\"(?<dhost>[^\"]*)\"\][\s]+\[uri[\s]+\"(?<web_root>[^\"]*)\"\][\s]+\[unique_id[\s]+\"(?<operation_id>[^\"]*)\"\]$" }
				id => "message-reverseproxy:17"
				add_field => {
					"[event][id]" => "reverseproxy:17"
					"[rsa][message][id1]" => "reverseproxy:17"
					"[event][categoryid]" => "1502020000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:18
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] No signature found, cookie: <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] No signature found, cookie: %{fld5}" }
				id => "message-reverseproxy:18"
				add_field => {
				"comments" => "No signature on cookie"
					"[event][id]" => "reverseproxy:18"
					"[rsa][message][id1]" => "reverseproxy:18"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:19
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] <disposition> '<fld5>' from request due to missing/invalid signature
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] %{disposition} '%{fld5}' from request due to missing/invalid signature" }
				id => "message-reverseproxy:19"
				add_field => {
				"comments" => "No signature on cookie"
					"[event][id]" => "reverseproxy:19"
					"[rsa][message][id1]" => "reverseproxy:19"
					"[event][categoryid]" => "1502010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:20
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] ModSecurity: Warning. <rulename> [file "<filename>"] [line "<fld5>"] [id "<rule>"] [msg "<comments>"] [hostname "<dhost>"] [uri "<web_root>"] [unique_id "<operation_id>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] ModSecurity: Warning. %{rulename} [file \"%{filename}\"] [line \"%{fld5}\"] [id \"%{rule}\"] [msg \"%{comments}\"] [hostname \"%{dhost}\"] [uri \"%{web_root}\"] [unique_id \"%{operation_id}\"]" }
				id => "message-reverseproxy:20"
				add_field => {
					"[event][id]" => "reverseproxy:20"
					"[rsa][message][id1]" => "reverseproxy:20"
					"[event][categoryid]" => "1502020000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:21
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH01909: <daddr>:<dport>:<fld5> server certificate does NOT include an ID which matches the server name
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH01909: %{daddr}:%{dport}:%{fld5} server certificate does NOT include an ID which matches the server name" }
				id => "message-reverseproxy:21"
				add_field => {
				"comments" => "server certificate has a different hostname from actual hostname"
				"event_id" => "AH01909"
					"[event][id]" => "reverseproxy:21"
					"[rsa][message][id1]" => "reverseproxy:21"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:22
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH01915: Init: (<daddr>:<dport>) You configured <network_service>(<fld5>) on the <fld6>(<fld7>) port!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH01915: Init: (%{daddr}:%{dport}) You configured %{network_service}(%{fld5}) on the %{fld6}(%{fld7}) port!" }
				id => "message-reverseproxy:22"
				add_field => {
				"comments" => "Invalid port configuration"
					"[event][id]" => "reverseproxy:22"
					"[rsa][message][id1]" => "reverseproxy:22"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:23
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] ModSecurity: Rule <rulename> [id "<rule>"][file "<filename>"][line "<fld5>"] - Execution error - PCRE limits exceeded (<fld6>): (<fld7>). [hostname "<dhost>"] [uri "<web_root>"] [unique_id "<operation_id>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] ModSecurity: Rule %{rulename} [id \"%{rule}\"][file \"%{filename}\"][line \"%{fld5}\"] - Execution error - PCRE limits exceeded (%{fld6}): (%{fld7}). [hostname \"%{dhost}\"] [uri \"%{web_root}\"] [unique_id \"%{operation_id}\"]" }
				id => "message-reverseproxy:23"
				add_field => {
					"[event][id]" => "reverseproxy:23"
					"[rsa][message][id1]" => "reverseproxy:23"
					"[event][categoryid]" => "1502020000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:24
		# line in RSA: rManage\\x22,\\x22manageLiveSystemSettings\\x22,\\x22accessViewJobs\\x22,\\x22exportList\\..."] [ver "<policyname>"] [maturity "<fld3>"] [accuracy "<fld4>"] <context> [hostname "<dhost>"] [uri "<web_root>"] [unique_id "<operation_id>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "rManage\\x22,\\x22manageLiveSystemSettings\\x22,\\x22accessViewJobs\\x22,\\x22exportList\\...\"] [ver \"%{policyname}\"] [maturity \"%{fld3}\"] [accuracy \"%{fld4}\"] %{context} [hostname \"%{dhost}\"] [uri \"%{web_root}\"] [unique_id \"%{operation_id}\"]" }
				id => "message-reverseproxy:24"
				add_field => {
					"[event][id]" => "reverseproxy:24"
					"[rsa][message][id1]" => "reverseproxy:24"
					"[event][categoryid]" => "1502020000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:25
		# line in RSA: ARGS:userPermissions: [\\x22dashletAccessAlertingRecentAlertsPanel\\x22,\\x22dashletAccessAlerterTopAlertsDashlet\\x22,\\x22accessViewRules\\x22,\\x22deployLiveResources\\x22,\\x22vi..."] [severity [hostname "<dhost>"] [uri "<web_root>"] [unique_id "<operation_id>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ARGS:userPermissions: [\\x22dashletAccessAlertingRecentAlertsPanel\\x22,\\x22dashletAccessAlerterTopAlertsDashlet\\x22,\\x22accessViewRules\\x22,\\x22deployLiveResources\\x22,\\x22vi...\"] [severity [hostname \"%{dhost}\"] [uri \"%{web_root}\"] [unique_id \"%{operation_id}\"]" }
				id => "message-reverseproxy:25"
				add_field => {
					"[event][id]" => "reverseproxy:25"
					"[rsa][message][id1]" => "reverseproxy:25"
					"[event][categoryid]" => "1502020000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:26
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] ModSecurity: <disposition> with code <resultcode> (<fld5>). <rulename> [file "<filename>"] [line "<fld6>"] {[id "<rule>"]|[id "<rule>"] [rev "<fld7>"]} [msg "<comments>"] [data "Last Matched Data: {<daddr>:<dport>|<daddr>}"] [hostname "<dhost>"] [uri "<web_root>"] [unique_id "<operation_id>"]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^\[(?<fld3>[^\]]*)\][\s]+\[(?<event_log>[^:]*):(?<severity>[^\]]*)\][\s]+\[pid[\s]+(?<process_id>[^:]*):(?<fld4>[^\]]*)\][\s]+\[client[\s]+(?<gateway>[^\]]*)\][\s]+ModSecurity:[\s]+(?<disposition>[^\s]*)[\s]+with[\s]+code[\s]+(?<resultcode>[^\s]*)[\s]+\((?<fld5>[^\)]*)\)\.[\s]+(?<rulename>[^\s]*)[\s]+\[file[\s]+\"(?<filename>[^\"]*)\"\][\s]+\[line[\s]+\"(?<fld6>[^\"]*)\"\][\s]+(\[id[\s]+\"(?<rule>[^\"]*)\"\]|\[id[\s]+\"(?<rule>[^\"]*)\"\][\s]+\[rev[\s]+\"(?<fld7>[^\"]*)\"\])[\s]+\[msg[\s]+\"(?<comments>[^\"]*)\"\][\s]+\[data[\s]+\"Last[\s]+Matched[\s]+Data:[\s]+((?<daddr>[^:]*):(?<dport>[^\"]*)|(?<daddr>[^\"]*))\"\][\s]+\[hostname[\s]+\"(?<dhost>[^\"]*)\"\][\s]+\[uri[\s]+\"(?<web_root>[^\"]*)\"\][\s]+\[unique_id[\s]+\"(?<operation_id>[^\"]*)\"\]$" }
				id => "message-reverseproxy:26"
				add_field => {
					"[event][id]" => "reverseproxy:26"
					"[rsa][message][id1]" => "reverseproxy:26"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:27
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] <disposition> while reading reply from cssd, referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] %{disposition} while reading reply from cssd, referer: %{web_referer}" }
				id => "message-reverseproxy:27"
				add_field => {
					"[event][id]" => "reverseproxy:27"
					"[rsa][message][id1]" => "reverseproxy:27"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:28
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] virus daemon error found in request <web_root>, referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] virus daemon error found in request %{web_root}, referer: %{web_referer}" }
				id => "message-reverseproxy:28"
				add_field => {
				"result" => "virus daemon error"
					"[event][id]" => "reverseproxy:28"
					"[rsa][message][id1]" => "reverseproxy:28"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:29
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] mod_avscan_input_filter: virus found, referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] mod_avscan_input_filter: virus found, referer: %{web_referer}" }
				id => "message-reverseproxy:29"
				add_field => {
				"result" => "virus found"
					"[event][id]" => "reverseproxy:29"
					"[rsa][message][id1]" => "reverseproxy:29"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:30
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] (13)<result>: [client <gateway>] AH01095: prefetch request body failed to <saddr>:<sport> (<fld5>) from <fld6> (), referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] (13)%{result}: [client %{gateway}] AH01095: prefetch request body failed to %{saddr}:%{sport} (%{fld5}) from %{fld6} (), referer: %{web_referer}" }
				id => "message-reverseproxy:30"
				add_field => {
				"event_id" => "AH01095"
					"[event][id]" => "reverseproxy:30"
					"[rsa][message][id1]" => "reverseproxy:30"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:31
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] cannot read reply: Operation now in progress (115), referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] cannot read reply: Operation now in progress (115), referer: %{web_referer}" }
				id => "message-reverseproxy:31"
				add_field => {
				"result" => "Cannot read reply"
					"[event][id]" => "reverseproxy:31"
					"[rsa][message][id1]" => "reverseproxy:31"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:32
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] cannot connect: <result> (111), referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] cannot connect: %{result} (111), referer: %{web_referer}" }
				id => "message-reverseproxy:32"
				add_field => {
					"[event][id]" => "reverseproxy:32"
					"[rsa][message][id1]" => "reverseproxy:32"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:33
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] cannot connect: <result> (111)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] cannot connect: %{result} (111)" }
				id => "message-reverseproxy:33"
				add_field => {
					"[event][id]" => "reverseproxy:33"
					"[rsa][message][id1]" => "reverseproxy:33"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:34
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] virus daemon connection problem found in request <url>, referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] virus daemon connection problem found in request %{url}, referer: %{web_referer}" }
				id => "message-reverseproxy:34"
				add_field => {
				"result" => "Virus daemon connection problem"
					"[event][id]" => "reverseproxy:34"
					"[rsa][message][id1]" => "reverseproxy:34"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:35
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] virus daemon connection problem found in request <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] virus daemon connection problem found in request %{url}" }
				id => "message-reverseproxy:35"
				add_field => {
				"result" => "Virus daemon connection problem"
					"[event][id]" => "reverseproxy:35"
					"[rsa][message][id1]" => "reverseproxy:35"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:36
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] mod_avscan_input_filter: virus found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] mod_avscan_input_filter: virus found" }
				id => "message-reverseproxy:36"
				add_field => {
				"result" => "Virus found"
					"[event][id]" => "reverseproxy:36"
					"[rsa][message][id1]" => "reverseproxy:36"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:37
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] (13)<result>: [client <gateway>] AH01095: prefetch request body failed to <saddr>:<sport> (<fld5>) from <fld6> ()
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] (13)%{result}: [client %{gateway}] AH01095: prefetch request body failed to %{saddr}:%{sport} (%{fld5}) from %{fld6} ()" }
				id => "message-reverseproxy:37"
				add_field => {
				"event_id" => "AH01095"
					"[event][id]" => "reverseproxy:37"
					"[rsa][message][id1]" => "reverseproxy:37"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:38
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] Invalid signature, cookie: JSESSIONID
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] Invalid signature, cookie: JSESSIONID" }
				id => "message-reverseproxy:38"
				add_field => {
					"[event][id]" => "reverseproxy:38"
					"[rsa][message][id1]" => "reverseproxy:38"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:39
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] Form validation failed: Received unhardened form data, referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] Form validation failed: Received unhardened form data, referer: %{web_referer}" }
				id => "message-reverseproxy:39"
				add_field => {
				"result" => "Form validation failed"
					"[event][id]" => "reverseproxy:39"
					"[rsa][message][id1]" => "reverseproxy:39"
					"[event][categoryid]" => "1502010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:40
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] sending trickle failed: 103
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] sending trickle failed: 103" }
				id => "message-reverseproxy:40"
				add_field => {
				"result" => "Sending trickle failed"
					"[event][id]" => "reverseproxy:40"
					"[rsa][message][id1]" => "reverseproxy:40"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:41
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] client requesting <web_root> has <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] client requesting %{web_root} has %{disposition}" }
				id => "message-reverseproxy:41"
				add_field => {
					"[event][id]" => "reverseproxy:41"
					"[rsa][message][id1]" => "reverseproxy:41"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:42
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] mod_avscan_check_file_single_part() called with parameter filename=<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] mod_avscan_check_file_single_part() called with parameter filename=%{filename}" }
				id => "message-reverseproxy:42"
				add_field => {
					"[event][id]" => "reverseproxy:42"
					"[rsa][message][id1]" => "reverseproxy:42"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:43
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] (70007)The <disposition> specified has expired: [client <gateway>] AH01110: error reading response
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] (70007)The %{disposition} specified has expired: [client %{gateway}] AH01110: error reading response" }
				id => "message-reverseproxy:43"
				add_field => {
				"event_id" => "AH01110"
				"result" => "Error reading response"
					"[event][id]" => "reverseproxy:43"
					"[rsa][message][id1]" => "reverseproxy:43"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:44
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] (22)<result>: [client <gateway>] No form context found when parsing <fld5> tag, referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] (22)%{result}: [client %{gateway}] No form context found when parsing %{fld5} tag, referer: %{web_referer}" }
				id => "message-reverseproxy:44"
				add_field => {
				"result" => "No form context found"
					"[event][id]" => "reverseproxy:44"
					"[rsa][message][id1]" => "reverseproxy:44"
					"[event][categoryid]" => "1601020000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:45
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] (111)<result>: AH00957: <network_service>: attempt to connect to <daddr>:<dport> (<fld5>) failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] (111)%{result}: AH00957: %{network_service}: attempt to connect to %{daddr}:%{dport} (%{fld5}) failed" }
				id => "message-reverseproxy:45"
				add_field => {
				"event_id" => "AH00957"
					"[event][id]" => "reverseproxy:45"
					"[rsa][message][id1]" => "reverseproxy:45"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:46
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] AH00959: ap_proxy_connect_backend disabling worker for (<daddr>) for <processing_time>s
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] AH00959: ap_proxy_connect_backend disabling worker for (%{daddr}) for %{processing_time}s" }
				id => "message-reverseproxy:46"
				add_field => {
				"event_id" => "AH00959"
				"result" => "disabling worker"
					"[event][id]" => "reverseproxy:46"
					"[rsa][message][id1]" => "reverseproxy:46"
					"[event][categoryid]" => "1611000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:47
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] [<fld5>] not all the file sent to the client: <fld6>, referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] [%{fld5}] not all the file sent to the client: %{fld6}, referer: %{web_referer}" }
				id => "message-reverseproxy:47"
				add_field => {
				"context" => "Not all file sent to client"
					"[event][id]" => "reverseproxy:47"
					"[rsa][message][id1]" => "reverseproxy:47"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:48
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] AH01114: <network_service>: failed to make connection to backend: <daddr>, referer: <web_referer>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] AH01114: %{network_service}: failed to make connection to backend: %{daddr}, referer: %{web_referer}" }
				id => "message-reverseproxy:48"
				add_field => {
				"event_id" => "AH01114"
				"result" => "Backend connection failed"
					"[event][id]" => "reverseproxy:48"
					"[rsa][message][id1]" => "reverseproxy:48"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:49
		# line in RSA: [<fld3>] [<event_log>:<severity>] [pid <process_id>:<fld4>] [client <gateway>] AH01114: <network_service>: failed to make connection to backend: <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{fld3}] [%{event_log}:%{severity}] [pid %{process_id}:%{fld4}] [client %{gateway}] AH01114: %{network_service}: failed to make connection to backend: %{daddr}" }
				id => "message-reverseproxy:49"
				add_field => {
				"event_id" => "AH01114"
				"result" => "Backend connection failed"
					"[event][id]" => "reverseproxy:49"
					"[rsa][message][id1]" => "reverseproxy:49"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
		# MESSAGE reverseproxy:05
		# line in RSA: id=<policy_id> srcip=<saddr> localip=<fld3> size=<fld4> user=<username> host=<dhost> method=<web_method> statuscode=<resultcode> reason=<comments> extra=<info> exceptions=<policy_waiver> time=<processing_time> url=<web_root> server=<daddr> referer=<web_referer> cookie=<web_cookie> set-cookie=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "id=%{policy_id} srcip=%{saddr} localip=%{fld3} size=%{fld4} user=%{username} host=%{dhost} method=%{web_method} statuscode=%{resultcode} reason=%{comments} extra=%{info} exceptions=%{policy_waiver} time=%{processing_time} url=%{web_root} server=%{daddr} referer=%{web_referer} cookie=%{web_cookie} set-cookie=%{fld5}" }
				id => "message-reverseproxy:05"
				add_field => {
					"[event][id]" => "reverseproxy:05"
					"[rsa][message][id1]" => "reverseproxy:05"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
	}
	# PARSER msgParserId88
	# line in RSA: id=<fld5> severity=<severity> sys=<fld2> sub=<service> name=<event_description>
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "id=%{fld5} severity=%{severity} sys=%{fld2} sub=%{service} name=%{event_description}" }
			id => "msgParserId88"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
		}
	}
	# PARSER msgParserId89
	# line in RSA: id=<fld1> severity=<severity> sys=<fld2> sub=<service> name=<event_description> client=<fld3> facility=<logon_type> user=<username> srcip=<saddr> version=<version> storage=<directory> object=<fld6> class=<group_object> type=<obj_type> attributes=<obj_name>count=<fld4> node=<node> account=<logon_id>
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "id=%{fld1} severity=%{severity} sys=%{fld2} sub=%{service} name=%{event_description} client=%{fld3} facility=%{logon_type} user=%{username} srcip=%{saddr} version=%{version} storage=%{directory} object=%{fld6} class=%{group_object} type=%{obj_type} attributes=%{obj_name}count=%{fld4} node=%{node} account=%{logon_id}" }
			id => "msgParserId89"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "frox" {
		# MESSAGE frox
		# line in RSA: Frox started
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Frox started" }
				id => "message-frox"
				add_field => {
				"event_description" => "frox:FTP Proxy Frox started."
					"[event][id]" => "frox"
					"[rsa][message][id1]" => "frox"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE frox:01
		# line in RSA: Listening on <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Listening on %{saddr}:%{sport}" }
				id => "message-frox:01"
				add_field => {
				"event_description" => "frox:FTP Proxy listening on port."
					"[event][id]" => "frox:01"
					"[rsa][message][id1]" => "frox:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE frox:02
		# line in RSA: Dropped privileges
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dropped privileges" }
				id => "message-frox:02"
				add_field => {
				"event_description" => "frox:FTP Proxy dropped priveleges."
					"[event][id]" => "frox:02"
					"[rsa][message][id1]" => "frox:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId93
	# line in RSA: Classifier configuration reloaded successfully
	else if [logstash][msgparser][id] == "msgParserId93" {
		dissect {
			mapping => { "message" => "Classifier configuration reloaded successfully" }
			id => "msgParserId93"
			add_field => {
				"event_description" => "afcd: IM/P2P Classifier configuration reloaded successfully."
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "ipsec_starter" {
		# MESSAGE ipsec_starter
		# line in RSA: Starting strongSwan <fld2> IPsec [starter]...
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting strongSwan %{fld2} IPsec [starter]..." }
				id => "message-ipsec_starter"
				add_field => {
				"event_description" => "ipsec_starter: Starting strongSwan 4.2.3 IPsec [starter]..."
					"[event][id]" => "ipsec_starter"
					"[rsa][message][id1]" => "ipsec_starter"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE ipsec_starter:01
		# line in RSA: IP address or index of physical interface changed -> reinit of ipsec interface
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP address or index of physical interface changed -> reinit of ipsec interface" }
				id => "message-ipsec_starter:01"
				add_field => {
				"event_description" => "ipsec_starter: IP address or index of physical interface changed."
					"[event][id]" => "ipsec_starter:01"
					"[rsa][message][id1]" => "ipsec_starter:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "pluto" {
		# MESSAGE pluto
		# line in RSA: Starting Pluto (<info>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting Pluto (%{info})" }
				id => "message-pluto"
				add_field => {
				"event_description" => "pluto: Starting Pluto."
					"[event][id]" => "pluto"
					"[rsa][message][id1]" => "pluto"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:01
		# line in RSA:   including NAT-Traversal patch (<info>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "including NAT-Traversal patch (%{info})" }
				id => "message-pluto:01"
				add_field => {
				"event_description" => "pluto: including NAT-Traversal patch."
					"[event][id]" => "pluto:01"
					"[rsa][message][id1]" => "pluto:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:02
		# line in RSA: ike_alg: Activating <info> encryption: Ok
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ike_alg: Activating %{info} encryption: Ok" }
				id => "message-pluto:02"
				add_field => {
				"event_description" => "pluto: Activating encryption algorithm."
					"[event][id]" => "pluto:02"
					"[rsa][message][id1]" => "pluto:02"
					"[event][categoryid]" => "1613010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:03
		# line in RSA: ike_alg: Activating <info> hash: Ok
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ike_alg: Activating %{info} hash: Ok" }
				id => "message-pluto:03"
				add_field => {
				"event_description" => "pluto: Activating hash algorithm."
					"[event][id]" => "pluto:03"
					"[rsa][message][id1]" => "pluto:03"
					"[event][categoryid]" => "1613010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:04
		# line in RSA: Testing registered IKE encryption algorithms:
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Testing registered IKE encryption algorithms:" }
				id => "message-pluto:04"
				add_field => {
				"event_description" => "pluto: Testing registered IKE encryption algorithms"
					"[event][id]" => "pluto:04"
					"[rsa][message][id1]" => "pluto:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:05
		# line in RSA: <info> self-test not available
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info} self-test not available" }
				id => "message-pluto:05"
				add_field => {
				"event_description" => "pluto: Algorithm self-test not available."
					"[event][id]" => "pluto:05"
					"[rsa][message][id1]" => "pluto:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:06
		# line in RSA: <info> self-test passed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info} self-test passed" }
				id => "message-pluto:06"
				add_field => {
				"event_description" => "pluto: Algorithm self-test passed."
					"[event][id]" => "pluto:06"
					"[rsa][message][id1]" => "pluto:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:07
		# line in RSA: Using KLIPS IPsec interface code
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Using KLIPS IPsec interface code" }
				id => "message-pluto:07"
				add_field => {
				"event_description" => "pluto: Using KLIPS IPsec interface code"
					"[event][id]" => "pluto:07"
					"[rsa][message][id1]" => "pluto:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:08
		# line in RSA: adding interface <interface> <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "adding interface %{interface} %{saddr}:%{sport}" }
				id => "message-pluto:08"
				add_field => {
				"event_description" => "pluto: adding interface"
					"[event][id]" => "pluto:08"
					"[rsa][message][id1]" => "pluto:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:09
		# line in RSA: loading secrets from "<filename>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "loading secrets from \"%{filename}\"" }
				id => "message-pluto:09"
				add_field => {
				"event_description" => "pluto: loading secrets"
					"[event][id]" => "pluto:09"
					"[rsa][message][id1]" => "pluto:09"
					"[event][categoryid]" => "1613030000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:10
		# line in RSA:   loaded private key file '<filename>' (<filename_size> bytes)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "loaded private key file '%{filename}' (%{filename_size} bytes)" }
				id => "message-pluto:10"
				add_field => {
				"event_description" => "pluto: loaded private key file"
					"[event][id]" => "pluto:10"
					"[rsa][message][id1]" => "pluto:10"
					"[event][categoryid]" => "1613030000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:11
		# line in RSA: added connection description "<fld2>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "added connection description \"%{fld2}\"" }
				id => "message-pluto:11"
				add_field => {
				"event_description" => "pluto: added connection description"
					"[event][id]" => "pluto:11"
					"[rsa][message][id1]" => "pluto:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:12
		# line in RSA: "<fld2>" #<fld3>: initiating Main Mode
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{fld2}\" #%{fld3}: initiating Main Mode" }
				id => "message-pluto:12"
				add_field => {
				"event_description" => "pluto:initiating Main Mode"
					"[event][id]" => "pluto:12"
					"[rsa][message][id1]" => "pluto:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:13
		# line in RSA: "<fld2>" #<fld3>: max number of retransmissions (<fld4>) reached STATE_MAIN_I1.  No response (or no acceptable response) to our first IKE message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{fld2}\" #%{fld3}: max number of retransmissions (%{fld4}) reached STATE_MAIN_I1.  No response (or no acceptable response) to our first IKE message" }
				id => "message-pluto:13"
				add_field => {
				"event_description" => "pluto: No response to our first IKE message"
					"[event][id]" => "pluto:13"
					"[rsa][message][id1]" => "pluto:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:14
		# line in RSA: "<fld2>" #<fld3>: starting keying attempt <fld4> of an unlimited number
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{fld2}\" #%{fld3}: starting keying attempt %{fld4} of an unlimited number" }
				id => "message-pluto:14"
				add_field => {
				"event_description" => "pluto: starting keying attempt of an unlimited number"
					"[event][id]" => "pluto:14"
					"[rsa][message][id1]" => "pluto:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:15
		# line in RSA: forgetting secrets
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "forgetting secrets" }
				id => "message-pluto:15"
				add_field => {
				"event_description" => "pluto:forgetting secrets"
					"[event][id]" => "pluto:15"
					"[rsa][message][id1]" => "pluto:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:17
		# line in RSA: Changing to directory '<directory>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Changing to directory '%{directory}'" }
				id => "message-pluto:17"
				add_field => {
				"event_description" => "pluto:Changing to directory"
					"[event][id]" => "pluto:17"
					"[rsa][message][id1]" => "pluto:17"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:18
		# line in RSA: | *time to handle event
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| *time to handle event" }
				id => "message-pluto:18"
				add_field => {
				"event_description" => "pluto:*time to handle event"
					"[event][id]" => "pluto:18"
					"[rsa][message][id1]" => "pluto:18"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:19
		# line in RSA: | *received kernel message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| *received kernel message" }
				id => "message-pluto:19"
				add_field => {
				"event_description" => "pluto:*received kernel message"
					"[event][id]" => "pluto:19"
					"[rsa][message][id1]" => "pluto:19"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:20
		# line in RSA: | rejected packet:
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| rejected packet:" }
				id => "message-pluto:20"
				add_field => {
				"event_description" => "pluto:rejected packet"
					"[event][id]" => "pluto:20"
					"[rsa][message][id1]" => "pluto:20"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:21
		# line in RSA: | next event <event_type> in <fld2> seconds for #<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| next event %{event_type} in %{fld2} seconds for #%{fld3}" }
				id => "message-pluto:21"
				add_field => {
					"[event][id]" => "pluto:21"
					"[rsa][message][id1]" => "pluto:21"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:22
		# line in RSA: | next event <event_type> in <fld2> seconds
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| next event %{event_type} in %{fld2} seconds" }
				id => "message-pluto:22"
				add_field => {
					"[event][id]" => "pluto:22"
					"[rsa][message][id1]" => "pluto:22"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:23
		# line in RSA: | inserting event <event_type> in <fld2> seconds for #<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| inserting event %{event_type} in %{fld2} seconds for #%{fld3}" }
				id => "message-pluto:23"
				add_field => {
					"[event][id]" => "pluto:23"
					"[rsa][message][id1]" => "pluto:23"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:24
		# line in RSA: | event after this is <event_type> in <fld2> seconds
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| event after this is %{event_type} in %{fld2} seconds" }
				id => "message-pluto:24"
				add_field => {
					"[event][id]" => "pluto:24"
					"[rsa][message][id1]" => "pluto:24"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:25
		# line in RSA: | recent <action> activity <fld2> seconds ago, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| recent %{action} activity %{fld2} seconds ago, %{info}" }
				id => "message-pluto:25"
				add_field => {
					"[event][id]" => "pluto:25"
					"[rsa][message][id1]" => "pluto:25"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:26
		# line in RSA: | *received <rbytes> bytes from <saddr>:<sport> on <dinterface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| *received %{rbytes} bytes from %{saddr}:%{sport} on %{dinterface}" }
				id => "message-pluto:26"
				add_field => {
					"[event][id]" => "pluto:26"
					"[rsa][message][id1]" => "pluto:26"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:27
		# line in RSA: | received <action> notification <msg> with seqno = <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| received %{action} notification %{msg} with seqno = %{fld2}" }
				id => "message-pluto:27"
				add_field => {
					"[event][id]" => "pluto:27"
					"[rsa][message][id1]" => "pluto:27"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:28
		# line in RSA: | sent <action> notification <msg> with seqno = <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| sent %{action} notification %{msg} with seqno = %{fld2}" }
				id => "message-pluto:28"
				add_field => {
					"[event][id]" => "pluto:28"
					"[rsa][message][id1]" => "pluto:28"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:29
		# line in RSA: | inserting event <event_type>, timeout in <fld2> seconds
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| inserting event %{event_type}, timeout in %{fld2} seconds" }
				id => "message-pluto:29"
				add_field => {
					"[event][id]" => "pluto:29"
					"[rsa][message][id1]" => "pluto:29"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:30
		# line in RSA: | handling event <event_type> for <saddr> "<fld2>" #<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "| handling event %{event_type} for %{saddr} \"%{fld2}\" #%{fld3}" }
				id => "message-pluto:30"
				add_field => {
					"[event][id]" => "pluto:30"
					"[rsa][message][id1]" => "pluto:30"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:31
		# line in RSA: |  <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "|  %{event_description}" }
				id => "message-pluto:31"
				add_field => {
					"[event][id]" => "pluto:31"
					"[rsa][message][id1]" => "pluto:31"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:32
		# line in RSA: <fld2>: asynchronous network error report on <interface> for message to <daddr> port <dport>, complainant <saddr>: Connection refused [errno <fld4>, origin ICMP type <icmptype> code <icmpcode> (not authenticated)]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}: asynchronous network error report on %{interface} for message to %{daddr} port %{dport}, complainant %{saddr}: Connection refused [errno %{fld4}, origin ICMP type %{icmptype} code %{icmpcode} (not authenticated)]" }
				id => "message-pluto:32"
				add_field => {
				"event_description" => "not authenticated"
					"[event][id]" => "pluto:32"
					"[rsa][message][id1]" => "pluto:32"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:33
		# line in RSA: "<fld2>"[<fld4>] <saddr> #<fld3>: initiating Main Mode
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{fld2}\"[%{fld4}] %{saddr} #%{fld3}: initiating Main Mode" }
				id => "message-pluto:33"
				add_field => {
				"event_description" => "pluto:initiating Main Mode"
					"[event][id]" => "pluto:33"
					"[rsa][message][id1]" => "pluto:33"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:34
		# line in RSA: "<fld2>"[<fld4>] <saddr> #<fld3>: max number of retransmissions (<fld5>) reached STATE_MAIN_I1.  No response (or no acceptable response) to our first IKE message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{fld2}\"[%{fld4}] %{saddr} #%{fld3}: max number of retransmissions (%{fld5}) reached STATE_MAIN_I1.  No response (or no acceptable response) to our first IKE message" }
				id => "message-pluto:34"
				add_field => {
				"event_description" => "pluto: No response to our first IKE message"
					"[event][id]" => "pluto:34"
					"[rsa][message][id1]" => "pluto:34"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE pluto:35
		# line in RSA: "<fld2>"[<fld4>] <saddr> #<fld3>: starting keying attempt <fld5> of an unlimited number
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "\"%{fld2}\"[%{fld4}] %{saddr} #%{fld3}: starting keying attempt %{fld5} of an unlimited number" }
				id => "message-pluto:35"
				add_field => {
				"event_description" => "pluto: starting keying attempt of an unlimited number"
					"[event][id]" => "pluto:35"
					"[rsa][message][id1]" => "pluto:35"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "xl2tpd" {
		# MESSAGE xl2tpd
		# line in RSA: This binary does not support kernel L2TP.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "This binary does not support kernel L2TP." }
				id => "message-xl2tpd"
				add_field => {
				"event_description" => "xl2tpd:This binary does not support kernel L2TP."
					"[event][id]" => "xl2tpd"
					"[rsa][message][id1]" => "xl2tpd"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE xl2tpd:01
		# line in RSA: xl2tpd version <version> started on  PID:<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "xl2tpd version %{version} started on  PID:%{fld2}" }
				id => "message-xl2tpd:01"
				add_field => {
				"event_description" => "xl2tpd:xl2tpd started."
					"[event][id]" => "xl2tpd:01"
					"[rsa][message][id1]" => "xl2tpd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE xl2tpd:02
		# line in RSA: Written by <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Written by %{info}" }
				id => "message-xl2tpd:02"
				add_field => {
				"event_description" => "xl2tpd:xl2tpd Software copyright."
					"[event][id]" => "xl2tpd:02"
					"[rsa][message][id1]" => "xl2tpd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE xl2tpd:03
		# line in RSA: Forked by <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Forked by %{info}" }
				id => "message-xl2tpd:03"
				add_field => {
				"event_description" => "xl2tpd:xl2tpd Software copyright."
					"[event][id]" => "xl2tpd:03"
					"[rsa][message][id1]" => "xl2tpd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE xl2tpd:04
		# line in RSA: Inherited by <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Inherited by %{info}" }
				id => "message-xl2tpd:04"
				add_field => {
				"event_description" => "xl2tpd:xl2tpd Software copyright."
					"[event][id]" => "xl2tpd:04"
					"[rsa][message][id1]" => "xl2tpd:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE xl2tpd:05
		# line in RSA: Listening on IP address <saddr>, port <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Listening on IP address %{saddr}, port %{sport}" }
				id => "message-xl2tpd:05"
				add_field => {
				"event_description" => "xl2tpd:xl2tpd Software copyright."
					"[event][id]" => "xl2tpd:05"
					"[rsa][message][id1]" => "xl2tpd:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "barnyard" {
		# MESSAGE barnyard:01
		# line in RSA: Exiting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Exiting" }
				id => "message-barnyard:01"
				add_field => {
				"event_description" => "barnyard: Exiting"
					"[event][id]" => "barnyard:01"
					"[rsa][message][id1]" => "barnyard:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE barnyard:02
		# line in RSA: Initializing daemon mode
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Initializing daemon mode" }
				id => "message-barnyard:02"
				add_field => {
				"event_description" => "barnyard:Initializing daemon mode"
					"[event][id]" => "barnyard:02"
					"[rsa][message][id1]" => "barnyard:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE barnyard:03
		# line in RSA: Opened spool file '<filename>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Opened spool file '%{filename}'" }
				id => "message-barnyard:03"
				add_field => {
				"event_description" => "barnyard:Opened spool file."
					"[event][id]" => "barnyard:03"
					"[rsa][message][id1]" => "barnyard:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE barnyard:04
		# line in RSA: Waiting for new data
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Waiting for new data" }
				id => "message-barnyard:04"
				add_field => {
				"event_description" => "barnyard:Waiting for new data"
					"[event][id]" => "barnyard:04"
					"[rsa][message][id1]" => "barnyard:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "exim" {
		# MESSAGE exim:01
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> SMTP connection from localhost (<hostname>) [<saddr>]:<sport> closed by QUIT
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} SMTP connection from localhost (%{hostname}) [%{saddr}]:%{sport} closed by QUIT" }
				id => "message-exim:01"
				add_field => {
				"event_description" => "exim:SMTP connection from localhost closed by QUIT"
					"[event][id]" => "exim:01"
					"[rsa][message][id1]" => "exim:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:02
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7>  [<saddr>] F=<<<from>> R=<<<to>> Accepted: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7}  [%{saddr}] F=<%{from}> R=<%{to}> Accepted: %{info}" }
				id => "message-exim:02"
				add_field => {
				"event_description" => "exim:e-mail accepted from relay."
					"[event][id]" => "exim:02"
					"[rsa][message][id1]" => "exim:02"
					"[event][categoryid]" => "1207010000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:03
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> <fld8> <<= <from> H=localhost (<hostname>) [<saddr>]:<sport> P=<protocol> S=<fld9> id=<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} %{fld8} <= %{from} H=localhost (%{hostname}) [%{saddr}]:%{sport} P=%{protocol} S=%{fld9} id=%{info}" }
				id => "message-exim:03"
				add_field => {
				"event_description" => "exim: e-mail sent."
					"[event][id]" => "exim:03"
					"[rsa][message][id1]" => "exim:03"
					"[event][categoryid]" => "1207000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:04
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> <fld8> == <from> R=dnslookup defer (<fld9>): host lookup did not complete
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} %{fld8} == %{from} R=dnslookup defer (%{fld9}): host lookup did not complete" }
				id => "message-exim:04"
				add_field => {
				"event_description" => "exim: e-mail host lookup did not complete in DNS."
					"[event][id]" => "exim:04"
					"[rsa][message][id1]" => "exim:04"
					"[event][categoryid]" => "1207010200"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:05
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> <fld8> == <from> routing defer (<fld9>): retry time not reached
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} %{fld8} == %{from} routing defer (%{fld9}): retry time not reached" }
				id => "message-exim:05"
				add_field => {
				"event_description" => "exim: e-mail routing defer:retry time not reached."
					"[event][id]" => "exim:05"
					"[rsa][message][id1]" => "exim:05"
					"[event][categoryid]" => "1207010200"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:06
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> exim <version> daemon started: pid=<fld8>, no queue runs, listening for SMTP on port <sport> (<info>) port <fld9> (<fld10>) and for SMTPS on port <fld11> (<fld12>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} exim %{version} daemon started: pid=%{fld8}, no queue runs, listening for SMTP on port %{sport} (%{info}) port %{fld9} (%{fld10}) and for SMTPS on port %{fld11} (%{fld12})" }
				id => "message-exim:06"
				add_field => {
				"event_description" => "exim: exim daemon started."
					"[event][id]" => "exim:06"
					"[rsa][message][id1]" => "exim:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:07
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> Start queue run: pid=<fld8>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} Start queue run: pid=%{fld8}" }
				id => "message-exim:07"
				add_field => {
				"event_description" => "exim: Start queue run."
					"[event][id]" => "exim:07"
					"[rsa][message][id1]" => "exim:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:08
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> pid <fld8>: SIGHUP received: re-exec daemon
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} pid %{fld8}: SIGHUP received: re-exec daemon" }
				id => "message-exim:08"
				add_field => {
				"event_description" => "exim: SIGHUP received: re-exec daemon."
					"[event][id]" => "exim:08"
					"[rsa][message][id1]" => "exim:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:09
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> SMTP connection from [<saddr>]:<sport> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} SMTP connection from [%{saddr}]:%{sport} %{info}" }
				id => "message-exim:09"
				add_field => {
				"event_description" => "exim: SMTP connection from host."
					"[event][id]" => "exim:09"
					"[rsa][message][id1]" => "exim:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:10
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> rejected EHLO from [<saddr>]:<sport> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} rejected EHLO from [%{saddr}]:%{sport} %{info}" }
				id => "message-exim:10"
				add_field => {
				"event_description" => "exim:rejected EHLO from host."
					"[event][id]" => "exim:10"
					"[rsa][message][id1]" => "exim:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:11
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> SMTP protocol synchronization error (<result>): <fld8> H=[<saddr>]:<sport> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} SMTP protocol synchronization error (%{result}): %{fld8} H=[%{saddr}]:%{sport} %{info}" }
				id => "message-exim:11"
				add_field => {
				"event_description" => "exim:SMTP protocol synchronization error rejected connection from host."
					"[event][id]" => "exim:11"
					"[rsa][message][id1]" => "exim:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:12
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> TLS error on connection from [<saddr>]:<sport> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} TLS error on connection from [%{saddr}]:%{sport} %{info}" }
				id => "message-exim:12"
				add_field => {
				"event_description" => "exim:TLS error on connection from host."
					"[event][id]" => "exim:12"
					"[rsa][message][id1]" => "exim:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:13
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> <fld10> == <hostname> R=<fld8> T=<fld9>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} %{fld10} == %{hostname} R=%{fld8} T=%{fld9}: %{info}" }
				id => "message-exim:13"
				add_field => {
				"event_description" => "exim:connection service message."
					"[event][id]" => "exim:13"
					"[rsa][message][id1]" => "exim:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:14
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> <fld10> <hostname> [<saddr>]:<sport> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} %{fld10} %{hostname} [%{saddr}]:%{sport} %{info}" }
				id => "message-exim:14"
				add_field => {
				"event_description" => "exim:connection service message."
					"[event][id]" => "exim:14"
					"[rsa][message][id1]" => "exim:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:15
		# line in RSA: <fld2>-<fld3>-<fld4> <fld5>:<fld6>:<fld7> End queue run: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}-%{fld3}-%{fld4} %{fld5}:%{fld6}:%{fld7} End queue run: %{info}" }
				id => "message-exim:15"
				add_field => {
				"event_description" => "exim:connection service message."
					"[event][id]" => "exim:15"
					"[rsa][message][id1]" => "exim:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE exim:16
		# line in RSA: <fld2> <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2} %{fld3}" }
				id => "message-exim:16"
				add_field => {
					"[event][id]" => "exim:16"
					"[rsa][message][id1]" => "exim:16"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "smtpd" {
		# MESSAGE smtpd:01
		# line in RSA: QMGR[<fld2>]: <fld3> moved to work queue
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "QMGR[%{fld2}]: %{fld3} moved to work queue" }
				id => "message-smtpd:01"
				add_field => {
				"event_description" => "smtpd: Process moved to work queue."
					"[event][id]" => "smtpd:01"
					"[rsa][message][id1]" => "smtpd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE smtpd:02
		# line in RSA: SCANNER[<fld3>]: id="1000" severity="<severity>" sys="<fld4>" sub="<service>" name="<event_description>" srcip="<saddr>" from="<from>" to="<to>" subject="<subject>" queueid="<fld5>" size="<rbytes>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCANNER[%{fld3}]: id=\"1000\" severity=\"%{severity}\" sys=\"%{fld4}\" sub=\"%{service}\" name=\"%{event_description}\" srcip=\"%{saddr}\" from=\"%{from}\" to=\"%{to}\" subject=\"%{subject}\" queueid=\"%{fld5}\" size=\"%{rbytes}\"" }
				id => "message-smtpd:02"
				add_field => {
					"[event][id]" => "smtpd:02"
					"[rsa][message][id1]" => "smtpd:02"
					"[event][categoryid]" => "1207010100"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE smtpd:03
		# line in RSA: SCANNER[<fld3>]: Nothing to do, exiting.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCANNER[%{fld3}]: Nothing to do, exiting." }
				id => "message-smtpd:03"
				add_field => {
				"event_description" => "smtpd: SCANNER: Nothing to do,exiting."
					"[event][id]" => "smtpd:03"
					"[rsa][message][id1]" => "smtpd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE smtpd:04
		# line in RSA: MASTER[<fld3>]: QR globally disabled, status two set to 'disabled'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "MASTER[%{fld3}]: QR globally disabled, status two set to 'disabled'" }
				id => "message-smtpd:04"
				add_field => {
				"event_description" => "smtpd: MASTER:QR globally disabled, status two set to disabled."
					"[event][id]" => "smtpd:04"
					"[rsa][message][id1]" => "smtpd:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE smtpd:07
		# line in RSA: MASTER[<fld3>]: QR globally disabled, status one set to 'disabled'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "MASTER[%{fld3}]: QR globally disabled, status one set to 'disabled'" }
				id => "message-smtpd:07"
				add_field => {
				"event_description" => "smtpd: MASTER:QR globally disabled, status one set to disabled."
					"[event][id]" => "smtpd:07"
					"[rsa][message][id1]" => "smtpd:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE smtpd:05
		# line in RSA: MASTER[<fld3>]: (Re-)loading configuration from Confd
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "MASTER[%{fld3}]: (Re-)loading configuration from Confd" }
				id => "message-smtpd:05"
				add_field => {
				"event_description" => "smtpd: MASTER:(Re-)loading configuration from Confd."
					"[event][id]" => "smtpd:05"
					"[rsa][message][id1]" => "smtpd:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE smtpd:06
		# line in RSA: MASTER[<fld3>]: Sending QR one
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "MASTER[%{fld3}]: Sending QR one" }
				id => "message-smtpd:06"
				add_field => {
				"event_description" => "smtpd: MASTER:Sending QR one."
					"[event][id]" => "smtpd:06"
					"[rsa][message][id1]" => "smtpd:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd" {
		# MESSAGE sshd:01
		# line in RSA: Did not receive identification string from <fld18>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Did not receive identification string from %{fld18}" }
				id => "message-sshd:01"
				add_field => {
				"event_description" => "sshd: Did not receive identification string."
					"[event][id]" => "sshd:01"
					"[rsa][message][id1]" => "sshd:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sshd:02
		# line in RSA: Received SIGHUP; restarting.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received SIGHUP; restarting." }
				id => "message-sshd:02"
				add_field => {
				"event_description" => "sshd:Received SIGHUP restarting."
					"[event][id]" => "sshd:02"
					"[rsa][message][id1]" => "sshd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sshd:03
		# line in RSA: Server listening on <saddr> port <sport>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server listening on %{saddr} port %{sport}." }
				id => "message-sshd:03"
				add_field => {
				"event_description" => "sshd:Server listening; restarting."
					"[event][id]" => "sshd:03"
					"[rsa][message][id1]" => "sshd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sshd:04
		# line in RSA: Invalid user admin from <fld18>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Invalid user admin from %{fld18}" }
				id => "message-sshd:04"
				add_field => {
				"event_description" => "sshd:Invalid user admin."
					"[event][id]" => "sshd:04"
					"[rsa][message][id1]" => "sshd:04"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sshd:05
		# line in RSA: Failed none for invalid user admin from <saddr> port <sport> <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed none for invalid user admin from %{saddr} port %{sport} %{fld3}" }
				id => "message-sshd:05"
				add_field => {
				"event_description" => "sshd:Failed none for invalid user admin."
					"[event][id]" => "sshd:05"
					"[rsa][message][id1]" => "sshd:05"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sshd:06
		# line in RSA: error: Could not get shadow information for NOUSER
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "error: Could not get shadow information for NOUSER" }
				id => "message-sshd:06"
				add_field => {
				"event_description" => "sshd:error:Could not get shadow information for NOUSER"
					"[event][id]" => "sshd:06"
					"[rsa][message][id1]" => "sshd:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sshd:07
		# line in RSA: Failed password for root from <saddr> port <sport> <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed password for root from %{saddr} port %{sport} %{fld3}" }
				id => "message-sshd:07"
				add_field => {
				"event_description" => "sshd:Failed password for root."
					"[event][id]" => "sshd:07"
					"[rsa][message][id1]" => "sshd:07"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sshd:08
		# line in RSA: Accepted password for loginuser from <saddr> port <sport> <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Accepted password for loginuser from %{saddr} port %{sport} %{fld3}" }
				id => "message-sshd:08"
				add_field => {
				"event_description" => "sshd:Accepted password for loginuser."
					"[event][id]" => "sshd:08"
					"[rsa][message][id1]" => "sshd:08"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sshd:09
		# line in RSA: subsystem request for sftp failed, subsystem not found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "subsystem request for sftp failed, subsystem not found" }
				id => "message-sshd:09"
				add_field => {
				"event_description" => "sshd:subsystem request for sftp failed,subsystem not found."
					"[event][id]" => "sshd:09"
					"[rsa][message][id1]" => "sshd:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId173
	# line in RSA: id=<fld1> severity=<severity> sys=<fld2> sub=<service> name=<event_description> srcip=<saddr> user=<username> caller=<fld4> engine=<fld5>
	else if [logstash][msgparser][id] == "msgParserId173" {
		dissect {
			mapping => { "message" => "id=%{fld1} severity=%{severity} sys=%{fld2} sub=%{service} name=%{event_description} srcip=%{saddr} user=%{username} caller=%{fld4} engine=%{fld5}" }
			id => "msgParserId173"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "sockd" {
		# MESSAGE sockd:01
		# line in RSA: created new negotiatorchild
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "created new negotiatorchild" }
				id => "message-sockd:01"
				add_field => {
				"event_description" => "sockd: created new negotiatorchild."
					"[event][id]" => "sockd:01"
					"[rsa][message][id1]" => "sockd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sockd:02
		# line in RSA: dante/server <version> running
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "dante/server %{version} running" }
				id => "message-sockd:02"
				add_field => {
				"event_description" => "sockd:dante/server running."
					"[event][id]" => "sockd:02"
					"[rsa][message][id1]" => "sockd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE sockd:03
		# line in RSA: sockdexit(): terminating on signal <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "sockdexit(): terminating on signal %{fld2}" }
				id => "message-sockd:03"
				add_field => {
				"event_description" => "sockd:sockdexit():terminating on signal."
					"[event][id]" => "sockd:03"
					"[rsa][message][id1]" => "sockd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId177
	# line in RSA: Master started
	else if [logstash][msgparser][id] == "msgParserId177" {
		dissect {
			mapping => { "message" => "Master started" }
			id => "msgParserId177"
			add_field => {
				"event_description" => "pop3proxy:Master started."
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
		}
	}
	# PARSER msgParserId178
	# line in RSA: id=<rule> severity=<severity> sys=<vsys> sub=<service> name=<event_description>action=<action> method=<web_method> client=<fld3> facility=<logon_type> user=<username> srcip=<saddr> dstip=<daddr> version=<version> storage=<directory> ad_domain=<fld5> object=<fld6> class=<group_object> type=<obj_type> attributes=<obj_name>count=<fld4> node=<node> account=<logon_id>statuscode=<resultcode> cached=<fld7> profile=<owner> filteraction=<policyname> size=<filename_size> request=<fld8> url=<url> referer=<web_referer> error=<comments> authtime=<fld9> dnstime=<fld10> cattime=<fld11> avscantime=<fld12> fullreqtime=<fld13> device=<fld14> auth=<fld15> ua=<fld16> exceptions=<fld17> group=<group> category=<policy_id> categoryname=<info> content-type=<content_type> reputation=<fld18> application=<fld19> app-id=<fld20> reason=<comments> filename=<filename> file=<filename> extension=<web_extension> time=<fld21> function=<action> line=<fld22> message=<context> fwrule=<policy_id>  seq=<fld23> initf=<sinterface> outitf=<dinterface> dstmac=<dmacaddr> srcmac=<smacaddr> proto=<fld24> length=<fld25> tos=<fld26> prec=;<fld27> ttl=<fld28> srcport=<sport> dstport=<dport> tcpflags=<fld29> info=<context> prec=<fld30> caller=<fld30> engine=<fld31> localip=<fld31> host=<dhost> extra=<info>  server=<daddr> cookie=<web_cookie> set-cookie=<fld32>
	else if [logstash][msgparser][id] == "msgParserId178" {
		dissect {
			mapping => { "message" => "id=%{rule} severity=%{severity} sys=%{vsys} sub=%{service} name=%{event_description}action=%{action} method=%{web_method} client=%{fld3} facility=%{logon_type} user=%{username} srcip=%{saddr} dstip=%{daddr} version=%{version} storage=%{directory} ad_domain=%{fld5} object=%{fld6} class=%{group_object} type=%{obj_type} attributes=%{obj_name}count=%{fld4} node=%{node} account=%{logon_id}statuscode=%{resultcode} cached=%{fld7} profile=%{owner} filteraction=%{policyname} size=%{filename_size} request=%{fld8} url=%{url} referer=%{web_referer} error=%{comments} authtime=%{fld9} dnstime=%{fld10} cattime=%{fld11} avscantime=%{fld12} fullreqtime=%{fld13} device=%{fld14} auth=%{fld15} ua=%{fld16} exceptions=%{fld17} group=%{group} category=%{policy_id} categoryname=%{info} content-type=%{content_type} reputation=%{fld18} application=%{fld19} app-id=%{fld20} reason=%{comments} filename=%{filename} file=%{filename} extension=%{web_extension} time=%{fld21} function=%{action} line=%{fld22} message=%{context} fwrule=%{policy_id}  seq=%{fld23} initf=%{sinterface} outitf=%{dinterface} dstmac=%{dmacaddr} srcmac=%{smacaddr} proto=%{fld24} length=%{fld25} tos=%{fld26} prec=;%{fld27} ttl=%{fld28} srcport=%{sport} dstport=%{dport} tcpflags=%{fld29} info=%{context} prec=%{fld30} caller=%{fld30} engine=%{fld31} localip=%{fld31} host=%{dhost} extra=%{info}  server=%{daddr} cookie=%{web_cookie} set-cookie=%{fld32}" }
			id => "msgParserId178"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "httpd" {
		# MESSAGE httpd
		# line in RSA: id=<rule> severity=<severity> sys=<vsys> sub=<service> name=<event_description>action=<action> method=<web_method> client=<fld3> facility=<logon_type> user=<username> srcip=<saddr> dstip=<daddr> version=<version> storage=<directory> ad_domain=<fld5> object=<fld6> class=<group_object> type=<obj_type> attributes=<obj_name>count=<fld4> node=<node> account=<logon_id>statuscode=<resultcode> cached=<fld7> profile=<owner> filteraction=<policyname> size=<filename_size> request=<fld8> url=<url> referer=<web_referer> error=<comments> authtime=<fld9> dnstime=<fld10> cattime=<fld11> avscantime=<fld12> fullreqtime=<fld13> device=<fld14> auth=<fld15> ua=<fld16> exceptions=<fld17> group=<group> category=<policy_id> categoryname=<info> content-type=<content_type> reputation=<fld18> application=<fld19> app-id=<fld20> reason=<comments> filename=<filename> file=<filename> extension=<web_extension> time=<fld21> function=<action> line=<fld22> message=<context> fwrule=<policy_id>  seq=<fld23> initf=<sinterface> outitf=<dinterface> dstmac=<dmacaddr> srcmac=<smacaddr> proto=<fld24> length=<fld25> tos=<fld26> prec=;<fld27> ttl=<fld28> srcport=<sport> dstport=<dport> tcpflags=<fld29> info=<context> prec=<fld30> caller=<fld30> engine=<fld31> localip=<fld31> host=<dhost> extra=<info>  server=<daddr> cookie=<web_cookie> set-cookie=<fld32> port=<network_port> query=<web_query> uid=<uid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "id=%{rule} severity=%{severity} sys=%{vsys} sub=%{service} name=%{event_description}action=%{action} method=%{web_method} client=%{fld3} facility=%{logon_type} user=%{username} srcip=%{saddr} dstip=%{daddr} version=%{version} storage=%{directory} ad_domain=%{fld5} object=%{fld6} class=%{group_object} type=%{obj_type} attributes=%{obj_name}count=%{fld4} node=%{node} account=%{logon_id}statuscode=%{resultcode} cached=%{fld7} profile=%{owner} filteraction=%{policyname} size=%{filename_size} request=%{fld8} url=%{url} referer=%{web_referer} error=%{comments} authtime=%{fld9} dnstime=%{fld10} cattime=%{fld11} avscantime=%{fld12} fullreqtime=%{fld13} device=%{fld14} auth=%{fld15} ua=%{fld16} exceptions=%{fld17} group=%{group} category=%{policy_id} categoryname=%{info} content-type=%{content_type} reputation=%{fld18} application=%{fld19} app-id=%{fld20} reason=%{comments} filename=%{filename} file=%{filename} extension=%{web_extension} time=%{fld21} function=%{action} line=%{fld22} message=%{context} fwrule=%{policy_id}  seq=%{fld23} initf=%{sinterface} outitf=%{dinterface} dstmac=%{dmacaddr} srcmac=%{smacaddr} proto=%{fld24} length=%{fld25} tos=%{fld26} prec=;%{fld27} ttl=%{fld28} srcport=%{sport} dstport=%{dport} tcpflags=%{fld29} info=%{context} prec=%{fld30} caller=%{fld30} engine=%{fld31} localip=%{fld31} host=%{dhost} extra=%{info}  server=%{daddr} cookie=%{web_cookie} set-cookie=%{fld32} port=%{network_port} query=%{web_query} uid=%{uid}" }
				id => "message-httpd"
				add_field => {
					"[event][id]" => "httpd"
					"[rsa][message][id1]" => "httpd"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:s" ] }
			}
		}
		# MESSAGE httpd:01
		# line in RSA: [<event_log>:<result>] [pid <fld3>:<fld4>] [client <gateway>] ModSecurity: Warning. <rulename> [file "<filename>"] [line "<fld5>"] [id "<rule>"] [rev "<fld2>"] [msg "<event_description>"] [severity "<severity>"] [ver "<version>"] [maturity "<fld22>"] [accuracy "<fld23>"] [tag "<fld24>"] [hostname "<dhost>"] [uri "<web_root>"] [unique_id "<operation_id>"]<fld25>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "[%{event_log}:%{result}] [pid %{fld3}:%{fld4}] [client %{gateway}] ModSecurity: Warning. %{rulename} [file \"%{filename}\"] [line \"%{fld5}\"] [id \"%{rule}\"] [rev \"%{fld2}\"] [msg \"%{event_description}\"] [severity \"%{severity}\"] [ver \"%{version}\"] [maturity \"%{fld22}\"] [accuracy \"%{fld23}\"] [tag \"%{fld24}\"] [hostname \"%{dhost}\"] [uri \"%{web_root}\"] [unique_id \"%{operation_id}\"]%{fld25}" }
				id => "message-httpd:01"
				add_field => {
					"[event][id]" => "httpd:01"
					"[rsa][message][id1]" => "httpd:01"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy:M:d-HH:m:ss" ] }
			}
		}
	}
	# PARSER msgParserId181
	# line in RSA: log_type=<event_type> log_component=<event_source> log_subtype=<category> status=<event_state> priority=<severity> duration=<duration> fw_rule_id=<rule_uid> user_name=<username> user_gp=<group> iap=<id1> category=<fld4> category_type=<fld5> url=<url> contenttype=<content_type> override_token=<fld6> httpresponsecode=<fld7> src_ip=<saddr> dst_ip=<daddr> protocol=<protocol> src_port=<sport> dst_port=<dport> sent_bytes=<sbytes> recv_bytes=<rbytes> domain=<fqdn> exceptions=<fld8> activityname=<fld9> reason=<result> user_agent=<user_agent> status_code=<resultcode> transactionid=<id2> referer=<web_referer> ips_policy_id=<policy_id> appfilter_policy_id=<fld10> application=<application> application_risk=<risk_num> application_technology=<fld11> application_category=<fld23> in_interface=<sinterface> out_interface=<dinterface> src_mac=<smacaddr> src_country_code=<location_src> dst_country_code=<location_dst> sent_pkts=<fld14> recv_pkts=<fld15> tran_dst_ip=<dtransaddr> tran_dst_port=<dtransport> tran_src_ip=<stransaddr> tran_src_port=<stransport> srczonetype=<fld16> srczone=<src_zone> dstzone=<dst_zone> dstzonetype=<fld17> dir_disp=<fld18> connevent=<fld19> connid=<connectionid> vconnid=<fld20> hb_health=<fld21> message=<info> appresolvedby=<fld22> policy_type=<fld23>
	else if [logstash][msgparser][id] == "msgParserId181" {
		dissect {
			mapping => { "message" => "log_type=%{event_type} log_component=%{event_source} log_subtype=%{category} status=%{event_state} priority=%{severity} duration=%{duration} fw_rule_id=%{rule_uid} user_name=%{username} user_gp=%{group} iap=%{id1} category=%{fld4} category_type=%{fld5} url=%{url} contenttype=%{content_type} override_token=%{fld6} httpresponsecode=%{fld7} src_ip=%{saddr} dst_ip=%{daddr} protocol=%{protocol} src_port=%{sport} dst_port=%{dport} sent_bytes=%{sbytes} recv_bytes=%{rbytes} domain=%{fqdn} exceptions=%{fld8} activityname=%{fld9} reason=%{result} user_agent=%{user_agent} status_code=%{resultcode} transactionid=%{id2} referer=%{web_referer} ips_policy_id=%{policy_id} appfilter_policy_id=%{fld10} application=%{application} application_risk=%{risk_num} application_technology=%{fld11} application_category=%{fld23} in_interface=%{sinterface} out_interface=%{dinterface} src_mac=%{smacaddr} src_country_code=%{location_src} dst_country_code=%{location_dst} sent_pkts=%{fld14} recv_pkts=%{fld15} tran_dst_ip=%{dtransaddr} tran_dst_port=%{dtransport} tran_src_ip=%{stransaddr} tran_src_port=%{stransport} srczonetype=%{fld16} srczone=%{src_zone} dstzone=%{dst_zone} dstzonetype=%{fld17} dir_disp=%{fld18} connevent=%{fld19} connid=%{connectionid} vconnid=%{fld20} hb_health=%{fld21} message=%{info} appresolvedby=%{fld22} policy_type=%{fld23}" }
			id => "msgParserId181"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:ss" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[event_description]"
		destination => "[event_cat]"
		dictionary => {
			"web request blocked, forbidden category detected" => "1803000000"
			"web request blocked, forbidden file extension detected" => "1803000000"
			"web request blocked" => "1803000000"
			"File extension warned and proceeded" => "1801000000"
			"http access" => "1204000000"
			"portscan detected" => "1001030300"
			"ICMP flood detected" => "1002010000"
			"UDP flood detected" => "1002010000"
			"SYN flood detected" => "1002010000"
			"Packet logged" => "1801000000"
			"Packet accepted" => "1801000000"
			"Packet dropped" => "1803000000"
			"Authentication successful" => "1302000000"
			"checking if admin is enabled" => "1304000000"
			"web request blocked, forbidden url detected" => "1803000000"
			"web request blocked, forbidden application detected" => "1803000000"
			"Packet dropped (GEOIP)" => "1803000000"
		}
		fallback => "1901000000"
		override => true
	}
}
filter {
	translate {
		field => "[event_cat]"
		destination => "[event_cat_name]"
		dictionary => {
			"1803000000" => "Network.Denied Connections"
			"1801000000" => "Network.Connections"
			"1204000000" => "Content.Web Traffic"
			"1001030300" => "Attacks.Access.Informational.Network Based"
			"1002010000" => "Attacks.Denial of Service.Bandwidth consumption"
			"1302000000" => "Auth.Successful"
			"1304000000" => "Auth.General"
		}
		fallback => "Other.Default"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-astarosgmsg.json"
#			template_name => "astarosg_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

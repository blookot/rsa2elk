# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "emcdatadomain"
			"[observer][name]" => "EMC Data Domain"
			"[observer][type]" => "Storage"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1>[<hfld2>]: <hfld3>: <messageid>:<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<hfld3>[^:]*):[\s]+(?<messageid>[^:]*):(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1>: <hfld3>: <messageid>:<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^:]*):[\s]+(?<hfld3>[^:]*):[\s]+(?<messageid>[^:]*):(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hfld1>: {{<hfld2>=<hfld3>;<hfld4>='<messageid>';<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^:]*):[\s]+\{(?<hfld2>[^=]*)=(?<hfld3>[^;]*);(?<hfld4>[^=]*)='(?<messageid>[^']*)';(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <messageid>: (<hfld1>)[<hfld2>] <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<messageid>[^:]*):[\s]+\((?<message>(?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\][\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hfld1>[<hfld2>]: [<hfld3>]<messageid> <hfld4> [<hfld5>]<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+\[(?<hfld3>[^\]]*)\](?<messageid>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+\[(?<hfld5>[^\]]*)\](?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <messageid>[<hfld1>]: <hfld2>: <hfld3>:<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^\[]*)\[(?<hfld1>[^\]]*)\]:[\s]+(?<hfld2>[^:]*):[\s]+(?<hfld3>[^:]*):(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <messageid>[<hfld2>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <messageid>: at <hfld1> up <hfld2> days,<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^:]*):[\s]+at[\s]+(?<hfld1>[^\s]*)[\s]+up[\s]+(?<hfld2>[^\s]*)[\s]+days,(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <messageid>[<hfld1>]: <hfld2>:[<hfld3>() <hfld4>]<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^\[]*)\[(?<hfld1>[^\]]*)\]:[\s]+(?<hfld2>[^:]*):\[(?<hfld3>[^\(]*)\(\)[\s]+(?<hfld4>[^\]]*)\](?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-emcdatadomainmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "lsassd" {
		# MESSAGE lsassd
		# line in RSA: <service>[<process_id>]: <fld1>:<result>:<fld2>:[<info>] Failed to find user, group, or domain by sid (sid = '<fld3>', searched host = '<hostname>') -> error = <resultcode>, symbol = <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: %{fld1}:%{result}:%{fld2}:[%{info}] Failed to find user, group, or domain by sid (sid = '%{fld3}', searched host = '%{hostname}') -> error = %{resultcode}, symbol = %{fld4}" }
				id => "message-lsassd"
				add_field => {
				"ec_subject" => "Service"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Failed to find user, group, or domain by sid"
					"[event][id]" => "lsassd"
					"[rsa][message][id1]" => "lsassd"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE lsassd:01
		# line in RSA: <service>[<process_id>]: <fld1>:<result>:<fld2>:[<info>] Failed to sync system time [error code: <resultcode>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: %{fld1}:%{result}:%{fld2}:[%{info}] Failed to sync system time [error code: %{resultcode}]" }
				id => "message-lsassd:01"
				add_field => {
				"event_description" => "Failed to sync system time"
					"[event][id]" => "lsassd:01"
					"[rsa][message][id1]" => "lsassd:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE lsassd:02
		# line in RSA: <service>[<process_id>]: <fld1>:<result>:<fld2>:[<info>] Failed to authenticate user (name = '<username>') -> error = <resultcode>, symbol = '<fld4>', client pid = <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: %{fld1}:%{result}:%{fld2}:[%{info}] Failed to authenticate user (name = '%{username}') -> error = %{resultcode}, symbol = '%{fld4}', client pid = %{fld5}" }
				id => "message-lsassd:02"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Failed to authenticate user"
					"[event][id]" => "lsassd:02"
					"[rsa][message][id1]" => "lsassd:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE lsassd:03
		# line in RSA: <service>[<process_id>]: <fld1>:<result>:<fld2>:[<info>] <fld3> Error at <fld4>: [Code:<resultcode>] [Message: <fld5>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: %{fld1}:%{result}:%{fld2}:[%{info}] %{fld3} Error at %{fld4}: [Code:%{resultcode}] [Message: %{fld5}]" }
				id => "message-lsassd:03"
				add_field => {
					"[event][id]" => "lsassd:03"
					"[rsa][message][id1]" => "lsassd:03"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE lsassd:04
		# line in RSA: <service>[<process_id>]: <fld1>:<result>:<fld2>:[<fld5> <filename>] Failed to run provider specific request (request code = <fld4>, provider = '<fld3>') -> error = <resultcode>, symbol = '<info>', client pid = <fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: %{fld1}:%{result}:%{fld2}:[%{fld5} %{filename}] Failed to run provider specific request (request code = %{fld4}, provider = '%{fld3}') -> error = %{resultcode}, symbol = '%{info}', client pid = %{fld6}" }
				id => "message-lsassd:04"
				add_field => {
				"ec_outcome" => "Error"
					"[event][id]" => "lsassd:04"
					"[rsa][message][id1]" => "lsassd:04"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA: <service>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{service}: %{event_description}" }
			id => "msgParserId5"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: <service>: Reloading <filename> file.
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{service}: Reloading %{filename} file." }
			id => "msgParserId6"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd" {
		# MESSAGE sshd:04
		# line in RSA: <agent>[<process_id>]: { Illegal | Invalid } user <username> { from ::ffff: | from } <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+([\s]*Illegal[\s]+|[\s]*Invalid[\s]+)[\s]+user[\s]+(?<username>[^\s]*)[\s]+([\s]*from[\s]+::ffff:[\s]+|[\s]*from[\s]+)[\s]+(?<saddr>.*)$" }
				id => "message-sshd:04"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "illegal or invalid user"
					"[event][id]" => "sshd:04"
					"[rsa][message][id1]" => "sshd:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd
		# line in RSA: <service>[<process_id>]: <process>(<fld1>) { <fld2>: <event_description> | <event_description> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<service>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<process>[^\(]*)\((?<fld1>[^\)]*)\)[\s]+([\s]*(?<fld2>[^:]*):[\s]+(?<event_description>[^\s]*)[\s]+|[\s]*(?<event_description>[^\s]*)[\s]+)$" }
				id => "message-sshd"
				add_field => {
					"[event][id]" => "sshd"
					"[rsa][message][id1]" => "sshd"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:01
		# line in RSA: <service>[<process_id>]: Accepted keyboard-interactive/pam for <username> from <hostip> port <sport> <network_service>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: Accepted keyboard-interactive/pam for %{username} from %{hostip} port %{sport} %{network_service}" }
				id => "message-sshd:01"
				add_field => {
					"[event][id]" => "sshd:01"
					"[rsa][message][id1]" => "sshd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:02
		# line in RSA: <service>[<process_id>]: <result>: <fld1> Authentication failure for <username> from <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: %{result}: %{fld1} Authentication failure for %{username} from %{hostip}" }
				id => "message-sshd:02"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "sshd:02"
					"[rsa][message][id1]" => "sshd:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:03
		# line in RSA: <service>[<process_id>]: Excess permission or bad ownership on file <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: Excess permission or bad ownership on file %{filename}" }
				id => "message-sshd:03"
				add_field => {
				"event_description" => "Excess permission or bad ownership on file"
					"[event][id]" => "sshd:03"
					"[rsa][message][id1]" => "sshd:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:05
		# line in RSA: <service>[<process_id>]: Received disconnect from <saddr>: <sport>:<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: Received disconnect from %{saddr}: %{sport}:%{event_description}" }
				id => "message-sshd:05"
				add_field => {
					"[event][id]" => "sshd:05"
					"[rsa][message][id1]" => "sshd:05"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:06
		# line in RSA: <service>[<process_id>]: {Accepted password for <username> from <shost> port <sport> ssh2 | Accepted publickey for <username> from <shost> port <sport> ssh2: <fld1>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<service>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(Accepted[\s]+password[\s]+for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<shost>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+ssh2[\s]+|[\s]*Accepted[\s]+publickey[\s]+for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<shost>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+ssh2:[\s]+(?<fld1>.*))$" }
				id => "message-sshd:06"
				add_field => {
					"[event][id]" => "sshd:06"
					"[rsa][message][id1]" => "sshd:06"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sshd:07
		# line in RSA: <service>[<process_id>]: Did not receive identification string from <saddr> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: Did not receive identification string from %{saddr}" }
				id => "message-sshd:07"
				add_field => {
					"[event][id]" => "sshd:07"
					"[rsa][message][id1]" => "sshd:07"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA: <service>[<process_id>]: [module:<fld1>]<fld2> <result> [login:<username>][error code:<resultcode>]
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{service}[%{process_id}]: [module:%{fld1}]%{fld2} %{result} [login:%{username}][error code:%{resultcode}]" }
			id => "msgParserId12"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "MSG-DDSH-00009" {
		# MESSAGE MSG-DDSH-00009
		# line in RSA: <service>: <fld2>: <fld3>: (tty={ <<> | <fld4> }, session=<sessionid>) <username>: command "<action>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<service>[^:]*):[\s]+(?<fld2>[^:]*):[\s]+(?<fld3>[^:]*):[\s]+\(tty=([\s]*<>[\s]+|[\s]*(?<fld4>[^\s]*)[\s]+),[\s]+session=(?<sessionid>[^\)]*)\)[\s]+(?<username>[^:]*):[\s]+command[\s]+\"(?<action>[^\"]*)\"$" }
				id => "message-MSG-DDSH-00009"
				add_field => {
					"[event][id]" => "MSG-DDSH-00009"
					"[rsa][message][id1]" => "MSG-DDSH-00009"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE MSG-DDSH-00009:01
		# line in RSA: <service>: <fld2>: <fld3>: <username>: command "<action>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}: %{fld2}: %{fld3}: %{username}: command \"%{action}\"" }
				id => "message-MSG-DDSH-00009:01"
				add_field => {
					"[event][id]" => "MSG-DDSH-00009:01"
					"[rsa][message][id1]" => "MSG-DDSH-00009:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA: <service>[<process_id>]: <fld2>: <fld3>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "%{service}[%{process_id}]: %{fld2}: %{fld3}: %{event_description}" }
			id => "msgParserId15"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA: <service>[<process_id>]: <fld2>: <fld3>: repl ctx <fld9>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{service}[%{process_id}]: %{fld2}: %{fld3}: repl ctx %{fld9}: %{event_description}" }
			id => "msgParserId16"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA: <service>: <fld2>: <fld3>: FC Link is Down,  FC PortNo = <fld9>. <event_description>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{service}: %{fld2}: %{fld3}: FC Link is Down,  FC PortNo = %{fld9}. %{event_description}" }
			id => "msgParserId17"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId18
	# line in RSA: <service>: <fld2>: <fld3>: Disabling <process>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "%{service}: %{fld2}: %{fld3}: Disabling %{process}" }
			id => "msgParserId18"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA: <service>: <fld2>: <fld3>: Shutting down <process>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{service}: %{fld2}: %{fld3}: Shutting down %{process}" }
			id => "msgParserId19"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA: <service>: <fld2>: <fld3>: <process> shut down
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "%{service}: %{fld2}: %{fld3}: %{process} shut down" }
			id => "msgParserId20"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA: <service>[<process_id>]: <fld2>: <fld3>: Starting <process> (<fld11>)
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{service}[%{process_id}]: %{fld2}: %{fld3}: Starting %{process} (%{fld11})" }
			id => "msgParserId21"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId22
	# line in RSA: <service>[<process_id>]: <fld2>: <fld3>: <process> started
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{service}[%{process_id}]: %{fld2}: %{fld3}: %{process} started" }
			id => "msgParserId22"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA: <service>[<process_id>]: <fld2>: <fld3>: Cleaning completed: <fld4> elapsed, <fld5> of used space freed, <fld6> of total space freed, <bytes> bytes freed 
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{service}[%{process_id}]: %{fld2}: %{fld3}: Cleaning completed: %{fld4} elapsed, %{fld5} of used space freed, %{fld6} of total space freed, %{bytes} bytes freed" }
			id => "msgParserId23"
			add_field => {
				"event_description" => "Cleaning completed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA: <service>: <fld2>: <fld3>: Enabling <process>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{service}: %{fld2}: %{fld3}: Enabling %{process}" }
			id => "msgParserId24"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId25
	# line in RSA: <service>: {{epoch=<fld12>;id='<fld13>';desc='<event_description>';level=<fld15>;user='<username>';role='<user_role>';app='<application>';host='<hostname>';detail='<fld20>';}
	else if [logstash][msgparser][id] == "msgParserId25" {
		grok {
			match => { "message" => "^(?<service>[^:]*):[\s]+\{epoch=(?<fld12>[^;]*);id='(?<fld13>[^']*)';desc='(?<event_description>[^']*)';level=(?<fld15>[^;]*);user='(?<username>[^']*)';role='(?<user_role>[^']*)';app='(?<application>[^']*)';host='(?<hostname>[^']*)';detail='(?<fld20>[^']*)';\}$" }
			id => "msgParserId25"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId26
	# line in RSA: <service>: {{epoch=<fld12>;id='<fld13>';desc='<event_description>';level=<fld15>;user='<username>';role='<user_role>';app='<application>';host='<hostname>';detail=<fld1>
	else if [logstash][msgparser][id] == "msgParserId26" {
		grok {
			match => { "message" => "^(?<service>[^:]*):[\s]+\{epoch=(?<fld12>[^;]*);id='(?<fld13>[^']*)';desc='(?<event_description>[^']*)';level=(?<fld15>[^;]*);user='(?<username>[^']*)';role='(?<user_role>[^']*)';app='(?<application>[^']*)';host='(?<hostname>[^']*)';detail=(?<fld1>.*)$" }
			id => "msgParserId26"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId27
	# line in RSA: <service>: <fld2>: <fld3>: <event_description>.
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{service}: %{fld2}: %{fld3}: %{event_description}." }
			id => "msgParserId27"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId28
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId28"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId29
	# line in RSA: <service>: tracefile <filename> <action>
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "%{service}: tracefile %{filename} %{action}" }
			id => "msgParserId29"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ddsh" {
		# MESSAGE ddsh
		# line in RSA: <service>: <fld1>: <fld2>: Invalid non-interactive command "<fld3>".
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}: %{fld1}: %{fld2}: Invalid non-interactive command \"%{fld3}\"." }
				id => "message-ddsh"
				add_field => {
					"[event][id]" => "ddsh"
					"[rsa][message][id1]" => "ddsh"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ddsh:01
		# line in RSA: <service>: <fld1>: <fld2>: (tty=<<<terminal>>, session=<sessionid>) <username>:<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}: %{fld1}: %{fld2}: (tty=<%{terminal}>, session=%{sessionid}) %{username}:%{fld3}" }
				id => "message-ddsh:01"
				add_field => {
					"[event][id]" => "ddsh:01"
					"[rsa][message][id1]" => "ddsh:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ddfs" {
		# MESSAGE ddfs
		# line in RSA: <service>[<process_id>]: <fld1>: <fld2>: <action> connect <fld3>: Replication: originator connected.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: %{fld1}: %{fld2}: %{action} connect %{fld3}: Replication: originator connected." }
				id => "message-ddfs"
				add_field => {
				"ec_subject" => "File"
				"ec_activity" => "Copy"
					"[event][id]" => "ddfs"
					"[rsa][message][id1]" => "ddfs"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ddfs:01
		# line in RSA: <service>[<process_id>]: <fld1>: <fld13>: filecopy ctx <fld12>: do_filecopy_send_file: file <filename> took <fld14> sec, net throughput <fld3> KB/s, virtual throughput <fld4> KB/s, refs_sent <fld5>, refs_features_sent <fld6>, segs_sent <fld7>, segs_features_sent <fld8>, size <filename_size>, vbytes <fld10>, nbytes <fld11>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]: %{fld1}: %{fld13}: filecopy ctx %{fld12}: do_filecopy_send_file: file %{filename} took %{fld14} sec, net throughput %{fld3} KB/s, virtual throughput %{fld4} KB/s, refs_sent %{fld5}, refs_features_sent %{fld6}, segs_sent %{fld7}, segs_features_sent %{fld8}, size %{filename_size}, vbytes %{fld10}, nbytes %{fld11}" }
				id => "message-ddfs:01"
				add_field => {
				"ec_subject" => "File"
				"ec_activity" => "Copy"
					"[event][id]" => "ddfs:01"
					"[rsa][message][id1]" => "ddfs:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "xinetd" {
		# MESSAGE xinetd
		# line in RSA: <service>[<process_id>]:<fld1><protocol> {pid=<fld2>from=<saddr>|pid=<fld6> duration=<duration> (<processing_time>)}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE xinetd:01
		# line in RSA: <service>[<process_id>]:<fld1> ftp libwrap from=<saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]:%{fld1} ftp libwrap from=%{saddr}" }
				id => "message-xinetd:01"
				add_field => {
					"[event][id]" => "xinetd:01"
					"[rsa][message][id1]" => "xinetd:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE xinetd:02
		# line in RSA: <service>[<process_id>]:<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service}[%{process_id}]:%{fld1}" }
				id => "message-xinetd:02"
				add_field => {
					"[event][id]" => "xinetd:02"
					"[rsa][message][id1]" => "xinetd:02"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA: <service>: {{epoch=<fld12>;id='<fld13>';desc='<event_description>';level=<fld15>;user='<username>';role='<user_role>';app='<application>';host='<hostname>';detail='<fld20>';}
	else if [logstash][msgparser][id] == "msgParserId40" {
		grok {
			match => { "message" => "^(?<service>[^:]*):[\s]+\{epoch=(?<fld12>[^;]*);id='(?<fld13>[^']*)';desc='(?<event_description>[^']*)';level=(?<fld15>[^;]*);user='(?<username>[^']*)';role='(?<user_role>[^']*)';app='(?<application>[^']*)';host='(?<hostname>[^']*)';detail='(?<fld20>[^']*)';\}$" }
			id => "msgParserId40"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId41
	# line in RSA: <service>: {{epoch=<fld12>;id='<fld13>';desc='<event_description>';level=<fld15>;user='<username>';role='<user_role>';app='<application>';host='<hostname>';}
	else if [logstash][msgparser][id] == "msgParserId41" {
		grok {
			match => { "message" => "^(?<service>[^:]*):[\s]+\{epoch=(?<fld12>[^;]*);id='(?<fld13>[^']*)';desc='(?<event_description>[^']*)';level=(?<fld15>[^;]*);user='(?<username>[^']*)';role='(?<user_role>[^']*)';app='(?<application>[^']*)';host='(?<hostname>[^']*)';\}$" }
			id => "msgParserId41"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-emcdatadomainmsg.json"
#			template_name => "emcdatadomain_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

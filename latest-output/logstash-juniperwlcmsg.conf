# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "juniperwlc"
			"[observer][name]" => "Juniper Wireless LAN Controller"
			"[observer][type]" => "Wireless Devices"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hmonth> <hday> <htime> <hfld1> <hseverity> <messageid>: <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hseverity>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hday> <htime> <hfld1> <hseverity> <messageid> <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hseverity>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth> <hday> <htime> <hfld1> <messageid> <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-juniperwlcmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "gateway_adjust_time" {
		# MESSAGE gateway_adjust_time:01
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: POSSIBLE TIME CHANGE: diff rtc secs <fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: POSSIBLE TIME CHANGE: diff rtc secs %{fld6}" }
				id => "message-gateway_adjust_time:01"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_description" => "Possible time Change"
					"[event][id]" => "gateway_adjust_time:01"
					"[rsa][message][id1]" => "gateway_adjust_time:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE gateway_adjust_time:02
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: Time change during interval, reset base values diff=<fld6>, range=<fld7>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: Time change during interval, reset base values diff=%{fld6}, range=%{fld7}" }
				id => "message-gateway_adjust_time:02"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_description" => "Time change during interval"
					"[event][id]" => "gateway_adjust_time:02"
					"[rsa][message][id1]" => "gateway_adjust_time:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE gateway_adjust_time:03
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: Change timebase in NVRAM from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: Change timebase in NVRAM from %{change_old} to %{change_new}" }
				id => "message-gateway_adjust_time:03"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"change_attribute" => "Timebase in NVRAM"
				"event_description" => "Change timebase in NVRAM"
					"[event][id]" => "gateway_adjust_time:03"
					"[rsa][message][id1]" => "gateway_adjust_time:03"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: success: <dclass_counter1> file <disposition>.
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: success: %{dclass_counter1} file %{disposition}." }
			id => "msgParserId3"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "XML_SAVE" {
		# MESSAGE XML_SAVE:01
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: success: results saved to '<filename>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: success: results saved to '%{filename}'" }
				id => "message-XML_SAVE:01"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "XML_SAVE:01"
					"[rsa][message][id1]" => "XML_SAVE:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE XML_SAVE:02
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: success: configuration saved.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: success: configuration saved." }
				id => "message-XML_SAVE:02"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "XML_SAVE:02"
					"[rsa][message][id1]" => "XML_SAVE:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: Unknown packet type <fld6> received
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: Unknown packet type %{fld6} received" }
			id => "msgParserId6"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: %{event_description}" }
			id => "msgParserId7"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "IDS_ALERT" {
		# MESSAGE IDS_ALERT:01
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: Wireless bridge detected with address <dmacaddr>. Seen by AP on <access_point>, radio <fld9> on channel <wifi_channel> with RSSI <dclass_ratio1> SSID <ssid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: Wireless bridge detected with address %{dmacaddr}. Seen by AP on %{access_point}, radio %{fld9} on channel %{wifi_channel} with RSSI %{dclass_ratio1} SSID %{ssid}" }
				id => "message-IDS_ALERT:01"
				add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "Communication"
					"[event][id]" => "IDS_ALERT:01"
					"[rsa][message][id1]" => "IDS_ALERT:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE IDS_ALERT:02
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: Adhoc client frame detected from <smacaddr>. Seen by AP on <access_point>, radio <fld9> on channel <wifi_channel> with RSSI <dclass_ratio1> SSID <ssid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: Adhoc client frame detected from %{smacaddr}. Seen by AP on %{access_point}, radio %{fld9} on channel %{wifi_channel} with RSSI %{dclass_ratio1} SSID %{ssid}" }
				id => "message-IDS_ALERT:02"
				add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "Communication"
					"[event][id]" => "IDS_ALERT:02"
					"[rsa][message][id1]" => "IDS_ALERT:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: Client Mac <smacaddr> (Rogue AP Mac <dmacaddr>) is seen on the wired network by Switch <hostip> on port <network_port> vlan <vlan> tag <fld6>. Detected by listener <macaddr>(<access_point>, radio <fld9>), channel <wifi_channel> with RSSI <dclass_ratio1> SSID <ssid>.
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: Client Mac %{smacaddr} (Rogue AP Mac %{dmacaddr}) is seen on the wired network by Switch %{hostip} on port %{network_port} vlan %{vlan} tag %{fld6}. Detected by listener %{macaddr}(%{access_point}, radio %{fld9}), channel %{wifi_channel} with RSSI %{dclass_ratio1} SSID %{ssid}." }
			id => "msgParserId10"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "Communication"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: user: <fld6>; mac: <smacaddr>; author reason: <result>; ssid: <ssid>; <access_point>/<fld10>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: user: %{fld6}; mac: %{smacaddr}; author reason: %{result}; ssid: %{ssid}; %{access_point}/%{fld10}" }
			id => "msgParserId11"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: mac: <smacaddr>; ssid: <ssid>; <access_point>/<fld10>;
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: mac: %{smacaddr}; ssid: %{ssid}; %{access_point}/%{fld10};" }
			id => "msgParserId12"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <fld5>: mac: <smacaddr>;<space>ssid: <ssid>; <access_point>/<fld10>;
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{fld5}: mac: %{smacaddr};%{space}ssid: %{ssid}; %{access_point}/%{fld10};" }
			id => "msgParserId13"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Configuration" {
		# MESSAGE Configuration:01
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> Configuration saved to configuration by HTTPS: <saddr> WebView
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} Configuration saved to configuration by HTTPS: %{saddr} WebView" }
				id => "message-Configuration:01"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Configuration:01"
					"[rsa][message][id1]" => "Configuration:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Configuration:02
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> Configuration saved to configuration by CLI remote: <saddr> <username> (<fld5>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} Configuration saved to configuration by CLI remote: %{saddr} %{username} (%{fld5})" }
				id => "message-Configuration:02"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Configuration:02"
					"[rsa][message][id1]" => "Configuration:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE User:01
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> User <username> logged in via <logon_type>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} User %{username} logged in via %{logon_type}" }
				id => "message-User:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
					"[event][id]" => "User:01"
					"[rsa][message][id1]" => "User:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE User:02
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> User <username>(<fld5>) switched to enable mode
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} User %{username}(%{fld5}) switched to enable mode" }
				id => "message-User:02"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "AccessControl"
				"event_description" => "User switched to enable mode"
					"[event][id]" => "User:02"
					"[rsa][message][id1]" => "User:02"
					"[event][categoryid]" => "1401050100"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "INFO" {
		# MESSAGE INFO:01
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <access_point> radio: <fld5> protection <disposition> due to proximity to network with BSSID of <bssid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{access_point} radio: %{fld5} protection %{disposition} due to proximity to network with BSSID of %{bssid}" }
				id => "message-INFO:01"
				add_field => {
					"[event][id]" => "INFO:01"
					"[rsa][message][id1]" => "INFO:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE INFO:02
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <severity> <access_point> radio: <fld5> protection <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{severity} %{access_point} radio: %{fld5} protection %{disposition}" }
				id => "message-INFO:02"
				add_field => {
					"[event][id]" => "INFO:02"
					"[rsa][message][id1]" => "INFO:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-juniperwlcmsg.json"
#			template_name => "juniperwlc_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

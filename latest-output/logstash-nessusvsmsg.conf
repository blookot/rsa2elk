# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "nessusvs"
			"[observer][name]" => "Tenable Network Security Nessus"
			"[observer][type]" => "Vulnerability"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1> %NESSUSVS-<messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+%NESSUSVS\-(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %NESSUSVS-<hfld49>: [<hfld20> <hfld21> <hfld22> <hfld23> <hfld24>][<hfld2>.<hfld3>] <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NESSUSVS\-(?<hfld49>[^:]*):[\s]+\[(?<hfld20>[^\s]*)[\s]+(?<hfld21>[^\s]*)[\s]+(?<hfld22>[^\s]*)[\s]+(?<hfld23>[^\s]*)[\s]+(?<hfld24>[^\]]*)\]\[(?<hfld2>[^\.]*)\.(?<hfld3>[^\]]*)\][\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %NESSUSVS-<hfld49>: [<hfld20> <hfld21> <hfld22> <hfld23> <hfld24>][<hfld2>.<hfld3>] <hfld4>: <messageid> <!payload:hfld4>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NESSUSVS\-(?<hfld49>[^:]*):[\s]+\[(?<hfld20>[^\s]*)[\s]+(?<hfld21>[^\s]*)[\s]+(?<hfld22>[^\s]*)[\s]+(?<hfld23>[^\s]*)[\s]+(?<hfld24>[^\]]*)\]\[(?<hfld2>[^\.]*)\.(?<hfld3>[^\]]*)\][\s]+(?<message>(?<hfld4>[^:]*):[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %NESSUSVS-<hfld49>: [<hfld20> <hfld21> <hfld22> <hfld23> <hfld24>][<hfld2>.<hfld3>] <hfld4>: <hfld5> <messageid> <!payload:hfld4>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NESSUSVS\-(?<hfld49>[^:]*):[\s]+\[(?<hfld20>[^\s]*)[\s]+(?<hfld21>[^\s]*)[\s]+(?<hfld22>[^\s]*)[\s]+(?<hfld23>[^\s]*)[\s]+(?<hfld24>[^\]]*)\]\[(?<hfld2>[^\.]*)\.(?<hfld3>[^\]]*)\][\s]+(?<message>(?<hfld4>[^:]*):[\s]+(?<hfld5>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %NESSUSVS-<hfld49>: [<hfld20> <hfld21> <hfld22> <hfld23> <hfld24>][<hfld2>.<hfld3>] <hfld4> <messageid> <!payload:hfld4>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NESSUSVS\-(?<hfld49>[^:]*):[\s]+\[(?<hfld20>[^\s]*)[\s]+(?<hfld21>[^\s]*)[\s]+(?<hfld22>[^\s]*)[\s]+(?<hfld23>[^\s]*)[\s]+(?<hfld24>[^\]]*)\]\[(?<hfld2>[^\.]*)\.(?<hfld3>[^\]]*)\][\s]+(?<message>(?<hfld4>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %NESSUSVS-<hfld49>: [<hfld20> <hfld21> <hfld22> <hfld23> <hfld24>][<hfld2>.<hfld3>] <hfld4> (<messageid> <hfld5>) <hfld6> <!payload:hfld4>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NESSUSVS\-(?<hfld49>[^:]*):[\s]+\[(?<hfld20>[^\s]*)[\s]+(?<hfld21>[^\s]*)[\s]+(?<hfld22>[^\s]*)[\s]+(?<hfld23>[^\s]*)[\s]+(?<hfld24>[^\]]*)\]\[(?<hfld2>[^\.]*)\.(?<hfld3>[^\]]*)\][\s]+(?<message>(?<hfld4>[^\s]*)[\s]+\((?<messageid>[^\s]*)[\s]+(?<hfld5>[^\)]*)\)[\s]+(?<hfld6>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-nessusvsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "REPORTITEM" {
		# MESSAGE REPORTITEM
		# line in RSA: <fld1>:Hostname=<hostname>^^Host_ip=<hostip>^^FQDN=<fqdn>^^Port=<network_port>^^OS=<os>^^MAC_address=<macaddr>^^Host_start=<fld30>^^Host_end=<fld31>^^Severity=<severity>^^Risk_factor=<risk>^^Service_name=<service>^^Protocol=<protocol>^^Vulnerability_refs=<vuln_ref>^^CVSS_base_score=<risk_num>^^CVSS_vector=<fld32>^^PluginID=<rule>^^Plugin_name=<rulename>^^Plugin Family=<rule_group>^^Synopsis=<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}:Hostname=%{hostname}^^Host_ip=%{hostip}^^FQDN=%{fqdn}^^Port=%{network_port}^^OS=%{os}^^MAC_address=%{macaddr}^^Host_start=%{fld30}^^Host_end=%{fld31}^^Severity=%{severity}^^Risk_factor=%{risk}^^Service_name=%{service}^^Protocol=%{protocol}^^Vulnerability_refs=%{vuln_ref}^^CVSS_base_score=%{risk_num}^^CVSS_vector=%{fld32}^^PluginID=%{rule}^^Plugin_name=%{rulename}^^Plugin Family=%{rule_group}^^Synopsis=%{event_description}" }
				id => "message-REPORTITEM"
				add_field => {
					"[event][id]" => "REPORTITEM"
					"[rsa][message][id1]" => "REPORTITEM"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE REPORTITEM:01
		# line in RSA: <fld1>:Hostname=<hostname>^^Host_ip=<hostip>^^FQDN=<fqdn>^^Port=<network_port>^^OS=<os>^^MAC_address=<macaddr>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}:Hostname=%{hostname}^^Host_ip=%{hostip}^^FQDN=%{fqdn}^^Port=%{network_port}^^OS=%{os}^^MAC_address=%{macaddr}^^%{event_description}" }
				id => "message-REPORTITEM:01"
				add_field => {
					"[event][id]" => "REPORTITEM:01"
					"[rsa][message][id1]" => "REPORTITEM:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: connection from <hostip>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "connection from %{hostip}" }
			id => "msgParserId2"
			add_field => {
				"action" => "connecting"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: Deleting user <username>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "Deleting user %{username}" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"action" => "Deleting"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Finished" {
		# MESSAGE Finished
		# line in RSA: Finished testing <hostip>. <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Finished testing %{hostip}. %{fld5}" }
				id => "message-Finished"
				add_field => {
				"action" => "Finished testing"
					"[event][id]" => "Finished"
					"[rsa][message][id1]" => "Finished"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Finished:01
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-Finished:01"
				add_field => {
				"action" => "Finished"
					"[event][id]" => "Finished:01"
					"[rsa][message][id1]" => "Finished:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId6"
			add_field => {
				"action" => "finished"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "user" {
		# MESSAGE user
		# line in RSA: user <username> : test complete
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "user %{username} : test complete" }
				id => "message-user"
				add_field => {
				"action" => "Test Complete"
					"[event][id]" => "user"
					"[rsa][message][id1]" => "user"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE user:01
		# line in RSA: user <username> : testing <hostname> (<hostip>) <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "user %{username} : testing %{hostname} (%{hostip}) %{fld1}" }
				id => "message-user:01"
				add_field => {
				"action" => "testing"
					"[event][id]" => "user:01"
					"[rsa][message][id1]" => "user:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE user:02
		# line in RSA: user <username> starts a new scan. Target(s) : <hostname>, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "user %{username} starts a new scan. Target(s) : %{hostname}, %{info}" }
				id => "message-user:02"
				add_field => {
				"action" => "scan started"
					"[event][id]" => "user:02"
					"[rsa][message][id1]" => "user:02"
					"[event][categoryid]" => "1614000000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE user_launching
		# line in RSA: user <username> : launching <rulename> against <url> [<process_id>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "user %{username} : launching %{rulename} against %{url} [%{process_id}]" }
				id => "message-user_launching"
				add_field => {
				"event_description" => "User launched rule scan"
					"[event][id]" => "user_launching"
					"[rsa][message][id1]" => "user_launching"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE user_not_launching
		# line in RSA: user <username> : Not launching <rulename> against <url> <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "user %{username} : Not launching %{rulename} against %{url} %{reason}" }
				id => "message-user_not_launching"
				add_field => {
					"[event][id]" => "user_not_launching"
					"[rsa][message][id1]" => "user_not_launching"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA: Scan done: <info>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "Scan done: %{info}" }
			id => "msgParserId9"
			add_field => {
				"action" => "Scan complete"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId10"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId11"
			add_field => {
				"action" => "started"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId12"
			add_field => {
				"action" => "failed"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: <event_description> (pid=<process_id>)
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{event_description} (pid=%{process_id})" }
			id => "msgParserId13"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId14"
			add_field => {
				"action" => "Reloading"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA: New connection timeout -- closing the socket
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "New connection timeout -- closing the socket" }
			id => "msgParserId15"
			add_field => {
				"action" => "connection timeout"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId16"
			add_field => {
				"action" => "Invalid"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: bad login attempt from <hostip>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "bad login attempt from %{hostip}" }
			id => "msgParserId17"
			add_field => {
				"action" => "login failure"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE User
		# line in RSA: User '<username>' <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User '%{username}' %{event_description}" }
				id => "message-User"
				add_field => {
					"[event][id]" => "User"
					"[rsa][message][id1]" => "User"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE User:01
		# line in RSA: User <username> starts a new scan (<fld25>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} starts a new scan (%{fld25})" }
				id => "message-User:01"
				add_field => {
				"action" => "scan started"
					"[event][id]" => "User:01"
					"[rsa][message][id1]" => "User:01"
					"[event][categoryid]" => "1614000000"
					"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId22
	# line in RSA: <event_description>, as <reason> 
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{event_description}, as %{reason}" }
			id => "msgParserId22"
			add_field => {
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA: <rulename> (process <process_id>) finished its job in <duration> seconds 
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{rulename} (process %{process_id}) finished its job in %{duration} seconds" }
			id => "msgParserId23"
			add_field => {
				"ec_activity" => "Scan"
				"ec_outcome" => "Success"
				"event_description" => "Rule scan finished"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: <rulename> (pid <process_id>) is slow to finish - killing it 
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{rulename} (pid %{process_id}) is slow to finish - killing it" }
			id => "msgParserId24"
			add_field => {
				"ec_activity" => "Scan"
				"ec_outcome" => "Failure"
				"event_description" => "Rule scan killed due to slow response"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA:  <fld1> TCP sessions in parallel
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "%{fld1} TCP sessions in parallel" }
			id => "msgParserId25"
			add_field => {
				"event_description" => "TCP sessions in parallel"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: <event_description> (pid <process_id>)
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{event_description} (pid %{process_id})" }
			id => "msgParserId27"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: Bad login attempt for user '<username>' <info>
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "Bad login attempt for user '%{username}' %{info}" }
			id => "msgParserId28"
			add_field => {
				"action" => "login failure"
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA: Adding new user '<username>'
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "Adding new user '%{username}'" }
			id => "msgParserId29"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA: Granting admin privileges to user '<username>'
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "Granting admin privileges to user '%{username}'" }
			id => "msgParserId30"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld21} %{hfld22} %{hfld23} %{hfld24}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-nessusvsmsg.json"
#			template_name => "nessusvs_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

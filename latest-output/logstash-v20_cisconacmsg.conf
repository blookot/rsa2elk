# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "cisconac"
			"[observer][name]" => "Cisco NAC"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1> <hfld2> <hfld3>:<hfld4>:<hfld5> <hfld6> <messageid>: <!payload:hfld6>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^:]*):(?<hfld4>[^:]*):(?<hfld5>[^\s]*)[\s]+(?<message>(?<hfld6>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1> <hfld2> <hfld3>:<hfld4>:<hfld5> <hfld6> <msgIdPart1> <msgIdPart2>: <!payload:hfld6>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^:]*):(?<hfld4>[^:]*):(?<hfld5>[^\s]*)[\s]+(?<message>(?<hfld6>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_cisconacmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Administration" {
		# MESSAGE Administration:0001
		# line in RSA: <hostname> Administration: Admin user session expired, automatically logged out. Name:<administrator>, Group:<group>, IP:<saddr>, Login time:<fld30>, Last access time:<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Admin user session expired, automatically logged out. Name:%{administrator}, Group:%{group}, IP:%{saddr}, Login time:%{fld30}, Last access time:%{fld5}" }
				id => "message-Administration:0001"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Admin user session expired, automatically logged out."
					"[event][id]" => "Administration:0001"
					"[rsa][message][id1]" => "Administration:0001"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0002
		# line in RSA: <hostname> Administration: Admin user session is created, login succeeded. Name:<administrator>, Group:<group>, IP:<saddr>, Login time:<fld30>, Last access time:<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Admin user session is created, login succeeded. Name:%{administrator}, Group:%{group}, IP:%{saddr}, Login time:%{fld30}, Last access time:%{fld5}" }
				id => "message-Administration:0002"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Admin user session is created, login succeeded."
					"[event][id]" => "Administration:0002"
					"[rsa][message][id1]" => "Administration:0002"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0003
		# line in RSA: <hostname> Administration: Admin user logged out. Name:<administrator>, Group:<group>, IP:<saddr>, Login time:<fld30>, Last access time:<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Admin user logged out. Name:%{administrator}, Group:%{group}, IP:%{saddr}, Login time:%{fld30}, Last access time:%{fld5}" }
				id => "message-Administration:0003"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Admin user logged out."
					"[event][id]" => "Administration:0003"
					"[rsa][message][id1]" => "Administration:0003"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0004
		# line in RSA: <hostname> Administration: <hostip> added to Clean Access Manager
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{hostip} added to Clean Access Manager" }
				id => "message-Administration:0004"
				add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "added to Clean Access Manager"
					"[event][id]" => "Administration:0004"
					"[rsa][message][id1]" => "Administration:0004"
					"[event][categoryid]" => "1701010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0005
		# line in RSA: <hostname> Administration: <fld6> added to the Software Checklist
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{fld6} added to the Software Checklist" }
				id => "message-Administration:0005"
				add_field => {
				"event_description" => "added to the Software Checklist"
					"[event][id]" => "Administration:0005"
					"[rsa][message][id1]" => "Administration:0005"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0006
		# line in RSA: <hostname> Administration: Could not connect to <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Could not connect to %{hostip}" }
				id => "message-Administration:0006"
				add_field => {
				"event_description" => "Could not connect"
					"[event][id]" => "Administration:0006"
					"[rsa][message][id1]" => "Administration:0006"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0007
		# line in RSA: <hostname> Administration: Updated traffic policy to <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Updated traffic policy to %{hostip}" }
				id => "message-Administration:0007"
				add_field => {
				"event_description" => "Updated traffic policy"
					"[event][id]" => "Administration:0007"
					"[rsa][message][id1]" => "Administration:0007"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0008
		# line in RSA: <hostname> Administration: <username> user account updated successfully
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{username} user account updated successfully" }
				id => "message-Administration:0008"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_description" => "user account updated successfully"
					"[event][id]" => "Administration:0008"
					"[rsa][message][id1]" => "Administration:0008"
					"[event][categoryid]" => "1402020300"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0009
		# line in RSA: <hostname> Administration: <hostip> updated in Clean Access Manager
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{hostip} updated in Clean Access Manager" }
				id => "message-Administration:0009"
				add_field => {
				"event_description" => "updated in Clean Access Manager"
					"[event][id]" => "Administration:0009"
					"[rsa][message][id1]" => "Administration:0009"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:00010
		# line in RSA: <hostname> Administration: <hostip> removed from the Clean Access Manager
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{hostip} removed from the Clean Access Manager" }
				id => "message-Administration:00010"
				add_field => {
				"event_description" => "removed from the Clean Access Manager"
					"[event][id]" => "Administration:00010"
					"[rsa][message][id1]" => "Administration:00010"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0011
		# line in RSA: <hostname> Administration: <fld8> is added to Clean Access Server <hostip> static route list.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{fld8} is added to Clean Access Server %{hostip} static route list." }
				id => "message-Administration:0011"
				add_field => {
				"event_description" => "added to Clean Access Server static route list"
					"[event][id]" => "Administration:0011"
					"[rsa][message][id1]" => "Administration:0011"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0012
		# line in RSA: <hostname> Administration: [Name:<username>, IP:<saddr>] Invalid admin credentials
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: [Name:%{username}, IP:%{saddr}] Invalid admin credentials" }
				id => "message-Administration:0012"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Invalid admin credentials"
					"[event][id]" => "Administration:0012"
					"[rsa][message][id1]" => "Administration:0012"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0013
		# line in RSA: <hostname> Administration: <saddr> user account created successfully
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{saddr} user account created successfully" }
				id => "message-Administration:0013"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "user account created successfully"
					"[event][id]" => "Administration:0013"
					"[rsa][message][id1]" => "Administration:0013"
					"[event][categoryid]" => "1402020200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0014
		# line in RSA: <hostname> Administration: <smacaddr> { added to | removed from the } certified device list
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+Administration:[\s]+(?<smacaddr>[^\s]*)[\s]+([\s]*added[\s]+to[\s]+|[\s]*removed[\s]+from[\s]+the[\s]+)[\s]+certified[\s]+device[\s]+list$" }
				id => "message-Administration:0014"
				add_field => {
				"event_description" => "added to certified device list"
					"[event][id]" => "Administration:0014"
					"[rsa][message][id1]" => "Administration:0014"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0015
		# line in RSA: <hostname> Administration: [<smacaddr> ## <saddr>] <username>  <fld2> forcefully logged out by <administrator>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: [%{smacaddr} ## %{saddr}] %{username}  %{fld2} forcefully logged out by %{administrator}" }
				id => "message-Administration:0015"
				add_field => {
				"event_description" => "forcefully logged out by Administrator"
					"[event][id]" => "Administration:0015"
					"[rsa][message][id1]" => "Administration:0015"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0016
		# line in RSA: <hostname> Administration: Updated host policy to <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Updated host policy to %{hostip}" }
				id => "message-Administration:0016"
				add_field => {
				"event_description" => "Updated host policy"
					"[event][id]" => "Administration:0016"
					"[rsa][message][id1]" => "Administration:0016"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0017
		# line in RSA: <hostname> Administration: Updated dns server to <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Updated dns server to %{hostip}" }
				id => "message-Administration:0017"
				add_field => {
				"event_description" => "Updated dns server"
					"[event][id]" => "Administration:0017"
					"[rsa][message][id1]" => "Administration:0017"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0018
		# line in RSA: <hostname> Administration: <info> are modified. All other checks are unchanged
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{info} are modified. All other checks are unchanged" }
				id => "message-Administration:0018"
				add_field => {
					"[event][id]" => "Administration:0018"
					"[rsa][message][id1]" => "Administration:0018"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0019
		# line in RSA: <hostname> Administration: (API <fld1>): <disposition>!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: (API %{fld1}): %{disposition}!" }
				id => "message-Administration:0019"
				add_field => {
					"[event][id]" => "Administration:0019"
					"[rsa][message][id1]" => "Administration:0019"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0020
		# line in RSA: <hostname> Administration: <info> was saved successfully
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{info} was saved successfully" }
				id => "message-Administration:0020"
				add_field => {
					"[event][id]" => "Administration:0020"
					"[rsa][message][id1]" => "Administration:0020"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0021
		# line in RSA: <hostname> Administration: <administrator> admin user already exists, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{administrator} admin user already exists, %{info}" }
				id => "message-Administration:0021"
				add_field => {
					"[event][id]" => "Administration:0021"
					"[rsa][message][id1]" => "Administration:0021"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0022
		# line in RSA: <hostname> Administration: Cisco Clean Access product <fld2> license is valid
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Cisco Clean Access product %{fld2} license is valid" }
				id => "message-Administration:0022"
				add_field => {
					"[event][id]" => "Administration:0022"
					"[rsa][message][id1]" => "Administration:0022"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0023
		# line in RSA: <hostname> Administration: Request is missing some security credential (<fld22>). Requested URI: <fld12>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: Request is missing some security credential (%{fld22}). Requested URI: %{fld12}" }
				id => "message-Administration:0023"
				add_field => {
					"[event][id]" => "Administration:0023"
					"[rsa][message][id1]" => "Administration:0023"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Administration:0024
		# line in RSA: <hostname> Administration: <fld6> are modified. All other rules are unchanged
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Administration: %{fld6} are modified. All other rules are unchanged" }
				id => "message-Administration:0024"
				add_field => {
					"[event][id]" => "Administration:0024"
					"[rsa][message][id1]" => "Administration:0024"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "SSL_Communication" {
		# MESSAGE SSL_Communication
		# line in RSA: <hostname> SSL Communication: SSLManager: server's certificate chain verification failed <src_dn>:<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SSL Communication: SSLManager: server's certificate chain verification failed %{src_dn}:%{result}" }
				id => "message-SSL_Communication"
				add_field => {
				"event_description" => "SSLManager: server's certificate chain verification failed"
					"[event][id]" => "SSL_Communication"
					"[rsa][message][id1]" => "SSL_Communication"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SSL_Communication:01
		# line in RSA: <hostname> SSL Communication: The NAC Manager certificate has expired.<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SSL Communication: The NAC Manager certificate has expired.%{info}" }
				id => "message-SSL_Communication:01"
				add_field => {
				"event_description" => "The NAC Manager certificate has expired"
					"[event][id]" => "SSL_Communication:01"
					"[rsa][message][id1]" => "SSL_Communication:01"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Authentication" {
		# MESSAGE Authentication:0001
		# line in RSA: <hostname> Authentication: Unable to login, [<smacaddr> ## <saddr>] <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: Unable to login, [%{smacaddr} ## %{saddr}] %{username}" }
				id => "message-Authentication:0001"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Unable to login,"
					"[event][id]" => "Authentication:0001"
					"[rsa][message][id1]" => "Authentication:0001"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:0002
		# line in RSA: <hostname> Authentication: [<smacaddr> ## <saddr>] <username> <fld2> Successfully logged in temporary role, Provider: <fld15>, L2 MAC address: <fld16>, Role: <user_role>, OS: <os>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: [%{smacaddr} ## %{saddr}] %{username} %{fld2} Successfully logged in temporary role, Provider: %{fld15}, L2 MAC address: %{fld16}, Role: %{user_role}, OS: %{os}" }
				id => "message-Authentication:0002"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Successfully logged in temporary role"
					"[event][id]" => "Authentication:0002"
					"[rsa][message][id1]" => "Authentication:0002"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:0003
		# line in RSA: <hostname> Authentication: [<smacaddr> ## <saddr>] <username> <fld2> Already logged in, Provider: <fld15>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: [%{smacaddr} ## %{saddr}] %{username} %{fld2} Already logged in, Provider: %{fld15}" }
				id => "message-Authentication:0003"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"event_description" => "Already logged in "
					"[event][id]" => "Authentication:0003"
					"[rsa][message][id1]" => "Authentication:0003"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:0004
		# line in RSA: <hostname> Authentication: Unable to ping <daddr>, going to logout user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: Unable to ping %{daddr}, going to logout user %{username}" }
				id => "message-Authentication:0004"
				add_field => {
				"event_description" => "Unable to ping going to logout user"
					"[event][id]" => "Authentication:0004"
					"[rsa][message][id1]" => "Authentication:0004"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:0005
		# line in RSA: <hostname> Authentication: End of remote user session: <daddr>, going to logout user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: End of remote user session: %{daddr}, going to logout user %{username}" }
				id => "message-Authentication:0005"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "End of remote user session"
					"[event][id]" => "Authentication:0005"
					"[rsa][message][id1]" => "Authentication:0005"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:0006
		# line in RSA: <hostname> Authentication: [<smacaddr> ## <saddr>] <user_address> <fld2> Successfully logged in as out-of-band user, Provider: <fld15>, Role: <user_role>, OS: <os>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: [%{smacaddr} ## %{saddr}] %{user_address} %{fld2} Successfully logged in as out-of-band user, Provider: %{fld15}, Role: %{user_role}, OS: %{os}" }
				id => "message-Authentication:0006"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "Successfully logged in as out-of-band user"
					"[event][id]" => "Authentication:0006"
					"[rsa][message][id1]" => "Authentication:0006"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:0007
		# line in RSA: <hostname> Authentication: [<smacaddr> ## <saddr>] <user_address> <fld2> Forcefully logged out by <administrator>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: [%{smacaddr} ## %{saddr}] %{user_address} %{fld2} Forcefully logged out by %{administrator}" }
				id => "message-Authentication:0007"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "Forcefully logged out by administrator"
					"[event][id]" => "Authentication:0007"
					"[rsa][message][id1]" => "Authentication:0007"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:0008
		# line in RSA: <hostname> Authentication: [<smacaddr> ## <saddr>] <username> <fld2> Logged out successfully
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: [%{smacaddr} ## %{saddr}] %{username} %{fld2} Logged out successfully" }
				id => "message-Authentication:0008"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "Logged out successfully"
					"[event][id]" => "Authentication:0008"
					"[rsa][message][id1]" => "Authentication:0008"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:0009
		# line in RSA: <hostname> Authentication: Kick users based on <group_object> provided by the Clean Access
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: Kick users based on %{group_object} provided by the Clean Access" }
				id => "message-Authentication:0009"
				add_field => {
					"[event][id]" => "Authentication:0009"
					"[rsa][message][id1]" => "Authentication:0009"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:10
		# line in RSA: <hostname> Authentication: [<smacaddr> ## <saddr>] <username> <fld2> Successfully logged in with a previously-used IP address, Provider: <fld15>, L2 MAC address: <fld16>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: [%{smacaddr} ## %{saddr}] %{username} %{fld2} Successfully logged in with a previously-used IP address, Provider: %{fld15}, L2 MAC address: %{fld16}" }
				id => "message-Authentication:10"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "Successfully logged in with a previously-used IP address"
					"[event][id]" => "Authentication:10"
					"[rsa][message][id1]" => "Authentication:10"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:11
		# line in RSA: <hostname> Authentication: OOB - Access IP assigned for mac [<smacaddr>] is : <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: OOB - Access IP assigned for mac [%{smacaddr}] is : %{saddr}" }
				id => "message-Authentication:11"
				add_field => {
					"[event][id]" => "Authentication:11"
					"[rsa][message][id1]" => "Authentication:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:12
		# line in RSA: <hostname> Authentication: [<smacaddr> ## <saddr>] <username> - <user_role> - <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: [%{smacaddr} ## %{saddr}] %{username} - %{user_role} - %{result}" }
				id => "message-Authentication:12"
				add_field => {
					"[event][id]" => "Authentication:12"
					"[rsa][message][id1]" => "Authentication:12"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:13
		# line in RSA: <hostname> Authentication: Invalid username or password via  <fld1>, [<smacaddr> ## <saddr>] <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: Invalid username or password via  %{fld1}, [%{smacaddr} ## %{saddr}] %{username}" }
				id => "message-Authentication:13"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Authentication:13"
					"[rsa][message][id1]" => "Authentication:13"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:14
		# line in RSA: <hostname> Authentication: [<smacaddr> ## <saddr>] <username> <fld2> Successfully logged in, Provider: <fld15>, L2 MAC address: <fld16>, Role: <user_role>, OS: <os>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: [%{smacaddr} ## %{saddr}] %{username} %{fld2} Successfully logged in, Provider: %{fld15}, L2 MAC address: %{fld16}, Role: %{user_role}, OS: %{os}" }
				id => "message-Authentication:14"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Successfully logged in"
					"[event][id]" => "Authentication:14"
					"[rsa][message][id1]" => "Authentication:14"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:15
		# line in RSA: <hostname> Authentication: Unable to login via  <fld15>, [<smacaddr> ## <saddr>] <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: Unable to login via  %{fld15}, [%{smacaddr} ## %{saddr}] %{username}" }
				id => "message-Authentication:15"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Authentication:15"
					"[rsa][message][id1]" => "Authentication:15"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Authentication:16
		# line in RSA: <hostname> Authentication: Unknown user via  <fld15>, [<smacaddr> ## <saddr>] <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Authentication: Unknown user via  %{fld15}, [%{smacaddr} ## %{saddr}] %{username}" }
				id => "message-Authentication:16"
				add_field => {
				"ec_subject" => "User"
					"[event][id]" => "Authentication:16"
					"[rsa][message][id1]" => "Authentication:16"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Miscellaneous" {
		# MESSAGE Miscellaneous
		# line in RSA: <hostname> Miscellaneous:  successfully published registration page to <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Miscellaneous:  successfully published registration page to %{hostip}" }
				id => "message-Miscellaneous"
				add_field => {
				"event_description" => "successfully published registration page "
					"[event][id]" => "Miscellaneous"
					"[rsa][message][id1]" => "Miscellaneous"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Miscellaneous:01
		# line in RSA: <hostname> Miscellaneous: Overwrote <fld1> logs in the past <duration> minutes to keep the event log limit.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} Miscellaneous: Overwrote %{fld1} logs in the past %{duration} minutes to keep the event log limit." }
				id => "message-Miscellaneous:01"
				add_field => {
					"[event][id]" => "Miscellaneous:01"
					"[rsa][message][id1]" => "Miscellaneous:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "CleanAccessServer" {
		# MESSAGE CleanAccessServer:0001
		# line in RSA: <hostname> CleanAccessServer: NAC {Server|server} <hostip> is connected.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+CleanAccessServer:[\s]+NAC[\s]+(Server|server)[\s]+(?<hostip>[^\s]*)[\s]+is[\s]+connected\.$" }
				id => "message-CleanAccessServer:0001"
				add_field => {
				"event_description" => "NAC Server connected"
					"[event][id]" => "CleanAccessServer:0001"
					"[rsa][message][id1]" => "CleanAccessServer:0001"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CleanAccessServer:0002
		# line in RSA: <hostname> CleanAccessServer: NAC {Server|server} <hostip> is disconnected.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+CleanAccessServer:[\s]+NAC[\s]+(Server|server)[\s]+(?<hostip>[^\s]*)[\s]+is[\s]+disconnected\.$" }
				id => "message-CleanAccessServer:0002"
				add_field => {
				"event_description" => "NAC Server disconnected"
					"[event][id]" => "CleanAccessServer:0002"
					"[rsa][message][id1]" => "CleanAccessServer:0002"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CleanAccessServer:0003
		# line in RSA: <hostname> CleanAccessServer: NAC {Server|server} <hostip> is in-sync.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+CleanAccessServer:[\s]+NAC[\s]+(Server|server)[\s]+(?<hostip>[^\s]*)[\s]+is[\s]+in\-sync\.$" }
				id => "message-CleanAccessServer:0003"
				add_field => {
				"event_description" => "NAC Server is in-sync"
					"[event][id]" => "CleanAccessServer:0003"
					"[rsa][message][id1]" => "CleanAccessServer:0003"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CleanAccessServer:0004
		# line in RSA: <hostname> CleanAccessServer: NAC {Server|server} <hostip> is out-of-sync.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+CleanAccessServer:[\s]+NAC[\s]+(Server|server)[\s]+(?<hostip>[^\s]*)[\s]+is[\s]+out\-of\-sync\.$" }
				id => "message-CleanAccessServer:0004"
				add_field => {
				"event_description" => "NAC Server is out-of-sync"
					"[event][id]" => "CleanAccessServer:0004"
					"[rsa][message][id1]" => "CleanAccessServer:0004"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CleanAccessServer:0005
		# line in RSA: <hostname> CleanAccessServer: <hostip> System Stats:    Load factor  <fld15>    Mem (bytes) Total: <fld16> Used: <fld17> Free: <fld18> Shared: <fld19> Buffers: <fld20> Cached: <fld21>    CPU(s) <fld22>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} CleanAccessServer: %{hostip} System Stats:    Load factor  %{fld15}    Mem (bytes) Total: %{fld16} Used: %{fld17} Free: %{fld18} Shared: %{fld19} Buffers: %{fld20} Cached: %{fld21}    CPU(s) %{fld22}" }
				id => "message-CleanAccessServer:0005"
				add_field => {
				"event_description" => "System Stats"
					"[event][id]" => "CleanAccessServer:0005"
					"[rsa][message][id1]" => "CleanAccessServer:0005"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "SW_Management" {
		# MESSAGE SW_Management
		# line in RSA: <hostname> SW_Management: SNMP trap is received from switch [<saddr>] which is NOT in our database.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: SNMP trap is received from switch [%{saddr}] which is NOT in our database." }
				id => "message-SW_Management"
				add_field => {
				"event_description" => "SNMP trap is received from switch which is NOT in our database."
					"[event][id]" => "SW_Management"
					"[rsa][message][id1]" => "SW_Management"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:01
		# line in RSA: <hostname> SW_Management: Received Link-Down trap from switch [<fld1>] port [<sport>]. Successfully remove Out-of-Band user [OOB ## <smacaddr> ## <saddr>] <user_address>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: Received Link-Down trap from switch [%{fld1}] port [%{sport}]. Successfully remove Out-of-Band user [OOB ## %{smacaddr} ## %{saddr}] %{user_address}." }
				id => "message-SW_Management:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Successfully remove Out-of-Band user"
					"[event][id]" => "SW_Management:01"
					"[rsa][message][id1]" => "SW_Management:01"
					"[event][categoryid]" => "1402020100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:02
		# line in RSA: <hostname> SW_Management: Kicked OOB user [OOB ## <smacaddr> ## <saddr>] <username> on port <sport> of switch <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: Kicked OOB user [OOB ## %{smacaddr} ## %{saddr}] %{username} on port %{sport} of switch %{fld1}" }
				id => "message-SW_Management:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Stop"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
					"[event][id]" => "SW_Management:02"
					"[rsa][message][id1]" => "SW_Management:02"
					"[event][categoryid]" => "1402020100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:03
		# line in RSA: <hostname> SW_Management: There are multiple MAC addresses associated with switch [<fld1>] port [<sport>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: There are multiple MAC addresses associated with switch [%{fld1}] port [%{sport}]" }
				id => "message-SW_Management:03"
				add_field => {
					"[event][id]" => "SW_Management:03"
					"[rsa][message][id1]" => "SW_Management:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:04
		# line in RSA: <hostname> SW_Management: OOB Heartbeat Timeout: [<smacaddr> ## <saddr>/<fld1>] from CAS [<hostip>]. Removed user from CAM.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: OOB Heartbeat Timeout: [%{smacaddr} ## %{saddr}/%{fld1}] from CAS [%{hostip}]. Removed user from CAM." }
				id => "message-SW_Management:04"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_description" => "Removed user from CAM"
					"[event][id]" => "SW_Management:04"
					"[rsa][message][id1]" => "SW_Management:04"
					"[event][categoryid]" => "1402010302"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:05
		# line in RSA: <hostname> SW_Management: Unable to process out-of-band login request from [<smacaddr> ## <saddr>] <user_address>. Cause:  switch [<fld1>] port [<sport>] is not managed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: Unable to process out-of-band login request from [%{smacaddr} ## %{saddr}] %{user_address}. Cause:  switch [%{fld1}] port [%{sport}] is not managed." }
				id => "message-SW_Management:05"
				add_field => {
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
					"[event][id]" => "SW_Management:05"
					"[rsa][message][id1]" => "SW_Management:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:06
		# line in RSA: <hostname> SW_Management: Unable to process out-of-band login request from [<smacaddr> ## <saddr>] <user_address>. Cause: OOB client <fld11> not found.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: Unable to process out-of-band login request from [%{smacaddr} ## %{saddr}] %{user_address}. Cause: OOB client %{fld11} not found." }
				id => "message-SW_Management:06"
				add_field => {
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
					"[event][id]" => "SW_Management:06"
					"[rsa][message][id1]" => "SW_Management:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:07
		# line in RSA: <hostname> SW_Management: SWISS detected second access VLAN IP:<fld21> for [<smacaddr> ## <saddr>/<fld1>] from CAS [<hostip>]. Removed user from CAM.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: SWISS detected second access VLAN IP:%{fld21} for [%{smacaddr} ## %{saddr}/%{fld1}] from CAS [%{hostip}]. Removed user from CAM." }
				id => "message-SW_Management:07"
				add_field => {
					"[event][id]" => "SW_Management:07"
					"[rsa][message][id1]" => "SW_Management:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:08
		# line in RSA: <hostname> SW_Management: Switch traps cannot be processed due to the snmp read/write disabled for the switch <fld11> for the command type <fld12>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: Switch traps cannot be processed due to the snmp read/write disabled for the switch %{fld11} for the command type %{fld12}" }
				id => "message-SW_Management:08"
				add_field => {
					"[event][id]" => "SW_Management:08"
					"[rsa][message][id1]" => "SW_Management:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:09
		# line in RSA: <hostname> SW_Management: switch [<saddr>] is DISABLED because of too many consecutive read failures!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: switch [%{saddr}] is DISABLED because of too many consecutive read failures!" }
				id => "message-SW_Management:09"
				add_field => {
					"[event][id]" => "SW_Management:09"
					"[rsa][message][id1]" => "SW_Management:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SW_Management:10
		# line in RSA: <hostname> SW_Management: switch [<saddr>] is recovered from SNMP failure!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} SW_Management: switch [%{saddr}] is recovered from SNMP failure!" }
				id => "message-SW_Management:10"
				add_field => {
					"[event][id]" => "SW_Management:10"
					"[rsa][message][id1]" => "SW_Management:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "CleanAccess" {
		# MESSAGE CleanAccess
		# line in RSA: <hostname> CleanAccess: Automatic <agent> update scheduled at <event_time_string> is successful.  Latest version of <fld1> already installed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} CleanAccess: Automatic %{agent} update scheduled at %{event_time_string} is successful.  Latest version of %{fld1} already installed" }
				id => "message-CleanAccess"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => " Automatic update scheduled is successful"
					"[event][id]" => "CleanAccess"
					"[rsa][message][id1]" => "CleanAccess"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CleanAccess:01
		# line in RSA: <hostname> CleanAccess: Automatic <agent> update scheduled at <event_time_string> is successful.  Latest version (Ver. <component_version>) of <fld1> already installed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} CleanAccess: Automatic %{agent} update scheduled at %{event_time_string} is successful.  Latest version (Ver. %{component_version}) of %{fld1} already installed" }
				id => "message-CleanAccess:01"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => " Automatic update scheduled is successful"
					"[event][id]" => "CleanAccess:01"
					"[rsa][message][id1]" => "CleanAccess:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CleanAccess:02
		# line in RSA: <hostname> CleanAccess: Automatic <agent> update scheduled at <event_time_string> is successful.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} CleanAccess: Automatic %{agent} update scheduled at %{event_time_string} is successful." }
				id => "message-CleanAccess:02"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => " Automatic update scheduled is successful"
					"[event][id]" => "CleanAccess:02"
					"[rsa][message][id1]" => "CleanAccess:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CleanAccess:03
		# line in RSA: <hostname> CleanAccess: Timer of certified device list <group_object> { starts clearing. | ends clearing: <info>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+CleanAccess:[\s]+Timer[\s]+of[\s]+certified[\s]+device[\s]+list[\s]+(?<group_object>[^\s]*)[\s]+([\s]*starts[\s]+clearing\.[\s]+|[\s]*ends[\s]+clearing:[\s]+(?<info>.*))$" }
				id => "message-CleanAccess:03"
				add_field => {
				"event_description" => " Timer of certified device list starts clearing."
					"[event][id]" => "CleanAccess:03"
					"[rsa][message][id1]" => "CleanAccess:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CleanAccess:04
		# line in RSA: <hostname> CleanAccess: Start the timer of certified device list <group_object>. It will be executed at [<fld30>] every <fld1> day
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} CleanAccess: Start the timer of certified device list %{group_object}. It will be executed at [%{fld30}] every %{fld1} day" }
				id => "message-CleanAccess:04"
				add_field => {
					"[event][id]" => "CleanAccess:04"
					"[rsa][message][id1]" => "CleanAccess:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId65
	# line in RSA: <hostname> Client: [<smacaddr> ## <saddr>] { [<username>]- | <username>- } Logout request
	else if [logstash][msgparser][id] == "msgParserId65" {
		grok {
			match => { "message" => "^(?<hostname>[^\s]*)[\s]+Client:[\s]+\[(?<smacaddr>[^\s]*)[\s]+##[\s]+(?<saddr>[^\]]*)\][\s]+([\s]*\[(?<username>[^\]]*)\]\-[\s]+|[\s]*(?<username>[^\-]*)\-[\s]+)[\s]+Logout[\s]+request$" }
			id => "msgParserId65"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "NGS_ADMIN" {
		# MESSAGE NGS_ADMIN
		# line in RSA: <hostname> NGS_ADMIN: [<fld1>] Generated backup file ( <filename> )
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} NGS_ADMIN: [%{fld1}] Generated backup file ( %{filename} )" }
				id => "message-NGS_ADMIN"
				add_field => {
				"event_description" => "Generated backup file"
					"[event][id]" => "NGS_ADMIN"
					"[rsa][message][id1]" => "NGS_ADMIN"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NGS_ADMIN:01
		# line in RSA: <hostname> NGS_ADMIN: [<fld1>] Failed to connect to FTP Backup server (<daddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} NGS_ADMIN: [%{fld1}] Failed to connect to FTP Backup server (%{daddr})" }
				id => "message-NGS_ADMIN:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"ec_outcome" => "Failure"
				"event_description" => "Failed to connect to FTP Backup server"
					"[event][id]" => "NGS_ADMIN:01"
					"[rsa][message][id1]" => "NGS_ADMIN:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "NGS_SPONSOR" {
		# MESSAGE NGS_SPONSOR
		# line in RSA: <hostname> NGS_SPONSOR: [<fld1>] Guest User ( <username> ) sponsored by ( <fld2> ) authenticated successfully with IP address ( <saddr>) from RADIUS client ( <fld3> ): <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} NGS_SPONSOR: [%{fld1}] Guest User ( %{username} ) sponsored by ( %{fld2} ) authenticated successfully with IP address ( %{saddr}) from RADIUS client ( %{fld3} ): %{fld4}" }
				id => "message-NGS_SPONSOR"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
				"event_description" => "Guest User authenticated successfully"
					"[event][id]" => "NGS_SPONSOR"
					"[rsa][message][id1]" => "NGS_SPONSOR"
					"[event][categoryid]" => "1302010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NGS_SPONSOR:01
		# line in RSA: <hostname> NGS_SPONSOR: [<fld1>] Notified by e-mail ( <from> ): <username> <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} NGS_SPONSOR: [%{fld1}] Notified by e-mail ( %{from} ): %{username} %{fld2}" }
				id => "message-NGS_SPONSOR:01"
				add_field => {
				"event_description" => "Notified by e-mail"
					"[event][id]" => "NGS_SPONSOR:01"
					"[rsa][message][id1]" => "NGS_SPONSOR:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NGS_SPONSOR:02
		# line in RSA: <hostname> NGS_SPONSOR: [<fld1>] Updated guest account: <username> <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} NGS_SPONSOR: [%{fld1}] Updated guest account: %{username} %{fld2}" }
				id => "message-NGS_SPONSOR:02"
				add_field => {
				"event_description" => "Updated guest account"
					"[event][id]" => "NGS_SPONSOR:02"
					"[rsa][message][id1]" => "NGS_SPONSOR:02"
					"[event][categoryid]" => "1402020300"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_cisconacmsg.json"
#			template_name => "cisconac_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "cacheflowelff"
			"[observer][name]" => "Blue Coat ELFF"
			"[observer][type]" => "Web Logs"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %CACHEFLOWELFF-4-:<hfld1> cs-method="<messageid>" <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%CACHEFLOWELFF\-4\-:(?<message>(?<hfld1>[^\s]*)[\s]+cs\-method=\"(?<messageid>[^\"]*)\"[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %CACHEFLOWELFF-<hlevel>-<hfld1>: <hdate> <htime> <hclient_ip> <husername> <hgroup> <msgIdPart1> <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%CACHEFLOWELFF\-(?<hlevel>[^\-]*)\-(?<hfld1>[^:]*):[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hclient_ip>[^\s]*)[\s]+(?<husername>[^\s]*)[\s]+(?<hgroup>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "IM_%{msgIdPart1}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %CACHEFLOWELFF-<hlevel>-<hfld1>: <hdate> <htime> <hreq_time> <hclient_ip> <husername> <hgroup> <hoperation_id> <hfresult> "<hcategory>" <hurl> <hstatus> <msgIdPart1> <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%CACHEFLOWELFF\-(?<hlevel>[^\-]*)\-(?<hfld1>[^:]*):[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hreq_time>[^\s]*)[\s]+(?<hclient_ip>[^\s]*)[\s]+(?<husername>[^\s]*)[\s]+(?<hgroup>[^\s]*)[\s]+(?<hoperation_id>[^\s]*)[\s]+(?<hfresult>[^\s]*)[\s]+\"(?<hcategory>[^\"]*)\"[\s]+(?<hurl>[^\s]*)[\s]+(?<hstatus>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{msgIdPart1}_MAIN"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0031
	# line in RSA: %CACHEFLOWELFF-<hlevel>-<hfld1>: <hdate> <htime> <hreq_time> <hclient_ip> <husername> <hgroup> <hoperation_id> <hfresult> <hcategory> <hurl> <hstatus> <msgIdPart1> <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%CACHEFLOWELFF\-(?<hlevel>[^\-]*)\-(?<hfld1>[^:]*):[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hreq_time>[^\s]*)[\s]+(?<hclient_ip>[^\s]*)[\s]+(?<husername>[^\s]*)[\s]+(?<hgroup>[^\s]*)[\s]+(?<hoperation_id>[^\s]*)[\s]+(?<hfresult>[^\s]*)[\s]+(?<hcategory>[^\s]*)[\s]+(?<hurl>[^\s]*)[\s]+(?<hstatus>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0031"
			add_field => {
				"[rsa][header][id]" => "0031"
				"[rsa][message][id2]" => "%{msgIdPart1}_MAIN"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %CACHEFLOWELFF-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%CACHEFLOWELFF-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hmonth> <hday> <hyear> <htime> %CACHEFLOWELFF-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{hyear} %{htime} %CACHEFLOWELFF-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <hmonth> <hday> <htime> ProxySG: 3C0002 <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} ProxySG: 3C0002 %{messageid}: %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <hmonth> <hday> <htime> ProxySG: 3B0002 <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} ProxySG: 3B0002 %{messageid}: %{message}" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <hmonth> <hday> <htime> <haddr> ProxySG: <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} %{haddr} ProxySG: %{messageid} %{message}" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <hmonth> <hday> <htime> ProxySG: <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} ProxySG: %{messageid} %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: <hmonth> <hday> <htime> ProxySG: <p_msgid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} ProxySG: %{p_msgid} %{message}" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "CACHEFLOWELFF_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <hmonth> <hday> <htime> <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} %{messageid}: %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: %CACHEFLOWELFF_<messageid>:<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%CACHEFLOWELFF_%{messageid}:%{message}" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: %CACHEFLOWELFF_syslog:<hfld1>,cs-method="<messageid>",<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%CACHEFLOWELFF_syslog:(?<message>(?<hfld1>[^,]*),cs\-method=\"(?<messageid>[^\"]*)\",(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_cacheflowelffmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  <fld20> <fld21> <saddr> <username> <group> <network_service> <action> <im_userid> <im_username> <fld1> {"<im_client>" | <im_client>} <im_buddyid> <im_buddyname> <fld2> <im_croomid> <im_croomtype> <im_members> {"<message_body>" | <message_body>} <bytes> <fld3> <content_type> <filename> <filename_size> <disposition>
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^[\s]*(?<fld20>[^\s]*)[\s]+(?<fld21>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+(?<group>[^\s]*)[\s]+(?<network_service>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<im_userid>[^\s]*)[\s]+(?<im_username>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(\"(?<im_client>[^\"]*)\"[\s]+|[\s]*(?<im_client>[^\s]*))[\s]+(?<im_buddyid>[^\s]*)[\s]+(?<im_buddyname>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<im_croomid>[^\s]*)[\s]+(?<im_croomtype>[^\s]*)[\s]+(?<im_members>[^\s]*)[\s]+(\"(?<message_body>[^\"]*)\"[\s]+|[\s]*(?<message_body>[^\s]*))[\s]+(?<bytes>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<content_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<filename_size>[^\s]*)[\s]+(?<disposition>.*)$" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:  Download of <fld20> database complete(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId1" {
		grok {
			match => { "message" => "^[\s]*Download[\s]+of[\s]+(?<fld20>[^\s]*)[\s]+database[\s]+complete\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId1"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Download of database complete"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "160002" {
		# MESSAGE 160002
		# line in RSA: Config <fld82> at <saddr>  '<username>', starting a test access log upload per user request for log <event_log>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Config[\s]+(?<fld82>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+'(?<username>[^']*)',[\s]+starting[\s]+a[\s]+test[\s]+access[\s]+log[\s]+upload[\s]+per[\s]+user[\s]+request[\s]+for[\s]+log[\s]+(?<event_log>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-160002"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Starting a test access log upload per user request for log."
					"[event][id]" => "160002"
					"[rsa][message][id1]" => "160002"
					"[event][categoryid]" => "1401040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 160002:01
		# line in RSA: Config <fld82> at <saddr> '<username>', <filter>: <info>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Config[\s]+(?<fld82>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+'(?<username>[^']*)',[\s]+(?<filter>[^:]*):[\s]+(?<info>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-160002:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "160002:01"
					"[rsa][message][id1]" => "160002:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 160002:02
		# line in RSA: {Config|SSH} <fld82> at <saddr> '<username>', <info>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Config|SSH)[\s]+(?<fld82>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+'(?<username>[^']*)',[\s]+(?<info>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-160002:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "160002:02"
					"[rsa][message][id1]" => "160002:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 160002:03
		# line in RSA: Deleted ca-certificate '<cert_subject>' as part of restore-defaults(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Deleted[\s]+ca\-certificate[\s]+'(?<cert_subject>[^']*)'[\s]+as[\s]+part[\s]+of[\s]+restore\-defaults\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-160002:03"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Deleted ca-certificate."
					"[event][id]" => "160002:03"
					"[rsa][message][id1]" => "160002:03"
					"[event][categoryid]" => "1701030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: LDAP: Authentication failed from <daddr>: no such user in realm '<username>'(<fld82>) <event_type> { ..//../<filename> | ../<filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^LDAP:[\s]+Authentication[\s]+failed[\s]+from[\s]+(?<daddr>[^:]*):[\s]+no[\s]+such[\s]+user[\s]+in[\s]+realm[\s]+'(?<username>[^']*)'\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\.//\.\./(?<filename>[^\s]*)[\s]+|[\s]*\.\./(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId6"
			add_field => {
				"event_time_string" => "%{htime}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "140002" {
		# MESSAGE 140002:04
		# line in RSA: {Config|SSH} <fld82> at <saddr> '<username>', deleted user '<c_username>' in local user list '<listnum>'(<fld81>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Config|SSH)[\s]+(?<fld82>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+'(?<username>[^']*)',[\s]+deleted[\s]+user[\s]+'(?<c_username>[^']*)'[\s]+in[\s]+local[\s]+user[\s]+list[\s]+'(?<listnum>[^']*)'\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
				id => "message-140002:04"
				add_field => {
				"event_description" => "deleted user"
					"[event][id]" => "140002:04"
					"[rsa][message][id1]" => "140002:04"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 140002:05
		# line in RSA: {Config|SSH} <fld82> at <saddr> '<username>', added user '<c_username>' to local user list '<listnum>'(<fld81>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Config|SSH)[\s]+(?<fld82>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+'(?<username>[^']*)',[\s]+added[\s]+user[\s]+'(?<c_username>[^']*)'[\s]+to[\s]+local[\s]+user[\s]+list[\s]+'(?<listnum>[^']*)'\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
				id => "message-140002:05"
				add_field => {
				"event_description" => "added user"
					"[event][id]" => "140002:05"
					"[rsa][message][id1]" => "140002:05"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 140002:06
		# line in RSA: {Config|SSH} <fld82> at <saddr> '<username>', changed password for user '<c_username>' in local user list '<listnum>'(<fld81>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Config|SSH)[\s]+(?<fld82>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+'(?<username>[^']*)',[\s]+changed[\s]+password[\s]+for[\s]+user[\s]+'(?<c_username>[^']*)'[\s]+in[\s]+local[\s]+user[\s]+list[\s]+'(?<listnum>[^']*)'\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
				id => "message-140002:06"
				add_field => {
				"event_description" => "changed password for user"
					"[event][id]" => "140002:06"
					"[rsa][message][id1]" => "140002:06"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 140002
		# line in RSA: {Config|SSH} <fld82> at <saddr> '<username>',{<info>(<fld1>).(<fld81>)|<info>(<fld81>)} <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Config|SSH)[\s]+(?<fld82>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+'(?<username>[^']*)',((?<info>[^\(]*)\((?<fld1>[^\)]*)\)\.\((?<fld81>[^\)]*)\)|(?<info>[^\(]*)\((?<fld81>[^\)]*)\))[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
				id => "message-140002"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "140002"
					"[rsa][message][id1]" => "140002"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 140002:01
		# line in RSA: CFSSL: Automatic update (iteration# <fld32>) of trust package initiated(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^CFSSL:[\s]+Automatic[\s]+update[\s]+\(iteration#[\s]+(?<fld32>[^\)]*)\)[\s]+of[\s]+trust[\s]+package[\s]+initiated\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-140002:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "140002:01"
					"[rsa][message][id1]" => "140002:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 140002:02
		# line in RSA: CFSSL: Trust package installation done - response: <fld41>, CA added: <fld42>, deleted: <fld43>, updated: <fld44>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^CFSSL:[\s]+Trust[\s]+package[\s]+installation[\s]+done[\s]+\-[\s]+response:[\s]+(?<fld41>[^,]*),[\s]+CA[\s]+added:[\s]+(?<fld42>[^,]*),[\s]+deleted:[\s]+(?<fld43>[^,]*),[\s]+updated:[\s]+(?<fld44>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-140002:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "140002:02"
					"[rsa][message][id1]" => "140002:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 140002:03
		# line in RSA: Cached intermediate certificate '<cert_subject>(<cert_checksum>)'(<fld1>) <event_type> <filename> <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cached intermediate certificate '%{cert_subject}(%{cert_checksum})'(%{fld1}) %{event_type} %{filename} %{fld2}" }
				id => "message-140002:03"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Cached intermediate certificate"
					"[event][id]" => "140002:03"
					"[rsa][message][id1]" => "140002:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "260017" {
		# MESSAGE 260017
		# line in RSA: Authentication failed from <daddr>: user { \'<username>\' | '<username>' } (<fld83>)(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication[\s]+failed[\s]+from[\s]+(?<daddr>[^:]*):[\s]+user[\s]+([\s]*\\'(?<username>[^\\]*)\\'[\s]+|[\s]*'(?<username>[^']*)'[\s]+)[\s]+\((?<fld83>[^\)]*)\)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-260017"
				add_field => {
				"event_time_string" => "%{htime}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "260017"
					"[rsa][message][id1]" => "260017"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 260017:01
		# line in RSA:  Enable password authentication from <daddr> failed for user { \'<username>\' | '<username>' } (<fld83>)<event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Enable[\s]+password[\s]+authentication[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+failed[\s]+for[\s]+user[\s]+([\s]*\\'(?<username>[^\\]*)\\'[\s]+|[\s]*'(?<username>[^']*)'[\s]+)[\s]+\((?<fld83>[^\)]*)\)(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-260017:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "260017:01"
					"[rsa][message][id1]" => "260017:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 260017:02
		# line in RSA: Authentication failed from <daddr>: unable to decode user's Basic credentials(<fld82>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication failed from %{daddr}: unable to decode user's Basic credentials(%{fld82}) %{event_type} %{filename} %{fld80}" }
				id => "message-260017:02"
				add_field => {
				"event_time_string" => "%{htime}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "260017:02"
					"[rsa][message][id1]" => "260017:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId14
	# line in RSA: Administrator login from <saddr>, user { '<username>' | \'<username>\' } (<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId14" {
		grok {
			match => { "message" => "^Administrator[\s]+login[\s]+from[\s]+(?<saddr>[^,]*),[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\\'(?<username>[^\\]*)\\'[\s]+)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId14"
			add_field => {
				"event_time_string" => "%{htime}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Administrator login."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA: Administrator login from <saddr>, user { '<username>' | \'<username>\' } (<fld81>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId15" {
		grok {
			match => { "message" => "^Administrator[\s]+login[\s]+from[\s]+(?<saddr>[^,]*),[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\\'(?<username>[^\\]*)\\'[\s]+)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
			id => "msgParserId15"
			add_field => {
				"event_time_string" => "%{htime}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Administrator login."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA: Read/write mode entered from <saddr> for user { '<username>' | \'<username>\' }(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId16" {
		grok {
			match => { "message" => "^Read/write[\s]+mode[\s]+entered[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\\'(?<username>[^\\]*)\\'[\s]+)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId16"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Read/write mode entered."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA: Read/write mode entered from <saddr> for user { '<username>' | \'<username>\' }(<fld81>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId17" {
		grok {
			match => { "message" => "^Read/write[\s]+mode[\s]+entered[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\\'(?<username>[^\\]*)\\'[\s]+)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
			id => "msgParserId17"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Read/write mode entered."
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "26002D" {
		# MESSAGE 26002D
		# line in RSA: Realm { \"<group_object>\" | "<group_object>" }, server <saddr>: Authentication server is online.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Realm[\s]+([\s]*\\\"(?<group_object>[^\\]*)\\\"[\s]+|[\s]*\"(?<group_object>[^\"]*)\"[\s]+),[\s]+server[\s]+(?<saddr>[^:]*):[\s]+Authentication[\s]+server[\s]+is[\s]+online\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-26002D"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "26002D"
					"[rsa][message][id1]" => "26002D"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 26002D:01
		# line in RSA: LDAP: Server '<saddr>' in realm '<group_object>' is online.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^LDAP:[\s]+Server[\s]+'(?<saddr>[^']*)'[\s]+in[\s]+realm[\s]+'(?<group_object>[^']*)'[\s]+is[\s]+online\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-26002D:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "26002D:01"
					"[rsa][message][id1]" => "26002D:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 26002D:02
		# line in RSA: Realm { \"<group_object>\" | "<group_object>" }, server <saddr>: Authentication server has failed or is offline.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Realm[\s]+([\s]*\\\"(?<group_object>[^\\]*)\\\"[\s]+|[\s]*\"(?<group_object>[^\"]*)\"[\s]+),[\s]+server[\s]+(?<saddr>[^:]*):[\s]+Authentication[\s]+server[\s]+has[\s]+failed[\s]+or[\s]+is[\s]+offline\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-26002D:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "26002D:02"
					"[rsa][message][id1]" => "26002D:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA:  <event_description>: "<result>" "<fld80>"(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId21" {
		grok {
			match => { "message" => "^[\s]*(?<event_description>[^:]*):[\s]+\"(?<result>[^\"]*)\"[\s]+\"(?<fld80>[^\"]*)\"\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId21"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "2D0006" {
		# MESSAGE 2D0006
		# line in RSA: Snapshot <fld1> has fetched <info>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Snapshot[\s]+(?<fld1>[^\s]*)[\s]+has[\s]+fetched[\s]+(?<info>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-2D0006"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Snapshot has fetched."
					"[event][id]" => "2D0006"
					"[rsa][message][id1]" => "2D0006"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 2D0006:01
		# line in RSA: Stats Worker: received status Socket connect error during HTTPS put operation(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Stats[\s]+Worker:[\s]+received[\s]+status[\s]+Socket[\s]+connect[\s]+error[\s]+during[\s]+HTTPS[\s]+put[\s]+operation\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-2D0006:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "eceived status Socket connect error during HTTPS put operation"
					"[event][id]" => "2D0006:01"
					"[rsa][message][id1]" => "2D0006:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 2D0006:02
		# line in RSA: Stats Worker: couldn't send report ProxySG Appliance Summary Statistics through HTTPS to Blue Coat(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Stats[\s]+Worker:[\s]+couldn't[\s]+send[\s]+report[\s]+ProxySG[\s]+Appliance[\s]+Summary[\s]+Statistics[\s]+through[\s]+HTTPS[\s]+to[\s]+Blue[\s]+Coat\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-2D0006:02"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "couldn't send report ProxySG Appliance Summary Statistics through HTTPS to Blue Coat"
					"[event][id]" => "2D0006:02"
					"[rsa][message][id1]" => "2D0006:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId25
	# line in RSA: Snapshot <fld1> has fetched <info>(<fld81>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "Snapshot %{fld1} has fetched %{info}(%{fld81}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId25"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Snapshot has fetched."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId26
	# line in RSA: <event_description>{:(|(}<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId26" {
		grok {
			match => { "message" => "^(?<event_description>[^:\(]*)(:\(|\()(?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId26"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "3B0003" {
		# MESSAGE 3B0003
		# line in RSA: Health check \'<hostname>\' changed from: <change_old>, to: <change_new>, and has become sick. Status: <result>.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+check[\s]+\\'(?<hostname>[^\\]*)\\'[\s]+changed[\s]+from:[\s]+(?<change_old>[^,]*),[\s]+to:[\s]+(?<change_new>[^,]*),[\s]+and[\s]+has[\s]+become[\s]+sick\.[\s]+Status:[\s]+(?<result>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-3B0003"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3B0003"
					"[rsa][message][id1]" => "3B0003"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3B0003:01
		# line in RSA: Health check \'<hostname>\' changed from: <change_old>, to: <change_new>, and has become useable. Status: <result>.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+check[\s]+\\'(?<hostname>[^\\]*)\\'[\s]+changed[\s]+from:[\s]+(?<change_old>[^,]*),[\s]+to:[\s]+(?<change_new>[^,]*),[\s]+and[\s]+has[\s]+become[\s]+useable\.[\s]+Status:[\s]+(?<result>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-3B0003:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3B0003:01"
					"[rsa][message][id1]" => "3B0003:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3B0003:02
		# line in RSA: Unexpected transaction termination: <result>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Unexpected[\s]+transaction[\s]+termination:[\s]+(?<result>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-3B0003:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3B0003:02"
					"[rsa][message][id1]" => "3B0003:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId28
	# line in RSA: ISTag for <username> changed from "<change_old>" to "<change_new>".(<fld81>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "ISTag for %{username} changed from \"%{change_old}\" to \"%{change_new}\".(%{fld81}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId28"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId29
	# line in RSA: ISTag for <fld82> changed from "<change_old>" to "<change_new>".(<fld81>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "ISTag for %{fld82} changed from \"%{change_old}\" to \"%{change_new}\".(%{fld81}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId29"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "3A0003" {
		# MESSAGE 3A0003
		# line in RSA: Health check '<hostname>' changed from: <change_old>, to: <change_new>, and has become useable. Status: <result>.<space>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+check[\s]+'(?<hostname>[^']*)'[\s]+changed[\s]+from:[\s]+(?<change_old>[^,]*),[\s]+to:[\s]+(?<change_new>[^,]*),[\s]+and[\s]+has[\s]+become[\s]+useable\.[\s]+Status:[\s]+(?<result>[^\.]*)\.(?<space>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-3A0003"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3A0003"
					"[rsa][message][id1]" => "3A0003"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3A0003:01
		# line in RSA: Health check '<hostname>' changed from: <change_old>, to: <change_new>, and has become sick. Status: <result>.<space>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+check[\s]+'(?<hostname>[^']*)'[\s]+changed[\s]+from:[\s]+(?<change_old>[^,]*),[\s]+to:[\s]+(?<change_new>[^,]*),[\s]+and[\s]+has[\s]+become[\s]+sick\.[\s]+Status:[\s]+(?<result>[^\.]*)\.(?<space>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-3A0003:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3A0003:01"
					"[rsa][message][id1]" => "3A0003:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "3C0002" {
		# MESSAGE 3C0002
		# line in RSA: Test Description.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Test[\s]+Description\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-3C0002"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3C0002"
					"[rsa][message][id1]" => "3C0002"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3C0002:02
		# line in RSA: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-3C0002:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3C0002:02"
					"[rsa][message][id1]" => "3C0002:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "3C0003" {
		# MESSAGE 3C0003
		# line in RSA:  Unexpected transaction termination: <info>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Unexpected[\s]+transaction[\s]+termination:[\s]+(?<info>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-3C0003"
				add_field => {
				"event_time_string" => "%{htime}"
				"result" => "Unexpected transaction termination"
					"[event][id]" => "3C0003"
					"[rsa][message][id1]" => "3C0003"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3C0003:01
		# line in RSA:  Authentication agent rejected request <info>.(<fld81>) <event_type> ..//<fld78>/<filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication agent rejected request %{info}.(%{fld81}) %{event_type} ..//%{fld78}/%{filename} %{fld80}" }
				id => "message-3C0003:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"result" => "Authentication agent rejected request"
					"[event][id]" => "3C0003:01"
					"[rsa][message][id1]" => "3C0003:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3C0003:02
		# line in RSA:  The authentication agent could not decode the provided credentials.(<fld81>) <event_type> ..//<fld78>/<filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The authentication agent could not decode the provided credentials.(%{fld81}) %{event_type} ..//%{fld78}/%{filename} %{fld80}" }
				id => "message-3C0003:02"
				add_field => {
				"event_time_string" => "%{htime}"
				"result" => "The authentication agent could not decode the provided credentials."
					"[event][id]" => "3C0003:02"
					"[rsa][message][id1]" => "3C0003:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: Virus warning! The ICAP service '<service>' detected '<virusname>' while accessing <url>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId39" {
		grok {
			match => { "message" => "^Virus[\s]+warning![\s]+The[\s]+ICAP[\s]+service[\s]+'(?<service>[^']*)'[\s]+detected[\s]+'(?<virusname>[^']*)'[\s]+while[\s]+accessing[\s]+(?<url>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId39"
			add_field => {
				"event_time_string" => "%{htime}"
				"result" => "Virus warning!"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA: DNS lookup to <daddr> for <dhost> timed out.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId40" {
		grok {
			match => { "message" => "^DNS[\s]+lookup[\s]+to[\s]+(?<daddr>[^\s]*)[\s]+for[\s]+(?<dhost>[^\s]*)[\s]+timed[\s]+out\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId40"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "DNS lookup timed out"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA: DNS service restored after <info>.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId41" {
		grok {
			match => { "message" => "^DNS[\s]+service[\s]+restored[\s]+after[\s]+(?<info>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId41"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId42
	# line in RSA: DNS lookup to <daddr> for <dhost> rejected by server.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId42" {
		grok {
			match => { "message" => "^DNS[\s]+lookup[\s]+to[\s]+(?<daddr>[^\s]*)[\s]+for[\s]+(?<dhost>[^\s]*)[\s]+rejected[\s]+by[\s]+server\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId42"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "DNS lookup rejected by server."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId43
	# line in RSA:  <obj_type> on disk\'s <obj_name> modify queue for <result>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId43" {
		grok {
			match => { "message" => "^[\s]*(?<obj_type>[^\s]*)[\s]+on[\s]+disk\\'s[\s]+(?<obj_name>[^\s]*)[\s]+modify[\s]+queue[\s]+for[\s]+(?<result>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId43"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "record on disk modify queue for 1too long"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId44
	# line in RSA: Logout[<group_object>]ERR:<event_description>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId44" {
		grok {
			match => { "message" => "^Logout\[(?<group_object>[^\]]*)\]ERR:(?<event_description>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId44"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "430001" {
		# MESSAGE 430001
		# line in RSA: The connection was closed to primary authentication agent for realm <group_object> at <daddr>:<dport>:<fld83>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+connection[\s]+was[\s]+closed[\s]+to[\s]+primary[\s]+authentication[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^\s]*)[\s]+at[\s]+(?<daddr>[^:]*):(?<dport>[^:]*):(?<fld83>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-430001"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "430001"
					"[rsa][message][id1]" => "430001"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 430001:01
		# line in RSA: Successfully connected to primary authentication agent for realm <group_object> at <daddr>:<dport>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Successfully[\s]+connected[\s]+to[\s]+primary[\s]+authentication[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^\s]*)[\s]+at[\s]+(?<daddr>[^:]*):(?<dport>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-430001:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "430001:01"
					"[rsa][message][id1]" => "430001:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 430001:02
		# line in RSA: Unable to connect to primary authentication agent for realm <group_object> at <daddr>:<dport>: connect failed(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Unable[\s]+to[\s]+connect[\s]+to[\s]+primary[\s]+authentication[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^\s]*)[\s]+at[\s]+(?<daddr>[^:]*):(?<dport>[^:]*):[\s]+connect[\s]+failed\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-430001:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "430001:02"
					"[rsa][message][id1]" => "430001:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 430001:03
		# line in RSA: Could not send request data to agent for realm <group_object>, result=<result> error=<resultcode>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Could[\s]+not[\s]+send[\s]+request[\s]+data[\s]+to[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^,]*),[\s]+result=(?<result>[^\s]*)[\s]+error=(?<resultcode>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-430001:03"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "430001:03"
					"[rsa][message][id1]" => "430001:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 430001:04
		# line in RSA: Could not send request to agent for realm <group_object>, result=<result> error=<resultcode>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Could[\s]+not[\s]+send[\s]+request[\s]+to[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^,]*),[\s]+result=(?<result>[^\s]*)[\s]+error=(?<resultcode>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-430001:04"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "430001:04"
					"[rsa][message][id1]" => "430001:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 430001:05
		# line in RSA:  Error receiving data from the authentication agent for realm <group_object>, error=<resultcode>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Error[\s]+receiving[\s]+data[\s]+from[\s]+the[\s]+authentication[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^,]*),[\s]+error=(?<resultcode>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-430001:05"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Error receiving data from the authentication agent for realm"
					"[event][id]" => "430001:05"
					"[rsa][message][id1]" => "430001:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 430001:06
		# line in RSA: The connection was closed to alternate authentication agent for realm <group_object> at <daddr>:<dport>: <fld79>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+connection[\s]+was[\s]+closed[\s]+to[\s]+alternate[\s]+authentication[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^\s]*)[\s]+at[\s]+(?<daddr>[^:]*):(?<dport>[^:]*):[\s]+(?<fld79>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-430001:06"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "430001:06"
					"[rsa][message][id1]" => "430001:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 430001:07
		# line in RSA: Unable to connect to alternate authentication agent for realm <group_object> at <daddr>:<dport>: <result>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Unable[\s]+to[\s]+connect[\s]+to[\s]+alternate[\s]+authentication[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^\s]*)[\s]+at[\s]+(?<daddr>[^:]*):(?<dport>[^:]*):[\s]+(?<result>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-430001:07"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "430001:07"
					"[rsa][message][id1]" => "430001:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "420001" {
		# MESSAGE 420001:01
		# line in RSA: {The connection was closed|Successfully connected} to primary authentication agent for realm <group_object> at <daddr>:<dport>:<fld83>(<fld82>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(The[\s]+connection[\s]+was[\s]+closed|Successfully[\s]+connected)[\s]+to[\s]+primary[\s]+authentication[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^\s]*)[\s]+at[\s]+(?<daddr>[^:]*):(?<dport>[^:]*):(?<fld83>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
				id => "message-420001:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "420001:01"
					"[rsa][message][id1]" => "420001:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 420001
		# line in RSA: {The connection was closed|Successfully connected} to primary authentication agent for realm <group_object> at <daddr>:<dport>(<fld82>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(The[\s]+connection[\s]+was[\s]+closed|Successfully[\s]+connected)[\s]+to[\s]+primary[\s]+authentication[\s]+agent[\s]+for[\s]+realm[\s]+(?<group_object>[^\s]*)[\s]+at[\s]+(?<daddr>[^:]*):(?<dport>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
				id => "message-420001"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "420001"
					"[rsa][message][id1]" => "420001"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 420001:02
		# line in RSA: {Could not send request data to agent|Could not send request to agent} for realm <group_object>, result=<result> error=<resultcode>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Could[\s]+not[\s]+send[\s]+request[\s]+data[\s]+to[\s]+agent|Could[\s]+not[\s]+send[\s]+request[\s]+to[\s]+agent)[\s]+for[\s]+realm[\s]+(?<group_object>[^,]*),[\s]+result=(?<result>[^\s]*)[\s]+error=(?<resultcode>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-420001:02"
				add_field => {
					"[event][id]" => "420001:02"
					"[rsa][message][id1]" => "420001:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId50
	# line in RSA: Deferred ICAP: abandoning object exceeded max cache size, src="<saddr>"; url="<url>"(<fld82>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId50" {
		dissect {
			mapping => { "message" => "Deferred ICAP: abandoning object exceeded max cache size, src=\"%{saddr}\"; url=\"%{url}\"(%{fld82}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId50"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId51
	# line in RSA: Logout[<group_object>]ERR:<result>(<fld82>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "Logout[%{group_object}]ERR:%{result}(%{fld82}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId51"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA: Bad Host header (<result>) in the request from <saddr>(<fld82>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "Bad Host header (%{result}) in the request from %{saddr}(%{fld82}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId52"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "260023" {
		# MESSAGE 260023:01
		# line in RSA:  LDAP: no such user CN=<username>,<fld2>(<fld3>) <event_type> {../<filename>|<filename>} <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*LDAP:[\s]+no[\s]+such[\s]+user[\s]+CN=(?<username>[^,]*),(?<fld2>[^\(]*)\((?<fld3>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld4>.*)$" }
				id => "message-260023:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "LDAP - No such user"
					"[event][id]" => "260023:01"
					"[rsa][message][id1]" => "260023:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 260023
		# line in RSA:  LDAP: no such user <username>(<fld1>) <event_type> {../<filename>|<filename>} <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*LDAP:[\s]+no[\s]+such[\s]+user[\s]+(?<username>[^\(]*)\((?<fld1>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld2>.*)$" }
				id => "message-260023"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "LDAP - No such user"
					"[event][id]" => "260023"
					"[rsa][message][id1]" => "260023"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId61
	# line in RSA:  Health Monitor (<fld1>): Health Check Status is <fld2>(<fld3>) <event_type> {../<filename>|<filename>} <fld4>
	else if [logstash][msgparser][id] == "msgParserId61" {
		grok {
			match => { "message" => "^[\s]*Health[\s]+Monitor[\s]+\((?<fld1>[^\)]*)\):[\s]+Health[\s]+Check[\s]+Status[\s]+is[\s]+(?<fld2>[^\(]*)\((?<fld3>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld4>.*)$" }
			id => "msgParserId61"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Check health status"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId62
	# line in RSA:  LDAP: invalid credentials: reason: <result> dn: <info> realm: <group_object>(<fld1>) <event_type> {../<filename>|<filename>} <fld4>
	else if [logstash][msgparser][id] == "msgParserId62" {
		grok {
			match => { "message" => "^[\s]*LDAP:[\s]+invalid[\s]+credentials:[\s]+reason:[\s]+(?<result>[^\s]*)[\s]+dn:[\s]+(?<info>[^\s]*)[\s]+realm:[\s]+(?<group_object>[^\(]*)\((?<fld1>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld4>.*)$" }
			id => "msgParserId62"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_time_string" => "%{htime}"
				"event_description" => "Invalid Credentials"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId63
	# line in RSA:  Receive failed due to dropped connection by peer. <info>(<fld3>) <event_type> {../<filename>|<filename>} <fld4>
	else if [logstash][msgparser][id] == "msgParserId63" {
		grok {
			match => { "message" => "^[\s]*Receive[\s]+failed[\s]+due[\s]+to[\s]+dropped[\s]+connection[\s]+by[\s]+peer\.[\s]+(?<info>[^\(]*)\((?<fld3>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld4>.*)$" }
			id => "msgParserId63"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Receive failed due to dropped connection by peer"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId64
	# line in RSA:  Test Description.(<fld2>) <event_type> {../<filename>|<filename>} <fld4>
	else if [logstash][msgparser][id] == "msgParserId64" {
		grok {
			match => { "message" => "^[\s]*Test[\s]+Description\.\((?<fld2>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld4>.*)$" }
			id => "msgParserId64"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Test Description"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "46000C" {
		# MESSAGE 46000C
		# line in RSA: Enabling compatibility mode for protocol <fld81>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Enabling[\s]+compatibility[\s]+mode[\s]+for[\s]+protocol[\s]+(?<fld81>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-46000C"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "46000C"
					"[rsa][message][id1]" => "46000C"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 46000C:01
		# line in RSA: { Accepted password for | Failed none for | Failed publickey for } <fld83> <logon_type>(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Accepted[\s]+password[\s]+for[\s]+|[\s]*Failed[\s]+none[\s]+for[\s]+|[\s]*Failed[\s]+publickey[\s]+for[\s]+)[\s]+(?<fld83>[^\s]*)[\s]+(?<logon_type>[^\(]*)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-46000C:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "46000C:01"
					"[rsa][message][id1]" => "46000C:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 46000C:02
		# line in RSA: Transferred: sent <sbytes>, received <rbytes> bytes(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Transferred:[\s]+sent[\s]+(?<sbytes>[^,]*),[\s]+received[\s]+(?<rbytes>[^\s]*)[\s]+bytes\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-46000C:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "46000C:02"
					"[rsa][message][id1]" => "46000C:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 46000C:03
		# line in RSA: Closing connection to <daddr> port <dport>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Closing[\s]+connection[\s]+to[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-46000C:03"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "46000C:03"
					"[rsa][message][id1]" => "46000C:03"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 46000C:04
		# line in RSA: Connection closed by <saddr>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Connection[\s]+closed[\s]+by[\s]+(?<saddr>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-46000C:04"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "46000C:04"
					"[rsa][message][id1]" => "46000C:04"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 46000C:05
		# line in RSA: Connection from <saddr> port <sport>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Connection[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-46000C:05"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "46000C:05"
					"[rsa][message][id1]" => "46000C:05"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 46000C:06
		# line in RSA:  Received disconnect from <hostip>: <resultcode>: <result>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Received[\s]+disconnect[\s]+from[\s]+(?<hostip>[^:]*):[\s]+(?<resultcode>[^:]*):[\s]+(?<result>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-46000C:06"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Received disconnect from host"
					"[event][id]" => "46000C:06"
					"[rsa][message][id1]" => "46000C:06"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 46000C:07
		# line in RSA:  Did not receive identification string from <daddr>(<fld81>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Did not receive identification string from %{daddr}(%{fld81}) %{event_type} %{filename} %{fld80}" }
				id => "message-46000C:07"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Did not receive identification string"
					"[event][id]" => "46000C:07"
					"[rsa][message][id1]" => "46000C:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 46000C:08
		# line in RSA: Failed password for <fld79> from <daddr> port <dport>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Failed[\s]+password[\s]+for[\s]+(?<fld79>[^\s]*)[\s]+from[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-46000C:08"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "46000C:08"
					"[rsa][message][id1]" => "46000C:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId74
	# line in RSA: Initiating download of SmartFilter database(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId74" {
		grok {
			match => { "message" => "^Initiating[\s]+download[\s]+of[\s]+SmartFilter[\s]+database\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId74"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => " Initiating download of SmartFilter database"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId75
	# line in RSA: Download of <db_name> database failed(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId75" {
		grok {
			match => { "message" => "^Download[\s]+of[\s]+(?<db_name>[^\s]*)[\s]+database[\s]+failed\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId75"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => " Download of database failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId76
	# line in RSA: CFS error: <result>:<fld1>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId76" {
		grok {
			match => { "message" => "^CFS[\s]+error:[\s]+(?<result>[^:]*):(?<fld1>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId76"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "500098" {
		# MESSAGE 500098
		# line in RSA: Download of Blue Coat database failed(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Download[\s]+of[\s]+Blue[\s]+Coat[\s]+database[\s]+failed\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-500098"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => " Download of Blue Coat database failed"
					"[event][id]" => "500098"
					"[rsa][message][id1]" => "500098"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 500098:01
		# line in RSA: Download of IWF database failed(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Download[\s]+of[\s]+IWF[\s]+database[\s]+failed\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-500098:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => " Download of IWF database failed"
					"[event][id]" => "500098:01"
					"[rsa][message][id1]" => "500098:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "3B0002" {
		# MESSAGE 3B0002
		# line in RSA: Admin logged in. <space> User.Cred_name: <username>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Admin[\s]+logged[\s]+in\.[\s]+(?<space>[^\s]*)[\s]+User\.Cred_name:[\s]+(?<username>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-3B0002"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3B0002"
					"[rsa][message][id1]" => "3B0002"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3B0002:01
		# line in RSA: ERROR <result>: <fld31> from <saddr> and as user <username> in realm  <group_object> going to <url> <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ERROR[\s]+(?<result>[^:]*):[\s]+(?<fld31>[^\s]*)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+and[\s]+as[\s]+user[\s]+(?<username>[^\s]*)[\s]+in[\s]+realm[\s]+(?<group_object>[^\s]*)[\s]+going[\s]+to[\s]+(?<url>[^\s]*)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-3B0002:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3B0002:01"
					"[rsa][message][id1]" => "3B0002:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3B0002:02
		# line in RSA: Reinitialized default container.(<fld1>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Reinitialized default container.(%{fld1}) %{event_type} %{filename} %{fld80}" }
				id => "message-3B0002:02"
				add_field => {
					"[event][id]" => "3B0002:02"
					"[rsa][message][id1]" => "3B0002:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "550000" {
		# MESSAGE 550000
		# line in RSA:  Licensing: Load from Blue Coat error (ERROR: <result>. )(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Licensing:[\s]+Load[\s]+from[\s]+Blue[\s]+Coat[\s]+error[\s]+\(ERROR:[\s]+(?<result>[^\.]*)\.[\s]+\)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-550000"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => " Load from Blue Coat error"
					"[event][id]" => "550000"
					"[rsa][message][id1]" => "550000"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 550000:01
		# line in RSA:  Licensing: Initiating auto-update of license-key(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Licensing:[\s]+Initiating[\s]+auto\-update[\s]+of[\s]+license\-key\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-550000:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Initiating auto-update of license-key"
					"[event][id]" => "550000:01"
					"[rsa][message][id1]" => "550000:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 550000:02
		# line in RSA:  Licensing Worker: Socket connect error(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Licensing[\s]+Worker:[\s]+Socket[\s]+connect[\s]+error\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-550000:02"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Socket connect error"
					"[event][id]" => "550000:02"
					"[rsa][message][id1]" => "550000:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 550000:03
		# line in RSA:  Licensing: Trial period already expired on <info>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Licensing:[\s]+Trial[\s]+period[\s]+already[\s]+expired[\s]+on[\s]+(?<info>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-550000:03"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Licensing: Trial period already expired"
					"[event][id]" => "550000:03"
					"[rsa][message][id1]" => "550000:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 550000:04
		# line in RSA:  Licensing: License key successfully applied(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Licensing:[\s]+License[\s]+key[\s]+successfully[\s]+applied\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-550000:04"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Licensing: License key successfully applied"
					"[event][id]" => "550000:04"
					"[rsa][message][id1]" => "550000:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId85
	# line in RSA: Management Console <fld82> at <saddr> { '<username>' | <username> }, <info>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId85" {
		grok {
			match => { "message" => "^Management[\s]+Console[\s]+(?<fld82>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+(?<info>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId85"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "60006" {
		# MESSAGE 60006
		# line in RSA: A new central bypass list file is available for installation(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^A[\s]+new[\s]+central[\s]+bypass[\s]+list[\s]+file[\s]+is[\s]+available[\s]+for[\s]+installation\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-60006"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => " A new central bypass list file is available for installation"
					"[event][id]" => "60006"
					"[rsa][message][id1]" => "60006"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 60006:01
		# line in RSA: New central policy file has been downloaded and installed(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^New[\s]+central[\s]+policy[\s]+file[\s]+has[\s]+been[\s]+downloaded[\s]+and[\s]+installed\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-60006:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => " New central policy file has been downloaded and installed"
					"[event][id]" => "60006:01"
					"[rsa][message][id1]" => "60006:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "6F0100" {
		# MESSAGE 6F0100
		# line in RSA: Health Monitor (<severity>): Health Check Status is { \'<fld82>\' | '<fld82>' } (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+Health[\s]+Check[\s]+Status[\s]+is[\s]+([\s]*\\'(?<fld82>[^\\]*)\\'[\s]+|[\s]*'(?<fld82>[^']*)'[\s]+)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0100"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0100"
					"[rsa][message][id1]" => "6F0100"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 6F0100:02
		# line in RSA: Health Monitor (<severity>): AC Power supply <fld83> { \'<fld82>\' | '<fld82>' } (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+AC[\s]+Power[\s]+supply[\s]+(?<fld83>[^\s]*)[\s]+([\s]*\\'(?<fld82>[^\\]*)\\'[\s]+|[\s]*'(?<fld82>[^']*)'[\s]+)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0100:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0100:02"
					"[rsa][message][id1]" => "6F0100:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 6F0100:01
		# line in RSA:  Health Monitor (<severity>): { Memory | CPU } Utilization below <result>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+([\s]*Memory[\s]+|[\s]*CPU[\s]+)[\s]+Utilization[\s]+below[\s]+(?<result>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-6F0100:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Memory/CPU Utilization below acceptable limit"
					"[event][id]" => "6F0100:01"
					"[rsa][message][id1]" => "6F0100:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 6F0100:03
		# line in RSA: Health Monitor (<severity>): Power supply <fld83> status is { \'<fld82>\' | '<fld82>' } (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+Power[\s]+supply[\s]+(?<fld83>[^\s]*)[\s]+status[\s]+is[\s]+([\s]*\\'(?<fld82>[^\\]*)\\'[\s]+|[\s]*'(?<fld82>[^']*)'[\s]+)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0100:03"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0100:03"
					"[rsa][message][id1]" => "6F0100:03"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "6F0102" {
		# MESSAGE 6F0102
		# line in RSA: Health Monitor (<severity>): AC Power supply <fld83> { \'<fld82>\' | '<fld82>' } (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+AC[\s]+Power[\s]+supply[\s]+(?<fld83>[^\s]*)[\s]+([\s]*\\'(?<fld82>[^\\]*)\\'[\s]+|[\s]*'(?<fld82>[^']*)'[\s]+)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0102"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0102"
					"[rsa][message][id1]" => "6F0102"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 6F0102:01
		# line in RSA: Health Monitor (<severity>): Interface <fld34> Utilization { above | below } <fld35> percent for last <fld36> seconds(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+Interface[\s]+(?<fld34>[^\s]*)[\s]+Utilization[\s]+([\s]*above[\s]+|[\s]*below[\s]+)[\s]+(?<fld35>[^\s]*)[\s]+percent[\s]+for[\s]+last[\s]+(?<fld36>[^\s]*)[\s]+seconds\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0102:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0102:01"
					"[rsa][message][id1]" => "6F0102:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 6F0102:02
		# line in RSA: Health Monitor (<severity>): Health Check Status is '<fld41>'(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+Health[\s]+Check[\s]+Status[\s]+is[\s]+'(?<fld41>[^']*)'\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0102:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0102:02"
					"[rsa][message][id1]" => "6F0102:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "6F0101" {
		# MESSAGE 6F0101:03
		# line in RSA: Health Monitor (<severity>): Interface <fld34> Utilization { above | below } <fld35> percent for last <fld36> seconds(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+Interface[\s]+(?<fld34>[^\s]*)[\s]+Utilization[\s]+([\s]*above[\s]+|[\s]*below[\s]+)[\s]+(?<fld35>[^\s]*)[\s]+percent[\s]+for[\s]+last[\s]+(?<fld36>[^\s]*)[\s]+seconds\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0101:03"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0101:03"
					"[rsa][message][id1]" => "6F0101:03"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 6F0101
		# line in RSA:  Health Monitor (<severity>): Health Check Status is { \'<fld82>\' | '<fld82>' } (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+Health[\s]+Check[\s]+Status[\s]+is[\s]+([\s]*\\'(?<fld82>[^\\]*)\\'[\s]+|[\s]*'(?<fld82>[^']*)'[\s]+)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0101"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0101"
					"[rsa][message][id1]" => "6F0101"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 6F0101:01
		# line in RSA:  Health Monitor (<severity>): { Memory | CPU } Utilization above <result>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+([\s]*Memory[\s]+|[\s]*CPU[\s]+)[\s]+Utilization[\s]+above[\s]+(?<result>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-6F0101:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Memory?CPU Utilization above acceptable limit"
					"[event][id]" => "6F0101:01"
					"[rsa][message][id1]" => "6F0101:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 6F0101:02
		# line in RSA: Health Monitor (<severity>): Power supply <fld83> status is { \'<fld82>\' | '<fld82>' } (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Health[\s]+Monitor[\s]+\((?<severity>[^\)]*)\):[\s]+Power[\s]+supply[\s]+(?<fld83>[^\s]*)[\s]+status[\s]+is[\s]+([\s]*\\'(?<fld82>[^\\]*)\\'[\s]+|[\s]*'(?<fld82>[^']*)'[\s]+)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-6F0101:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "6F0101:02"
					"[rsa][message][id1]" => "6F0101:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId96
	# line in RSA: REG: File_target::create returned error <resultcode> (<fld81>). (<fld82>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId96" {
		grok {
			match => { "message" => "^REG:[\s]+File_target::create[\s]+returned[\s]+error[\s]+(?<resultcode>[^\s]*)[\s]+\((?<fld81>[^\)]*)\)\.[\s]+\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId96"
			add_field => {
				"event_time_string" => "%{htime}"
				"result" => "create returned error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId97
	# line in RSA: NULL character found in the request { line | header } from <saddr>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId97" {
		grok {
			match => { "message" => "^NULL[\s]+character[\s]+found[\s]+in[\s]+the[\s]+request[\s]+([\s]*line[\s]+|[\s]*header[\s]+)[\s]+from[\s]+(?<saddr>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId97"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "NULL character found in the request line or header"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "90000" {
		# MESSAGE 90000
		# line in RSA: NTP: DNS error looking up address of NTP server: <dhost>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NTP:[\s]+DNS[\s]+error[\s]+looking[\s]+up[\s]+address[\s]+of[\s]+NTP[\s]+server:[\s]+(?<dhost>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-90000"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "DNS error looking up address of NTP server."
					"[event][id]" => "90000"
					"[rsa][message][id1]" => "90000"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 90000:01
		# line in RSA: NTP: Tried all configured servers. Unable to obtain NTP update due to NTP server errors.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NTP:[\s]+Tried[\s]+all[\s]+configured[\s]+servers\.[\s]+Unable[\s]+to[\s]+obtain[\s]+NTP[\s]+update[\s]+due[\s]+to[\s]+NTP[\s]+server[\s]+errors\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-90000:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Tried all configured servers. Unable to obtain NTP update due to NTP server errors"
					"[event][id]" => "90000:01"
					"[rsa][message][id1]" => "90000:01"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 90000:02
		# line in RSA:  NTP: Periodic query of server <hostip>, time within acceptable variance, <resultcode> seconds, <fld3> ms { fast | slow } compared to NTP time.(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*NTP:[\s]+Periodic[\s]+query[\s]+of[\s]+server[\s]+(?<hostip>[^,]*),[\s]+time[\s]+within[\s]+acceptable[\s]+variance,[\s]+(?<resultcode>[^\s]*)[\s]+seconds,[\s]+(?<fld3>[^\s]*)[\s]+ms[\s]+([\s]*fast[\s]+|[\s]*slow[\s]+)[\s]+compared[\s]+to[\s]+NTP[\s]+time\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-90000:02"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Periodic query of server "
					"[event][id]" => "90000:02"
					"[rsa][message][id1]" => "90000:02"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 90000:04
		# line in RSA: NTP: Periodic query of server <hostip>, <result>. Updated system clock.(<fld81>) <event_type> ../<filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NTP: Periodic query of server %{hostip}, %{result}. Updated system clock.(%{fld81}) %{event_type} ../%{filename} %{fld80}" }
				id => "message-90000:04"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Periodic query of server "
					"[event][id]" => "90000:04"
					"[rsa][message][id1]" => "90000:04"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 90000:06
		# line in RSA: NTP: Periodic query of server <hostip>, system clock is <fld82> seconds <fld83> ms { slow | fast } compared to NTP time. Updated system clock.(<fld81>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NTP:[\s]+Periodic[\s]+query[\s]+of[\s]+server[\s]+(?<hostip>[^,]*),[\s]+system[\s]+clock[\s]+is[\s]+(?<fld82>[^\s]*)[\s]+seconds[\s]+(?<fld83>[^\s]*)[\s]+ms[\s]+([\s]*slow[\s]+|[\s]*fast[\s]+)[\s]+compared[\s]+to[\s]+NTP[\s]+time\.[\s]+Updated[\s]+system[\s]+clock\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld80>.*)$" }
				id => "message-90000:06"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Periodic query of server "
					"[event][id]" => "90000:06"
					"[rsa][message][id1]" => "90000:06"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 90000:05
		# line in RSA:  NTP: Periodic query of server <hostip>, time matches system clock.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*NTP:[\s]+Periodic[\s]+query[\s]+of[\s]+server[\s]+(?<hostip>[^,]*),[\s]+time[\s]+matches[\s]+system[\s]+clock\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-90000:05"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Periodic query of server "
				"result" => "time matches system clock."
					"[event][id]" => "90000:05"
					"[rsa][message][id1]" => "90000:05"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 90000:03
		# line in RSA: NTP: Receive timeout, retrying NTP Server: <hostip>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NTP:[\s]+Receive[\s]+timeout,[\s]+retrying[\s]+NTP[\s]+Server:[\s]+(?<hostip>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-90000:03"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Receive timeout, retrying NTP Server"
					"[event][id]" => "90000:03"
					"[rsa][message][id1]" => "90000:03"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "A0000" {
		# MESSAGE A0000
		# line in RSA: SMTP_worker: Error connecting to mail gateway <gateway>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SMTP_worker:[\s]+Error[\s]+connecting[\s]+to[\s]+mail[\s]+gateway[\s]+(?<gateway>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-A0000"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "A0000"
					"[rsa][message][id1]" => "A0000"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE A0000:01
		# line in RSA: SMTP_worker: Error <fld50> sending from.<gateway>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SMTP_worker:[\s]+Error[\s]+(?<fld50>[^\s]*)[\s]+sending[\s]+from\.(?<gateway>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-A0000:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "A0000:01"
					"[rsa][message][id1]" => "A0000:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE A0000:02
		# line in RSA: SMTP: No gateway configured -- could not send e-mail notification(<fld25>) <event_type> {../<filename> | <filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SMTP:[\s]+No[\s]+gateway[\s]+configured[\s]+\-\-[\s]+could[\s]+not[\s]+send[\s]+e\-mail[\s]+notification\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-A0000:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "A0000:02"
					"[rsa][message][id1]" => "A0000:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "540000" {
		# MESSAGE 540000
		# line in RSA: Licensing: Initiating auto-update of license-key(<fld25>) <event_type> {../<filename> | <filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Licensing:[\s]+Initiating[\s]+auto\-update[\s]+of[\s]+license\-key\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-540000"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "540000"
					"[rsa][message][id1]" => "540000"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 540000:01
		# line in RSA: Licensing: Load from Blue Coat error (ERROR: <result> )(<fld25>) <event_type> {../<filename> | <filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Licensing:[\s]+Load[\s]+from[\s]+Blue[\s]+Coat[\s]+error[\s]+\(ERROR:[\s]+(?<result>[^\s]*)[\s]+\)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-540000:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "540000:01"
					"[rsa][message][id1]" => "540000:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 540000:02
		# line in RSA: Licensing: committing license: <fld1>(<fld2>), state = (<severity>)(<fld3>) <event_type> <filename> <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Licensing: committing license: %{fld1}(%{fld2}), state = (%{severity})(%{fld3}) %{event_type} %{filename} %{fld4}" }
				id => "message-540000:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "540000:02"
					"[rsa][message][id1]" => "540000:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "E0000" {
		# MESSAGE E0000
		# line in RSA: Access Log FTP (<event_log>): USER <username>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+USER[\s]+(?<username>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E0000"
					"[rsa][message][id1]" => "E0000"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:01
		# line in RSA: Access Log FTP (<event_log>): { TYPE I | QUIT | PASV | PASS <fld85> }(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+([\s]*TYPE[\s]+I[\s]+|[\s]*QUIT[\s]+|[\s]*PASV[\s]+|[\s]*PASS[\s]+(?<fld85>[^\s]*)[\s]+)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E0000:01"
					"[rsa][message][id1]" => "E0000:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:02
		# line in RSA: Access Log FTP (<event_log>): STOR <filename>(<fld81>) <event_type> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Access Log FTP (%{event_log}): STOR %{filename}(%{fld81}) %{event_type} %{fld80}" }
				id => "message-E0000:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E0000:02"
					"[rsa][message][id1]" => "E0000:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:03
		# line in RSA: Access Log FTP (<event_log>): Creating data socket to <daddr>:<dport>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Creating[\s]+data[\s]+socket[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000:03"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Creating data socket."
					"[event][id]" => "E0000:03"
					"[rsa][message][id1]" => "E0000:03"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:04
		# line in RSA: Access Log FTP (<event_log>): Connecting to primary <daddr> server <dhost>:<dport>.(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Connecting[\s]+to[\s]+primary[\s]+(?<daddr>[^\s]*)[\s]+server[\s]+(?<dhost>[^:]*):(?<dport>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-E0000:04"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Connecting to primary host."
					"[event][id]" => "E0000:04"
					"[rsa][message][id1]" => "E0000:04"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:05
		# line in RSA: Access Log FTP (<event_log>): <resultcode> User <username> logged in.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+(?<resultcode>[^\s]*)[\s]+User[\s]+(?<username>[^\s]*)[\s]+logged[\s]+in\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000:05"
				add_field => {
				"event_time_string" => "%{htime}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "User logged in."
					"[event][id]" => "E0000:05"
					"[rsa][message][id1]" => "E0000:05"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:06
		# line in RSA: Access Log FTP (<event_log>):Test Upload: <info> upload request failed. There is an upload in progress.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):Test[\s]+Upload:[\s]+(?<info>[^\s]*)[\s]+upload[\s]+request[\s]+failed\.[\s]+There[\s]+is[\s]+an[\s]+upload[\s]+in[\s]+progress\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000:06"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Upload request failed.There is an upload in progress."
					"[event][id]" => "E0000:06"
					"[rsa][message][id1]" => "E0000:06"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:07
		# line in RSA: Access Log (<event_log>):Test Upload: <event_description>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+\((?<event_log>[^\)]*)\):Test[\s]+Upload:[\s]+(?<event_description>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000:07"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E0000:07"
					"[rsa][message][id1]" => "E0000:07"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:08
		# line in RSA: Access Log FTP (<event_log>): <resultcode> <info>: The system cannot find the file specified. (<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+(?<resultcode>[^\s]*)[\s]+(?<info>[^:]*):[\s]+The[\s]+system[\s]+cannot[\s]+find[\s]+the[\s]+file[\s]+specified\.[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000:08"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "The system cannot find the file specified."
					"[event][id]" => "E0000:08"
					"[rsa][message][id1]" => "E0000:08"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:09
		# line in RSA: Access Log FTP (<event_log>): <fld84> Data connection already open; Transfer starting.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+(?<fld84>[^\s]*)[\s]+Data[\s]+connection[\s]+already[\s]+open;[\s]+Transfer[\s]+starting\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000:09"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Data connection already open; Transfer starting."
					"[event][id]" => "E0000:09"
					"[rsa][message][id1]" => "E0000:09"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:10
		# line in RSA: Access Log FTP (<event_log>): <event_description>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+(?<event_description>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-E0000:10"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E0000:10"
					"[rsa][message][id1]" => "E0000:10"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:11
		# line in RSA: Access Log: Socket error sending tail buffer. <result>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log:[\s]+Socket[\s]+error[\s]+sending[\s]+tail[\s]+buffer\.[\s]+(?<result>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0000:11"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E0000:11"
					"[rsa][message][id1]" => "E0000:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0000:12
		# line in RSA: Access Log Custom (<event_log>): Connecting to primary server <daddr>:<dport>.(<fld1>) <event_type> <filename> <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Access Log Custom (%{event_log}): Connecting to primary server %{daddr}:%{dport}.(%{fld1}) %{event_type} %{filename} %{fld2}" }
				id => "message-E0000:12"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Connecting to primary server."
					"[event][id]" => "E0000:12"
					"[rsa][message][id1]" => "E0000:12"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId124
	# line in RSA: Connections for <saddr> have dropped to <fld81> connections. <fld82> connections were denied due to connection limit being exceeded(0) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId124" {
		dissect {
			mapping => { "message" => "Connections for %{saddr} have dropped to %{fld81} connections. %{fld82} connections were denied due to connection limit being exceeded(0) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId124"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "E0008" {
		# MESSAGE E0008
		# line in RSA: Access Log (<event_log>): Unable to connect to remote server for log uploading(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+\((?<event_log>[^\)]*)\):[\s]+Unable[\s]+to[\s]+connect[\s]+to[\s]+remote[\s]+server[\s]+for[\s]+log[\s]+uploading\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-E0008"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Unable to connect to remote server for log uploading."
					"[event][id]" => "E0008"
					"[rsa][message][id1]" => "E0008"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0008:01
		# line in RSA:  Access log (<event_log>): Log uploading failed.  Remote filename: <filename> size: <fld1>.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Access[\s]+log[\s]+\((?<event_log>[^\)]*)\):[\s]+Log[\s]+uploading[\s]+failed\.[\s]+Remote[\s]+filename:[\s]+(?<filename>[^\s]*)[\s]+size:[\s]+(?<fld1>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0008:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Log uploading failed"
					"[event][id]" => "E0008:01"
					"[rsa][message][id1]" => "E0008:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0008:02
		# line in RSA: Access Log (<event_log>): Upload retries have been canceled.(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+\((?<event_log>[^\)]*)\):[\s]+Upload[\s]+retries[\s]+have[\s]+been[\s]+canceled\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-E0008:02"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Upload retries have been canceled."
					"[event][id]" => "E0008:02"
					"[rsa][message][id1]" => "E0008:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId128
	# line in RSA: Access Log (<event_log>): Nothing to upload.Try again later.(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId128" {
		grok {
			match => { "message" => "^Access[\s]+Log[\s]+\((?<event_log>[^\)]*)\):[\s]+Nothing[\s]+to[\s]+upload\.Try[\s]+again[\s]+later\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId128"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Nothing to upload."
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "45000C" {
		# MESSAGE 45000C
		# line in RSA: Failed none for <username> from <saddr> port <sport> <logon_type>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Failed[\s]+none[\s]+for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+(?<logon_type>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-45000C"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Failed connection for user"
					"[event][id]" => "45000C"
					"[rsa][message][id1]" => "45000C"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 45000C:01
		# line in RSA: Accepted password for <username> from <saddr> port <sport> <logon_type>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Accepted[\s]+password[\s]+for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+(?<logon_type>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-45000C:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Accepted password for user"
					"[event][id]" => "45000C:01"
					"[rsa][message][id1]" => "45000C:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 45000C:02
		# line in RSA: Connection closed by <saddr>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Connection[\s]+closed[\s]+by[\s]+(?<saddr>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-45000C:02"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Connection closed"
					"[event][id]" => "45000C:02"
					"[rsa][message][id1]" => "45000C:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 45000C:03
		# line in RSA:  <fld26> returned <resultcode>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld26>[^\s]*)[\s]+returned[\s]+(?<resultcode>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-45000C:03"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "45000C:03"
					"[rsa][message][id1]" => "45000C:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 45000C:04
		# line in RSA: Connection from <saddr> port <sport>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Connection[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-45000C:04"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "45000C:04"
					"[rsa][message][id1]" => "45000C:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 45000C:05
		# line in RSA: Failed publickey for <username> from <saddr> port <sport> <fld31>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Failed[\s]+publickey[\s]+for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+(?<fld31>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-45000C:05"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "45000C:05"
					"[rsa][message][id1]" => "45000C:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 45000C:06
		# line in RSA: Did not receive identification string from <saddr> (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Did[\s]+not[\s]+receive[\s]+identification[\s]+string[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-45000C:06"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "45000C:06"
					"[rsa][message][id1]" => "45000C:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "250017" {
		# MESSAGE 250017
		# line in RSA: Console user password authentication from <saddr> failed for user '<username>'(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Console[\s]+user[\s]+password[\s]+authentication[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+failed[\s]+for[\s]+user[\s]+'(?<username>[^']*)'\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250017"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Console user password authentication"
					"[event][id]" => "250017"
					"[rsa][message][id1]" => "250017"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 250017:01
		# line in RSA: Authentication failed from <saddr>: user { \'<username>\' | '<username>' } (<policyname>)(<fld82>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication[\s]+failed[\s]+from[\s]+(?<saddr>[^:]*):[\s]+user[\s]+([\s]*\\'(?<username>[^\\]*)\\'[\s]+|[\s]*'(?<username>[^']*)'[\s]+)[\s]+\((?<policyname>[^\)]*)\)\((?<fld82>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-250017:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "250017:01"
					"[rsa][message][id1]" => "250017:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 250017:02
		# line in RSA: Administrator login from <saddr>, user '<username>', denied: <result>, request=<fld24>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Administrator[\s]+login[\s]+from[\s]+(?<saddr>[^,]*),[\s]+user[\s]+'(?<username>[^']*)',[\s]+denied:[\s]+(?<result>[^,]*),[\s]+request=(?<fld24>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250017:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_time_string" => "%{htime}"
				"event_description" => "Administrator login Failure"
					"[event][id]" => "250017:02"
					"[rsa][message][id1]" => "250017:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 250017:03
		# line in RSA: Authentication failed with<resultcode>(<fld>) (symbol: '<result>'): user '<username>' (domain<domain>) -<info>(<fld>)<event_type><filename><fld>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication failed with%{resultcode}(%{fld}) (symbol: '%{result}'): user '%{username}' (domain%{domain}) -%{info}(%{fld})%{event_type}%{filename}%{fld}" }
				id => "message-250017:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_time_string" => "%{htime}"
				"event_description" => "Authentication failed"
					"[event][id]" => "250017:03"
					"[rsa][message][id1]" => "250017:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "250034" {
		# MESSAGE 250034
		# line in RSA:      domain trust <domain>, flags <fld1>, trust flags <fld2>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*domain[\s]+trust[\s]+(?<domain>[^,]*),[\s]+flags[\s]+(?<fld1>[^,]*),[\s]+trust[\s]+flags[\s]+(?<fld2>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250034"
				add_field => {
				"event_description" => "domain trust"
					"[event][id]" => "250034"
					"[rsa][message][id1]" => "250034"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 250034:01
		# line in RSA: Newly discovered primary domain trust <domain>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Newly[\s]+discovered[\s]+primary[\s]+domain[\s]+trust[\s]+(?<domain>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250034:01"
				add_field => {
				"event_description" => "Newly discovered primary domain trust"
					"[event][id]" => "250034:01"
					"[rsa][message][id1]" => "250034:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "250043" {
		# MESSAGE 250043
		# line in RSA: Administrator logout, user '<username>', realm '<group_object>', from <saddr>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Administrator[\s]+logout,[\s]+user[\s]+'(?<username>[^']*)',[\s]+realm[\s]+'(?<group_object>[^']*)',[\s]+from[\s]+(?<saddr>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250043"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"event_description" => "Administrator logout"
					"[event][id]" => "250043"
					"[rsa][message][id1]" => "250043"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 250043:01
		# line in RSA: Administrator logout (<fld1>), session_id <sessionid>, user '<username>'(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Administrator[\s]+logout[\s]+\((?<fld1>[^\)]*)\),[\s]+session_id[\s]+(?<sessionid>[^,]*),[\s]+user[\s]+'(?<username>[^']*)'\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250043:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"event_description" => "Administrator logout"
					"[event][id]" => "250043:01"
					"[rsa][message][id1]" => "250043:01"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "250046" {
		# MESSAGE 250046
		# line in RSA: Administrator login, user '<username>', from <saddr>, <privilege>, request=<fld24>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Administrator[\s]+login,[\s]+user[\s]+'(?<username>[^']*)',[\s]+from[\s]+(?<saddr>[^,]*),[\s]+(?<privilege>[^,]*),[\s]+request=(?<fld24>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250046"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_time_string" => "%{htime}"
				"event_description" => "Administrator login"
					"[event][id]" => "250046"
					"[rsa][message][id1]" => "250046"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 250046:01
		# line in RSA: Administrator login, session_id <sessionid>, user '<username>', from <saddr>, <privilege>, request=<fld24>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Administrator[\s]+login,[\s]+session_id[\s]+(?<sessionid>[^,]*),[\s]+user[\s]+'(?<username>[^']*)',[\s]+from[\s]+(?<saddr>[^,]*),[\s]+(?<privilege>[^,]*),[\s]+request=(?<fld24>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250046:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_time_string" => "%{htime}"
				"event_description" => "Administrator login"
					"[event][id]" => "250046:01"
					"[rsa][message][id1]" => "250046:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "250047" {
		# MESSAGE 250047
		# line in RSA: Administrator login, session_id <sessionid>, user '<username>',{ realm '<group_object>', from <saddr>|from <saddr>}, <privilege>, request=<fld24>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Administrator[\s]+login,[\s]+session_id[\s]+(?<sessionid>[^,]*),[\s]+user[\s]+'(?<username>[^']*)',([\s]*realm[\s]+'(?<group_object>[^']*)',[\s]+from[\s]+(?<saddr>[^,]*)|from[\s]+(?<saddr>[^,]*)),[\s]+(?<privilege>[^,]*),[\s]+request=(?<fld24>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250047"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Administrator login"
					"[event][id]" => "250047"
					"[rsa][message][id1]" => "250047"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 250047:01
		# line in RSA: Administrator login, user '<username>', realm '<group_object>', from <saddr>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Administrator[\s]+login,[\s]+user[\s]+'(?<username>[^']*)',[\s]+realm[\s]+'(?<group_object>[^']*)',[\s]+from[\s]+(?<saddr>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-250047:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Administrator login"
					"[event][id]" => "250047:01"
					"[rsa][message][id1]" => "250047:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId141
	# line in RSA: Administrator logout, user '<username>', from <saddr>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId141" {
		grok {
			match => { "message" => "^Administrator[\s]+logout,[\s]+user[\s]+'(?<username>[^']*)',[\s]+from[\s]+(?<saddr>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId141"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"event_time_string" => "%{htime}"
				"event_description" => "Administrator logout"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId142
	# line in RSA: Administrator login, user '<username>', realm '<group_object>', from <saddr>,  denied : <disposition>, request=<fld24>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId142" {
		grok {
			match => { "message" => "^Administrator[\s]+login,[\s]+user[\s]+'(?<username>[^']*)',[\s]+realm[\s]+'(?<group_object>[^']*)',[\s]+from[\s]+(?<saddr>[^,]*),[\s]+denied[\s]+:[\s]+(?<disposition>[^,]*),[\s]+request=(?<fld24>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId142"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"event_description" => "Administrator login"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "E0009" {
		# MESSAGE E0009
		# line in RSA: Access { log | Log } (<event_log>): Last remote filename: <filename> size: <filename_size> bytes(<fld81>) <event_type> <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+([\s]*log[\s]+|[\s]*Log[\s]+)[\s]+\((?<event_log>[^\)]*)\):[\s]+Last[\s]+remote[\s]+filename:[\s]+(?<filename>[^\s]*)[\s]+size:[\s]+(?<filename_size>[^\s]*)[\s]+bytes\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<fld80>.*)$" }
				id => "message-E0009"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Last Remote filename"
					"[event][id]" => "E0009"
					"[rsa][message][id1]" => "E0009"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE E0009:01
		# line in RSA: Access { log | Log } (<event_log>): Upload completed successfully.  Maximum bandwidth used was <fld68>.(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+([\s]*log[\s]+|[\s]*Log[\s]+)[\s]+\((?<event_log>[^\)]*)\):[\s]+Upload[\s]+completed[\s]+successfully\.[\s]+Maximum[\s]+bandwidth[\s]+used[\s]+was[\s]+(?<fld68>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-E0009:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Upload completed successfully."
					"[event][id]" => "E0009:01"
					"[rsa][message][id1]" => "E0009:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0009:02
		# line in RSA: Access { log | Log } (<event_log>): Upload request completed. <event_description>.(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+([\s]*log[\s]+|[\s]*Log[\s]+)[\s]+\((?<event_log>[^\)]*)\):[\s]+Upload[\s]+request[\s]+completed\.[\s]+(?<event_description>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-E0009:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E0009:02"
					"[rsa][message][id1]" => "E0009:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E0009:03
		# line in RSA:  Access log (<event_log>): Rotating remote file <info> at <fld12> bytes.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Access[\s]+log[\s]+\((?<event_log>[^\)]*)\):[\s]+Rotating[\s]+remote[\s]+file[\s]+(?<info>[^\s]*)[\s]+at[\s]+(?<fld12>[^\s]*)[\s]+bytes\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E0009:03"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Rotating remote file"
					"[event][id]" => "E0009:03"
					"[rsa][message][id1]" => "E0009:03"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "E000A" {
		# MESSAGE E000A:09
		# line in RSA: Access Log FTP (<event_log>): Socket error occured on data channel.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Socket[\s]+error[\s]+occured[\s]+on[\s]+data[\s]+channel\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:09"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E000A:09"
					"[rsa][message][id1]" => "E000A:09"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:08
		# line in RSA: Access Log FTP (<event_log>):Test Upload: Error sending <info>.  Client received <resultcode> response. Closing connections.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):Test[\s]+Upload:[\s]+Error[\s]+sending[\s]+(?<info>[^\.]*)\.[\s]+Client[\s]+received[\s]+(?<resultcode>[^\s]*)[\s]+response\.[\s]+Closing[\s]+connections\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:08"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Error Sending.Closing connections."
					"[event][id]" => "E000A:08"
					"[rsa][message][id1]" => "E000A:08"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A
		# line in RSA: Access Log FTP (<event_log>): Error sending <info>.  Client received <resultcode> response. Closing connections.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Error[\s]+sending[\s]+(?<info>[^\.]*)\.[\s]+Client[\s]+received[\s]+(?<resultcode>[^\s]*)[\s]+response\.[\s]+Closing[\s]+connections\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Error Sending.Closing connections."
					"[event][id]" => "E000A"
					"[rsa][message][id1]" => "E000A"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:01
		# line in RSA: Access Log FTP (<event_log>): { Couldn't | Couldn\'t } connect control socket { to primary  server at <dport>. | to primary server <daddr> | to primary <daddr> server at <dport>.} (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+([\s]*Couldn't[\s]+|[\s]*Couldn\\'t[\s]+)[\s]+connect[\s]+control[\s]+socket[\s]+([\s]*to[\s]+primary[\s]+server[\s]+at[\s]+(?<dport>[^\.]*)\.[\s]+|[\s]*to[\s]+primary[\s]+server[\s]+(?<daddr>[^\s]*)[\s]+|[\s]*to[\s]+primary[\s]+(?<daddr>[^\s]*)[\s]+server[\s]+at[\s]+(?<dport>[^\.]*)\.)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-E000A:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Couldn't connect control socket to primary server."
					"[event][id]" => "E000A:01"
					"[rsa][message][id1]" => "E000A:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:02
		# line in RSA: Access Log FTP (<event_log>): { Couldn't | Couldn\'t } connect to primary server(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+([\s]*Couldn't[\s]+|[\s]*Couldn\\'t[\s]+)[\s]+connect[\s]+to[\s]+primary[\s]+server\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-E000A:02"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Couldn't connect to primary server."
					"[event][id]" => "E000A:02"
					"[rsa][message][id1]" => "E000A:02"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:03
		# line in RSA: Access Log FTP (<event_log>): Error sending <fld1>.  Client received <fld2> response.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Error[\s]+sending[\s]+(?<fld1>[^\.]*)\.[\s]+Client[\s]+received[\s]+(?<fld2>[^\s]*)[\s]+response\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:03"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E000A:03"
					"[rsa][message][id1]" => "E000A:03"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:04
		# line in RSA:  Access Log FTP (<event_log>): Socket error occured receiving response from remote server.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Socket[\s]+error[\s]+occured[\s]+receiving[\s]+response[\s]+from[\s]+remote[\s]+server\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:04"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E000A:04"
					"[rsa][message][id1]" => "E000A:04"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:06
		# line in RSA:  Access Log FTP (<event_log>): Socket error getting data transfer status. <result>. (<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Socket[\s]+error[\s]+getting[\s]+data[\s]+transfer[\s]+status\.[\s]+(?<result>[^\.]*)\.[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:06"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Socket error getting data transfer status"
					"[event][id]" => "E000A:06"
					"[rsa][message][id1]" => "E000A:06"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:07
		# line in RSA:  Access Log FTP (<event_log>):Test Upload: <result>.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):Test[\s]+Upload:[\s]+(?<result>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:07"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E000A:07"
					"[rsa][message][id1]" => "E000A:07"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:12
		# line in RSA:  Access Log FTP (<event_log>): Couldn't connect control socket to {altenate|alternate} server <daddr>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Couldn't[\s]+connect[\s]+control[\s]+socket[\s]+to[\s]+(altenate|alternate)[\s]+server[\s]+(?<daddr>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:12"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Couldn't connect control socket to alternate server"
					"[event][id]" => "E000A:12"
					"[rsa][message][id1]" => "E000A:12"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:13
		# line in RSA:  Access Log FTP (<event_log>): Couldn't connect to {altenate|alternate} server<fld21>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Couldn't[\s]+connect[\s]+to[\s]+(altenate|alternate)[\s]+server(?<fld21>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:13"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Couldn't connect to alternate server"
					"[event][id]" => "E000A:13"
					"[rsa][message][id1]" => "E000A:13"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:05
		# line in RSA: primary Error initiating service to Access Log FTP (<event_log>): server.  Client received <resultcode> response.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^primary[\s]+Error[\s]+initiating[\s]+service[\s]+to[\s]+Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+server\.[\s]+Client[\s]+received[\s]+(?<resultcode>[^\s]*)[\s]+response\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:05"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E000A:05"
					"[rsa][message][id1]" => "E000A:05"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:14
		# line in RSA: Access Log Custom (<event_log>): Couldn't connect { to server(<fld1>) | socket to server <daddr>(<fld1>) } <event_type> <filename> <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+Custom[\s]+\((?<event_log>[^\)]*)\):[\s]+Couldn't[\s]+connect[\s]+([\s]*to[\s]+server\((?<fld1>[^\)]*)\)[\s]+|[\s]*socket[\s]+to[\s]+server[\s]+(?<daddr>[^\(]*)\((?<fld1>[^\)]*)\)[\s]+)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld2>.*)$" }
				id => "message-E000A:14"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Couldn't connect to server."
					"[event][id]" => "E000A:14"
					"[rsa][message][id1]" => "E000A:14"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:10
		# line in RSA: Access Log FTP (<event_log>): Couldn't find primary host entry <hostname> in DNS. Please correct configuration. <space> (<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+FTP[\s]+\((?<event_log>[^\)]*)\):[\s]+Couldn't[\s]+find[\s]+primary[\s]+host[\s]+entry[\s]+(?<hostname>[^\s]*)[\s]+in[\s]+DNS\.[\s]+Please[\s]+correct[\s]+configuration\.[\s]+(?<space>[^\s]*)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:10"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E000A:10"
					"[rsa][message][id1]" => "E000A:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000A:11
		# line in RSA: Access Log (<event_log>): error in sending log data, error code = <resultcode>(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+\((?<event_log>[^\)]*)\):[\s]+error[\s]+in[\s]+sending[\s]+log[\s]+data,[\s]+error[\s]+code[\s]+=[\s]+(?<resultcode>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000A:11"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "E000A:11"
					"[rsa][message][id1]" => "E000A:11"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "E000B" {
		# MESSAGE E000B
		# line in RSA: Access Log (<event_log>): Global early upload threshold reached. Total Current size <filename_size>, Upload threshold <fld12>.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+\((?<event_log>[^\)]*)\):[\s]+Global[\s]+early[\s]+upload[\s]+threshold[\s]+reached\.[\s]+Total[\s]+Current[\s]+size[\s]+(?<filename_size>[^,]*),[\s]+Upload[\s]+threshold[\s]+(?<fld12>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000B"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Global early upload threshold reached."
					"[event][id]" => "E000B"
					"[rsa][message][id1]" => "E000B"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE E000B:01
		# line in RSA: Access Log (<event_log>): Early upload threshold reached. Current size <filename_size>, Upload threshold <fld12>.(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Access[\s]+Log[\s]+\((?<event_log>[^\)]*)\):[\s]+Early[\s]+upload[\s]+threshold[\s]+reached\.[\s]+Current[\s]+size[\s]+(?<filename_size>[^,]*),[\s]+Upload[\s]+threshold[\s]+(?<fld12>[^\.]*)\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-E000B:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Early upload threshold reached."
					"[event][id]" => "E000B:01"
					"[rsa][message][id1]" => "E000B:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "ALLOWED" {
		# MESSAGE ALLOWED:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url}" }
				id => "message-ALLOWED:03"
				add_field => {
					"[event][id]" => "ALLOWED:03"
					"[rsa][message][id1]" => "ALLOWED:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ALLOWED:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url}" }
				id => "message-ALLOWED:02"
				add_field => {
					"[event][id]" => "ALLOWED:02"
					"[rsa][message][id1]" => "ALLOWED:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ALLOWED:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url}" }
				id => "message-ALLOWED:01"
				add_field => {
					"[event][id]" => "ALLOWED:01"
					"[rsa][message][id1]" => "ALLOWED:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ALLOWED
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url}" }
				id => "message-ALLOWED"
				add_field => {
					"[event][id]" => "ALLOWED"
					"[rsa][message][id1]" => "ALLOWED"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId166
	# line in RSA:  <fld20> <fld21> <processing_time> <saddr> <username> <group_object> <fld88> <disposition> {"<category>" | <category>} <web_referer> <resultcode> <action> <web_method> <content_type> <network_service> <web_host> <dport> <webpage> <web_query> <fld66> {"<filter>" | <filter>} <hostip> <sbytes> <rbytes> {"<virusname>" | <virusname>}
	else if [logstash][msgparser][id] == "msgParserId166" {
		grok {
			match => { "message" => "^[\s]*(?<fld20>[^\s]*)[\s]+(?<fld21>[^\s]*)[\s]+(?<processing_time>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+(?<group_object>[^\s]*)[\s]+(?<fld88>[^\s]*)[\s]+(?<disposition>[^\s]*)[\s]+(\"(?<category>[^\"]*)\"[\s]+|[\s]*(?<category>[^\s]*))[\s]+(?<web_referer>[^\s]*)[\s]+(?<resultcode>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<web_method>[^\s]*)[\s]+(?<content_type>[^\s]*)[\s]+(?<network_service>[^\s]*)[\s]+(?<web_host>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<webpage>[^\s]*)[\s]+(?<web_query>[^\s]*)[\s]+(?<fld66>[^\s]*)[\s]+(\"(?<filter>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*))[\s]+(?<hostip>[^\s]*)[\s]+(?<sbytes>[^\s]*)[\s]+(?<rbytes>[^\s]*)[\s]+(\"(?<virusname>[^\"]*)\"[\s]+|[\s]*(?<virusname>.*))$" }
			id => "msgParserId166"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "BlueCoat-DNS" {
		# MESSAGE BlueCoat-DNS
		# line in RSA: client_address="<saddr>",client_transport="<protocol>",request_address="<hostip>",request_class="<fld86>",request_name="<hostname>",request_opcode="<dns_opcode>",request_type="<event_type>",response_a="<dns_a_record>",response_cname="<dns_cname_record>",response_code="<resultcode>",response_ptr="<dns_ptr_record>"(<fld81>) <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client_address=\"%{saddr}\",client_transport=\"%{protocol}\",request_address=\"%{hostip}\",request_class=\"%{fld86}\",request_name=\"%{hostname}\",request_opcode=\"%{dns_opcode}\",request_type=\"%{event_type}\",response_a=\"%{dns_a_record}\",response_cname=\"%{dns_cname_record}\",response_code=\"%{resultcode}\",response_ptr=\"%{dns_ptr_record}\"(%{fld81}) %{fld80}" }
				id => "message-BlueCoat-DNS"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "BlueCoat-DNS"
					"[rsa][message][id1]" => "BlueCoat-DNS"
					"[event][categoryid]" => "1802000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE BlueCoat-DNS:01
		# line in RSA: client_ address="<saddr>",client_transport="<protocol>",request_address="<hostip>",request_class="<fld86>",request_name="<hostname>",request_opcode="<dns_opcode>",request_type="<event_type>",response_a="<dns_a_record>",response_cname="<dns_cname_record>",response_code="<resultcode>",response_ptr="<dns_ptr_record>"(<fld81>) <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client_ address=\"%{saddr}\",client_transport=\"%{protocol}\",request_address=\"%{hostip}\",request_class=\"%{fld86}\",request_name=\"%{hostname}\",request_opcode=\"%{dns_opcode}\",request_type=\"%{event_type}\",response_a=\"%{dns_a_record}\",response_cname=\"%{dns_cname_record}\",response_code=\"%{resultcode}\",response_ptr=\"%{dns_ptr_record}\"(%{fld81}) %{fld80}" }
				id => "message-BlueCoat-DNS:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "BlueCoat-DNS:01"
					"[rsa][message][id1]" => "BlueCoat-DNS:01"
					"[event][categoryid]" => "1802000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId169
	# line in RSA: <fld1>,<fld2>,<processing_time>,c_ip="<saddr>",action="<action>",s_cert_status="<cert_status>",s_cert_errors="<cert_error>",c_ocsp_error="<fld83>",s_http_version="<version>",host="<dhost>",hierarchy="<h_code>",supplier_name="<fld67>",s_ssl_version="<d_sslver>",s_cipher="<d_cipher>",s_cipher_size="<d_ciphersize>",s_cert_host="<cert_hostname>",s_cert_host_category="<cert_hostname_cat>",c_ssl_version="<s_sslver>",c_cipher="<s_cipher>",c_cipher_size="<s_ciphersize>",c_cert_subject="<cert_subject>",s_ip="<daddr>",s_sitename="<service>"(<fld81>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId169" {
		dissect {
			mapping => { "message" => "%{fld1},%{fld2},%{processing_time},c_ip=\"%{saddr}\",action=\"%{action}\",s_cert_status=\"%{cert_status}\",s_cert_errors=\"%{cert_error}\",c_ocsp_error=\"%{fld83}\",s_http_version=\"%{version}\",host=\"%{dhost}\",hierarchy=\"%{h_code}\",supplier_name=\"%{fld67}\",s_ssl_version=\"%{d_sslver}\",s_cipher=\"%{d_cipher}\",s_cipher_size=\"%{d_ciphersize}\",s_cert_host=\"%{cert_hostname}\",s_cert_host_category=\"%{cert_hostname_cat}\",c_ssl_version=\"%{s_sslver}\",c_cipher=\"%{s_cipher}\",c_cipher_size=\"%{s_ciphersize}\",c_cert_subject=\"%{cert_subject}\",s_ip=\"%{daddr}\",s_sitename=\"%{service}\"(%{fld81}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId169"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "CACHE_MISS" {
		# MESSAGE CACHE_MISS:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-CACHE_MISS:03"
				add_field => {
					"[event][id]" => "CACHE_MISS:03"
					"[rsa][message][id1]" => "CACHE_MISS:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CACHE_MISS:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-CACHE_MISS:02"
				add_field => {
					"[event][id]" => "CACHE_MISS:02"
					"[rsa][message][id1]" => "CACHE_MISS:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CACHE_MISS:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-CACHE_MISS:01"
				add_field => {
					"[event][id]" => "CACHE_MISS:01"
					"[rsa][message][id1]" => "CACHE_MISS:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CACHE_MISS
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-CACHE_MISS"
				add_field => {
					"[event][id]" => "CACHE_MISS"
					"[rsa][message][id1]" => "CACHE_MISS"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "300000" {
		# MESSAGE 300000
		# line in RSA: Server certificate validation failed: <fld82>, Name in certificate: <cert_hostname>(<fld81>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server certificate validation failed: %{fld82}, Name in certificate: %{cert_hostname}(%{fld81}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000"
				add_field => {
					"[event][id]" => "300000"
					"[rsa][message][id1]" => "300000"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 300000:01
		# line in RSA: CFSSL: SSL_accept failed(<fld22>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CFSSL: SSL_accept failed(%{fld22}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000:01"
				add_field => {
					"[event][id]" => "300000:01"
					"[rsa][message][id1]" => "300000:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 300000:02
		# line in RSA: CFSSL: SSL_accept error:<resultcode>:<fld25>(<fld26>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CFSSL: SSL_accept error:%{resultcode}:%{fld25}(%{fld26}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000:02"
				add_field => {
					"[event][id]" => "300000:02"
					"[rsa][message][id1]" => "300000:02"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 300000:03
		# line in RSA: error:<resultcode>:<fld25>(<fld26>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "error:%{resultcode}:%{fld25}(%{fld26}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000:03"
				add_field => {
					"[event][id]" => "300000:03"
					"[rsa][message][id1]" => "300000:03"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 300000:04
		# line in RSA: SSL server handshake failure(<fld26>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL server handshake failure(%{fld26}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000:04"
				add_field => {
					"[event][id]" => "300000:04"
					"[rsa][message][id1]" => "300000:04"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 300000:05
		# line in RSA: Unknown client SSL ciphers(error:<resultcode>:<fld25>)(<fld26>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unknown client SSL ciphers(error:%{resultcode}:%{fld25})(%{fld26}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000:05"
				add_field => {
					"[event][id]" => "300000:05"
					"[rsa][message][id1]" => "300000:05"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 300000:06
		# line in RSA: CFSSL: <fld11> error:<resultcode>:<result>(<fld26>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CFSSL: %{fld11} error:%{resultcode}:%{result}(%{fld26}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000:06"
				add_field => {
					"[event][id]" => "300000:06"
					"[rsa][message][id1]" => "300000:06"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 300000:07
		# line in RSA: Failed to read private key for <fld11>(<fld26>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to read private key for %{fld11}(%{fld26}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000:07"
				add_field => {
					"[event][id]" => "300000:07"
					"[rsa][message][id1]" => "300000:07"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 300000:08
		# line in RSA: SSL domain validation error:<result>Name in certificate: <cert_hostname>,  name in URL:<url>(<fld26>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL domain validation error:%{result}Name in certificate: %{cert_hostname},  name in URL:%{url}(%{fld26}) %{event_type} %{filename} %{fld80}" }
				id => "message-300000:08"
				add_field => {
					"[event][id]" => "300000:08"
					"[rsa][message][id1]" => "300000:08"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId183
	# line in RSA: Management_Console HTTPS: TLS connection established:  from <saddr> (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId183" {
		grok {
			match => { "message" => "^Management_Console[\s]+HTTPS:[\s]+TLS[\s]+connection[\s]+established:[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId183"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "60020" {
		# MESSAGE 60020
		# line in RSA: Management_Console HTTPS: TLS connection closed, no HTTP request data:  from <saddr> (<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Management_Console[\s]+HTTPS:[\s]+TLS[\s]+connection[\s]+closed,[\s]+no[\s]+HTTP[\s]+request[\s]+data:[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-60020"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "60020"
					"[rsa][message][id1]" => "60020"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 60020:01
		# line in RSA: Management_Console HTTPS connection not established: { from | BIO lib:  from } <saddr>(<fld1>) <event_type> <filename> <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Management_Console[\s]+HTTPS[\s]+connection[\s]+not[\s]+established:[\s]+([\s]*from[\s]+|[\s]*BIO[\s]+lib:[\s]+from[\s]+)[\s]+(?<saddr>[^\(]*)\((?<fld1>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld2>.*)$" }
				id => "message-60020:01"
				add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Management_Console HTTPS connection not established"
					"[event][id]" => "60020:01"
					"[rsa][message][id1]" => "60020:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId186
	# line in RSA: <fld1>,<fld2>,<processing_time>,c_ip="<saddr>",<fld82>,action="<action>",c_ocsp_error="<fld83>",s_http_version="<version>",host="<dhost>",hierarchy="<h_code>",supplier_name="<fld67>",s_sitename="<service>" <fld83> (<fld81>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId186" {
		dissect {
			mapping => { "message" => "%{fld1},%{fld2},%{processing_time},c_ip=\"%{saddr}\",%{fld82},action=\"%{action}\",c_ocsp_error=\"%{fld83}\",s_http_version=\"%{version}\",host=\"%{dhost}\",hierarchy=\"%{h_code}\",supplier_name=\"%{fld67}\",s_sitename=\"%{service}\" %{fld83} (%{fld81}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId186"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "BlueCoat-ICAPRequest" {
		# MESSAGE BlueCoat-ICAPRequest
		# line in RSA: <fld1>,<fld2>,<processing_time>,c_ip="<saddr>",action="<action>",c_ocsp_error="<fld83>",s_http_version="<version>",host="<dhost>",hierarchy="<h_code>",supplier_name="<fld67>",s_sitename="<service>" <fld83> (<fld81>) <event_type> <filename> <fld80>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1},%{fld2},%{processing_time},c_ip=\"%{saddr}\",action=\"%{action}\",c_ocsp_error=\"%{fld83}\",s_http_version=\"%{version}\",host=\"%{dhost}\",hierarchy=\"%{h_code}\",supplier_name=\"%{fld67}\",s_sitename=\"%{service}\" %{fld83} (%{fld81}) %{event_type} %{filename} %{fld80}" }
				id => "message-BlueCoat-ICAPRequest"
				add_field => {
					"[event][id]" => "BlueCoat-ICAPRequest"
					"[rsa][message][id1]" => "BlueCoat-ICAPRequest"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE BlueCoat-ICAPRequest:01
		# line in RSA: <fld1>,<fld2>,<processing_time>,c_ip="<saddr>",action="<action>",c_ocsp_error="<fld83>",s_http_version="<version>",host="<dhost>",hierarchy="<h_code>",supplier_name="<fld67>",s_sitename="<service>" <fld83>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1},%{fld2},%{processing_time},c_ip=\"%{saddr}\",action=\"%{action}\",c_ocsp_error=\"%{fld83}\",s_http_version=\"%{version}\",host=\"%{dhost}\",hierarchy=\"%{h_code}\",supplier_name=\"%{fld67}\",s_sitename=\"%{service}\" %{fld83}" }
				id => "message-BlueCoat-ICAPRequest:01"
				add_field => {
					"[event][id]" => "BlueCoat-ICAPRequest:01"
					"[rsa][message][id1]" => "BlueCoat-ICAPRequest:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "DENIED" {
		# MESSAGE DENIED:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url}" }
				id => "message-DENIED:03"
				add_field => {
					"[event][id]" => "DENIED:03"
					"[rsa][message][id1]" => "DENIED:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DENIED:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url}" }
				id => "message-DENIED:02"
				add_field => {
					"[event][id]" => "DENIED:02"
					"[rsa][message][id1]" => "DENIED:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DENIED:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url}" }
				id => "message-DENIED:01"
				add_field => {
					"[event][id]" => "DENIED:01"
					"[rsa][message][id1]" => "DENIED:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DENIED
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url}" }
				id => "message-DENIED"
				add_field => {
					"[event][id]" => "DENIED"
					"[rsa][message][id1]" => "DENIED"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "FAILED" {
		# MESSAGE FAILED:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-FAILED:03"
				add_field => {
					"[event][id]" => "FAILED:03"
					"[rsa][message][id1]" => "FAILED:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE FAILED:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-FAILED:02"
				add_field => {
					"[event][id]" => "FAILED:02"
					"[rsa][message][id1]" => "FAILED:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE FAILED:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-FAILED:01"
				add_field => {
					"[event][id]" => "FAILED:01"
					"[rsa][message][id1]" => "FAILED:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE FAILED
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-FAILED"
				add_field => {
					"[event][id]" => "FAILED"
					"[rsa][message][id1]" => "FAILED"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId189
	# line in RSA:  <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> { "<filter>" "<user_agent>" | <filter> "<user_agent>" | <filter> <user_agent> | "<filter>" | <filter> } <virusname> <service> <url> <webpage>
	else if [logstash][msgparser][id] == "msgParserId189" {
		grok {
			match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<processing_time>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<resultcode>[^\s]*)[\s]+(?<sbytes>[^\s]*)[\s]+(?<web_method>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+(?<h_code>[^\s]*)[\s]+(?<web_host>[^\s]*)[\s]+(?<content_type>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<rbytes>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<network_service>[^\s]*)[\s]+(?<duration>[^\s]*)[\s]+(?<dtransaddr>[^\s]*)[\s]+(?<group_object>[^\s]*)[\s]+(?<fld68>[^\s]*)[\s]+(?<disposition>[^\s]*)[\s]+([\s]*\"(?<filter>[^\"]*)\"[\s]+\"(?<user_agent>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+\"(?<user_agent>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+(?<user_agent>[^\s]*)[\s]+|[\s]*\"(?<filter>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+)[\s]+(?<virusname>[^\s]*)[\s]+(?<service>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+(?<webpage>.*)$" }
			id => "msgParserId189"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SUCCESS" {
		# MESSAGE SUCCESS:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-SUCCESS:03"
				add_field => {
					"[event][id]" => "SUCCESS:03"
					"[rsa][message][id1]" => "SUCCESS:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SUCCESS:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-SUCCESS:02"
				add_field => {
					"[event][id]" => "SUCCESS:02"
					"[rsa][message][id1]" => "SUCCESS:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SUCCESS:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-SUCCESS:01"
				add_field => {
					"[event][id]" => "SUCCESS:01"
					"[rsa][message][id1]" => "SUCCESS:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SUCCESS
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-SUCCESS"
				add_field => {
					"[event][id]" => "SUCCESS"
					"[rsa][message][id1]" => "SUCCESS"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_ACCELERATED" {
		# MESSAGE TCP_ACCELERATED:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url}" }
				id => "message-TCP_ACCELERATED:03"
				add_field => {
					"[event][id]" => "TCP_ACCELERATED:03"
					"[rsa][message][id1]" => "TCP_ACCELERATED:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_ACCELERATED:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url}" }
				id => "message-TCP_ACCELERATED:02"
				add_field => {
					"[event][id]" => "TCP_ACCELERATED:02"
					"[rsa][message][id1]" => "TCP_ACCELERATED:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_ACCELERATED:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url}" }
				id => "message-TCP_ACCELERATED:01"
				add_field => {
					"[event][id]" => "TCP_ACCELERATED:01"
					"[rsa][message][id1]" => "TCP_ACCELERATED:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_ACCELERATED
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url}" }
				id => "message-TCP_ACCELERATED"
				add_field => {
					"[event][id]" => "TCP_ACCELERATED"
					"[rsa][message][id1]" => "TCP_ACCELERATED"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_AUTH_FORM" {
		# MESSAGE TCP_AUTH_FORM:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_FORM:03"
				add_field => {
					"[event][id]" => "TCP_AUTH_FORM:03"
					"[rsa][message][id1]" => "TCP_AUTH_FORM:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_FORM:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_FORM:02"
				add_field => {
					"[event][id]" => "TCP_AUTH_FORM:02"
					"[rsa][message][id1]" => "TCP_AUTH_FORM:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_FORM:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_FORM:01"
				add_field => {
					"[event][id]" => "TCP_AUTH_FORM:01"
					"[rsa][message][id1]" => "TCP_AUTH_FORM:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_FORM
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_FORM"
				add_field => {
					"[event][id]" => "TCP_AUTH_FORM"
					"[rsa][message][id1]" => "TCP_AUTH_FORM"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_AUTH_HIT" {
		# MESSAGE TCP_AUTH_HIT:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_HIT:03"
				add_field => {
					"[event][id]" => "TCP_AUTH_HIT:03"
					"[rsa][message][id1]" => "TCP_AUTH_HIT:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_HIT:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_HIT:02"
				add_field => {
					"[event][id]" => "TCP_AUTH_HIT:02"
					"[rsa][message][id1]" => "TCP_AUTH_HIT:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_HIT:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_HIT:01"
				add_field => {
					"[event][id]" => "TCP_AUTH_HIT:01"
					"[rsa][message][id1]" => "TCP_AUTH_HIT:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_HIT
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_HIT"
				add_field => {
					"[event][id]" => "TCP_AUTH_HIT"
					"[rsa][message][id1]" => "TCP_AUTH_HIT"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_AUTH_MISS" {
		# MESSAGE TCP_AUTH_MISS:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_MISS:03"
				add_field => {
					"[event][id]" => "TCP_AUTH_MISS:03"
					"[rsa][message][id1]" => "TCP_AUTH_MISS:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_MISS:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_MISS:02"
				add_field => {
					"[event][id]" => "TCP_AUTH_MISS:02"
					"[rsa][message][id1]" => "TCP_AUTH_MISS:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_MISS:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_MISS:01"
				add_field => {
					"[event][id]" => "TCP_AUTH_MISS:01"
					"[rsa][message][id1]" => "TCP_AUTH_MISS:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_MISS
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_MISS"
				add_field => {
					"[event][id]" => "TCP_AUTH_MISS"
					"[rsa][message][id1]" => "TCP_AUTH_MISS"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_AUTH_REDIRECT" {
		# MESSAGE TCP_AUTH_REDIRECT:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_REDIRECT:03"
				add_field => {
					"[event][id]" => "TCP_AUTH_REDIRECT:03"
					"[rsa][message][id1]" => "TCP_AUTH_REDIRECT:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_REDIRECT:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_REDIRECT:02"
				add_field => {
					"[event][id]" => "TCP_AUTH_REDIRECT:02"
					"[rsa][message][id1]" => "TCP_AUTH_REDIRECT:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_REDIRECT:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_REDIRECT:01"
				add_field => {
					"[event][id]" => "TCP_AUTH_REDIRECT:01"
					"[rsa][message][id1]" => "TCP_AUTH_REDIRECT:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_AUTH_REDIRECT
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_AUTH_REDIRECT"
				add_field => {
					"[event][id]" => "TCP_AUTH_REDIRECT"
					"[rsa][message][id1]" => "TCP_AUTH_REDIRECT"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_CLIENT_REFRESH" {
		# MESSAGE TCP_CLIENT_REFRESH:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_CLIENT_REFRESH:03"
				add_field => {
					"[event][id]" => "TCP_CLIENT_REFRESH:03"
					"[rsa][message][id1]" => "TCP_CLIENT_REFRESH:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_CLIENT_REFRESH:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_CLIENT_REFRESH:02"
				add_field => {
					"[event][id]" => "TCP_CLIENT_REFRESH:02"
					"[rsa][message][id1]" => "TCP_CLIENT_REFRESH:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_CLIENT_REFRESH:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_CLIENT_REFRESH:01"
				add_field => {
					"[event][id]" => "TCP_CLIENT_REFRESH:01"
					"[rsa][message][id1]" => "TCP_CLIENT_REFRESH:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_CLIENT_REFRESH
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_CLIENT_REFRESH"
				add_field => {
					"[event][id]" => "TCP_CLIENT_REFRESH"
					"[rsa][message][id1]" => "TCP_CLIENT_REFRESH"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_CLIENT_REFRESH_RST" {
		# MESSAGE TCP_CLIENT_REFRESH_RST:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_CLIENT_REFRESH_RST:03"
				add_field => {
					"[event][id]" => "TCP_CLIENT_REFRESH_RST:03"
					"[rsa][message][id1]" => "TCP_CLIENT_REFRESH_RST:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_CLIENT_REFRESH_RST:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_CLIENT_REFRESH_RST:02"
				add_field => {
					"[event][id]" => "TCP_CLIENT_REFRESH_RST:02"
					"[rsa][message][id1]" => "TCP_CLIENT_REFRESH_RST:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_CLIENT_REFRESH_RST:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_CLIENT_REFRESH_RST:01"
				add_field => {
					"[event][id]" => "TCP_CLIENT_REFRESH_RST:01"
					"[rsa][message][id1]" => "TCP_CLIENT_REFRESH_RST:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_CLIENT_REFRESH_RST
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_CLIENT_REFRESH_RST"
				add_field => {
					"[event][id]" => "TCP_CLIENT_REFRESH_RST"
					"[rsa][message][id1]" => "TCP_CLIENT_REFRESH_RST"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_DENIED" {
		# MESSAGE TCP_DENIED:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_DENIED:03"
				add_field => {
					"[event][id]" => "TCP_DENIED:03"
					"[rsa][message][id1]" => "TCP_DENIED:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_DENIED
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_DENIED"
				add_field => {
					"[event][id]" => "TCP_DENIED"
					"[rsa][message][id1]" => "TCP_DENIED"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_DENIED:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_DENIED:02"
				add_field => {
					"[event][id]" => "TCP_DENIED:02"
					"[rsa][message][id1]" => "TCP_DENIED:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_DENIED:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_DENIED:01"
				add_field => {
					"[event][id]" => "TCP_DENIED:01"
					"[rsa][message][id1]" => "TCP_DENIED:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId190
	# line in RSA:  <fld20> <fld21> <processing_time> <saddr> <username> <group_object> <fld88> <disposition> {"<category>" | <category>} <web_referer> <resultcode> <action> <web_method> <content_type> <network_service> <web_host> <dport> <webpage> <web_query> <fld66> {"<user_agent>" | <user_agent>} <hostip> <sbytes> <rbytes> {"<virusname>" | <virusname>}
	else if [logstash][msgparser][id] == "msgParserId190" {
		grok {
			match => { "message" => "^[\s]*(?<fld20>[^\s]*)[\s]+(?<fld21>[^\s]*)[\s]+(?<processing_time>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+(?<group_object>[^\s]*)[\s]+(?<fld88>[^\s]*)[\s]+(?<disposition>[^\s]*)[\s]+(\"(?<category>[^\"]*)\"[\s]+|[\s]*(?<category>[^\s]*))[\s]+(?<web_referer>[^\s]*)[\s]+(?<resultcode>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<web_method>[^\s]*)[\s]+(?<content_type>[^\s]*)[\s]+(?<network_service>[^\s]*)[\s]+(?<web_host>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<webpage>[^\s]*)[\s]+(?<web_query>[^\s]*)[\s]+(?<fld66>[^\s]*)[\s]+(\"(?<user_agent>[^\"]*)\"[\s]+|[\s]*(?<user_agent>[^\s]*))[\s]+(?<hostip>[^\s]*)[\s]+(?<sbytes>[^\s]*)[\s]+(?<rbytes>[^\s]*)[\s]+(\"(?<virusname>[^\"]*)\"[\s]+|[\s]*(?<virusname>.*))$" }
			id => "msgParserId190"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "TCP_ERR_MISS" {
		# MESSAGE TCP_ERR_MISS:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_ERR_MISS:03"
				add_field => {
					"[event][id]" => "TCP_ERR_MISS:03"
					"[rsa][message][id1]" => "TCP_ERR_MISS:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_ERR_MISS:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_ERR_MISS:02"
				add_field => {
					"[event][id]" => "TCP_ERR_MISS:02"
					"[rsa][message][id1]" => "TCP_ERR_MISS:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_ERR_MISS:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_ERR_MISS:01"
				add_field => {
					"[event][id]" => "TCP_ERR_MISS:01"
					"[rsa][message][id1]" => "TCP_ERR_MISS:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_ERR_MISS
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_ERR_MISS"
				add_field => {
					"[event][id]" => "TCP_ERR_MISS"
					"[rsa][message][id1]" => "TCP_ERR_MISS"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId191
	# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> { "<filter>" "<user_agent>" | <filter> "<user_agent>" | <filter> <user_agent> | "<filter>" | <filter> } <virusname> <service> <url> <webpage>
	else if [logstash][msgparser][id] == "msgParserId191" {
		grok {
			match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<processing_time>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<resultcode>[^\s]*)[\s]+(?<sbytes>[^\s]*)[\s]+(?<web_method>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+(?<h_code>[^\s]*)[\s]+(?<web_host>[^\s]*)[\s]+(?<content_type>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<rbytes>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<network_service>[^\s]*)[\s]+(?<duration>[^\s]*)[\s]+(?<dtransaddr>[^\s]*)[\s]+(?<group_object>[^\s]*)[\s]+(?<fld68>[^\s]*)[\s]+(?<disposition>[^\s]*)[\s]+([\s]*\"(?<filter>[^\"]*)\"[\s]+\"(?<user_agent>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+\"(?<user_agent>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+(?<user_agent>[^\s]*)[\s]+|[\s]*\"(?<filter>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+)[\s]+(?<virusname>[^\s]*)[\s]+(?<service>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+(?<webpage>.*)$" }
			id => "msgParserId191"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "TCP_LOOP" {
		# MESSAGE TCP_LOOP:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_LOOP:03"
				add_field => {
					"[event][id]" => "TCP_LOOP:03"
					"[rsa][message][id1]" => "TCP_LOOP:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_LOOP:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_LOOP:02"
				add_field => {
					"[event][id]" => "TCP_LOOP:02"
					"[rsa][message][id1]" => "TCP_LOOP:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_LOOP:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_LOOP:01"
				add_field => {
					"[event][id]" => "TCP_LOOP:01"
					"[rsa][message][id1]" => "TCP_LOOP:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_LOOP
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_LOOP"
				add_field => {
					"[event][id]" => "TCP_LOOP"
					"[rsa][message][id1]" => "TCP_LOOP"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_MISS_RST" {
		# MESSAGE TCP_MISS_RST:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_MISS_RST:03"
				add_field => {
					"[event][id]" => "TCP_MISS_RST:03"
					"[rsa][message][id1]" => "TCP_MISS_RST:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_MISS_RST:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_MISS_RST:02"
				add_field => {
					"[event][id]" => "TCP_MISS_RST:02"
					"[rsa][message][id1]" => "TCP_MISS_RST:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_MISS_RST:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_MISS_RST:01"
				add_field => {
					"[event][id]" => "TCP_MISS_RST:01"
					"[rsa][message][id1]" => "TCP_MISS_RST:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_MISS_RST
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_MISS_RST"
				add_field => {
					"[event][id]" => "TCP_MISS_RST"
					"[rsa][message][id1]" => "TCP_MISS_RST"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_PARTIAL_MISS" {
		# MESSAGE TCP_PARTIAL_MISS:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_PARTIAL_MISS:03"
				add_field => {
					"[event][id]" => "TCP_PARTIAL_MISS:03"
					"[rsa][message][id1]" => "TCP_PARTIAL_MISS:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_PARTIAL_MISS:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_PARTIAL_MISS:02"
				add_field => {
					"[event][id]" => "TCP_PARTIAL_MISS:02"
					"[rsa][message][id1]" => "TCP_PARTIAL_MISS:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_PARTIAL_MISS:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_PARTIAL_MISS:01"
				add_field => {
					"[event][id]" => "TCP_PARTIAL_MISS:01"
					"[rsa][message][id1]" => "TCP_PARTIAL_MISS:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_PARTIAL_MISS
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_PARTIAL_MISS"
				add_field => {
					"[event][id]" => "TCP_PARTIAL_MISS"
					"[rsa][message][id1]" => "TCP_PARTIAL_MISS"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_POLICY_REDIRECT" {
		# MESSAGE TCP_POLICY_REDIRECT:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_POLICY_REDIRECT:03"
				add_field => {
					"[event][id]" => "TCP_POLICY_REDIRECT:03"
					"[rsa][message][id1]" => "TCP_POLICY_REDIRECT:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_POLICY_REDIRECT:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_POLICY_REDIRECT:02"
				add_field => {
					"[event][id]" => "TCP_POLICY_REDIRECT:02"
					"[rsa][message][id1]" => "TCP_POLICY_REDIRECT:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_POLICY_REDIRECT:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_POLICY_REDIRECT:01"
				add_field => {
					"[event][id]" => "TCP_POLICY_REDIRECT:01"
					"[rsa][message][id1]" => "TCP_POLICY_REDIRECT:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_POLICY_REDIRECT
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_POLICY_REDIRECT"
				add_field => {
					"[event][id]" => "TCP_POLICY_REDIRECT"
					"[rsa][message][id1]" => "TCP_POLICY_REDIRECT"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_REFRESH_MISS" {
		# MESSAGE TCP_REFRESH_MISS:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_REFRESH_MISS:03"
				add_field => {
					"[event][id]" => "TCP_REFRESH_MISS:03"
					"[rsa][message][id1]" => "TCP_REFRESH_MISS:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_REFRESH_MISS:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_REFRESH_MISS:02"
				add_field => {
					"[event][id]" => "TCP_REFRESH_MISS:02"
					"[rsa][message][id1]" => "TCP_REFRESH_MISS:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_REFRESH_MISS:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_REFRESH_MISS:01"
				add_field => {
					"[event][id]" => "TCP_REFRESH_MISS:01"
					"[rsa][message][id1]" => "TCP_REFRESH_MISS:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_REFRESH_MISS
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_REFRESH_MISS"
				add_field => {
					"[event][id]" => "TCP_REFRESH_MISS"
					"[rsa][message][id1]" => "TCP_REFRESH_MISS"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_RESCAN_HIT" {
		# MESSAGE TCP_RESCAN_HIT:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_RESCAN_HIT:03"
				add_field => {
					"[event][id]" => "TCP_RESCAN_HIT:03"
					"[rsa][message][id1]" => "TCP_RESCAN_HIT:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_RESCAN_HIT:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_RESCAN_HIT:02"
				add_field => {
					"[event][id]" => "TCP_RESCAN_HIT:02"
					"[rsa][message][id1]" => "TCP_RESCAN_HIT:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_RESCAN_HIT:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_RESCAN_HIT:01"
				add_field => {
					"[event][id]" => "TCP_RESCAN_HIT:01"
					"[rsa][message][id1]" => "TCP_RESCAN_HIT:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_RESCAN_HIT
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_RESCAN_HIT"
				add_field => {
					"[event][id]" => "TCP_RESCAN_HIT"
					"[rsa][message][id1]" => "TCP_RESCAN_HIT"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCP_SPLASHED" {
		# MESSAGE TCP_SPLASHED:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_SPLASHED:03"
				add_field => {
					"[event][id]" => "TCP_SPLASHED:03"
					"[rsa][message][id1]" => "TCP_SPLASHED:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_SPLASHED:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_SPLASHED:02"
				add_field => {
					"[event][id]" => "TCP_SPLASHED:02"
					"[rsa][message][id1]" => "TCP_SPLASHED:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_SPLASHED:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_SPLASHED:01"
				add_field => {
					"[event][id]" => "TCP_SPLASHED:01"
					"[rsa][message][id1]" => "TCP_SPLASHED:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TCP_SPLASHED
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TCP_SPLASHED"
				add_field => {
					"[event][id]" => "TCP_SPLASHED"
					"[rsa][message][id1]" => "TCP_SPLASHED"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TUNNELED" {
		# MESSAGE TUNNELED:03
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> "<filter>" "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} \"%{filter}\" \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TUNNELED:03"
				add_field => {
					"[event][id]" => "TUNNELED:03"
					"[rsa][message][id1]" => "TUNNELED:03"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TUNNELED:02
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> "<user_agent>" <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} \"%{user_agent}\" %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TUNNELED:02"
				add_field => {
					"[event][id]" => "TUNNELED:02"
					"[rsa][message][id1]" => "TUNNELED:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TUNNELED:01
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <user_agent> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{user_agent} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TUNNELED:01"
				add_field => {
					"[event][id]" => "TUNNELED:01"
					"[rsa][message][id1]" => "TUNNELED:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE TUNNELED
		# line in RSA:   <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> <filter> <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{processing_time} %{saddr} %{action} %{resultcode} %{sbytes} %{web_method} %{username} %{h_code} %{web_host} %{content_type} %{dport} %{rbytes} %{daddr} %{network_service} %{duration} %{dtransaddr} %{group_object} %{fld68} %{disposition} %{filter} %{virusname} %{service} %{url} %{webpage}" }
				id => "message-TUNNELED"
				add_field => {
					"[event][id]" => "TUNNELED"
					"[rsa][message][id1]" => "TUNNELED"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "-" {
		# MESSAGE -
		# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs-uri-extension=<web_extension>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs-uri-extension=%{web_extension},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3}" }
				id => "message--"
				add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
					"[event][id]" => "-"
					"[rsa][message][id1]" => "-"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE -:01
		# line in RSA:  <fld1> <fld2> <processing_time> <saddr> <action> <resultcode> <sbytes> <web_method> <username> <h_code> <web_host> <content_type> <dport> <rbytes> <daddr> <network_service> <duration> <dtransaddr> <group_object> <fld68> <disposition> { "<filter>" "<user_agent>" | <filter> "<user_agent>" | <filter> <user_agent> | "<filter>" | <filter> } <virusname> <service> <url> <webpage>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<processing_time>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<resultcode>[^\s]*)[\s]+(?<sbytes>[^\s]*)[\s]+(?<web_method>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+(?<h_code>[^\s]*)[\s]+(?<web_host>[^\s]*)[\s]+(?<content_type>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<rbytes>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<network_service>[^\s]*)[\s]+(?<duration>[^\s]*)[\s]+(?<dtransaddr>[^\s]*)[\s]+(?<group_object>[^\s]*)[\s]+(?<fld68>[^\s]*)[\s]+(?<disposition>[^\s]*)[\s]+([\s]*\"(?<filter>[^\"]*)\"[\s]+\"(?<user_agent>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+\"(?<user_agent>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+(?<user_agent>[^\s]*)[\s]+|[\s]*\"(?<filter>[^\"]*)\"[\s]+|[\s]*(?<filter>[^\s]*)[\s]+)[\s]+(?<virusname>[^\s]*)[\s]+(?<service>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+(?<webpage>.*)$" }
				id => "message--:01"
				add_field => {
					"[event][id]" => "-:01"
					"[rsa][message][id1]" => "-:01"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId192
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs-uri-extension=<web_extension>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>
	else if [logstash][msgparser][id] == "msgParserId192" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs-uri-extension=%{web_extension},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3}" }
			id => "msgParserId192"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId193
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs-uri-extension=<web_extension>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>,localtime=<fld5>,s-icap-status=<fld4>,s-icap-info=<fld6>
	else if [logstash][msgparser][id] == "msgParserId193" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs-uri-extension=%{web_extension},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3},localtime=%{fld5},s-icap-status=%{fld4},s-icap-info=%{fld6}" }
			id => "msgParserId193"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId194
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs-uri-extension=<web_extension>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>,localtime=<fld5>,x-bluecoat-application-name=<fld4>,x-bluecoat-application-operation=<fld6>,s-icap-status=<fld7>,s-icap-info=<fld8>
	else if [logstash][msgparser][id] == "msgParserId194" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs-uri-extension=%{web_extension},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3},localtime=%{fld5},x-bluecoat-application-name=%{fld4},x-bluecoat-application-operation=%{fld6},s-icap-status=%{fld7},s-icap-info=%{fld8}" }
			id => "msgParserId194"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId195
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs-uri-extension=<web_extension>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>,s-icap-status=<fld4>,s-icap-info=<fld5>
	else if [logstash][msgparser][id] == "msgParserId195" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs-uri-extension=%{web_extension},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3},s-icap-status=%{fld4},s-icap-info=%{fld5}" }
			id => "msgParserId195"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId196
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs-uri-extension=<web_extension>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>,x-bluecoat-application-name=<fld4>,x-bluecoat-application-operation=<fld6>
	else if [logstash][msgparser][id] == "msgParserId196" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs-uri-extension=%{web_extension},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3},x-bluecoat-application-name=%{fld4},x-bluecoat-application-operation=%{fld6}" }
			id => "msgParserId196"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId197
	# line in RSA: date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs-uri-extension=<web_extension>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>
	else if [logstash][msgparser][id] == "msgParserId197" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs-uri-extension=%{web_extension},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3}" }
			id => "msgParserId197"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId198
	# line in RSA:  Write connection closed(<fld81>) <event_type> ../<fld78>/<filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId198" {
		dissect {
			mapping => { "message" => "Write connection closed(%{fld81}) %{event_type} ../%{fld78}/%{filename} %{fld80}" }
			id => "msgParserId198"
			add_field => {
				"event_time_string" => "%{htime}"
				"result" => "Authentication agent rejected request"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "500000" {
		# MESSAGE 500000
		# line in RSA: Dynamic categorization error: unexpected response code <resultcode> from service(<fld81>) <event_type> {../<filename>|<filename>} <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Dynamic[\s]+categorization[\s]+error:[\s]+unexpected[\s]+response[\s]+code[\s]+(?<resultcode>[^\s]*)[\s]+from[\s]+service\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
				id => "message-500000"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "500000"
					"[rsa][message][id1]" => "500000"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 500000:01
		# line in RSA: Dynamic categorization error: Entity not currently in use.(<fld1>) <event_type> <filename> <fld80> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dynamic categorization error: Entity not currently in use.(%{fld1}) %{event_type} %{filename} %{fld80}" }
				id => "message-500000:01"
				add_field => {
					"[event][id]" => "500000:01"
					"[rsa][message][id1]" => "500000:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId202
	# line in RSA: Health check error: <result>.<space> (<fld81>) <event_type> {../<filename>|<filename>} <fld80>
	else if [logstash][msgparser][id] == "msgParserId202" {
		grok {
			match => { "message" => "^Health[\s]+check[\s]+error:[\s]+(?<result>[^\.]*)\.(?<space>[^\s]*)[\s]+\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+(\.\./(?<filename>[^\s]*)|(?<filename>[^\s]*))[\s]+(?<fld80>.*)$" }
			id => "msgParserId202"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId204
	# line in RSA:  <fld28>: <result>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId204" {
		grok {
			match => { "message" => "^[\s]*(?<fld28>[^:]*):[\s]+(?<result>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId204"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId206
	# line in RSA:  Abnormal receive request termination of connection from local port <sport> to advanced forwarded server <saddr>. <result>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId206" {
		grok {
			match => { "message" => "^[\s]*Abnormal[\s]+receive[\s]+request[\s]+termination[\s]+of[\s]+connection[\s]+from[\s]+local[\s]+port[\s]+(?<sport>[^\s]*)[\s]+to[\s]+advanced[\s]+forwarded[\s]+server[\s]+(?<saddr>[^\.]*)\.[\s]+(?<result>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId206"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "140003" {
		# MESSAGE 140003
		# line in RSA:  SSH admin at <saddr> '<username>', has overridden the default CLI timeout to <fld27> minutes for session <fld28>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*SSH[\s]+admin[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+'(?<username>[^']*)',[\s]+has[\s]+overridden[\s]+the[\s]+default[\s]+CLI[\s]+timeout[\s]+to[\s]+(?<fld27>[^\s]*)[\s]+minutes[\s]+for[\s]+session[\s]+(?<fld28>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-140003"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "140003"
					"[rsa][message][id1]" => "140003"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 140003:01
		# line in RSA: Sending <fld35> to Blue Coat(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Sending[\s]+(?<fld35>[^\s]*)[\s]+to[\s]+Blue[\s]+Coat\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-140003:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "140003:01"
					"[rsa][message][id1]" => "140003:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId209
	# line in RSA:  Realm "<fld29>", server <saddr>: <result>.(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId209" {
		grok {
			match => { "message" => "^[\s]*Realm[\s]+\"(?<fld29>[^\"]*)\",[\s]+server[\s]+(?<saddr>[^:]*):[\s]+(?<result>[^\.]*)\.\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId209"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "3D0001" {
		# MESSAGE 3D0001
		# line in RSA: { Receive failed due to dropped connection by peer | Receive failed }. Using service <service> on local port <sport> with total retransmits <fld26> and a high water packet retransmit of <fld27>.(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Receive[\s]+failed[\s]+due[\s]+to[\s]+dropped[\s]+connection[\s]+by[\s]+peer[\s]+|[\s]*Receive[\s]+failed[\s]+)\.[\s]+Using[\s]+service[\s]+(?<service>[^\s]*)[\s]+on[\s]+local[\s]+port[\s]+(?<sport>[^\s]*)[\s]+with[\s]+total[\s]+retransmits[\s]+(?<fld26>[^\s]*)[\s]+and[\s]+a[\s]+high[\s]+water[\s]+packet[\s]+retransmit[\s]+of[\s]+(?<fld27>[^\.]*)\.\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-3D0001"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3D0001"
					"[rsa][message][id1]" => "3D0001"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3D0001:02
		# line in RSA: { Receive failed due to dropped connection by peer | Receive failed }. Using service <service> on local port <sport> errno=<resultcode>.(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Receive[\s]+failed[\s]+due[\s]+to[\s]+dropped[\s]+connection[\s]+by[\s]+peer[\s]+|[\s]*Receive[\s]+failed[\s]+)\.[\s]+Using[\s]+service[\s]+(?<service>[^\s]*)[\s]+on[\s]+local[\s]+port[\s]+(?<sport>[^\s]*)[\s]+errno=(?<resultcode>[^\.]*)\.\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-3D0001:02"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3D0001:02"
					"[rsa][message][id1]" => "3D0001:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3D0001:01
		# line in RSA: { Receive failed due to dropped connection by peer | Receive failed }. Using service <service>(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Receive[\s]+failed[\s]+due[\s]+to[\s]+dropped[\s]+connection[\s]+by[\s]+peer[\s]+|[\s]*Receive[\s]+failed[\s]+)\.[\s]+Using[\s]+service[\s]+(?<service>[^\(]*)\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-3D0001:01"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3D0001:01"
					"[rsa][message][id1]" => "3D0001:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 3D0001:03
		# line in RSA: Parse buffer is full. Using service <service> on local port <sport>.(<fld25>) <event_type> { ../<filename> | <filename> } <fld80>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Parse[\s]+buffer[\s]+is[\s]+full\.[\s]+Using[\s]+service[\s]+(?<service>[^\s]*)[\s]+on[\s]+local[\s]+port[\s]+(?<sport>[^\.]*)\.\((?<fld25>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
				id => "message-3D0001:03"
				add_field => {
				"event_time_string" => "%{htime}"
					"[event][id]" => "3D0001:03"
					"[rsa][message][id1]" => "3D0001:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId214
	# line in RSA: <fld10> f=assertion failure p=ASSERT m=<event_description>(<fld11>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId214" {
		grok {
			match => { "message" => "^(?<fld10>[^\s]*)[\s]+f=assertion[\s]+failure[\s]+p=ASSERT[\s]+m=(?<event_description>[^\(]*)\((?<fld11>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId214"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId217
	# line in RSA: Unexpected disposition by "<fld36>" for "<fld38>(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId217" {
		grok {
			match => { "message" => "^Unexpected[\s]+disposition[\s]+by[\s]+\"(?<fld36>[^\"]*)\"[\s]+for[\s]+\"(?<fld38>[^\(]*)\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId217"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId227
	# line in RSA: Local: Authentication failed from <daddr>: no such user in realm '<username>'(<fld82>) <event_type> <filename> <fld80>
	else if [logstash][msgparser][id] == "msgParserId227" {
		dissect {
			mapping => { "message" => "Local: Authentication failed from %{daddr}: no such user in realm '%{username}'(%{fld82}) %{event_type} %{filename} %{fld80}" }
			id => "msgParserId227"
			add_field => {
				"event_time_string" => "%{htime}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId228
	# line in RSA: Access Log (<event_log>): Maximum log size reached.Logging disabled as per overflow policy.(<fld81>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId228" {
		grok {
			match => { "message" => "^Access[\s]+Log[\s]+\((?<event_log>[^\)]*)\):[\s]+Maximum[\s]+log[\s]+size[\s]+reached\.Logging[\s]+disabled[\s]+as[\s]+per[\s]+overflow[\s]+policy\.\((?<fld81>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId228"
			add_field => {
				"event_time_string" => "%{htime}"
				"event_description" => "Maximum log size reached.Logging disabled as per overflow policy. "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId229
	# line in RSA: link { up | down} event for interface <fld31> (<fld32>) <event_type> { ../<filename> | <filename> } <fld80>
	else if [logstash][msgparser][id] == "msgParserId229" {
		grok {
			match => { "message" => "^link[\s]+([\s]*up[\s]+|[\s]*down)[\s]+event[\s]+for[\s]+interface[\s]+(?<fld31>[^\s]*)[\s]+\((?<fld32>[^\)]*)\)[\s]+(?<event_type>[^\s]*)[\s]+([\s]*\.\./(?<filename>[^\s]*)[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+(?<fld80>.*)$" }
			id => "msgParserId229"
			add_field => {
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId230
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>
	else if [logstash][msgparser][id] == "msgParserId230" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3}" }
			id => "msgParserId230"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId231
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>
	else if [logstash][msgparser][id] == "msgParserId231" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3}" }
			id => "msgParserId231"
			add_field => {
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId232
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>,cs-uri-extension=<web_extension>
	else if [logstash][msgparser][id] == "msgParserId232" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3},cs-uri-extension=%{web_extension}" }
			id => "msgParserId232"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId233
	# line in RSA: <fld1>
	else if [logstash][msgparser][id] == "msgParserId233" {
		dissect {
			mapping => { "message" => "%{fld1}" }
			id => "msgParserId233"
			add_field => {
				"vid" => "%{p_msgid}"
				"event_time_string" => "%{htime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId234
	# line in RSA:  date=<fld1>,time=<fld2>,time-taken=<processing_time>,c-ip=<saddr>,s-action=<action>,sc-status=<resultcode>,sc-bytes=<sbytes>,cs-bytes=<rbytes>,cs-method=<web_method>,cs-user=<username>,cs-username=<username>,cs-uri-username=<username>,s-hierarchy=<h_code>,cs-host=<web_host>,rs(Content-Type)=<content_type>,cs-uri-port=<dport>,s-ip=<hostip>,r-ip=<dtransaddr>,r-supplier-ip=<fld37>,r-dns=<fld38>,c-port=<sport>,cs-category=<category>,cs-uri-scheme=<network_service>,duration=<duration>,s-supplier-ip=<daddr>,cs-auth-group=<group_object>,s-supplier-name=<fld68>,sc-filter-result=<disposition>,sc-filter-category=<filter>,cs(User-Agent)=<user_agent>,x-virus-id=<virusname>,s-sitename=<service>,cs-uri=<url>,cs-uri-path=<webpage>,x-exception-id=<result>,cs-categories=<category>,cs(Referer)=<web_referer>,cs-uri-query=<web_query>,cs-uri-extension=<web_extension>,cs(Cookie)=<web_cookie>,s-computername=<hostname>,s-port=<network_port>,cs-version=<version>,cs-auth-groups=<group_object>,cs-uri-stem=<fld3>
	else if [logstash][msgparser][id] == "msgParserId234" {
		dissect {
			mapping => { "message" => "date=%{fld1},time=%{fld2},time-taken=%{processing_time},c-ip=%{saddr},s-action=%{action},sc-status=%{resultcode},sc-bytes=%{sbytes},cs-bytes=%{rbytes},cs-method=%{web_method},cs-user=%{username},cs-username=%{username},cs-uri-username=%{username},s-hierarchy=%{h_code},cs-host=%{web_host},rs(Content-Type)=%{content_type},cs-uri-port=%{dport},s-ip=%{hostip},r-ip=%{dtransaddr},r-supplier-ip=%{fld37},r-dns=%{fld38},c-port=%{sport},cs-category=%{category},cs-uri-scheme=%{network_service},duration=%{duration},s-supplier-ip=%{daddr},cs-auth-group=%{group_object},s-supplier-name=%{fld68},sc-filter-result=%{disposition},sc-filter-category=%{filter},cs(User-Agent)=%{user_agent},x-virus-id=%{virusname},s-sitename=%{service},cs-uri=%{url},cs-uri-path=%{webpage},x-exception-id=%{result},cs-categories=%{category},cs(Referer)=%{web_referer},cs-uri-query=%{web_query},cs-uri-extension=%{web_extension},cs(Cookie)=%{web_cookie},s-computername=%{hostname},s-port=%{network_port},cs-version=%{version},cs-auth-groups=%{group_object},cs-uri-stem=%{fld3}" }
			id => "msgParserId234"
			add_field => {
				"event_source" => "%{hostname}"
				"dhost" => "%{web_host}"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_cacheflowelffmsg.json"
#			template_name => "cacheflowelff_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

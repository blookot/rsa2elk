# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "netscreen"
			"[observer][name]" => "Netscreen"
			"[observer][type]" => "Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1>: NetScreen device_id=<hfld2> [No Name]system-<hseverity>-<messageid>(<hfld3>): <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1}: NetScreen device_id=%{hfld2} [No Name]system-%{hseverity}-%{messageid}(%{hfld3}): %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hfld1>: NetScreen device_id=<hfld2> [<hvsys>]system-<hseverity>-<messageid>(<hfld3>): <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1}: NetScreen device_id=%{hfld2} [%{hvsys}]system-%{hseverity}-%{messageid}(%{hfld3}): %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hfld1>: NetScreen device_id=<hfld2> system-<hseverity>-<messageid>(<hfld3>): <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1}: NetScreen device_id=%{hfld2} system-%{hseverity}-%{messageid}(%{hfld3}): %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1>: NetScreen device_id=<hfld2> {[No Name]system|[<hvsys>]system|system}-<hseverity>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^:]*):[\s]+NetScreen[\s]+device_id=(?<hfld2>[^\s]*)[\s]+(\[No[\s]+Name\]system|\[(?<hvsys>[^\]]*)\]system|system)\-(?<hseverity>[^\-]*)\-(?<messageid>[^:]*):[\s]+(?<message>.*)$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_netscreenmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "00001" {
		# MESSAGE 00001
		# line in RSA:  <zone> address <interface> with ip address <hostip> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{zone} address %{interface} with ip address %{hostip} has been %{disposition}" }
				id => "message-00001"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001"
					"[rsa][message][id1]" => "00001"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00001:01
		# line in RSA:  <zone> address <interface> with domain name <domain> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{zone} address %{interface} with domain name %{domain} has been %{disposition}" }
				id => "message-00001:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:01"
					"[rsa][message][id1]" => "00001:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00001:02
		# line in RSA:  Address <group_object> for { ip address <hostip> | domain address <domain> } in zone <zone> has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Address[\s]+(?<group_object>[^\s]*)[\s]+for[\s]+([\s]*ip[\s]+address[\s]+(?<hostip>[^\s]*)[\s]+|[\s]*domain[\s]+address[\s]+(?<domain>[^\s]*)[\s]+)[\s]+in[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00001:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:02"
					"[rsa][message][id1]" => "00001:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00001:03
		# line in RSA:  arp entry <hostip> interface changed!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "arp entry %{hostip} interface changed!" }
				id => "message-00001:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:03"
					"[rsa][message][id1]" => "00001:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00001:04
		# line in RSA:  Address <group_object> for { IP address <hostip> | domain address <domain> } in zone <zone> has been <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport> { session (<fld1>) | session.<fld1> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Address[\s]+(?<group_object>[^\s]*)[\s]+for[\s]+([\s]*IP[\s]+address[\s]+(?<hostip>[^\s]*)[\s]+|[\s]*domain[\s]+address[\s]+(?<domain>[^\s]*)[\s]+)[\s]+in[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+([\s]*session[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*session\.(?<fld1>[^\s]*)[\s]+)$" }
				id => "message-00001:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:04"
					"[rsa][message][id1]" => "00001:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00001:05
		# line in RSA: <fld2>: Address <group_object> for ip address <hostip> in zone <zone> has been <disposition> from host <saddr> session {(<fld1>)|<fld1>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^:]*):[\s]+Address[\s]+(?<group_object>[^\s]*)[\s]+for[\s]+ip[\s]+address[\s]+(?<hostip>[^\s]*)[\s]+in[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+session[\s]+(\((?<fld1>[^\)]*)\)|(?<fld1>.*))$" }
				id => "message-00001:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:05"
					"[rsa][message][id1]" => "00001:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00001:06
		# line in RSA:  Address group <group_object> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Address group %{group_object} %{info}" }
				id => "message-00001:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:06"
					"[rsa][message][id1]" => "00001:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00001:07
		# line in RSA:   Policy ID=<policy_id> Rate=<fld2> exceeds threshold
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy ID=%{policy_id} Rate=%{fld2} exceeds threshold" }
				id => "message-00001:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:07"
					"[rsa][message][id1]" => "00001:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00001:08
		# line in RSA:   Address { MIP(<interface>) | <group_object> } for IP address  <hostip>/<mask> in zone <zone> has been <disposition> by { admin <username> | <username> } via NSRP Peer  session. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Address[\s]+([\s]*MIP\((?<interface>[^\)]*)\)[\s]+|[\s]*(?<group_object>[^\s]*)[\s]+)[\s]+for[\s]+IP[\s]+address[\s]+(?<hostip>[^/]*)/(?<mask>[^\s]*)[\s]+in[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+([\s]*admin[\s]+(?<username>[^\s]*)[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+via[\s]+NSRP[\s]+Peer[\s]+session\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00001:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:08"
					"[rsa][message][id1]" => "00001:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00001:09
		# line in RSA:   Address { MIP(<interface>) | <group_object> } for IP address  <hostip>/<mask> in zone <zone> has been <disposition> by <username> via <logon_type> from host <saddr>:<sport> session. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Address[\s]+([\s]*MIP\((?<interface>[^\)]*)\)[\s]+|[\s]*(?<group_object>[^\s]*)[\s]+)[\s]+for[\s]+IP[\s]+address[\s]+(?<hostip>[^/]*)/(?<mask>[^\s]*)[\s]+in[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+session\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00001:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00001:09"
					"[rsa][message][id1]" => "00001:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00002" {
		# MESSAGE 00002:03
		# line in RSA:  Admin user <administrator> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user %{administrator} has been %{disposition}" }
				id => "message-00002:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:03"
					"[rsa][message][id1]" => "00002:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:04
		# line in RSA:  E-mail address <user_address> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "E-mail address %{user_address} has been %{disposition}" }
				id => "message-00002:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:04"
					"[rsa][message][id1]" => "00002:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:05
		# line in RSA:  E-mail notification has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "E-mail notification has been %{disposition}" }
				id => "message-00002:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:05"
					"[rsa][message][id1]" => "00002:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:06
		# line in RSA:  Inclusion of traffic logs with e-mail notification of event alarms has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Inclusion of traffic logs with e-mail notification of event alarms has been %{disposition}" }
				id => "message-00002:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:06"
					"[rsa][message][id1]" => "00002:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:07
		# line in RSA: LCD display has been <action> and the LCD control keys have been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LCD display has been %{action} and the LCD control keys have been %{disposition}" }
				id => "message-00002:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:07"
					"[rsa][message][id1]" => "00002:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:55
		# line in RSA: HTTP component blocking for <fld2> is <disposition> on zone <zone> by <username> via <logon_type> from host <saddr> to <daddr>:<dport>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HTTP component blocking for %{fld2} is %{disposition} on zone %{zone} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport}. (%{fld1})" }
				id => "message-00002:55"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:55"
					"[rsa][message][id1]" => "00002:55"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:08
		# line in RSA: LCD display has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LCD display has been %{disposition}" }
				id => "message-00002:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:08"
					"[rsa][message][id1]" => "00002:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:09
		# line in RSA: LCD control keys have been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LCD control keys have been %{disposition}" }
				id => "message-00002:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:09"
					"[rsa][message][id1]" => "00002:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:10
		# line in RSA: Mail server <hostip> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Mail server %{hostip} has been %{disposition}" }
				id => "message-00002:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:10"
					"[rsa][message][id1]" => "00002:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:11
		# line in RSA: Management restriction for <hostip> <fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Management restriction for %{hostip} %{fld2} has been %{disposition}" }
				id => "message-00002:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:11"
					"[rsa][message][id1]" => "00002:11"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:12
		# line in RSA: <change_attribute> has been restored from <change_old> to default port <change_new>{. <info>|<info>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
		# MESSAGE 00002:15
		# line in RSA: System configuration has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System configuration has been %{disposition}" }
				id => "message-00002:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:15"
					"[rsa][message][id1]" => "00002:15"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:17
		# line in RSA: Policy ID=<policy_id> Rate=<fld2> exceeds threshold
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy ID=%{policy_id} Rate=%{fld2} exceeds threshold" }
				id => "message-00002:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:17"
					"[rsa][message][id1]" => "00002:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:18
		# line in RSA: Unexpected error from { e-mail | email } server(<fld2>):
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Unexpected[\s]+error[\s]+from[\s]+([\s]*e\-mail[\s]+|[\s]*email[\s]+)[\s]+server\((?<fld2>[^\)]*)\):$" }
				id => "message-00002:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:18"
					"[rsa][message][id1]" => "00002:18"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:19
		# line in RSA: Web Admin <change_attribute> value has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web Admin %{change_attribute} value has been changed from %{change_old} to %{change_new}" }
				id => "message-00002:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:19"
					"[rsa][message][id1]" => "00002:19"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:20
		# line in RSA: Root admin password restriction of minimum <fld2> characters has been <disposition> by admin { <administrator> from Console | <administrator> from host <saddr> | <administrator> } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Root[\s]+admin[\s]+password[\s]+restriction[\s]+of[\s]+minimum[\s]+(?<fld2>[^\s]*)[\s]+characters[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+from[\s]+Console[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)[\s]+$" }
				id => "message-00002:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:20"
					"[rsa][message][id1]" => "00002:20"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:21
		# line in RSA: { Root admin | <fld2> admin } { password | name } has been changed by admin <administrator>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Root[\s]+admin[\s]+|[\s]*(?<fld2>[^\s]*)[\s]+admin[\s]+)[\s]+([\s]*password[\s]+|[\s]*name[\s]+)[\s]+has[\s]+been[\s]+changed[\s]+by[\s]+admin[\s]+(?<administrator>.*)$" }
				id => "message-00002:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:21"
					"[rsa][message][id1]" => "00002:21"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:22
		# line in RSA: <change_attribute> from <protocol> before administrative session disconnects has been changed from <change_old> to <change_new> by admin { <administrator> from Console| <administrator> from host <saddr> | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<change_attribute>[^\s]*)[\s]+from[\s]+(?<protocol>[^\s]*)[\s]+before[\s]+administrative[\s]+session[\s]+disconnects[\s]+has[\s]+been[\s]+changed[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>[^\s]*)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+from[\s]+Console|[\s]*(?<administrator>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00002:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:22"
					"[rsa][message][id1]" => "00002:22"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:23
		# line in RSA: Root admin access restriction through console only has been <disposition> by admin { <administrator> from host <saddr> | <administrator> from Console| <administrator> } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Root[\s]+admin[\s]+access[\s]+restriction[\s]+through[\s]+console[\s]+only[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+from[\s]+Console|[\s]*(?<administrator>[^\s]*)[\s]+)[\s]+$" }
				id => "message-00002:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:23"
					"[rsa][message][id1]" => "00002:23"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:24
		# line in RSA: Admin access restriction of <protocol> administration through tunnel only has been <disposition> by admin <administrator> from {host <saddr>|Console}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Admin[\s]+access[\s]+restriction[\s]+of[\s]+(?<protocol>[^\s]*)[\s]+administration[\s]+through[\s]+tunnel[\s]+only[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+admin[\s]+(?<administrator>[^\s]*)[\s]+from[\s]+(host[\s]+(?<saddr>.*)|Console)$" }
				id => "message-00002:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:24"
					"[rsa][message][id1]" => "00002:24"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:25
		# line in RSA: Admin AUTH: Local instance of an <change_attribute> has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin AUTH: Local instance of an %{change_attribute} has been changed from %{change_old} to %{change_new}" }
				id => "message-00002:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:25"
					"[rsa][message][id1]" => "00002:25"
					"[event][categoryid]" => "1402000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:26
		# line in RSA: Cannot connect to e-mail server <hostip>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to e-mail server %{hostip}." }
				id => "message-00002:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:26"
					"[rsa][message][id1]" => "00002:26"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:27
		# line in RSA: Mail server is not configured.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Mail server is not configured." }
				id => "message-00002:27"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:27"
					"[rsa][message][id1]" => "00002:27"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:28
		# line in RSA: Mail recipients were not configured.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Mail recipients were not configured." }
				id => "message-00002:28"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:28"
					"[rsa][message][id1]" => "00002:28"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:29
		# line in RSA: Single use password restriction for read-write administrators has been <disposition> by admin <administrator>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Single use password restriction for read-write administrators has been %{disposition} by admin %{administrator}" }
				id => "message-00002:29"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:29"
					"[rsa][message][id1]" => "00002:29"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:30
		# line in RSA: Admin user "<administrator>" logged in for <logon_type>(<network_service>) management (port <network_port>) from <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user \"%{administrator}\" logged in for %{logon_type}(%{network_service}) management (port %{network_port}) from %{saddr}:%{sport}" }
				id => "message-00002:30"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:30"
					"[rsa][message][id1]" => "00002:30"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:41
		# line in RSA: Admin user "<administrator>" logged out for <logon_type>(<network_service>) management (port <network_port>) from <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user \"%{administrator}\" logged out for %{logon_type}(%{network_service}) management (port %{network_port}) from %{saddr}:%{sport}" }
				id => "message-00002:41"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:41"
					"[rsa][message][id1]" => "00002:41"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:31
		# line in RSA: Admin user "<administrator>" login attempt for <logon_type> <space> (<network_service>) management (port <network_port>) from <saddr>:<sport> <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user \"%{administrator}\" login attempt for %{logon_type} %{space} (%{network_service}) management (port %{network_port}) from %{saddr}:%{sport} %{disposition}" }
				id => "message-00002:31"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:31"
					"[rsa][message][id1]" => "00002:31"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:32
		# line in RSA: { E-mail notification | Transparent virutal } wire mode has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*E\-mail[\s]+notification[\s]+|[\s]*Transparent[\s]+virutal[\s]+)[\s]+wire[\s]+mode[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00002:32"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:32"
					"[rsa][message][id1]" => "00002:32"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:35
		# line in RSA: Malicious URL <url> has been <disposition> for zone <zone>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Malicious URL %{url} has been %{disposition} for zone %{zone}" }
				id => "message-00002:35"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:35"
					"[rsa][message][id1]" => "00002:35"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:36
		# line in RSA: { Bypass-others-IPSec | Bypass non-IP traffic } option has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Bypass\-others\-IPSec[\s]+|[\s]*Bypass[\s]+non\-IP[\s]+traffic[\s]+)[\s]+option[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00002:36"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:36"
					"[rsa][message][id1]" => "00002:36"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:37
		# line in RSA: Logging of { dropped | IKE | SNMP | ICMP } traffic to self has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Logging[\s]+of[\s]+([\s]*dropped[\s]+|[\s]*IKE[\s]+|[\s]*SNMP[\s]+|[\s]*ICMP[\s]+)[\s]+traffic[\s]+to[\s]+self[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00002:37"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:37"
					"[rsa][message][id1]" => "00002:37"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:38
		# line in RSA: Logging of dropped traffic to self (excluding multicast) has been {<disposition> on <zone>|<disposition>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Logging[\s]+of[\s]+dropped[\s]+traffic[\s]+to[\s]+self[\s]+\(excluding[\s]+multicast\)[\s]+has[\s]+been[\s]+((?<disposition>[^\s]*)[\s]+on[\s]+(?<zone>.*)|(?<disposition>.*))$" }
				id => "message-00002:38"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:38"
					"[rsa][message][id1]" => "00002:38"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:39
		# line in RSA: Traffic shaping is <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Traffic shaping is %{disposition}" }
				id => "message-00002:39"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:39"
					"[rsa][message][id1]" => "00002:39"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:40
		# line in RSA: Admin account created for '<username>' by <administrator> via <logon_type> from host <saddr> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin account created for '%{username}' by %{administrator} via %{logon_type} from host %{saddr} (%{fld1})" }
				id => "message-00002:40"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:40"
					"[rsa][message][id1]" => "00002:40"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:44
		# line in RSA: ADMIN AUTH: Privilege requested for unknown user <username>. Possible HA syncronization problem.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ADMIN AUTH: Privilege requested for unknown user %{username}. Possible HA syncronization problem." }
				id => "message-00002:44"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:44"
					"[rsa][message][id1]" => "00002:44"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00002:42
		# line in RSA: <change_attribute> for account '<change_old>' has been <disposition> to '<change_new>' { by <administrator> via | via } <logon_type> from host { <saddr> to <daddr>:<dport> | <saddr>:<sport> } (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<change_attribute>[^\s]*)[\s]+for[\s]+account[\s]+'(?<change_old>[^']*)'[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+to[\s]+'(?<change_new>[^']*)'[\s]+([\s]*by[\s]+(?<administrator>[^\s]*)[\s]+via[\s]+|[\s]*via[\s]+)[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+([\s]*(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+|[\s]*(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+)[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00002:42"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:42"
					"[rsa][message][id1]" => "00002:42"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:43
		# line in RSA: Admin account <disposition> for {'<username>'|"<username>"} by <administrator> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Admin[\s]+account[\s]+(?<disposition>[^\s]*)[\s]+for[\s]+('(?<username>[^']*)'|\"(?<username>[^\"]*)\")[\s]+by[\s]+(?<administrator>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00002:43"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:43"
					"[rsa][message][id1]" => "00002:43"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:50
		# line in RSA: Admin account <disposition> for "<username>" by <administrator> via <logon_type> from host <saddr>:<sport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin account %{disposition} for \"%{username}\" by %{administrator} via %{logon_type} from host %{saddr}:%{sport} (%{fld1})" }
				id => "message-00002:50"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:50"
					"[rsa][message][id1]" => "00002:50"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:51
		# line in RSA:  Admin account <disposition> for "<username>" by <administrator> <fld2> via <logon_type> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin account %{disposition} for \"%{username}\" by %{administrator} %{fld2} via %{logon_type} (%{fld1})" }
				id => "message-00002:51"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:51"
					"[rsa][message][id1]" => "00002:51"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:45
		# line in RSA: Extraneous exit is issued by <username> via <logon_type> from host <saddr>:<sport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Extraneous exit is issued by %{username} via %{logon_type} from host %{saddr}:%{sport} (%{fld1})" }
				id => "message-00002:45"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:45"
					"[rsa][message][id1]" => "00002:45"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:47
		# line in RSA: { Ping of Death attack protection | Src Route IP option filtering | Teardrop attack protection | Land attack protection | SYN flood protection } is <disposition> on zone <zone> by <username> via <logon_type> from host <saddr> to <daddr>:<dport>. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Ping[\s]+of[\s]+Death[\s]+attack[\s]+protection[\s]+|[\s]*Src[\s]+Route[\s]+IP[\s]+option[\s]+filtering[\s]+|[\s]*Teardrop[\s]+attack[\s]+protection[\s]+|[\s]*Land[\s]+attack[\s]+protection[\s]+|[\s]*SYN[\s]+flood[\s]+protection[\s]+)[\s]+is[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\.]*)\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00002:47"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:47"
					"[rsa][message][id1]" => "00002:47"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:48
		# line in RSA:  Dropping pkts if not { exactly same with incoming if | in route table } (IP spoof protection) is <disposition> on zone <zone> by <username> via {NSRP Peer|<logon_type> from host <saddr> to <daddr>:<dport>}. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Dropping[\s]+pkts[\s]+if[\s]+not[\s]+([\s]*exactly[\s]+same[\s]+with[\s]+incoming[\s]+if[\s]+|[\s]*in[\s]+route[\s]+table[\s]+)[\s]+\(IP[\s]+spoof[\s]+protection\)[\s]+is[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(NSRP[\s]+Peer|(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\.]*))\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00002:48"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:48"
					"[rsa][message][id1]" => "00002:48"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:52
		# line in RSA: <signame> {protection|limiting|detection|filtering } is <disposition> on zone <zone> by {admin <administrator>|admin|<username>} via {NSRP Peer |<logon_type> from host <saddr> to <daddr>:<dport>}. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+(protection|limiting|detection|filtering[\s]+)[\s]+is[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+by[\s]+(admin[\s]+(?<administrator>[^\s]*)|admin|(?<username>[^\s]*))[\s]+via[\s]+(NSRP[\s]+Peer[\s]+|(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\.]*))\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00002:52"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:52"
					"[rsa][message][id1]" => "00002:52"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:53
		# line in RSA: Admin password for account "<username>" has been <disposition> by <administrator> via <logon_type> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin password for account \"%{username}\" has been %{disposition} by %{administrator} via %{logon_type} (%{fld1})" }
				id => "message-00002:53"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:53"
					"[rsa][message][id1]" => "00002:53"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002:54
		# line in RSA: Traffic shaping clearing DSCP selector is turned {OFF|ON}. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Traffic[\s]+shaping[\s]+clearing[\s]+DSCP[\s]+selector[\s]+is[\s]+turned[\s]+(OFF|ON)\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00002:54"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:54"
					"[rsa][message][id1]" => "00002:54"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00002
		# line in RSA: <change_attribute> {has been changed|changed} from <change_old> to <change_new>{. <info>|<info>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
		# MESSAGE 00002:56
		# line in RSA: Admin user "<administrator>" login attempt for <logon_type>(<network_service>) management (port <network_port>) from <saddr>:<sport> failed. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user \"%{administrator}\" login attempt for %{logon_type}(%{network_service}) management (port %{network_port}) from %{saddr}:%{sport} failed. (%{fld1})" }
				id => "message-00002:56"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00002:56"
					"[rsa][message][id1]" => "00002:56"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00003" {
		# MESSAGE 00003
		# line in RSA: Multiple authentication failures have been detected! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Multiple authentication failures have been detected! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}" }
				id => "message-00003"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00003"
					"[rsa][message][id1]" => "00003"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00003:01
		# line in RSA: Multiple authentication failures have been detected! 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Multiple authentication failures have been detected!" }
				id => "message-00003:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00003:01"
					"[rsa][message][id1]" => "00003:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00003:02
		# line in RSA: The console debug buffer has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The console debug buffer has been %{disposition}" }
				id => "message-00003:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00003:02"
					"[rsa][message][id1]" => "00003:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00003:03
		# line in RSA: <change_attribute> changed from <change_old> to <change_new>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} changed from %{change_old} to %{change_new}." }
				id => "message-00003:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00003:03"
					"[rsa][message][id1]" => "00003:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00003:05
		# line in RSA: The {serial|local} console has been <disposition> by admin <administrator>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+(serial|local)[\s]+console[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+admin[\s]+(?<administrator>[^\.]*)\.$" }
				id => "message-00003:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00003:05"
					"[rsa][message][id1]" => "00003:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00004" {
		# MESSAGE 00004
		# line in RSA: <info>DNS server IP has been changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}DNS server IP has been changed" }
				id => "message-00004"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004"
					"[rsa][message][id1]" => "00004"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:01
		# line in RSA: DNS cache table has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS cache table has been %{disposition}" }
				id => "message-00004:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:01"
					"[rsa][message][id1]" => "00004:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:02
		# line in RSA: Daily DNS lookup has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Daily DNS lookup has been %{disposition}" }
				id => "message-00004:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:02"
					"[rsa][message][id1]" => "00004:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:03
		# line in RSA: Daily DNS lookup time has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Daily DNS lookup time has been %{disposition}" }
				id => "message-00004:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:03"
					"[rsa][message][id1]" => "00004:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:04
		# line in RSA: <signame> has been detected! From <saddr> to <daddr> using protocol <protocol> on {interface|Interface} <interface><space>The attack occurred <dclass_counter1> times
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE 00004:05
		# line in RSA: <signame> from <saddr>/<sport> to <daddr>/<dport> protocol <protocol>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} from %{saddr}/%{sport} to %{daddr}/%{dport} protocol %{protocol}" }
				id => "message-00004:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00004:05"
					"[rsa][message][id1]" => "00004:05"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:06
		# line in RSA: DNS lookup time has been changed to start at <fld2>:<fld3> with an interval of <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS lookup time has been changed to start at %{fld2}:%{fld3} with an interval of %{fld4}" }
				id => "message-00004:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:06"
					"[rsa][message][id1]" => "00004:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:07
		# line in RSA: DNS cache table entries have been refreshed as result of external event.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS cache table entries have been refreshed as result of external event." }
				id => "message-00004:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:07"
					"[rsa][message][id1]" => "00004:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:08
		# line in RSA: DNS Proxy module has been <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS Proxy module has been %{disposition}." }
				id => "message-00004:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:08"
					"[rsa][message][id1]" => "00004:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:09
		# line in RSA: DNS Proxy module has more concurrent client requests than allowed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS Proxy module has more concurrent client requests than allowed." }
				id => "message-00004:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:09"
					"[rsa][message][id1]" => "00004:09"
					"[event][categoryid]" => "1608010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:10
		# line in RSA: DNS Proxy server select table entries exceeded maximum limit.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS Proxy server select table entries exceeded maximum limit." }
				id => "message-00004:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:10"
					"[rsa][message][id1]" => "00004:10"
					"[event][categoryid]" => "1608010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:11
		# line in RSA: Proxy server select table added with domain <domain>, interface <interface>, primary-ip <fld2>, secondary-ip <fld3>, tertiary-ip <fld4>, failover <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Proxy server select table added with domain %{domain}, interface %{interface}, primary-ip %{fld2}, secondary-ip %{fld3}, tertiary-ip %{fld4}, failover %{disposition}" }
				id => "message-00004:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:11"
					"[rsa][message][id1]" => "00004:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:12
		# line in RSA: DNS Proxy server select table entry <disposition> with domain <domain>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS Proxy server select table entry %{disposition} with domain %{domain}" }
				id => "message-00004:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:12"
					"[rsa][message][id1]" => "00004:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:13
		# line in RSA: DDNS server <domain> returned incorrect ip <fld2>, local-ip should be <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DDNS server %{domain} returned incorrect ip %{fld2}, local-ip should be %{fld3}" }
				id => "message-00004:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:13"
					"[rsa][message][id1]" => "00004:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00004:14
		# line in RSA: DNS entries have been { automatically refreshed | refreshed by HA }. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DNS[\s]+entries[\s]+have[\s]+been[\s]+([\s]*automatically[\s]+refreshed[\s]+|[\s]*refreshed[\s]+by[\s]+HA[\s]+)\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00004:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:14"
					"[rsa][message][id1]" => "00004:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00004:15
		# line in RSA: DNS entries have been refreshed as result of DNS server address change. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS entries have been refreshed as result of DNS server address change. (%{fld1})" }
				id => "message-00004:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:15"
					"[rsa][message][id1]" => "00004:15"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00004:16
		# line in RSA: DNS entries have been manually refreshed. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS entries have been manually refreshed. (%{fld1})" }
				id => "message-00004:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00004:16"
					"[rsa][message][id1]" => "00004:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00004:17
		# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone { <zone>, | <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+([\s]*(?<zone>[^,]*),[\s]+|[\s]*(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00004:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00004:17"
					"[rsa][message][id1]" => "00004:17"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00005" {
		# MESSAGE 00005
		# line in RSA: <signame> alarm threshold from the same source has been changed to <trigger_val>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} alarm threshold from the same source has been changed to %{trigger_val}" }
				id => "message-00005"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005"
					"[rsa][message][id1]" => "00005"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:01
		# line in RSA: Logging of <fld2> traffic to self has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Logging of %{fld2} traffic to self has been %{disposition}" }
				id => "message-00005:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:01"
					"[rsa][message][id1]" => "00005:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:02
		# line in RSA: SYN flood <fld2> has been changed to <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SYN flood %{fld2} has been changed to %{fld3}" }
				id => "message-00005:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:02"
					"[rsa][message][id1]" => "00005:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:03
		# line in RSA:  <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport>{,|<space>} using protocol <protocol>{,|<space>} { and arriving at |  on } interface <interface> { in zone <zone>. | . } <space>The attack occurred <dclass_counter1> times
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
		# MESSAGE 00005:04
		# line in RSA:  <signame> from <saddr>/<sport> to <daddr>/<dport> protocol <protocol> (<interface>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} from %{saddr}/%{sport} to %{daddr}/%{dport} protocol %{protocol} (%{interface})" }
				id => "message-00005:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:04"
					"[rsa][message][id1]" => "00005:04"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:05
		# line in RSA: SYN flood drop pak in <fld2> mode when receiving unknown dst mac has been <disposition> on <zone>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SYN flood drop pak in %{fld2} mode when receiving unknown dst mac has been %{disposition} on %{zone}." }
				id => "message-00005:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:05"
					"[rsa][message][id1]" => "00005:05"
					"[event][categoryid]" => "1001020100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:06
		# line in RSA: {<fld2>: SYN |SYN } flood timeout has been set to <trigger_val> on <zone>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<fld2>[^:]*):[\s]+SYN[\s]+|SYN[\s]+)[\s]+flood[\s]+timeout[\s]+has[\s]+been[\s]+set[\s]+to[\s]+(?<trigger_val>[^\s]*)[\s]+on[\s]+(?<zone>[^\.]*)\.$" }
				id => "message-00005:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:06"
					"[rsa][message][id1]" => "00005:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:07
		# line in RSA: SYN flood { alarm threshold | packet queue size | timeout value | attack threshold | same source IP threshold } is set to <trigger_val>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SYN[\s]+flood[\s]+([\s]*alarm[\s]+threshold[\s]+|[\s]*packet[\s]+queue[\s]+size[\s]+|[\s]*timeout[\s]+value[\s]+|[\s]*attack[\s]+threshold[\s]+|[\s]*same[\s]+source[\s]+IP[\s]+threshold[\s]+)[\s]+is[\s]+set[\s]+to[\s]+(?<trigger_val>[^\.]*)\.$" }
				id => "message-00005:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:07"
					"[rsa][message][id1]" => "00005:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:08
		# line in RSA: { <fld2>: SYN | SYN } flood same { destination | source } ip threshold has been set to <trigger_val> on <zone>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<fld2>[^:]*):[\s]+SYN[\s]+|[\s]*SYN[\s]+)[\s]+flood[\s]+same[\s]+([\s]*destination[\s]+|[\s]*source[\s]+)[\s]+ip[\s]+threshold[\s]+has[\s]+been[\s]+set[\s]+to[\s]+(?<trigger_val>[^\s]*)[\s]+on[\s]+(?<zone>[^\.]*)\.$" }
				id => "message-00005:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:08"
					"[rsa][message][id1]" => "00005:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:09
		# line in RSA: Screen service <service> is <disposition> on interface <interface>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Screen service %{service} is %{disposition} on interface %{interface}." }
				id => "message-00005:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:09"
					"[rsa][message][id1]" => "00005:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:10
		# line in RSA:  Screen service <service> is <disposition> on <zone>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Screen service %{service} is %{disposition} on %{zone}" }
				id => "message-00005:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:10"
					"[rsa][message][id1]" => "00005:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:11
		# line in RSA: The SYN flood { alarm threshold | packet queue size | timeout value | attack threshold | same source IP }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+SYN[\s]+flood[\s]+([\s]*alarm[\s]+threshold[\s]+|[\s]*packet[\s]+queue[\s]+size[\s]+|[\s]*timeout[\s]+value[\s]+|[\s]*attack[\s]+threshold[\s]+|[\s]*same[\s]+source[\s]+IP[\s]+)$" }
				id => "message-00005:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:11"
					"[rsa][message][id1]" => "00005:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:12
		# line in RSA: The SYN-ACK-ACK proxy threshold value has been set to <trigger_val> on <interface>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The SYN-ACK-ACK proxy threshold value has been set to %{trigger_val} on %{interface}." }
				id => "message-00005:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:12"
					"[rsa][message][id1]" => "00005:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:13
		# line in RSA: The session limit threshold has been set to <trigger_val> on <zone>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The session limit threshold has been set to %{trigger_val} on %{zone}." }
				id => "message-00005:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:13"
					"[rsa][message][id1]" => "00005:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:14
		# line in RSA: syn proxy drop packet with unknown mac!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "syn proxy drop packet with unknown mac!" }
				id => "message-00005:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:14"
					"[rsa][message][id1]" => "00005:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:15
		# line in RSA: <signame> alarm threshold has been changed to <trigger_val>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} alarm threshold has been changed to %{trigger_val}" }
				id => "message-00005:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:15"
					"[rsa][message][id1]" => "00005:15"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:16
		# line in RSA: <signame> threshold has been set to <trigger_val> on <zone>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} threshold has been set to %{trigger_val} on %{zone}." }
				id => "message-00005:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:16"
					"[rsa][message][id1]" => "00005:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:17
		# line in RSA: A { destination-based | source-based } session-limit threshold has been set at <trigger_val> in zone <zone>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^A[\s]+([\s]*destination\-based[\s]+|[\s]*source\-based[\s]+)[\s]+session\-limit[\s]+threshold[\s]+has[\s]+been[\s]+set[\s]+at[\s]+(?<trigger_val>[^\s]*)[\s]+in[\s]+zone[\s]+(?<zone>[^\.]*)\.$" }
				id => "message-00005:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:17"
					"[rsa][message][id1]" => "00005:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:18
		# line in RSA:  <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00005:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:18"
					"[rsa][message][id1]" => "00005:18"
					"[event][categoryid]" => "1002020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00005:19
		# line in RSA:  <signame> From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.The attack occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.The attack occurred %{dclass_counter1} times." }
				id => "message-00005:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:19"
					"[rsa][message][id1]" => "00005:19"
					"[event][categoryid]" => "1002020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00005:20
		# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> int  <interface>).<space> Occurred <fld2> times. (<fld1>)<<<fld6>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr}, proto %{protocol} (zone %{zone} int  %{interface}).%{space} Occurred %{fld2} times. (%{fld1})<%{fld6}>" }
				id => "message-00005:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00005:20"
					"[rsa][message][id1]" => "00005:20"
					"[event][categoryid]" => "1002020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00006" {
		# MESSAGE 00006
		# line in RSA:   <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00006"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00006"
					"[rsa][message][id1]" => "00006"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00006:01
		# line in RSA: Hostname set to "<hostname>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Hostname set to \"%{hostname}\"" }
				id => "message-00006:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00006:01"
					"[rsa][message][id1]" => "00006:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00006:02
		# line in RSA: Domain set to <domain>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Domain set to %{domain}" }
				id => "message-00006:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00006:02"
					"[rsa][message][id1]" => "00006:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00006:03
		# line in RSA: An optional ScreenOS feature has been activated via a software key.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "An optional ScreenOS feature has been activated via a software key." }
				id => "message-00006:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00006:03"
					"[rsa][message][id1]" => "00006:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00006:04
		# line in RSA:  <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone { <zone>, | <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+([\s]*(?<zone>[^,]*),[\s]+|[\s]*(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00006:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00006:04"
					"[rsa][message][id1]" => "00006:04"
					"[event][categoryid]" => "1002020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00006:05
		# line in RSA:  <signame> From <saddr> to <daddr>, proto <protocol> (zone { <zone>, | <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+([\s]*(?<zone>[^,]*),[\s]+|[\s]*(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00006:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00006:05"
					"[rsa][message][id1]" => "00006:05"
					"[event][categoryid]" => "1002020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00007" {
		# MESSAGE 00007
		# line in RSA: HA cluster ID has been changed to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA cluster ID has been changed to %{fld2}" }
				id => "message-00007"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007"
					"[rsa][message][id1]" => "00007"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:01
		# line in RSA: <change_attribute> of the local NetScreen device has changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} of the local NetScreen device has changed from %{change_old} to %{change_new}" }
				id => "message-00007:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:01"
					"[rsa][message][id1]" => "00007:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:02
		# line in RSA: HA state of the local device has changed to backup because a device with a { higher priority has been detected | lower MAC value has been detected }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^HA[\s]+state[\s]+of[\s]+the[\s]+local[\s]+device[\s]+has[\s]+changed[\s]+to[\s]+backup[\s]+because[\s]+a[\s]+device[\s]+with[\s]+a[\s]+([\s]*higher[\s]+priority[\s]+has[\s]+been[\s]+detected[\s]+|[\s]*lower[\s]+MAC[\s]+value[\s]+has[\s]+been[\s]+detected[\s]+)$" }
				id => "message-00007:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:02"
					"[rsa][message][id1]" => "00007:02"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:03
		# line in RSA: HA state of the local device has changed to init because IP tracking has failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA state of the local device has changed to init because IP tracking has failed" }
				id => "message-00007:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:03"
					"[rsa][message][id1]" => "00007:03"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:04
		# line in RSA: HA { encryption | authentication } { password | key } has been changed
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^HA[\s]+([\s]*encryption[\s]+|[\s]*authentication[\s]+)[\s]+([\s]*password[\s]+|[\s]*key[\s]+)[\s]+has[\s]+been[\s]+changed$" }
				id => "message-00007:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:04"
					"[rsa][message][id1]" => "00007:04"
					"[event][categoryid]" => "1613040200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:05
		# line in RSA: HA: Local NetScreen device has been elected backup because a master already exists
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Local NetScreen device has been elected backup because a master already exists" }
				id => "message-00007:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:05"
					"[rsa][message][id1]" => "00007:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:06
		# line in RSA: HA: Local NetScreen device has been elected backup because its MAC value is higher than those of other devices in the cluster
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Local NetScreen device has been elected backup because its MAC value is higher than those of other devices in the cluster" }
				id => "message-00007:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:06"
					"[rsa][message][id1]" => "00007:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:07
		# line in RSA: HA: Local NetScreen device has been elected backup because its priority value is higher than those of other devices in the cluster
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Local NetScreen device has been elected backup because its priority value is higher than those of other devices in the cluster" }
				id => "message-00007:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:07"
					"[rsa][message][id1]" => "00007:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:08
		# line in RSA: HA: Local device has been elected master because no other master exists
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Local device has been elected master because no other master exists" }
				id => "message-00007:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:08"
					"[rsa][message][id1]" => "00007:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:09
		# line in RSA: HA: Local device priority has been changed to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Local device priority has been changed to %{fld2}" }
				id => "message-00007:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:09"
					"[rsa][message][id1]" => "00007:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:10
		# line in RSA: HA: Previous master has promoted the local NetScreen device to master
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Previous master has promoted the local NetScreen device to master" }
				id => "message-00007:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:10"
					"[rsa][message][id1]" => "00007:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:11
		# line in RSA: IP tracking device failover threshold has been { disabled | set to <trigger_val> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IP[\s]+tracking[\s]+device[\s]+failover[\s]+threshold[\s]+has[\s]+been[\s]+([\s]*disabled[\s]+|[\s]*set[\s]+to[\s]+(?<trigger_val>[^\s]*)[\s]+)$" }
				id => "message-00007:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:11"
					"[rsa][message][id1]" => "00007:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:12
		# line in RSA: IP tracking has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP tracking has been %{disposition}" }
				id => "message-00007:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:12"
					"[rsa][message][id1]" => "00007:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:13
		# line in RSA: IP tracking to <hostip> with interval <fld2> threshold <trigger_val> weight <fld4> interface <interface> method <fld5> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP tracking to %{hostip} with interval %{fld2} threshold %{trigger_val} weight %{fld4} interface %{interface} method %{fld5} has been %{disposition}" }
				id => "message-00007:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:13"
					"[rsa][message][id1]" => "00007:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:14
		# line in RSA: <signame> From <saddr> to <daddr> using protocol <protocol> on zone <zone> interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr} using protocol %{protocol} on zone %{zone} interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00007:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:14"
					"[rsa][message][id1]" => "00007:14"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:15
		# line in RSA: Primary HA interface has been changed to <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Primary HA interface has been changed to %{interface}" }
				id => "message-00007:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:15"
					"[rsa][message][id1]" => "00007:15"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:16
		# line in RSA: Reporting of HA configuration and status changes to NetScreen-Global Manager has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Reporting of HA configuration and status changes to NetScreen-Global Manager has been %{disposition}" }
				id => "message-00007:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:16"
					"[rsa][message][id1]" => "00007:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:17
		# line in RSA:  Tracked IP <hostip> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Tracked IP %{hostip} has been %{disposition}" }
				id => "message-00007:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:17"
					"[rsa][message][id1]" => "00007:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:18
		# line in RSA: Tracked IP <hostip> options have been changed from int <fld2> thr <fld3> wgt <fld4> inf <fld5> { ping | ARP } to <fld6> {ping|ARP}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Tracked[\s]+IP[\s]+(?<hostip>[^\s]*)[\s]+options[\s]+have[\s]+been[\s]+changed[\s]+from[\s]+int[\s]+(?<fld2>[^\s]*)[\s]+thr[\s]+(?<fld3>[^\s]*)[\s]+wgt[\s]+(?<fld4>[^\s]*)[\s]+inf[\s]+(?<fld5>[^\s]*)[\s]+([\s]*ping[\s]+|[\s]*ARP[\s]+)[\s]+to[\s]+(?<fld6>[^\s]*)[\s]+(ping|ARP)$" }
				id => "message-00007:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:18"
					"[rsa][message][id1]" => "00007:18"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:20
		# line in RSA: Change <change_attribute> path from <change_old> to <change_new>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change %{change_attribute} path from %{change_old} to %{change_new}." }
				id => "message-00007:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:20"
					"[rsa][message][id1]" => "00007:20"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:21
		# line in RSA: HA Slave is { up | down }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^HA[\s]+Slave[\s]+is[\s]+([\s]*up[\s]+|[\s]*down[\s]+)$" }
				id => "message-00007:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:21"
					"[rsa][message][id1]" => "00007:21"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:22
		# line in RSA: HA change group id to <groupid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA change group id to %{groupid}" }
				id => "message-00007:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:22"
					"[rsa][message][id1]" => "00007:22"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:23
		# line in RSA: HA change priority to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA change priority to %{fld2}" }
				id => "message-00007:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:23"
					"[rsa][message][id1]" => "00007:23"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:24
		# line in RSA: HA change state to init
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA change state to init" }
				id => "message-00007:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:24"
					"[rsa][message][id1]" => "00007:24"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:25
		# line in RSA: HA: Change state to initial state.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Change state to initial state." }
				id => "message-00007:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:25"
					"[rsa][message][id1]" => "00007:25"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:26
		# line in RSA: HA: Change state to slave for { tracking ip failed | linkdown }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^HA:[\s]+Change[\s]+state[\s]+to[\s]+slave[\s]+for[\s]+([\s]*tracking[\s]+ip[\s]+failed[\s]+|[\s]*linkdown[\s]+)$" }
				id => "message-00007:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:26"
					"[rsa][message][id1]" => "00007:26"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:27
		# line in RSA: HA: Change to master command issued from original master to change state
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Change to master command issued from original master to change state" }
				id => "message-00007:27"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:27"
					"[rsa][message][id1]" => "00007:27"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:28
		# line in RSA: HA: Elected master no other master
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Elected master no other master" }
				id => "message-00007:28"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:28"
					"[rsa][message][id1]" => "00007:28"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:29
		# line in RSA: HA: Elected slave { lower priority | MAC value is larger | master already exists | detect new master with higher priority | detect new master with smaller MAC value }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^HA:[\s]+Elected[\s]+slave[\s]+([\s]*lower[\s]+priority[\s]+|[\s]*MAC[\s]+value[\s]+is[\s]+larger[\s]+|[\s]*master[\s]+already[\s]+exists[\s]+|[\s]*detect[\s]+new[\s]+master[\s]+with[\s]+higher[\s]+priority[\s]+|[\s]*detect[\s]+new[\s]+master[\s]+with[\s]+smaller[\s]+MAC[\s]+value[\s]+)$" }
				id => "message-00007:29"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:29"
					"[rsa][message][id1]" => "00007:29"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:30
		# line in RSA: HA: Promoted master command issued from original master to change state
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Promoted master command issued from original master to change state" }
				id => "message-00007:30"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:30"
					"[rsa][message][id1]" => "00007:30"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:31
		# line in RSA: HA: ha link { up | down }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^HA:[\s]+ha[\s]+link[\s]+([\s]*up[\s]+|[\s]*down[\s]+)$" }
				id => "message-00007:31"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:31"
					"[rsa][message][id1]" => "00007:31"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:32
		# line in RSA: NSRP <fld2> { authentication | encryption } { password | key } changed.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP[\s]+(?<fld2>[^\s]*)[\s]+([\s]*authentication[\s]+|[\s]*encryption[\s]+)[\s]+([\s]*password[\s]+|[\s]*key[\s]+)[\s]+changed\.$" }
				id => "message-00007:32"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:32"
					"[rsa][message][id1]" => "00007:32"
					"[event][categoryid]" => "1613040200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:33
		# line in RSA: { NSRP: VSD | Virtual Security Device group } <fld2> { changed | change } to <fld3> mode.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*NSRP:[\s]+VSD[\s]+|[\s]*Virtual[\s]+Security[\s]+Device[\s]+group[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+([\s]*changed[\s]+|[\s]*change[\s]+)[\s]+to[\s]+(?<fld3>[^\s]*)[\s]+mode\.$" }
				id => "message-00007:33"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:33"
					"[rsa][message][id1]" => "00007:33"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:34
		# line in RSA: NSRP: message <fld2> dropped: invalid encryption password.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP: message %{fld2} dropped: invalid encryption password." }
				id => "message-00007:34"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:34"
					"[rsa][message][id1]" => "00007:34"
					"[event][categoryid]" => "1613050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:35
		# line in RSA: NSRP: nsrp interface change to <interface>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP: nsrp interface change to %{interface}." }
				id => "message-00007:35"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:35"
					"[rsa][message][id1]" => "00007:35"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:36
		# line in RSA: RTO mirror group id=<groupid> direction= <direction> local unit=<fld3> duplicate from unit=<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTO mirror group id=%{groupid} direction= %{direction} local unit=%{fld3} duplicate from unit=%{fld4}" }
				id => "message-00007:36"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:36"
					"[rsa][message][id1]" => "00007:36"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:37
		# line in RSA: RTO mirror group id=<groupid> direction= <direction> is { set | unset }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RTO[\s]+mirror[\s]+group[\s]+id=(?<groupid>[^\s]*)[\s]+direction=[\s]+(?<direction>[^\s]*)[\s]+is[\s]+([\s]*set[\s]+|[\s]*unset[\s]+)$" }
				id => "message-00007:37"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:37"
					"[rsa][message][id1]" => "00007:37"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:38
		# line in RSA: RTO mirror group id=<groupid> direction= <direction> peer=<fld3> from { undefined | set | active } to { undefined | set | active } state { missed heartbeat | group detached }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RTO[\s]+mirror[\s]+group[\s]+id=(?<groupid>[^\s]*)[\s]+direction=[\s]+(?<direction>[^\s]*)[\s]+peer=(?<fld3>[^\s]*)[\s]+from[\s]+([\s]*undefined[\s]+|[\s]*set[\s]+|[\s]*active[\s]+)[\s]+to[\s]+([\s]*undefined[\s]+|[\s]*set[\s]+|[\s]*active[\s]+)[\s]+state[\s]+([\s]*missed[\s]+heartbeat[\s]+|[\s]*group[\s]+detached[\s]+)$" }
				id => "message-00007:38"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:38"
					"[rsa][message][id1]" => "00007:38"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:39
		# line in RSA: RTO mirror group id=<groupid> is { set | unset }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RTO[\s]+mirror[\s]+group[\s]+id=(?<groupid>[^\s]*)[\s]+is[\s]+([\s]*set[\s]+|[\s]*unset[\s]+)$" }
				id => "message-00007:39"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:39"
					"[rsa][message][id1]" => "00007:39"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:40
		# line in RSA: Remove pathname <fld2> (ifnum=<fld3>) as secondary HA path
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Remove pathname %{fld2} (ifnum=%{fld3}) as secondary HA path" }
				id => "message-00007:40"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:40"
					"[rsa][message][id1]" => "00007:40"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:41
		# line in RSA: Session sync ended by unit=<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session sync ended by unit=%{fld2}" }
				id => "message-00007:41"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:41"
					"[rsa][message][id1]" => "00007:41"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:42
		# line in RSA: Set secondary HA path to <fld2> (ifnum=<fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Set secondary HA path to %{fld2} (ifnum=%{fld3})" }
				id => "message-00007:42"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:42"
					"[rsa][message][id1]" => "00007:42"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:43
		# line in RSA: VSD <change_attribute> changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VSD %{change_attribute} changed from %{change_old} to %{change_new}" }
				id => "message-00007:43"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:43"
					"[rsa][message][id1]" => "00007:43"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:44
		# line in RSA: vsd group id=<groupid> is <disposition> total number=<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "vsd group id=%{groupid} is %{disposition} total number=%{fld3}" }
				id => "message-00007:44"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:44"
					"[rsa][message][id1]" => "00007:44"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:45
		# line in RSA: vsd group <group> local unit <change_attribute> changed from <change_old> to <change_new> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "vsd group %{group} local unit %{change_attribute} changed from %{change_old} to %{change_new}" }
				id => "message-00007:45"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:45"
					"[rsa][message][id1]" => "00007:45"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:46
		# line in RSA: <signame> has been detected! From <saddr> to <daddr> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr} to %{daddr} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00007:46"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:46"
					"[rsa][message][id1]" => "00007:46"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:47
		# line in RSA: The HA channel changed to interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The HA channel changed to interface %{interface}" }
				id => "message-00007:47"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:47"
					"[rsa][message][id1]" => "00007:47"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:48
		# line in RSA: Message <fld2> was dropped because it contained an invalid encryption password.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Message %{fld2} was dropped because it contained an invalid encryption password." }
				id => "message-00007:48"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"disposition" => "dropped"
				"result" => "Invalid encryption Password"
					"[event][id]" => "00007:48"
					"[rsa][message][id1]" => "00007:48"
					"[event][categoryid]" => "1613050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:49
		# line in RSA: The <change_attribute> of all Virtual Security Device groups changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The %{change_attribute} of all Virtual Security Device groups changed from %{change_old} to %{change_new}" }
				id => "message-00007:49"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:49"
					"[rsa][message][id1]" => "00007:49"
					"[event][categoryid]" => "1604000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:50
		# line in RSA: Device <fld2> { has joined | quit current } NSRP cluster <fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Device[\s]+(?<fld2>[^\s]*)[\s]+([\s]*has[\s]+joined[\s]+|[\s]*quit[\s]+current[\s]+)[\s]+NSRP[\s]+cluster[\s]+(?<fld3>.*)$" }
				id => "message-00007:50"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:50"
					"[rsa][message][id1]" => "00007:50"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:51
		# line in RSA: Virtual Security Device group <group> was { created | deleted } { , | . } The total number of members in the group { is | was } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Virtual[\s]+Security[\s]+Device[\s]+group[\s]+(?<group>[^\s]*)[\s]+was[\s]+([\s]*created[\s]+|[\s]*deleted[\s]+)[\s]+([\s]*,[\s]+|[\s]*\.[\s]+)[\s]+The[\s]+total[\s]+number[\s]+of[\s]+members[\s]+in[\s]+the[\s]+group[\s]+([\s]*is[\s]+|[\s]*was[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-00007:51"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:51"
					"[rsa][message][id1]" => "00007:51"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:52
		# line in RSA: Virtual Security Device group <group> <change_attribute> changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Virtual Security Device group %{group} %{change_attribute} changed from %{change_old} to %{change_new}" }
				id => "message-00007:52"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:52"
					"[rsa][message][id1]" => "00007:52"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:53
		# line in RSA: The secondary HA path of the devices was set to interface <interface> with ifnum <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The secondary HA path of the devices was set to interface %{interface} with ifnum %{fld2}" }
				id => "message-00007:53"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:53"
					"[rsa][message][id1]" => "00007:53"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:54
		# line in RSA: The <change_attribute> of the devices changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The %{change_attribute} of the devices changed from %{change_old} to %{change_new}" }
				id => "message-00007:54"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:54"
					"[rsa][message][id1]" => "00007:54"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:55
		# line in RSA: The interface <interface> with ifnum <fld2> was removed from the secondary HA path of the devices.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The interface %{interface} with ifnum %{fld2} was removed from the secondary HA path of the devices." }
				id => "message-00007:55"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:55"
					"[rsa][message][id1]" => "00007:55"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:56
		# line in RSA: The probe that detects the status of High Availability link <fld2> was <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The probe that detects the status of High Availability link %{fld2} was %{disposition}" }
				id => "message-00007:56"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:56"
					"[rsa][message][id1]" => "00007:56"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:57
		# line in RSA: The { threshold | interval } { of | that } the probe detecting the status of High Availability link <fld2> was set to <fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+([\s]*threshold[\s]+|[\s]*interval[\s]+)[\s]+([\s]*of[\s]+|[\s]*that[\s]+)[\s]+the[\s]+probe[\s]+detecting[\s]+the[\s]+status[\s]+of[\s]+High[\s]+Availability[\s]+link[\s]+(?<fld2>[^\s]*)[\s]+was[\s]+set[\s]+to[\s]+(?<fld3>.*)$" }
				id => "message-00007:57"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:57"
					"[rsa][message][id1]" => "00007:57"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:58
		# line in RSA: A request by device <fld2> for session synchronization(s) was accepted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "A request by device %{fld2} for session synchronization(s) was accepted." }
				id => "message-00007:58"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:58"
					"[rsa][message][id1]" => "00007:58"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:59
		# line in RSA: The current session synchronization by device <fld2> completed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The current session synchronization by device %{fld2} completed." }
				id => "message-00007:59"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:59"
					"[rsa][message][id1]" => "00007:59"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:60
		# line in RSA: Run Time Object mirror group <group> direction was set to <direction>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Run Time Object mirror group %{group} direction was set to %{direction}" }
				id => "message-00007:60"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:60"
					"[rsa][message][id1]" => "00007:60"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:61
		# line in RSA: Run Time Object mirror group <group> was set.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Run Time Object mirror group %{group} was set." }
				id => "message-00007:61"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:61"
					"[rsa][message][id1]" => "00007:61"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:62
		# line in RSA: Run Time Object mirror group <group> with direction <direction> was unset.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Run Time Object mirror group %{group} with direction %{direction} was unset." }
				id => "message-00007:62"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:62"
					"[rsa][message][id1]" => "00007:62"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:63
		# line in RSA: RTO mirror group <group> was unset.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTO mirror group %{group} was unset." }
				id => "message-00007:63"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:63"
					"[rsa][message][id1]" => "00007:63"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:64
		# line in RSA: { Zone | Interface } <fld2> was removed from the monitoring { list of | list } <fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Zone[\s]+|[\s]*Interface[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+was[\s]+removed[\s]+from[\s]+the[\s]+monitoring[\s]+([\s]*list[\s]+of[\s]+|[\s]*list[\s]+)[\s]+(?<fld3>.*)$" }
				id => "message-00007:64"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:64"
					"[rsa][message][id1]" => "00007:64"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:65
		# line in RSA: { Zone | Interface } <fld2> with weight <fld3> was { added to or updated on  | added/updated to } the monitoring { list of | list } <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Zone[\s]+|[\s]*Interface[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+with[\s]+weight[\s]+(?<fld3>[^\s]*)[\s]+was[\s]+([\s]*added[\s]+to[\s]+or[\s]+updated[\s]+on[\s]+|[\s]*added/updated[\s]+to[\s]+)[\s]+the[\s]+monitoring[\s]+([\s]*list[\s]+of[\s]+|[\s]*list[\s]+)[\s]+(?<fld4>.*)$" }
				id => "message-00007:65"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:65"
					"[rsa][message][id1]" => "00007:65"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:66
		# line in RSA: { The monitoring | Monitoring } threshold was modified to <trigger_val> { of | on } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*The[\s]+monitoring[\s]+|[\s]*Monitoring[\s]+)[\s]+threshold[\s]+was[\s]+modified[\s]+to[\s]+(?<trigger_val>[^\s]*)[\s]+([\s]*of[\s]+|[\s]*on[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-00007:66"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:66"
					"[rsa][message][id1]" => "00007:66"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:67
		# line in RSA: NSRP data forwarding <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP data forwarding %{disposition}." }
				id => "message-00007:67"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:67"
					"[rsa][message][id1]" => "00007:67"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:68
		# line in RSA: NSRP { black | back } hole prevention <disposition>. Master(s) of Virtual Security Device groups { may not exist | always exists }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP[\s]+([\s]*black[\s]+|[\s]*back[\s]+)[\s]+hole[\s]+prevention[\s]+(?<disposition>[^\.]*)\.[\s]+Master\(s\)[\s]+of[\s]+Virtual[\s]+Security[\s]+Device[\s]+groups[\s]+([\s]*may[\s]+not[\s]+exist[\s]+|[\s]*always[\s]+exists[\s]+)\.$" }
				id => "message-00007:68"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:68"
					"[rsa][message][id1]" => "00007:68"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:69
		# line in RSA: NSRP Run Time Object synchronization between devices was <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP Run Time Object synchronization between devices was %{disposition}" }
				id => "message-00007:69"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:69"
					"[rsa][message][id1]" => "00007:69"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:70
		# line in RSA: The NSRP encryption key was changed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The NSRP encryption key was changed." }
				id => "message-00007:70"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:70"
					"[rsa][message][id1]" => "00007:70"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:71
		# line in RSA: NSRP transparent Active-Active mode was <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP transparent Active-Active mode was %{disposition}." }
				id => "message-00007:71"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:71"
					"[rsa][message][id1]" => "00007:71"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00007:72
		# line in RSA: NSRP: nsrp link probe enable on <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP: nsrp link probe enable on %{interface}" }
				id => "message-00007:72"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00007:72"
					"[rsa][message][id1]" => "00007:72"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00008" {
		# MESSAGE 00008
		# line in RSA: <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00008"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008"
					"[rsa][message][id1]" => "00008"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:01
		# line in RSA: <signame> from <saddr>/<sport> to <daddr>/<dport> protocol <protocol> (<interface>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} from %{saddr}/%{sport} to %{daddr}/%{dport} protocol %{protocol} (%{interface})" }
				id => "message-00008:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:01"
					"[rsa][message][id1]" => "00008:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:02
		# line in RSA: NTP settings have been changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NTP settings have been changed" }
				id => "message-00008:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:02"
					"[rsa][message][id1]" => "00008:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:03
		# line in RSA: The system clock has been updated through NTP
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system clock has been updated through NTP" }
				id => "message-00008:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:03"
					"[rsa][message][id1]" => "00008:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:04
		# line in RSA: System clock {configurations have been|was|is} {changed by admin <administrator>|changed by <username> (<fld1>)|changed by <username>|changed manually.|changed manually|changed }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+clock[\s]+(configurations[\s]+have[\s]+been|was|is)[\s]+(changed[\s]+by[\s]+admin[\s]+(?<administrator>.*)|changed[\s]+by[\s]+(?<username>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)|changed[\s]+by[\s]+(?<username>.*)|changed[\s]+manually\.|changed[\s]+manually|changed[\s]+)$" }
				id => "message-00008:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:04"
					"[rsa][message][id1]" => "00008:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00008:05
		# line in RSA: failed to get clock through NTP
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "failed to get clock through NTP" }
				id => "message-00008:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:05"
					"[rsa][message][id1]" => "00008:05"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:06
		# line in RSA: <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00008:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:06"
					"[rsa][message][id1]" => "00008:06"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:07
		# line in RSA:  <signame> has been detected! From <saddr> to <daddr>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr} to %{daddr}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00008:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:07"
					"[rsa][message][id1]" => "00008:07"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:08
		# line in RSA: <signame> From <saddr> to <daddr>, using protocol <protocol>, on zone <zone> interface <interface>.<space>The attack occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr}, using protocol %{protocol}, on zone %{zone} interface %{interface}.%{space}The attack occurred %{dclass_counter1} times." }
				id => "message-00008:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:08"
					"[rsa][message][id1]" => "00008:08"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:09
		# line in RSA: system clock is changed manually
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "system clock is changed manually" }
				id => "message-00008:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:09"
					"[rsa][message][id1]" => "00008:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00008:10
		# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol>(zone { <zone>, | <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\(]*)\(zone[\s]+([\s]*(?<zone>[^,]*),[\s]+|[\s]*(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00008:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00008:10"
					"[rsa][message][id1]" => "00008:10"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00009" {
		# MESSAGE 00009
		# line in RSA: 802.1Q VLAN trunking for the interface <interface> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "802.1Q VLAN trunking for the interface %{interface} has been %{disposition}" }
				id => "message-00009"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009"
					"[rsa][message][id1]" => "00009"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:01
		# line in RSA: 802.1Q VLAN tag <fld1> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "802.1Q VLAN tag %{fld1} has been %{disposition}" }
				id => "message-00009:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:01"
					"[rsa][message][id1]" => "00009:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:02
		# line in RSA: DHCP on the interface <interface> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP on the interface %{interface} has been %{disposition}" }
				id => "message-00009:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:02"
					"[rsa][message][id1]" => "00009:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:03
		# line in RSA: <change_attribute> for interface <interface> has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} for interface %{interface} has been changed from %{change_old} to %{change_new}" }
				id => "message-00009:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:03"
					"[rsa][message][id1]" => "00009:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:05
		# line in RSA: <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00009:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:05"
					"[rsa][message][id1]" => "00009:05"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:06
		# line in RSA: { <fld2>: The 802.1Q tag | The 802.1Q tag } { for the | for } interface <interface> has been { removed | changed to } { <info> from host <saddr> | <info> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<fld2>[^:]*):[\s]+The[\s]+802\.1Q[\s]+tag[\s]+|[\s]*The[\s]+802\.1Q[\s]+tag[\s]+)[\s]+([\s]*for[\s]+the[\s]+|[\s]*for[\s]+)[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+has[\s]+been[\s]+([\s]*removed[\s]+|[\s]*changed[\s]+to[\s]+)[\s]+([\s]*(?<info>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*(?<info>[^\s]*)[\s]+)$" }
				id => "message-00009:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:06"
					"[rsa][message][id1]" => "00009:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:07
		# line in RSA: Maximum bandwidth <fld2> on {interface|Interface} <interface> is less than { the total | total } guaranteed bandwidth <fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Maximum[\s]+bandwidth[\s]+(?<fld2>[^\s]*)[\s]+on[\s]+(interface|Interface)[\s]+(?<interface>[^\s]*)[\s]+is[\s]+less[\s]+than[\s]+([\s]*the[\s]+total[\s]+|[\s]*total[\s]+)[\s]+guaranteed[\s]+bandwidth[\s]+(?<fld3>.*)$" }
				id => "message-00009:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:07"
					"[rsa][message][id1]" => "00009:07"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:09
		# line in RSA: The configured bandwidth setting on the interface <interface> has been changed to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The configured bandwidth setting on the interface %{interface} has been changed to %{fld2}" }
				id => "message-00009:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:09"
					"[rsa][message][id1]" => "00009:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:10
		# line in RSA: The operational mode for the interface <interface> has been changed to { Route | NAT }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+operational[\s]+mode[\s]+for[\s]+the[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+has[\s]+been[\s]+changed[\s]+to[\s]+([\s]*Route[\s]+|[\s]*NAT[\s]+)$" }
				id => "message-00009:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:10"
					"[rsa][message][id1]" => "00009:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:11
		# line in RSA: { <fld1>: VLAN | VLAN } tag <fld2> has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<fld1>[^:]*):[\s]+VLAN[\s]+|[\s]*VLAN[\s]+)[\s]+tag[\s]+(?<fld2>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00009:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:11"
					"[rsa][message][id1]" => "00009:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:12
		# line in RSA: DHCP client has been <disposition> on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP client has been %{disposition} on interface %{interface}" }
				id => "message-00009:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:12"
					"[rsa][message][id1]" => "00009:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:13
		# line in RSA: DHCP relay agent settings on <interface> have been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP relay agent settings on %{interface} have been %{disposition}" }
				id => "message-00009:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:13"
					"[rsa][message][id1]" => "00009:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:14
		# line in RSA: { Global-PRO has been | Global PRO has been | DNS proxy was } <disposition> on { interface | the interface } { <interface> (<fld2>) | <interface> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Global\-PRO[\s]+has[\s]+been[\s]+|[\s]*Global[\s]+PRO[\s]+has[\s]+been[\s]+|[\s]*DNS[\s]+proxy[\s]+was[\s]+)[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+([\s]*interface[\s]+|[\s]*the[\s]+interface[\s]+)[\s]+([\s]*(?<interface>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)[\s]+|[\s]*(?<interface>[^\s]*)[\s]+)$" }
				id => "message-00009:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:14"
					"[rsa][message][id1]" => "00009:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:15
		# line in RSA: Route between secondary { IP addresses | IPs } on interface <interface> { has been | was } <disposition>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Route[\s]+between[\s]+secondary[\s]+([\s]*IP[\s]+addresses[\s]+|[\s]*IPs[\s]+)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+([\s]*has[\s]+been[\s]+|[\s]*was[\s]+)[\s]+(?<disposition>[^\.]*)\.$" }
				id => "message-00009:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:15"
					"[rsa][message][id1]" => "00009:15"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:16
		# line in RSA: Secondary IP address <hostip>/<mask> { has been | was } { removed from | added to | deleted from } interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Secondary[\s]+IP[\s]+address[\s]+(?<hostip>[^/]*)/(?<mask>[^\s]*)[\s]+([\s]*has[\s]+been[\s]+|[\s]*was[\s]+)[\s]+([\s]*removed[\s]+from[\s]+|[\s]*added[\s]+to[\s]+|[\s]*deleted[\s]+from[\s]+)[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00009:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:16"
					"[rsa][message][id1]" => "00009:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:17
		# line in RSA: Secondary IP address {<hostip>/<mask>|<hostip>} was added to interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Secondary[\s]+IP[\s]+address[\s]+((?<hostip>[^/]*)/(?<mask>[^\s]*)|(?<hostip>[^\s]*))[\s]+was[\s]+added[\s]+to[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00009:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:17"
					"[rsa][message][id1]" => "00009:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:18
		# line in RSA: The configured bandwidth on the interface <interface> has been changed to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The configured bandwidth on the interface %{interface} has been changed to %{fld2}" }
				id => "message-00009:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:18"
					"[rsa][message][id1]" => "00009:18"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:19
		# line in RSA: interface <interface> with IP <hostip> <fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "interface %{interface} with IP %{hostip} %{fld2} has been %{disposition}" }
				id => "message-00009:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:19"
					"[rsa][message][id1]" => "00009:19"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:27
		# line in RSA: interface <interface> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "interface %{interface} has been %{disposition}" }
				id => "message-00009:27"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:27"
					"[rsa][message][id1]" => "00009:27"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00009:20
		# line in RSA: { <fld2>: <service>|<service>} has been <disposition> on interface <interface> { by <username> via <logon_type> from host <saddr> to <daddr>:<dport> | by <username> via <logon_type> from host <saddr>:<sport> | by <username> via <logon_type> from host <saddr> | from host <saddr> (<fld1>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<fld2>[^:]*):[\s]+(?<service>[^\s]*)|(?<service>[^\s]*))[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+([\s]*by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+|[\s]*by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+)$" }
				id => "message-00009:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:20"
					"[rsa][message][id1]" => "00009:20"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00009:21
		# line in RSA: Source Route IP option! From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Source[\s]+Route[\s]+IP[\s]+option![\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00009:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:21"
					"[rsa][message][id1]" => "00009:21"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00009:22
		# line in RSA: MTU for interface <interface> has been changed to <fld2> (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "MTU for interface %{interface} has been changed to %{fld2} (%{fld1})" }
				id => "message-00009:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:22"
					"[rsa][message][id1]" => "00009:22"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00009:23
		# line in RSA: Secondary IP address <hostip> has been added to interface <interface> (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Secondary IP address %{hostip} has been added to interface %{interface} (%{fld1})" }
				id => "message-00009:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:23"
					"[rsa][message][id1]" => "00009:23"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00009:24
		# line in RSA: Web has been enabled on interface <interface> by admin <administrator> via <logon_type>{ <space>(<fld1>) |. (<fld1>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Web[\s]+has[\s]+been[\s]+enabled[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+by[\s]+admin[\s]+(?<administrator>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s\.]*)([\s]*(?<space>[^\(]*)\((?<fld1>[^\)]*)\)[\s]+|\.[\s]+\((?<fld1>[^\)]*)\)[\s]+)$" }
				id => "message-00009:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:24"
					"[rsa][message][id1]" => "00009:24"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00009:25
		# line in RSA: Web has been enabled on interface <interface> by <username> via <logon_type>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web has been enabled on interface %{interface} by %{username} via %{logon_type}. (%{fld1})" }
				id => "message-00009:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:25"
					"[rsa][message][id1]" => "00009:25"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00009:26
		# line in RSA: <protocol> has been <disposition> on interface <interface> by <username> via NSRP Peer . {(<fld1>)|<fld1>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<protocol>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+NSRP[\s]+Peer[\s]+\.[\s]+(\((?<fld1>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+$" }
				id => "message-00009:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00009:26"
					"[rsa][message][id1]" => "00009:26"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00010" {
		# MESSAGE 00010
		# line in RSA:  <signame> From <saddr>:<sport> to <daddr>:<dport> { using protocol | proto } <protocol> { ( zone <zone>, int <interface>) | zone <zone> int <interface>) | on interface <interface> }.<space>{The attack occurred <dclass_counter1> times (<fld1>)|The attack occurred <dclass_counter1> times}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+([\s]*using[\s]+protocol[\s]+|[\s]*proto[\s]+)[\s]+(?<protocol>[^\s]*)[\s]+([\s]*\([\s]+zone[\s]+(?<zone>[^,]*),[\s]+int[\s]+(?<interface>[^\)]*)\)[\s]+|[\s]*zone[\s]+(?<zone>[^\s]*)[\s]+int[\s]+(?<interface>[^\)]*)\)[\s]+|[\s]*on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+)\.(?<space>[^TT]*)(The[\s]+attack[\s]+occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times[\s]+\((?<fld1>[^\)]*)\)|The[\s]+attack[\s]+occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times)$" }
				id => "message-00010"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00010"
					"[rsa][message][id1]" => "00010"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00010:01
		# line in RSA: MIP <hostip>/<fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "MIP %{hostip}/%{fld2} has been %{disposition}" }
				id => "message-00010:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00010:01"
					"[rsa][message][id1]" => "00010:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00010:02
		# line in RSA: Mapped IP <hostip> <fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Mapped IP %{hostip} %{fld2} has been %{disposition}" }
				id => "message-00010:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00010:02"
					"[rsa][message][id1]" => "00010:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00010:03
		# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00010:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00010:03"
					"[rsa][message][id1]" => "00010:03"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00011" {
		# MESSAGE 00011
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00011"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011"
					"[rsa][message][id1]" => "00011"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:01
		# line in RSA: Route to <daddr>/<fld2> [ {Interface|interface} <interface> gateway <fld3> ] has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Route[\s]+to[\s]+(?<daddr>[^/]*)/(?<fld2>[^\s]*)[\s]+\[[\s]+(Interface|interface)[\s]+(?<interface>[^\s]*)[\s]+gateway[\s]+(?<fld3>[^\s]*)[\s]+\][\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00011:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:01"
					"[rsa][message][id1]" => "00011:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:02
		# line in RSA: <signame> from <saddr> to <daddr> protocol <protocol> (<fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} from %{saddr} to %{daddr} protocol %{protocol} (%{fld2})" }
				id => "message-00011:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:02"
					"[rsa][message][id1]" => "00011:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:03
		# line in RSA: An { import | export } rule in virtual router <node> to virtual router <fld4> with { route-map <fld3> and protocol <protocol> | IP-prefix <hostip>/<interface> } has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^An[\s]+([\s]*import[\s]+|[\s]*export[\s]+)[\s]+rule[\s]+in[\s]+virtual[\s]+router[\s]+(?<node>[^\s]*)[\s]+to[\s]+virtual[\s]+router[\s]+(?<fld4>[^\s]*)[\s]+with[\s]+([\s]*route\-map[\s]+(?<fld3>[^\s]*)[\s]+and[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+|[\s]*IP\-prefix[\s]+(?<hostip>[^/]*)/(?<interface>[^\s]*)[\s]+)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00011:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:03"
					"[rsa][message][id1]" => "00011:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:04
		# line in RSA: A route in virtual router <node> that has IP address <hostip>/<fld2> through { interface | Interface } <interface> and gateway <fld3> with metric <fld4> has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^A[\s]+route[\s]+in[\s]+virtual[\s]+router[\s]+(?<node>[^\s]*)[\s]+that[\s]+has[\s]+IP[\s]+address[\s]+(?<hostip>[^/]*)/(?<fld2>[^\s]*)[\s]+through[\s]+([\s]*interface[\s]+|[\s]*Interface[\s]+)[\s]+(?<interface>[^\s]*)[\s]+and[\s]+gateway[\s]+(?<fld3>[^\s]*)[\s]+with[\s]+metric[\s]+(?<fld4>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00011:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:04"
					"[rsa][message][id1]" => "00011:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:05
		# line in RSA: A {sharable virtual router using name|virtual router with name} <node> and id <fld2> has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^A[\s]+(sharable[\s]+virtual[\s]+router[\s]+using[\s]+name|virtual[\s]+router[\s]+with[\s]+name)[\s]+(?<node>[^\s]*)[\s]+and[\s]+id[\s]+(?<fld2>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00011:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:05"
					"[rsa][message][id1]" => "00011:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:07
		# line in RSA:  <signame> From <saddr> to <daddr> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00011:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00011:07"
					"[rsa][message][id1]" => "00011:07"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:08
		# line in RSA: Route(s) in virtual router <node> with an IP address <hostip> and gateway <fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Route(s) in virtual router %{node} with an IP address %{hostip} and gateway %{fld2} has been %{disposition}" }
				id => "message-00011:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:08"
					"[rsa][message][id1]" => "00011:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:09
		# line in RSA: The auto-route-export feature in virtual router <node> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The auto-route-export feature in virtual router %{node} has been %{disposition}" }
				id => "message-00011:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:09"
					"[rsa][message][id1]" => "00011:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:10
		# line in RSA: The maximum number of routes that can be created in virtual router <node> is <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The maximum number of routes that can be created in virtual router %{node} is %{fld2}" }
				id => "message-00011:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:10"
					"[rsa][message][id1]" => "00011:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:11
		# line in RSA: The maximum routes limit in virtual router <node> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The maximum routes limit in virtual router %{node} has been %{disposition}" }
				id => "message-00011:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:11"
					"[rsa][message][id1]" => "00011:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:12
		# line in RSA: The router-id of virtual router <node> used by OSPF BGP routing instances id has been uninitialized
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The router-id of virtual router %{node} used by OSPF BGP routing instances id has been uninitialized" }
				id => "message-00011:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:12"
					"[rsa][message][id1]" => "00011:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:13
		# line in RSA: The router-id that can be used by OSPF BGP routing instances in virtual router <node> has been set to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The router-id that can be used by OSPF BGP routing instances in virtual router %{node} has been set to %{fld2}" }
				id => "message-00011:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:13"
					"[rsa][message][id1]" => "00011:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:14
		# line in RSA: The routing preference for protocol <protocol> in virtual router <node> has been { set to <fld2> | reset }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+routing[\s]+preference[\s]+for[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+in[\s]+virtual[\s]+router[\s]+(?<node>[^\s]*)[\s]+has[\s]+been[\s]+([\s]*set[\s]+to[\s]+(?<fld2>[^\s]*)[\s]+|[\s]*reset[\s]+)$" }
				id => "message-00011:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:14"
					"[rsa][message][id1]" => "00011:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:15
		# line in RSA: The system default-route in virtual router <node> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system default-route in virtual router %{node} has been %{disposition}" }
				id => "message-00011:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:15"
					"[rsa][message][id1]" => "00011:15"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:16
		# line in RSA: The system default-route through virtual router <node> has been added in virtual router <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system default-route through virtual router %{node} has been added in virtual router %{fld2}" }
				id => "message-00011:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:16"
					"[rsa][message][id1]" => "00011:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:17
		# line in RSA: The virtual router <node> has been made { sharable | unsharable | default virtual router for virtual system <fld2> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+virtual[\s]+router[\s]+(?<node>[^\s]*)[\s]+has[\s]+been[\s]+made[\s]+([\s]*sharable[\s]+|[\s]*unsharable[\s]+|[\s]*default[\s]+virtual[\s]+router[\s]+for[\s]+virtual[\s]+system[\s]+(?<fld2>[^\s]*)[\s]+)$" }
				id => "message-00011:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:17"
					"[rsa][message][id1]" => "00011:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:18
		# line in RSA: { Source route(s) | A source route } in virtual router <node> { with route addresses of | that has IP address } <hostip>/<fld2> through interface <interface> and { a default gateway address | gateway } <fld3> with metric <fld4> { has been | was } <disposition>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Source[\s]+route\(s\)[\s]+|[\s]*A[\s]+source[\s]+route[\s]+)[\s]+in[\s]+virtual[\s]+router[\s]+(?<node>[^\s]*)[\s]+([\s]*with[\s]+route[\s]+addresses[\s]+of[\s]+|[\s]*that[\s]+has[\s]+IP[\s]+address[\s]+)[\s]+(?<hostip>[^/]*)/(?<fld2>[^\s]*)[\s]+through[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+and[\s]+([\s]*a[\s]+default[\s]+gateway[\s]+address[\s]+|[\s]*gateway[\s]+)[\s]+(?<fld3>[^\s]*)[\s]+with[\s]+metric[\s]+(?<fld4>[^\s]*)[\s]+([\s]*has[\s]+been[\s]+|[\s]*was[\s]+)[\s]+(?<disposition>[^\.]*)\.$" }
				id => "message-00011:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:18"
					"[rsa][message][id1]" => "00011:18"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:19
		# line in RSA: Source Route(s) in virtual router <node> with { route addresses of | an IP address } <hostip>/<fld3> and { a default gateway address of | gateway } <fld4> { was | has been} <disposition> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Source[\s]+Route\(s\)[\s]+in[\s]+virtual[\s]+router[\s]+(?<node>[^\s]*)[\s]+with[\s]+([\s]*route[\s]+addresses[\s]+of[\s]+|[\s]*an[\s]+IP[\s]+address[\s]+)[\s]+(?<hostip>[^/]*)/(?<fld3>[^\s]*)[\s]+and[\s]+([\s]*a[\s]+default[\s]+gateway[\s]+address[\s]+of[\s]+|[\s]*gateway[\s]+)[\s]+(?<fld4>[^\s]*)[\s]+([\s]*was[\s]+|[\s]*has[\s]+been)[\s]+(?<disposition>[^\s]*)[\s]+$" }
				id => "message-00011:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:19"
					"[rsa][message][id1]" => "00011:19"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:20
		# line in RSA: { <fld2>: A | A } route has been created in virtual router "<node>"<space>with an IP address <hostip> and next-hop as virtual router "<fld3>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<fld2>[^:]*):[\s]+A[\s]+|[\s]*A[\s]+)[\s]+route[\s]+has[\s]+been[\s]+created[\s]+in[\s]+virtual[\s]+router[\s]+\"(?<node>[^\"]*)\"(?<space>[^w]*)with[\s]+an[\s]+IP[\s]+address[\s]+(?<hostip>[^\s]*)[\s]+and[\s]+next\-hop[\s]+as[\s]+virtual[\s]+router[\s]+\"(?<fld3>[^\"]*)\"$" }
				id => "message-00011:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:20"
					"[rsa][message][id1]" => "00011:20"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:21
		# line in RSA: SIBR route(s) in virtual router <node> for interface <interface> with an IP address <hostip> and gateway <fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SIBR route(s) in virtual router %{node} for interface %{interface} with an IP address %{hostip} and gateway %{fld2} has been %{disposition}" }
				id => "message-00011:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:21"
					"[rsa][message][id1]" => "00011:21"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:22
		# line in RSA: SIBR route in virtual router <node> for interface <interface> that has IP address <hostip> through interface <fld3> and gateway <fld4> with metric <fld5> was <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SIBR route in virtual router %{node} for interface %{interface} that has IP address %{hostip} through interface %{fld3} and gateway %{fld4} with metric %{fld5} was %{disposition}" }
				id => "message-00011:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:22"
					"[rsa][message][id1]" => "00011:22"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00011:23
		# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00011:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:23"
					"[rsa][message][id1]" => "00011:23"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00011:24
		# line in RSA: Route in virtual router "<node>" that has IP address <hostip> through interface <interface> and gateway <fld2> with metric <fld3> <disposition>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Route in virtual router \"%{node}\" that has IP address %{hostip} through interface %{interface} and gateway %{fld2} with metric %{fld3} %{disposition}. (%{fld1})" }
				id => "message-00011:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:24"
					"[rsa][message][id1]" => "00011:24"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00011:25
		# line in RSA: Route(s) in virtual router "<node>" with an IP address <hostip>/<fld2> and gateway <fld3> <disposition>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Route(s) in virtual router \"%{node}\" with an IP address %{hostip}/%{fld2} and gateway %{fld3} %{disposition}. (%{fld1})" }
				id => "message-00011:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:25"
					"[rsa][message][id1]" => "00011:25"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00011:26
		# line in RSA: Route in virtual router "<node>" with IP address <hostip>/<fld2> and next-hop as virtual router "<fld3>" created. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Route in virtual router \"%{node}\" with IP address %{hostip}/%{fld2} and next-hop as virtual router \"%{fld3}\" created. (%{fld1})" }
				id => "message-00011:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00011:26"
					"[rsa][message][id1]" => "00011:26"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00012" {
		# MESSAGE 00012:02
		# line in RSA: Service group <group> comments have been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Service group %{group} comments have been %{disposition}" }
				id => "message-00012:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:02"
					"[rsa][message][id1]" => "00012:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00012:03
		# line in RSA: Service group <change_old> <change_attribute> has been changed to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Service group %{change_old} %{change_attribute} has been changed to %{change_new}" }
				id => "message-00012:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:03"
					"[rsa][message][id1]" => "00012:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00012:04
		# line in RSA: <fld2> Service group <group> has <disposition> member <username> from host <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2} Service group %{group} has %{disposition} member %{username} from host %{saddr}" }
				id => "message-00012:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:04"
					"[rsa][message][id1]" => "00012:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00012:05
		# line in RSA:  <signame> from <saddr>/<sport> to <daddr>/<dport> protocol <protocol> (<fld2>) (<fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} from %{saddr}/%{sport} to %{daddr}/%{dport} protocol %{protocol} (%{fld2}) (%{fld3})" }
				id => "message-00012:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:05"
					"[rsa][message][id1]" => "00012:05"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00012:06
		# line in RSA:  <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00012:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:06"
					"[rsa][message][id1]" => "00012:06"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00012:07
		# line in RSA:   <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00012:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:07"
					"[rsa][message][id1]" => "00012:07"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00012:08
		# line in RSA: <fld2>: Service <service> has been <disposition> from host <saddr> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}: Service %{service} has been %{disposition} from host %{saddr} (%{fld1})" }
				id => "message-00012:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:08"
					"[rsa][message][id1]" => "00012:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00012:09
		# line in RSA:  <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00012:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:09"
					"[rsa][message][id1]" => "00012:09"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00012:10
		# line in RSA:   <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00012:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:10"
					"[rsa][message][id1]" => "00012:10"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00012:11
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, on zone <zone> interface <interface>.The attack occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, on zone %{zone} interface %{interface}.The attack occurred %{dclass_counter1} times. (%{fld1})" }
				id => "message-00012:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:11"
					"[rsa][message][id1]" => "00012:11"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00012:12
		# line in RSA:  <signame> from <saddr>/<sport> to <daddr>/<dport> protocol <protocol> (<zone>) <info> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} from %{saddr}/%{sport} to %{daddr}/%{dport} protocol %{protocol} (%{zone}) %{info} (%{fld1})" }
				id => "message-00012:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:12"
					"[rsa][message][id1]" => "00012:12"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00012
		# line in RSA: Service group <group> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Service group %{group} has been %{disposition}" }
				id => "message-00012"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012"
					"[rsa][message][id1]" => "00012"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00012:01
		# line in RSA: Service <service> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Service %{service} has been %{disposition}" }
				id => "message-00012:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00012:01"
					"[rsa][message][id1]" => "00012:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00013" {
		# MESSAGE 00013
		# line in RSA: Global Manager error in decoding bytes has been detected
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Global Manager error in decoding bytes has been detected" }
				id => "message-00013"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00013"
					"[rsa][message][id1]" => "00013"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00013:01
		# line in RSA: Intruder has attempted to connect to the NetScreen-Global Manager port! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> at interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Intruder has attempted to connect to the NetScreen-Global Manager port! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} at interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00013:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"signame" => "An Attempt to connect to NetScreen-Global Manager Port."
					"[event][id]" => "00013:01"
					"[rsa][message][id1]" => "00013:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00013:02
		# line in RSA: URL Filtering <fld2> has been changed to <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "URL Filtering %{fld2} has been changed to %{fld3}" }
				id => "message-00013:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00013:02"
					"[rsa][message][id1]" => "00013:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00013:03
		# line in RSA: Web Filtering has been <disposition> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Web Filtering has been %{disposition} (%{fld1})" }
				id => "message-00013:03"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00013:03"
					"[rsa][message][id1]" => "00013:03"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00014" {
		# MESSAGE 00014
		# line in RSA:  <change_attribute> in minutes has changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} in minutes has changed from %{change_old} to %{change_new}" }
				id => "message-00014"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014"
					"[rsa][message][id1]" => "00014"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00014:01
		# line in RSA: The group member <username> has been <disposition>{ to a group | from a group }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+group[\s]+member[\s]+(?<username>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\s\s]*)([\s]*to[\s]+a[\s]+group[\s]+|[\s]*from[\s]+a[\s]+group[\s]+)$" }
				id => "message-00014:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014:01"
					"[rsa][message][id1]" => "00014:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00014:02
		# line in RSA: The user group <group> has been <disposition> by <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The user group %{group} has been %{disposition} by %{username}" }
				id => "message-00014:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014:02"
					"[rsa][message][id1]" => "00014:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00014:03
		# line in RSA: The user <username> has been <disposition> by <administrator>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The user %{username} has been %{disposition} by %{administrator}" }
				id => "message-00014:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014:03"
					"[rsa][message][id1]" => "00014:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00014:04
		# line in RSA: Communication error with <hostname> server {{ <hostip> }: SrvErr (<fld2>), SockErr (<fld3>), Valid (<fld4>),Connected (<fld5>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Communication[\s]+error[\s]+with[\s]+(?<hostname>[^\s]*)[\s]+server[\s]+\{[\s]+(?<hostip>[^\s]*)[\s]+\}:[\s]+SrvErr[\s]+\((?<fld2>[^\)]*)\),[\s]+SockErr[\s]+\((?<fld3>[^\)]*)\),[\s]+Valid[\s]+\((?<fld4>[^\)]*)\),Connected[\s]+\((?<fld5>[^\)]*)\)$" }
				id => "message-00014:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014:04"
					"[rsa][message][id1]" => "00014:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00014:05
		# line in RSA:  System clock configurations have been <disposition> by admin <administrator>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System clock configurations have been %{disposition} by admin %{administrator}" }
				id => "message-00014:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014:05"
					"[rsa][message][id1]" => "00014:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00014:06
		# line in RSA:  System clock is <disposition> manually.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System clock is %{disposition} manually." }
				id => "message-00014:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014:06"
					"[rsa][message][id1]" => "00014:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00014:07
		# line in RSA:  System up time is <disposition> by <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System up time is %{disposition} by %{fld2}" }
				id => "message-00014:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014:07"
					"[rsa][message][id1]" => "00014:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00014:08
		# line in RSA:  Communication error with <hostname> server[<hostip>]: SrvErr(<fld2>),SockErr(<fld3>),Valid(<fld4>),Connected(<fld5>) (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Communication error with %{hostname} server[%{hostip}]: SrvErr(%{fld2}),SockErr(%{fld3}),Valid(%{fld4}),Connected(%{fld5}) (%{fld1})" }
				id => "message-00014:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00014:08"
					"[rsa][message][id1]" => "00014:08"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00015" {
		# MESSAGE 00015
		# line in RSA: Authentication type has been changed to <authmethod>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication type has been changed to %{authmethod}" }
				id => "message-00015"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015"
					"[rsa][message][id1]" => "00015"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:01
		# line in RSA:  IP tracking to <daddr> has <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP tracking to %{daddr} has %{disposition}" }
				id => "message-00015:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:01"
					"[rsa][message][id1]" => "00015:01"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:02
		# line in RSA: LDAP { server name | port number | distinguished name | common name } has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^LDAP[\s]+([\s]*server[\s]+name[\s]+|[\s]*port[\s]+number[\s]+|[\s]*distinguished[\s]+name[\s]+|[\s]*common[\s]+name[\s]+)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00015:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:02"
					"[rsa][message][id1]" => "00015:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:03
		# line in RSA: Primary HA link has gone down. Local NetScreen device has begun using the secondary HA link
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Primary HA link has gone down. Local NetScreen device has begun using the secondary HA link" }
				id => "message-00015:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:03"
					"[rsa][message][id1]" => "00015:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:04
		# line in RSA: RADIUS server { IP | port | secret } has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RADIUS[\s]+server[\s]+([\s]*IP[\s]+|[\s]*port[\s]+|[\s]*secret[\s]+)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00015:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:04"
					"[rsa][message][id1]" => "00015:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:05
		# line in RSA: SecurID { authentication port | duress mode | timeout value | number of retries value } has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SecurID[\s]+([\s]*authentication[\s]+port[\s]+|[\s]*duress[\s]+mode[\s]+|[\s]*timeout[\s]+value[\s]+|[\s]*number[\s]+of[\s]+retries[\s]+value[\s]+)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00015:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:05"
					"[rsa][message][id1]" => "00015:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:06
		# line in RSA: { Master | Backup } SecurID server IP address has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Master[\s]+|[\s]*Backup[\s]+)[\s]+SecurID[\s]+server[\s]+IP[\s]+address[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00015:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:06"
					"[rsa][message][id1]" => "00015:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:07
		# line in RSA: HA change from slave to master
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA change from slave to master" }
				id => "message-00015:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:07"
					"[rsa][message][id1]" => "00015:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:08
		# line in RSA: inconsistent configuration between master and slave
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "inconsistent configuration between master and slave" }
				id => "message-00015:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:08"
					"[rsa][message][id1]" => "00015:08"
					"[event][categoryid]" => "1702030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:09
		# line in RSA: { configuration | Configuration } out of sync between local unit and remote unit
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*configuration[\s]+|[\s]*Configuration[\s]+)[\s]+out[\s]+of[\s]+sync[\s]+between[\s]+local[\s]+unit[\s]+and[\s]+remote[\s]+unit$" }
				id => "message-00015:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:09"
					"[rsa][message][id1]" => "00015:09"
					"[event][categoryid]" => "1702030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:10
		# line in RSA: HA control channel change to <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA control channel change to %{interface}" }
				id => "message-00015:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:10"
					"[rsa][message][id1]" => "00015:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:11
		# line in RSA: HA data channel change to <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA data channel change to %{interface}" }
				id => "message-00015:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:11"
					"[rsa][message][id1]" => "00015:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:12
		# line in RSA: HA { control | data } channel moved from link { up | down } to { up | down } (<interface>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^HA[\s]+([\s]*control[\s]+|[\s]*data[\s]+)[\s]+channel[\s]+moved[\s]+from[\s]+link[\s]+([\s]*up[\s]+|[\s]*down[\s]+)[\s]+to[\s]+([\s]*up[\s]+|[\s]*down[\s]+)[\s]+\((?<interface>[^\)]*)\)$" }
				id => "message-00015:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:12"
					"[rsa][message][id1]" => "00015:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:13
		# line in RSA: HA: Slave is down
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Slave is down" }
				id => "message-00015:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:13"
					"[rsa][message][id1]" => "00015:13"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:14
		# line in RSA: NSRP link { up | down }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP[\s]+link[\s]+([\s]*up[\s]+|[\s]*down[\s]+)\.$" }
				id => "message-00015:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:14"
					"[rsa][message][id1]" => "00015:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:15
		# line in RSA: no HA <fld2> channel available (<fld3> used by other channel)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "no HA %{fld2} channel available (%{fld3} used by other channel)" }
				id => "message-00015:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:15"
					"[rsa][message][id1]" => "00015:15"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:16
		# line in RSA: The NSRP configuration is out of synchronization between the local device and the peer device.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The NSRP configuration is out of synchronization between the local device and the peer device." }
				id => "message-00015:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:16"
					"[rsa][message][id1]" => "00015:16"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:17
		# line in RSA: NSRP <change_attribute> <change_old> changed to link channel <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP %{change_attribute} %{change_old} changed to link channel %{change_new}" }
				id => "message-00015:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:17"
					"[rsa][message][id1]" => "00015:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:18
		# line in RSA: RTO mirror group <group> with direction <direction> on peer device <fld2> changed from <fld3> to <fld4> state.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTO mirror group %{group} with direction %{direction} on peer device %{fld2} changed from %{fld3} to %{fld4} state." }
				id => "message-00015:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"change_attribute" => "RTO mirror group"
					"[event][id]" => "00015:18"
					"[rsa][message][id1]" => "00015:18"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:19
		# line in RSA: RTO mirror group <group> with direction <direction> on local device <fld2>, detected a duplicate direction on the peer device <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTO mirror group %{group} with direction %{direction} on local device %{fld2}, detected a duplicate direction on the peer device %{fld3}" }
				id => "message-00015:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:19"
					"[rsa][message][id1]" => "00015:19"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:20
		# line in RSA:  RTO mirror group <group> with direction <direction> changed on the local device from <fld2> to up state, it had peer device <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTO mirror group %{group} with direction %{direction} changed on the local device from %{fld2} to up state, it had peer device %{fld3}" }
				id => "message-00015:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:20"
					"[rsa][message][id1]" => "00015:20"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:21
		# line in RSA: Peer device <fld2> { disappeared | was discovered }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Peer[\s]+device[\s]+(?<fld2>[^\s]*)[\s]+([\s]*disappeared[\s]+|[\s]*was[\s]+discovered[\s]+)\.$" }
				id => "message-00015:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:21"
					"[rsa][message][id1]" => "00015:21"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:22
		# line in RSA: { The local | The peer | Peer } device <fld2> in the Virtual Security Device group <group> changed <change_attribute> from <change_old> to { <change_new> (<fld1>) | <change_new> } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*The[\s]+local[\s]+|[\s]*The[\s]+peer[\s]+|[\s]*Peer[\s]+)[\s]+device[\s]+(?<fld2>[^\s]*)[\s]+in[\s]+the[\s]+Virtual[\s]+Security[\s]+Device[\s]+group[\s]+(?<group>[^\s]*)[\s]+changed[\s]+(?<change_attribute>[^\s]*)[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+([\s]*(?<change_new>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<change_new>[^\s]*)[\s]+)[\s]+$" }
				id => "message-00015:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:22"
					"[rsa][message][id1]" => "00015:22"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00015:23
		# line in RSA: WebAuth is set to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WebAuth is set to %{fld2}" }
				id => "message-00015:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:23"
					"[rsa][message][id1]" => "00015:23"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:24
		# line in RSA: Default firewall authentication server has been changed to <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Default firewall authentication server has been changed to %{hostname}" }
				id => "message-00015:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:24"
					"[rsa][message][id1]" => "00015:24"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:25
		# line in RSA: Admin user <administrator> attempted to verify the encrypted password <fld2>. Verification was successful
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user %{administrator} attempted to verify the encrypted password %{fld2}. Verification was successful" }
				id => "message-00015:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:25"
					"[rsa][message][id1]" => "00015:25"
					"[event][categoryid]" => "1613050100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:29
		# line in RSA:  Admin user <administrator> attempted to verify the encrypted password <fld2>. Verification failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user %{administrator} attempted to verify the encrypted password %{fld2}. Verification failed" }
				id => "message-00015:29"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:29"
					"[rsa][message][id1]" => "00015:29"
					"[event][categoryid]" => "1613050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:26
		# line in RSA: unit <fld2> just { disappeared | discovered }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^unit[\s]+(?<fld2>[^\s]*)[\s]+just[\s]+([\s]*disappeared[\s]+|[\s]*discovered[\s]+)$" }
				id => "message-00015:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:26"
					"[rsa][message][id1]" => "00015:26"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:33
		# line in RSA: NSRP: HA data channel change to  <interface>. (<fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP: HA data channel change to  %{interface}. (%{fld2})" }
				id => "message-00015:33"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:33"
					"[rsa][message][id1]" => "00015:33"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00015:27
		# line in RSA: NSRP: <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP: %{fld2}" }
				id => "message-00015:27"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:27"
					"[rsa][message][id1]" => "00015:27"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:28
		# line in RSA: Auth server <hostname> RADIUS retry timeout has been set to default of <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth server %{hostname} RADIUS retry timeout has been set to default of %{fld2}" }
				id => "message-00015:28"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:28"
					"[rsa][message][id1]" => "00015:28"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00015:30
		# line in RSA: Number of RADIUS retries for auth server <hostname> { has been | is } set to <fld2> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Number[\s]+of[\s]+RADIUS[\s]+retries[\s]+for[\s]+auth[\s]+server[\s]+(?<hostname>[^\s]*)[\s]+([\s]*has[\s]+been[\s]+|[\s]*is[\s]+)[\s]+set[\s]+to[\s]+(?<fld2>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00015:30"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:30"
					"[rsa][message][id1]" => "00015:30"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00015:31
		# line in RSA: Forced timeout for Auth server <hostname> is unset to its default value, <info> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Forced timeout for Auth server %{hostname} is unset to its default value, %{info} (%{fld1})" }
				id => "message-00015:31"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:31"
					"[rsa][message][id1]" => "00015:31"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00015:32
		# line in RSA: Accounting port of server RADIUS is set to <network_port>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Accounting port of server RADIUS is set to %{network_port}. (%{fld1})" }
				id => "message-00015:32"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00015:32"
					"[rsa][message][id1]" => "00015:32"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00016" {
		# MESSAGE 00016
		# line in RSA: <signame> From <saddr>:<sport> to <daddr> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00016"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016"
					"[rsa][message][id1]" => "00016"
					"[event][categoryid]" => "1103000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00016:01
		# line in RSA: Address VIP (<fld2>) for <fld3> has been <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Address VIP (%{fld2}) for %{fld3} has been %{disposition}." }
				id => "message-00016:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016:01"
					"[rsa][message][id1]" => "00016:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00016:02
		# line in RSA: VIP (<fld2>) has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIP (%{fld2}) has been %{disposition}" }
				id => "message-00016:02"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016:02"
					"[rsa][message][id1]" => "00016:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00016:03
		# line in RSA: <signame> from <saddr>/<sport> to <daddr>/<dport> protocol <protocol> (<fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} from %{saddr}/%{sport} to %{daddr}/%{dport} protocol %{protocol} (%{fld2})" }
				id => "message-00016:03"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016:03"
					"[rsa][message][id1]" => "00016:03"
					"[event][categoryid]" => "1103000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00016:05
		# line in RSA: VIP multi-port was <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIP multi-port was %{disposition}" }
				id => "message-00016:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016:05"
					"[rsa][message][id1]" => "00016:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00016:06
		# line in RSA: <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00016:06"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016:06"
					"[rsa][message][id1]" => "00016:06"
					"[event][categoryid]" => "1103000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00016:07
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> ({ zone <zone>, | zone <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(([\s]*zone[\s]+(?<zone>[^,]*),[\s]+|[\s]*zone[\s]+(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00016:07"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016:07"
					"[rsa][message][id1]" => "00016:07"
					"[event][categoryid]" => "1103000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00016:08
		# line in RSA: VIP (<fld2>:<fld3> HTTP <fld4>) Modify by <username> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIP (%{fld2}:%{fld3} HTTP %{fld4}) Modify by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00016:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016:08"
					"[rsa][message][id1]" => "00016:08"
					"[event][categoryid]" => "1001020305"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00016:09
		# line in RSA: VIP (<fld2>:<fld3> HTTP <fld4>) New by <username> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIP (%{fld2}:%{fld3} HTTP %{fld4}) New by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00016:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00016:09"
					"[rsa][message][id1]" => "00016:09"
					"[event][categoryid]" => "1001030305"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00017" {
		# MESSAGE 00017
		# line in RSA:  <signame> From <saddr>:<sport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00017"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017"
					"[rsa][message][id1]" => "00017"
					"[event][categoryid]" => "1103010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:23
		# line in RSA: Gateway <fld2> at <fld3> in <fld5> mode with ID { [<fld4>] | <fld4> } has been <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport> <fld>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Gateway[\s]+(?<fld2>[^\s]*)[\s]+at[\s]+(?<fld3>[^\s]*)[\s]+in[\s]+(?<fld5>[^\s]*)[\s]+mode[\s]+with[\s]+ID[\s]+([\s]*\[(?<fld4>[^\]]*)\][\s]+|[\s]*(?<fld4>[^\s]*)[\s]+)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+(?<fld>.*)$" }
				id => "message-00017:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:23"
					"[rsa][message][id1]" => "00017:23"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:01
		# line in RSA: { <fld1>: Gateway | Gateway } <fld2> at <fld3> in <fld5> mode with { ID: | ID } <fld4> has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<fld1>[^:]*):[\s]+Gateway[\s]+|[\s]*Gateway[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+at[\s]+(?<fld3>[^\s]*)[\s]+in[\s]+(?<fld5>[^\s]*)[\s]+mode[\s]+with[\s]+([\s]*ID:[\s]+|[\s]*ID[\s]+)[\s]+(?<fld4>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00017:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:01"
					"[rsa][message][id1]" => "00017:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:02
		# line in RSA: IKE <hostip>: Gateway settings have been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Gateway settings have been %{disposition}" }
				id => "message-00017:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:02"
					"[rsa][message][id1]" => "00017:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:03
		# line in RSA: IKE key <fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE key %{fld2} has been %{disposition}" }
				id => "message-00017:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:03"
					"[rsa][message][id1]" => "00017:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:04
		# line in RSA: IP { address pool | pool } <group_object> with range <fld2> has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IP[\s]+([\s]*address[\s]+pool[\s]+|[\s]*pool[\s]+)[\s]+(?<group_object>[^\s]*)[\s]+with[\s]+range[\s]+(?<fld2>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00017:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:04"
					"[rsa][message][id1]" => "00017:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:05
		# line in RSA: IPSec NAT-T for VPN <group> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IPSec NAT-T for VPN %{group} has been %{disposition}" }
				id => "message-00017:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:05"
					"[rsa][message][id1]" => "00017:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:06
		# line in RSA: The DF-BIT for VPN <group> has been set to { clear | set | copy }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+DF\-BIT[\s]+for[\s]+VPN[\s]+(?<group>[^\s]*)[\s]+has[\s]+been[\s]+set[\s]+to[\s]+([\s]*clear[\s]+|[\s]*set[\s]+|[\s]*copy[\s]+)\.$" }
				id => "message-00017:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:06"
					"[rsa][message][id1]" => "00017:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:07
		# line in RSA: The DF-BIT for VPN <group> has been { clear | cleared | set | copy | copied }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+DF\-BIT[\s]+for[\s]+VPN[\s]+(?<group>[^\s]*)[\s]+has[\s]+been[\s]+([\s]*clear[\s]+|[\s]*cleared[\s]+|[\s]*set[\s]+|[\s]*copy[\s]+|[\s]*copied[\s]+)$" }
				id => "message-00017:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:07"
					"[rsa][message][id1]" => "00017:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:08
		# line in RSA: VPN <group> with gateway <fld2> and SPI <fld3>/<fld4> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN %{group} with gateway %{fld2} and SPI %{fld3}/%{fld4} has been %{disposition}" }
				id => "message-00017:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:08"
					"[rsa][message][id1]" => "00017:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:09
		# line in RSA: {<fld1>: VPN | VPN } <group> with gateway <fld2> { no-rekey | rekey, | rekey } and p2-proposal <fld3> has been { <disposition> from peer unit | <disposition> from host <saddr> | <disposition> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<fld1>[^:]*):[\s]+VPN[\s]+|[\s]*VPN[\s]+)[\s]+(?<group>[^\s]*)[\s]+with[\s]+gateway[\s]+(?<fld2>[^\s]*)[\s]+([\s]*no\-rekey[\s]+|[\s]*rekey,[\s]+|[\s]*rekey[\s]+)[\s]+and[\s]+p2\-proposal[\s]+(?<fld3>[^\s]*)[\s]+has[\s]+been[\s]+([\s]*(?<disposition>[^\s]*)[\s]+from[\s]+peer[\s]+unit[\s]+|[\s]*(?<disposition>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*(?<disposition>[^\s]*)[\s]+)$" }
				id => "message-00017:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:09"
					"[rsa][message][id1]" => "00017:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:10
		# line in RSA: VPN monitoring for VPN <group> has been <disposition>. Src IF <sinterface> dst IP <daddr> with rekeying { enabled | disabled }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VPN[\s]+monitoring[\s]+for[\s]+VPN[\s]+(?<group>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\.]*)\.[\s]+Src[\s]+IF[\s]+(?<sinterface>[^\s]*)[\s]+dst[\s]+IP[\s]+(?<daddr>[^\s]*)[\s]+with[\s]+rekeying[\s]+([\s]*enabled[\s]+|[\s]*disabled[\s]+)\.$" }
				id => "message-00017:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:10"
					"[rsa][message][id1]" => "00017:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:11
		# line in RSA: VPN monitoring for VPN <group> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN monitoring for VPN %{group} has been %{disposition}" }
				id => "message-00017:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:11"
					"[rsa][message][id1]" => "00017:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:12
		# line in RSA: VPN monitoring { threshold | interval | frequency } has been { unset | set to <fld2> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VPN[\s]+monitoring[\s]+([\s]*threshold[\s]+|[\s]*interval[\s]+|[\s]*frequency[\s]+)[\s]+has[\s]+been[\s]+([\s]*unset[\s]+|[\s]*set[\s]+to[\s]+(?<fld2>[^\s]*)[\s]+)$" }
				id => "message-00017:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:12"
					"[rsa][message][id1]" => "00017:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:26
		# line in RSA:  VPN <group> with gateway <fld2> and P2 proposal <fld3> has been added by <username> via <logon_type> from host <saddr>:<sport>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN %{group} with gateway %{fld2} and P2 proposal %{fld3} has been added by %{username} via %{logon_type} from host %{saddr}:%{sport}. (%{fld1})" }
				id => "message-00017:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:26"
					"[rsa][message][id1]" => "00017:26"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00017:13
		# line in RSA: No IP pool has been assigned. You cannot allocate an IP address.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No IP pool has been assigned. You cannot allocate an IP address." }
				id => "message-00017:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:13"
					"[rsa][message][id1]" => "00017:13"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:14
		# line in RSA: P1 proposal <fld2> with <protocol_detail>, DH group <group>, ESP <encryption_type>, auth <authmethod>, and lifetime <fld3> has been <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "P1 proposal %{fld2} with %{protocol_detail}, DH group %{group}, ESP %{encryption_type}, auth %{authmethod}, and lifetime %{fld3} has been %{disposition} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport}. (%{fld1})" }
				id => "message-00017:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:14"
					"[rsa][message][id1]" => "00017:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00017:15
		# line in RSA: P2 proposal <fld2> with DH group <group> { AH | ESP } <encryption_type> auth <authmethod> and lifetime (<fld3>) (<fld4>) has been <disposition>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^P2[\s]+proposal[\s]+(?<fld2>[^\s]*)[\s]+with[\s]+DH[\s]+group[\s]+(?<group>[^\s]*)[\s]+([\s]*AH[\s]+|[\s]*ESP[\s]+)[\s]+(?<encryption_type>[^\s]*)[\s]+auth[\s]+(?<authmethod>[^\s]*)[\s]+and[\s]+lifetime[\s]+\((?<fld3>[^\)]*)\)[\s]+\((?<fld4>[^\)]*)\)[\s]+has[\s]+been[\s]+(?<disposition>[^\.]*)\.$" }
				id => "message-00017:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:15"
					"[rsa][message][id1]" => "00017:15"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:31
		# line in RSA: P1 proposal <fld2> with <protocol_detail> DH group <group> { AH | ESP } <encryption_type> auth <authmethod> and lifetime <fld3> has been <disposition>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^P1[\s]+proposal[\s]+(?<fld2>[^\s]*)[\s]+with[\s]+(?<protocol_detail>[^\s]*)[\s]+DH[\s]+group[\s]+(?<group>[^\s]*)[\s]+([\s]*AH[\s]+|[\s]*ESP[\s]+)[\s]+(?<encryption_type>[^\s]*)[\s]+auth[\s]+(?<authmethod>[^\s]*)[\s]+and[\s]+lifetime[\s]+(?<fld3>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\.]*)\.$" }
				id => "message-00017:31"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:31"
					"[rsa][message][id1]" => "00017:31"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:16
		# line in RSA: vpnmonitor interval is { unset | set to <fld2> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^vpnmonitor[\s]+interval[\s]+is[\s]+([\s]*unset[\s]+|[\s]*set[\s]+to[\s]+(?<fld2>[^\s]*)[\s]+)$" }
				id => "message-00017:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:16"
					"[rsa][message][id1]" => "00017:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:17
		# line in RSA: vpnmonitor threshold is { unset | set to <trigger_val>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^vpnmonitor[\s]+threshold[\s]+is[\s]+([\s]*unset[\s]+|[\s]*set[\s]+to[\s]+(?<trigger_val>.*))$" }
				id => "message-00017:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:17"
					"[rsa][message][id1]" => "00017:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:18
		# line in RSA: IP { address pool | pool } <group_object> with range <fld2> was <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IP[\s]+([\s]*address[\s]+pool[\s]+|[\s]*pool[\s]+)[\s]+(?<group_object>[^\s]*)[\s]+with[\s]+range[\s]+(?<fld2>[^\s]*)[\s]+was[\s]+(?<disposition>.*)$" }
				id => "message-00017:18"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:18"
					"[rsa][message][id1]" => "00017:18"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:19
		# line in RSA:   <signame> From <saddr> to <daddr>, using protocol <protocol>, and arriving at {interface|Interface} <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+using[\s]+protocol[\s]+(?<protocol>[^,]*),[\s]+and[\s]+arriving[\s]+at[\s]+(interface|Interface)[\s]+(?<dinterface>[^\s]*)[\s]+in[\s]+zone[\s]+(?<dst_zone>[^\.]*)\.(?<space>[^T]*)The[\s]+attack[\s]+occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times$" }
				id => "message-00017:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:19"
					"[rsa][message][id1]" => "00017:19"
					"[event][categoryid]" => "1103010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:20
		# line in RSA:   <signame> From <saddr> to <daddr>, proto <protocol> (zone { <zone>, | <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+([\s]*(?<zone>[^,]*),[\s]+|[\s]*(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00017:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:20"
					"[rsa][message][id1]" => "00017:20"
					"[event][categoryid]" => "1103010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00017:21
		# line in RSA:   <signame> From <saddr> to <daddr>, using protocol <protocol>, on zone <zone> interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr}, using protocol %{protocol}, on zone %{zone} interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00017:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:21"
					"[rsa][message][id1]" => "00017:21"
					"[event][categoryid]" => "1103010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00017:22
		# line in RSA: VPN <group> with gateway <fld2> and P2 proposal <fld3> has been <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN %{group} with gateway %{fld2} and P2 proposal %{fld3} has been %{disposition} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00017:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:22"
					"[rsa][message][id1]" => "00017:22"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00017:24
		# line in RSA: VPN "<group>" has been bound to tunnel interface <interface>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN \"%{group}\" has been bound to tunnel interface %{interface}. (%{fld1})" }
				id => "message-00017:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:24"
					"[rsa][message][id1]" => "00017:24"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00017:25
		# line in RSA: VPN <group> with gateway <fld2> and P2 proposal standard has been added by admin <administrator> via NSRP Peer  (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN %{group} with gateway %{fld2} and P2 proposal standard has been added by admin %{administrator} via NSRP Peer  (%{fld1})" }
				id => "message-00017:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:25"
					"[rsa][message][id1]" => "00017:25"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00017:28
		# line in RSA:   P2 proposal <fld2> with DH group <group>, ESP, enc <encryption_type>, auth <authmethod>, and lifetime <fld3> has been <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "P2 proposal %{fld2} with DH group %{group}, ESP, enc %{encryption_type}, auth %{authmethod}, and lifetime %{fld3} has been %{disposition} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport}. (%{fld1})" }
				id => "message-00017:28"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:28"
					"[rsa][message][id1]" => "00017:28"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00017:29
		# line in RSA: L2TP "<fld2>", all-L2TP-users secret "<fld3>" keepalive <fld4> has been <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "L2TP \"%{fld2}\", all-L2TP-users secret \"%{fld3}\" keepalive %{fld4} has been %{disposition} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport}. (%{fld1})" }
				id => "message-00017:29"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00017:29"
					"[rsa][message][id1]" => "00017:29"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00018" {
		# MESSAGE 00018
		# line in RSA: Positions of policies <fld2> and <fld3> have been exchanged
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Positions of policies %{fld2} and %{fld3} have been exchanged" }
				id => "message-00018"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018"
					"[rsa][message][id1]" => "00018"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00018:01
		# line in RSA: Deny Policy Alarm
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny Policy Alarm" }
				id => "message-00018:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00018:01"
					"[rsa][message][id1]" => "00018:01"
					"[event][categoryid]" => "1502010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00018:02
		# line in RSA: Device{|&}s <change_attribute> has been changed from <change_old> to <change_new> by admin <administrator>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Device(|&)s[\s]+(?<change_attribute>[^\s]*)[\s]+has[\s]+been[\s]+changed[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>[^\s]*)[\s]+by[\s]+admin[\s]+(?<administrator>.*)$" }
				id => "message-00018:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:02"
					"[rsa][message][id1]" => "00018:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00018:04
		# line in RSA:   <fld2> Policy (<policy_id>, <info> ) was <disposition> from host <saddr> by admin <administrator> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2} Policy (%{policy_id}, %{info} ) was %{disposition} from host %{saddr} by admin %{administrator} (%{fld1})" }
				id => "message-00018:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:04"
					"[rsa][message][id1]" => "00018:04"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:16
		# line in RSA: <fld2> Policy (<policy_id>, <info> ) was <disposition> by admin <administrator> via NSRP Peer 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2} Policy (%{policy_id}, %{info} ) was %{disposition} by admin %{administrator} via NSRP Peer" }
				id => "message-00018:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:16"
					"[rsa][message][id1]" => "00018:16"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00018:06
		# line in RSA: <fld2> Policy <policy_id> has been moved { before | after } <fld3> by admin <administrator>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^\s]*)[\s]+Policy[\s]+(?<policy_id>[^\s]*)[\s]+has[\s]+been[\s]+moved[\s]+([\s]*before[\s]+|[\s]*after[\s]+)[\s]+(?<fld3>[^\s]*)[\s]+by[\s]+admin[\s]+(?<administrator>.*)$" }
				id => "message-00018:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:06"
					"[rsa][message][id1]" => "00018:06"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00018:08
		# line in RSA: Policy <policy_id> application was modified to <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy %{policy_id} application was modified to %{disposition} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00018:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:08"
					"[rsa][message][id1]" => "00018:08"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:09
		# line in RSA:   Policy (<policy_id>, <info>) was <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy (%{policy_id}, %{info}) was %{disposition} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00018:09"
				add_field => {
				"vsys" => "%{hvsys}"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:09"
					"[rsa][message][id1]" => "00018:09"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:10
		# line in RSA:   Policy (<policy_id>, <info>) was { <disposition> from peer unit | <disposition>} by <username> via <interface> from host <saddr> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Policy[\s]+\((?<policy_id>[^,]*),[\s]+(?<info>[^\)]*)\)[\s]+was[\s]+([\s]*(?<disposition>[^\s]*)[\s]+from[\s]+peer[\s]+unit[\s]+|[\s]*(?<disposition>[^\s]*))[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<interface>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00018:10"
				add_field => {
				"vsys" => "%{hvsys}"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:10"
					"[rsa][message][id1]" => "00018:10"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:11
		# line in RSA:   { Service <service> | Attack group <signame> } was <disposition> to policy ID <policy_id> by <username> via <logon_type> from { host <saddr> to <daddr>:<dport>. | host <saddr> } (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Service[\s]+(?<service>[^\s]*)[\s]+|[\s]*Attack[\s]+group[\s]+(?<signame>[^\s]*)[\s]+)[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+to[\s]+policy[\s]+ID[\s]+(?<policy_id>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+([\s]*host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\.]*)\.[\s]+|[\s]*host[\s]+(?<saddr>[^\s]*)[\s]+)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00018:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:11"
					"[rsa][message][id1]" => "00018:11"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:12
		# line in RSA:   In policy <policy_id>, the { application | attack severity | DI attack component } was modified by <username> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*In[\s]+policy[\s]+(?<policy_id>[^,]*),[\s]+the[\s]+([\s]*application[\s]+|[\s]*attack[\s]+severity[\s]+|[\s]*DI[\s]+attack[\s]+component[\s]+)[\s]+was[\s]+modified[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00018:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:12"
					"[rsa][message][id1]" => "00018:12"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:32
		# line in RSA:  {Source|Destination} address <dhost>(<daddr>) was <disposition> { from | to } policy ID <policy_id> by admin <administrator> via NSRP Peer . (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(Source|Destination)[\s]+address[\s]+(?<dhost>[^\(]*)\((?<daddr>[^\)]*)\)[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+([\s]*from[\s]+|[\s]*to[\s]+)[\s]+policy[\s]+ID[\s]+(?<policy_id>[^\s]*)[\s]+by[\s]+admin[\s]+(?<administrator>[^\s]*)[\s]+via[\s]+NSRP[\s]+Peer[\s]+\.[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00018:32"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:32"
					"[rsa][message][id1]" => "00018:32"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:22
		# line in RSA:  {Source|Destination} address <dhost> was <disposition> { from | to } policy ID <policy_id> by admin <administrator> via NSRP Peer . (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(Source|Destination)[\s]+address[\s]+(?<dhost>[^\s]*)[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+([\s]*from[\s]+|[\s]*to[\s]+)[\s]+policy[\s]+ID[\s]+(?<policy_id>[^\s]*)[\s]+by[\s]+admin[\s]+(?<administrator>[^\s]*)[\s]+via[\s]+NSRP[\s]+Peer[\s]+\.[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00018:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:22"
					"[rsa][message][id1]" => "00018:22"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:15
		# line in RSA:  <agent> was <disposition> from policy <policy_id> { source | destination } address by admin <administrator> via NSRP Peer  
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\s]*)[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+from[\s]+policy[\s]+(?<policy_id>[^\s]*)[\s]+([\s]*source[\s]+|[\s]*destination[\s]+)[\s]+address[\s]+by[\s]+admin[\s]+(?<administrator>[^\s]*)[\s]+via[\s]+NSRP[\s]+Peer[\s]+$" }
				id => "message-00018:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:15"
					"[rsa][message][id1]" => "00018:15"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00018:14
		# line in RSA:    <agent> was <disposition> {to|from} policy <policy_id> { service | source address | destination address } by <username> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\s]*)[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+(to|from)[\s]+policy[\s]+(?<policy_id>[^\s]*)[\s]+([\s]*service[\s]+|[\s]*source[\s]+address[\s]+|[\s]*destination[\s]+address[\s]+)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00018:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:14"
					"[rsa][message][id1]" => "00018:14"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:29
		# line in RSA:  Service <service> was <disposition> to policy ID <policy_id> by admin <administrator> via NSRP Peer . (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Service %{service} was %{disposition} to policy ID %{policy_id} by admin %{administrator} via NSRP Peer . (%{fld1})" }
				id => "message-00018:29"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:29"
					"[rsa][message][id1]" => "00018:29"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:07
		# line in RSA:  <agent> was added to policy <policy_id> <rule_group> by admin <administrator> via NSRP Peer  <space> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent} was added to policy %{policy_id} %{rule_group} by admin %{administrator} via NSRP Peer  %{space} (%{fld1})" }
				id => "message-00018:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:07"
					"[rsa][message][id1]" => "00018:07"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:18
		# line in RSA: Service <service> was <disposition> to policy ID <policy_id> by <username> via <logon_type> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Service %{service} was %{disposition} to policy ID %{policy_id} by %{username} via %{logon_type} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00018:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:18"
					"[rsa][message][id1]" => "00018:18"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:17
		# line in RSA:  AntiSpam ns-profile was <disposition> from policy ID <policy_id> by <username> via <logon_type> from host <saddr> to <daddr>:<dport>. (<fld1>)  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AntiSpam ns-profile was %{disposition} from policy ID %{policy_id} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport}. (%{fld1})" }
				id => "message-00018:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:17"
					"[rsa][message][id1]" => "00018:17"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:19
		# line in RSA: Source address Info <info> was <disposition> to policy ID <policy_id> by <username> via <logon_type> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source address Info %{info} was %{disposition} to policy ID %{policy_id} by %{username} via %{logon_type} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00018:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:19"
					"[rsa][message][id1]" => "00018:19"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:23
		# line in RSA: { Destination | Source } address <info> was added to policy ID <policy_id> by <username> via <logon_type> { from host | to } { <saddr> to <daddr>:<dport> | <daddr>:<dport> } (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Destination[\s]+|[\s]*Source[\s]+)[\s]+address[\s]+(?<info>[^\s]*)[\s]+was[\s]+added[\s]+to[\s]+policy[\s]+ID[\s]+(?<policy_id>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+([\s]*from[\s]+host[\s]+|[\s]*to[\s]+)[\s]+([\s]*(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+)[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00018:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:23"
					"[rsa][message][id1]" => "00018:23"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:21
		# line in RSA:  Service <service> was deleted from policy ID <policy_id> by <username> via <logon_type> from host <saddr>:<sport>. (<fld1>)  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Service %{service} was deleted from policy ID %{policy_id} by %{username} via %{logon_type} from host %{saddr}:%{sport}. (%{fld1})" }
				id => "message-00018:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:21"
					"[rsa][message][id1]" => "00018:21"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:24
		# line in RSA: Policy (<policyname>) was <disposition> by <username> via <logon_type> to <daddr>:<dport> (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy (%{policyname}) was %{disposition} by %{username} via %{logon_type} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00018:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:24"
					"[rsa][message][id1]" => "00018:24"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:25
		# line in RSA:  {Destination|Source} address <info> was added to policy ID <policy_id> by <username> via <logon_type> from host <saddr>. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(Destination|Source)[\s]+address[\s]+(?<info>[^\s]*)[\s]+was[\s]+added[\s]+to[\s]+policy[\s]+ID[\s]+(?<policy_id>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\.]*)\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00018:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:25"
					"[rsa][message][id1]" => "00018:25"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:30
		# line in RSA:  {Destination|Source} address <info> was deleted from policy ID <policy_id> by <username> via <logon_type> from host <saddr>. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(Destination|Source)[\s]+address[\s]+(?<info>[^\s]*)[\s]+was[\s]+deleted[\s]+from[\s]+policy[\s]+ID[\s]+(?<policy_id>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\.]*)\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00018:30"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:30"
					"[rsa][message][id1]" => "00018:30"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:26
		# line in RSA: In policy <policy_id>, the application was modified to <disposition> by {admin <administrator>|<username>} via {NSRP Peer |<logon_type> from host <saddr>}. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^In[\s]+policy[\s]+(?<policy_id>[^,]*),[\s]+the[\s]+application[\s]+was[\s]+modified[\s]+to[\s]+(?<disposition>[^\s]*)[\s]+by[\s]+(admin[\s]+(?<administrator>[^\s]*)|(?<username>[^\s]*))[\s]+via[\s]+(NSRP[\s]+Peer[\s]+|(?<logon_type>[^\s]*)[\s]+from[\s]+host[\s]+(?<saddr>[^\.]*))\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00018:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:26"
					"[rsa][message][id1]" => "00018:26"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:27
		# line in RSA: In policy <policy_id>, the DI attack component was modified by <username> via <logon_type> from host <saddr>:<sport>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "In policy %{policy_id}, the DI attack component was modified by %{username} via %{logon_type} from host %{saddr}:%{sport}. (%{fld1})" }
				id => "message-00018:27"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:27"
					"[rsa][message][id1]" => "00018:27"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:28
		# line in RSA: In policy <policyname>, the DI attack component was modified by admin <administrator> via <logon_type>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "In policy %{policyname}, the DI attack component was modified by admin %{administrator} via %{logon_type}. (%{fld1})" }
				id => "message-00018:28"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"info" => "the DI attack component was modified"
					"[event][id]" => "00018:28"
					"[rsa][message][id1]" => "00018:28"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00018:03
		# line in RSA: Policy (<policy_id>, <info>) was <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Policy (%{policy_id}, %{info}) was %{disposition}" }
				id => "message-00018:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:03"
					"[rsa][message][id1]" => "00018:03"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00018:31
		# line in RSA:   In policy <policy_id>, the option <fld2> was <disposition>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "In policy %{policy_id}, the option %{fld2} was %{disposition}. (%{fld1})" }
				id => "message-00018:31"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00018:31"
					"[rsa][message][id1]" => "00018:31"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00019" {
		# MESSAGE 00019
		# line in RSA: Attempt to enable WebTrends has <disposition> because WebTrends settings have not yet been configured
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attempt to enable WebTrends has %{disposition} because WebTrends settings have not yet been configured" }
				id => "message-00019"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019"
					"[rsa][message][id1]" => "00019"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:01
		# line in RSA: Attempt to enable { traffic logging via syslog | syslog } has <disposition> because syslog settings have not yet been configured
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Attempt[\s]+to[\s]+enable[\s]+([\s]*traffic[\s]+logging[\s]+via[\s]+syslog[\s]+|[\s]*syslog[\s]+)[\s]+has[\s]+(?<disposition>[^\s]*)[\s]+because[\s]+syslog[\s]+settings[\s]+have[\s]+not[\s]+yet[\s]+been[\s]+configured$" }
				id => "message-00019:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:01"
					"[rsa][message][id1]" => "00019:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:02
		# line in RSA: Socket cannot be assigned for { WebTrends | syslog }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Socket[\s]+cannot[\s]+be[\s]+assigned[\s]+for[\s]+([\s]*WebTrends[\s]+|[\s]*syslog[\s]+)$" }
				id => "message-00019:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:02"
					"[rsa][message][id1]" => "00019:02"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:03
		# line in RSA: Syslog VPN encryption has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Syslog VPN encryption has been %{disposition}" }
				id => "message-00019:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:03"
					"[rsa][message][id1]" => "00019:03"
					"[event][categoryid]" => "1613040200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:04
		# line in RSA: Syslog { host | source } { IP | domain name | port number | interface } has been changed to <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Syslog[\s]+([\s]*host[\s]+|[\s]*source[\s]+)[\s]+([\s]*IP[\s]+|[\s]*domain[\s]+name[\s]+|[\s]*port[\s]+number[\s]+|[\s]*interface[\s]+)[\s]+has[\s]+been[\s]+changed[\s]+to[\s]+(?<fld2>.*)$" }
				id => "message-00019:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:04"
					"[rsa][message][id1]" => "00019:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:05
		# line in RSA: Syslog message level has been changed to { debug | information | notification | warning | error | critical | alert | emergency }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Syslog[\s]+message[\s]+level[\s]+has[\s]+been[\s]+changed[\s]+to[\s]+([\s]*debug[\s]+|[\s]*information[\s]+|[\s]*notification[\s]+|[\s]*warning[\s]+|[\s]*error[\s]+|[\s]*critical[\s]+|[\s]*alert[\s]+|[\s]*emergency[\s]+)$" }
				id => "message-00019:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:05"
					"[rsa][message][id1]" => "00019:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:06
		# line in RSA: Syslog { security facility | facility } has been changed to { local0 | local1 | local2 | local3 | local4 | local5 | local6 | local7 | auth/sec }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Syslog[\s]+([\s]*security[\s]+facility[\s]+|[\s]*facility[\s]+)[\s]+has[\s]+been[\s]+changed[\s]+to[\s]+([\s]*local0[\s]+|[\s]*local1[\s]+|[\s]*local2[\s]+|[\s]*local3[\s]+|[\s]*local4[\s]+|[\s]*local5[\s]+|[\s]*local6[\s]+|[\s]*local7[\s]+|[\s]*auth/sec[\s]+)$" }
				id => "message-00019:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:06"
					"[rsa][message][id1]" => "00019:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:07
		# line in RSA: WebTrends VPN encryption has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WebTrends VPN encryption has been %{disposition}" }
				id => "message-00019:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:07"
					"[rsa][message][id1]" => "00019:07"
					"[event][categoryid]" => "1613040200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:08
		# line in RSA: WebTrends has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WebTrends has been %{disposition}" }
				id => "message-00019:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:08"
					"[rsa][message][id1]" => "00019:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:09
		# line in RSA: WebTrends host { IP | domain name | port number } has been changed to <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^WebTrends[\s]+host[\s]+([\s]*IP[\s]+|[\s]*domain[\s]+name[\s]+|[\s]*port[\s]+number[\s]+)[\s]+has[\s]+been[\s]+changed[\s]+to[\s]+(?<fld2>.*)$" }
				id => "message-00019:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:09"
					"[rsa][message][id1]" => "00019:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:10
		# line in RSA: <fld2> { Traffic logging via syslog | Syslog } has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^\s]*)[\s]+([\s]*Traffic[\s]+logging[\s]+via[\s]+syslog[\s]+|[\s]*Syslog[\s]+)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00019:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:10"
					"[rsa][message][id1]" => "00019:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:11
		# line in RSA: Attempt to enable { traffic logging via syslog | syslog } has <disposition> because there is no syslog server defined
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Attempt[\s]+to[\s]+enable[\s]+([\s]*traffic[\s]+logging[\s]+via[\s]+syslog[\s]+|[\s]*syslog[\s]+)[\s]+has[\s]+(?<disposition>[^\s]*)[\s]+because[\s]+there[\s]+is[\s]+no[\s]+syslog[\s]+server[\s]+defined$" }
				id => "message-00019:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:11"
					"[rsa][message][id1]" => "00019:11"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:12
		# line in RSA: Removing all syslog servers
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Removing all syslog servers" }
				id => "message-00019:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:12"
					"[rsa][message][id1]" => "00019:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:13
		# line in RSA: Syslog server <hostip> { was | is } <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Syslog[\s]+server[\s]+(?<hostip>[^\s]*)[\s]+([\s]*was[\s]+|[\s]*is[\s]+)[\s]+(?<disposition>.*)$" }
				id => "message-00019:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:13"
					"[rsa][message][id1]" => "00019:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:14
		# line in RSA: Syslog { security facility | facility } for <hostip> has been changed to { local0 | local1 | local2 | local3 | local4 | local5 | local6 | local7 | auth/sec }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Syslog[\s]+([\s]*security[\s]+facility[\s]+|[\s]*facility[\s]+)[\s]+for[\s]+(?<hostip>[^\s]*)[\s]+has[\s]+been[\s]+changed[\s]+to[\s]+([\s]*local0[\s]+|[\s]*local1[\s]+|[\s]*local2[\s]+|[\s]*local3[\s]+|[\s]*local4[\s]+|[\s]*local5[\s]+|[\s]*local6[\s]+|[\s]*local7[\s]+|[\s]*auth/sec[\s]+)$" }
				id => "message-00019:14"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:14"
					"[rsa][message][id1]" => "00019:14"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:15
		# line in RSA: Syslog cannot connect to the TCP server <hostip>; the connection is closed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Syslog cannot connect to the TCP server %{hostip}; the connection is closed." }
				id => "message-00019:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:15"
					"[rsa][message][id1]" => "00019:15"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:16
		# line in RSA: All syslog servers were removed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "All syslog servers were removed." }
				id => "message-00019:16"
				add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:16"
					"[rsa][message][id1]" => "00019:16"
					"[event][categoryid]" => "1701030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:17
		# line in RSA: Syslog server <hostip> host port number has been changed to <network_port> <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Syslog server %{hostip} host port number has been changed to %{network_port} %{fld5}" }
				id => "message-00019:17"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:17"
					"[rsa][message][id1]" => "00019:17"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:18
		# line in RSA: Traffic logging { via syslog | for syslog server <hostip> } has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Traffic[\s]+logging[\s]+([\s]*via[\s]+syslog[\s]+|[\s]*for[\s]+syslog[\s]+server[\s]+(?<hostip>[^\s]*)[\s]+)[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00019:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:18"
					"[rsa][message][id1]" => "00019:18"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:19
		# line in RSA: Transport protocol for syslog server <hostip> was changed to udp
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Transport protocol for syslog server %{hostip} was changed to udp" }
				id => "message-00019:19"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:19"
					"[rsa][message][id1]" => "00019:19"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00019:20
		# line in RSA: The traffic/IDP syslog is enabled on backup device by netscreen via web from host <saddr> to <daddr>:<dport>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The traffic/IDP syslog is enabled on backup device by netscreen via web from host %{saddr} to %{daddr}:%{dport}. (%{fld1})" }
				id => "message-00019:20"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00019:20"
					"[rsa][message][id1]" => "00019:20"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00020" {
		# MESSAGE 00020
		# line in RSA: Schedule <fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Schedule %{fld2} has been %{disposition}" }
				id => "message-00020"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00020"
					"[rsa][message][id1]" => "00020"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00020:01
		# line in RSA: System memory is low { : | ( } <fld2> bytes allocated out of { total <fld3> bytes | <fld4> bytes total }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+memory[\s]+is[\s]+low[\s]+([\s]*:[\s]+|[\s]*\([\s]+)[\s]+(?<fld2>[^\s]*)[\s]+bytes[\s]+allocated[\s]+out[\s]+of[\s]+([\s]*total[\s]+(?<fld3>[^\s]*)[\s]+bytes[\s]+|[\s]*(?<fld4>[^\s]*)[\s]+bytes[\s]+total[\s]+)$" }
				id => "message-00020:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00020:01"
					"[rsa][message][id1]" => "00020:01"
					"[event][categoryid]" => "1603020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00020:02
		# line in RSA: System memory is low (<fld2> allocated out of <fld3> ) <fld4> times in <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System memory is low (%{fld2} allocated out of %{fld3} ) %{fld4} times in %{fld5}" }
				id => "message-00020:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00020:02"
					"[rsa][message][id1]" => "00020:02"
					"[event][categoryid]" => "1603020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00021" {
		# MESSAGE 00021
		# line in RSA: DIP <fld2> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DIP %{fld2} has been %{disposition}" }
				id => "message-00021"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00021"
					"[rsa][message][id1]" => "00021"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00021:01
		# line in RSA: IP pool <fld2> with range <info> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP pool %{fld2} with range %{info} has been %{disposition}" }
				id => "message-00021:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00021:01"
					"[rsa][message][id1]" => "00021:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00021:02
		# line in RSA: DNS server is not configured
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS server is not configured" }
				id => "message-00021:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00021:02"
					"[rsa][message][id1]" => "00021:02"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00021:03
		# line in RSA: Connection refused by the DNS server
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connection refused by the DNS server" }
				id => "message-00021:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00021:03"
					"[rsa][message][id1]" => "00021:03"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00021:04
		# line in RSA: Unknown DNS error
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unknown DNS error" }
				id => "message-00021:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00021:04"
					"[rsa][message][id1]" => "00021:04"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00021:05
		# line in RSA:   DIP port-translatation stickiness was <disposition> by <username> via <logon_type> from host <saddr> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DIP port-translatation stickiness was %{disposition} by %{username} via %{logon_type} from host %{saddr} (%{fld1})" }
				id => "message-00021:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00021:05"
					"[rsa][message][id1]" => "00021:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00021:06
		# line in RSA: DIP port-translation stickiness was <disposition> by <username> via <logon_type> from host <saddr> to <daddr>:<dport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DIP port-translation stickiness was %{disposition} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} (%{fld1})" }
				id => "message-00021:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"info" => "DIP port-translation stickiness was modified"
					"[event][id]" => "00021:06"
					"[rsa][message][id1]" => "00021:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00022" {
		# MESSAGE 00022
		# line in RSA:  All { power supplies | fans } are <fld2> functioning properly
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*All[\s]+([\s]*power[\s]+supplies[\s]+|[\s]*fans[\s]+)[\s]+are[\s]+(?<fld2>[^\s]*)[\s]+functioning[\s]+properly$" }
				id => "message-00022"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022"
					"[rsa][message][id1]" => "00022"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:01
		# line in RSA: {At least one power supply | The power supply <fld2> | At least one fan } is not functioning { properly. (<fld1>) | properly }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(At[\s]+least[\s]+one[\s]+power[\s]+supply[\s]+|[\s]*The[\s]+power[\s]+supply[\s]+(?<fld2>[^\s]*)[\s]+|[\s]*At[\s]+least[\s]+one[\s]+fan[\s]+)[\s]+is[\s]+not[\s]+functioning[\s]+([\s]*properly\.[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*properly[\s]+)$" }
				id => "message-00022:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:01"
					"[rsa][message][id1]" => "00022:01"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00022:02
		# line in RSA: Global Manager VPN management tunnel has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Global Manager VPN management tunnel has been %{disposition}" }
				id => "message-00022:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:02"
					"[rsa][message][id1]" => "00022:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:03
		# line in RSA: Global Manager domain name has been defined as <domain>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Global Manager domain name has been defined as %{domain}" }
				id => "message-00022:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:03"
					"[rsa][message][id1]" => "00022:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:04
		# line in RSA: Reporting of the { network activities | device resources | event logs | summary logs } to Global Manager has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Reporting[\s]+of[\s]+the[\s]+([\s]*network[\s]+activities[\s]+|[\s]*device[\s]+resources[\s]+|[\s]*event[\s]+logs[\s]+|[\s]*summary[\s]+logs[\s]+)[\s]+to[\s]+Global[\s]+Manager[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00022:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:04"
					"[rsa][message][id1]" => "00022:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:05
		# line in RSA: Global Manager has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Global Manager has been %{disposition}" }
				id => "message-00022:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:05"
					"[rsa][message][id1]" => "00022:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:06
		# line in RSA: Global Manager { report | listen } port has been set to <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Global[\s]+Manager[\s]+([\s]*report[\s]+|[\s]*listen[\s]+)[\s]+port[\s]+has[\s]+been[\s]+set[\s]+to[\s]+(?<interface>.*)$" }
				id => "message-00022:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:06"
					"[rsa][message][id1]" => "00022:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:07
		# line in RSA: The Global Manager keep-alive value has been changed to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The Global Manager keep-alive value has been changed to %{fld2}" }
				id => "message-00022:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:07"
					"[rsa][message][id1]" => "00022:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:08
		# line in RSA: { System temperature | System's temperature: | The system temperature } (<fld2> { Centigrade, | C } <fld3> { Fahrenheit | F } ) is too high
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*System[\s]+temperature[\s]+|[\s]*System's[\s]+temperature:[\s]+|[\s]*The[\s]+system[\s]+temperature[\s]+)[\s]+\((?<fld2>[^\s]*)[\s]+([\s]*Centigrade,[\s]+|[\s]*C[\s]+)[\s]+(?<fld3>[^\s]*)[\s]+([\s]*Fahrenheit[\s]+|[\s]*F[\s]+)[\s]+\)[\s]+is[\s]+too[\s]+high$" }
				id => "message-00022:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:08"
					"[rsa][message][id1]" => "00022:08"
					"[event][categoryid]" => "1603100000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:09
		# line in RSA: The { primary | secondary } power supply is { not | now } functioning properly
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+([\s]*primary[\s]+|[\s]*secondary[\s]+)[\s]+power[\s]+supply[\s]+is[\s]+([\s]*not[\s]+|[\s]*now[\s]+)[\s]+functioning[\s]+properly$" }
				id => "message-00022:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:09"
					"[rsa][message][id1]" => "00022:09"
					"[event][categoryid]" => "1603100000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:10
		# line in RSA: The NetScreen device was unable to upgrade the file { system due to an internal conflict | system, but the old file system is intact }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+NetScreen[\s]+device[\s]+was[\s]+unable[\s]+to[\s]+upgrade[\s]+the[\s]+file[\s]+([\s]*system[\s]+due[\s]+to[\s]+an[\s]+internal[\s]+conflict[\s]+|[\s]*system,[\s]+but[\s]+the[\s]+old[\s]+file[\s]+system[\s]+is[\s]+intact[\s]+)$" }
				id => "message-00022:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:10"
					"[rsa][message][id1]" => "00022:10"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:11
		# line in RSA: The NetScreen device was unable to upgrade { due to an internal conflict | the loader, but the loader is intact }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+NetScreen[\s]+device[\s]+was[\s]+unable[\s]+to[\s]+upgrade[\s]+([\s]*due[\s]+to[\s]+an[\s]+internal[\s]+conflict[\s]+|[\s]*the[\s]+loader,[\s]+but[\s]+the[\s]+loader[\s]+is[\s]+intact[\s]+)$" }
				id => "message-00022:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:11"
					"[rsa][message][id1]" => "00022:11"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:12
		# line in RSA: Battery is { now | not } functioning properly.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Battery[\s]+is[\s]+([\s]*now[\s]+|[\s]*not[\s]+)[\s]+functioning[\s]+properly\.$" }
				id => "message-00022:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:12"
					"[rsa][message][id1]" => "00022:12"
					"[event][categoryid]" => "1603100000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:13
		# line in RSA: System's temperature (<fld2> Centigrade, <fld3> Fahrenheit) is OK now.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System's temperature (%{fld2} Centigrade, %{fld3} Fahrenheit) is OK now." }
				id => "message-00022:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:13"
					"[rsa][message][id1]" => "00022:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00022:14
		# line in RSA: The power supply <fld2> is functioning properly. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The power supply %{fld2} is functioning properly. (%{fld1})" }
				id => "message-00022:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00022:14"
					"[rsa][message][id1]" => "00022:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00023" {
		# MESSAGE 00023
		# line in RSA:  VIP server <hostip> is not responding
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIP server %{hostip} is not responding" }
				id => "message-00023"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00023"
					"[rsa][message][id1]" => "00023"
					"[event][categoryid]" => "1603010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00023:01
		# line in RSA:  VIP/load balance server <hostip> cannot be contacted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIP/load balance server %{hostip} cannot be contacted" }
				id => "message-00023:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00023:01"
					"[rsa][message][id1]" => "00023:01"
					"[event][categoryid]" => "1603010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00023:02
		# line in RSA:  VIP server <hostip> cannot be contacted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VIP server %{hostip} cannot be contacted" }
				id => "message-00023:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00023:02"
					"[rsa][message][id1]" => "00023:02"
					"[event][categoryid]" => "1603010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00024" {
		# MESSAGE 00024
		# line in RSA:  {The DHCP | DHCP } server { IP address pool has | options have been } { changed. (<fld1>) | changed }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(The[\s]+DHCP[\s]+|[\s]*DHCP[\s]+)[\s]+server[\s]+([\s]*IP[\s]+address[\s]+pool[\s]+has[\s]+|[\s]*options[\s]+have[\s]+been[\s]+)[\s]+([\s]*changed\.[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*changed[\s]+)$" }
				id => "message-00024"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00024"
					"[rsa][message][id1]" => "00024"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00024:01
		# line in RSA: { Traffic log | Alarm log | Event log | Self log | Asset Recovery log } has overflowed
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Traffic[\s]+log[\s]+|[\s]*Alarm[\s]+log[\s]+|[\s]*Event[\s]+log[\s]+|[\s]*Self[\s]+log[\s]+|[\s]*Asset[\s]+Recovery[\s]+log[\s]+)[\s]+has[\s]+overflowed$" }
				id => "message-00024:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00024:01"
					"[rsa][message][id1]" => "00024:01"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00024:02
		# line in RSA: DHCP relay agent settings on <fld2> { are | have been } <disposition> (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DHCP[\s]+relay[\s]+agent[\s]+settings[\s]+on[\s]+(?<fld2>[^\s]*)[\s]+([\s]*are[\s]+|[\s]*have[\s]+been[\s]+)[\s]+(?<disposition>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00024:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00024:02"
					"[rsa][message][id1]" => "00024:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00024:03
		# line in RSA: DHCP server IP address pool { has  | is } changed. (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DHCP[\s]+server[\s]+IP[\s]+address[\s]+pool[\s]+([\s]*has[\s]+|[\s]*is[\s]+)[\s]+changed\.[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00024:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00024:03"
					"[rsa][message][id1]" => "00024:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00025" {
		# MESSAGE 00025
		# line in RSA: The DHCP server IP address pool has changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The DHCP server IP address pool has changed" }
				id => "message-00025"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00025"
					"[rsa][message][id1]" => "00025"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00025:01
		# line in RSA: PKI: The current device <disposition> to save the certificate authority configuration.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The current device %{disposition} to save the certificate authority configuration." }
				id => "message-00025:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00025:01"
					"[rsa][message][id1]" => "00025:01"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00025:02
		# line in RSA: <disposition> to send the X509 request file via e-mail
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{disposition} to send the X509 request file via e-mail" }
				id => "message-00025:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00025:02"
					"[rsa][message][id1]" => "00025:02"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00025:03
		# line in RSA: <disposition> to save the CA configuration
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{disposition} to save the CA configuration" }
				id => "message-00025:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00025:03"
					"[rsa][message][id1]" => "00025:03"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00025:04
		# line in RSA: Cannot load more X509 certificates. The <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot load more X509 certificates. The %{result}" }
				id => "message-00025:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00025:04"
					"[rsa][message][id1]" => "00025:04"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00026" {
		# MESSAGE 00026
		# line in RSA: <signame> have been detected! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} have been detected! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00026"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026"
					"[rsa][message][id1]" => "00026"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:13
		# line in RSA: <signame> have been detected! From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} have been detected! From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, on interface %{interface}" }
				id => "message-00026:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:13"
					"[rsa][message][id1]" => "00026:13"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:01
		# line in RSA: { SCS | SCS: } PKA key has been { bound to | unbound from } admin user <administrator>. (Key ID = <fld2>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS[\s]+|[\s]*SCS:[\s]+)[\s]+PKA[\s]+key[\s]+has[\s]+been[\s]+([\s]*bound[\s]+to[\s]+|[\s]*unbound[\s]+from[\s]+)[\s]+admin[\s]+user[\s]+(?<administrator>[^\.]*)\.[\s]+\(Key[\s]+ID[\s]+=[\s]+(?<fld2>[^\)]*)\)$" }
				id => "message-00026:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:01"
					"[rsa][message][id1]" => "00026:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:02
		# line in RSA: { SCS: SCS | SCS } has been <disposition> for { root system | <interface> }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS:[\s]+SCS[\s]+|[\s]*SCS[\s]+)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+for[\s]+([\s]*root[\s]+system[\s]+|[\s]*(?<interface>[^\s]*)[\s]+)\.$" }
				id => "message-00026:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:02"
					"[rsa][message][id1]" => "00026:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:03
		# line in RSA: { SCS | SCS: } <change_attribute> has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS[\s]+|[\s]*SCS:[\s]+)[\s]+(?<change_attribute>[^\s]*)[\s]+has[\s]+been[\s]+changed[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>.*)$" }
				id => "message-00026:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:03"
					"[rsa][message][id1]" => "00026:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:04
		# line in RSA: SCS: Connection has been terminated for admin user <administrator> at <hostip>:<network_port>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: Connection has been terminated for admin user %{administrator} at %{hostip}:%{network_port}" }
				id => "message-00026:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00026:04"
					"[rsa][message][id1]" => "00026:04"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:05
		# line in RSA: SCS: Host client has requested NO cipher from <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: Host client has requested NO cipher from %{interface}" }
				id => "message-00026:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:05"
					"[rsa][message][id1]" => "00026:05"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:06
		# line in RSA: SCS: SSH user <username> has been authenticated using PKA RSA from <saddr>:<sport>. (key-ID=<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: SSH user %{username} has been authenticated using PKA RSA from %{saddr}:%{sport}. (key-ID=%{fld2}" }
				id => "message-00026:06"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:06"
					"[rsa][message][id1]" => "00026:06"
					"[event][categoryid]" => "1302010200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:07
		# line in RSA: SCS: SSH user <username> has been authenticated using password from <saddr>:<sport>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: SSH user %{username} has been authenticated using password from %{saddr}:%{sport}." }
				id => "message-00026:07"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:07"
					"[rsa][message][id1]" => "00026:07"
					"[event][categoryid]" => "1302010200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:08
		# line in RSA: SSH user <username> has been authenticated using { password | PKA RSA } from <saddr>:<sport> [ with key ID <fld2> ]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSH[\s]+user[\s]+(?<username>[^\s]*)[\s]+has[\s]+been[\s]+authenticated[\s]+using[\s]+([\s]*password[\s]+|[\s]*PKA[\s]+RSA[\s]+)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\[[\s]+with[\s]+key[\s]+ID[\s]+(?<fld2>[^\s]*)[\s]+\]$" }
				id => "message-00026:08"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:08"
					"[rsa][message][id1]" => "00026:08"
					"[event][categoryid]" => "1302010200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:09
		# line in RSA: IPSec tunnel on int <interface> with tunnel ID <fld2> received a packet with a bad SPI.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IPSec tunnel on int %{interface} with tunnel ID %{fld2} received a packet with a bad SPI." }
				id => "message-00026:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:09"
					"[rsa][message][id1]" => "00026:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:10
		# line in RSA: SSH: { Failed | Attempt } to { bind duplicate | unbind } PKA key { to | from } admin user '<administrator>' (Key ID <fld2>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSH:[\s]+([\s]*Failed[\s]+|[\s]*Attempt[\s]+)[\s]+to[\s]+([\s]*bind[\s]+duplicate[\s]+|[\s]*unbind[\s]+)[\s]+PKA[\s]+key[\s]+([\s]*to[\s]+|[\s]*from[\s]+)[\s]+admin[\s]+user[\s]+'(?<administrator>[^']*)'[\s]+\(Key[\s]+ID[\s]+(?<fld2>[^\)]*)\)$" }
				id => "message-00026:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:10"
					"[rsa][message][id1]" => "00026:10"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:11
		# line in RSA: SSH: Maximum number of PKA keys (<fld2>) has been bound to user '<username>' Key not bound. (Key ID <fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Maximum number of PKA keys (%{fld2}) has been bound to user '%{username}' Key not bound. (Key ID %{fld3})" }
				id => "message-00026:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:11"
					"[rsa][message][id1]" => "00026:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00026:12
		# line in RSA:  IKE <fld2>: Missing heartbeats have exceeded the threshold. All Phase 1 and 2 SAs have been removed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{fld2}: Missing heartbeats have exceeded the threshold. All Phase 1 and 2 SAs have been removed" }
				id => "message-00026:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00026:12"
					"[rsa][message][id1]" => "00026:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00027" {
		# MESSAGE 00027
		# line in RSA: Multiple login failures { occurred for | for } user <username> from { IP address <saddr>:<sport> | <saddr>:<sport> | console }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Multiple[\s]+login[\s]+failures[\s]+([\s]*occurred[\s]+for[\s]+|[\s]*for[\s]+)[\s]+user[\s]+(?<username>[^\s]*)[\s]+from[\s]+([\s]*IP[\s]+address[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*console[\s]+)$" }
				id => "message-00027"
				add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027"
					"[rsa][message][id1]" => "00027"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:01
		# line in RSA: <change_attribute> has been restored from <change_old> to default port <change_new>. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} has been restored from %{change_old} to default port %{change_new}. %{info}" }
				id => "message-00027:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:01"
					"[rsa][message][id1]" => "00027:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:02
		# line in RSA: <change_attribute> has been restored from <change_old> to <change_new>. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} has been restored from %{change_old} to %{change_new}. %{info}" }
				id => "message-00027:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:02"
					"[rsa][message][id1]" => "00027:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:03
		# line in RSA:  <change_attribute> has been changed from <change_old> to port <change_new>. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} has been changed from %{change_old} to port %{change_new}. %{info}" }
				id => "message-00027:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:03"
					"[rsa][message][id1]" => "00027:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:04
		# line in RSA: <change_attribute> has been changed from <change_old> to port <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} has been changed from %{change_old} to port %{change_new}" }
				id => "message-00027:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:04"
					"[rsa][message][id1]" => "00027:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:05
		# line in RSA:   ScreenOS <version> { Serial | serial } # <fld2>: Asset recovery { performed | has been } { aborted | performed }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*ScreenOS[\s]+(?<version>[^\s]*)[\s]+([\s]*Serial[\s]+|[\s]*serial[\s]+)[\s]+#[\s]+(?<fld2>[^:]*):[\s]+Asset[\s]+recovery[\s]+([\s]*performed[\s]+|[\s]*has[\s]+been[\s]+)[\s]+([\s]*aborted[\s]+|[\s]*performed[\s]+)$" }
				id => "message-00027:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:05"
					"[rsa][message][id1]" => "00027:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:06
		# line in RSA:   Device Reset (Asset Recovery) has been { performed | aborted }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Device[\s]+Reset[\s]+\(Asset[\s]+Recovery\)[\s]+has[\s]+been[\s]+([\s]*performed[\s]+|[\s]*aborted[\s]+)$" }
				id => "message-00027:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:06"
					"[rsa][message][id1]" => "00027:06"
					"[event][categoryid]" => "1606000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:07
		# line in RSA: <change_attribute> has been changed from <change_old> to <change_new>. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} has been changed from %{change_old} to %{change_new}. %{info}" }
				id => "message-00027:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:07"
					"[rsa][message][id1]" => "00027:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:08
		# line in RSA: System configuration has been erased
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System configuration has been erased" }
				id => "message-00027:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:08"
					"[rsa][message][id1]" => "00027:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:09
		# line in RSA: License key <fld2> is due to expire in <fld3>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "License key %{fld2} is due to expire in %{fld3}." }
				id => "message-00027:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:09"
					"[rsa][message][id1]" => "00027:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:10
		# line in RSA: License key <fld2> has expired.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "License key %{fld2} has expired." }
				id => "message-00027:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:10"
					"[rsa][message][id1]" => "00027:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:11
		# line in RSA: License key <fld2> expired after 30-day grace period.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "License key %{fld2} expired after 30-day grace period." }
				id => "message-00027:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:11"
					"[rsa][message][id1]" => "00027:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:12
		# line in RSA: Request to retrieve license key failed to reach { the server | server } by <fld2>. Server url: <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Request[\s]+to[\s]+retrieve[\s]+license[\s]+key[\s]+failed[\s]+to[\s]+reach[\s]+([\s]*the[\s]+server[\s]+|[\s]*server[\s]+)[\s]+by[\s]+(?<fld2>[^\.]*)\.[\s]+Server[\s]+url:[\s]+(?<url>.*)$" }
				id => "message-00027:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:12"
					"[rsa][message][id1]" => "00027:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:13
		# line in RSA: Multiple login failures { occurred for | for } user <username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Multiple[\s]+login[\s]+failures[\s]+([\s]*occurred[\s]+for[\s]+|[\s]*for[\s]+)[\s]+user[\s]+(?<username>.*)$" }
				id => "message-00027:13"
				add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:13"
					"[rsa][message][id1]" => "00027:13"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00027:14
		# line in RSA: Configuration Erasure Process { has been initiated | aborted }.<space>(<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Configuration[\s]+Erasure[\s]+Process[\s]+([\s]*has[\s]+been[\s]+initiated[\s]+|[\s]*aborted[\s]+)\.(?<space>[^\(]*)\((?<fld1>[^\)]*)\)$" }
				id => "message-00027:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:14"
					"[rsa][message][id1]" => "00027:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00027:15
		# line in RSA: Waiting for 2nd confirmation. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Waiting for 2nd confirmation. (%{fld1})" }
				id => "message-00027:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:15"
					"[rsa][message][id1]" => "00027:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00027:16
		# line in RSA: Admin <fld3> policy id <policy_id> name "<fld2> has been re-enabled by NetScreen system after being locked due to excessive failed login attempts (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin %{fld3} policy id %{policy_id} name \"%{fld2} has been re-enabled by NetScreen system after being locked due to excessive failed login attempts (%{fld1})" }
				id => "message-00027:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:16"
					"[rsa][message][id1]" => "00027:16"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00027:17
		# line in RSA:  Admin <username> is locked and will be unlocked after <duration> minutes (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin %{username} is locked and will be unlocked after %{duration} minutes (%{fld1})" }
				id => "message-00027:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:17"
					"[rsa][message][id1]" => "00027:17"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00027:18
		# line in RSA:  Login attempt by admin <username> from <saddr> is refused as this account is locked (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login attempt by admin %{username} from %{saddr} is refused as this account is locked (%{fld1})" }
				id => "message-00027:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:18"
					"[rsa][message][id1]" => "00027:18"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00027:19
		# line in RSA:  Admin <username> has been re-enabled by NetScreen system after being locked due to excessive failed login attempts (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin %{username} has been re-enabled by NetScreen system after being locked due to excessive failed login attempts (%{fld1})" }
				id => "message-00027:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00027:19"
					"[rsa][message][id1]" => "00027:19"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId461
	# line in RSA:  {An Intruder|Intruder|An intruter} has attempted to connect to the NetScreen-Global PRO port! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> at interface <interface>.<space>The attack occurred <dclass_counter1> times
	else if [logstash][msgparser][id] == "msgParserId461" {
		grok {
			match => { "message" => "^[\s]*(An[\s]+Intruder|Intruder|An[\s]+intruter)[\s]+has[\s]+attempted[\s]+to[\s]+connect[\s]+to[\s]+the[\s]+NetScreen\-Global[\s]+PRO[\s]+port![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+using[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+at[\s]+interface[\s]+(?<interface>[^\.]*)\.(?<space>[^T]*)The[\s]+attack[\s]+occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times$" }
			id => "msgParserId461"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"signame" => "Attempt to Connect to the NetScreen-Global Port"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00029" {
		# MESSAGE 00029
		# line in RSA: DNS has been refreshed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DNS has been refreshed" }
				id => "message-00029"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00029"
					"[rsa][message][id1]" => "00029"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00029:01
		# line in RSA: DHCP file write: out of memory.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP file write: out of memory." }
				id => "message-00029:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00029:01"
					"[rsa][message][id1]" => "00029:01"
					"[event][categoryid]" => "1603020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00029:02
		# line in RSA: The DHCP process cannot open file <fld2> to { read | write } data.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+DHCP[\s]+process[\s]+cannot[\s]+open[\s]+file[\s]+(?<fld2>[^\s]*)[\s]+to[\s]+([\s]*read[\s]+|[\s]*write[\s]+)[\s]+data\.$" }
				id => "message-00029:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00029:02"
					"[rsa][message][id1]" => "00029:02"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00029:03
		# line in RSA: IP pool of DHCP server on {interface|Interface} <interface> is full. Unable to { commit | offer } IP address to client at <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IP[\s]+pool[\s]+of[\s]+DHCP[\s]+server[\s]+on[\s]+(interface|Interface)[\s]+(?<interface>[^\s]*)[\s]+is[\s]+full\.[\s]+Unable[\s]+to[\s]+([\s]*commit[\s]+|[\s]*offer[\s]+)[\s]+IP[\s]+address[\s]+to[\s]+client[\s]+at[\s]+(?<fld2>.*)$" }
				id => "message-00029:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00029:03"
					"[rsa][message][id1]" => "00029:03"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00029:04
		# line in RSA: DHCP server set to OFF on <interface> (another server found on <hostip>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP server set to OFF on %{interface} (another server found on %{hostip})." }
				id => "message-00029:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00029:04"
					"[rsa][message][id1]" => "00029:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00030" {
		# MESSAGE 00030
		# line in RSA:  CA configuration is invalid
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CA configuration is invalid" }
				id => "message-00030"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030"
					"[rsa][message][id1]" => "00030"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:01
		# line in RSA: DSS checking of CRLs has been changed from { 0 to 1 | 1 to 0 }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DSS[\s]+checking[\s]+of[\s]+CRLs[\s]+has[\s]+been[\s]+changed[\s]+from[\s]+([\s]*0[\s]+to[\s]+1[\s]+|[\s]*1[\s]+to[\s]+0[\s]+)$" }
				id => "message-00030:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:01"
					"[rsa][message][id1]" => "00030:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:05
		# line in RSA: For the X509 certificate <change_attribute> has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "For the X509 certificate %{change_attribute} has been changed from %{change_old} to %{change_new}" }
				id => "message-00030:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:05"
					"[rsa][message][id1]" => "00030:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:06
		# line in RSA: In the X509 certificate request the <fld2> field has been changed from <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "In the X509 certificate request the %{fld2} field has been changed from %{fld3}" }
				id => "message-00030:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:06"
					"[rsa][message][id1]" => "00030:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:07
		# line in RSA:  RA X509 certificate cannot be loaded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RA X509 certificate cannot be loaded" }
				id => "message-00030:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:07"
					"[rsa][message][id1]" => "00030:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:10
		# line in RSA:  Self-signed X509 certificate cannot be generated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Self-signed X509 certificate cannot be generated" }
				id => "message-00030:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:10"
					"[rsa][message][id1]" => "00030:10"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:12
		# line in RSA:  The public key for ScreenOS image has successfully been updated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The public key for ScreenOS image has successfully been updated" }
				id => "message-00030:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:12"
					"[rsa][message][id1]" => "00030:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:13
		# line in RSA:  The public key used for ScreenOS image authentication cannot be { decoded | loaded }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*The[\s]+public[\s]+key[\s]+used[\s]+for[\s]+ScreenOS[\s]+image[\s]+authentication[\s]+cannot[\s]+be[\s]+([\s]*decoded[\s]+|[\s]*loaded[\s]+)$" }
				id => "message-00030:13"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:13"
					"[rsa][message][id1]" => "00030:13"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:14
		# line in RSA: The { CA IDENT | Challenge password | CA CGI URL | RA CGI URL } for { SCEP requests | SCEP } has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+([\s]*CA[\s]+IDENT[\s]+|[\s]*Challenge[\s]+password[\s]+|[\s]*CA[\s]+CGI[\s]+URL[\s]+|[\s]*RA[\s]+CGI[\s]+URL[\s]+)[\s]+for[\s]+([\s]*SCEP[\s]+requests[\s]+|[\s]*SCEP[\s]+)[\s]+has[\s]+been[\s]+changed[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>.*)$" }
				id => "message-00030:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:14"
					"[rsa][message][id1]" => "00030:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:02
		# line in RSA: <change_attribute> has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} has been changed from %{change_old} to %{change_new}" }
				id => "message-00030:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:02"
					"[rsa][message][id1]" => "00030:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:15
		# line in RSA:  X509 certificate for ScreenOS image authentication is invalid
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "X509 certificate for ScreenOS image authentication is invalid" }
				id => "message-00030:15"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:15"
					"[rsa][message][id1]" => "00030:15"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:16
		# line in RSA:  X509 certificate has been deleted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "X509 certificate has been deleted" }
				id => "message-00030:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:16"
					"[rsa][message][id1]" => "00030:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:18
		# line in RSA: PKI CRL: no revoke info accept per config DN <interface>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI CRL: no revoke info accept per config DN %{interface}." }
				id => "message-00030:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:18"
					"[rsa][message][id1]" => "00030:18"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:19
		# line in RSA: PKI: A configurable item <change_attribute> {mode | field} has changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+A[\s]+configurable[\s]+item[\s]+(?<change_attribute>[^\s]*)[\s]+(mode[\s]+|[\s]*field)[\s]+has[\s]+changed[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>.*)$" }
				id => "message-00030:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:19"
					"[rsa][message][id1]" => "00030:19"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:30
		# line in RSA: PKI: NSRP cold sync start for total of <fld2> items.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: NSRP cold sync start for total of %{fld2} items." }
				id => "message-00030:30"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:30"
					"[rsa][message][id1]" => "00030:30"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:31
		# line in RSA: PKI: NSRP sync received cold sync item <fld2> out of order expect <fld3> of <fld4>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: NSRP sync received cold sync item %{fld2} out of order expect %{fld3} of %{fld4}." }
				id => "message-00030:31"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:31"
					"[rsa][message][id1]" => "00030:31"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:32
		# line in RSA: PKI: NSRP sync received cold sync item <fld2> without first item.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: NSRP sync received cold sync item %{fld2} without first item." }
				id => "message-00030:32"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:32"
					"[rsa][message][id1]" => "00030:32"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:33
		# line in RSA: PKI: NSRP sync received normal item during cold sync.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: NSRP sync received normal item during cold sync." }
				id => "message-00030:33"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:33"
					"[rsa][message][id1]" => "00030:33"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:34
		# line in RSA: PKI: The CRL <policy_id> is deleted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The CRL %{policy_id} is deleted." }
				id => "message-00030:34"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:34"
					"[rsa][message][id1]" => "00030:34"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:35
		# line in RSA: PKI: The NSRP high availability synchronization <fld2> failed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The NSRP high availability synchronization %{fld2} failed." }
				id => "message-00030:35"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:35"
					"[rsa][message][id1]" => "00030:35"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:36
		# line in RSA: PKI: The <change_attribute> has changed from <change_old> to <change_new>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The %{change_attribute} has changed from %{change_old} to %{change_new}." }
				id => "message-00030:36"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:36"
					"[rsa][message][id1]" => "00030:36"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:37
		# line in RSA: PKI: The X.509 certificate for the ScreenOS image authentication is invalid.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The X.509 certificate for the ScreenOS image authentication is invalid." }
				id => "message-00030:37"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:37"
					"[rsa][message][id1]" => "00030:37"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:38
		# line in RSA: PKI: The X.509 local certificate cannot be sync to vsd member.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The X.509 local certificate cannot be sync to vsd member." }
				id => "message-00030:38"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:38"
					"[rsa][message][id1]" => "00030:38"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:39
		# line in RSA: PKI: The X.509 { certificate revocation list | certificate } cannot be loaded during NSRP synchronization.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+The[\s]+X\.509[\s]+([\s]*certificate[\s]+revocation[\s]+list[\s]+|[\s]*certificate[\s]+)[\s]+cannot[\s]+be[\s]+loaded[\s]+during[\s]+NSRP[\s]+synchronization\.$" }
				id => "message-00030:39"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:39"
					"[rsa][message][id1]" => "00030:39"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:17
		# line in RSA:  X509 { certificate | CRL } cannot be loaded
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*X509[\s]+([\s]*certificate[\s]+|[\s]*CRL[\s]+)[\s]+cannot[\s]+be[\s]+loaded$" }
				id => "message-00030:17"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:17"
					"[rsa][message][id1]" => "00030:17"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:40
		# line in RSA: PKI: The certificate <fld2> will expire { auto | please } renew.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+The[\s]+certificate[\s]+(?<fld2>[^\s]*)[\s]+will[\s]+expire[\s]+([\s]*auto[\s]+|[\s]*please[\s]+)[\s]+renew\.$" }
				id => "message-00030:40"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:40"
					"[rsa][message][id1]" => "00030:40"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:41
		# line in RSA: PKI: The certificate revocation list has expired issued by certificate authority <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The certificate revocation list has expired issued by certificate authority %{fld2}." }
				id => "message-00030:41"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:41"
					"[rsa][message][id1]" => "00030:41"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:42
		# line in RSA: PKI: The configuration content of certificate authority <fld2> is not valid.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The configuration content of certificate authority %{fld2} is not valid." }
				id => "message-00030:42"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:42"
					"[rsa][message][id1]" => "00030:42"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:43
		# line in RSA: PKI: The device cannot allocate this object id number <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot allocate this object id number %{fld2}." }
				id => "message-00030:43"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:43"
					"[rsa][message][id1]" => "00030:43"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:44
		# line in RSA: PKI: The device cannot extract the X.509 certificate revocation list [ (CRL) ].
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot extract the X.509 certificate revocation list [ (CRL) ]." }
				id => "message-00030:44"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:44"
					"[rsa][message][id1]" => "00030:44"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:45
		# line in RSA: PKI: The device cannot find the PKI object <fld2> during cold sync.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot find the PKI object %{fld2} during cold sync." }
				id => "message-00030:45"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:45"
					"[rsa][message][id1]" => "00030:45"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:46
		# line in RSA: PKI: The device cannot load X.509 certificate onto the device certificate <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot load X.509 certificate onto the device certificate %{fld2}." }
				id => "message-00030:46"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:46"
					"[rsa][message][id1]" => "00030:46"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:47
		# line in RSA: PKI: The device cannot load a certificate pending SCEP completion.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot load a certificate pending SCEP completion." }
				id => "message-00030:47"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:47"
					"[rsa][message][id1]" => "00030:47"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:48
		# line in RSA: PKI: The device cannot load an X.509 certificate revocation list (CRL).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot load an X.509 certificate revocation list (CRL)." }
				id => "message-00030:48"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:48"
					"[rsa][message][id1]" => "00030:48"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:49
		# line in RSA: PKI: The device cannot load the CA certificate received through SCEP.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot load the CA certificate received through SCEP." }
				id => "message-00030:49"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:49"
					"[rsa][message][id1]" => "00030:49"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:50
		# line in RSA: PKI: The device cannot load the X.509 certificate revocation list (CRL) from the file.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot load the X.509 certificate revocation list (CRL) from the file." }
				id => "message-00030:50"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:50"
					"[rsa][message][id1]" => "00030:50"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:51
		# line in RSA: PKI: The device cannot load the X.509 local certificate received through SCEP.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot load the X.509 local certificate received through SCEP." }
				id => "message-00030:51"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:51"
					"[rsa][message][id1]" => "00030:51"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:52
		# line in RSA: PKI: The device cannot load the X.509 <product> during boot.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot load the X.509 %{product} during boot." }
				id => "message-00030:52"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:52"
					"[rsa][message][id1]" => "00030:52"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:53
		# line in RSA: PKI: The device cannot load the X.509 certificate file.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device cannot load the X.509 certificate file." }
				id => "message-00030:53"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:53"
					"[rsa][message][id1]" => "00030:53"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:54
		# line in RSA: PKI: The device completed the coldsync of the PKI object at <fld2> attempt.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device completed the coldsync of the PKI object at %{fld2} attempt." }
				id => "message-00030:54"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:54"
					"[rsa][message][id1]" => "00030:54"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:55
		# line in RSA: PKI: The device could not generate { RSA | DSA } key pair.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+The[\s]+device[\s]+could[\s]+not[\s]+generate[\s]+([\s]*RSA[\s]+|[\s]*DSA[\s]+)[\s]+key[\s]+pair\.$" }
				id => "message-00030:55"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:55"
					"[rsa][message][id1]" => "00030:55"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:56
		# line in RSA: PKI: The device detected an invalid RSA key.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device detected an invalid RSA key." }
				id => "message-00030:56"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:56"
					"[rsa][message][id1]" => "00030:56"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:57
		# line in RSA: PKI: The device detected an invalid digital signature algorithm (DSA) key.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device detected an invalid digital signature algorithm (DSA) key." }
				id => "message-00030:57"
				add_field => {
				"ec_subject" => "CryptoKey"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:57"
					"[rsa][message][id1]" => "00030:57"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:58
		# line in RSA: PKI: The device failed to coldsync the PKI object at <fld2> attempt.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device failed to coldsync the PKI object at %{fld2} attempt." }
				id => "message-00030:58"
				add_field => {
				"ec_subject" => "CryptoKey"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:58"
					"[rsa][message][id1]" => "00030:58"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:59
		# line in RSA: PKI: The device failed to decode the public key of the image{|&}s signer certificate.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+The[\s]+device[\s]+failed[\s]+to[\s]+decode[\s]+the[\s]+public[\s]+key[\s]+of[\s]+the[\s]+image(|&)s[\s]+signer[\s]+certificate\.$" }
				id => "message-00030:59"
				add_field => {
				"ec_subject" => "CryptoKey"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:59"
					"[rsa][message][id1]" => "00030:59"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:60
		# line in RSA: PKI: The device failed to install the RSA key.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device failed to install the RSA key." }
				id => "message-00030:60"
				add_field => {
				"ec_subject" => "CryptoKey"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:60"
					"[rsa][message][id1]" => "00030:60"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:61
		# line in RSA: PKI: The device failed to retrieve the pending certificate <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device failed to retrieve the pending certificate %{fld2}." }
				id => "message-00030:61"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:61"
					"[rsa][message][id1]" => "00030:61"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:62
		# line in RSA: PKI: The device failed to save the certificate authority related configuration.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device failed to save the certificate authority related configuration." }
				id => "message-00030:62"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:62"
					"[rsa][message][id1]" => "00030:62"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:63
		# line in RSA: PKI: The device failed to store the authority configuration.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device failed to store the authority configuration." }
				id => "message-00030:63"
				add_field => {
				"ec_subject" => "Configuration"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:63"
					"[rsa][message][id1]" => "00030:63"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:64
		# line in RSA: PKI: The device failed to synchronize new DSA/RSA key pair to NSRP peer.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device failed to synchronize new DSA/RSA key pair to NSRP peer." }
				id => "message-00030:64"
				add_field => {
				"ec_subject" => "CryptoKey"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:64"
					"[rsa][message][id1]" => "00030:64"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:65
		# line in RSA: PKI: The device failed to synchronize DSA/RSA key pair to NSRP peer.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device failed to synchronize DSA/RSA key pair to NSRP peer." }
				id => "message-00030:65"
				add_field => {
				"ec_subject" => "CryptoKey"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:65"
					"[rsa][message][id1]" => "00030:65"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:66
		# line in RSA: PKI: The device has detected an invalid X.509 object attribute <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device has detected an invalid X.509 object attribute %{fld2}." }
				id => "message-00030:66"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:66"
					"[rsa][message][id1]" => "00030:66"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:67
		# line in RSA: PKI: The device has detected invalid X.509 object content.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device has detected invalid X.509 object content." }
				id => "message-00030:67"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:67"
					"[rsa][message][id1]" => "00030:67"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:68
		# line in RSA: PKI: The device has failed to load an invalid X.509 object.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device has failed to load an invalid X.509 object." }
				id => "message-00030:68"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:68"
					"[rsa][message][id1]" => "00030:68"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:69
		# line in RSA: PKI: The device is loading the version 0 PKI data.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: The device is loading the version 0 PKI data." }
				id => "message-00030:69"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:69"
					"[rsa][message][id1]" => "00030:69"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:70
		# line in RSA: PKI: The device successfully generated a new { RSA | DSA } key pair.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+The[\s]+device[\s]+successfully[\s]+generated[\s]+a[\s]+new[\s]+([\s]*RSA[\s]+|[\s]*DSA[\s]+)[\s]+key[\s]+pair\.$" }
				id => "message-00030:70"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:70"
					"[rsa][message][id1]" => "00030:70"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:71
		# line in RSA: PKI: The public key of image{|&}s signer has been loaded successfully, for future image authentication.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+The[\s]+public[\s]+key[\s]+of[\s]+image(|&)s[\s]+signer[\s]+has[\s]+been[\s]+loaded[\s]+successfully,[\s]+for[\s]+future[\s]+image[\s]+authentication\.$" }
				id => "message-00030:71"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:71"
					"[rsa][message][id1]" => "00030:71"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:72
		# line in RSA: PKI: The signature of the image{|&}s signer certificate cannot be verified.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+The[\s]+signature[\s]+of[\s]+the[\s]+image(|&)s[\s]+signer[\s]+certificate[\s]+cannot[\s]+be[\s]+verified\.$" }
				id => "message-00030:72"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:72"
					"[rsa][message][id1]" => "00030:72"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:73
		# line in RSA: PKI: The { file name | friendly name of a certificate | vsys name } is too long <fld2> to do NSRP synchronization allowed <fld3>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+The[\s]+([\s]*file[\s]+name[\s]+|[\s]*friendly[\s]+name[\s]+of[\s]+a[\s]+certificate[\s]+|[\s]*vsys[\s]+name[\s]+)[\s]+is[\s]+too[\s]+long[\s]+(?<fld2>[^\s]*)[\s]+to[\s]+do[\s]+NSRP[\s]+synchronization[\s]+allowed[\s]+(?<fld3>[^\.]*)\.$" }
				id => "message-00030:73"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:73"
					"[rsa][message][id1]" => "00030:73"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:74
		# line in RSA: PKI: Upgrade from earlier version save to file.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: Upgrade from earlier version save to file." }
				id => "message-00030:74"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:74"
					"[rsa][message][id1]" => "00030:74"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:75
		# line in RSA: PKI: X.509 certificate has been deleted distinguished name <username>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: X.509 certificate has been deleted distinguished name %{username}." }
				id => "message-00030:75"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:75"
					"[rsa][message][id1]" => "00030:75"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:76
		# line in RSA: PKI: X.509 { certificate | CRL } file has been loaded successfully filename <fld2>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PKI:[\s]+X\.509[\s]+([\s]*certificate[\s]+|[\s]*CRL[\s]+)[\s]+file[\s]+has[\s]+been[\s]+loaded[\s]+successfully[\s]+filename[\s]+(?<fld2>[^\.]*)\.$" }
				id => "message-00030:76"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:76"
					"[rsa][message][id1]" => "00030:76"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:77
		# line in RSA: PKI: failed to install DSA key.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: failed to install DSA key." }
				id => "message-00030:77"
				add_field => {
				"ec_subject" => "CryptoKey"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:77"
					"[rsa][message][id1]" => "00030:77"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:78
		# line in RSA: PKI: no FQDN available when requesting certificate.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: no FQDN available when requesting certificate." }
				id => "message-00030:78"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_activity" => "Request"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:78"
					"[rsa][message][id1]" => "00030:78"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:79
		# line in RSA: PKI: no cert revocation check per config DN <username>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: no cert revocation check per config DN %{username}." }
				id => "message-00030:79"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_activity" => "Request"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:79"
					"[rsa][message][id1]" => "00030:79"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:80
		# line in RSA: PKI: no nsrp sync for pre 2.5 objects.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: no nsrp sync for pre 2.5 objects." }
				id => "message-00030:80"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:80"
					"[rsa][message][id1]" => "00030:80"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:81
		# line in RSA: X509 certificate with subject name <fld2> is deleted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "X509 certificate with subject name %{fld2} is deleted." }
				id => "message-00030:81"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:81"
					"[rsa][message][id1]" => "00030:81"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:82
		# line in RSA: create new authcfg for CA <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "create new authcfg for CA %{fld2}" }
				id => "message-00030:82"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:82"
					"[rsa][message][id1]" => "00030:82"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:83
		# line in RSA: loadCert: Cannot acquire authcfg for this CA cert <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "loadCert: Cannot acquire authcfg for this CA cert %{fld2}." }
				id => "message-00030:83"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:83"
					"[rsa][message][id1]" => "00030:83"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:84
		# line in RSA: upgrade to 4.0 copy authcfg from global.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "upgrade to 4.0 copy authcfg from global." }
				id => "message-00030:84"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:84"
					"[rsa][message][id1]" => "00030:84"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:85
		# line in RSA: System CPU utilization is high (<fld2> alarm threshold: <trigger_val>) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System CPU utilization is high (%{fld2} alarm threshold: %{trigger_val}) %{info}" }
				id => "message-00030:85"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:85"
					"[rsa][message][id1]" => "00030:85"
					"[event][categoryid]" => "1603080000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00030:86
		# line in RSA: FIPS test for { ECDSA | RSA } Pair-wise invoked by  started after key generation. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^FIPS[\s]+test[\s]+for[\s]+([\s]*ECDSA[\s]+|[\s]*RSA[\s]+)[\s]+Pair\-wise[\s]+invoked[\s]+by[\s]+started[\s]+after[\s]+key[\s]+generation\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00030:86"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:86"
					"[rsa][message][id1]" => "00030:86"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00030:87
		# line in RSA:  SYSTEM CPU utilization is high (<fld2> > <fld3> ) <fld4> times in <fld5> minute (<fld1>)<<<fld6>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SYSTEM CPU utilization is high (%{fld2} > %{fld3} ) %{fld4} times in %{fld5} minute (%{fld1})<%{fld6}>" }
				id => "message-00030:87"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:87"
					"[rsa][message][id1]" => "00030:87"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00030:88
		# line in RSA: FIPS test for { ECDSA | RSA } Pair-wise invoked by  passed. (<fld1>)<<<fld6>>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^FIPS[\s]+test[\s]+for[\s]+([\s]*ECDSA[\s]+|[\s]*RSA[\s]+)[\s]+Pair\-wise[\s]+invoked[\s]+by[\s]+passed\.[\s]+\((?<fld1>[^\)]*)\)<(?<fld6>[^>]*)>$" }
				id => "message-00030:88"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00030:88"
					"[rsa][message][id1]" => "00030:88"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00031" {
		# MESSAGE 00031:13
		# line in RSA:  ARP detected IP conflict: IP address <hostip> changed from <sinterface> to interface <dinterface> (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ARP detected IP conflict: IP address %{hostip} changed from %{sinterface} to interface %{dinterface} (%{fld1})" }
				id => "message-00031:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:13"
					"[rsa][message][id1]" => "00031:13"
					"[event][categoryid]" => "1603030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00031
		# line in RSA: SNMP AuthenTraps have been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP AuthenTraps have been %{disposition}" }
				id => "message-00031"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031"
					"[rsa][message][id1]" => "00031"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00031:01
		# line in RSA: SNMP VPN has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP VPN has been %{disposition}" }
				id => "message-00031:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:01"
					"[rsa][message][id1]" => "00031:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00031:02
		# line in RSA: SNMP community <fld2> attributes-write access { yes | no }; receive traps { yes | no }; receive traffic alarms { yes | no }-have been modified
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SNMP[\s]+community[\s]+(?<fld2>[^\s]*)[\s]+attributes\-write[\s]+access[\s]+([\s]*yes[\s]+|[\s]*no[\s]+);[\s]+receive[\s]+traps[\s]+([\s]*yes[\s]+|[\s]*no[\s]+);[\s]+receive[\s]+traffic[\s]+alarms[\s]+([\s]*yes[\s]+|[\s]*no[\s]+)\-have[\s]+been[\s]+modified$" }
				id => "message-00031:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:02"
					"[rsa][message][id1]" => "00031:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00031:03
		# line in RSA: <fld2> SNMP host <hostip> has been { added to | removed from } SNMP community <fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^\s]*)[\s]+SNMP[\s]+host[\s]+(?<hostip>[^\s]*)[\s]+has[\s]+been[\s]+([\s]*added[\s]+to[\s]+|[\s]*removed[\s]+from[\s]+)[\s]+SNMP[\s]+community[\s]+(?<fld3>.*)$" }
				id => "message-00031:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:03"
					"[rsa][message][id1]" => "00031:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00031:04
		# line in RSA: SNMP { contact | location } description has been modified
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SNMP[\s]+([\s]*contact[\s]+|[\s]*location[\s]+)[\s]+description[\s]+has[\s]+been[\s]+modified$" }
				id => "message-00031:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:04"
					"[rsa][message][id1]" => "00031:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00031:11
		# line in RSA: SNMP system { location | name } has been changed to <fld2>. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SNMP[\s]+system[\s]+([\s]*location[\s]+|[\s]*name[\s]+)[\s]+has[\s]+been[\s]+changed[\s]+to[\s]+(?<fld2>[^\.]*)\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00031:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:11"
					"[rsa][message][id1]" => "00031:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00031:08
		# line in RSA: <fld2>: SNMP community name "<fld3>" { attributes -- | -- } write access, { yes | no }; receive traps, { yes | no }; receive traffic alarms, { yes | no } { -- | - } have been modified
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^:]*):[\s]+SNMP[\s]+community[\s]+name[\s]+\"(?<fld3>[^\"]*)\"[\s]+([\s]*attributes[\s]+\-\-[\s]+|[\s]*\-\-[\s]+)[\s]+write[\s]+access,[\s]+([\s]*yes[\s]+|[\s]*no[\s]+);[\s]+receive[\s]+traps,[\s]+([\s]*yes[\s]+|[\s]*no[\s]+);[\s]+receive[\s]+traffic[\s]+alarms,[\s]+([\s]*yes[\s]+|[\s]*no[\s]+)[\s]+([\s]*\-\-[\s]+|[\s]*\-[\s]+)[\s]+have[\s]+been[\s]+modified$" }
				id => "message-00031:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:08"
					"[rsa][message][id1]" => "00031:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00031:05
		# line in RSA: Detect IP conflict (<fld2>) on {interface|Interface} <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Detect[\s]+IP[\s]+conflict[\s]+\((?<fld2>[^\)]*)\)[\s]+on[\s]+(interface|Interface)[\s]+(?<interface>.*)$" }
				id => "message-00031:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:05"
					"[rsa][message][id1]" => "00031:05"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00031:06
		# line in RSA:  arp { req, | req | reply } detect IP conflict ( <hostip> { ), | ) } { mac: | mac } <macaddr> on { interface | Interface } { <interface> (<fld1>) | <interface> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*arp[\s]+([\s]*req,[\s]+|[\s]*req[\s]+|[\s]*reply[\s]+)[\s]+detect[\s]+IP[\s]+conflict[\s]+\([\s]+(?<hostip>[^\s]*)[\s]+([\s]*\),[\s]+|[\s]*\)[\s]+)[\s]+([\s]*mac:[\s]+|[\s]*mac[\s]+)[\s]+(?<macaddr>[^\s]*)[\s]+on[\s]+([\s]*interface[\s]+|[\s]*Interface[\s]+)[\s]+([\s]*(?<interface>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<interface>[^\s]*)[\s]+)$" }
				id => "message-00031:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:06"
					"[rsa][message][id1]" => "00031:06"
					"[event][categoryid]" => "1603030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00031:07
		# line in RSA:  arp { req | reply } detects a duplicate virtual security device group master IP address <hostip>, MAC address <macaddr> on {interface|Interface} <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*arp[\s]+([\s]*req[\s]+|[\s]*reply[\s]+)[\s]+detects[\s]+a[\s]+duplicate[\s]+virtual[\s]+security[\s]+device[\s]+group[\s]+master[\s]+IP[\s]+address[\s]+(?<hostip>[^,]*),[\s]+MAC[\s]+address[\s]+(?<macaddr>[^\s]*)[\s]+on[\s]+(interface|Interface)[\s]+(?<interface>.*)$" }
				id => "message-00031:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:07"
					"[rsa][message][id1]" => "00031:07"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00031:09
		# line in RSA: arp { req | reply } detected an IP conflict (IP <hostip>, MAC <macaddr>) { on interface <interface> (<fld1>) | on interface <interface> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^arp[\s]+([\s]*req[\s]+|[\s]*reply[\s]+)[\s]+detected[\s]+an[\s]+IP[\s]+conflict[\s]+\(IP[\s]+(?<hostip>[^,]*),[\s]+MAC[\s]+(?<macaddr>[^\)]*)\)[\s]+([\s]*on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+)$" }
				id => "message-00031:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:09"
					"[rsa][message][id1]" => "00031:09"
					"[event][categoryid]" => "1603030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00031:10
		# line in RSA: <fld2>: SNMP community "<fld3>" has been moved. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}: SNMP community \"%{fld3}\" has been moved. (%{fld1})" }
				id => "message-00031:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:10"
					"[rsa][message][id1]" => "00031:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00031:12
		# line in RSA: <fld2> system contact has been changed to <fld3>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2} system contact has been changed to %{fld3}. (%{fld1})" }
				id => "message-00031:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00031:12"
					"[rsa][message][id1]" => "00031:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00032" {
		# MESSAGE 00032
		# line in RSA:  <signame> has been detected and blocked! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected and blocked! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00032"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00032"
					"[rsa][message][id1]" => "00032"
					"[event][categoryid]" => "1201000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00032:01
		# line in RSA:   <signame> has been detected and blocked! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected and blocked! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}" }
				id => "message-00032:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00032:01"
					"[rsa][message][id1]" => "00032:01"
					"[event][categoryid]" => "1201000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00032:03
		# line in RSA:  Vsys <fld2> has been { changed to <fld3> | created | deleted | removed }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Vsys[\s]+(?<fld2>[^\s]*)[\s]+has[\s]+been[\s]+([\s]*changed[\s]+to[\s]+(?<fld3>[^\s]*)[\s]+|[\s]*created[\s]+|[\s]*deleted[\s]+|[\s]*removed[\s]+)$" }
				id => "message-00032:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00032:03"
					"[rsa][message][id1]" => "00032:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00032:04
		# line in RSA:   <signame> From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> on interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} on interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00032:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00032:04"
					"[rsa][message][id1]" => "00032:04"
					"[event][categoryid]" => "1201000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00032:05
		# line in RSA: <change_attribute> for vsys <fld2> has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} for vsys %{fld2} has been changed from %{change_old} to %{change_new}" }
				id => "message-00032:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00032:05"
					"[rsa][message][id1]" => "00032:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00032:02
		# line in RSA:  <change_attribute> has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{change_attribute} has been changed from %{change_old} to %{change_new}" }
				id => "message-00032:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00032:02"
					"[rsa][message][id1]" => "00032:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00033" {
		# MESSAGE 00033:25
		# line in RSA:  NSM has been <disposition>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSM has been %{disposition}. (%{fld1})" }
				id => "message-00033:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"agent" => "NSM"
					"[event][id]" => "00033:25"
					"[rsa][message][id1]" => "00033:25"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00033
		# line in RSA: { Global PRO | <fld3> } timeout value has been {changed|returned} to <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Global[\s]+PRO[\s]+|[\s]*(?<fld3>[^\s]*)[\s]+)[\s]+timeout[\s]+value[\s]+has[\s]+been[\s]+(changed|returned)[\s]+to[\s]+(?<fld2>.*)$" }
				id => "message-00033"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033"
					"[rsa][message][id1]" => "00033"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:03
		# line in RSA:  { Global PRO | <fld3> } { primary | secondary } host has been set to <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Global[\s]+PRO[\s]+|[\s]*(?<fld3>[^\s]*)[\s]+)[\s]+([\s]*primary[\s]+|[\s]*secondary[\s]+)[\s]+host[\s]+has[\s]+been[\s]+set[\s]+to[\s]+(?<fld4>.*)$" }
				id => "message-00033:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:03"
					"[rsa][message][id1]" => "00033:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:02
		# line in RSA: { Global PRO | <fld3> } { primary | secondary } host has been <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Global[\s]+PRO[\s]+|[\s]*(?<fld3>[^\s]*)[\s]+)[\s]+([\s]*primary[\s]+|[\s]*secondary[\s]+)[\s]+host[\s]+has[\s]+been[\s]+(?<disposition>.*)$" }
				id => "message-00033:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:02"
					"[rsa][message][id1]" => "00033:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:04
		# line in RSA: Reporting of <fld2> to <fld3> has been <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Reporting of %{fld2} to %{fld3} has been %{disposition}." }
				id => "message-00033:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:04"
					"[rsa][message][id1]" => "00033:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:05
		# line in RSA: Global PRO has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Global PRO has been %{disposition}" }
				id => "message-00033:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:05"
					"[rsa][message][id1]" => "00033:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:06
		# line in RSA: <signame>! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> and arriving at interface <interface>. The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame}! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} and arriving at interface %{interface}. The attack occurred %{dclass_counter1} times" }
				id => "message-00033:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:06"
					"[rsa][message][id1]" => "00033:06"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:01
		# line in RSA: <signame>! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> and arriving at interface <interface>. The threshold was exceeded <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame}! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} and arriving at interface %{interface}. The threshold was exceeded %{dclass_counter1} times" }
				id => "message-00033:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:01"
					"[rsa][message][id1]" => "00033:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:07
		# line in RSA: User-defined service <service> has been <disposition> from <fld2> distribution
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User-defined service %{service} has been %{disposition} from %{fld2} distribution" }
				id => "message-00033:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:07"
					"[rsa][message][id1]" => "00033:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:08
		# line in RSA: NACN Policy Manager { 1 | 2 }?s CA certificate field has not been specified.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+([\s]*1[\s]+|[\s]*2[\s]+)\?s[\s]+CA[\s]+certificate[\s]+field[\s]+has[\s]+not[\s]+been[\s]+specified\.$" }
				id => "message-00033:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:08"
					"[rsa][message][id1]" => "00033:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:09
		# line in RSA: NACN Policy Manager { 1 | 2 }?s Cert-Subject field has not been specified.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+([\s]*1[\s]+|[\s]*2[\s]+)\?s[\s]+Cert\-Subject[\s]+field[\s]+has[\s]+not[\s]+been[\s]+specified\.$" }
				id => "message-00033:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:09"
					"[rsa][message][id1]" => "00033:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:10
		# line in RSA: NACN Policy Manager { 1 | 2 }?s host field has been { set to <fld2> | unset }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+([\s]*1[\s]+|[\s]*2[\s]+)\?s[\s]+host[\s]+field[\s]+has[\s]+been[\s]+([\s]*set[\s]+to[\s]+(?<fld2>[^\s]*)[\s]+|[\s]*unset[\s]+)\.$" }
				id => "message-00033:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:10"
					"[rsa][message][id1]" => "00033:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:11
		# line in RSA: NACN Policy Manager { 1 | 2 }?s outgoing interface used to report NACN to Policy Manager { 1 | 2 } has not been specified.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+([\s]*1[\s]+|[\s]*2[\s]+)\?s[\s]+outgoing[\s]+interface[\s]+used[\s]+to[\s]+report[\s]+NACN[\s]+to[\s]+Policy[\s]+Manager[\s]+([\s]*1[\s]+|[\s]*2[\s]+)[\s]+has[\s]+not[\s]+been[\s]+specified\.$" }
				id => "message-00033:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:11"
					"[rsa][message][id1]" => "00033:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:12
		# line in RSA: NACN Policy Manager { 1 | 2 }?s password field has been { set | unset }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+([\s]*1[\s]+|[\s]*2[\s]+)\?s[\s]+password[\s]+field[\s]+has[\s]+been[\s]+([\s]*set[\s]+|[\s]*unset[\s]+)\.$" }
				id => "message-00033:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:12"
					"[rsa][message][id1]" => "00033:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:13
		# line in RSA: NACN Policy Manager { 1 | 2 }?s policy-domain field has been { unset | set to <domain>}.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+([\s]*1[\s]+|[\s]*2[\s]+)\?s[\s]+policy\-domain[\s]+field[\s]+has[\s]+been[\s]+([\s]*unset[\s]+|[\s]*set[\s]+to[\s]+(?<domain>[^\.]*))\.$" }
				id => "message-00033:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:13"
					"[rsa][message][id1]" => "00033:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:14
		# line in RSA: NACN Policy Manager {1 | 2 }?s CA certificate field has been set to <fld2>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+(1[\s]+|[\s]*2[\s]+)\?s[\s]+CA[\s]+certificate[\s]+field[\s]+has[\s]+been[\s]+set[\s]+to[\s]+(?<fld2>[^\.]*)\.$" }
				id => "message-00033:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:14"
					"[rsa][message][id1]" => "00033:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:15
		# line in RSA: NACN Policy Manager {1 | 2 }?s Cert-Subject field has been set to <fld2>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+(1[\s]+|[\s]*2[\s]+)\?s[\s]+Cert\-Subject[\s]+field[\s]+has[\s]+been[\s]+set[\s]+to[\s]+(?<fld2>[^\.]*)\.$" }
				id => "message-00033:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:15"
					"[rsa][message][id1]" => "00033:15"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:16
		# line in RSA: NACN Policy Manager {1 | 2 }?s outgoing-interface field has been set to <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+(1[\s]+|[\s]*2[\s]+)\?s[\s]+outgoing\-interface[\s]+field[\s]+has[\s]+been[\s]+set[\s]+to[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00033:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:16"
					"[rsa][message][id1]" => "00033:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:17
		# line in RSA: NACN Policy Manager {1 | 2 }?s port field has been { set to <network_port> | reset to the default value }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+Policy[\s]+Manager[\s]+(1[\s]+|[\s]*2[\s]+)\?s[\s]+port[\s]+field[\s]+has[\s]+been[\s]+([\s]*set[\s]+to[\s]+(?<network_port>[^\s]*)[\s]+|[\s]*reset[\s]+to[\s]+the[\s]+default[\s]+value[\s]+)\.$" }
				id => "message-00033:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:17"
					"[rsa][message][id1]" => "00033:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:19
		# line in RSA: <signame>! From <saddr>:<sport> to <daddr>:<dport>{,|<space>} using protocol <protocol>{,|<space>} and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> time.
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
		# MESSAGE 00033:20
		# line in RSA: <signame>! From <saddr> to <daddr>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> time.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame}! From %{saddr} to %{daddr}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} time." }
				id => "message-00033:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00033:20"
					"[rsa][message][id1]" => "00033:20"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00033:21
		# line in RSA:  <signame>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^!]*)![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00033:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:21"
					"[rsa][message][id1]" => "00033:21"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00033:22
		# line in RSA:  <signame>! From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^!]*)![\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00033:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:22"
					"[rsa][message][id1]" => "00033:22"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00033:23
		# line in RSA: NSM primary server with name <hostname> was set: addr <hostip>, port <network_port>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSM primary server with name %{hostname} was set: addr %{hostip}, port %{network_port}. (%{fld1})" }
				id => "message-00033:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:23"
					"[rsa][message][id1]" => "00033:23"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00033:24
		# line in RSA:  session threshold From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, on zone <zone> interface <interface>.<info>. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "session threshold From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, on zone %{zone} interface %{interface}.%{info}. (%{fld1})" }
				id => "message-00033:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00033:24"
					"[rsa][message][id1]" => "00033:24"
					"[event][categoryid]" => "1001030500"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00034" {
		# MESSAGE 00034
		# line in RSA: { SCS: Failed | Failed } to { bind | unbind | retrieve } PKA key { bound to | to | from } SSH user <username>. (Key ID=<fld2>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS:[\s]+Failed[\s]+|[\s]*Failed[\s]+)[\s]+to[\s]+([\s]*bind[\s]+|[\s]*unbind[\s]+|[\s]*retrieve[\s]+)[\s]+PKA[\s]+key[\s]+([\s]*bound[\s]+to[\s]+|[\s]*to[\s]+|[\s]*from[\s]+)[\s]+SSH[\s]+user[\s]+(?<username>[^\.]*)\.[\s]+\(Key[\s]+ID=(?<fld2>[^\)]*)\)$" }
				id => "message-00034"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034"
					"[rsa][message][id1]" => "00034"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:01
		# line in RSA: { SCS: Incompatible | Incompatible } SSH version <version> has been received from { the SSH | SSH  } client at <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS:[\s]+Incompatible[\s]+|[\s]*Incompatible[\s]+)[\s]+SSH[\s]+version[\s]+(?<version>[^\s]*)[\s]+has[\s]+been[\s]+received[\s]+from[\s]+([\s]*the[\s]+SSH[\s]+|[\s]*SSH[\s]+)[\s]+client[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00034:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:01"
					"[rsa][message][id1]" => "00034:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:02
		# line in RSA: Maximum number of SCS sessions <fld2> has been reached. Connection request from SSH user <username> at <saddr>:<sport> has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Maximum number of SCS sessions %{fld2} has been reached. Connection request from SSH user %{username} at %{saddr}:%{sport} has been %{disposition}" }
				id => "message-00034:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:02"
					"[rsa][message][id1]" => "00034:02"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:03
		# line in RSA: { SCS: NetScreen | NetScreen } device failed to authenticate the SSH client at <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS:[\s]+NetScreen[\s]+|[\s]*NetScreen[\s]+)[\s]+device[\s]+failed[\s]+to[\s]+authenticate[\s]+the[\s]+SSH[\s]+client[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00034:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:03"
					"[rsa][message][id1]" => "00034:03"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:04
		# line in RSA: SCS: NetScreen device failed to generate a PKA RSA challenge for SSH user <username> at <saddr>:<sport>. (Key ID=<fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: NetScreen device failed to generate a PKA RSA challenge for SSH user %{username} at %{saddr}:%{sport}. (Key ID=%{fld2})" }
				id => "message-00034:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:04"
					"[rsa][message][id1]" => "00034:04"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:05
		# line in RSA: NetScreen device failed to generate a PKA RSA challenge for SSH user <username>. (Key ID=<fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NetScreen device failed to generate a PKA RSA challenge for SSH user %{username}. (Key ID=%{fld2})" }
				id => "message-00034:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:05"
					"[rsa][message][id1]" => "00034:05"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:06
		# line in RSA: { SCS: NetScreen | NetScreen } device failed to { identify itself | send the identification string } to the SSH client at <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS:[\s]+NetScreen[\s]+|[\s]*NetScreen[\s]+)[\s]+device[\s]+failed[\s]+to[\s]+([\s]*identify[\s]+itself[\s]+|[\s]*send[\s]+the[\s]+identification[\s]+string[\s]+)[\s]+to[\s]+the[\s]+SSH[\s]+client[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00034:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:06"
					"[rsa][message][id1]" => "00034:06"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:07
		# line in RSA: SCS connection has been terminated for admin user <username> at <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS connection has been terminated for admin user %{username} at %{saddr}:%{sport}" }
				id => "message-00034:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:07"
					"[rsa][message][id1]" => "00034:07"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:08
		# line in RSA: SCS: SCS has been <disposition> for <username> with <fld2> existing PKA keys already bound to <fld3> SSH users.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: SCS has been %{disposition} for %{username} with %{fld2} existing PKA keys already bound to %{fld3} SSH users." }
				id => "message-00034:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:08"
					"[rsa][message][id1]" => "00034:08"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:09
		# line in RSA: SCS has been <disposition> for <username> with <fld2> PKA keys already bound to <fld3> SSH users
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS has been %{disposition} for %{username} with %{fld2} PKA keys already bound to %{fld3} SSH users" }
				id => "message-00034:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:09"
					"[rsa][message][id1]" => "00034:09"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:10
		# line in RSA: {SCS: SSH|SSH} client at <saddr> has attempted to make an SCS connection to { interface | Interface } <interface> {with|at} IP <hostip> but <disposition> because <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(SCS:[\s]+SSH|SSH)[\s]+client[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+has[\s]+attempted[\s]+to[\s]+make[\s]+an[\s]+SCS[\s]+connection[\s]+to[\s]+([\s]*interface[\s]+|[\s]*Interface[\s]+)[\s]+(?<interface>[^\s]*)[\s]+(with|at)[\s]+IP[\s]+(?<hostip>[^\s]*)[\s]+but[\s]+(?<disposition>[^\s]*)[\s]+because[\s]+(?<result>.*)$" }
				id => "message-00034:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:10"
					"[rsa][message][id1]" => "00034:10"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:12
		# line in RSA: {SCS: SSH|SSH} client at <saddr>:<sport> has attempted to make an SCS connection to { the root system | vsys <fld2> } but <disposition> because <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(SCS:[\s]+SSH|SSH)[\s]+client[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+has[\s]+attempted[\s]+to[\s]+make[\s]+an[\s]+SCS[\s]+connection[\s]+to[\s]+([\s]*the[\s]+root[\s]+system[\s]+|[\s]*vsys[\s]+(?<fld2>[^\s]*)[\s]+)[\s]+but[\s]+(?<disposition>[^\s]*)[\s]+because[\s]+(?<result>.*)$" }
				id => "message-00034:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:12"
					"[rsa][message][id1]" => "00034:12"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:11
		# line in RSA: {SCS: SSH|SSH} client at <saddr>:<sport> has <disposition> to make an SCS connection to { the root system | vsys <fld2> } because <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(SCS:[\s]+SSH|SSH)[\s]+client[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+has[\s]+(?<disposition>[^\s]*)[\s]+to[\s]+make[\s]+an[\s]+SCS[\s]+connection[\s]+to[\s]+([\s]*the[\s]+root[\s]+system[\s]+|[\s]*vsys[\s]+(?<fld2>[^\s]*)[\s]+)[\s]+because[\s]+(?<result>.*)$" }
				id => "message-00034:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:11"
					"[rsa][message][id1]" => "00034:11"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:15
		# line in RSA: SSH client at <saddr>:<sport> has <disposition> to make an SCS connection because <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH client at %{saddr}:%{sport} has %{disposition} to make an SCS connection because %{result}" }
				id => "message-00034:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:15"
					"[rsa][message][id1]" => "00034:15"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:18
		# line in RSA: { SCS: SSH | SSH } user <username> at <saddr>:<sport> cannot log in via SCS to <service> using the shared <interface> interface because <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS:[\s]+SSH[\s]+|[\s]*SSH[\s]+)[\s]+user[\s]+(?<username>[^\s]*)[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+cannot[\s]+log[\s]+in[\s]+via[\s]+SCS[\s]+to[\s]+(?<service>[^\s]*)[\s]+using[\s]+the[\s]+shared[\s]+(?<interface>[^\s]*)[\s]+interface[\s]+because[\s]+(?<result>.*)$" }
				id => "message-00034:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:18"
					"[rsa][message][id1]" => "00034:18"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:20
		# line in RSA: { SCS: SSH | SSH } user <username> at <saddr>:<sport> has <disposition> the PKA RSA challenge
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS:[\s]+SSH[\s]+|[\s]*SSH[\s]+)[\s]+user[\s]+(?<username>[^\s]*)[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+has[\s]+(?<disposition>[^\s]*)[\s]+the[\s]+PKA[\s]+RSA[\s]+challenge$" }
				id => "message-00034:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:20"
					"[rsa][message][id1]" => "00034:20"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:21
		# line in RSA: { SCS: SSH | SSH } user <username> at <saddr>:<sport> has requested { password | PKA RSA } authentication which is not { supported | enabled } for that { client | user }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*SCS:[\s]+SSH[\s]+|[\s]*SSH[\s]+)[\s]+user[\s]+(?<username>[^\s]*)[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+has[\s]+requested[\s]+([\s]*password[\s]+|[\s]*PKA[\s]+RSA[\s]+)[\s]+authentication[\s]+which[\s]+is[\s]+not[\s]+([\s]*supported[\s]+|[\s]*enabled[\s]+)[\s]+for[\s]+that[\s]+([\s]*client[\s]+|[\s]*user[\s]+)$" }
				id => "message-00034:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:21"
					"[rsa][message][id1]" => "00034:21"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:22
		# line in RSA: SSH user <username> at <saddr>:<sport> has unsuccessfully attempted to log in via SCS to vsys <fld2> using the shared untrusted interface
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH user %{username} at %{saddr}:%{sport} has unsuccessfully attempted to log in via SCS to vsys %{fld2} using the shared untrusted interface" }
				id => "message-00034:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:22"
					"[rsa][message][id1]" => "00034:22"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:23
		# line in RSA:  { SCS: Unable | Unable } to validate cookie from the SSH client at <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*SCS:[\s]+Unable[\s]+|[\s]*Unable[\s]+)[\s]+to[\s]+validate[\s]+cookie[\s]+from[\s]+the[\s]+SSH[\s]+client[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00034:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:23"
					"[rsa][message][id1]" => "00034:23"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:24
		# line in RSA:   AC <username> is advertising URL <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AC %{username} is advertising URL %{fld2}" }
				id => "message-00034:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:24"
					"[rsa][message][id1]" => "00034:24"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:25
		# line in RSA:   Message from AC <username>: <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Message from AC %{username}: %{fld2}" }
				id => "message-00034:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:25"
					"[rsa][message][id1]" => "00034:25"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:26
		# line in RSA: PPPoE Settings changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPPoE Settings changed" }
				id => "message-00034:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:26"
					"[rsa][message][id1]" => "00034:26"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:27
		# line in RSA: PPPoE is <disposition> on <interface> interface
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPPoE is %{disposition} on %{interface} interface" }
				id => "message-00034:27"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:27"
					"[rsa][message][id1]" => "00034:27"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:28
		# line in RSA: PPPoE{|&}s session closed by AC
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^PPPoE(|&)s[\s]+session[\s]+closed[\s]+by[\s]+AC$" }
				id => "message-00034:28"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:28"
					"[rsa][message][id1]" => "00034:28"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:29
		# line in RSA: SCS: Disabled for <username>. Attempted connection <disposition> from <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: Disabled for %{username}. Attempted connection %{disposition} from %{saddr}:%{sport}" }
				id => "message-00034:29"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:29"
					"[rsa][message][id1]" => "00034:29"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:30
		# line in RSA: SCS: <disposition> to remove PKA key removed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: %{disposition} to remove PKA key removed." }
				id => "message-00034:30"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:30"
					"[rsa][message][id1]" => "00034:30"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:31
		# line in RSA: SCS: <disposition> to retrieve host key
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: %{disposition} to retrieve host key" }
				id => "message-00034:31"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:31"
					"[rsa][message][id1]" => "00034:31"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:32
		# line in RSA: SCS: <disposition> to send identification string to client host at <saddr>:<sport>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: %{disposition} to send identification string to client host at %{saddr}:%{sport}." }
				id => "message-00034:32"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:32"
					"[rsa][message][id1]" => "00034:32"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:33
		# line in RSA: SCS: Max <fld2> sessions reached unabel to accept connection : <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: Max %{fld2} sessions reached unabel to accept connection : %{saddr}:%{sport}" }
				id => "message-00034:33"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:33"
					"[rsa][message][id1]" => "00034:33"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:34
		# line in RSA: SCS: Maximum number for SCS sessions <fld2> has been reached. Connection request from SSH user at <saddr>:<sport> has been <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: Maximum number for SCS sessions %{fld2} has been reached. Connection request from SSH user at %{saddr}:%{sport} has been %{disposition}." }
				id => "message-00034:34"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:34"
					"[rsa][message][id1]" => "00034:34"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:35
		# line in RSA: SCS: SSH user <username> at <saddr>:<sport> has unsuccessfully attempted to log in via SCS to <service> using the shared untrusted interface because SCS is disabled on that interface.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: SSH user %{username} at %{saddr}:%{sport} has unsuccessfully attempted to log in via SCS to %{service} using the shared untrusted interface because SCS is disabled on that interface." }
				id => "message-00034:35"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:35"
					"[rsa][message][id1]" => "00034:35"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:36
		# line in RSA: SCS: Unsupported cipher type <fld2> requested from: <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: Unsupported cipher type %{fld2} requested from: %{saddr}:%{sport}" }
				id => "message-00034:36"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:36"
					"[rsa][message][id1]" => "00034:36"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:37
		# line in RSA:  The Point-to-Point Protocol over Ethernet (PPPoE) protocol settings changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The Point-to-Point Protocol over Ethernet (PPPoE) protocol settings changed" }
				id => "message-00034:37"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:37"
					"[rsa][message][id1]" => "00034:37"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:38
		# line in RSA:  SSH: <disposition> to retreive PKA key bound to SSH user <username> (Key ID <fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: %{disposition} to retreive PKA key bound to SSH user %{username} (Key ID %{fld2})" }
				id => "message-00034:38"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:38"
					"[rsa][message][id1]" => "00034:38"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:39
		# line in RSA:  SSH: Error processing packet from host <saddr> (Code <fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Error processing packet from host %{saddr} (Code %{fld2})" }
				id => "message-00034:39"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:39"
					"[rsa][message][id1]" => "00034:39"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:40
		# line in RSA: SSH: Device failed to send initialization string to client at <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Device failed to send initialization string to client at %{saddr}" }
				id => "message-00034:40"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:40"
					"[rsa][message][id1]" => "00034:40"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:41
		# line in RSA: SCP: Admin user '<administrator>' attempted to transfer file { to | from } the device with insufficient privilege.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCP:[\s]+Admin[\s]+user[\s]+'(?<administrator>[^']*)'[\s]+attempted[\s]+to[\s]+transfer[\s]+file[\s]+([\s]*to[\s]+|[\s]*from[\s]+)[\s]+the[\s]+device[\s]+with[\s]+insufficient[\s]+privilege\.$" }
				id => "message-00034:41"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:41"
					"[rsa][message][id1]" => "00034:41"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:42
		# line in RSA: SSH: Maximum number of SSH sessions (<fld2>) exceeded. Connection request from SSH user <username> at <saddr> denied.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Maximum number of SSH sessions (%{fld2}) exceeded. Connection request from SSH user %{username} at %{saddr} denied." }
				id => "message-00034:42"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:42"
					"[rsa][message][id1]" => "00034:42"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:43
		# line in RSA: Ethernet driver ran out of rx bd (port <network_port>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Ethernet driver ran out of rx bd (port %{network_port})" }
				id => "message-00034:43"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:43"
					"[rsa][message][id1]" => "00034:43"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00034:44
		# line in RSA:  Potential replay attack detected on SSH connection initiated from <saddr>:<sport> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Potential replay attack detected on SSH connection initiated from %{saddr}:%{sport} (%{fld1})" }
				id => "message-00034:44"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00034:44"
					"[rsa][message][id1]" => "00034:44"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00035" {
		# MESSAGE 00035
		# line in RSA: PKI Verify Error: <resultcode>:<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI Verify Error: %{resultcode}:%{result}" }
				id => "message-00035"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035"
					"[rsa][message][id1]" => "00035"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:01
		# line in RSA: SSL - Error MessageID in incoming mail - <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL - Error MessageID in incoming mail - %{fld2}" }
				id => "message-00035:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:01"
					"[rsa][message][id1]" => "00035:01"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:02
		# line in RSA:  SSL - cipher type <fld2> is not allowed in export or firewall only system
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL - cipher type %{fld2} is not allowed in export or firewall only system" }
				id => "message-00035:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:02"
					"[rsa][message][id1]" => "00035:02"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:03
		# line in RSA:  SSL CA changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL CA changed" }
				id => "message-00035:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:03"
					"[rsa][message][id1]" => "00035:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:04
		# line in RSA: SSL Error when retrieve local { ca(verify) | cert(verify) | cert(all) }: <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSL[\s]+Error[\s]+when[\s]+retrieve[\s]+local[\s]+([\s]*ca\(verify\)[\s]+|[\s]*cert\(verify\)[\s]+|[\s]*cert\(all\)[\s]+):[\s]+(?<fld2>.*)$" }
				id => "message-00035:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00035:04"
					"[rsa][message][id1]" => "00035:04"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:05
		# line in RSA: SSL No ssl context. Not ready for connections.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL No ssl context. Not ready for connections." }
				id => "message-00035:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:05"
					"[rsa][message][id1]" => "00035:05"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:06
		# line in RSA: SSL { ca | cert } changed to none
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSL[\s]+([\s]*ca[\s]+|[\s]*cert[\s]+)[\s]+changed[\s]+to[\s]+none$" }
				id => "message-00035:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:06"
					"[rsa][message][id1]" => "00035:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:07
		# line in RSA: SSL cert subject mismatch: <fld2> recieved <fld3> is expected
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL cert subject mismatch: %{fld2} recieved %{fld3} is expected" }
				id => "message-00035:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:07"
					"[rsa][message][id1]" => "00035:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:08
		# line in RSA: SSL certificate changed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL certificate changed" }
				id => "message-00035:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:08"
					"[rsa][message][id1]" => "00035:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:09
		# line in RSA: SSL { enabled | disabled }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSL[\s]+([\s]*enabled[\s]+|[\s]*disabled[\s]+)$" }
				id => "message-00035:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:09"
					"[rsa][message][id1]" => "00035:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:10
		# line in RSA: SSL memory allocation fails in { process_ca() | process_cert() }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSL[\s]+memory[\s]+allocation[\s]+fails[\s]+in[\s]+([\s]*process_ca\(\)[\s]+|[\s]*process_cert\(\)[\s]+)$" }
				id => "message-00035:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:10"
					"[rsa][message][id1]" => "00035:10"
					"[event][categoryid]" => "1603020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:11
		# line in RSA: SSL no ssl { ca | cert }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSL[\s]+no[\s]+ssl[\s]+([\s]*ca[\s]+|[\s]*cert[\s]+)$" }
				id => "message-00035:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:11"
					"[rsa][message][id1]" => "00035:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:12
		# line in RSA: SSL set { ca | cert } id is invalid <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSL[\s]+set[\s]+([\s]*ca[\s]+|[\s]*cert[\s]+)[\s]+id[\s]+is[\s]+invalid[\s]+(?<fld2>.*)$" }
				id => "message-00035:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:12"
					"[rsa][message][id1]" => "00035:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:13
		# line in RSA: SSL { set | verify } cert failed. Key type is not RSA
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSL[\s]+([\s]*set[\s]+|[\s]*verify[\s]+)[\s]+cert[\s]+failed\.[\s]+Key[\s]+type[\s]+is[\s]+not[\s]+RSA$" }
				id => "message-00035:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:13"
					"[rsa][message][id1]" => "00035:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:14
		# line in RSA: SSL ssl context init failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL ssl context init failed" }
				id => "message-00035:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:14"
					"[rsa][message][id1]" => "00035:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:15
		# line in RSA: <change_attribute> has been changed { from <change_old> to <change_new> | to <fld2> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<change_attribute>[^\s]*)[\s]+has[\s]+been[\s]+changed[\s]+([\s]*from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>[^\s]*)[\s]+|[\s]*to[\s]+(?<fld2>[^\s]*)[\s]+)$" }
				id => "message-00035:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:15"
					"[rsa][message][id1]" => "00035:15"
					"[event][categoryid]" => "1603020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00035:16
		# line in RSA: web SSL certificate changed to by <username> via web from host <saddr> to <daddr>:<dport> <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "web SSL certificate changed to by %{username} via web from host %{saddr} to %{daddr}:%{dport} %{fld5}" }
				id => "message-00035:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00035:16"
					"[rsa][message][id1]" => "00035:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00036" {
		# MESSAGE 00036
		# line in RSA: An optional ScreenOS feature has been activated via a software key
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "An optional ScreenOS feature has been activated via a software key" }
				id => "message-00036"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00036"
					"[rsa][message][id1]" => "00036"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00036:01
		# line in RSA: <fld2> license keys were updated successfully by { auto | manual } retrieval 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^\s]*)[\s]+license[\s]+keys[\s]+were[\s]+updated[\s]+successfully[\s]+by[\s]+([\s]*auto[\s]+|[\s]*manual[\s]+)[\s]+retrieval[\s]+$" }
				id => "message-00036:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00036:01"
					"[rsa][message][id1]" => "00036:01"
					"[event][categoryid]" => "1608000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00037" {
		# MESSAGE 00037
		# line in RSA: Intra-zone block for zone <zone> was set to { on | off }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Intra\-zone[\s]+block[\s]+for[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+was[\s]+set[\s]+to[\s]+([\s]*on[\s]+|[\s]*off[\s]+)$" }
				id => "message-00037"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00037"
					"[rsa][message][id1]" => "00037"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00037:01
		# line in RSA: New zone <zone> ({ id: | ID } <fld2>) was { created. (<fld1>) | created. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^New[\s]+zone[\s]+(?<zone>[^\s]*)[\s]+\(([\s]*id:[\s]+|[\s]*ID[\s]+)[\s]+(?<fld2>[^\)]*)\)[\s]+was[\s]+([\s]*created\.[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*created\.[\s]+)$" }
				id => "message-00037:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00037:01"
					"[rsa][message][id1]" => "00037:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00037:02
		# line in RSA: Tunnel zone <src_zone> was bound to out zone <dst_zone>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Tunnel zone %{src_zone} was bound to out zone %{dst_zone}." }
				id => "message-00037:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00037:02"
					"[rsa][message][id1]" => "00037:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00037:03
		# line in RSA: Zone {was|<zone>} was { bound to | unbound from } virtual router { <node> (<fld1>) | <node>. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Zone[\s]+(was|(?<zone>[^\s]*))[\s]+was[\s]+([\s]*bound[\s]+to[\s]+|[\s]*unbound[\s]+from[\s]+)[\s]+virtual[\s]+router[\s]+([\s]*(?<node>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<node>[^\.]*)\.[\s]+)$" }
				id => "message-00037:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00037:03"
					"[rsa][message][id1]" => "00037:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00037:04
		# line in RSA: Zone <zone> was changed to non-shared.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Zone %{zone} was changed to non-shared." }
				id => "message-00037:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00037:04"
					"[rsa][message][id1]" => "00037:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00037:05
		# line in RSA: Zone <zone> ( { ID | id: } <fld2>) was deleted. { (<fld1>) | <space> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Zone[\s]+(?<zone>[^\s]*)[\s]+\([\s]+([\s]*ID[\s]+|[\s]*id:[\s]+)[\s]+(?<fld2>[^\)]*)\)[\s]+was[\s]+deleted\.[\s]+([\s]*\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
				id => "message-00037:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00037:05"
					"[rsa][message][id1]" => "00037:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00037:06
		# line in RSA: IP/TCP reassembly for ALG was <disposition> on zone <zone>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP/TCP reassembly for ALG was %{disposition} on zone %{zone}." }
				id => "message-00037:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00037:06"
					"[rsa][message][id1]" => "00037:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId649
	# line in RSA: OSPF routing instance in vrouter {<node> is|<node>} <disposition>
	else if [logstash][msgparser][id] == "msgParserId649" {
		grok {
			match => { "message" => "^OSPF[\s]+routing[\s]+instance[\s]+in[\s]+vrouter[\s]+((?<node>[^\s]*)[\s]+is|(?<node>[^\s]*))[\s]+(?<disposition>.*)$" }
			id => "msgParserId649"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId650
	# line in RSA: BGP instance name created for vr <node>
	else if [logstash][msgparser][id] == "msgParserId650" {
		dissect {
			mapping => { "message" => "BGP instance name created for vr %{node}" }
			id => "msgParserId650"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00040" {
		# MESSAGE 00040
		# line in RSA: {Low watermark|High watermark} for early aging has been changed to the default <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Low[\s]+watermark|High[\s]+watermark)[\s]+for[\s]+early[\s]+aging[\s]+has[\s]+been[\s]+changed[\s]+to[\s]+the[\s]+default[\s]+(?<fld2>.*)$" }
				id => "message-00040"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00040"
					"[rsa][message][id1]" => "00040"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00040:01
		# line in RSA:  VPN '<group>' from <daddr> is <disposition> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN '%{group}' from %{daddr} is %{disposition} (%{fld1})" }
				id => "message-00040:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00040:01"
					"[rsa][message][id1]" => "00040:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00041" {
		# MESSAGE 00041
		# line in RSA: A route-map name in virtual router <node> has been removed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "A route-map name in virtual router %{node} has been removed" }
				id => "message-00041"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00041"
					"[rsa][message][id1]" => "00041"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00041:01
		# line in RSA:  VPN '<group>' from <daddr> is <disposition> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN '%{group}' from %{daddr} is %{disposition} (%{fld1})" }
				id => "message-00041:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00041:01"
					"[rsa][message][id1]" => "00041:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00042" {
		# MESSAGE 00042
		# line in RSA: Replay packet detected on IPSec tunnel on <interface> with tunnel ID <fld2>! From <saddr> to <daddr>/<dport>, <info> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Replay packet detected on IPSec tunnel on %{interface} with tunnel ID %{fld2}! From %{saddr} to %{daddr}/%{dport}, %{info} (%{fld1})" }
				id => "message-00042"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00042"
					"[rsa][message][id1]" => "00042"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00042:01
		# line in RSA: <signame> From <saddr> to <daddr>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.The attack occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.The attack occurred %{dclass_counter1} times. (%{fld1})" }
				id => "message-00042:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00042:01"
					"[rsa][message][id1]" => "00042:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId656
	# line in RSA: Receive StopCCN_msg, remove l2tp tunnel (<fld2>-<fld3>), Result code <resultcode> (<result>). (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId656" {
		dissect {
			mapping => { "message" => "Receive StopCCN_msg, remove l2tp tunnel (%{fld2}-%{fld3}), Result code %{resultcode} (%{result}). (%{fld1})" }
			id => "msgParserId656"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "00044" {
		# MESSAGE 00044
		# line in RSA: access list <listnum> sequence number <fld3> { permit | deny } ip <hostip>/<mask> <disposition> in vrouter <node> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^access[\s]+list[\s]+(?<listnum>[^\s]*)[\s]+sequence[\s]+number[\s]+(?<fld3>[^\s]*)[\s]+([\s]*permit[\s]+|[\s]*deny[\s]+)[\s]+ip[\s]+(?<hostip>[^/]*)/(?<mask>[^\s]*)[\s]+(?<disposition>[^\s]*)[\s]+in[\s]+vrouter[\s]+(?<node>[^\s]*)[\s]+$" }
				id => "message-00044"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00044"
					"[rsa][message][id1]" => "00044"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00044:01
		# line in RSA: access list <listnum> <disposition> in vrouter <node>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "access list %{listnum} %{disposition} in vrouter %{node}." }
				id => "message-00044:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00044:01"
					"[rsa][message][id1]" => "00044:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId659
	# line in RSA: RIP instance in virtual router <node> was <disposition>.
	else if [logstash][msgparser][id] == "msgParserId659" {
		dissect {
			mapping => { "message" => "RIP instance in virtual router %{node} was %{disposition}." }
			id => "msgParserId659"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId660
	# line in RSA:  <fld2> { remove | add } multicast policy from <src_zone> <fld4> to <dst_zone> <fld3> (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId660" {
		grok {
			match => { "message" => "^[\s]*(?<fld2>[^\s]*)[\s]+([\s]*remove[\s]+|[\s]*add[\s]+)[\s]+multicast[\s]+policy[\s]+from[\s]+(?<src_zone>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+to[\s]+(?<dst_zone>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
			id => "msgParserId660"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "00048" {
		# MESSAGE 00048
		# line in RSA:  Access list entry <listnum> with { a sequence | sequence } number <fld2> { with an action of | that } permit { with an IP | IP } address { and subnetwork mask of <fld3> | <fld3> } was { created on | removed from } virtual router <node> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Access[\s]+list[\s]+entry[\s]+(?<listnum>[^\s]*)[\s]+with[\s]+([\s]*a[\s]+sequence[\s]+|[\s]*sequence[\s]+)[\s]+number[\s]+(?<fld2>[^\s]*)[\s]+([\s]*with[\s]+an[\s]+action[\s]+of[\s]+|[\s]*that[\s]+)[\s]+permit[\s]+([\s]*with[\s]+an[\s]+IP[\s]+|[\s]*IP[\s]+)[\s]+address[\s]+([\s]*and[\s]+subnetwork[\s]+mask[\s]+of[\s]+(?<fld3>[^\s]*)[\s]+|[\s]*(?<fld3>[^\s]*)[\s]+)[\s]+was[\s]+([\s]*created[\s]+on[\s]+|[\s]*removed[\s]+from[\s]+)[\s]+virtual[\s]+router[\s]+(?<node>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00048"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00048"
					"[rsa][message][id1]" => "00048"
					"[event][categoryid]" => "1501000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00048:01
		# line in RSA:  Route { map entry | entry } with sequence number <fld2> in route map { binck-ospf in | binck-ospf, } virtual router <node> was <disposition> (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Route[\s]+([\s]*map[\s]+entry[\s]+|[\s]*entry[\s]+)[\s]+with[\s]+sequence[\s]+number[\s]+(?<fld2>[^\s]*)[\s]+in[\s]+route[\s]+map[\s]+([\s]*binck\-ospf[\s]+in[\s]+|[\s]*binck\-ospf,[\s]+)[\s]+virtual[\s]+router[\s]+(?<node>[^\s]*)[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00048:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00048:01"
					"[rsa][message][id1]" => "00048:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00048:02
		# line in RSA:  <space>set match interface <interface> (<fld1>)  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{space}set match interface %{interface} (%{fld1})" }
				id => "message-00048:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00048:02"
					"[rsa][message][id1]" => "00048:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00049" {
		# MESSAGE 00049
		# line in RSA: Route-lookup preference changed to <fld8> (<fld2>) => <fld3> (<fld4>) => <fld5> (<fld6>) in virtual router (<node>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Route-lookup preference changed to %{fld8} (%{fld2}) => %{fld3} (%{fld4}) => %{fld5} (%{fld6}) in virtual router (%{node})" }
				id => "message-00049"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00049"
					"[rsa][message][id1]" => "00049"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00049:01
		# line in RSA: SIBR routing <disposition> in virtual router <node>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SIBR routing %{disposition} in virtual router %{node}" }
				id => "message-00049:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00049:01"
					"[rsa][message][id1]" => "00049:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00049:02
		# line in RSA: A virtual router with name <node> and ID <fld2> has been removed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "A virtual router with name %{node} and ID %{fld2} has been removed" }
				id => "message-00049:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00049:02"
					"[rsa][message][id1]" => "00049:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00049:03
		# line in RSA: The router-id of virtual router "<node>" used by OSPF, BGP routing instances id has been uninitialized. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The router-id of virtual router \"%{node}\" used by OSPF, BGP routing instances id has been uninitialized. (%{fld1})" }
				id => "message-00049:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00049:03"
					"[rsa][message][id1]" => "00049:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00049:04
		# line in RSA: The system default-route through virtual router "<node>" has been added in virtual router "<fld4>" (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system default-route through virtual router \"%{node}\" has been added in virtual router \"%{fld4}\" (%{fld1})" }
				id => "message-00049:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00049:04"
					"[rsa][message][id1]" => "00049:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00049:05
		# line in RSA: Subnetwork conflict checking for interfaces in virtual router (<node>) has been enabled. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Subnetwork conflict checking for interfaces in virtual router (%{node}) has been enabled. (%{fld1})" }
				id => "message-00049:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00049:05"
					"[rsa][message][id1]" => "00049:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId670
	# line in RSA:  Track IP enabled (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId670" {
		dissect {
			mapping => { "message" => "Track IP enabled (%{fld1})" }
			id => "msgParserId670"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId671
	# line in RSA: Session utilization has reached <fld2>, which is <fld3> of the system capacity!
	else if [logstash][msgparser][id] == "msgParserId671" {
		dissect {
			mapping => { "message" => "Session utilization has reached %{fld2}, which is %{fld3} of the system capacity!" }
			id => "msgParserId671"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId672
	# line in RSA: AV: Suspicious client <saddr>:<sport>-><daddr>:<dport> used <fld2> percent of AV resources, which exceeded the max of <fld3> percent.
	else if [logstash][msgparser][id] == "msgParserId672" {
		dissect {
			mapping => { "message" => "AV: Suspicious client %{saddr}:%{sport}->%{daddr}:%{dport} used %{fld2} percent of AV resources, which exceeded the max of %{fld3} percent." }
			id => "msgParserId672"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00055" {
		# MESSAGE 00055
		# line in RSA: IGMP { host | router } instance was <disposition> on interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IGMP[\s]+([\s]*host[\s]+|[\s]*router[\s]+)[\s]+instance[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00055"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055"
					"[rsa][message][id1]" => "00055"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:01
		# line in RSA: IGMP { proxy | function } was <disposition> on interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IGMP[\s]+([\s]*proxy[\s]+|[\s]*function[\s]+)[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00055:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:01"
					"[rsa][message][id1]" => "00055:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:02
		# line in RSA: IGMP will { not do | do } same subnet check on interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IGMP[\s]+will[\s]+([\s]*not[\s]+do[\s]+|[\s]*do[\s]+)[\s]+same[\s]+subnet[\s]+check[\s]+on[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00055:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:02"
					"[rsa][message][id1]" => "00055:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:03
		# line in RSA: IGMP will { not do | do } router alert IP option check on interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IGMP[\s]+will[\s]+([\s]*not[\s]+do[\s]+|[\s]*do[\s]+)[\s]+router[\s]+alert[\s]+IP[\s]+option[\s]+check[\s]+on[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00055:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:03"
					"[rsa][message][id1]" => "00055:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:04
		# line in RSA: IGMP version was changed to <version> on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IGMP version was changed to %{version} on interface %{interface}" }
				id => "message-00055:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:04"
					"[rsa][message][id1]" => "00055:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:05
		# line in RSA: IGMP query { interval | max response time } was changed to <fld2> on interface <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IGMP[\s]+query[\s]+([\s]*interval[\s]+|[\s]*max[\s]+response[\s]+time[\s]+)[\s]+was[\s]+changed[\s]+to[\s]+(?<fld2>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>.*)$" }
				id => "message-00055:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:05"
					"[rsa][message][id1]" => "00055:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:06
		# line in RSA: IGMP { leave | last member query } interval was changed to <fld2> on interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IGMP[\s]+([\s]*leave[\s]+|[\s]*last[\s]+member[\s]+query[\s]+)[\s]+interval[\s]+was[\s]+changed[\s]+to[\s]+(?<fld2>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00055:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:06"
					"[rsa][message][id1]" => "00055:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:07
		# line in RSA: IGMP { routers | hosts | groups } accept list ID was changed to <fld2> on interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IGMP[\s]+([\s]*routers[\s]+|[\s]*hosts[\s]+|[\s]*groups[\s]+)[\s]+accept[\s]+list[\s]+ID[\s]+was[\s]+changed[\s]+to[\s]+(?<fld2>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00055:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:07"
					"[rsa][message][id1]" => "00055:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:08
		# line in RSA: IGMP { all groups | group } <group> static flag was <disposition> on interface <interface>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IGMP[\s]+([\s]*all[\s]+groups[\s]+|[\s]*group[\s]+)[\s]+(?<group>[^\s]*)[\s]+static[\s]+flag[\s]+was[\s]+(?<disposition>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\.]*)\.$" }
				id => "message-00055:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:08"
					"[rsa][message][id1]" => "00055:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:09
		# line in RSA: IGMP static group <group> was added on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IGMP static group %{group} was added on interface %{interface}" }
				id => "message-00055:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:09"
					"[rsa][message][id1]" => "00055:09"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00055:10
		# line in RSA: IGMP proxy always is <disposition> on interface <interface>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IGMP proxy always is %{disposition} on interface %{interface}." }
				id => "message-00055:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00055:10"
					"[rsa][message][id1]" => "00055:10"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId684
	# line in RSA: Remove multicast policy from <src_zone> <saddr> to <dst_zone> <daddr>
	else if [logstash][msgparser][id] == "msgParserId684" {
		dissect {
			mapping => { "message" => "Remove multicast policy from %{src_zone} %{saddr} to %{dst_zone} %{daddr}" }
			id => "msgParserId684"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId685
	# line in RSA:  <fld2>: static multicast route src=<saddr>, grp=<group> input ifp = <sinterface> output ifp = <dinterface> added
	else if [logstash][msgparser][id] == "msgParserId685" {
		dissect {
			mapping => { "message" => "%{fld2}: static multicast route src=%{saddr}, grp=%{group} input ifp = %{sinterface} output ifp = %{dinterface} added" }
			id => "msgParserId685"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId686
	# line in RSA:  PIMSM protocol configured on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId686" {
		dissect {
			mapping => { "message" => "PIMSM protocol configured on interface %{interface}" }
			id => "msgParserId686"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00059" {
		# MESSAGE 00059
		# line in RSA: DDNS module is { initialized | shut down | disabled | enabled }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DDNS[\s]+module[\s]+is[\s]+([\s]*initialized[\s]+|[\s]*shut[\s]+down[\s]+|[\s]*disabled[\s]+|[\s]*enabled[\s]+)\.$" }
				id => "message-00059"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059"
					"[rsa][message][id1]" => "00059"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:02
		# line in RSA: DDNS entry with id <fld2> is configured with server type "<fld3>" name "<hostname>" refresh-interval <fld5> hours minimum update interval <fld6> minutes with { secure | clear-text } secure connection.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DDNS[\s]+entry[\s]+with[\s]+id[\s]+(?<fld2>[^\s]*)[\s]+is[\s]+configured[\s]+with[\s]+server[\s]+type[\s]+\"(?<fld3>[^\"]*)\"[\s]+name[\s]+\"(?<hostname>[^\"]*)\"[\s]+refresh\-interval[\s]+(?<fld5>[^\s]*)[\s]+hours[\s]+minimum[\s]+update[\s]+interval[\s]+(?<fld6>[^\s]*)[\s]+minutes[\s]+with[\s]+([\s]*secure[\s]+|[\s]*clear\-text[\s]+)[\s]+secure[\s]+connection\.$" }
				id => "message-00059:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:02"
					"[rsa][message][id1]" => "00059:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:03
		# line in RSA: DDNS entry with id <fld2> is configured with user name "<username>" agent "<fld3>" 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DDNS entry with id %{fld2} is configured with user name \"%{username}\" agent \"%{fld3}\"" }
				id => "message-00059:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:03"
					"[rsa][message][id1]" => "00059:03"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:04
		# line in RSA: DDNS entry with id <fld2> is configured with interface "<interface>" host-name "<hostname>" 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DDNS entry with id %{fld2} is configured with interface \"%{interface}\" host-name \"%{hostname}\"" }
				id => "message-00059:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:04"
					"[rsa][message][id1]" => "00059:04"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:05
		# line in RSA: { Hostname | Source interface | Username and password | Server } of DDNS entry with id <fld2> is cleared.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Hostname[\s]+|[\s]*Source[\s]+interface[\s]+|[\s]*Username[\s]+and[\s]+password[\s]+|[\s]*Server[\s]+)[\s]+of[\s]+DDNS[\s]+entry[\s]+with[\s]+id[\s]+(?<fld2>[^\s]*)[\s]+is[\s]+cleared\.$" }
				id => "message-00059:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:05"
					"[rsa][message][id1]" => "00059:05"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:06
		# line in RSA: Agent of DDNS entry with id <fld2> is reset to its default value.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Agent of DDNS entry with id %{fld2} is reset to its default value." }
				id => "message-00059:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:06"
					"[rsa][message][id1]" => "00059:06"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:07
		# line in RSA: Updates for DDNS entry with id <fld2> are set to be sent in secure (<protocol>) mode.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Updates for DDNS entry with id %{fld2} are set to be sent in secure (%{protocol}) mode." }
				id => "message-00059:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:07"
					"[rsa][message][id1]" => "00059:07"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:08
		# line in RSA: { Refresh | Minimum update } interval of DDNS entry with id <fld2> is set to default value (<fld3>).
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Refresh[\s]+|[\s]*Minimum[\s]+update[\s]+)[\s]+interval[\s]+of[\s]+DDNS[\s]+entry[\s]+with[\s]+id[\s]+(?<fld2>[^\s]*)[\s]+is[\s]+set[\s]+to[\s]+default[\s]+value[\s]+\((?<fld3>[^\)]*)\)\.$" }
				id => "message-00059:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:08"
					"[rsa][message][id1]" => "00059:08"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:09
		# line in RSA:  { No-Change | Error } response received for DDNS entry update for id <fld2> user "<username>" domain "<domain>" server type "{ ddo | dyndns }", server name "<hostname>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*No\-Change[\s]+|[\s]*Error[\s]+)[\s]+response[\s]+received[\s]+for[\s]+DDNS[\s]+entry[\s]+update[\s]+for[\s]+id[\s]+(?<fld2>[^\s]*)[\s]+user[\s]+\"(?<username>[^\"]*)\"[\s]+domain[\s]+\"(?<domain>[^\"]*)\"[\s]+server[\s]+type[\s]+\"([\s]*ddo[\s]+|[\s]*dyndns[\s]+)\",[\s]+server[\s]+name[\s]+\"(?<hostname>[^\"]*)\"$" }
				id => "message-00059:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:09"
					"[rsa][message][id1]" => "00059:09"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00059:01
		# line in RSA: DDNS entry with id <fld2> is <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DDNS entry with id %{fld2} is %{disposition}." }
				id => "message-00059:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00059:01"
					"[rsa][message][id1]" => "00059:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00062" {
		# MESSAGE 00062:01
		# line in RSA:  Track IP IP address <hostip> failed. (<event_time_string>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Track IP IP address %{hostip} failed. (%{event_time_string})" }
				id => "message-00062:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Track IP failed"
					"[event][id]" => "00062:01"
					"[rsa][message][id1]" => "00062:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00062:02
		# line in RSA:  Track IP failure reached threshold. (<event_time_string>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Track IP failure reached threshold. (%{event_time_string})" }
				id => "message-00062:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Track IP failure reached threshold"
					"[event][id]" => "00062:02"
					"[rsa][message][id1]" => "00062:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00062:03
		# line in RSA:  Track IP IP address <hostip> succeeded. (<event_time_string>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Track IP IP address %{hostip} succeeded. (%{event_time_string})" }
				id => "message-00062:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Track IP succeeded"
					"[event][id]" => "00062:03"
					"[rsa][message][id1]" => "00062:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00062
		# line in RSA: HA linkdown
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA linkdown" }
				id => "message-00062"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00062"
					"[rsa][message][id1]" => "00062"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId701
	# line in RSA: nsrp track-ip ip <hostip> <disposition>!
	else if [logstash][msgparser][id] == "msgParserId701" {
		dissect {
			mapping => { "message" => "nsrp track-ip ip %{hostip} %{disposition}!" }
			id => "msgParserId701"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00064" {
		# MESSAGE 00064
		# line in RSA: Can not create track-ip list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Can not create track-ip list" }
				id => "message-00064"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00064"
					"[rsa][message][id1]" => "00064"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00064:01
		# line in RSA: track ip fail reaches threshold system may fail over!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "track ip fail reaches threshold system may fail over!" }
				id => "message-00064:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00064:01"
					"[rsa][message][id1]" => "00064:01"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00064:02
		# line in RSA: Anti-Spam is detached from policy ID <policy_id>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Anti-Spam is detached from policy ID %{policy_id}. (%{fld1})" }
				id => "message-00064:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00064:02"
					"[rsa][message][id1]" => "00064:02"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00070" {
		# MESSAGE 00070
		# line in RSA: NSRP: { Unit | local unit= }<fld2> of VSD group <group> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP:[\s]+([\s]*Unit[\s]+|[\s]*local[\s]+unit=[\s]+)(?<fld2>[^\s]*)[\s]+of[\s]+VSD[\s]+group[\s]+(?<group>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-00070"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00070"
					"[rsa][message][id1]" => "00070"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00070:01
		# line in RSA: The local device <fld2> in the Virtual {Secruity|Security} Device group <group> changed state from <fld3> to {Init|init. (<fld1>)}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+local[\s]+device[\s]+(?<fld2>[^\s]*)[\s]+in[\s]+the[\s]+Virtual[\s]+(Secruity|Security)[\s]+Device[\s]+group[\s]+(?<group>[^\s]*)[\s]+changed[\s]+state[\s]+from[\s]+(?<fld3>[^\s]*)[\s]+to[\s]+(Init|init\.[\s]+\((?<fld1>[^\)]*)\))$" }
				id => "message-00070:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00070:01"
					"[rsa][message][id1]" => "00070:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00070:02
		# line in RSA: NSRP: nsrp control channel change to <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSRP: nsrp control channel change to %{interface}" }
				id => "message-00070:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00070:02"
					"[rsa][message][id1]" => "00070:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00071" {
		# MESSAGE 00071
		# line in RSA: NSRP: { Unit | local unit= }<fld2> of VSD group <group> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP:[\s]+([\s]*Unit[\s]+|[\s]*local[\s]+unit=[\s]+)(?<fld2>[^\s]*)[\s]+of[\s]+VSD[\s]+group[\s]+(?<group>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-00071"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00071"
					"[rsa][message][id1]" => "00071"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00071:01
		# line in RSA: The local device <fld1> in the Virtual Security Device group <group> changed state 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The local device %{fld1} in the Virtual Security Device group %{group} changed state" }
				id => "message-00071:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00071:01"
					"[rsa][message][id1]" => "00071:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00072" {
		# MESSAGE 00072
		# line in RSA: NSRP: { Unit | local unit= }<fld2> of VSD group <group> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP:[\s]+([\s]*Unit[\s]+|[\s]*local[\s]+unit=[\s]+)(?<fld2>[^\s]*)[\s]+of[\s]+VSD[\s]+group[\s]+(?<group>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-00072"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00072"
					"[rsa][message][id1]" => "00072"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00072:01
		# line in RSA:  The local device <fld2> in the Virtual {Secruity|Security} Device group <group> changed state 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*The[\s]+local[\s]+device[\s]+(?<fld2>[^\s]*)[\s]+in[\s]+the[\s]+Virtual[\s]+(Secruity|Security)[\s]+Device[\s]+group[\s]+(?<group>[^\s]*)[\s]+changed[\s]+state[\s]+$" }
				id => "message-00072:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00072:01"
					"[rsa][message][id1]" => "00072:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00073" {
		# MESSAGE 00073
		# line in RSA: NSRP: { Unit | local unit= }<fld2> of VSD group <group> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP:[\s]+([\s]*Unit[\s]+|[\s]*local[\s]+unit=[\s]+)(?<fld2>[^\s]*)[\s]+of[\s]+VSD[\s]+group[\s]+(?<group>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-00073"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00073"
					"[rsa][message][id1]" => "00073"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00073:01
		# line in RSA:  The local device <fld2> in the Virtual {Secruity|Security} Device group <group> changed state 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*The[\s]+local[\s]+device[\s]+(?<fld2>[^\s]*)[\s]+in[\s]+the[\s]+Virtual[\s]+(Secruity|Security)[\s]+Device[\s]+group[\s]+(?<group>[^\s]*)[\s]+changed[\s]+state[\s]+$" }
				id => "message-00073:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00073:01"
					"[rsa][message][id1]" => "00073:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId710
	# line in RSA:  The local device <fld2> in the Virtual Security Device group <group> <info>
	else if [logstash][msgparser][id] == "msgParserId710" {
		dissect {
			mapping => { "message" => "The local device %{fld2} in the Virtual Security Device group %{group} %{info}" }
			id => "msgParserId710"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00075" {
		# MESSAGE 00075
		# line in RSA: NSRP: { Unit | local unit= } <fld2> of VSD group <group> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP:[\s]+([\s]*Unit[\s]+|[\s]*local[\s]+unit=[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+of[\s]+VSD[\s]+group[\s]+(?<group>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-00075"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00075"
					"[rsa][message][id1]" => "00075"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00075:02
		# line in RSA:  The local device <hardware_id> in the Virtual Security Device group <group> changed state from <event_state> to inoperable. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The local device %{hardware_id} in the Virtual Security Device group %{group} changed state from %{event_state} to inoperable. (%{fld1})" }
				id => "message-00075:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "local device in the Virtual Security Device group changed state to inoperable"
					"[event][id]" => "00075:02"
					"[rsa][message][id1]" => "00075:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00075:01
		# line in RSA:  The local device <hardware_id> in the Virtual Security Device group <group> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The local device %{hardware_id} in the Virtual Security Device group %{group} %{info}" }
				id => "message-00075:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00075:01"
					"[rsa][message][id1]" => "00075:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00076" {
		# MESSAGE 00076
		# line in RSA: The local device <fld2> in the Virtual Security Device group <group> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The local device %{fld2} in the Virtual Security Device group %{group} %{info}" }
				id => "message-00076"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00076"
					"[rsa][message][id1]" => "00076"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00076:01
		# line in RSA: NSRP: { Unit | local unit= }<fld2> of VSD group <group> send 2nd path request to unit=<fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP:[\s]+([\s]*Unit[\s]+|[\s]*local[\s]+unit=[\s]+)(?<fld2>[^\s]*)[\s]+of[\s]+VSD[\s]+group[\s]+(?<group>[^\s]*)[\s]+send[\s]+2nd[\s]+path[\s]+request[\s]+to[\s]+unit=(?<fld3>.*)$" }
				id => "message-00076:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00076:01"
					"[rsa][message][id1]" => "00076:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00077" {
		# MESSAGE 00077
		# line in RSA:  HA link disconnect. Begin to use second path of HA
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA link disconnect. Begin to use second path of HA" }
				id => "message-00077"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00077"
					"[rsa][message][id1]" => "00077"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00077:01
		# line in RSA: NSRP: { Unit | local unit= } <fld2> of VSD group <group> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NSRP:[\s]+([\s]*Unit[\s]+|[\s]*local[\s]+unit=[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+of[\s]+VSD[\s]+group[\s]+(?<group>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-00077:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00077:01"
					"[rsa][message][id1]" => "00077:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00077:02
		# line in RSA:  The local device <fld2> in the Virtual Security Device group <group> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The local device %{fld2} in the Virtual Security Device group %{group}" }
				id => "message-00077:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00077:02"
					"[rsa][message][id1]" => "00077:02"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId718
	# line in RSA: RTSYNC: NSRP route synchronization is <disposition>
	else if [logstash][msgparser][id] == "msgParserId718" {
		dissect {
			mapping => { "message" => "RTSYNC: NSRP route synchronization is %{disposition}" }
			id => "msgParserId718"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId719
	# line in RSA: { Failover | Recovery } to { primary | secondary } untrust interface occurred.
	else if [logstash][msgparser][id] == "msgParserId719" {
		grok {
			match => { "message" => "^([\s]*Failover[\s]+|[\s]*Recovery[\s]+)[\s]+to[\s]+([\s]*primary[\s]+|[\s]*secondary[\s]+)[\s]+untrust[\s]+interface[\s]+occurred\.$" }
			id => "msgParserId719"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId720
	# line in RSA: A new route cannot be added to the device because the maximum number of system route entries <fld2> has been exceeded
	else if [logstash][msgparser][id] == "msgParserId720" {
		dissect {
			mapping => { "message" => "A new route cannot be added to the device because the maximum number of system route entries %{fld2} has been exceeded" }
			id => "msgParserId720"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId721
	# line in RSA: A route <hostip>/<fld2> cannot be added to the virtual router <node> because the number of route entries in the virtual router exceeds the maximum number of routes <fld3> allowed
	else if [logstash][msgparser][id] == "msgParserId721" {
		dissect {
			mapping => { "message" => "A route %{hostip}/%{fld2} cannot be added to the virtual router %{node} because the number of route entries in the virtual router exceeds the maximum number of routes %{fld3} allowed" }
			id => "msgParserId721"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId722
	# line in RSA: <fld2> hello-packet flood from neighbor (ip = <hostip> router-id = <fld3>) on interface <interface> packet is dropped
	else if [logstash][msgparser][id] == "msgParserId722" {
		dissect {
			mapping => { "message" => "%{fld2} hello-packet flood from neighbor (ip = %{hostip} router-id = %{fld3}) on interface %{interface} packet is dropped" }
			id => "msgParserId722"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId723
	# line in RSA: <fld2> lsa flood on interface <interface> has dropped a packet.
	else if [logstash][msgparser][id] == "msgParserId723" {
		dissect {
			mapping => { "message" => "%{fld2} lsa flood on interface %{interface} has dropped a packet." }
			id => "msgParserId723"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00206" {
		# MESSAGE 00206
		# line in RSA: The total number of redistributed routes into { BGP | OSPF } in vrouter <node> exceeded system limit (<fld2>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+total[\s]+number[\s]+of[\s]+redistributed[\s]+routes[\s]+into[\s]+([\s]*BGP[\s]+|[\s]*OSPF[\s]+)[\s]+in[\s]+vrouter[\s]+(?<node>[^\s]*)[\s]+exceeded[\s]+system[\s]+limit[\s]+\((?<fld2>[^\)]*)\)$" }
				id => "message-00206"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00206"
					"[rsa][message][id1]" => "00206"
					"[event][categoryid]" => "1805010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00206:01
		# line in RSA: LSA flood in OSPF with router-id <fld2> on { interface | Interface } <interface> forced the interface to drop a packet.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^LSA[\s]+flood[\s]+in[\s]+OSPF[\s]+with[\s]+router\-id[\s]+(?<fld2>[^\s]*)[\s]+on[\s]+([\s]*interface[\s]+|[\s]*Interface[\s]+)[\s]+(?<interface>[^\s]*)[\s]+forced[\s]+the[\s]+interface[\s]+to[\s]+drop[\s]+a[\s]+packet\.$" }
				id => "message-00206:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00206:01"
					"[rsa][message][id1]" => "00206:01"
					"[event][categoryid]" => "1805000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00206:02
		# line in RSA: OSPF instance with router-id <fld3> received a Hello packet flood from neighbor (IP address <hostip>, router ID <fld2>) on { interface | Interface } <interface> forcing the interface to drop the packet.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^OSPF[\s]+instance[\s]+with[\s]+router\-id[\s]+(?<fld3>[^\s]*)[\s]+received[\s]+a[\s]+Hello[\s]+packet[\s]+flood[\s]+from[\s]+neighbor[\s]+\(IP[\s]+address[\s]+(?<hostip>[^,]*),[\s]+router[\s]+ID[\s]+(?<fld2>[^\)]*)\)[\s]+on[\s]+([\s]*interface[\s]+|[\s]*Interface[\s]+)[\s]+(?<interface>[^\s]*)[\s]+forcing[\s]+the[\s]+interface[\s]+to[\s]+drop[\s]+the[\s]+packet\.$" }
				id => "message-00206:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00206:02"
					"[rsa][message][id1]" => "00206:02"
					"[event][categoryid]" => "1805000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00206:03
		# line in RSA: Link State Advertisement Id <fld2>, router ID <fld3>, type <fld4> cannot be deleted from the real-time database in area <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Link State Advertisement Id %{fld2}, router ID %{fld3}, type %{fld4} cannot be deleted from the real-time database in area %{fld5}" }
				id => "message-00206:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00206:03"
					"[rsa][message][id1]" => "00206:03"
					"[event][categoryid]" => "1805000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00206:04
		# line in RSA: Reject second OSPF neighbor (<fld2>) on interface (<interface>) since it_s configured as point-to-point interface
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Reject second OSPF neighbor (%{fld2}) on interface (%{interface}) since it_s configured as point-to-point interface" }
				id => "message-00206:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00206:04"
					"[rsa][message][id1]" => "00206:04"
					"[event][categoryid]" => "1805000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00207" {
		# MESSAGE 00207
		# line in RSA: System wide RIP route limit exceeded, RIP route dropped.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System wide RIP route limit exceeded, RIP route dropped." }
				id => "message-00207"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00207"
					"[rsa][message][id1]" => "00207"
					"[event][categoryid]" => "1805000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00207:01
		# line in RSA:  <fld2> RIP routes dropped from last system wide RIP route limit exceed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2} RIP routes dropped from last system wide RIP route limit exceed." }
				id => "message-00207:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00207:01"
					"[rsa][message][id1]" => "00207:01"
					"[event][categoryid]" => "1805000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00207:02
		# line in RSA: RIP database size limit exceeded for <fld2>, RIP route dropped.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RIP database size limit exceeded for %{fld2}, RIP route dropped." }
				id => "message-00207:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00207:02"
					"[rsa][message][id1]" => "00207:02"
					"[event][categoryid]" => "1805000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00207:03
		# line in RSA: <fld2> RIP routes dropped from the last database size exceed in vr <fld3>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2} RIP routes dropped from the last database size exceed in vr %{fld3}." }
				id => "message-00207:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00207:03"
					"[rsa][message][id1]" => "00207:03"
					"[event][categoryid]" => "1805000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00257" {
		# MESSAGE 00257
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=outgoing action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> translated ip=<stransaddr> port=<stransport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=outgoing action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport} translated ip=%{stransaddr} port=%{stransport}" }
				id => "message-00257"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
				"direction" => "outgoing"
					"[event][id]" => "00257"
					"[rsa][message][id1]" => "00257"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:14
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=incoming action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> translated ip=<dtransaddr> port=<dtransport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=incoming action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport} translated ip=%{dtransaddr} port=%{dtransport}" }
				id => "message-00257:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
				"direction" => "incoming"
					"[event][id]" => "00257:14"
					"[rsa][message][id1]" => "00257:14"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:01
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=outgoing action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> translated ip=<stransaddr> port=<stransport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=outgoing action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport} translated ip=%{stransaddr} port=%{stransport}" }
				id => "message-00257:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
				"direction" => "outgoing"
					"[event][id]" => "00257:01"
					"[rsa][message][id1]" => "00257:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:15
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=incoming action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> translated ip=<dtransaddr> port=<dtransport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=incoming action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport} translated ip=%{dtransaddr} port=%{dtransport}" }
				id => "message-00257:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
				"direction" => "incoming"
					"[event][id]" => "00257:15"
					"[rsa][message][id1]" => "00257:15"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:02
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=<direction> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=%{direction} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-00257:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "00257:02"
					"[rsa][message][id1]" => "00257:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:03
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=<direction> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=%{direction} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-00257:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:03"
					"[rsa][message][id1]" => "00257:03"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:04
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> src-xlated ip=<stransaddr> port=<stransport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport} src-xlated ip=%{stransaddr} port=%{stransport}" }
				id => "message-00257:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "00257:04"
					"[rsa][message][id1]" => "00257:04"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:05
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> src-xlated ip=<stransaddr> port=<stransport> dst-xlated ip=<dtransaddr> port=<dtransport> session_id=<sessionid> reason=<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport} src-xlated ip=%{stransaddr} port=%{stransport} dst-xlated ip=%{dtransaddr} port=%{dtransport} session_id=%{sessionid} reason=%{result}" }
				id => "message-00257:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:05"
					"[rsa][message][id1]" => "00257:05"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:19
		# line in RSA: start_time={\"<fld2>\"| "<fld2>" } duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype> icmp code=<icmpcode> src-xlated ip=<stransaddr> dst-xlated ip=<dtransaddr> session_id=<sessionid> reason=<result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^start_time=(\\\"(?<fld2>[^\\]*)\\\"|[\s]*\"(?<fld2>[^\"]*)\"[\s]+)[\s]+duration=(?<duration>[^\s]*)[\s]+policy_id=(?<policy_id>[^\s]*)[\s]+service=(?<service>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src[\s]+zone=(?<src_zone>[^\s]*)[\s]+dst[\s]+zone=(?<dst_zone>[^\s]*)[\s]+action=(?<disposition>[^\s]*)[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+dst=(?<daddr>[^\s]*)[\s]+icmp[\s]+type=(?<icmptype>[^\s]*)[\s]+icmp[\s]+code=(?<icmpcode>[^\s]*)[\s]+src\-xlated[\s]+ip=(?<stransaddr>[^\s]*)[\s]+dst\-xlated[\s]+ip=(?<dtransaddr>[^\s]*)[\s]+session_id=(?<sessionid>[^\s]*)[\s]+reason=(?<result>.*)$" }
				id => "message-00257:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:19"
					"[rsa][message][id1]" => "00257:19"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:16
		# line in RSA: start_time={\"<fld2>\"| "<fld2>" } duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype> src-xlated ip=<stransaddr> dst-xlated ip=<dtransaddr> session_id=<sessionid> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^start_time=(\\\"(?<fld2>[^\\]*)\\\"|[\s]*\"(?<fld2>[^\"]*)\"[\s]+)[\s]+duration=(?<duration>[^\s]*)[\s]+policy_id=(?<policy_id>[^\s]*)[\s]+service=(?<service>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src[\s]+zone=(?<src_zone>[^\s]*)[\s]+dst[\s]+zone=(?<dst_zone>[^\s]*)[\s]+action=(?<disposition>[^\s]*)[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+dst=(?<daddr>[^\s]*)[\s]+icmp[\s]+type=(?<icmptype>[^\s]*)[\s]+src\-xlated[\s]+ip=(?<stransaddr>[^\s]*)[\s]+dst\-xlated[\s]+ip=(?<dtransaddr>[^\s]*)[\s]+session_id=(?<sessionid>[^\s]*)[\s]+$" }
				id => "message-00257:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:16"
					"[rsa][message][id1]" => "00257:16"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:17
		# line in RSA: start_time={\"<fld2>\"| "<fld2>" } duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> src-xlated ip=<stransaddr> port=<stransport> dst-xlated ip=<dtransaddr> port=<dtransport> session_id=<sessionid> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^start_time=(\\\"(?<fld2>[^\\]*)\\\"|[\s]*\"(?<fld2>[^\"]*)\"[\s]+)[\s]+duration=(?<duration>[^\s]*)[\s]+policy_id=(?<policy_id>[^\s]*)[\s]+service=(?<service>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src[\s]+zone=(?<src_zone>[^\s]*)[\s]+dst[\s]+zone=(?<dst_zone>[^\s]*)[\s]+action=(?<disposition>[^\s]*)[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+dst=(?<daddr>[^\s]*)[\s]+src_port=(?<sport>[^\s]*)[\s]+dst_port=(?<dport>[^\s]*)[\s]+src\-xlated[\s]+ip=(?<stransaddr>[^\s]*)[\s]+port=(?<stransport>[^\s]*)[\s]+dst\-xlated[\s]+ip=(?<dtransaddr>[^\s]*)[\s]+port=(?<dtransport>[^\s]*)[\s]+session_id=(?<sessionid>[^\s]*)[\s]+$" }
				id => "message-00257:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:17"
					"[rsa][message][id1]" => "00257:17"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:18
		# line in RSA: start_time={\"<fld2>\"| "<fld2>" } duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> src-xlated ip=<stransaddr> port=<stransport> session_id=<sessionid> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^start_time=(\\\"(?<fld2>[^\\]*)\\\"|[\s]*\"(?<fld2>[^\"]*)\"[\s]+)[\s]+duration=(?<duration>[^\s]*)[\s]+policy_id=(?<policy_id>[^\s]*)[\s]+service=(?<service>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src[\s]+zone=(?<src_zone>[^\s]*)[\s]+dst[\s]+zone=(?<dst_zone>[^\s]*)[\s]+action=(?<disposition>[^\s]*)[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+dst=(?<daddr>[^\s]*)[\s]+src_port=(?<sport>[^\s]*)[\s]+dst_port=(?<dport>[^\s]*)[\s]+src\-xlated[\s]+ip=(?<stransaddr>[^\s]*)[\s]+port=(?<stransport>[^\s]*)[\s]+session_id=(?<sessionid>[^\s]*)[\s]+$" }
				id => "message-00257:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:18"
					"[rsa][message][id1]" => "00257:18"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:06
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> {dst_port=<dport> session_id=<sessionid>|dst_port=<dport>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^start_time=\"(?<fld2>[^\"]*)\"[\s]+duration=(?<duration>[^\s]*)[\s]+policy_id=(?<policy_id>[^\s]*)[\s]+service=(?<service>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src[\s]+zone=(?<src_zone>[^\s]*)[\s]+dst[\s]+zone=(?<dst_zone>[^\s]*)[\s]+action=Deny[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+dst=(?<daddr>[^\s]*)[\s]+src_port=(?<sport>[^\s]*)[\s]+(dst_port=(?<dport>[^\s]*)[\s]+session_id=(?<sessionid>.*)|dst_port=(?<dport>.*))$" }
				id => "message-00257:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "00257:06"
					"[rsa][message][id1]" => "00257:06"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:07
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-00257:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:07"
					"[rsa][message][id1]" => "00257:07"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:08
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> tcp=<icmptype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} tcp=%{icmptype}" }
				id => "message-00257:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "00257:08"
					"[rsa][message][id1]" => "00257:08"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:09
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> {icmp type=<icmptype> icmp code=<icmpcode> session_id=<sessionid> reason=<result>|icmp type=<icmptype> session_id=<sessionid>|icmp type=<icmptype>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^start_time=\"(?<fld2>[^\"]*)\"[\s]+duration=(?<duration>[^\s]*)[\s]+policy_id=(?<policy_id>[^\s]*)[\s]+service=(?<service>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src[\s]+zone=(?<src_zone>[^\s]*)[\s]+dst[\s]+zone=(?<dst_zone>[^\s]*)[\s]+action=(?<disposition>[^\s]*)[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+dst=(?<daddr>[^\s]*)[\s]+(icmp[\s]+type=(?<icmptype>[^\s]*)[\s]+icmp[\s]+code=(?<icmpcode>[^\s]*)[\s]+session_id=(?<sessionid>[^\s]*)[\s]+reason=(?<result>.*)|icmp[\s]+type=(?<icmptype>[^\s]*)[\s]+session_id=(?<sessionid>.*)|icmp[\s]+type=(?<icmptype>.*))$" }
				id => "message-00257:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:09"
					"[rsa][message][id1]" => "00257:09"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:10
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> {dst=<daddr> session_id=<sessionid>|dst=<daddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^start_time=\"(?<fld2>[^\"]*)\"[\s]+duration=(?<duration>[^\s]*)[\s]+policy_id=(?<policy_id>[^\s]*)[\s]+service=(?<service>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src[\s]+zone=(?<src_zone>[^\s]*)[\s]+dst[\s]+zone=(?<dst_zone>[^\s]*)[\s]+action=Deny[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+(dst=(?<daddr>[^\s]*)[\s]+session_id=(?<sessionid>.*)|dst=(?<daddr>.*))$" }
				id => "message-00257:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "00257:10"
					"[rsa][message][id1]" => "00257:10"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:11
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> {dst=<daddr> session_id=<sessionid> reason=<result>|dst=<daddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^start_time=\"(?<fld2>[^\"]*)\"[\s]+duration=(?<duration>[^\s]*)[\s]+policy_id=(?<policy_id>[^\s]*)[\s]+service=(?<service>[^\s]*)[\s]+proto=(?<protocol>[^\s]*)[\s]+src[\s]+zone=(?<src_zone>[^\s]*)[\s]+dst[\s]+zone=(?<dst_zone>[^\s]*)[\s]+action=(?<disposition>[^\s]*)[\s]+sent=(?<sbytes>[^\s]*)[\s]+rcvd=(?<rbytes>[^\s]*)[\s]+src=(?<saddr>[^\s]*)[\s]+(dst=(?<daddr>[^\s]*)[\s]+session_id=(?<sessionid>[^\s]*)[\s]+reason=(?<result>.*)|dst=(?<daddr>.*))$" }
				id => "message-00257:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:11"
					"[rsa][message][id1]" => "00257:11"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:12
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> type=<fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} type=%{fld3}" }
				id => "message-00257:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "00257:12"
					"[rsa][message][id1]" => "00257:12"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00257:13
		# line in RSA:  start_time="<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}" }
				id => "message-00257:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00257:13"
					"[rsa][message][id1]" => "00257:13"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00259" {
		# MESSAGE 00259
		# line in RSA: { Admin | Vsys admin } user <username> has logged on via { the console | Telnet | SSH } from <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Admin[\s]+|[\s]*Vsys[\s]+admin[\s]+)[\s]+user[\s]+(?<username>[^\s]*)[\s]+has[\s]+logged[\s]+on[\s]+via[\s]+([\s]*the[\s]+console[\s]+|[\s]*Telnet[\s]+|[\s]*SSH[\s]+)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00259"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00259"
					"[rsa][message][id1]" => "00259"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00259:07
		# line in RSA: { Admin | Vsys admin } user <administrator> has logged out via <logon_type> from <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Admin[\s]+|[\s]*Vsys[\s]+admin[\s]+)[\s]+user[\s]+(?<administrator>[^\s]*)[\s]+has[\s]+logged[\s]+out[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00259:07"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00259:07"
					"[rsa][message][id1]" => "00259:07"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00259:01
		# line in RSA: Management session via <logon_type> from <saddr>:<sport> for [vsys] admin <administrator> has timed out
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Management session via %{logon_type} from %{saddr}:%{sport} for [vsys] admin %{administrator} has timed out" }
				id => "message-00259:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00259:01"
					"[rsa][message][id1]" => "00259:01"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00259:02
		# line in RSA: Management session via <logon_type> for [ vsys ] admin <administrator> has timed out
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Management session via %{logon_type} for [ vsys ] admin %{administrator} has timed out" }
				id => "message-00259:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00259:02"
					"[rsa][message][id1]" => "00259:02"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00259:03
		# line in RSA: Login attempt to system by admin <administrator> via the <logon_type> has failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login attempt to system by admin %{administrator} via the %{logon_type} has failed" }
				id => "message-00259:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00259:03"
					"[rsa][message][id1]" => "00259:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00259:04
		# line in RSA: Login attempt to system by admin <administrator> via <logon_type> from <saddr>:<sport> has failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login attempt to system by admin %{administrator} via %{logon_type} from %{saddr}:%{sport} has failed" }
				id => "message-00259:04"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00259:04"
					"[rsa][message][id1]" => "00259:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00259:05
		# line in RSA: Admin user <administrator> has been forced to log out of the { SSH | Telnet | Web } session on host <daddr>:<dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Admin[\s]+user[\s]+(?<administrator>[^\s]*)[\s]+has[\s]+been[\s]+forced[\s]+to[\s]+log[\s]+out[\s]+of[\s]+the[\s]+([\s]*SSH[\s]+|[\s]*Telnet[\s]+|[\s]*Web[\s]+)[\s]+session[\s]+on[\s]+host[\s]+(?<daddr>[^:]*):(?<dport>.*)$" }
				id => "message-00259:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00259:05"
					"[rsa][message][id1]" => "00259:05"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00259:06
		# line in RSA: Admin user <administrator> has been forced to log out of the serial console session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user %{administrator} has been forced to log out of the serial console session." }
				id => "message-00259:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00259:06"
					"[rsa][message][id1]" => "00259:06"
					"[event][categoryid]" => "1401050200"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId761
	# line in RSA: Admin user <administrator> has been rejected via the <logon_type> server at <hostip>
	else if [logstash][msgparser][id] == "msgParserId761" {
		dissect {
			mapping => { "message" => "Admin user %{administrator} has been rejected via the %{logon_type} server at %{hostip}" }
			id => "msgParserId761"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId762
	# line in RSA: Admin user <administrator> has been accepted via the <logon_type> server at <hostip>
	else if [logstash][msgparser][id] == "msgParserId762" {
		dissect {
			mapping => { "message" => "Admin user %{administrator} has been accepted via the %{logon_type} server at %{hostip}" }
			id => "msgParserId762"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId763
	# line in RSA: { ActiveX control | JAVA applet | EXE file | ZIP file } has been detected! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> and arriving at interface <dinterface> in zone <dst_zone>. <info>
	else if [logstash][msgparser][id] == "msgParserId763" {
		grok {
			match => { "message" => "^([\s]*ActiveX[\s]+control[\s]+|[\s]*JAVA[\s]+applet[\s]+|[\s]*EXE[\s]+file[\s]+|[\s]*ZIP[\s]+file[\s]+)[\s]+has[\s]+been[\s]+detected![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+using[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+and[\s]+arriving[\s]+at[\s]+interface[\s]+(?<dinterface>[^\s]*)[\s]+in[\s]+zone[\s]+(?<dst_zone>[^\.]*)\.[\s]+(?<info>.*)$" }
			id => "msgParserId763"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId764
	# line in RSA: <signame>! From <saddr> to <daddr>, proto <protocol> (zone <zone>, int <interface>). <info>
	else if [logstash][msgparser][id] == "msgParserId764" {
		dissect {
			mapping => { "message" => "%{signame}! From %{saddr} to %{daddr}, proto %{protocol} (zone %{zone}, int %{interface}). %{info}" }
			id => "msgParserId764"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00402" {
		# MESSAGE 00402
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone>, int <interface>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport}, proto %{protocol} (zone %{zone}, int %{interface}). %{info}" }
				id => "message-00402"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00402"
					"[rsa][message][id1]" => "00402"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00402:01
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, and arriving at {interface|Interface} <interface> in zone <zone>. <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+using[\s]+protocol[\s]+(?<protocol>[^,]*),[\s]+and[\s]+arriving[\s]+at[\s]+(interface|Interface)[\s]+(?<interface>[^\s]*)[\s]+in[\s]+zone[\s]+(?<zone>[^\.]*)\.[\s]+(?<info>.*)$" }
				id => "message-00402:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00402:01"
					"[rsa][message][id1]" => "00402:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId767
	# line in RSA: <signame>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone>, int <interface>). <info>
	else if [logstash][msgparser][id] == "msgParserId767" {
		dissect {
			mapping => { "message" => "%{signame}! From %{saddr}:%{sport} to %{daddr}:%{dport}, proto %{protocol} (zone %{zone}, int %{interface}). %{info}" }
			id => "msgParserId767"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId768
	# line in RSA: <signame>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone>, int <interface>). <info>
	else if [logstash][msgparser][id] == "msgParserId768" {
		dissect {
			mapping => { "message" => "%{signame}! From %{saddr}:%{sport} to %{daddr}:%{dport}, proto %{protocol} (zone %{zone}, int %{interface}). %{info}" }
			id => "msgParserId768"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId769
	# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times.
	else if [logstash][msgparser][id] == "msgParserId769" {
		grok {
			match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.$" }
			id => "msgParserId769"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId770
	# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times.
	else if [logstash][msgparser][id] == "msgParserId770" {
		grok {
			match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.$" }
			id => "msgParserId770"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00410" {
		# MESSAGE 00410
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.$" }
				id => "message-00410"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00410"
					"[rsa][message][id1]" => "00410"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00410:01
		# line in RSA: <signame> From <saddr> to <daddr>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times." }
				id => "message-00410:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00410:01"
					"[rsa][message][id1]" => "00410:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId772
	# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, proto TCP (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times.
	else if [logstash][msgparser][id] == "msgParserId772" {
		grok {
			match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+TCP[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.$" }
			id => "msgParserId772"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00413" {
		# MESSAGE 00413
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> and arriving at {interface|Interface} <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+using[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+and[\s]+arriving[\s]+at[\s]+(interface|Interface)[\s]+(?<interface>[^\.]*)\.(?<space>[^T]*)The[\s]+attack[\s]+occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times$" }
				id => "message-00413"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00413"
					"[rsa][message][id1]" => "00413"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00413:01
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol>(zone <group> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\(]*)\(zone[\s]+(?<group>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00413:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00413:01"
					"[rsa][message][id1]" => "00413:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00413:02
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, on zone <zone> interface <interface>.The attack occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, on zone %{zone} interface %{interface}.The attack occurred %{dclass_counter1} times. (%{fld1})" }
				id => "message-00413:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00413:02"
					"[rsa][message][id1]" => "00413:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00414" {
		# MESSAGE 00414
		# line in RSA: <signame> From  <saddr> to  <daddr>, proto <protocol> (zone <zone>, int <interface>). Occurred <dclass_counter1> times. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From  %{saddr} to  %{daddr}, proto %{protocol} (zone %{zone}, int %{interface}). Occurred %{dclass_counter1} times. (%{fld1})" }
				id => "message-00414"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00414"
					"[rsa][message][id1]" => "00414"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00414:01
		# line in RSA: <signame> From  <saddr> to  <daddr>, using protocol <protocol>, on zone <zone> interface <interface>.The attack occurred <dclass_counter1> times. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From  %{saddr} to  %{daddr}, using protocol %{protocol}, on zone %{zone} interface %{interface}.The attack occurred %{dclass_counter1} times. (%{fld1})" }
				id => "message-00414:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00414:01"
					"[rsa][message][id1]" => "00414:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId778
	# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> and arriving at interface <interface>.<space>The attack occurred <dclass_counter1> times
	else if [logstash][msgparser][id] == "msgParserId778" {
		dissect {
			mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} and arriving at interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
			id => "msgParserId778"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId779
	# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times.
	else if [logstash][msgparser][id] == "msgParserId779" {
		grok {
			match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.$" }
			id => "msgParserId779"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00429" {
		# MESSAGE 00429
		# line in RSA:  <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00429"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00429"
					"[rsa][message][id1]" => "00429"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00429:01
		# line in RSA:  <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00429:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00429:01"
					"[rsa][message][id1]" => "00429:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00430" {
		# MESSAGE 00430
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>{Occurred <dclass_counter1> times. (<fld1>) |Occurred <dclass_counter1> times.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^OO]*)(Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)[\s]+|Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.)$" }
				id => "message-00430"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00430"
					"[rsa][message][id1]" => "00430"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00430:01
		# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>{Occurred <dclass_counter1> times. (<fld1>) |Occurred <dclass_counter1> times.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^OO]*)(Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)[\s]+|Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.)$" }
				id => "message-00430:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00430:01"
					"[rsa][message][id1]" => "00430:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId784
	# line in RSA: <obj_type> <disposition>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId784" {
		grok {
			match => { "message" => "^(?<obj_type>[^\s]*)[\s]+(?<disposition>[^!]*)![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
			id => "msgParserId784"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId785
	# line in RSA: <signame> <disposition>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId785" {
		grok {
			match => { "message" => "^(?<signame>[^\s]*)[\s]+(?<disposition>[^!]*)![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
			id => "msgParserId785"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId786
	# line in RSA:   <signame> <disposition>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>). Occurred <dclass_counter1> times. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId786" {
		grok {
			match => { "message" => "^[\s]*(?<signame>[^\s]*)[\s]+(?<disposition>[^!]*)![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.[\s]+Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
			id => "msgParserId786"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "00435" {
		# MESSAGE 00435
		# line in RSA: <signame> From <saddr> to <daddr>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times." }
				id => "message-00435"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00435"
					"[rsa][message][id1]" => "00435"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00435:01
		# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.$" }
				id => "message-00435:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00435:01"
					"[rsa][message][id1]" => "00435:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00436" {
		# MESSAGE 00436
		# line in RSA: <signame> From <saddr> to <daddr>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr} to %{daddr}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times." }
				id => "message-00436"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00436"
					"[rsa][message][id1]" => "00436"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00436:01
		# line in RSA: <signame> From <saddr> to <daddr>, proto <protocol> (zone { <zone>, | <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^\s]*)[\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+([\s]*(?<zone>[^,]*),[\s]+|[\s]*(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00436:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00436:01"
					"[rsa][message][id1]" => "00436:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00437" {
		# MESSAGE 00437
		# line in RSA: <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00437"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00437"
					"[rsa][message][id1]" => "00437"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00437:01
		# line in RSA: <signame>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone { <zone>, | <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^!]*)![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+([\s]*(?<zone>[^,]*),[\s]+|[\s]*(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00437:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00437:01"
					"[rsa][message][id1]" => "00437:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00437:02
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, on zone <zone> interface <interface>.The attack occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, on zone %{zone} interface %{interface}.The attack occurred %{dclass_counter1} times. (%{fld1})" }
				id => "message-00437:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00437:02"
					"[rsa][message][id1]" => "00437:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00438" {
		# MESSAGE 00438
		# line in RSA: <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport> using protocol <protocol> and arriving at interface <interface>.<space>The attack occurred <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport} using protocol %{protocol} and arriving at interface %{interface}.%{space}The attack occurred %{dclass_counter1} times" }
				id => "message-00438"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00438"
					"[rsa][message][id1]" => "00438"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00438:01
		# line in RSA: <signame> From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, on zone <zone> interface <interface>.<space>The attack occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, on zone %{zone} interface %{interface}.%{space}The attack occurred %{dclass_counter1} times." }
				id => "message-00438:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00438:01"
					"[rsa][message][id1]" => "00438:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00438:02
		# line in RSA: <signame>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone { <zone>, | <zone> } int <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^!]*)![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+([\s]*(?<zone>[^,]*),[\s]+|[\s]*(?<zone>[^\s]*)[\s]+)[\s]+int[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00438:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00438:02"
					"[rsa][message][id1]" => "00438:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00440" {
		# MESSAGE 00440
		# line in RSA:   <signame> has been detected! From <saddr> to <daddr>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr} to %{daddr}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times. (%{fld1})" }
				id => "message-00440"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00440"
					"[rsa][message][id1]" => "00440"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00440:02
		# line in RSA: <signame> has been detected! From <saddr>:<sport> to <daddr>:<dport>, using protocol <protocol>, and arriving at interface <dinterface> in zone <dst_zone>.<space>The attack occurred <dclass_counter1> times.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected! From %{saddr}:%{sport} to %{daddr}:%{dport}, using protocol %{protocol}, and arriving at interface %{dinterface} in zone %{dst_zone}.%{space}The attack occurred %{dclass_counter1} times." }
				id => "message-00440:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00440:02"
					"[rsa][message][id1]" => "00440:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00440:01
		# line in RSA: <signame>! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol> (zone <zone> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<signame>[^!]*)![\s]+From[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^:]*):(?<dport>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<zone>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00440:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00440:01"
					"[rsa][message][id1]" => "00440:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00440:03
		# line in RSA: Fragmented traffic! From <saddr> to <daddr>, proto <protocol> (zone <group> { , int | int } <interface>).<space>Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Fragmented[\s]+traffic![\s]+From[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^,]*),[\s]+proto[\s]+(?<protocol>[^\s]*)[\s]+\(zone[\s]+(?<group>[^\s]*)[\s]+([\s]*,[\s]+int[\s]+|[\s]*int[\s]+)[\s]+(?<interface>[^\)]*)\)\.(?<space>[^O]*)Occurred[\s]+(?<dclass_counter1>[^\s]*)[\s]+times\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00440:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00440:03"
					"[rsa][message][id1]" => "00440:03"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId800
	# line in RSA: <signame> id=<fld2>! From <saddr> to <daddr>, proto <protocol> (zone <zone>). Occurred <dclass_counter1> times. (<fld1>) 
	else if [logstash][msgparser][id] == "msgParserId800" {
		dissect {
			mapping => { "message" => "%{signame} id=%{fld2}! From %{saddr} to %{daddr}, proto %{protocol} (zone %{zone}). Occurred %{dclass_counter1} times. (%{fld1})" }
			id => "msgParserId800"
			add_field => {
				"severity" => "%{hseverity}"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId801
	# line in RSA: <signame> From <saddr> to zone <zone>, proto <protocol> (int <interface>). Occurred <dclass_counter1> times. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId801" {
		dissect {
			mapping => { "message" => "%{signame} From %{saddr} to zone %{zone}, proto %{protocol} (int %{interface}). Occurred %{dclass_counter1} times. (%{fld1})" }
			id => "msgParserId801"
			add_field => {
				"severity" => "%{hseverity}"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "00511" {
		# MESSAGE 00511
		# line in RSA: admin <administrator> issued command <fld2> to redirect output.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "admin %{administrator} issued command %{fld2} to redirect output." }
				id => "message-00511"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511"
					"[rsa][message][id1]" => "00511"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00511:01
		# line in RSA: All System Config saved by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^All[\s]+System[\s]+Config[\s]+saved[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:01"
					"[rsa][message][id1]" => "00511:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:02
		# line in RSA: All logged events or alarms are cleared by admin <administrator>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "All logged events or alarms are cleared by admin %{administrator}." }
				id => "message-00511:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:02"
					"[rsa][message][id1]" => "00511:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00511:03
		# line in RSA: Get new software from flash to slot (file: <fld2>) by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Get[\s]+new[\s]+software[\s]+from[\s]+flash[\s]+to[\s]+slot[\s]+\(file:[\s]+(?<fld2>[^\)]*)\)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:03"
					"[rsa][message][id1]" => "00511:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:04
		# line in RSA: Get new software from <hostip> (file: <fld2>) to slot (file: <fld3>) by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Get[\s]+new[\s]+software[\s]+from[\s]+(?<hostip>[^\s]*)[\s]+\(file:[\s]+(?<fld2>[^\)]*)\)[\s]+to[\s]+slot[\s]+\(file:[\s]+(?<fld3>[^\)]*)\)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:04"
					"[rsa][message][id1]" => "00511:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:05
		# line in RSA: Get new software to <hostip> (file: <fld2>) by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Get[\s]+new[\s]+software[\s]+to[\s]+(?<hostip>[^\s]*)[\s]+\(file:[\s]+(?<fld2>[^\)]*)\)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:05"
					"[rsa][message][id1]" => "00511:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:06
		# line in RSA: Log setting is modified by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Log[\s]+setting[\s]+is[\s]+modified[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:06"
					"[rsa][message][id1]" => "00511:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:07
		# line in RSA: Save configuration to <hostip> (file: <fld2>) by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Save[\s]+configuration[\s]+to[\s]+(?<hostip>[^\s]*)[\s]+\(file:[\s]+(?<fld2>[^\)]*)\)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:07"
					"[rsa][message][id1]" => "00511:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:08
		# line in RSA: Save new software from slot (file: <fld2>) to flash by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Save[\s]+new[\s]+software[\s]+from[\s]+slot[\s]+\(file:[\s]+(?<fld2>[^\)]*)\)[\s]+to[\s]+flash[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:08"
					"[rsa][message][id1]" => "00511:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:09
		# line in RSA: Save new software from <hostip> (file: <result>) to flash by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Save[\s]+new[\s]+software[\s]+from[\s]+(?<hostip>[^\s]*)[\s]+\(file:[\s]+(?<result>[^\)]*)\)[\s]+to[\s]+flash[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:09"
					"[rsa][message][id1]" => "00511:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:10
		# line in RSA: System Config from flash to slot - <fld2> by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+Config[\s]+from[\s]+flash[\s]+to[\s]+slot[\s]+\-[\s]+(?<fld2>[^\s]*)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:10"
					"[rsa][message][id1]" => "00511:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:11
		# line in RSA: System Config load from <hostip> (file <fld2>) to slot - <fld3> by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+Config[\s]+load[\s]+from[\s]+(?<hostip>[^\s]*)[\s]+\(file[\s]+(?<fld2>[^\)]*)\)[\s]+to[\s]+slot[\s]+\-[\s]+(?<fld3>[^\s]*)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:11"
					"[rsa][message][id1]" => "00511:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:12
		# line in RSA: System Config load from <hostip> (file <fld2>) by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+Config[\s]+load[\s]+from[\s]+(?<hostip>[^\s]*)[\s]+\(file[\s]+(?<fld2>[^\)]*)\)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:12"
					"[rsa][message][id1]" => "00511:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:13
		# line in RSA: The system configuration was loaded from the slot by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+system[\s]+configuration[\s]+was[\s]+loaded[\s]+from[\s]+the[\s]+slot[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00511:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:13"
					"[rsa][message][id1]" => "00511:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00511:14
		# line in RSA: FIPS: Attempt to set RADIUS shared secret with invalid length <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FIPS: Attempt to set RADIUS shared secret with invalid length %{fld2}" }
				id => "message-00511:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00511:14"
					"[rsa][message][id1]" => "00511:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId817
	# line in RSA: The physical state of { the interface | the Interface | interface } <interface> has changed to {<result>. (<fld1>)|<result>}
	else if [logstash][msgparser][id] == "msgParserId817" {
		grok {
			match => { "message" => "^The[\s]+physical[\s]+state[\s]+of[\s]+([\s]*the[\s]+interface[\s]+|[\s]*the[\s]+Interface[\s]+|[\s]*interface[\s]+)[\s]+(?<interface>[^\s]*)[\s]+has[\s]+changed[\s]+to[\s]+((?<result>[^\.]*)\.[\s]+\((?<fld1>[^\)]*)\)|(?<result>.*))$" }
			id => "msgParserId817"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "00515" {
		# MESSAGE 00515
		# line in RSA: { Vsys Admin | Admin } <administrator> has logged on via the <logon_type> ( {HTTP | HTTPS} ) to port <interface> from <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Vsys[\s]+Admin[\s]+|[\s]*Admin[\s]+)[\s]+(?<administrator>[^\s]*)[\s]+has[\s]+logged[\s]+on[\s]+via[\s]+the[\s]+(?<logon_type>[^\s]*)[\s]+\([\s]+(HTTP[\s]+|[\s]*HTTPS)[\s]+\)[\s]+to[\s]+port[\s]+(?<interface>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00515"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515"
					"[rsa][message][id1]" => "00515"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:01
		# line in RSA: Login attempt to system by admin <administrator> via { the <logon_type> | <logon_type> from <saddr>:<sport> } has failed <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Login[\s]+attempt[\s]+to[\s]+system[\s]+by[\s]+admin[\s]+(?<administrator>[^\s]*)[\s]+via[\s]+([\s]*the[\s]+(?<logon_type>[^\s]*)[\s]+|[\s]*(?<logon_type>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+)[\s]+has[\s]+failed[\s]+(?<fld2>.*)$" }
				id => "message-00515:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"disposition" => "failed"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00515:01"
					"[rsa][message][id1]" => "00515:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:02
		# line in RSA: Management session via { the <logon_type> | <logon_type> from <saddr>:<sport> } for { [vsys] admin | vsys admin | admin } <administrator> has timed out
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Management[\s]+session[\s]+via[\s]+([\s]*the[\s]+(?<logon_type>[^\s]*)[\s]+|[\s]*(?<logon_type>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+)[\s]+for[\s]+([\s]*\[vsys\][\s]+admin[\s]+|[\s]*vsys[\s]+admin[\s]+|[\s]*admin[\s]+)[\s]+(?<administrator>[^\s]*)[\s]+has[\s]+timed[\s]+out$" }
				id => "message-00515:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:02"
					"[rsa][message][id1]" => "00515:02"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:04
		# line in RSA: { [Vsys] | Vsys } Admin <administrator> has logged { on | out } via {<logon_type> from <saddr>:<sport>|<logon_type>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*\[Vsys\][\s]+|[\s]*Vsys[\s]+)[\s]+Admin[\s]+(?<administrator>[^\s]*)[\s]+has[\s]+logged[\s]+([\s]*on[\s]+|[\s]*out[\s]+)[\s]+via[\s]+((?<logon_type>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*)|(?<logon_type>.*))$" }
				id => "message-00515:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:04"
					"[rsa][message][id1]" => "00515:04"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:06
		# line in RSA: Admin User <administrator> has logged on via <logon_type> from <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin User %{administrator} has logged on via %{logon_type} from %{saddr}:%{sport}" }
				id => "message-00515:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:06"
					"[rsa][message][id1]" => "00515:06"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:05
		# line in RSA:  { Admin user | Admin } <administrator> has logged { on | out } via { the <logon_type> |<logon_type> from <saddr>:<sport> (<fld2>) |<logon_type> from <saddr>:<sport> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Admin[\s]+user[\s]+|[\s]*Admin[\s]+)[\s]+(?<administrator>[^\s]*)[\s]+has[\s]+logged[\s]+([\s]*on[\s]+|[\s]*out[\s]+)[\s]+via[\s]+([\s]*the[\s]+(?<logon_type>[^\s]*)[\s]+|(?<logon_type>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)[\s]+|(?<logon_type>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+)$" }
				id => "message-00515:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:05"
					"[rsa][message][id1]" => "00515:05"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:07
		# line in RSA:  Admin user <administrator> login attempt for <logon_type>(http) management (port <network_port>) from <saddr>:<sport> <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user %{administrator} login attempt for %{logon_type}(http) management (port %{network_port}) from %{saddr}:%{sport} %{disposition}" }
				id => "message-00515:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:07"
					"[rsa][message][id1]" => "00515:07"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:08
		# line in RSA:  <fld2> Admin User "<administrator>" logged in for { <logon_type>(http) | <logon_type>(https) } management (port <network_port>) from <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld2>[^\s]*)[\s]+Admin[\s]+User[\s]+\"(?<administrator>[^\"]*)\"[\s]+logged[\s]+in[\s]+for[\s]+([\s]*(?<logon_type>[^\(]*)\(http\)[\s]+|[\s]*(?<logon_type>[^\(]*)\(https\)[\s]+)[\s]+management[\s]+\(port[\s]+(?<network_port>[^\)]*)\)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00515:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:08"
					"[rsa][message][id1]" => "00515:08"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:09
		# line in RSA:  User <username> telnet management session from (<saddr>:<sport>) timed out
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} telnet management session from (%{saddr}:%{sport}) timed out" }
				id => "message-00515:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:09"
					"[rsa][message][id1]" => "00515:09"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:10
		# line in RSA:  User <username> logged out of telnet session from <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} logged out of telnet session from %{saddr}:%{sport}" }
				id => "message-00515:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:10"
					"[rsa][message][id1]" => "00515:10"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:11
		# line in RSA: The session limit threshold has been set to <trigger_val> on zone <zone>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The session limit threshold has been set to %{trigger_val} on zone %{zone}." }
				id => "message-00515:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:11"
					"[rsa][message][id1]" => "00515:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:12
		# line in RSA: [ Vsys ] Admin User "<administrator>" logged in for Web( { https | http } ) management (port <network_port>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^\[[\s]+Vsys[\s]+\][\s]+Admin[\s]+User[\s]+\"(?<administrator>[^\"]*)\"[\s]+logged[\s]+in[\s]+for[\s]+Web\([\s]+([\s]*https[\s]+|[\s]*http[\s]+)[\s]+\)[\s]+management[\s]+\(port[\s]+(?<network_port>[^\)]*)\)$" }
				id => "message-00515:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:12"
					"[rsa][message][id1]" => "00515:12"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:13
		# line in RSA: { Vsys admin | Admin } user <administrator> has logged { on | out } via { the <logon_type> | <logon_type> from <saddr>:<sport>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Vsys[\s]+admin[\s]+|[\s]*Admin[\s]+)[\s]+user[\s]+(?<administrator>[^\s]*)[\s]+has[\s]+logged[\s]+([\s]*on[\s]+|[\s]*out[\s]+)[\s]+via[\s]+([\s]*the[\s]+(?<logon_type>[^\s]*)[\s]+|[\s]*(?<logon_type>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*))$" }
				id => "message-00515:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:13"
					"[rsa][message][id1]" => "00515:13"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:14
		# line in RSA: {Admin user <administrator>|<username> <fld1>} has been forced to log { on | out } of the { serial <logon_type> session. |<logon_type> session on host <hostip>:<network_port> (<event_time>)|<logon_type> session on host <hostip>:<network_port>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Admin[\s]+user[\s]+(?<administrator>[^\s]*)|(?<username>[^\s]*)[\s]+(?<fld1>[^\s]*))[\s]+has[\s]+been[\s]+forced[\s]+to[\s]+log[\s]+([\s]*on[\s]+|[\s]*out[\s]+)[\s]+of[\s]+the[\s]+([\s]*serial[\s]+(?<logon_type>[^\s]*)[\s]+session\.[\s]+|(?<logon_type>[^\s]*)[\s]+session[\s]+on[\s]+host[\s]+(?<hostip>[^:]*):(?<network_port>[^\s]*)[\s]+\((?<event_time>[^\)]*)\)|(?<logon_type>[^\s]*)[\s]+session[\s]+on[\s]+host[\s]+(?<hostip>[^:]*):(?<network_port>.*))$" }
				id => "message-00515:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:14"
					"[rsa][message][id1]" => "00515:14"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:15
		# line in RSA: <fld2>: Admin User <administrator> has logged { on | out } via { the <logon_type> | <logon_type> from <saddr>:<sport> } (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^:]*):[\s]+Admin[\s]+User[\s]+(?<administrator>[^\s]*)[\s]+has[\s]+logged[\s]+([\s]*on[\s]+|[\s]*out[\s]+)[\s]+via[\s]+([\s]*the[\s]+(?<logon_type>[^\s]*)[\s]+|[\s]*(?<logon_type>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00515:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:15"
					"[rsa][message][id1]" => "00515:15"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00515:16
		# line in RSA: {<fld2>: Admin | Admin } user <administrator> attempt access to <url> illegal from <logon_type>({ https | http }) management (port <network_port>) from <saddr>:<sport>. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<fld2>[^:]*):[\s]+Admin[\s]+|[\s]*Admin[\s]+)[\s]+user[\s]+(?<administrator>[^\s]*)[\s]+attempt[\s]+access[\s]+to[\s]+(?<url>[^\s]*)[\s]+illegal[\s]+from[\s]+(?<logon_type>[^\(]*)\(([\s]*https[\s]+|[\s]*http[\s]+)\)[\s]+management[\s]+\(port[\s]+(?<network_port>[^\)]*)\)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>[^\.]*)\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00515:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:16"
					"[rsa][message][id1]" => "00515:16"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00515:17
		# line in RSA: Admin user "<administrator>" logged out for <logon_type>({https | http }) management (port <network_port>) from <saddr>:<sport> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Admin[\s]+user[\s]+\"(?<administrator>[^\"]*)\"[\s]+logged[\s]+out[\s]+for[\s]+(?<logon_type>[^\(]*)\((https[\s]+|[\s]*http[\s]+)\)[\s]+management[\s]+\(port[\s]+(?<network_port>[^\)]*)\)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+$" }
				id => "message-00515:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:17"
					"[rsa][message][id1]" => "00515:17"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00515:18
		# line in RSA: Admin user <administrator> login attempt for <logon_type>(https) management (port <network_port>) from <saddr>:<sport> <disposition>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user %{administrator} login attempt for %{logon_type}(https) management (port %{network_port}) from %{saddr}:%{sport} %{disposition}. (%{fld1})" }
				id => "message-00515:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:18"
					"[rsa][message][id1]" => "00515:18"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00515:19
		# line in RSA: Vsys admin user <administrator> logged on via {<logon_type> from remote IP address <saddr> using port <sport>|the console}. (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Vsys[\s]+admin[\s]+user[\s]+(?<administrator>[^\s]*)[\s]+logged[\s]+on[\s]+via[\s]+((?<logon_type>[^\s]*)[\s]+from[\s]+remote[\s]+IP[\s]+address[\s]+(?<saddr>[^\s]*)[\s]+using[\s]+port[\s]+(?<sport>[^\.]*)|the[\s]+console)\.[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00515:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:19"
					"[rsa][message][id1]" => "00515:19"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00515:20
		# line in RSA: netscreen: Management session via SCS from <saddr>:<sport> for admin netscreen has timed out (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "netscreen: Management session via SCS from %{saddr}:%{sport} for admin netscreen has timed out (%{fld1})" }
				id => "message-00515:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00515:20"
					"[rsa][message][id1]" => "00515:20"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00518" {
		# MESSAGE 00518
		# line in RSA: Admin user <administrator><fld1>at <saddr> has been <disposition> via the <logon_type> server at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user %{administrator}%{fld1}at %{saddr} has been %{disposition} via the %{logon_type} server at %{hostip}" }
				id => "message-00518"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518"
					"[rsa][message][id1]" => "00518"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:17
		# line in RSA: Admin user <administrator> has been <disposition> via the <logon_type> server at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user %{administrator} has been %{disposition} via the %{logon_type} server at %{hostip}" }
				id => "message-00518:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:17"
					"[rsa][message][id1]" => "00518:17"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:01
		# line in RSA: Local authentication for WebAuth user <username> was <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Local authentication for WebAuth user %{username} was %{disposition}" }
				id => "message-00518:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:01"
					"[rsa][message][id1]" => "00518:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:02
		# line in RSA: Local authentication for user <username> was <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Local authentication for user %{username} was %{disposition}" }
				id => "message-00518:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:02"
					"[rsa][message][id1]" => "00518:02"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:03
		# line in RSA:  User <username> at <saddr> must enter "Next Code" for SecurID <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} at %{saddr} must enter \"Next Code\" for SecurID %{hostip}" }
				id => "message-00518:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00518:03"
					"[rsa][message][id1]" => "00518:03"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:04
		# line in RSA:  WebAuth user <username> at <saddr> has been <disposition> via the <logon_type> server at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WebAuth user %{username} at %{saddr} has been %{disposition} via the %{logon_type} server at %{hostip}" }
				id => "message-00518:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:04"
					"[rsa][message][id1]" => "00518:04"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:05
		# line in RSA: User <username> at <saddr> has been challenged via the <authmethod> server at <hostip> (Rejected since challenge is not supported for <logon_type>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} at %{saddr} has been challenged via the %{authmethod} server at %{hostip} (Rejected since challenge is not supported for %{logon_type})" }
				id => "message-00518:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:05"
					"[rsa][message][id1]" => "00518:05"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:06
		# line in RSA: Error in authentication for WebAuth user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error in authentication for WebAuth user %{username}" }
				id => "message-00518:06"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:06"
					"[rsa][message][id1]" => "00518:06"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:07
		# line in RSA: Authentication for user <username> was denied (long { password | username } )
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication[\s]+for[\s]+user[\s]+(?<username>[^\s]*)[\s]+was[\s]+denied[\s]+\(long[\s]+([\s]*password[\s]+|[\s]*username[\s]+)[\s]+\)$" }
				id => "message-00518:07"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:07"
					"[rsa][message][id1]" => "00518:07"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:08
		# line in RSA: User <username> at <saddr> <authmethod> authentication attempt has timed out
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} at %{saddr} %{authmethod} authentication attempt has timed out" }
				id => "message-00518:08"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:08"
					"[rsa][message][id1]" => "00518:08"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:09
		# line in RSA: User <username> at <saddr> has been <disposition> via the <logon_type> server at <hostip> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} at %{saddr} has been %{disposition} via the %{logon_type} server at %{hostip}" }
				id => "message-00518:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:09"
					"[rsa][message][id1]" => "00518:09"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00518:10
		# line in RSA: Admin user "<administrator>" login attempt for <logon_type> (<network_service>) management (port <network_port>) from <saddr>:<sport> failed due to <result>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user \"%{administrator}\" login attempt for %{logon_type} (%{network_service}) management (port %{network_port}) from %{saddr}:%{sport} failed due to %{result}. (%{fld1})" }
				id => "message-00518:10"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"disposition" => "failed"
					"[event][id]" => "00518:10"
					"[rsa][message][id1]" => "00518:10"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00518:11
		# line in RSA: ADM: Local admin authentication failed for login name {'<username>'|<username>}: <result> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ADM:[\s]+Local[\s]+admin[\s]+authentication[\s]+failed[\s]+for[\s]+login[\s]+name[\s]+('(?<username>[^']*)'|(?<username>[^:]*)):[\s]+(?<result>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00518:11"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:11"
					"[rsa][message][id1]" => "00518:11"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00518:12
		# line in RSA:  Admin user "<administrator>" login attempt for <logon_type>(<network_service>) management (port <network_port>) from <saddr>:<sport> <disposition>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user \"%{administrator}\" login attempt for %{logon_type}(%{network_service}) management (port %{network_port}) from %{saddr}:%{sport} %{disposition}. (%{fld1})" }
				id => "message-00518:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00518:12"
					"[rsa][message][id1]" => "00518:12"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00518:13
		# line in RSA: User <username> at <saddr> is rejected by the Radius server at <hostip>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} at %{saddr} is rejected by the Radius server at %{hostip}. (%{fld1})" }
				id => "message-00518:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00518:13"
					"[rsa][message][id1]" => "00518:13"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00518:14
		# line in RSA: <fld2>: Admin user  has been rejected via the Radius server at <hostip> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}: Admin user  has been rejected via the Radius server at %{hostip} (%{fld1})" }
				id => "message-00518:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00518:14"
					"[rsa][message][id1]" => "00518:14"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00519" {
		# MESSAGE 00519
		# line in RSA: Admin user <administrator> { has | of group <group> at <saddr> has | <group> at <saddr> has } been <disposition> via the <logon_type> { server at | server } <hostip> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Admin[\s]+user[\s]+(?<administrator>[^\s]*)[\s]+([\s]*has[\s]+|[\s]*of[\s]+group[\s]+(?<group>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+has[\s]+|[\s]*(?<group>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+has[\s]+)[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+via[\s]+the[\s]+(?<logon_type>[^\s]*)[\s]+([\s]*server[\s]+at[\s]+|[\s]*server[\s]+)[\s]+(?<hostip>[^\s]*)[\s]+$" }
				id => "message-00519"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00519"
					"[rsa][message][id1]" => "00519"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00519:01
		# line in RSA: Local authentication for { WebAuth user | user } <username> was <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Local[\s]+authentication[\s]+for[\s]+([\s]*WebAuth[\s]+user[\s]+|[\s]*user[\s]+)[\s]+(?<username>[^\s]*)[\s]+was[\s]+(?<disposition>.*)$" }
				id => "message-00519:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00519:01"
					"[rsa][message][id1]" => "00519:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00519:02
		# line in RSA:  { WebAuth user | User } <username> at <saddr> has been <disposition> via the <logon_type> server at <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*WebAuth[\s]+user[\s]+|[\s]*User[\s]+)[\s]+(?<username>[^\s]*)[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+via[\s]+the[\s]+(?<logon_type>[^\s]*)[\s]+server[\s]+at[\s]+(?<hostip>.*)$" }
				id => "message-00519:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00519:02"
					"[rsa][message][id1]" => "00519:02"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00519:03
		# line in RSA: Admin user "<administrator>" logged in for <logon_type>(<network_service>) management (port <network_port>) from <saddr>:<sport> <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Admin user \"%{administrator}\" logged in for %{logon_type}(%{network_service}) management (port %{network_port}) from %{saddr}:%{sport} %{fld4}" }
				id => "message-00519:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00519:03"
					"[rsa][message][id1]" => "00519:03"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00519:04
		# line in RSA: ADM: Local admin authentication successful for login name <username> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ADM: Local admin authentication successful for login name %{username} (%{fld1})" }
				id => "message-00519:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00519:04"
					"[rsa][message][id1]" => "00519:04"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00519:05
		# line in RSA: <fld2>Admin user <administrator> has been accepted via the Radius server at <hostip>(<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}Admin user %{administrator} has been accepted via the Radius server at %{hostip}(%{fld1})" }
				id => "message-00519:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00519:05"
					"[rsa][message][id1]" => "00519:05"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00520" {
		# MESSAGE 00520
		# line in RSA: <hostname> user authentication attempt has timed out
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} user authentication attempt has timed out" }
				id => "message-00520"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00520"
					"[rsa][message][id1]" => "00520"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00520:01
		# line in RSA: User <username> at <hostip> {RADIUS | SecurID | LDAP | Local } authentication attempt has timed out
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+(?<username>[^\s]*)[\s]+at[\s]+(?<hostip>[^\s]*)[\s]+(RADIUS[\s]+|[\s]*SecurID[\s]+|[\s]*LDAP[\s]+|[\s]*Local[\s]+)[\s]+authentication[\s]+attempt[\s]+has[\s]+timed[\s]+out$" }
				id => "message-00520:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00520:01"
					"[rsa][message][id1]" => "00520:01"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00520:02
		# line in RSA:  Trying { primary | backup1 | backup2 } server <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Trying[\s]+([\s]*primary[\s]+|[\s]*backup1[\s]+|[\s]*backup2[\s]+)[\s]+server[\s]+(?<fld2>.*)$" }
				id => "message-00520:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00520:02"
					"[rsa][message][id1]" => "00520:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00520:03
		# line in RSA:  { Primary | Backup1 | Backup2 } <fld2>, { primary | backup1 | backup2 } <fld3>, and { primary | backup1 | backup2 } <fld4> servers failed
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Primary[\s]+|[\s]*Backup1[\s]+|[\s]*Backup2[\s]+)[\s]+(?<fld2>[^,]*),[\s]+([\s]*primary[\s]+|[\s]*backup1[\s]+|[\s]*backup2[\s]+)[\s]+(?<fld3>[^,]*),[\s]+and[\s]+([\s]*primary[\s]+|[\s]*backup1[\s]+|[\s]*backup2[\s]+)[\s]+(?<fld4>[^\s]*)[\s]+servers[\s]+failed$" }
				id => "message-00520:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00520:03"
					"[rsa][message][id1]" => "00520:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00520:04
		# line in RSA: Trying <fld2> Server <hostip> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Trying %{fld2} Server %{hostip} (%{fld1})" }
				id => "message-00520:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00520:04"
					"[rsa][message][id1]" => "00520:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00520:05
		# line in RSA: Active Server Switchover: New requests for <fld31> server will try <fld32> from now on. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Active Server Switchover: New requests for %{fld31} server will try %{fld32} from now on. (%{fld1})" }
				id => "message-00520:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00520:05"
					"[rsa][message][id1]" => "00520:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId865
	# line in RSA: Can't connect to E-mail server <hostip> 
	else if [logstash][msgparser][id] == "msgParserId865" {
		dissect {
			mapping => { "message" => "Can't connect to E-mail server %{hostip}" }
			id => "msgParserId865"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId866
	# line in RSA: HA link state has <fld2>
	else if [logstash][msgparser][id] == "msgParserId866" {
		dissect {
			mapping => { "message" => "HA link state has %{fld2}" }
			id => "msgParserId866"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId867
	# line in RSA: URL filtering received an error from <fld2> (error <resultcode>).
	else if [logstash][msgparser][id] == "msgParserId867" {
		dissect {
			mapping => { "message" => "URL filtering received an error from %{fld2} (error %{resultcode})." }
			id => "msgParserId867"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00524" {
		# MESSAGE 00524
		# line in RSA: NetScreen device at <hostip>:<network_port> has responded successfully to SNMP request from <saddr>:<sport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NetScreen device at %{hostip}:%{network_port} has responded successfully to SNMP request from %{saddr}:%{sport}" }
				id => "message-00524"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524"
					"[rsa][message][id1]" => "00524"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00524:02
		# line in RSA: SNMP request from an unknown SNMP community public at <hostip>:<network_port> has been received. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP request from an unknown SNMP community public at %{hostip}:%{network_port} has been received. (%{fld1})" }
				id => "message-00524:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:02"
					"[rsa][message][id1]" => "00524:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00524:03
		# line in RSA: SNMP: NetScreen device has responded successfully to the SNMP request from <saddr>:<sport>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP: NetScreen device has responded successfully to the SNMP request from %{saddr}:%{sport}. (%{fld1})" }
				id => "message-00524:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:03"
					"[rsa][message][id1]" => "00524:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00524:04
		# line in RSA:  SNMP request from an unknown SNMP community admin at <hostip>:<network_port> has been received. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP request from an unknown SNMP community admin at %{hostip}:%{network_port} has been received. (%{fld1})" }
				id => "message-00524:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:04"
					"[rsa][message][id1]" => "00524:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00524:05
		# line in RSA: SNMP request from an unknown SNMP community <fld2> at <hostip>:<network_port> has been received. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP request from an unknown SNMP community %{fld2} at %{hostip}:%{network_port} has been received. (%{fld1})" }
				id => "message-00524:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:05"
					"[rsa][message][id1]" => "00524:05"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00524:06
		# line in RSA: SNMP request has been received from an unknown host in SNMP community <fld2> at <hostip>:<network_port>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP request has been received from an unknown host in SNMP community %{fld2} at %{hostip}:%{network_port}. (%{fld1})" }
				id => "message-00524:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:06"
					"[rsa][message][id1]" => "00524:06"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00524:12
		# line in RSA: SNMP request from an unknown SNMP community <fld2> at <saddr>:<sport> to <daddr>:<dport> has been received
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP request from an unknown SNMP community %{fld2} at %{saddr}:%{sport} to %{daddr}:%{dport} has been received" }
				id => "message-00524:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:12"
					"[rsa][message][id1]" => "00524:12"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00524:14
		# line in RSA: SNMP request from <saddr>:<sport> has been received, but the SNMP version type is incorrect. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP request from %{saddr}:%{sport} has been received, but the SNMP version type is incorrect. (%{fld1})" }
				id => "message-00524:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"result" => "the SNMP version type is incorrect"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:14"
					"[rsa][message][id1]" => "00524:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00524:13
		# line in RSA: SNMP request has been {received,|received} but <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SNMP[\s]+request[\s]+has[\s]+been[\s]+(received,|received)[\s]+but[\s]+(?<result>.*)$" }
				id => "message-00524:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:13"
					"[rsa][message][id1]" => "00524:13"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00524:07
		# line in RSA: Response to SNMP request from <saddr>:<sport> to <daddr>:<dport> has <disposition> due to <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Response to SNMP request from %{saddr}:%{sport} to %{daddr}:%{dport} has %{disposition} due to %{result}" }
				id => "message-00524:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:07"
					"[rsa][message][id1]" => "00524:07"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00524:08
		# line in RSA: SNMP community <fld2> cannot be added because <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP community %{fld2} cannot be added because %{result}" }
				id => "message-00524:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:08"
					"[rsa][message][id1]" => "00524:08"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00524:09
		# line in RSA: SNMP host <hostip> cannot be added to community <fld2> because of <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP host %{hostip} cannot be added to community %{fld2} because of %{result}" }
				id => "message-00524:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:09"
					"[rsa][message][id1]" => "00524:09"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00524:10
		# line in RSA: SNMP host <hostip> cannot be added because <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP host %{hostip} cannot be added because %{result}" }
				id => "message-00524:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:10"
					"[rsa][message][id1]" => "00524:10"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00524:11
		# line in RSA: SNMP host <hostip> cannot be removed from community <fld2> because <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP host %{hostip} cannot be removed from community %{fld2} because %{result}" }
				id => "message-00524:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:11"
					"[rsa][message][id1]" => "00524:11"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00524:16
		# line in RSA: SNMP user/community <fld34> doesn't exist. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SNMP user/community %{fld34} doesn't exist. (%{fld1})" }
				id => "message-00524:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00524:16"
					"[rsa][message][id1]" => "00524:16"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00525" {
		# MESSAGE 00525
		# line in RSA: The new PIN for user <username> at <hostip> has been <disposition> by SecurID <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The new PIN for user %{username} at %{hostip} has been %{disposition} by SecurID %{fld2}" }
				id => "message-00525"
				add_field => {
				"ec_subject" => "Password"
				"ec_theme" => "UserGroup"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00525"
					"[rsa][message][id1]" => "00525"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00525:01
		# line in RSA: User <username> at <hostip> has selected a system-generated PIN for authentication with SecurID <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} at %{hostip} has selected a system-generated PIN for authentication with SecurID %{fld2}" }
				id => "message-00525:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00525:01"
					"[rsa][message][id1]" => "00525:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00525:02
		# line in RSA: User <username> at <hostip> must enter the "new PIN" for SecurID <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} at %{hostip} must enter the \"new PIN\" for SecurID %{fld2}" }
				id => "message-00525:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00525:02"
					"[rsa][message][id1]" => "00525:02"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00525:03
		# line in RSA: User <username> at <hostip> must make a "New PIN" choice for SecurID <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} at %{hostip} must make a \"New PIN\" choice for SecurID %{fld2}" }
				id => "message-00525:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00525:03"
					"[rsa][message][id1]" => "00525:03"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId886
	# line in RSA: The user limit has been exceeded and <hostip> cannot be added
	else if [logstash][msgparser][id] == "msgParserId886" {
		dissect {
			mapping => { "message" => "The user limit has been exceeded and %{hostip} cannot be added" }
			id => "msgParserId886"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00527" {
		# MESSAGE 00527
		# line in RSA: A { DHCP-assigned | DHCP- assigned } IP address <hostip> has been { assigned to | freed from | freed } <fld2> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^A[\s]+([\s]*DHCP\-assigned[\s]+|[\s]*DHCP\-[\s]+assigned[\s]+)[\s]+IP[\s]+address[\s]+(?<hostip>[^\s]*)[\s]+has[\s]+been[\s]+([\s]*assigned[\s]+to[\s]+|[\s]*freed[\s]+from[\s]+|[\s]*freed[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+$" }
				id => "message-00527"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527"
					"[rsa][message][id1]" => "00527"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00527:01
		# line in RSA: A DHCP-assigned IP address has been manually released
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "A DHCP-assigned IP address has been manually released" }
				id => "message-00527:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:01"
					"[rsa][message][id1]" => "00527:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00527:02
		# line in RSA: DHCP server has { assigned | released | assigned or released } an IP address
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DHCP[\s]+server[\s]+has[\s]+([\s]*assigned[\s]+|[\s]*released[\s]+|[\s]*assigned[\s]+or[\s]+released[\s]+)[\s]+an[\s]+IP[\s]+address$" }
				id => "message-00527:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:02"
					"[rsa][message][id1]" => "00527:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00527:03
		# line in RSA: MAC address <macaddr> has detected an IP conflict and has declined address <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "MAC address %{macaddr} has detected an IP conflict and has declined address %{hostip}" }
				id => "message-00527:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:03"
					"[rsa][message][id1]" => "00527:03"
					"[event][categoryid]" => "1805010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00527:04
		# line in RSA: One or more DHCP-assigned IP addresses have been manually released.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "One or more DHCP-assigned IP addresses have been manually released." }
				id => "message-00527:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:04"
					"[rsa][message][id1]" => "00527:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00527:05
		# line in RSA: IP pool of DHCP server on {interface|Interface} <interface> is more than <fld2> allocated.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IP[\s]+pool[\s]+of[\s]+DHCP[\s]+server[\s]+on[\s]+(interface|Interface)[\s]+(?<interface>[^\s]*)[\s]+is[\s]+more[\s]+than[\s]+(?<fld2>[^\s]*)[\s]+allocated\.$" }
				id => "message-00527:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:05"
					"[rsa][message][id1]" => "00527:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00527:06
		# line in RSA: IP address <hostip> { is | has been } { assigned to | released from } <fld2> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IP[\s]+address[\s]+(?<hostip>[^\s]*)[\s]+([\s]*is[\s]+|[\s]*has[\s]+been[\s]+)[\s]+([\s]*assigned[\s]+to[\s]+|[\s]*released[\s]+from[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00527:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:06"
					"[rsa][message][id1]" => "00527:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00527:07
		# line in RSA: One or more IP addresses have expired. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "One or more IP addresses have expired. (%{fld1})" }
				id => "message-00527:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:07"
					"[rsa][message][id1]" => "00527:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00527:08
		# line in RSA: DHCP server on interface <interface> received <protocol_detail> from <smacaddr> requesting out-of-scope IP address <hostip>/<mask> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP server on interface %{interface} received %{protocol_detail} from %{smacaddr} requesting out-of-scope IP address %{hostip}/%{mask} (%{fld1})" }
				id => "message-00527:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:08"
					"[rsa][message][id1]" => "00527:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00527:09
		# line in RSA: MAC address <macaddr> has <disposition> {address <hostip>|<hostip>} (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^MAC[\s]+address[\s]+(?<macaddr>[^\s]*)[\s]+has[\s]+(?<disposition>[^\s]*)[\s]+(address[\s]+(?<hostip>[^\s]*)|(?<hostip>[^\s]*))[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00527:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:09"
					"[rsa][message][id1]" => "00527:09"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00527:10
		# line in RSA: One or more IP addresses are expired. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "One or more IP addresses are expired. (%{fld1})" }
				id => "message-00527:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00527:10"
					"[rsa][message][id1]" => "00527:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00528" {
		# MESSAGE 00528
		# line in RSA: SCS: User '<username>' authenticated using password :
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: User '%{username}' authenticated using password :" }
				id => "message-00528"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00528"
					"[rsa][message][id1]" => "00528"
					"[event][categoryid]" => "1302010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:01
		# line in RSA: SCS: Connection terminated for user <username> from
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: Connection terminated for user %{username} from" }
				id => "message-00528:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00528:01"
					"[rsa][message][id1]" => "00528:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:02
		# line in RSA: SCS: Disabled for all root/vsys on device. Client host attempting connection to interface '<interface>' with address <hostip> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: Disabled for all root/vsys on device. Client host attempting connection to interface '%{interface}' with address %{hostip} from %{saddr}" }
				id => "message-00528:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00528:02"
					"[rsa][message][id1]" => "00528:02"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:03
		# line in RSA:  SSH: NetScreen device <disposition> to identify itself to the SSH client at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: NetScreen device %{disposition} to identify itself to the SSH client at %{hostip}" }
				id => "message-00528:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:03"
					"[rsa][message][id1]" => "00528:03"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:04
		# line in RSA:  SSH: Incompatible SSH version string has been received from SSH client at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Incompatible SSH version string has been received from SSH client at %{hostip}" }
				id => "message-00528:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:04"
					"[rsa][message][id1]" => "00528:04"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:05
		# line in RSA: SSH: <disposition> to send identification string to client host at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: %{disposition} to send identification string to client host at %{hostip}" }
				id => "message-00528:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00528:05"
					"[rsa][message][id1]" => "00528:05"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:06
		# line in RSA:   SSH: Client at <saddr> attempted to connect with invalid version string.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Client at %{saddr} attempted to connect with invalid version string." }
				id => "message-00528:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"result" => "invalid version string"
					"[event][id]" => "00528:06"
					"[rsa][message][id1]" => "00528:06"
					"[event][categoryid]" => "1803020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:07
		# line in RSA:  SSH: <disposition> to negotiate { encryption | MAC | key exchange | host key } algorithm with host <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*SSH:[\s]+(?<disposition>[^\s]*)[\s]+to[\s]+negotiate[\s]+([\s]*encryption[\s]+|[\s]*MAC[\s]+|[\s]*key[\s]+exchange[\s]+|[\s]*host[\s]+key[\s]+)[\s]+algorithm[\s]+with[\s]+host[\s]+(?<hostip>.*)$" }
				id => "message-00528:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:07"
					"[rsa][message][id1]" => "00528:07"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:08
		# line in RSA: SSH: Unsupported cipher type <fld2> requested from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Unsupported cipher type %{fld2} requested from %{saddr}" }
				id => "message-00528:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:08"
					"[rsa][message][id1]" => "00528:08"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:09
		# line in RSA: SSH: Host client has requested NO cipher from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Host client has requested NO cipher from %{saddr}" }
				id => "message-00528:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00528:09"
					"[rsa][message][id1]" => "00528:09"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:10
		# line in RSA:  SSH: Disabled for '<vsys>'. Attempted connection <disposition> from <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Disabled for '%{vsys}'. Attempted connection %{disposition} from %{saddr}:%{sport}" }
				id => "message-00528:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:10"
					"[rsa][message][id1]" => "00528:10"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:11
		# line in RSA:  SSH: Disabled for <fld2> Attempted connection <disposition> from <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: Disabled for %{fld2} Attempted connection %{disposition} from %{saddr}:%{sport}" }
				id => "message-00528:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:11"
					"[rsa][message][id1]" => "00528:11"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:12
		# line in RSA: SSH: SSH user <username> at <saddr> tried unsuccessfully to log in to <vsys> using the shared untrusted interface. SSH disabled on that interface.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: SSH user %{username} at %{saddr} tried unsuccessfully to log in to %{vsys} using the shared untrusted interface. SSH disabled on that interface." }
				id => "message-00528:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"disposition" => "disabled"
					"[event][id]" => "00528:12"
					"[rsa][message][id1]" => "00528:12"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:13
		# line in RSA:  SSH: SSH client at <saddr> tried unsuccessfully to { make | establish } an SSH connection to {interface|Interface} <interface> with IP <hostip> SSH { not enabled | disabled } on that interface.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*SSH:[\s]+SSH[\s]+client[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+tried[\s]+unsuccessfully[\s]+to[\s]+([\s]*make[\s]+|[\s]*establish[\s]+)[\s]+an[\s]+SSH[\s]+connection[\s]+to[\s]+(interface|Interface)[\s]+(?<interface>[^\s]*)[\s]+with[\s]+IP[\s]+(?<hostip>[^\s]*)[\s]+SSH[\s]+([\s]*not[\s]+enabled[\s]+|[\s]*disabled[\s]+)[\s]+on[\s]+that[\s]+interface\.$" }
				id => "message-00528:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:13"
					"[rsa][message][id1]" => "00528:13"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:14
		# line in RSA: SSH: SSH client <saddr> unsuccessfully attempted to make an SSH connection to <vsys> SSH was not completely initialized for that system.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: SSH client %{saddr} unsuccessfully attempted to make an SSH connection to %{vsys} SSH was not completely initialized for that system." }
				id => "message-00528:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:14"
					"[rsa][message][id1]" => "00528:14"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:15
		# line in RSA: SSH: Admin user { '<administrator>' | <administrator> } at host <saddr> requested unsupported { PKA algorithm | authentication method } <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSH:[\s]+Admin[\s]+user[\s]+([\s]*'(?<administrator>[^']*)'[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)[\s]+at[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+requested[\s]+unsupported[\s]+([\s]*PKA[\s]+algorithm[\s]+|[\s]*authentication[\s]+method[\s]+)[\s]+(?<fld2>.*)$" }
				id => "message-00528:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:15"
					"[rsa][message][id1]" => "00528:15"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:16
		# line in RSA: SCP: Admin '<administrator>' at host <saddr> executed invalid scp command: '<fld2>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCP: Admin '%{administrator}' at host %{saddr} executed invalid scp command: '%{fld2}'" }
				id => "message-00528:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:16"
					"[rsa][message][id1]" => "00528:16"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:17
		# line in RSA:  SCP: Disabled for '<username>'. Attempted file transfer failed from host <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCP: Disabled for '%{username}'. Attempted file transfer failed from host %{saddr}" }
				id => "message-00528:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:17"
					"[rsa][message][id1]" => "00528:17"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:18
		# line in RSA:  SSH: { PKA | Password } authentication successful for admin user { \'<administrator>\' | '<administrator>' } at host <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*SSH:[\s]+([\s]*PKA[\s]+|[\s]*Password[\s]+)[\s]+authentication[\s]+successful[\s]+for[\s]+admin[\s]+user[\s]+([\s]*\\'(?<administrator>[^\\]*)\\'[\s]+|[\s]*'(?<administrator>[^']*)'[\s]+)[\s]+at[\s]+host[\s]+(?<saddr>.*)$" }
				id => "message-00528:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"disposition" => "successful"
				"event_description" => "authentication successful for admin user"
					"[event][id]" => "00528:18"
					"[rsa][message][id1]" => "00528:18"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:26
		# line in RSA:  SSH: { PKA | Password } authentication failed for admin user { \'<administrator>\' | '<administrator>' } at host <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*SSH:[\s]+([\s]*PKA[\s]+|[\s]*Password[\s]+)[\s]+authentication[\s]+failed[\s]+for[\s]+admin[\s]+user[\s]+([\s]*\\'(?<administrator>[^\\]*)\\'[\s]+|[\s]*'(?<administrator>[^']*)'[\s]+)[\s]+at[\s]+host[\s]+(?<saddr>.*)$" }
				id => "message-00528:26"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"disposition" => "failed"
				"vsys" => "%{hvsys}"
				"event_description" => "authentication failed for admin user"
					"[event][id]" => "00528:26"
					"[rsa][message][id1]" => "00528:26"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:19
		# line in RSA:  { SCS | SSH }: SSH user <username> has been <disposition> using password from <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*SCS[\s]+|[\s]*SSH[\s]+):[\s]+SSH[\s]+user[\s]+(?<username>[^\s]*)[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+using[\s]+password[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00528:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:19"
					"[rsa][message][id1]" => "00528:19"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:20
		# line in RSA:  { SCS | SSH }: Connection has been <disposition> for admin user <administrator> at <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*SCS[\s]+|[\s]*SSH[\s]+):[\s]+Connection[\s]+has[\s]+been[\s]+(?<disposition>[^\s]*)[\s]+for[\s]+admin[\s]+user[\s]+(?<administrator>[^\s]*)[\s]+at[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-00528:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:20"
					"[rsa][message][id1]" => "00528:20"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:21
		# line in RSA:  SCS: SSH user <username> at <saddr>:<sport> has requested PKA RSA authentication, which is not supported for that client.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: SSH user %{username} at %{saddr}:%{sport} has requested PKA RSA authentication, which is not supported for that client." }
				id => "message-00528:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:21"
					"[rsa][message][id1]" => "00528:21"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:22
		# line in RSA: SCS: SSH client at <saddr> has attempted to make an SCS connection to {interface|Interface} <interface> with IP <hostip> but <disposition> because SCS is not enabled for that interface.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCS:[\s]+SSH[\s]+client[\s]+at[\s]+(?<saddr>[^\s]*)[\s]+has[\s]+attempted[\s]+to[\s]+make[\s]+an[\s]+SCS[\s]+connection[\s]+to[\s]+(interface|Interface)[\s]+(?<interface>[^\s]*)[\s]+with[\s]+IP[\s]+(?<hostip>[^\s]*)[\s]+but[\s]+(?<disposition>[^\s]*)[\s]+because[\s]+SCS[\s]+is[\s]+not[\s]+enabled[\s]+for[\s]+that[\s]+interface\.$" }
				id => "message-00528:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"result" => "SCS is not enabled for that interface"
					"[event][id]" => "00528:22"
					"[rsa][message][id1]" => "00528:22"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:23
		# line in RSA: SCS: SSH client at <saddr>:<sport> has <disposition> to make an SCS connection to vsys <vsys> because SCS cannot generate the host and server keys before timing out.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCS: SSH client at %{saddr}:%{sport} has %{disposition} to make an SCS connection to vsys %{vsys} because SCS cannot generate the host and server keys before timing out." }
				id => "message-00528:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"result" => "SCS cannot generate the host and server keys before timing out"
					"[event][id]" => "00528:23"
					"[rsa][message][id1]" => "00528:23"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:24
		# line in RSA:  SSH: <change_attribute> has been changed from <change_old> to <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH: %{change_attribute} has been changed from %{change_old} to %{change_new}" }
				id => "message-00528:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00528:24"
					"[rsa][message][id1]" => "00528:24"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00528:25
		# line in RSA: SSH: Admin {\'<administrator>\' | '<administrator>' } at host <saddr> attempted to be authenticated with no authentication methods enabled.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSH:[\s]+Admin[\s]+(\\'(?<administrator>[^\\]*)\\'[\s]+|[\s]*'(?<administrator>[^']*)'[\s]+)[\s]+at[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+attempted[\s]+to[\s]+be[\s]+authenticated[\s]+with[\s]+no[\s]+authentication[\s]+methods[\s]+enabled\.$" }
				id => "message-00528:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00528:25"
					"[rsa][message][id1]" => "00528:25"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00529" {
		# MESSAGE 00529
		# line in RSA: DNS entries have been { manually | automatically } refreshed
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DNS[\s]+entries[\s]+have[\s]+been[\s]+([\s]*manually[\s]+|[\s]*automatically[\s]+)[\s]+refreshed$" }
				id => "message-00529"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00529"
					"[rsa][message][id1]" => "00529"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00529:01
		# line in RSA: DNS entries have been refreshed by { state change | HA }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DNS[\s]+entries[\s]+have[\s]+been[\s]+refreshed[\s]+by[\s]+([\s]*state[\s]+change[\s]+|[\s]*HA[\s]+)$" }
				id => "message-00529:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00529:01"
					"[rsa][message][id1]" => "00529:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00530" {
		# MESSAGE 00530
		# line in RSA: An IP conflict has been detected and the DHCP client has declined address <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "An IP conflict has been detected and the DHCP client has declined address %{hostip}" }
				id => "message-00530"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00530"
					"[rsa][message][id1]" => "00530"
					"[event][categoryid]" => "1805010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00530:01
		# line in RSA: DHCP client IP <hostip> for the {interface|Interface} <interface> has been manually released
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^DHCP[\s]+client[\s]+IP[\s]+(?<hostip>[^\s]*)[\s]+for[\s]+the[\s]+(interface|Interface)[\s]+(?<interface>[^\s]*)[\s]+has[\s]+been[\s]+manually[\s]+released$" }
				id => "message-00530:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00530:01"
					"[rsa][message][id1]" => "00530:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00530:02
		# line in RSA: DHCP client is unable to get an IP address for the <interface> interface
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP client is unable to get an IP address for the %{interface} interface" }
				id => "message-00530:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00530:02"
					"[rsa][message][id1]" => "00530:02"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00530:03
		# line in RSA: DHCP client lease for <hostip> has expired
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP client lease for %{hostip} has expired" }
				id => "message-00530:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00530:03"
					"[rsa][message][id1]" => "00530:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00530:04
		# line in RSA: DHCP server <hostip> has assigned the untrust Interface <interface> with lease <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP server %{hostip} has assigned the untrust Interface %{interface} with lease %{fld2}." }
				id => "message-00530:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00530:04"
					"[rsa][message][id1]" => "00530:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00530:05
		# line in RSA: DHCP server <hostip> has assigned the <interface> interface <fld2> with lease <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP server %{hostip} has assigned the %{interface} interface %{fld2} with lease %{fld3}" }
				id => "message-00530:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00530:05"
					"[rsa][message][id1]" => "00530:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00530:06
		# line in RSA: DHCP client is unable to get IP address for the untrust interface.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DHCP client is unable to get IP address for the untrust interface." }
				id => "message-00530:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00530:06"
					"[rsa][message][id1]" => "00530:06"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00531" {
		# MESSAGE 00531
		# line in RSA: System clock configurations have been changed by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+clock[\s]+configurations[\s]+have[\s]+been[\s]+changed[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00531"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531"
					"[rsa][message][id1]" => "00531"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:01
		# line in RSA: failed to get clock through NTP
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "failed to get clock through NTP" }
				id => "message-00531:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:01"
					"[rsa][message][id1]" => "00531:01"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00531:02
		# line in RSA: The system clock has been updated through NTP.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system clock has been updated through NTP." }
				id => "message-00531:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:02"
					"[rsa][message][id1]" => "00531:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00531:03
		# line in RSA: The system clock was updated from <type> NTP server type <hostname> with { a ms | an } adjustment of <fld3>. Authentication was <fld4>. Update mode was {<fld5>(<fld2>)|<fld5>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+system[\s]+clock[\s]+was[\s]+updated[\s]+from[\s]+(?<type>[^\s]*)[\s]+NTP[\s]+server[\s]+type[\s]+(?<hostname>[^\s]*)[\s]+with[\s]+([\s]*a[\s]+ms[\s]+|[\s]*an[\s]+)[\s]+adjustment[\s]+of[\s]+(?<fld3>[^\.]*)\.[\s]+Authentication[\s]+was[\s]+(?<fld4>[^\.]*)\.[\s]+Update[\s]+mode[\s]+was[\s]+((?<fld5>[^\(]*)\((?<fld2>[^\)]*)\)|(?<fld5>.*))$" }
				id => "message-00531:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:03"
					"[rsa][message][id1]" => "00531:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:04
		# line in RSA: The NetScreen device is attempting to contact the { primary backup | secondary backup | primary } NTP server <hostname>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+NetScreen[\s]+device[\s]+is[\s]+attempting[\s]+to[\s]+contact[\s]+the[\s]+([\s]*primary[\s]+backup[\s]+|[\s]*secondary[\s]+backup[\s]+|[\s]*primary[\s]+)[\s]+NTP[\s]+server[\s]+(?<hostname>.*)$" }
				id => "message-00531:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:04"
					"[rsa][message][id1]" => "00531:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00531:05
		# line in RSA: No NTP server could be contacted. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No NTP server could be contacted. (%{fld1})" }
				id => "message-00531:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:05"
					"[rsa][message][id1]" => "00531:05"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:06
		# line in RSA: Network Time Protocol adjustment of <fld2> from NTP server <hostname> exceeds the allowed adjustment of <fld3>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Time Protocol adjustment of %{fld2} from NTP server %{hostname} exceeds the allowed adjustment of %{fld3}. (%{fld1})" }
				id => "message-00531:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:06"
					"[rsa][message][id1]" => "00531:06"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:07
		# line in RSA: No acceptable time could be obtained from any NTP server. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No acceptable time could be obtained from any NTP server. (%{fld1})" }
				id => "message-00531:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:07"
					"[rsa][message][id1]" => "00531:07"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:08
		# line in RSA: Administrator <administrator> changed the <change_attribute> from <change_old> to <change_new> (by <fld3> via <logon_type> from host <saddr> to <daddr>:<dport>) (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Administrator %{administrator} changed the %{change_attribute} from %{change_old} to %{change_new} (by %{fld3} via %{logon_type} from host %{saddr} to %{daddr}:%{dport}) (%{fld1})" }
				id => "message-00531:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:08"
					"[rsa][message][id1]" => "00531:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:09
		# line in RSA:  Network Time Protocol settings changed. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Time Protocol settings changed. (%{fld1})" }
				id => "message-00531:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:09"
					"[rsa][message][id1]" => "00531:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:10
		# line in RSA: NTP server is <disposition> on interface <interface> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NTP server is %{disposition} on interface %{interface} (%{fld1})" }
				id => "message-00531:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:10"
					"[rsa][message][id1]" => "00531:10"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:11
		# line in RSA:  The system clock will be changed from <change_old> to <change_new> received from primary NTP server <hostip> (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system clock will be changed from %{change_old} to %{change_new} received from primary NTP server %{hostip} (%{fld1})" }
				id => "message-00531:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "system clock changed based on receive from primary NTP server"
					"[event][id]" => "00531:11"
					"[rsa][message][id1]" => "00531:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00531:12
		# line in RSA:  <fld35> NTP server <saddr> could not be contacted. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld35} NTP server %{saddr} could not be contacted. (%{fld1})" }
				id => "message-00531:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00531:12"
					"[rsa][message][id1]" => "00531:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId945
	# line in RSA: VIP server <hostip> is now responding
	else if [logstash][msgparser][id] == "msgParserId945" {
		dissect {
			mapping => { "message" => "VIP server %{hostip} is now responding" }
			id => "msgParserId945"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId946
	# line in RSA:  <fld2> has been cleared
	else if [logstash][msgparser][id] == "msgParserId946" {
		dissect {
			mapping => { "message" => "%{fld2} has been cleared" }
			id => "msgParserId946"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00535" {
		# MESSAGE 00535
		# line in RSA: Cannot find the CA certificate with distinguished name <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot find the CA certificate with distinguished name %{fld2}" }
				id => "message-00535"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00535"
					"[rsa][message][id1]" => "00535"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00535:01
		# line in RSA: Distinguished name <dn> in the X509 certificate request is <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Distinguished name %{dn} in the X509 certificate request is %{disposition}" }
				id => "message-00535:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00535:01"
					"[rsa][message][id1]" => "00535:01"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00535:02
		# line in RSA: Local certificate with distinguished name <dn> is <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Local certificate with distinguished name %{dn} is %{disposition}" }
				id => "message-00535:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00535:02"
					"[rsa][message][id1]" => "00535:02"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00535:03
		# line in RSA: PKCS #7 data cannot be decapsulated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKCS #7 data cannot be decapsulated" }
				id => "message-00535:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00535:03"
					"[rsa][message][id1]" => "00535:03"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00535:04
		# line in RSA: SCEP_FAILURE message has been received from the CA
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCEP_FAILURE message has been received from the CA" }
				id => "message-00535:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"result" => "SCEP_FAILURE message"
					"[event][id]" => "00535:04"
					"[rsa][message][id1]" => "00535:04"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00535:05
		# line in RSA:  PKI error message has been received: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI error message has been received: %{result}" }
				id => "message-00535:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00535:05"
					"[rsa][message][id1]" => "00535:05"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00535:06
		# line in RSA:  PKI: Saved CA configuration (CA cert subject name <dn>). (<event_time_string>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PKI: Saved CA configuration (CA cert subject name %{dn}). (%{event_time_string})" }
				id => "message-00535:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Saved CA configuration - cert subject name"
					"[event][id]" => "00535:06"
					"[rsa][message][id1]" => "00535:06"
					"[event][categoryid]" => "1613030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00536" {
		# MESSAGE 00536:49
		# line in RSA:  IKE <hostip> { Phase 2 msg ID <sessionid>: <disposition>. | Phase 1: <disposition> | phase 2:<disposition>. | phase 1:<disposition>. } (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*IKE[\s]+(?<hostip>[^\s]*)[\s]+([\s]*Phase[\s]+2[\s]+msg[\s]+ID[\s]+(?<sessionid>[^:]*):[\s]+(?<disposition>[^\.]*)\.[\s]+|[\s]*Phase[\s]+1:[\s]+(?<disposition>[^\s]*)[\s]+|[\s]*phase[\s]+2:(?<disposition>[^\.]*)\.[\s]+|[\s]*phase[\s]+1:(?<disposition>[^\.]*)\.[\s]+)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00536:49"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:49"
					"[rsa][message][id1]" => "00536:49"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00536
		# line in RSA:  UDP packets have been received from <saddr>/<sport> at interface <interface> at <daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UDP packets have been received from %{saddr}/%{sport} at interface %{interface} at %{daddr}/%{dport}" }
				id => "message-00536"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00536"
					"[rsa][message][id1]" => "00536"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:01
		# line in RSA: Attempt to set tunnel (<fld2>) without IP address at both end points! Check outgoing interface.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attempt to set tunnel (%{fld2}) without IP address at both end points! Check outgoing interface." }
				id => "message-00536:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:01"
					"[rsa][message][id1]" => "00536:01"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:02
		# line in RSA: Gateway <fld2> at <hostip> in <fld4> mode with ID: <fld3> has been <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Gateway %{fld2} at %{hostip} in %{fld4} mode with ID: %{fld3} has been %{disposition}." }
				id => "message-00536:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:02"
					"[rsa][message][id1]" => "00536:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:03
		# line in RSA: IKE gateway <fld2> has been <disposition>. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE gateway %{fld2} has been %{disposition}. %{info}" }
				id => "message-00536:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:03"
					"[rsa][message][id1]" => "00536:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:04
		# line in RSA: VPN monitoring for VPN <group> has deactivated the SA with ID <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN monitoring for VPN %{group} has deactivated the SA with ID %{fld2}." }
				id => "message-00536:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:04"
					"[rsa][message][id1]" => "00536:04"
					"[event][categoryid]" => "1801010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:05
		# line in RSA: VPN ID number cannot be assigned
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN ID number cannot be assigned" }
				id => "message-00536:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:05"
					"[rsa][message][id1]" => "00536:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:06
		# line in RSA: Local gateway IP address has changed to <fld2>. VPNs cannot terminate at an interface with IP <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Local gateway IP address has changed to %{fld2}. VPNs cannot terminate at an interface with IP %{hostip}" }
				id => "message-00536:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:06"
					"[rsa][message][id1]" => "00536:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:07
		# line in RSA: Local gateway IP address has changed from <change_old> to another setting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Local gateway IP address has changed from %{change_old} to another setting" }
				id => "message-00536:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:07"
					"[rsa][message][id1]" => "00536:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:08
		# line in RSA: IKE <hostip>: Sent initial contact notification message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Sent initial contact notification message" }
				id => "message-00536:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:08"
					"[rsa][message][id1]" => "00536:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:09
		# line in RSA: IKE <hostip>: Sent initial contact notification
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Sent initial contact notification" }
				id => "message-00536:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:09"
					"[rsa][message][id1]" => "00536:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:10
		# line in RSA: IKE <hostip>: Responded to a packet with a bad SPI after rebooting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Responded to a packet with a bad SPI after rebooting" }
				id => "message-00536:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:10"
					"[rsa][message][id1]" => "00536:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:11
		# line in RSA: IKE <hostip>: Removed Phase 2 SAs after receiving a notification message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Removed Phase 2 SAs after receiving a notification message" }
				id => "message-00536:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:11"
					"[rsa][message][id1]" => "00536:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:12
		# line in RSA: IKE <hostip>: Rejected first Phase 1 packet from an unrecognized source
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Rejected first Phase 1 packet from an unrecognized source" }
				id => "message-00536:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:12"
					"[rsa][message][id1]" => "00536:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:13
		# line in RSA: IKE <hostip>: Rejected an initial Phase 1 packet from an unrecognized peer gateway
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Rejected an initial Phase 1 packet from an unrecognized peer gateway" }
				id => "message-00536:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:13"
					"[rsa][message][id1]" => "00536:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:14
		# line in RSA: IKE <hostip>: Received initial contact notification and removed { Phase 1 | Phase 2 } SAs
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IKE[\s]+(?<hostip>[^:]*):[\s]+Received[\s]+initial[\s]+contact[\s]+notification[\s]+and[\s]+removed[\s]+([\s]*Phase[\s]+1[\s]+|[\s]*Phase[\s]+2[\s]+)[\s]+SAs$" }
				id => "message-00536:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:14"
					"[rsa][message][id1]" => "00536:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:50
		# line in RSA: IKE <hostip>: Received a notification message for <disposition>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Received a notification message for %{disposition}. (%{fld1})" }
				id => "message-00536:50"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:50"
					"[rsa][message][id1]" => "00536:50"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00536:15
		# line in RSA: IKE <hostip>: Received incorrect ID payload: IP address <fld2> instead of IP address <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Received incorrect ID payload: IP address %{fld2} instead of IP address %{fld3}" }
				id => "message-00536:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:15"
					"[rsa][message][id1]" => "00536:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:16
		# line in RSA: IKE <hostip>: Phase 2 negotiation request is already in the task list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Phase 2 negotiation request is already in the task list" }
				id => "message-00536:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:16"
					"[rsa][message][id1]" => "00536:16"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:17
		# line in RSA: IKE <hostip>: Heartbeats have been lost <fld2> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Heartbeats have been lost %{fld2} times" }
				id => "message-00536:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:17"
					"[rsa][message][id1]" => "00536:17"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:18
		# line in RSA: IKE <hostip>: Dropped peer packet because no policy uses the peer configuration
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Dropped peer packet because no policy uses the peer configuration" }
				id => "message-00536:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:18"
					"[rsa][message][id1]" => "00536:18"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:19
		# line in RSA: IKE <hostip>: Dropped packet because remote gateway OK is not used in any VPN tunnel configurations
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Dropped packet because remote gateway OK is not used in any VPN tunnel configurations" }
				id => "message-00536:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:19"
					"[rsa][message][id1]" => "00536:19"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:20
		# line in RSA: IKE <hostip>: Added the initial contact task to the task list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Added the initial contact task to the task list" }
				id => "message-00536:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:20"
					"[rsa][message][id1]" => "00536:20"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:21
		# line in RSA: IKE <hostip>: Added Phase 2 session tasks to the task list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Added Phase 2 session tasks to the task list" }
				id => "message-00536:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:21"
					"[rsa][message][id1]" => "00536:21"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:22
		# line in RSA: IKE <hostip> Phase 1 : <disposition> proposals from peer. Negotiations failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1 : %{disposition} proposals from peer. Negotiations failed" }
				id => "message-00536:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"result" => "Negotiations failed"
					"[event][id]" => "00536:22"
					"[rsa][message][id1]" => "00536:22"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:23
		# line in RSA: IKE <hostip> Phase 1 : Aborted negotiations because the time limit has elapsed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1 : Aborted negotiations because the time limit has elapsed" }
				id => "message-00536:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"result" => "The time limit has elapsed"
				"disposition" => "Aborted"
					"[event][id]" => "00536:23"
					"[rsa][message][id1]" => "00536:23"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:24
		# line in RSA: IKE <hostip> Phase 2: Received a message but did not check a policy because id-mode is set to IP or policy-checking is disabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 2: Received a message but did not check a policy because id-mode is set to IP or policy-checking is disabled" }
				id => "message-00536:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:24"
					"[rsa][message][id1]" => "00536:24"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:25
		# line in RSA: IKE <hostip> Phase 2: Received DH group <fld2> instead of expected group <fld3> for PFS
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 2: Received DH group %{fld2} instead of expected group %{fld3} for PFS" }
				id => "message-00536:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:25"
					"[rsa][message][id1]" => "00536:25"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:26
		# line in RSA: IKE <hostip> Phase 2: No policy exists for the proxy ID received: local ID <fld2> remote ID <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 2: No policy exists for the proxy ID received: local ID %{fld2} remote ID %{fld3}" }
				id => "message-00536:26"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:26"
					"[rsa][message][id1]" => "00536:26"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:27
		# line in RSA: IKE <hostip> Phase 1: RSA private key is needed to sign packets
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: RSA private key is needed to sign packets" }
				id => "message-00536:27"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:27"
					"[rsa][message][id1]" => "00536:27"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:28
		# line in RSA: IKE <hostip> Phase 1: Aggressive mode negotiations have <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Aggressive mode negotiations have %{disposition}" }
				id => "message-00536:28"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:28"
					"[rsa][message][id1]" => "00536:28"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:29
		# line in RSA: IKE <hostip> Phase 1: Vendor ID payload indicates that the peer does not support NAT-T
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Vendor ID payload indicates that the peer does not support NAT-T" }
				id => "message-00536:29"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:29"
					"[rsa][message][id1]" => "00536:29"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:30
		# line in RSA: IKE <hostip> Phase 1: Retransmission limit has been reached
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Retransmission limit has been reached" }
				id => "message-00536:30"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:30"
					"[rsa][message][id1]" => "00536:30"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:31
		# line in RSA: IKE <hostip> Phase 1: Received an invalid RSA signature
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Received an invalid RSA signature" }
				id => "message-00536:31"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:31"
					"[rsa][message][id1]" => "00536:31"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:32
		# line in RSA: IKE <hostip> Phase 1: Received an incorrect public key authentication method
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Received an incorrect public key authentication method" }
				id => "message-00536:32"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:32"
					"[rsa][message][id1]" => "00536:32"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:33
		# line in RSA: IKE <hostip> Phase 1: No private key exists to sign packets
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: No private key exists to sign packets" }
				id => "message-00536:33"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:33"
					"[rsa][message][id1]" => "00536:33"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:34
		# line in RSA: IKE <hostip> Phase 1: Main mode packet has arrived with ID type IP address but no user configuration was found for that ID
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Main mode packet has arrived with ID type IP address but no user configuration was found for that ID" }
				id => "message-00536:34"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:34"
					"[rsa][message][id1]" => "00536:34"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:35
		# line in RSA: IKE <hostip> Phase 1: IKE initiator has detected NAT in front of the local device
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: IKE initiator has detected NAT in front of the local device" }
				id => "message-00536:35"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:35"
					"[rsa][message][id1]" => "00536:35"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:36
		# line in RSA: IKE <hostip> Phase 1: Discarded a second initial {packet,|packet} which arrived within <fld2> after the first
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IKE[\s]+(?<hostip>[^\s]*)[\s]+Phase[\s]+1:[\s]+Discarded[\s]+a[\s]+second[\s]+initial[\s]+(packet,|packet)[\s]+which[\s]+arrived[\s]+within[\s]+(?<fld2>[^\s]*)[\s]+after[\s]+the[\s]+first$" }
				id => "message-00536:36"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:36"
					"[rsa][message][id1]" => "00536:36"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:37
		# line in RSA: IKE <hostip> Phase 1: Completed Aggressive mode negotiations with a <fld2> lifetime
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Completed Aggressive mode negotiations with a %{fld2} lifetime" }
				id => "message-00536:37"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:37"
					"[rsa][message][id1]" => "00536:37"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:38
		# line in RSA: IKE <hostip> Phase 1: Certificate received has a subject name that does not match the ID payload
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Certificate received has a subject name that does not match the ID payload" }
				id => "message-00536:38"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:38"
					"[rsa][message][id1]" => "00536:38"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:39
		# line in RSA: IKE <hostip> Phase 1: Certificate received has a different IP address <fld2> than expected
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Certificate received has a different IP address %{fld2} than expected" }
				id => "message-00536:39"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:39"
					"[rsa][message][id1]" => "00536:39"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:40
		# line in RSA: IKE <hostip> Phase 1: Cannot use a preshared key because the peer{|&}s gateway has a dynamic IP address and negotiations are in Main mode
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^IKE[\s]+(?<hostip>[^\s]*)[\s]+Phase[\s]+1:[\s]+Cannot[\s]+use[\s]+a[\s]+preshared[\s]+key[\s]+because[\s]+the[\s]+peer(|&)s[\s]+gateway[\s]+has[\s]+a[\s]+dynamic[\s]+IP[\s]+address[\s]+and[\s]+negotiations[\s]+are[\s]+in[\s]+Main[\s]+mode$" }
				id => "message-00536:40"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:40"
					"[rsa][message][id1]" => "00536:40"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:47
		# line in RSA: IKE <hostip> Phase 1: Initiated negotiations in Aggressive mode
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Initiated negotiations in Aggressive mode" }
				id => "message-00536:47"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:47"
					"[rsa][message][id1]" => "00536:47"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:41
		# line in RSA: IKE <hostip> Phase 1: Cannot verify RSA signature
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Cannot verify RSA signature" }
				id => "message-00536:41"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:41"
					"[rsa][message][id1]" => "00536:41"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:42
		# line in RSA: IKE <hostip> Phase 1: Initiated Main mode negotiations
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 1: Initiated Main mode negotiations" }
				id => "message-00536:42"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:42"
					"[rsa][message][id1]" => "00536:42"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:43
		# line in RSA: IKE <hostip> Phase 2: Initiated negotiations
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip} Phase 2: Initiated negotiations" }
				id => "message-00536:43"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:43"
					"[rsa][message][id1]" => "00536:43"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:44
		# line in RSA: IKE <hostip>: Changed heartbeat interval to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Changed heartbeat interval to %{fld2}" }
				id => "message-00536:44"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:44"
					"[rsa][message][id1]" => "00536:44"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:45
		# line in RSA: IKE <hostip>: Heartbeats have been <disposition> because <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Heartbeats have been %{disposition} because %{result}" }
				id => "message-00536:45"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:45"
					"[rsa][message][id1]" => "00536:45"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:48
		# line in RSA:  Received an IKE packet on <interface> from <saddr>:<sport> to <daddr>:<dport>/<fld1>. Cookies: <ike_cookie1>, <ike_cookie2>. (<event_time_string>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received an IKE packet on %{interface} from %{saddr}:%{sport} to %{daddr}:%{dport}/%{fld1}. Cookies: %{ike_cookie1}, %{ike_cookie2}. (%{event_time_string})" }
				id => "message-00536:48"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Received an IKE packet on interface"
					"[event][id]" => "00536:48"
					"[rsa][message][id1]" => "00536:48"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00536:46
		# line in RSA: IKE <hostip>: Received a bad SPI
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE %{hostip}: Received a bad SPI" }
				id => "message-00536:46"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00536:46"
					"[rsa][message][id1]" => "00536:46"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00537" {
		# MESSAGE 00537
		# line in RSA: PPPoE <disposition> to establish a session: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPPoE %{disposition} to establish a session: %{info}" }
				id => "message-00537"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00537"
					"[rsa][message][id1]" => "00537"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00537:01
		# line in RSA: PPPoE session shuts down: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPPoE session shuts down: %{result}" }
				id => "message-00537:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00537:01"
					"[rsa][message][id1]" => "00537:01"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00537:02
		# line in RSA: The Point-to-Point over Ethernet (PPPoE) connection failed to establish a session: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The Point-to-Point over Ethernet (PPPoE) connection failed to establish a session: %{result}" }
				id => "message-00537:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00537:02"
					"[rsa][message][id1]" => "00537:02"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00537:03
		# line in RSA: PPPoE session has successfully established
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPPoE session has successfully established" }
				id => "message-00537:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00537:03"
					"[rsa][message][id1]" => "00537:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00538" {
		# MESSAGE 00538
		# line in RSA: NACN failed to register to Policy Manager <fld2> because { of | the } <result> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^NACN[\s]+failed[\s]+to[\s]+register[\s]+to[\s]+Policy[\s]+Manager[\s]+(?<fld2>[^\s]*)[\s]+because[\s]+([\s]*of[\s]+|[\s]*the[\s]+)[\s]+(?<result>[^\s]*)[\s]+$" }
				id => "message-00538"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00538"
					"[rsa][message][id1]" => "00538"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:01
		# line in RSA: NACN successfully registered to Policy Manager <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NACN successfully registered to Policy Manager %{fld2}." }
				id => "message-00538:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00538:01"
					"[rsa][message][id1]" => "00538:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:02
		# line in RSA: The NACN protocol has started for Policy Manager <fld2> on hostname <hostname> IP address <hostip> port <network_port>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The NACN protocol has started for Policy Manager %{fld2} on hostname %{hostname} IP address %{hostip} port %{network_port}." }
				id => "message-00538:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00538:02"
					"[rsa][message][id1]" => "00538:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:03
		# line in RSA:  Cannot connect to NSM Server at <hostip> (<fld2> connect attempt(s)) <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to NSM Server at %{hostip} (%{fld2} connect attempt(s)) %{fld3}" }
				id => "message-00538:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00538:03"
					"[rsa][message][id1]" => "00538:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:04
		# line in RSA: Device is not known to Global PRO data collector at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Device is not known to Global PRO data collector at %{hostip}" }
				id => "message-00538:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00538:04"
					"[rsa][message][id1]" => "00538:04"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:05
		# line in RSA: Lost {socket connection|connection} to Global PRO data collector at <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Lost[\s]+(socket[\s]+connection|connection)[\s]+to[\s]+Global[\s]+PRO[\s]+data[\s]+collector[\s]+at[\s]+(?<hostip>.*)$" }
				id => "message-00538:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00538:05"
					"[rsa][message][id1]" => "00538:05"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:06
		# line in RSA: Device has connected to the {Global PRO <fld2>|Global PRO} primary data collector at <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Device[\s]+has[\s]+connected[\s]+to[\s]+the[\s]+(Global[\s]+PRO[\s]+(?<fld2>[^\s]*)|Global[\s]+PRO)[\s]+primary[\s]+data[\s]+collector[\s]+at[\s]+(?<hostip>.*)$" }
				id => "message-00538:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00538:06"
					"[rsa][message][id1]" => "00538:06"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:07
		# line in RSA: Connection to Global PRO data collector at <hostip> {has been|has} <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Connection[\s]+to[\s]+Global[\s]+PRO[\s]+data[\s]+collector[\s]+at[\s]+(?<hostip>[^\s]*)[\s]+(has[\s]+been|has)[\s]+(?<disposition>.*)$" }
				id => "message-00538:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00538:07"
					"[rsa][message][id1]" => "00538:07"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:08
		# line in RSA: Cannot connect to Global PRO data collector at <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot connect to Global PRO data collector at %{hostip}" }
				id => "message-00538:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00538:08"
					"[rsa][message][id1]" => "00538:08"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00538:09
		# line in RSA:  NSM: Connected to NSM server at <hostip> (<info>) (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSM: Connected to NSM server at %{hostip} (%{info}) (%{fld1})" }
				id => "message-00538:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Connected to NSM server"
					"[event][id]" => "00538:09"
					"[rsa][message][id1]" => "00538:09"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00538:10
		# line in RSA:  NSM: Connection to NSM server at <hostip> is down. Reason: <resultcode>,  <result> {(<info>) (<fld1>) | (<fld1>)}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*NSM:[\s]+Connection[\s]+to[\s]+NSM[\s]+server[\s]+at[\s]+(?<hostip>[^\s]*)[\s]+is[\s]+down\.[\s]+Reason:[\s]+(?<resultcode>[^,]*),[\s]+(?<result>[^\s]*)[\s]+(\((?<info>[^\)]*)\)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*\((?<fld1>[^\)]*)\))$" }
				id => "message-00538:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Connection to NSM server is down"
					"[event][id]" => "00538:10"
					"[rsa][message][id1]" => "00538:10"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00538:11
		# line in RSA:  NSM: Cannot connect to NSM server at <hostip>. Reason: <resultcode>,  <result> (<info>) (<fld2> connect attempt(s)) (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSM: Cannot connect to NSM server at %{hostip}. Reason: %{resultcode},  %{result} (%{info}) (%{fld2} connect attempt(s)) (%{fld1})" }
				id => "message-00538:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Cannot connect to NSM server"
					"[event][id]" => "00538:11"
					"[rsa][message][id1]" => "00538:11"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00538:12
		# line in RSA:  NSM: Cannot connect to NSM server at <hostip>. Reason: <resultcode>,  <result> (<info>) (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSM: Cannot connect to NSM server at %{hostip}. Reason: %{resultcode},  %{result} (%{info}) (%{fld1})" }
				id => "message-00538:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Cannot connect to NSM server"
					"[event][id]" => "00538:12"
					"[rsa][message][id1]" => "00538:12"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00538:13
		# line in RSA:  NSM: Sent 2B message (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NSM: Sent 2B message (%{fld1})" }
				id => "message-00538:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Sent 2B message"
					"[event][id]" => "00538:13"
					"[rsa][message][id1]" => "00538:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00539" {
		# MESSAGE 00539
		# line in RSA: No IP address in L2TP IP pool for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No IP address in L2TP IP pool for user %{username}" }
				id => "message-00539"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00539"
					"[rsa][message][id1]" => "00539"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00539:01
		# line in RSA: No L2TP IP pool for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No L2TP IP pool for user %{username}" }
				id => "message-00539:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00539:01"
					"[rsa][message][id1]" => "00539:01"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00539:02
		# line in RSA: Cannot allocate IP addr from Pool <group_object> for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot allocate IP addr from Pool %{group_object} for user %{username}" }
				id => "message-00539:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00539:02"
					"[rsa][message][id1]" => "00539:02"
					"[event][categoryid]" => "1603090000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00539:03
		# line in RSA: Dialup HDLC PPP failed to establish a session: <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dialup HDLC PPP failed to establish a session: %{fld2}." }
				id => "message-00539:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00539:03"
					"[rsa][message][id1]" => "00539:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00539:04
		# line in RSA: Dialup HDLC PPP session has successfully established.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dialup HDLC PPP session has successfully established." }
				id => "message-00539:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00539:04"
					"[rsa][message][id1]" => "00539:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00539:05
		# line in RSA: No IP Pool has been assigned. You cannot allocate an IP address
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No IP Pool has been assigned. You cannot allocate an IP address" }
				id => "message-00539:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00539:05"
					"[rsa][message][id1]" => "00539:05"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00539:06
		# line in RSA: PPP settings changed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPP settings changed." }
				id => "message-00539:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00539:06"
					"[rsa][message][id1]" => "00539:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00541" {
		# MESSAGE 00541
		# line in RSA: ScreenOS <fld2> serial # <serial_number>: Asset recovery has been <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ScreenOS %{fld2} serial # %{serial_number}: Asset recovery has been %{disposition}" }
				id => "message-00541"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00541"
					"[rsa][message][id1]" => "00541"
					"[event][categoryid]" => "1603040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00541:01
		# line in RSA: Neighbor router ID - <fld2> IP address - <hostip> changed its state to <change_new>. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Neighbor router ID - %{fld2} IP address - %{hostip} changed its state to %{change_new}. (%{fld1})" }
				id => "message-00541:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00541:01"
					"[rsa][message][id1]" => "00541:01"
					"[event][categoryid]" => "1805000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00541:02
		# line in RSA: The system killed OSPF neighbor because the current router could not see itself in the hello packet. Neighbor changed state from <change_old> to <change_new> state, (neighbor router-id 1<fld2>, ip-address <hostip>). (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system killed OSPF neighbor because the current router could not see itself in the hello packet. Neighbor changed state from %{change_old} to %{change_new} state, (neighbor router-id 1%{fld2}, ip-address %{hostip}). (%{fld1})" }
				id => "message-00541:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00541:02"
					"[rsa][message][id1]" => "00541:02"
					"[event][categoryid]" => "1805000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00541:03
		# line in RSA: LSA in following area aged out: LSA area ID <fld3>, LSA ID <fld4>, router ID <fld2>, type <fld7> in OSPF. { (<fld1>)<<<fld16>> | (<fld1>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^LSA[\s]+in[\s]+following[\s]+area[\s]+aged[\s]+out:[\s]+LSA[\s]+area[\s]+ID[\s]+(?<fld3>[^,]*),[\s]+LSA[\s]+ID[\s]+(?<fld4>[^,]*),[\s]+router[\s]+ID[\s]+(?<fld2>[^,]*),[\s]+type[\s]+(?<fld7>[^\s]*)[\s]+in[\s]+OSPF\.[\s]+([\s]*\((?<fld1>[^\)]*)\)<(?<fld16>[^>]*)>[\s]+|[\s]*\((?<fld1>[^\)]*)\)[\s]+)$" }
				id => "message-00541:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00541:03"
					"[rsa][message][id1]" => "00541:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1031
	# line in RSA: BGP of vr: <node>, prefix adding: <fld2>, ribin overflow <fld3> times (max rib-in <fld4>)
	else if [logstash][msgparser][id] == "msgParserId1031" {
		dissect {
			mapping => { "message" => "BGP of vr: %{node}, prefix adding: %{fld2}, ribin overflow %{fld3} times (max rib-in %{fld4})" }
			id => "msgParserId1031"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1032
	# line in RSA: Access for { WebAuth firewall | firewall } user <username><space>at <hostip> (accepted at <fld2> for duration <duration> via the <logon_type>) { by policy id <policy_id> is | is } now over (<fld1>)
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId1033
	# line in RSA: User <username> [ of group <group> ] at <hostip> has been challenged by the RADIUS server at <daddr> 
	else if [logstash][msgparser][id] == "msgParserId1033" {
		dissect {
			mapping => { "message" => "User %{username} [ of group %{group} ] at %{hostip} has been challenged by the RADIUS server at %{daddr}" }
			id => "msgParserId1033"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "RADIUS server challenge"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1034
	# line in RSA:  delete-route-> trust-vr: <fld2>
	else if [logstash][msgparser][id] == "msgParserId1034" {
		dissect {
			mapping => { "message" => "delete-route-> trust-vr: %{fld2}" }
			id => "msgParserId1034"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00547" {
		# MESSAGE 00547
		# line in RSA: AV: Content from <saddr>:<sport>-><daddr>:<dport> was not scanned because max content size was exceeded.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AV: Content from %{saddr}:%{sport}->%{daddr}:%{dport} was not scanned because max content size was exceeded." }
				id => "message-00547"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00547"
					"[rsa][message][id1]" => "00547"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00547:01
		# line in RSA: AV: Content from <saddr>:<sport>-><daddr>:<dport> was not scanned due to a scan engine error or constraint.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AV: Content from %{saddr}:%{sport}->%{daddr}:%{dport} was not scanned due to a scan engine error or constraint." }
				id => "message-00547:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
					"[event][id]" => "00547:01"
					"[rsa][message][id1]" => "00547:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00547:02
		# line in RSA: AV object scan-mgr data has been <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AV object scan-mgr data has been %{disposition}." }
				id => "message-00547:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00547:02"
					"[rsa][message][id1]" => "00547:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00547:03
		# line in RSA:  AV: Content from <location_desc>, http url: <url>, is passed { due to | because } <result>. (<event_time_string>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AV:[\s]+Content[\s]+from[\s]+(?<location_desc>[^,]*),[\s]+http[\s]+url:[\s]+(?<url>[^,]*),[\s]+is[\s]+passed[\s]+([\s]*due[\s]+to[\s]+|[\s]*because[\s]+)[\s]+(?<result>[^\.]*)\.[\s]+\((?<event_time_string>[^\)]*)\)$" }
				id => "message-00547:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"event_description" => "Content is bypassed for connection"
					"[event][id]" => "00547:03"
					"[rsa][message][id1]" => "00547:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1039
	# line in RSA:  add-route-> untrust-vr: <fld2>
	else if [logstash][msgparser][id] == "msgParserId1039" {
		dissect {
			mapping => { "message" => "add-route-> untrust-vr: %{fld2}" }
			id => "msgParserId1039"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00551" {
		# MESSAGE 00551
		# line in RSA: Error <resultcode> occurred during configlet file processing.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error %{resultcode} occurred during configlet file processing." }
				id => "message-00551"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00551"
					"[rsa][message][id1]" => "00551"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00551:01
		# line in RSA: Error <resultcode> occurred, causing failure to establish secure management with Management System.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error %{resultcode} occurred, causing failure to establish secure management with Management System." }
				id => "message-00551:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00551:01"
					"[rsa][message][id1]" => "00551:01"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00551:02
		# line in RSA: Configlet file { decryption | authentication } <disposition>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Configlet[\s]+file[\s]+([\s]*decryption[\s]+|[\s]*authentication[\s]+)[\s]+(?<disposition>[^\.]*)\.$" }
				id => "message-00551:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00551:02"
					"[rsa][message][id1]" => "00551:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00551:03
		# line in RSA: Rapid Deployment cannot start because gateway has undergone configuration changes. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Rapid Deployment cannot start because gateway has undergone configuration changes. (%{fld1})" }
				id => "message-00551:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00551:03"
					"[rsa][message][id1]" => "00551:03"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00551:04
		# line in RSA: Secure management established successfully with remote server. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Secure management established successfully with remote server. (%{fld1})" }
				id => "message-00551:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00551:04"
					"[rsa][message][id1]" => "00551:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00553" {
		# MESSAGE 00553
		# line in RSA: SCAN-MGR: Failed to get { AltServer | Version | Path_GateLockCE } from server.ini file.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Failed[\s]+to[\s]+get[\s]+([\s]*AltServer[\s]+|[\s]*Version[\s]+|[\s]*Path_GateLockCE[\s]+)[\s]+from[\s]+server\.ini[\s]+file\.$" }
				id => "message-00553"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553"
					"[rsa][message][id1]" => "00553"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:01
		# line in RSA: SCAN-MGR: Zero pattern size from server.ini.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Zero pattern size from server.ini." }
				id => "message-00553:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:01"
					"[rsa][message][id1]" => "00553:01"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:02
		# line in RSA: SCAN-MGR: Pattern size from server.ini is too large: <bytes> (bytes).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Pattern size from server.ini is too large: %{bytes} (bytes)." }
				id => "message-00553:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:02"
					"[rsa][message][id1]" => "00553:02"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:03
		# line in RSA: SCAN-MGR: Pattern URL from server.ini is too long: <fld2>; max is <fld3>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Pattern URL from server.ini is too long: %{fld2}; max is %{fld3}." }
				id => "message-00553:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:03"
					"[rsa][message][id1]" => "00553:03"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:04
		# line in RSA: SCAN-MGR: Failed to retrieve { pattern | server.ini } file: <fld2>; http status code: <resultcode>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Failed[\s]+to[\s]+retrieve[\s]+([\s]*pattern[\s]+|[\s]*server\.ini[\s]+)[\s]+file:[\s]+(?<fld2>[^;]*);[\s]+http[\s]+status[\s]+code:[\s]+(?<resultcode>[^\.]*)\.$" }
				id => "message-00553:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:04"
					"[rsa][message][id1]" => "00553:04"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:05
		# line in RSA: SCAN-MGR: Failed to write pattern into a RAM file.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Failed to write pattern into a RAM file." }
				id => "message-00553:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:05"
					"[rsa][message][id1]" => "00553:05"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:06
		# line in RSA: SCAN-MGR: Check Pattern File failed: code from VSAPI: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Check Pattern File failed: code from VSAPI: %{resultcode}" }
				id => "message-00553:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:06"
					"[rsa][message][id1]" => "00553:06"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:07
		# line in RSA: SCAN-MGR: Failed to write pattern into flash.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Failed to write pattern into flash." }
				id => "message-00553:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:07"
					"[rsa][message][id1]" => "00553:07"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:08
		# line in RSA: SCAN-MGR: Internal error while setting up for retrieving { server.ini | pattern } file.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Internal[\s]+error[\s]+while[\s]+setting[\s]+up[\s]+for[\s]+retrieving[\s]+([\s]*server\.ini[\s]+|[\s]*pattern[\s]+)[\s]+file\.$" }
				id => "message-00553:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:08"
					"[rsa][message][id1]" => "00553:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:09
		# line in RSA: SCAN-MGR: <fld2> <disposition>: Err: <resultcode>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: %{fld2} %{disposition}: Err: %{resultcode}." }
				id => "message-00553:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:09"
					"[rsa][message][id1]" => "00553:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:10
		# line in RSA: SCAN-MGR: TMIntCPVSInit <disposition> due to <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: TMIntCPVSInit %{disposition} due to %{result}" }
				id => "message-00553:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:10"
					"[rsa][message][id1]" => "00553:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:11
		# line in RSA: SCAN-MGR: Attempted Pattern Creation Date(<fld2>) is after AV Key Expiration date(<fld3>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Attempted Pattern Creation Date(%{fld2}) is after AV Key Expiration date(%{fld3})." }
				id => "message-00553:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:11"
					"[rsa][message][id1]" => "00553:11"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:12
		# line in RSA: SCAN-MGR: TMIntSetDecompressLayer <disposition>: Layer: <fld2>, Err: <resultcode>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: TMIntSetDecompressLayer %{disposition}: Layer: %{fld2}, Err: %{resultcode}." }
				id => "message-00553:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:12"
					"[rsa][message][id1]" => "00553:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:13
		# line in RSA: SCAN-MGR: TMIntSetExtractFileSizeLimit <disposition>: Limit: <fld2>, Err: <resultcode>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: TMIntSetExtractFileSizeLimit %{disposition}: Limit: %{fld2}, Err: %{resultcode}." }
				id => "message-00553:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:13"
					"[rsa][message][id1]" => "00553:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:14
		# line in RSA: SCAN-MGR: TMIntScanFile <disposition>: ret: <fld2>; cpapiErrCode: <resultcode>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: TMIntScanFile %{disposition}: ret: %{fld2}; cpapiErrCode: %{resultcode}." }
				id => "message-00553:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:14"
					"[rsa][message][id1]" => "00553:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:15
		# line in RSA: SCAN-MGR: VSAPI resource usage error. Left usage: <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: VSAPI resource usage error. Left usage: %{fld2}." }
				id => "message-00553:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:15"
					"[rsa][message][id1]" => "00553:15"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:16
		# line in RSA: SCAN-MGR: Set decompress layer to <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Set decompress layer to %{fld2}." }
				id => "message-00553:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:16"
					"[rsa][message][id1]" => "00553:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:17
		# line in RSA: SCAN-MGR: Set maximum content size to <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Set maximum content size to %{fld2}." }
				id => "message-00553:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:17"
					"[rsa][message][id1]" => "00553:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:18
		# line in RSA: SCAN-MGR: Set maximum number of concurrent messages to <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Set maximum number of concurrent messages to %{fld2}." }
				id => "message-00553:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:18"
					"[rsa][message][id1]" => "00553:18"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:19
		# line in RSA: SCAN-MGR: Set drop if maximum number of concurrent messages exceeds max to <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Set drop if maximum number of concurrent messages exceeds max to %{fld2}." }
				id => "message-00553:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:19"
					"[rsa][message][id1]" => "00553:19"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:20
		# line in RSA: SCAN-MGR: Set Pattern URL to <fld2>; update interval is <fld3>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Set Pattern URL to %{fld2}; update interval is %{fld3}." }
				id => "message-00553:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:20"
					"[rsa][message][id1]" => "00553:20"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:21
		# line in RSA: SCAN-MGR: Unset Pattern URL; Pattern will not be updated automatically.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Unset Pattern URL; Pattern will not be updated automatically." }
				id => "message-00553:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:21"
					"[rsa][message][id1]" => "00553:21"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00553:22
		# line in RSA: SCAN-MGR: New pattern updated: version: <version>, size: <bytes> (bytes).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: New pattern updated: version: %{version}, size: %{bytes} (bytes)." }
				id => "message-00553:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00553:22"
					"[rsa][message][id1]" => "00553:22"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "00554" {
		# MESSAGE 00554
		# line in RSA: SCAN-MGR: Cannot get { AltServer info | Version number | Path_GateLockCE info } from server.ini file.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Cannot[\s]+get[\s]+([\s]*AltServer[\s]+info[\s]+|[\s]*Version[\s]+number[\s]+|[\s]*Path_GateLockCE[\s]+info[\s]+)[\s]+from[\s]+server\.ini[\s]+file\.$" }
				id => "message-00554"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554"
					"[rsa][message][id1]" => "00554"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:01
		# line in RSA: SCAN-MGR: Per server.ini file, the AV pattern file size is zero.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Per server.ini file, the AV pattern file size is zero." }
				id => "message-00554:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:01"
					"[rsa][message][id1]" => "00554:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:02
		# line in RSA: SCAN-MGR: AV pattern file size is too large (<bytes> bytes).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: AV pattern file size is too large (%{bytes} bytes)." }
				id => "message-00554:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:02"
					"[rsa][message][id1]" => "00554:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:03
		# line in RSA: SCAN-MGR: Alternate AV pattern file server URL is too long: <bytes> bytes. Max: <fld2> bytes.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Alternate AV pattern file server URL is too long: %{bytes} bytes. Max: %{fld2} bytes." }
				id => "message-00554:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:03"
					"[rsa][message][id1]" => "00554:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:04
		# line in RSA: SCAN-MGR: Cannot retrieve { server.ini | AV pattern } file from <hostip>:<network_port>. HTTP status code: <fld2>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Cannot[\s]+retrieve[\s]+([\s]*server\.ini[\s]+|[\s]*AV[\s]+pattern[\s]+)[\s]+file[\s]+from[\s]+(?<hostip>[^:]*):(?<network_port>[^\.]*)\.[\s]+HTTP[\s]+status[\s]+code:[\s]+(?<fld2>[^\.]*)\.$" }
				id => "message-00554:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:04"
					"[rsa][message][id1]" => "00554:04"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:05
		# line in RSA: SCAN-MGR: Cannot write AV pattern file to { RAM | flash }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Cannot[\s]+write[\s]+AV[\s]+pattern[\s]+file[\s]+to[\s]+([\s]*RAM[\s]+|[\s]*flash[\s]+)\.$" }
				id => "message-00554:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:05"
					"[rsa][message][id1]" => "00554:05"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:06
		# line in RSA: SCAN-MGR: Cannot check AV pattern file. VSAPI code: <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Cannot check AV pattern file. VSAPI code: %{fld2}" }
				id => "message-00554:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:06"
					"[rsa][message][id1]" => "00554:06"
					"[event][categoryid]" => "1601000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:07
		# line in RSA: SCAN-MGR: Internal error occurred while retrieving { server.ini | AV pattern } file.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Internal[\s]+error[\s]+occurred[\s]+while[\s]+retrieving[\s]+([\s]*server\.ini[\s]+|[\s]*AV[\s]+pattern[\s]+)[\s]+file\.$" }
				id => "message-00554:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:07"
					"[rsa][message][id1]" => "00554:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:08
		# line in RSA: SCAN-MGR: Internal error occurred when calling this function: <fld2>. <fld3> { Error: <resultcode> | Returned a NULL VSC handler | cpapiErrCode: <resultcode> }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Internal[\s]+error[\s]+occurred[\s]+when[\s]+calling[\s]+this[\s]+function:[\s]+(?<fld2>[^\.]*)\.[\s]+(?<fld3>[^\s]*)[\s]+([\s]*Error:[\s]+(?<resultcode>[^\s]*)[\s]+|[\s]*Returned[\s]+a[\s]+NULL[\s]+VSC[\s]+handler[\s]+|[\s]*cpapiErrCode:[\s]+(?<resultcode>[^\s]*)[\s]+)\.$" }
				id => "message-00554:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:08"
					"[rsa][message][id1]" => "00554:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:09
		# line in RSA: SCAN-MGR: Number of decompression layers has been set to <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Number of decompression layers has been set to %{fld2}." }
				id => "message-00554:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:09"
					"[rsa][message][id1]" => "00554:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:10
		# line in RSA: SCAN-MGR: Maximum content size has been set to <fld2> KB.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Maximum content size has been set to %{fld2} KB." }
				id => "message-00554:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:10"
					"[rsa][message][id1]" => "00554:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:11
		# line in RSA: SCAN-MGR: Maximum number of concurrent messages has been set to <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Maximum number of concurrent messages has been set to %{fld2}." }
				id => "message-00554:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:11"
					"[rsa][message][id1]" => "00554:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:12
		# line in RSA: SCAN-MGR: Fail mode has been set to { drop | pass } unexamined traffic if { content size | number of concurrent messages } exceeds max.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SCAN\-MGR:[\s]+Fail[\s]+mode[\s]+has[\s]+been[\s]+set[\s]+to[\s]+([\s]*drop[\s]+|[\s]*pass[\s]+)[\s]+unexamined[\s]+traffic[\s]+if[\s]+([\s]*content[\s]+size[\s]+|[\s]*number[\s]+of[\s]+concurrent[\s]+messages[\s]+)[\s]+exceeds[\s]+max\.$" }
				id => "message-00554:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:12"
					"[rsa][message][id1]" => "00554:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:13
		# line in RSA: SCAN-MGR: URL for AV pattern update server has been set to <fld2>, and the update interval to <fld3> minutes.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: URL for AV pattern update server has been set to %{fld2}, and the update interval to %{fld3} minutes." }
				id => "message-00554:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:13"
					"[rsa][message][id1]" => "00554:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:14
		# line in RSA: SCAN-MGR: URL for AV pattern update server has been unset, and the update interval returned to its default.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: URL for AV pattern update server has been unset, and the update interval returned to its default." }
				id => "message-00554:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:14"
					"[rsa][message][id1]" => "00554:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:15
		# line in RSA: SCAN-MGR: New AV pattern file has been updated. Version: <version>; size: <bytes> bytes.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: New AV pattern file has been updated. Version: %{version}; size: %{bytes} bytes." }
				id => "message-00554:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:15"
					"[rsa][message][id1]" => "00554:15"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:16
		# line in RSA: SCAN-MGR: AV client has exceeded its resource allotment. Remaining available resources: <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: AV client has exceeded its resource allotment. Remaining available resources: %{fld2}." }
				id => "message-00554:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:16"
					"[rsa][message][id1]" => "00554:16"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00554:17
		# line in RSA: SCAN-MGR: Attempted to load AV pattern file created <fld2> after the AV subscription expired. (Exp: <fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SCAN-MGR: Attempted to load AV pattern file created %{fld2} after the AV subscription expired. (Exp: %{fld3})" }
				id => "message-00554:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00554:17"
					"[rsa][message][id1]" => "00554:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1086
	# line in RSA: Vrouter <node> PIMSM cannot process non-multicast address <hostip>
	else if [logstash][msgparser][id] == "msgParserId1086" {
		dissect {
			mapping => { "message" => "Vrouter %{node} PIMSM cannot process non-multicast address %{hostip}" }
			id => "msgParserId1086"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "00556" {
		# MESSAGE 00556
		# line in RSA: UF-MGR: Failed to process a request. Reason: <result> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: Failed to process a request. Reason: %{result}" }
				id => "message-00556"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556"
					"[rsa][message][id1]" => "00556"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:01
		# line in RSA: UF-MGR: Failed to abort a transaction. Reason: <result> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: Failed to abort a transaction. Reason: %{result}" }
				id => "message-00556:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:01"
					"[rsa][message][id1]" => "00556:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:02
		# line in RSA: UF-MGR: UF {K|k}ey {Expired|expired} (expiration date: <fld2>; current date: <fld3>).
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+UF[\s]+(K|k)ey[\s]+(Expired|expired)[\s]+\(expiration[\s]+date:[\s]+(?<fld2>[^;]*);[\s]+current[\s]+date:[\s]+(?<fld3>[^\)]*)\)\.$" }
				id => "message-00556:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:02"
					"[rsa][message][id1]" => "00556:02"
					"[event][categoryid]" => "1608000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:03
		# line in RSA: UF-MGR: Failed to { enable | disable } cache. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+Failed[\s]+to[\s]+([\s]*enable[\s]+|[\s]*disable[\s]+)[\s]+cache\.[\s]+$" }
				id => "message-00556:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:03"
					"[rsa][message][id1]" => "00556:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:04
		# line in RSA: UF-MGR: Internal Error: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: Internal Error: %{resultcode}" }
				id => "message-00556:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:04"
					"[rsa][message][id1]" => "00556:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:05
		# line in RSA: UF-MGR: Cache size changed to <fld2>(K).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: Cache size changed to %{fld2}(K)." }
				id => "message-00556:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:05"
					"[rsa][message][id1]" => "00556:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:06
		# line in RSA: UF-MGR: Cache timeout changes to <fld2> (hours).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: Cache timeout changes to %{fld2} (hours)." }
				id => "message-00556:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:06"
					"[rsa][message][id1]" => "00556:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:07
		# line in RSA: UF-MGR: Category update interval changed to <fld2> (weeks).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: Category update interval changed to %{fld2} (weeks)." }
				id => "message-00556:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:07"
					"[rsa][message][id1]" => "00556:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:08
		# line in RSA: UF-MGR: Cache { enabled | disabled }. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+Cache[\s]+([\s]*enabled[\s]+|[\s]*disabled[\s]+)\.[\s]+$" }
				id => "message-00556:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:08"
					"[rsa][message][id1]" => "00556:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:09
		# line in RSA: UF-MGR: URL BLOCKED: ip_addr (<fld2>) -> ip_addr (<fld3>), <fld4> action: <disposition>, category: <fld5>, reason <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: URL BLOCKED: ip_addr (%{fld2}) -> ip_addr (%{fld3}), %{fld4} action: %{disposition}, category: %{fld5}, reason %{result}" }
				id => "message-00556:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"action" => "%{disposition}"
					"[event][id]" => "00556:09"
					"[rsa][message][id1]" => "00556:09"
					"[event][categoryid]" => "1201000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:10
		# line in RSA: UF-MGR: URL FILTER ERR: ip_addr (<fld2>) -> ip_addr (<fld3>), host: <fld5> page: <fld4> code: <resultcode> reason: <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: URL FILTER ERR: ip_addr (%{fld2}) -> ip_addr (%{fld3}), host: %{fld5} page: %{fld4} code: %{resultcode} reason: %{result}." }
				id => "message-00556:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:10"
					"[rsa][message][id1]" => "00556:10"
					"[event][categoryid]" => "1201000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:11
		# line in RSA: UF-MGR: Primary CPA server changed to <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: Primary CPA server changed to %{fld2}" }
				id => "message-00556:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:11"
					"[rsa][message][id1]" => "00556:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:12
		# line in RSA: UF-MGR: <fld2> CPA server { port | host } changed to <fld3>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+(?<fld2>[^\s]*)[\s]+CPA[\s]+server[\s]+([\s]*port[\s]+|[\s]*host[\s]+)[\s]+changed[\s]+to[\s]+(?<fld3>[^\.]*)\.$" }
				id => "message-00556:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:12"
					"[rsa][message][id1]" => "00556:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:13
		# line in RSA: UF-MGR: SurfControl URL filtering <disposition>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: SurfControl URL filtering %{disposition}." }
				id => "message-00556:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:13"
					"[rsa][message][id1]" => "00556:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:14
		# line in RSA: UF-MGR: The url <url> was { added into | removed from } category <fld2>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+The[\s]+url[\s]+(?<url>[^\s]*)[\s]+was[\s]+([\s]*added[\s]+into[\s]+|[\s]*removed[\s]+from[\s]+)[\s]+category[\s]+(?<fld2>[^\.]*)\.$" }
				id => "message-00556:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:14"
					"[rsa][message][id1]" => "00556:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:15
		# line in RSA: UF-MGR: The category <fld2> was { added into | removed from } profile <fld3> with action <disposition>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+The[\s]+category[\s]+(?<fld2>[^\s]*)[\s]+was[\s]+([\s]*added[\s]+into[\s]+|[\s]*removed[\s]+from[\s]+)[\s]+profile[\s]+(?<fld3>[^\s]*)[\s]+with[\s]+action[\s]+(?<disposition>[^\.]*)\.$" }
				id => "message-00556:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"action" => "%{disposition}"
					"[event][id]" => "00556:15"
					"[rsa][message][id1]" => "00556:15"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:16
		# line in RSA: UF-MGR: The { profile | category } <fld2> was { created | removed }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+The[\s]+([\s]*profile[\s]+|[\s]*category[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+was[\s]+([\s]*created[\s]+|[\s]*removed[\s]+)\.$" }
				id => "message-00556:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:16"
					"[rsa][message][id1]" => "00556:16"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:17
		# line in RSA: UF-MGR: The category <fld2> was set in profile <profile> as the { black | white } list.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+The[\s]+category[\s]+(?<fld2>[^\s]*)[\s]+was[\s]+set[\s]+in[\s]+profile[\s]+(?<profile>[^\s]*)[\s]+as[\s]+the[\s]+([\s]*black[\s]+|[\s]*white[\s]+)[\s]+list\.$" }
				id => "message-00556:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:17"
					"[rsa][message][id1]" => "00556:17"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:18
		# line in RSA: UF-MGR: The action for <fld2> in profile <profile> was { set | changed } to <fld3>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+The[\s]+action[\s]+for[\s]+(?<fld2>[^\s]*)[\s]+in[\s]+profile[\s]+(?<profile>[^\s]*)[\s]+was[\s]+([\s]*set[\s]+|[\s]*changed[\s]+)[\s]+to[\s]+(?<fld3>[^\.]*)\.$" }
				id => "message-00556:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:18"
					"[rsa][message][id1]" => "00556:18"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:20
		# line in RSA: UF-MGR: The category list from the CPA server { has been | is } updated { onto | on } the device.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UF\-MGR:[\s]+The[\s]+category[\s]+list[\s]+from[\s]+the[\s]+CPA[\s]+server[\s]+([\s]*has[\s]+been[\s]+|[\s]*is[\s]+)[\s]+updated[\s]+([\s]*onto[\s]+|[\s]*on[\s]+)[\s]+the[\s]+device\.$" }
				id => "message-00556:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:20"
					"[rsa][message][id1]" => "00556:20"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00556:21
		# line in RSA: UF-MGR: URL BLOCKED: <saddr>(<sport>)-><daddr>(<dport>), <fld2> action: <disposition>, category: <category>, reason: <result> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: URL BLOCKED: %{saddr}(%{sport})->%{daddr}(%{dport}), %{fld2} action: %{disposition}, category: %{category}, reason: %{result} (%{fld1})" }
				id => "message-00556:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"action" => "%{disposition}"
					"[event][id]" => "00556:21"
					"[rsa][message][id1]" => "00556:21"
					"[event][categoryid]" => "1201000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00556:22
		# line in RSA: UF-MGR: URL BLOCKED: <saddr>(<sport>)-><daddr>(<dport>), <fld2> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UF-MGR: URL BLOCKED: %{saddr}(%{sport})->%{daddr}(%{dport}), %{fld2} (%{fld1})" }
				id => "message-00556:22"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00556:22"
					"[rsa][message][id1]" => "00556:22"
					"[event][categoryid]" => "1201000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00572" {
		# MESSAGE 00572
		# line in RSA: PPP LCP on interface <interface> is <fld2>. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPP LCP on interface %{interface} is %{fld2}. (%{fld1})" }
				id => "message-00572"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00572"
					"[rsa][message][id1]" => "00572"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00572:01
		# line in RSA: PPP authentication state on interface <interface>: <result>. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPP authentication state on interface %{interface}: %{result}. (%{fld1})" }
				id => "message-00572:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00572:01"
					"[rsa][message][id1]" => "00572:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00572:03
		# line in RSA: PPP on interface <interface> is <disposition> by receiving Terminate-Request. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PPP on interface %{interface} is %{disposition} by receiving Terminate-Request. (%{fld1})" }
				id => "message-00572:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00572:03"
					"[rsa][message][id1]" => "00572:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00615" {
		# MESSAGE 00615
		# line in RSA: PBR policy "<policyname>" rebuilding lookup tree for virtual router "<node>". (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PBR policy \"%{policyname}\" rebuilding lookup tree for virtual router \"%{node}\". (%{fld1})" }
				id => "message-00615"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00615"
					"[rsa][message][id1]" => "00615"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00615:01
		# line in RSA: PBR policy "<policyname>" lookup tree rebuilt successfully in virtual router "<node>". (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PBR policy \"%{policyname}\" lookup tree rebuilt successfully in virtual router \"%{node}\". (%{fld1})" }
				id => "message-00615:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00615:01"
					"[rsa][message][id1]" => "00615:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "00601" {
		# MESSAGE 00601
		# line in RSA: <signame> attack! From <saddr>:<sport> to <daddr>:<dport>, proto <protocol>, through policy <policyname>. Occurred <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} attack! From %{saddr}:%{sport} to %{daddr}:%{dport}, proto %{protocol}, through policy %{policyname}. Occurred %{dclass_counter1} times. (%{fld1})" }
				id => "message-00601"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00601"
					"[rsa][message][id1]" => "00601"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00601:01
		# line in RSA: <signame> has been detected from <saddr>/<sport> to <daddr>/<dport> through policy <policyname> <dclass_counter1> times. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{signame} has been detected from %{saddr}/%{sport} to %{daddr}/%{dport} through policy %{policyname} %{dclass_counter1} times. (%{fld1})" }
				id => "message-00601:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00601:01"
					"[rsa][message][id1]" => "00601:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00601:18
		# line in RSA: Error in initializing multicast.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error in initializing multicast." }
				id => "message-00601:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00601:18"
					"[rsa][message][id1]" => "00601:18"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId1117
	# line in RSA: PIMSM Error in initializing interface state change
	else if [logstash][msgparser][id] == "msgParserId1117" {
		dissect {
			mapping => { "message" => "PIMSM Error in initializing interface state change" }
			id => "msgParserId1117"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1118
	# line in RSA: Switch event: the status of ethernet port <fld2> changed to link { up | down } , duplex { full | half } , speed { 100 | 10 }M. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId1118" {
		grok {
			match => { "message" => "^Switch[\s]+event:[\s]+the[\s]+status[\s]+of[\s]+ethernet[\s]+port[\s]+(?<fld2>[^\s]*)[\s]+changed[\s]+to[\s]+link[\s]+([\s]*up[\s]+|[\s]*down[\s]+)[\s]+,[\s]+duplex[\s]+([\s]*full[\s]+|[\s]*half[\s]+)[\s]+,[\s]+speed[\s]+([\s]*100[\s]+|[\s]*10[\s]+)M\.[\s]+\((?<fld1>[^\)]*)\)$" }
			id => "msgParserId1118"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "00620" {
		# MESSAGE 00620
		# line in RSA: RTSYNC: Event posted to send all the DRP routes to backup device. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTSYNC: Event posted to send all the DRP routes to backup device. (%{fld1})" }
				id => "message-00620"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00620"
					"[rsa][message][id1]" => "00620"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00620:01
		# line in RSA: RTSYNC: {Serviced|Recieved} coldstart request for route synchronization from NSRP peer. (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RTSYNC:[\s]+(Serviced|Recieved)[\s]+coldstart[\s]+request[\s]+for[\s]+route[\s]+synchronization[\s]+from[\s]+NSRP[\s]+peer\.[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00620:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00620:01"
					"[rsa][message][id1]" => "00620:01"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00620:02
		# line in RSA: RTSYNC: Started timer to purge all the DRP backup routes - <fld2> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTSYNC: Started timer to purge all the DRP backup routes - %{fld2} (%{fld1})" }
				id => "message-00620:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00620:02"
					"[rsa][message][id1]" => "00620:02"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00620:03
		# line in RSA: RTSYNC: Event posted to purge backup routes in all vrouters. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTSYNC: Event posted to purge backup routes in all vrouters. (%{fld1})" }
				id => "message-00620:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00620:03"
					"[rsa][message][id1]" => "00620:03"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00620:04
		# line in RSA: RTSYNC: Timer to purge the DRP backup routes is stopped. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RTSYNC: Timer to purge the DRP backup routes is stopped. (%{fld1})" }
				id => "message-00620:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00620:04"
					"[rsa][message][id1]" => "00620:04"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1124
	# line in RSA: NHRP : NHRP instance in virtual router <node> is created. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId1124" {
		dissect {
			mapping => { "message" => "NHRP : NHRP instance in virtual router %{node} is created. (%{fld1})" }
			id => "msgParserId1124"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1125
	# line in RSA: Session (id <sessionid> src-ip <saddr> dst-ip <daddr> dst port <dport>) route is {invalid|valid}. (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId1125" {
		grok {
			match => { "message" => "^Session[\s]+\(id[\s]+(?<sessionid>[^\s]*)[\s]+src\-ip[\s]+(?<saddr>[^\s]*)[\s]+dst\-ip[\s]+(?<daddr>[^\s]*)[\s]+dst[\s]+port[\s]+(?<dport>[^\)]*)\)[\s]+route[\s]+is[\s]+(invalid|valid)\.[\s]+\((?<fld1>[^\)]*)\)$" }
			id => "msgParserId1125"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1126
	# line in RSA: audit log { queue Traffic Log | queue Event Alarm Log | queue Event Log } is overwritten (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId1126" {
		grok {
			match => { "message" => "^audit[\s]+log[\s]+([\s]*queue[\s]+Traffic[\s]+Log[\s]+|[\s]*queue[\s]+Event[\s]+Alarm[\s]+Log[\s]+|[\s]*queue[\s]+Event[\s]+Log[\s]+)[\s]+is[\s]+overwritten[\s]+\((?<fld1>[^\)]*)\)$" }
			id => "msgParserId1126"
			add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "00767" {
		# MESSAGE 00767:50
		# line in RSA: Log setting was modified to <disposition> <fld2> level by admin <administrator> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log setting was modified to %{disposition} %{fld2} level by admin %{administrator} (%{fld1})" }
				id => "message-00767:50"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"action" => "%{disposition}"
					"[event][id]" => "00767:50"
					"[rsa][message][id1]" => "00767:50"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:51
		# line in RSA: Attack CS:Man in Middle is created by <username> via <logon_type> from host <saddr> to <daddr>:<dport> by admin <administrator> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attack CS:Man in Middle is created by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} by admin %{administrator} (%{fld1})" }
				id => "message-00767:51"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:51"
					"[rsa][message][id1]" => "00767:51"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:52
		# line in RSA: Attack group <group> is created by <username> via <logon_type> from host <saddr> to <daddr>:<dport> by admin <administrator> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attack group %{group} is created by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} by admin %{administrator} (%{fld1})" }
				id => "message-00767:52"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:52"
					"[rsa][message][id1]" => "00767:52"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:53
		# line in RSA: Attack CS:Man in Middle is added to attack group <group> by <username> via <logon_type> from host <saddr> to <daddr>:<dport> by admin <administrator> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attack CS:Man in Middle is added to attack group %{group} by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} by admin %{administrator} (%{fld1})" }
				id => "message-00767:53"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:53"
					"[rsa][message][id1]" => "00767:53"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767
		# line in RSA: Cannot contact the SecurID server
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot contact the SecurID server" }
				id => "message-00767"
				add_field => {
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767"
					"[rsa][message][id1]" => "00767"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:01
		# line in RSA: System auto-config of file <fld2> from TFTP server <hostip> has { been loaded successfully | failed }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+auto\-config[\s]+of[\s]+file[\s]+(?<fld2>[^\s]*)[\s]+from[\s]+TFTP[\s]+server[\s]+(?<hostip>[^\s]*)[\s]+has[\s]+([\s]*been[\s]+loaded[\s]+successfully[\s]+|[\s]*failed[\s]+)$" }
				id => "message-00767:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:01"
					"[rsa][message][id1]" => "00767:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:02
		# line in RSA: netscreen: System Config saved from host <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "netscreen: System Config saved from host %{saddr}" }
				id => "message-00767:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:02"
					"[rsa][message][id1]" => "00767:02"
					"[event][categoryid]" => "1702000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:03
		# line in RSA: System Config saved to filename <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System Config saved to filename %{filename}" }
				id => "message-00767:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:03"
					"[rsa][message][id1]" => "00767:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:04
		# line in RSA: System is operational.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System is operational." }
				id => "message-00767:04"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:04"
					"[rsa][message][id1]" => "00767:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:05
		# line in RSA: The device cannot contact the SecurID server
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The device cannot contact the SecurID server" }
				id => "message-00767:05"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:05"
					"[rsa][message][id1]" => "00767:05"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:06
		# line in RSA: The device cannot send data to the SecurID server
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The device cannot send data to the SecurID server" }
				id => "message-00767:06"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:06"
					"[rsa][message][id1]" => "00767:06"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:07
		# line in RSA: The system configuration was saved from peer unit by admin
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system configuration was saved from peer unit by admin" }
				id => "message-00767:07"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:07"
					"[rsa][message][id1]" => "00767:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:08
		# line in RSA: The system configuration was saved by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+system[\s]+configuration[\s]+was[\s]+saved[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00767:08"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:08"
					"[rsa][message][id1]" => "00767:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:09
		# line in RSA: traffic shaping is turned { ON | OFF }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^traffic[\s]+shaping[\s]+is[\s]+turned[\s]+([\s]*ON[\s]+|[\s]*OFF[\s]+)$" }
				id => "message-00767:09"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:09"
					"[rsa][message][id1]" => "00767:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:10
		# line in RSA: The system configuration was saved from host <saddr> by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+system[\s]+configuration[\s]+was[\s]+saved[\s]+from[\s]+host[\s]+(?<saddr>[^\s]*)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00767:10"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:10"
					"[rsa][message][id1]" => "00767:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:11
		# line in RSA: Fatal error. The NetScreen device was unable to upgrade the { loader | file system }, and the { loader | old file system } is damaged.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Fatal[\s]+error\.[\s]+The[\s]+NetScreen[\s]+device[\s]+was[\s]+unable[\s]+to[\s]+upgrade[\s]+the[\s]+([\s]*loader[\s]+|[\s]*file[\s]+system[\s]+),[\s]+and[\s]+the[\s]+([\s]*loader[\s]+|[\s]*old[\s]+file[\s]+system[\s]+)[\s]+is[\s]+damaged\.$" }
				id => "message-00767:11"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:11"
					"[rsa][message][id1]" => "00767:11"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:12
		# line in RSA: System configuration saved by <username> via <logon_type> from host <saddr> to <daddr>:<dport> by <fld2> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System configuration saved by %{username} via %{logon_type} from host %{saddr} to %{daddr}:%{dport} by %{fld2} (%{fld1})" }
				id => "message-00767:12"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:12"
					"[rsa][message][id1]" => "00767:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:13
		# line in RSA: <fld2>Environment variable <fld3> is changed to <fld4> by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^E]*)Environment[\s]+variable[\s]+(?<fld3>[^\s]*)[\s]+is[\s]+changed[\s]+to[\s]+(?<fld4>[^\s]*)[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00767:13"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:13"
					"[rsa][message][id1]" => "00767:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:14
		# line in RSA: System was { reset | shut down } at <fld2> by { admin <administrator> | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+was[\s]+([\s]*reset[\s]+|[\s]*shut[\s]+down[\s]+)[\s]+at[\s]+(?<fld2>[^\s]*)[\s]+by[\s]+([\s]*admin[\s]+(?<administrator>[^\s]*)[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-00767:14"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:14"
					"[rsa][message][id1]" => "00767:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:15
		# line in RSA: <fld2> { System | Event | Traffic } log was reviewed by { admin <username> | <username> }. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^\s]*)[\s]+([\s]*System[\s]+|[\s]*Event[\s]+|[\s]*Traffic[\s]+)[\s]+log[\s]+was[\s]+reviewed[\s]+by[\s]+([\s]*admin[\s]+(?<username>[^\s]*)[\s]+|[\s]*(?<username>[^\s]*)[\s]+)\.[\s]+$" }
				id => "message-00767:15"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:15"
					"[rsa][message][id1]" => "00767:15"
					"[event][categoryid]" => "1612000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:16
		# line in RSA: <fld2> Admin <administrator> issued command <info> to redirect output.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2} Admin %{administrator} issued command %{info} to redirect output." }
				id => "message-00767:16"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:16"
					"[rsa][message][id1]" => "00767:16"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:17
		# line in RSA: <fld2> Save new software from <fld3> to flash by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^\s]*)[\s]+Save[\s]+new[\s]+software[\s]+from[\s]+(?<fld3>[^\s]*)[\s]+to[\s]+flash[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00767:17"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:17"
					"[rsa][message][id1]" => "00767:17"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:18
		# line in RSA: Attack database version <version> has been <fld2> saved to flash.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attack database version %{version} has been %{fld2} saved to flash." }
				id => "message-00767:18"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:18"
					"[rsa][message][id1]" => "00767:18"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:19
		# line in RSA: Attack database version <version> was rejected because the authentication check failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attack database version %{version} was rejected because the authentication check failed." }
				id => "message-00767:19"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:19"
					"[rsa][message][id1]" => "00767:19"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:20
		# line in RSA: The dictionary file version of the RADIUS server <hostname> does not match <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The dictionary file version of the RADIUS server %{hostname} does not match %{fld2}" }
				id => "message-00767:20"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:20"
					"[rsa][message][id1]" => "00767:20"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:21
		# line in RSA: Session (<fld2> <fld3>, <fld4>) cleared <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session (%{fld2} %{fld3}, %{fld4}) cleared %{fld5}" }
				id => "message-00767:21"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:21"
					"[rsa][message][id1]" => "00767:21"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:22
		# line in RSA: The system configuration was not saved {<fld2> by admin <administrator> via NSRP Peer | <fld2> } by administrator <fld3>. { It was locked | Locked } by administrator { <fld4>  (<fld1>) | <fld4> } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^The[\s]+system[\s]+configuration[\s]+was[\s]+not[\s]+saved[\s]+((?<fld2>[^\s]*)[\s]+by[\s]+admin[\s]+(?<administrator>[^\s]*)[\s]+via[\s]+NSRP[\s]+Peer[\s]+|[\s]*(?<fld2>[^\s]*)[\s]+)[\s]+by[\s]+administrator[\s]+(?<fld3>[^\.]*)\.[\s]+([\s]*It[\s]+was[\s]+locked[\s]+|[\s]*Locked[\s]+)[\s]+by[\s]+administrator[\s]+([\s]*(?<fld4>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<fld4>[^\s]*)[\s]+)[\s]+$" }
				id => "message-00767:22"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:22"
					"[rsa][message][id1]" => "00767:22"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:23
		# line in RSA: Save new software from slot filename <filename> to flash memory by administrator <administrator> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Save new software from slot filename %{filename} to flash memory by administrator %{administrator}" }
				id => "message-00767:23"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:23"
					"[rsa][message][id1]" => "00767:23"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:25
		# line in RSA: System configuration saved by <username> via <logon_type> { from host | from } { <saddr>:<sport> by | <saddr> by } <fld2> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+configuration[\s]+saved[\s]+by[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+([\s]*from[\s]+host[\s]+|[\s]*from[\s]+)[\s]+([\s]*(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+by[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+by[\s]+)[\s]+(?<fld2>[^\s]*)[\s]+$" }
				id => "message-00767:25"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:25"
					"[rsa][message][id1]" => "00767:25"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 00767:26
		# line in RSA: Lock configuration {started|ended} by task { <fld3>, with a timeout value of <fld2>|<fld2> (<fld1>)}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Lock[\s]+configuration[\s]+(started|ended)[\s]+by[\s]+task[\s]+([\s]*(?<fld3>[^,]*),[\s]+with[\s]+a[\s]+timeout[\s]+value[\s]+of[\s]+(?<fld2>.*)|(?<fld2>[^\s]*)[\s]+\((?<fld1>[^\)]*)\))$" }
				id => "message-00767:26"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:26"
					"[rsa][message][id1]" => "00767:26"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:27
		# line in RSA: Environment variable <fld2> changed to { <fld3> by <username> (<fld1>) | <fld3> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Environment[\s]+variable[\s]+(?<fld2>[^\s]*)[\s]+changed[\s]+to[\s]+([\s]*(?<fld3>[^\s]*)[\s]+by[\s]+(?<username>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<fld3>[^\s]*)[\s]+)$" }
				id => "message-00767:27"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:27"
					"[rsa][message][id1]" => "00767:27"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:28
		# line in RSA: The system configuration was loaded from IP address <hostip> under filename <filename> by administrator by admin <administrator> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system configuration was loaded from IP address %{hostip} under filename %{filename} by administrator by admin %{administrator} (%{fld1})" }
				id => "message-00767:28"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:28"
					"[rsa][message][id1]" => "00767:28"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:29
		# line in RSA: Save configuration to IP address <hostip> under filename <filename> by administrator by admin <administrator> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Save configuration to IP address %{hostip} under filename %{filename} by administrator by admin %{administrator} (%{fld1})" }
				id => "message-00767:29"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:29"
					"[rsa][message][id1]" => "00767:29"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:30
		# line in RSA: <fld2>: The system configuration was saved from host <saddr> by admin <administrator> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld2}: The system configuration was saved from host %{saddr} by admin %{administrator} (%{fld1})" }
				id => "message-00767:30"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:30"
					"[rsa][message][id1]" => "00767:30"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:31
		# line in RSA: All { logged events or alarms | traffic logs } were cleared by admin { <administrator> (<fld1>) | <administrator> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^All[\s]+([\s]*logged[\s]+events[\s]+or[\s]+alarms[\s]+|[\s]*traffic[\s]+logs[\s]+)[\s]+were[\s]+cleared[\s]+by[\s]+admin[\s]+([\s]*(?<administrator>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<administrator>[^\s]*)[\s]+)$" }
				id => "message-00767:31"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:31"
					"[rsa][message][id1]" => "00767:31"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:32
		# line in RSA: SIP parser error {SIP-field|Message}: <result>(<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SIP[\s]+parser[\s]+error[\s]+(SIP\-field|Message):[\s]+(?<result>[^\(]*)\((?<fld1>[^\)]*)\)$" }
				id => "message-00767:32"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:32"
					"[rsa][message][id1]" => "00767:32"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:33
		# line in RSA: Daylight Saving Time has started. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Daylight Saving Time has started. (%{fld1})" }
				id => "message-00767:33"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:33"
					"[rsa][message][id1]" => "00767:33"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:34
		# line in RSA: NetScreen devices do not support multiple IP addresses <hostip> or ports <network_port> in SIP headers RESPONSE (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NetScreen devices do not support multiple IP addresses %{hostip} or ports %{network_port} in SIP headers RESPONSE (%{fld1})" }
				id => "message-00767:34"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:34"
					"[rsa][message][id1]" => "00767:34"
					"[event][categoryid]" => "1803020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:35
		# line in RSA: Environment variable <fld2> set to <fld3> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Environment variable %{fld2} set to %{fld3} (%{fld1})" }
				id => "message-00767:35"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:35"
					"[rsa][message][id1]" => "00767:35"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:36
		# line in RSA: System configuration saved from <fld2> by <username> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System configuration saved from %{fld2} by %{username} (%{fld1})" }
				id => "message-00767:36"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:36"
					"[rsa][message][id1]" => "00767:36"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:37
		# line in RSA: Trial keys are available to download to enable advanced features. <space> To find out, please visit <url> (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Trial keys are available to download to enable advanced features. %{space} To find out, please visit %{url} (%{fld1})" }
				id => "message-00767:37"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:37"
					"[rsa][message][id1]" => "00767:37"
					"[event][categoryid]" => "1608000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:38
		# line in RSA: Log buffer was full and remaining messages were sent to external destination. <fld2> packets were dropped. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log buffer was full and remaining messages were sent to external destination. %{fld2} packets were dropped. (%{fld1})" }
				id => "message-00767:38"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:38"
					"[rsa][message][id1]" => "00767:38"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:39
		# line in RSA: Cannot { download | parse } attack database { from <url> (<result>). | <fld2> } (<fld1>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Cannot[\s]+([\s]*download[\s]+|[\s]*parse[\s]+)[\s]+attack[\s]+database[\s]+([\s]*from[\s]+(?<url>[^\s]*)[\s]+\((?<result>[^\)]*)\)\.[\s]+|[\s]*(?<fld2>[^\s]*)[\s]+)[\s]+\((?<fld1>[^\)]*)\)[\s]+$" }
				id => "message-00767:39"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:39"
					"[rsa][message][id1]" => "00767:39"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:40
		# line in RSA: Deep Inspection update key is <disposition>. (<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deep Inspection update key is %{disposition}. (%{fld1})" }
				id => "message-00767:40"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:40"
					"[rsa][message][id1]" => "00767:40"
					"[event][categoryid]" => "1608010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:42
		# line in RSA: System configuration saved by <username> via <logon_type> to <daddr>:<dport> by <fld2> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System configuration saved by %{username} via %{logon_type} to %{daddr}:%{dport} by %{fld2} (%{fld1})" }
				id => "message-00767:42"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:42"
					"[rsa][message][id1]" => "00767:42"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:43
		# line in RSA: Daylight Saving Time ended. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Daylight Saving Time ended. (%{fld1})" }
				id => "message-00767:43"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:43"
					"[rsa][message][id1]" => "00767:43"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:44
		# line in RSA: New GMT zone ahead or behind by <fld2> (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "New GMT zone ahead or behind by %{fld2} (%{fld1})" }
				id => "message-00767:44"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:44"
					"[rsa][message][id1]" => "00767:44"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:45
		# line in RSA: Attack database version <version> is saved to flash. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Attack database version %{version} is saved to flash. (%{fld1})" }
				id => "message-00767:45"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:45"
					"[rsa][message][id1]" => "00767:45"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:46
		# line in RSA: System configuration saved by netscreen via <logon_type> by netscreen. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System configuration saved by netscreen via %{logon_type} by netscreen. (%{fld1})" }
				id => "message-00767:46"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:46"
					"[rsa][message][id1]" => "00767:46"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:47
		# line in RSA: User <username> belongs to a different group in the RADIUS server than that allowed in the device. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} belongs to a different group in the RADIUS server than that allowed in the device. (%{fld1})" }
				id => "message-00767:47"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:47"
					"[rsa][message][id1]" => "00767:47"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:24
		# line in RSA: System configuration saved by {admin <administrator>|<username>} via <logon_type> by <fld2> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^System[\s]+configuration[\s]+saved[\s]+by[\s]+(admin[\s]+(?<administrator>[^\s]*)|(?<username>[^\s]*))[\s]+via[\s]+(?<logon_type>[^\s]*)[\s]+by[\s]+(?<fld2>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00767:24"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:24"
					"[rsa][message][id1]" => "00767:24"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:48
		# line in RSA: HA: Synchronization file(s) hidden file end with c sent to backup device in cluster. (<fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HA: Synchronization file(s) hidden file end with c sent to backup device in cluster. (%{fld1})" }
				id => "message-00767:48"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"vsys" => "%{hvsys}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:48"
					"[rsa][message][id1]" => "00767:48"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 00767:49
		# line in RSA: <fld2> turn {on|off} debug switch for <fld3> (<fld1>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld2>[^\s]*)[\s]+turn[\s]+(on|off)[\s]+debug[\s]+switch[\s]+for[\s]+(?<fld3>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)$" }
				id => "message-00767:49"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
					"[event][id]" => "00767:49"
					"[rsa][message][id1]" => "00767:49"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "01269" {
		# MESSAGE 01269
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=<direction> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=%{direction} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} icmp type=%{icmptype}" }
				id => "message-01269"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"disposition" => "Deny"
				"vsys" => "%{hvsys}"
					"[event][id]" => "01269"
					"[rsa][message][id1]" => "01269"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 01269:01
		# line in RSA:  start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=<direction> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=%{direction} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} icmp type=%{icmptype}" }
				id => "message-01269:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "01269:01"
					"[rsa][message][id1]" => "01269:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 01269:02
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} icmp type=%{icmptype}" }
				id => "message-01269:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "01269:02"
					"[rsa][message][id1]" => "01269:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 01269:03
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} icmp type=%{icmptype}" }
				id => "message-01269:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "01269:03"
					"[rsa][message][id1]" => "01269:03"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "17852" {
		# MESSAGE 17852
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=<direction> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=%{direction} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-17852"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "17852"
					"[rsa][message][id1]" => "17852"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 17852:01
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=<direction> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=%{direction} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-17852:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "17852:01"
					"[rsa][message][id1]" => "17852:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 17852:02
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-17852:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "17852:02"
					"[rsa][message][id1]" => "17852:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 17852:03
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-17852:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "17852:03"
					"[rsa][message][id1]" => "17852:03"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "23184" {
		# MESSAGE 23184
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> (<fld3>) proto=<protocol> direction=<direction> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} (%{fld3}) proto=%{protocol} direction=%{direction} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-23184"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "23184"
					"[rsa][message][id1]" => "23184"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 23184:01
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> (<fld3>) proto=<protocol> direction=<direction> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} (%{fld3}) proto=%{protocol} direction=%{direction} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-23184:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "23184:01"
					"[rsa][message][id1]" => "23184:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 23184:02
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> (<fld3>) proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} (%{fld3}) proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-23184:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "23184:02"
					"[rsa][message][id1]" => "23184:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 23184:03
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> (<fld3>) proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} (%{fld3}) proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-23184:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "23184:03"
					"[rsa][message][id1]" => "23184:03"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "27052" {
		# MESSAGE 27052
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> (<fld3>) proto=<protocol> direction=<direction> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} (%{fld3}) proto=%{protocol} direction=%{direction} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-27052"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "27052"
					"[rsa][message][id1]" => "27052"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 27052:01
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> (<fld3>) proto=<protocol>direction=<direction> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} (%{fld3}) proto=%{protocol}direction=%{direction} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport}" }
				id => "message-27052:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "27052:01"
					"[rsa][message][id1]" => "27052:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "39568" {
		# MESSAGE 39568
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=<direction> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=%{direction} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} icmp type=%{icmptype}" }
				id => "message-39568"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"disposition" => "Deny"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
					"[event][id]" => "39568"
					"[rsa][message][id1]" => "39568"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 39568:01
		# line in RSA:  start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> direction=<direction> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} direction=%{direction} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} icmp type=%{icmptype}" }
				id => "message-39568:01"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "39568:01"
					"[rsa][message][id1]" => "39568:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 39568:02
		# line in RSA: start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=Deny sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=Deny sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} icmp type=%{icmptype}" }
				id => "message-39568:02"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "Deny"
				"disposition" => "Deny"
					"[event][id]" => "39568:02"
					"[rsa][message][id1]" => "39568:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 39568:03
		# line in RSA:  start_time="<fld2>" duration=<duration> policy_id=<policy_id> service=<service> proto=<protocol> src zone=<src_zone> dst zone=<dst_zone> action=<disposition> sent=<sbytes> rcvd=<rbytes> src=<saddr> dst=<daddr> icmp type=<icmptype>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "start_time=\"%{fld2}\" duration=%{duration} policy_id=%{policy_id} service=%{service} proto=%{protocol} src zone=%{src_zone} dst zone=%{dst_zone} action=%{disposition} sent=%{sbytes} rcvd=%{rbytes} src=%{saddr} dst=%{daddr} icmp type=%{icmptype}" }
				id => "message-39568:03"
				add_field => {
				"hardware_id" => "%{hfld2}"
				"severity" => "%{hseverity}"
				"vsys" => "%{hvsys}"
				"action" => "%{disposition}"
					"[event][id]" => "39568:03"
					"[rsa][message][id1]" => "39568:03"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_netscreenmsg.json"
#			template_name => "netscreen_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

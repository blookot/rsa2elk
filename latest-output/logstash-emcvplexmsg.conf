# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "emcvplex"
			"[observer][name]" => "EMC VPLEX"
			"[observer][type]" => "Storage"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %EMCVPLEX_<messageid>-4: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%EMCVPLEX_%{messageid}-4: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-emcvplexmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "SESSIONLOG" {
		# MESSAGE CAPTURE:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: capture end
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: capture end" }
				id => "message-CAPTURE:01"
				add_field => {
				"action" => "capture end"
					"[event][id]" => "CAPTURE:01"
					"[rsa][message][id1]" => "CAPTURE:01"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CAPTURE:02
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: capture pause
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: capture pause" }
				id => "message-CAPTURE:02"
				add_field => {
				"action" => "capture pause"
					"[event][id]" => "CAPTURE:02"
					"[rsa][message][id1]" => "CAPTURE:02"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CAPTURE:03
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: capture resume
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: capture resume" }
				id => "message-CAPTURE:03"
				add_field => {
				"action" => "capture resume"
					"[event][id]" => "CAPTURE:03"
					"[rsa][message][id1]" => "CAPTURE:03"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CAPTURE
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: capture <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: capture %{param}" }
				id => "message-CAPTURE"
				add_field => {
				"action" => "capture"
					"[event][id]" => "CAPTURE"
					"[rsa][message][id1]" => "CAPTURE"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CONFIGURATION:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: configuration system-setup
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: configuration system-setup" }
				id => "message-CONFIGURATION:01"
				add_field => {
				"action" => "configuration system-setup"
					"[event][id]" => "CONFIGURATION:01"
					"[rsa][message][id1]" => "CONFIGURATION:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CONFIGURATION
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: configuration <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: configuration %{param}" }
				id => "message-CONFIGURATION"
				add_field => {
				"action" => "configuration "
					"[event][id]" => "CONFIGURATION"
					"[rsa][message][id1]" => "CONFIGURATION"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CONNECT
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: connect <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: connect %{param}" }
				id => "message-CONNECT"
				add_field => {
				"action" => "connect"
					"[event][id]" => "CONNECT"
					"[rsa][message][id1]" => "CONNECT"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DISCONNECT
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: disconnect <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: disconnect %{param}" }
				id => "message-DISCONNECT"
				add_field => {
				"action" => "disconnect"
					"[event][id]" => "DISCONNECT"
					"[rsa][message][id1]" => "DISCONNECT"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DIRECTOR:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: director run <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: director run %{param}" }
				id => "message-DIRECTOR:01"
				add_field => {
				"action" => "director run"
					"[event][id]" => "DIRECTOR:01"
					"[rsa][message][id1]" => "DIRECTOR:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DIRECTOR:02
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: director commission <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: director commission %{param}" }
				id => "message-DIRECTOR:02"
				add_field => {
				"action" => "director commission"
					"[event][id]" => "DIRECTOR:02"
					"[rsa][message][id1]" => "DIRECTOR:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DIRECTOR
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: director <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: director %{param}" }
				id => "message-DIRECTOR"
				add_field => {
				"action" => "director"
					"[event][id]" => "DIRECTOR"
					"[rsa][message][id1]" => "DIRECTOR"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE version
		# line in RSA: <fld1> <fld2>,<fld3> {version <param>|version}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^,]*),(?<fld3>[^\s]*)[\s]+(version[\s]+(?<param>.*)|version)$" }
				id => "message-version"
				add_field => {
				"action" => "version"
					"[event][id]" => "version"
					"[rsa][message][id1]" => "version"
					"[event][categoryid]" => "1702000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE nsfw
		# line in RSA: <fld1> <fld2>,<fld3> nsfw <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} nsfw %{param}" }
				id => "message-nsfw"
				add_field => {
				"action" => "nsfw"
					"[event][id]" => "nsfw"
					"[rsa][message][id1]" => "nsfw"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE array_re-discover
		# line in RSA: <fld1> <fld2>,<fld3> array re-discover <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} array re-discover %{param}" }
				id => "message-array_re-discover"
				add_field => {
				"action" => "array re-discover"
					"[event][id]" => "array_re-discover"
					"[rsa][message][id1]" => "array_re-discover"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Cluster
		# line in RSA: <fld1> <fld2>,<fld3> Cluster <hostname> has active meta-volume '<disk_volume>', which uses storage-volumes (or slices) with these internal IDs:<id1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} Cluster %{hostname} has active meta-volume '%{disk_volume}', which uses storage-volumes (or slices) with these internal IDs:%{id1}" }
				id => "message-Cluster"
				add_field => {
					"[event][id]" => "Cluster"
					"[rsa][message][id1]" => "Cluster"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ds
		# line in RSA: <fld1> <fld2>,<fld3> ds summary
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} ds summary" }
				id => "message-ds"
				add_field => {
				"action" => "ds summary"
					"[event][id]" => "ds"
					"[rsa][message][id1]" => "ds"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE export
		# line in RSA: <fld1> <fld2>,<fld3> export storage-view summary <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} export storage-view summary %{param}" }
				id => "message-export"
				add_field => {
				"action" => "export storage-view summary"
					"[event][id]" => "export"
					"[rsa][message][id1]" => "export"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE rebulid
		# line in RSA: <fld1> <fld2>,<fld3> rebuild status
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} rebuild status" }
				id => "message-rebulid"
				add_field => {
				"action" => "rebuild status"
					"[event][id]" => "rebulid"
					"[rsa][message][id1]" => "rebulid"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE health-check
		# line in RSA: <fld1> <fld2>,<fld3> health-check
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} health-check" }
				id => "message-health-check"
				add_field => {
				"action" => "health-check"
					"[event][id]" => "health-check"
					"[rsa][message][id1]" => "health-check"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE emc-internal
		# line in RSA: <fld1> <fld2>,<fld3> emc-internal <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} emc-internal %{param}" }
				id => "message-emc-internal"
				add_field => {
				"action" => "emc-internal"
					"[event][id]" => "emc-internal"
					"[rsa][message][id1]" => "emc-internal"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE license
		# line in RSA: <fld1> <fld2>,<fld3> license <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} license %{param}" }
				id => "message-license"
				add_field => {
				"action" => "license"
					"[event][id]" => "license"
					"[rsa][message][id1]" => "license"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE syrcollect
		# line in RSA: <fld1> <fld2>,<fld3> syrcollect
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} syrcollect" }
				id => "message-syrcollect"
				add_field => {
				"action" => "syrcollect"
					"[event][id]" => "syrcollect"
					"[rsa][message][id1]" => "syrcollect"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE META_VOLUME:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: meta-volume create <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: meta-volume create %{param}" }
				id => "message-META_VOLUME:01"
				add_field => {
				"action" => "meta-volume create"
					"[event][id]" => "META_VOLUME:01"
					"[rsa][message][id1]" => "META_VOLUME:01"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE META_VOLUME:02
		# line in RSA: <fld1> <fld2>,<fld3> {[<username>@<hostname>:<sessionid>[<network_service>]]: meta-volume backup <param>|meta-volume backup <param>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^,]*),(?<fld3>[^\s]*)[\s]+(\[(?<username>[^@]*)@(?<hostname>[^:]*):(?<sessionid>[^\[]*)\[(?<network_service>[^\]]*)\]\]:[\s]+meta\-volume[\s]+backup[\s]+(?<param>.*)|meta\-volume[\s]+backup[\s]+(?<param>.*))$" }
				id => "message-META_VOLUME:02"
				add_field => {
				"action" => "meta-volume backup"
					"[event][id]" => "META_VOLUME:02"
					"[rsa][message][id1]" => "META_VOLUME:02"
					"[event][categoryid]" => "1701050000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE META_VOLUME:03
		# line in RSA: <fld1> <fld2>,<fld3> {[<username>@<hostname>:<sessionid>[<network_service>]]: meta-volume destroy <param>|meta-volume destroy <param>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^,]*),(?<fld3>[^\s]*)[\s]+(\[(?<username>[^@]*)@(?<hostname>[^:]*):(?<sessionid>[^\[]*)\[(?<network_service>[^\]]*)\]\]:[\s]+meta\-volume[\s]+destroy[\s]+(?<param>.*)|meta\-volume[\s]+destroy[\s]+(?<param>.*))$" }
				id => "message-META_VOLUME:03"
				add_field => {
				"action" => "meta-volume destroy"
					"[event][id]" => "META_VOLUME:03"
					"[rsa][message][id1]" => "META_VOLUME:03"
					"[event][categoryid]" => "1701030000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE META_VOLUME
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: meta-volume <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: meta-volume %{param}" }
				id => "message-META_VOLUME"
				add_field => {
				"action" => "meta-volume"
					"[event][id]" => "META_VOLUME"
					"[rsa][message][id1]" => "META_VOLUME"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SCHEDULE:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: schedule add <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: schedule add %{param}" }
				id => "message-SCHEDULE:01"
				add_field => {
				"action" => "schedule add"
					"[event][id]" => "SCHEDULE:01"
					"[rsa][message][id1]" => "SCHEDULE:01"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE metadatabackup
		# line in RSA: <fld1> <fld2>,<fld3> metadatabackup local
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} metadatabackup local" }
				id => "message-metadatabackup"
				add_field => {
				"action" => "metadatabackup local"
					"[event][id]" => "metadatabackup"
					"[rsa][message][id1]" => "metadatabackup"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SCHEDULE
		# line in RSA: <fld1><fld2>,<fld3>{[<username>@<hostname>:<sessionid>[<network_service>]]: schedule<param>|schedule<param>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE SET
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: set <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: set %{param}" }
				id => "message-SET"
				add_field => {
				"action" => "set"
					"[event][id]" => "SET"
					"[rsa][message][id1]" => "SET"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SCRIPT:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: script -i <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: script -i %{param}" }
				id => "message-SCRIPT:01"
				add_field => {
				"action" => "script -i"
					"[event][id]" => "SCRIPT:01"
					"[rsa][message][id1]" => "SCRIPT:01"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SCRIPT:02
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: script -u <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: script -u %{param}" }
				id => "message-SCRIPT:02"
				add_field => {
				"action" => "script -u"
					"[event][id]" => "SCRIPT:02"
					"[rsa][message][id1]" => "SCRIPT:02"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SECURITY:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: security create-host-certificate <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: security create-host-certificate %{param}" }
				id => "message-SECURITY:01"
				add_field => {
				"action" => "security create-host-certificate"
					"[event][id]" => "SECURITY:01"
					"[rsa][message][id1]" => "SECURITY:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SECURITY:02
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: security ipsec-configure <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: security ipsec-configure %{param}" }
				id => "message-SECURITY:02"
				add_field => {
				"action" => "security ipsec-configure"
					"[event][id]" => "SECURITY:02"
					"[rsa][message][id1]" => "SECURITY:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SECURITY
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: security <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: security %{param}" }
				id => "message-SECURITY"
				add_field => {
				"action" => "security"
					"[event][id]" => "SECURITY"
					"[rsa][message][id1]" => "SECURITY"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE STORAGE_VOLUME:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: storage-volume claim <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: storage-volume claim %{param}" }
				id => "message-STORAGE_VOLUME:01"
				add_field => {
				"action" => "storage-volume claim"
					"[event][id]" => "STORAGE_VOLUME:01"
					"[rsa][message][id1]" => "STORAGE_VOLUME:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE STORAGE_VOLUME:02
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: storage-volume unclaim <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: storage-volume unclaim %{param}" }
				id => "message-STORAGE_VOLUME:02"
				add_field => {
				"action" => "storage-volume unclaim"
					"[event][id]" => "STORAGE_VOLUME:02"
					"[rsa][message][id1]" => "STORAGE_VOLUME:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE STORAGE_VOLUME
		# line in RSA: <fld1> <fld2>,<fld3> {[<username>@<hostname>:<sessionid>[<network_service>]]: storage-volume <param>|storage-volume <param>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^,]*),(?<fld3>[^\s]*)[\s]+(\[(?<username>[^@]*)@(?<hostname>[^:]*):(?<sessionid>[^\[]*)\[(?<network_service>[^\]]*)\]\]:[\s]+storage\-volume[\s]+(?<param>.*)|storage\-volume[\s]+(?<param>.*))$" }
				id => "message-STORAGE_VOLUME"
				add_field => {
				"action" => "storage-volume"
					"[event][id]" => "STORAGE_VOLUME"
					"[rsa][message][id1]" => "STORAGE_VOLUME"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE VPN:01
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: vpn status
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: vpn status" }
				id => "message-VPN:01"
				add_field => {
				"action" => "vpn status"
					"[event][id]" => "VPN:01"
					"[rsa][message][id1]" => "VPN:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE VPN
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: vpn <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: vpn %{param}" }
				id => "message-VPN"
				add_field => {
				"action" => "vpn"
					"[event][id]" => "VPN"
					"[rsa][message][id1]" => "VPN"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SESSIONLOG
		# line in RSA: <fld1> <fld2>,<fld3> [<username>@<hostname>:<sessionid>[<network_service>]]: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} [%{username}@%{hostname}:%{sessionid}[%{network_service}]]: %{action}" }
				id => "message-SESSIONLOG"
				add_field => {
					"[event][id]" => "SESSIONLOG"
					"[rsa][message][id1]" => "SESSIONLOG"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-emcvplexmsg.json"
#			template_name => "emcvplex_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

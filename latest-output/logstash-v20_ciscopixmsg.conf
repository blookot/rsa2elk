# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}



# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %PIX-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%PIX-%{level}-%{messageid}: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %FWSM-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%FWSM-%{level}-%{messageid}: %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0033
	# line in RSA: <month> <day> <year> <time> <paddr> : %PIX-<level>-<messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{year} %{time} %{paddr} : %PIX-%{level}-%{messageid} %{message}" }
			id => "header-0033"
			add_field => {
				"[rsa][header][id]" => "0033"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <month> <day> <year> <time> <phost> %PIX-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{year} %{time} %{phost} %PIX-%{level}-%{messageid}: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <month> <day> <year> {<time>: %PIX|<time> %PIX}-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<year>[^\s]*)[\s]+((?<time>[^:]*):[\s]+%PIX|(?<time>[^\s]*)[\s]+%PIX)\-(?<level>[^\-]*)\-(?<messageid>[^:]*):[\s]+(?<message>.*)$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <month> <day> <year> <time> <paddr> : %FWSM-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{year} %{time} %{paddr} : %FWSM-%{level}-%{messageid}: %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <month> <day> <year> <time> %FWSM-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{year} %{time} %FWSM-%{level}-%{messageid}: %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <paddr> %PIX-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{paddr} %PIX-%{level}-%{messageid}: %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <paddr> %FWSM-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{paddr} %FWSM-%{level}-%{messageid}: %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: %PIX-<level>-<messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%PIX-%{level}-%{messageid} %{message}" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: :<month> <day> <time> <timezone>: %PIX-<hsession>-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => ":%{month} %{day} %{time} %{timezone}: %PIX-%{hsession}-%{level}-%{messageid}: %{message}" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_ciscopixmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
			id => "msgParserId0"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_activity:Modify><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
			id => "msgParserId1"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description> (reason code = <resultcode>).
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description} (reason code = %{resultcode})." }
			id => "msgParserId2"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@disposition:OK><@fld61:*PARMVAL(context)>(<context>)<event_description> OK
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description} OK" }
			id => "msgParserId3"
			add_field => {
				"level" => "%{level}"
				"disposition" => "OK"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@disposition:OK><@fld61:*PARMVAL(context)>(<context>)<event_description>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
			id => "msgParserId4"
			add_field => {
				"level" => "%{level}"
				"disposition" => "OK"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@disposition:Failed><@fld61:*PARMVAL(context)>(<context>)<event_description>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
			id => "msgParserId5"
			add_field => {
				"level" => "%{level}"
				"disposition" => "Failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "104001" {
		# MESSAGE 104001
		# line in RSA: <@ec_theme:Configuration><@ec_activity:Modify><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description>(cause: <result>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}(cause: %{result})." }
				id => "message-104001"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Modify"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
					"[event][id]" => "104001"
					"[rsa][message][id1]" => "104001"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 104001:01
		# line in RSA: <@ec_theme:Configuration><@ec_activity:Modify><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description> - <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description} - %{result}." }
				id => "message-104001:01"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Modify"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
					"[event][id]" => "104001:01"
					"[rsa][message][id1]" => "104001:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "104002" {
		# MESSAGE 104002
		# line in RSA: <@ec_theme:Configuration><@ec_activity:Modify><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description> (cause: <result>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description} (cause: %{result})." }
				id => "message-104002"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Modify"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
					"[event][id]" => "104002"
					"[rsa][message][id1]" => "104002"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 104002:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description> - <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description} - %{result}" }
				id => "message-104002:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "104002:01"
					"[rsa][message][id1]" => "104002:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA: <@ec_activity:Disable><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
			id => "msgParserId10"
			add_field => {
				"ec_activity" => "Disable"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: <@ec_activity:Enable><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
			id => "msgParserId11"
			add_field => {
				"ec_activity" => "Enable"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Monitoring on interface><@fld61:*PARMVAL(context)>(<context>) Monitoring on interface <interface> waiting
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) Monitoring on interface %{interface} waiting" }
			id => "msgParserId12"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Monitoring on interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Monitoring on interface><@fld61:*PARMVAL(context)>(<context>) Monitoring on interface <interface> normal
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) Monitoring on interface %{interface} normal" }
			id => "msgParserId13"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Monitoring on interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Lost Failover communications with mate on interface><@fld61:*PARMVAL(context)> (<context>) Lost Failover communications with mate on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)} (%{context}) Lost Failover communications with mate on interface %{interface}" }
			id => "msgParserId14"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Lost Failover communications with mate on interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Link status Up><@fld61:*PARMVAL(context)>(<context>) Link status 'Up' on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) Link status 'Up' on interface %{interface}" }
			id => "msgParserId15"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Link status Up"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Link status down><@fld61:*PARMVAL(context)>(<context>) Link status 'Down' on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) Link status 'Down' on interface %{interface}" }
			id => "msgParserId16"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Link status down"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Testing Interface><@fld61:*PARMVAL(context)>(<context>) Testing { Interface | interface } <interface>
	else if [logstash][msgparser][id] == "msgParserId17" {
		grok {
			match => { "message" => "^(?<@fld61:*PARMVAL(context)>[^\(]*)\((?<context>[^\)]*)\)[\s]+Testing[\s]+([\s]*Interface[\s]+|[\s]*interface[\s]+)[\s]+(?<interface>.*)$" }
			id => "msgParserId17"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Testing Interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Testing Interface><@fld61:*PARMVAL(context)>(<context>) Testing on interface <interface> <disposition>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) Testing on interface %{interface} %{disposition}" }
			id => "msgParserId18"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Testing Interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@disposition:Failed><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
			id => "msgParserId19"
			add_field => {
				"level" => "%{level}"
				"disposition" => "Failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description>
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
			id => "msgParserId20"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Standby unit failed to sync due to a locked Config><@disposition:Failed>(<fld1>) {S|s}tandby unit failed to sync due to a locked <fld2> config. Lock held by { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId21" {
		grok {
			match => { "message" => "^\((?<fld1>[^\)]*)\)[\s]+(S|s)tandby[\s]+unit[\s]+failed[\s]+to[\s]+sync[\s]+due[\s]+to[\s]+a[\s]+locked[\s]+(?<fld2>[^\s]*)[\s]+config\.[\s]+Lock[\s]+held[\s]+by[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId21"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Standby unit failed to sync due to a locked Config"
				"disposition" => "Failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId22"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "105034" {
		# MESSAGE 105034
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>)<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context})%{event_description}" }
				id => "message-105034"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "105034"
					"[rsa][message][id1]" => "105034"
					"[event][categoryid]" => "1604000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 105034:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-105034:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "105034:01"
					"[rsa][message][id1]" => "105034:01"
					"[event][categoryid]" => "1604000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description> 
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId23"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "105036" {
		# MESSAGE 105036
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>) <event_description> <fld1>, seq = <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) %{event_description} %{fld1}, seq = %{fld2}" }
				id => "message-105036"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "105036"
					"[rsa][message][id1]" => "105036"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 105036:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-105036:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "105036:01"
					"[rsa][message][id1]" => "105036:01"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId25
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) %{event_description}" }
			id => "msgParserId25"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) %{event_description}" }
			id => "msgParserId26"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@disposition:Failed><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(<context>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) %{event_description}" }
			id => "msgParserId27"
			add_field => {
				"level" => "%{level}"
				"disposition" => "Failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Mate operational mode is not compatible><@fld61:*PARMVAL(context)>(<context>) Mate operational mode <fld1> is not compatible with my mode <fld2>. 
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(%{context}) Mate operational mode %{fld1} is not compatible with my mode %{fld2}." }
			id => "msgParserId28"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"event_description" => "Mate operational mode is not compatible"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Mate license is not compatible><@fld61:*PARMVAL(context)>(<context>) Mate license (<fld1> { Contexts | contexts | Enabled }) is not compatible with my license (<fld2> { Contexts | contexts | Disabled }). 
	else if [logstash][msgparser][id] == "msgParserId29" {
		grok {
			match => { "message" => "^(?<@fld61:*PARMVAL(context)>[^\(]*)\((?<context>[^\)]*)\)[\s]+Mate[\s]+license[\s]+\((?<fld1>[^\s]*)[\s]+([\s]*Contexts[\s]+|[\s]*contexts[\s]+|[\s]*Enabled[\s]+)\)[\s]+is[\s]+not[\s]+compatible[\s]+with[\s]+my[\s]+license[\s]+\((?<fld2>[^\s]*)[\s]+([\s]*Contexts[\s]+|[\s]*contexts[\s]+|[\s]*Disabled[\s]+)\)\.[\s]+$" }
			id => "msgParserId29"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"event_description" => "Mate license is not compatible"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Mate card is different>{Mate|<info>}{Mate|<space>}has a <fld1> card in slot <fld2> which is different from my <fld3> 
	else if [logstash][msgparser][id] == "msgParserId30" {
		grok {
			match => { "message" => "^(Mate|(?<info>[^M<]*))(Mate|(?<space>[^h]*))has[\s]+a[\s]+(?<fld1>[^\s]*)[\s]+card[\s]+in[\s]+slot[\s]+(?<fld2>[^\s]*)[\s]+which[\s]+is[\s]+different[\s]+from[\s]+my[\s]+(?<fld3>[^\s]*)[\s]+$" }
			id => "msgParserId30"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"event_description" => "Mate card is different"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106001" {
		# MESSAGE 106001
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied> <direction> <protocol> connection denied from <saddr>/<sport> to <daddr>/<dport> flags <fld1> on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{direction} %{protocol} connection denied from %{saddr}/%{sport} to %{daddr}/%{dport} flags %{fld1} on interface %{interface}" }
				id => "message-106001"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106001"
					"[rsa][message][id1]" => "106001"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106001:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied> <direction> <protocol> connection denied from <saddr>/<sport> to <daddr>/<dport> flags <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{direction} %{protocol} connection denied from %{saddr}/%{sport} to %{daddr}/%{dport} flags %{fld1}" }
				id => "message-106001:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106001:01"
					"[rsa][message][id1]" => "106001:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "106002" {
		# MESSAGE 106002
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied> <protocol> { Connection | connection } denied by <direction> list <fld1> src <saddr>/<sport> dest <daddr>/<dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<protocol>[^\s]*)[\s]+([\s]*Connection[\s]+|[\s]*connection[\s]+)[\s]+denied[\s]+by[\s]+(?<direction>[^\s]*)[\s]+list[\s]+(?<fld1>[^\s]*)[\s]+src[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+dest[\s]+(?<daddr>[^/]*)/(?<dport>.*)$" }
				id => "message-106002"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106002"
					"[rsa][message][id1]" => "106002"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106002:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied> <protocol> { Connection | connection } denied by <direction> list <fld1> src <saddr> <sport> dest <daddr> <dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<protocol>[^\s]*)[\s]+([\s]*Connection[\s]+|[\s]*connection[\s]+)[\s]+denied[\s]+by[\s]+(?<direction>[^\s]*)[\s]+list[\s]+(?<fld1>[^\s]*)[\s]+src[\s]+(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+dest[\s]+(?<daddr>[^\s]*)[\s]+(?<dport>.*)$" }
				id => "message-106002:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106002:01"
					"[rsa][message][id1]" => "106002:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied><@event_description:Connection denied due to JAVA Applet on interface> Connection denied src <saddr> dest <daddr> due to JAVA Applet on interface <interface> 
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "Connection denied src %{saddr} dest %{daddr} due to JAVA Applet on interface %{interface}" }
			id => "msgParserId35"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
				"event_description" => "Connection denied due to JAVA Applet on interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106006" {
		# MESSAGE 106006
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied> Deny <direction> <protocol> from <saddr>/<sport> to <daddr>/<dport> on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} %{protocol} from %{saddr}/%{sport} to %{daddr}/%{dport} on interface %{interface}" }
				id => "message-106006"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106006"
					"[rsa][message][id1]" => "106006"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106006:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied> Deny <direction> <protocol> from <saddr>/<sport> to <daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} %{protocol} from %{saddr}/%{sport} to %{daddr}/%{dport}" }
				id => "message-106006:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106006:01"
					"[rsa][message][id1]" => "106006:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId38
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied> Deny <direction> <protocol> from <saddr>/<sport> to <daddr>/<dport> due to DNS <info> 
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "Deny %{direction} %{protocol} from %{saddr}/%{sport} to %{daddr}/%{dport} due to DNS %{info}" }
			id => "msgParserId38"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106008" {
		# MESSAGE 106008
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Translation denied> Translation for <hostip> denied by <direction> (source is denied) <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Translation for %{hostip} denied by %{direction} (source is denied) %{fld1}" }
				id => "message-106008"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "Translation denied"
					"[event][id]" => "106008"
					"[rsa][message][id1]" => "106008"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106008:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Translation denied> Translation for <hostip> denied by <direction> <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Translation for %{hostip} denied by %{direction} %{fld1}" }
				id => "message-106008:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "Translation denied"
					"[event][id]" => "106008:01"
					"[rsa][message][id1]" => "106008:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:Translation denied> Translation for <saddr> to <daddr>/<dport> denied by <direction> (destination is denied) <fld1>
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "Translation for %{saddr} to %{daddr}/%{dport} denied by %{direction} (destination is denied) %{fld1}" }
			id => "msgParserId41"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "Translation denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106010" {
		# MESSAGE 106010
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <direction> protocol <protocol> src <sinterface>:<saddr> dst <dinterface>:<daddr> <@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} protocol %{protocol} src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr}" }
				id => "message-106010"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106010"
					"[rsa][message][id1]" => "106010"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106010:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <direction> icmp src <sinterface>:<saddr> dst <dinterface>:<daddr> (type <icmptype>, code <icmpcode>) <@action:connection denied><@protocol:icmp>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} icmp src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr} (type %{icmptype}, code %{icmpcode})" }
				id => "message-106010:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
				"protocol" => "icmp"
					"[event][id]" => "106010:01"
					"[rsa][message][id1]" => "106010:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106010:02
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <direction> <protocol> src <sinterface>:<saddr>/<sport> dst <dinterface>:<daddr>/<dport> <@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} %{protocol} src %{sinterface}:%{saddr}/%{sport} dst %{dinterface}:%{daddr}/%{dport}" }
				id => "message-106010:02"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106010:02"
					"[rsa][message][id1]" => "106010:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106010:03
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <direction> <protocol> src <sinterface>:<saddr> dst <dinterface>:<daddr><@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} %{protocol} src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr}" }
				id => "message-106010:03"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106010:03"
					"[rsa][message][id1]" => "106010:03"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "106011" {
		# MESSAGE 106011
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <direction> (No xlate) protocol <protocol> src <sinterface>:<saddr> dst <dinterface>:<daddr> <@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} (No xlate) protocol %{protocol} src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr}" }
				id => "message-106011"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106011"
					"[rsa][message][id1]" => "106011"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106011:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <direction> (No xlate) <protocol> src <sinterface>:<saddr>/<sport> dst <dinterface>:<daddr>/<dport><@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} (No xlate) %{protocol} src %{sinterface}:%{saddr}/%{sport} dst %{dinterface}:%{daddr}/%{dport}" }
				id => "message-106011:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106011:01"
					"[rsa][message][id1]" => "106011:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106011:02
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <direction> (No xlate) <protocol> src <sinterface>:<saddr> dst <dinterface>:<daddr> (type <icmptype>, code <icmpcode>) <@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{direction} (No xlate) %{protocol} src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr} (type %{icmptype}, code %{icmpcode})" }
				id => "message-106011:02"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106011:02"
					"[rsa][message][id1]" => "106011:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny IP from <saddr> { from | to } <daddr>, IP options <fld1> <@action:IP connection denied>
	else if [logstash][msgparser][id] == "msgParserId49" {
		grok {
			match => { "message" => "^Deny[\s]+IP[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+([\s]*from[\s]+|[\s]*to[\s]+)[\s]+(?<daddr>[^,]*),[\s]+IP[\s]+options[\s]+(?<fld1>[^\s]*)[\s]+$" }
			id => "msgParserId49"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "IP connection denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106013" {
		# MESSAGE 106013:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:connection dropped>Dropping echo request from <saddr> to PAT address <daddr> <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dropping echo request from %{saddr} to PAT address %{daddr}" }
				id => "message-106013:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection dropped"
					"[event][id]" => "106013:01"
					"[rsa][message][id1]" => "106013:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106013
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:connection dropped>Dropping echo request from <saddr> to address <daddr> <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dropping echo request from %{saddr} to address %{daddr}" }
				id => "message-106013"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection dropped"
					"[event][id]" => "106013"
					"[rsa][message][id1]" => "106013"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <direction> { ICMP | icmp } src <sinterface>:<saddr> dst <dinterface>:<daddr> (type <icmptype>, code <icmpcode>) <@protocol:ICMP><@action:connection denied>
	else if [logstash][msgparser][id] == "msgParserId52" {
		grok {
			match => { "message" => "^Deny[\s]+(?<direction>[^\s]*)[\s]+([\s]*ICMP[\s]+|[\s]*icmp[\s]+)[\s]+src[\s]+(?<sinterface>[^:]*):(?<saddr>[^\s]*)[\s]+dst[\s]+(?<dinterface>[^:]*):(?<daddr>[^\s]*)[\s]+\(type[\s]+(?<icmptype>[^,]*),[\s]+code[\s]+(?<icmpcode>[^\)]*)\)[\s]+$" }
			id => "msgParserId52"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"protocol" => "ICMP"
				"action" => "connection denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106015" {
		# MESSAGE 106015
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <protocol> (no connection) from <saddr>/<sport> to <daddr>/<dport> flags <fld1> on interface <interface><@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{protocol} (no connection) from %{saddr}/%{sport} to %{daddr}/%{dport} flags %{fld1} on interface %{interface}" }
				id => "message-106015"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106015"
					"[rsa][message][id1]" => "106015"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106015:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <protocol> (no connection) from <saddr>/<sport> to <daddr>/<dport> flags <fld1> <@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{protocol} (no connection) from %{saddr}/%{sport} to %{daddr}/%{dport} flags %{fld1}" }
				id => "message-106015:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106015:01"
					"[rsa][message][id1]" => "106015:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "106016" {
		# MESSAGE 106016
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <protocol> spoof from (<saddr>) to <daddr> on interface <interface><@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{protocol} spoof from (%{saddr}) to %{daddr} on interface %{interface}" }
				id => "message-106016"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106016"
					"[rsa][message][id1]" => "106016"
					"[event][categoryid]" => "1803010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106016:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <protocol> spoof from (<saddr>) to <daddr><@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{protocol} spoof from (%{saddr}) to %{daddr}" }
				id => "message-106016:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106016:01"
					"[rsa][message][id1]" => "106016:01"
					"[event][categoryid]" => "1803010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "106017" {
		# MESSAGE 106017
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny IP due to Land Attack from <saddr> to <daddr><@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny IP due to Land Attack from %{saddr} to %{daddr}" }
				id => "message-106017"
				add_field => {
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106017"
					"[rsa][message][id1]" => "106017"
					"[event][categoryid]" => "1002020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106017:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Packet contains ActiveX content and has been modified src <saddr> dest to <daddr><@action:connection denied>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Packet contains ActiveX content and has been modified src %{saddr} dest to %{daddr}" }
				id => "message-106017:01"
				add_field => {
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106017:01"
					"[rsa][message][id1]" => "106017:01"
					"[event][categoryid]" => "1001030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId59
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:denied by access-list> <protocol> packet type <fld1> denied by <direction> list <fld2> src <saddr> dest <daddr>
	else if [logstash][msgparser][id] == "msgParserId59" {
		dissect {
			mapping => { "message" => "%{protocol} packet type %{fld1} denied by %{direction} list %{fld2} src %{saddr} dest %{daddr}" }
			id => "msgParserId59"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "denied by access-list"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId60
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>IP packet from <saddr> to <daddr>, protocol <protocol> received from interface "<interface>" <space> deny by access-group "<fld1>"<@action:denied by acces-group>
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "IP packet from %{saddr} to %{daddr}, protocol %{protocol} received from interface \"%{interface}\" %{space} deny by access-group \"%{fld1}\"" }
			id => "msgParserId60"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "denied by acces-group"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId61
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny IP teardrop fragment (size = <fld1>, offset = <fld2>) from <saddr> to <daddr> <@action:denied IP teardrop fragment>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "Deny IP teardrop fragment (size = %{fld1}, offset = %{fld2}) from %{saddr} to %{daddr}" }
			id => "msgParserId61"
			add_field => {
				"level" => "%{level}"
				"action" => "denied IP teardrop fragment"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId62
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <protocol> reverse path check from <saddr> to <daddr> on interface <interface><@action:connection denied>
	else if [logstash][msgparser][id] == "msgParserId62" {
		dissect {
			mapping => { "message" => "Deny %{protocol} reverse path check from %{saddr} to %{daddr} on interface %{interface}" }
			id => "msgParserId62"
			add_field => {
				"level" => "%{level}"
				"action" => "connection denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId63
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied>Deny <protocol> connection spoof from <saddr> to <daddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId63" {
		dissect {
			mapping => { "message" => "Deny %{protocol} connection spoof from %{saddr} to %{daddr} on interface %{interface}" }
			id => "msgParserId63"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106023" {
		# MESSAGE 106023
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny protocol <protocol> src <sinterface>:<saddr> dst <dinterface>:<daddr> by access-group "<rule_group>" <@action:denied by access-group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny protocol %{protocol} src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr} by access-group \"%{rule_group}\"" }
				id => "message-106023"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "denied by access-group"
					"[event][id]" => "106023"
					"[rsa][message][id1]" => "106023"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106023:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <protocol> src <sinterface>:<saddr>/<sport> dst <dinterface>:<daddr>/<dport> by access-group "<rule_group>" <@action:denied by access-group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{protocol} src %{sinterface}:%{saddr}/%{sport} dst %{dinterface}:%{daddr}/%{dport} by access-group \"%{rule_group}\"" }
				id => "message-106023:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "denied by access-group"
					"[event][id]" => "106023:01"
					"[rsa][message][id1]" => "106023:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106023:04
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <protocol> src <sinterface>:<saddr>/<sport> dst <dinterface>:<daddr>/<dport> by access-group <rule_group> <@action:denied by access-group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{protocol} src %{sinterface}:%{saddr}/%{sport} dst %{dinterface}:%{daddr}/%{dport} by access-group %{rule_group}" }
				id => "message-106023:04"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "denied by access-group"
					"[event][id]" => "106023:04"
					"[rsa][message][id1]" => "106023:04"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106023:02
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Deny <protocol> src <sinterface>:<saddr> dst <dinterface>:<daddr> (type <icmptype>, code <icmpcode>) by access-group { "<rule_group>" | <rule_group> } <@action:denied by access-group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Deny[\s]+(?<protocol>[^\s]*)[\s]+src[\s]+(?<sinterface>[^:]*):(?<saddr>[^\s]*)[\s]+dst[\s]+(?<dinterface>[^:]*):(?<daddr>[^\s]*)[\s]+\(type[\s]+(?<icmptype>[^,]*),[\s]+code[\s]+(?<icmpcode>[^\)]*)\)[\s]+by[\s]+access\-group[\s]+([\s]*\"(?<rule_group>[^\"]*)\"[\s]+|[\s]*(?<rule_group>[^\s]*)[\s]+)[\s]+$" }
				id => "message-106023:02"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "denied by access-group"
					"[event][id]" => "106023:02"
					"[rsa][message][id1]" => "106023:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId68
	# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>: <interface> <protocol> src <saddr>/<sport> dest <daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId68" {
		dissect {
			mapping => { "message" => "%{event_description}: %{interface} %{protocol} src %{saddr}/%{sport} dest %{daddr}/%{dport}" }
			id => "msgParserId68"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106028" {
		# MESSAGE 106028
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Dropping invalid echo { reply | request } from <sinterface>:<saddr> to <dinterface>:<daddr>, { destination | source } address <fld1> should not match dynamic port translation, real <fld2>:<stransaddr>/<stransport>, mapped <fld3>:<dtransaddr>/<dtransport> <@action:Dropping invalid echo reply>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Dropping[\s]+invalid[\s]+echo[\s]+([\s]*reply[\s]+|[\s]*request[\s]+)[\s]+from[\s]+(?<sinterface>[^:]*):(?<saddr>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^,]*),[\s]+([\s]*destination[\s]+|[\s]*source[\s]+)[\s]+address[\s]+(?<fld1>[^\s]*)[\s]+should[\s]+not[\s]+match[\s]+dynamic[\s]+port[\s]+translation,[\s]+real[\s]+(?<fld2>[^:]*):(?<stransaddr>[^/]*)/(?<stransport>[^,]*),[\s]+mapped[\s]+(?<fld3>[^:]*):(?<dtransaddr>[^/]*)/(?<dtransport>[^\s]*)[\s]+$" }
				id => "message-106028"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "Dropping invalid echo reply"
					"[event][id]" => "106028"
					"[rsa][message][id1]" => "106028"
					"[event][categoryid]" => "1803010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106028:01
		# line in RSA: <@ec_activity:Deny><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:connection denied> Deny <protocol> (Connection marked for Deletion) from <saddr>/<sport> to <daddr>/<dport> flags <network_service> on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny %{protocol} (Connection marked for Deletion) from %{saddr}/%{sport} to %{daddr}/%{dport} flags %{network_service} on interface %{interface}" }
				id => "message-106028:01"
				add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "connection denied"
					"[event][id]" => "106028:01"
					"[rsa][message][id1]" => "106028:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "106100" {
		# MESSAGE 106100
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@dclass_counter1_string:Hitcount> access-list <listnum> denied <protocol> <sinterface>/<saddr>(<sport>) -> <dinterface>/<daddr>(<dport>) hit-cnt <dclass_counter1> <@action:denied by access-list>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@dclass_counter1_string:Hitcount} access-list %{listnum} denied %{protocol} %{sinterface}/%{saddr}(%{sport}) -> %{dinterface}/%{daddr}(%{dport}) hit-cnt %{dclass_counter1}" }
				id => "message-106100"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "denied by access-list"
					"[event][id]" => "106100"
					"[rsa][message][id1]" => "106100"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106100:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@dclass_counter1_string:Hitcount> access-list <listnum> { est-allowed | permitted } <protocol> <sinterface>/<saddr>(<sport>) -> <dinterface>/<daddr>(<dport>) hit-cnt <dclass_counter1><@action:permitted>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<@dclass_counter1_string:Hitcount>[^\s]*)[\s]+access\-list[\s]+(?<listnum>[^\s]*)[\s]+([\s]*est\-allowed[\s]+|[\s]*permitted[\s]+)[\s]+(?<protocol>[^\s]*)[\s]+(?<sinterface>[^/]*)/(?<saddr>[^\(]*)\((?<sport>[^\)]*)\)[\s]+\->[\s]+(?<dinterface>[^/]*)/(?<daddr>[^\(]*)\((?<dport>[^\)]*)\)[\s]+hit\-cnt[\s]+(?<dclass_counter1>.*)$" }
				id => "message-106100:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "permitted"
					"[event][id]" => "106100:01"
					"[rsa][message][id1]" => "106100:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "106102" {
		# MESSAGE 106102:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@dclass_counter1_string:HitCount>access-list <listnum> denied <protocol> <sinterface>/<saddr> <sport> <dinterface>/<daddr> <dport> hit-cnt <dclass_counter1> <info> <@action:deny>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@dclass_counter1_string:HitCount}access-list %{listnum} denied %{protocol} %{sinterface}/%{saddr} %{sport} %{dinterface}/%{daddr} %{dport} hit-cnt %{dclass_counter1} %{info}" }
				id => "message-106102:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "deny"
					"[event][id]" => "106102:02"
					"[rsa][message][id1]" => "106102:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106102:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@dclass_counter1_string:HitCount>access-list <listnum> permitted <protocol> <sinterface>/<saddr> <sport> <dinterface>/<daddr> <dport> hit-cnt <dclass_counter1> <info> <@action:permit>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@dclass_counter1_string:HitCount}access-list %{listnum} permitted %{protocol} %{sinterface}/%{saddr} %{sport} %{dinterface}/%{daddr} %{dport} hit-cnt %{dclass_counter1} %{info}" }
				id => "message-106102:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "permit"
					"[event][id]" => "106102:01"
					"[rsa][message][id1]" => "106102:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 106102
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@dclass_counter1_string:HitCount>access-list <listnum> url <url> hit-cnt <dclass_counter1><@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{@dclass_counter1_string:HitCount}access-list %{listnum} url %{url} hit-cnt %{dclass_counter1}" }
				id => "message-106102"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "106102"
					"[rsa][message][id1]" => "106102"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId76
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@dclass_counter1_string:HitCount>access-list <listnum> <protocol> <sinterface>/<saddr>(<sport>) -> <dinterface>/<daddr>(<dport>) hit-cnt <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId76" {
		dissect {
			mapping => { "message" => "%{@dclass_counter1_string:HitCount}access-list %{listnum} %{protocol} %{sinterface}/%{saddr}(%{sport}) -> %{dinterface}/%{daddr}(%{dport}) hit-cnt %{dclass_counter1}" }
			id => "msgParserId76"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "107001" {
		# MESSAGE 107001:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)> <saddr> attempted to ping <daddr>.<@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{saddr} attempted to ping %{daddr}." }
				id => "message-107001:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "107001:01"
					"[rsa][message][id1]" => "107001:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 107001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)> RIP auth failed from <saddr>: version=<fld1>, type=<fld2>, mode=<fld3>, sequence=<fld4> on interface <interface> <@event_description:RIP auth failure>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RIP auth failed from %{saddr}: version=%{fld1}, type=%{fld2}, mode=%{fld3}, sequence=%{fld4} on interface %{interface}" }
				id => "message-107001"
				add_field => {
				"level" => "%{level}"
				"event_description" => "RIP auth failure"
					"[event][id]" => "107001"
					"[rsa][message][id1]" => "107001"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId79
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)> RIP pkt failed from <saddr>: version=<fld1> on interface <interface> <@event_description:RIP packet failure>
	else if [logstash][msgparser][id] == "msgParserId79" {
		dissect {
			mapping => { "message" => "RIP pkt failed from %{saddr}: version=%{fld1} on interface %{interface}" }
			id => "msgParserId79"
			add_field => {
				"level" => "%{level}"
				"event_description" => "RIP packet failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId80
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>SMTP made noop: out <fld1> in <fld2> { data: | data } <info> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId80" {
		grok {
			match => { "message" => "^SMTP[\s]+made[\s]+noop:[\s]+out[\s]+(?<fld1>[^\s]*)[\s]+in[\s]+(?<fld2>[^\s]*)[\s]+([\s]*data:[\s]+|[\s]*data[\s]+)[\s]+(?<info>[^\s]*)[\s]+$" }
			id => "msgParserId80"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId81
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>SMTP replaced <fld1>: out <saddr> in <daddr> data: <info> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId81" {
		dissect {
			mapping => { "message" => "SMTP replaced %{fld1}: out %{saddr} in %{daddr} data: %{info}" }
			id => "msgParserId81"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "108003" {
		# MESSAGE 108003
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Bad Checksum in <network_service> command <@result:Bad Checksum><@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Bad Checksum in %{network_service} command" }
				id => "message-108003"
				add_field => {
				"level" => "%{level}"
				"result" => "Bad Checksum"
					"[event][id]" => "108003"
					"[rsa][message][id1]" => "108003"
					"[event][categoryid]" => "1207010200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 108003:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Connection terminated><@event_description:Malicious pattern detected in mail address>Terminating <network_service> connection; malicious pattern detected in the <space> mail address from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>. { Mail Address | Data } :<result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Terminating[\s]+(?<network_service>[^\s]*)[\s]+connection;[\s]+malicious[\s]+pattern[\s]+detected[\s]+in[\s]+the[\s]+(?<space>[^\s]*)[\s]+mail[\s]+address[\s]+from[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\.]*)\.[\s]+([\s]*Mail[\s]+Address[\s]+|[\s]*Data[\s]+)[\s]+:(?<result>.*)$" }
				id => "message-108003:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Connection terminated"
				"event_description" => "Malicious pattern detected in mail address"
					"[event][id]" => "108003:01"
					"[rsa][message][id1]" => "108003:01"
					"[event][categoryid]" => "1207010200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "108004" {
		# MESSAGE 108004:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>SMTP: Bad Checksum <network_service> { Request | Response } from <sinterface>:{ <saddr>/<sport> | <saddr> } to <dinterface>:{ <daddr>/<dport> | <daddr> };<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SMTP:[\s]+Bad[\s]+Checksum[\s]+(?<network_service>[^\s]*)[\s]+([\s]*Request[\s]+|[\s]*Response[\s]+)[\s]+from[\s]+(?<sinterface>[^:]*):([\s]*(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+to[\s]+(?<dinterface>[^:]*):([\s]*(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+);(?<info>.*)$" }
				id => "message-108004:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "108004:01"
					"[rsa][message][id1]" => "108004:01"
					"[event][categoryid]" => "1207010200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 108004
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Bad Checksum in <network_service> response <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Bad Checksum in %{network_service} response" }
				id => "message-108004"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "108004"
					"[rsa][message][id1]" => "108004"
					"[event][categoryid]" => "1207010200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 108004:02
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>ESMTP Classification: <action> for <network_service> { Request | Response } from <sinterface>:{ <saddr>/<sport> | <saddr> } to <dinterface>:{ <daddr>/<dport> | <daddr> };<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ESMTP[\s]+Classification:[\s]+(?<action>[^\s]*)[\s]+for[\s]+(?<network_service>[^\s]*)[\s]+([\s]*Request[\s]+|[\s]*Response[\s]+)[\s]+from[\s]+(?<sinterface>[^:]*):([\s]*(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+to[\s]+(?<dinterface>[^:]*):([\s]*(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+);(?<info>.*)$" }
				id => "message-108004:02"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "108004:02"
					"[rsa][message][id1]" => "108004:02"
					"[event][categoryid]" => "1207010200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId87
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received ESMTP request> <network_service>: Received ESMTP Request from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>; <result>
	else if [logstash][msgparser][id] == "msgParserId87" {
		dissect {
			mapping => { "message" => "%{network_service}: Received ESMTP Request from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}; %{result}" }
			id => "msgParserId87"
			add_field => {
				"level" => "%{level}"
				"action" => "Received ESMTP request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId88
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Detected ESMTP size violation> Detected <network_service> size violation from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>; <result>
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "Detected %{network_service} size violation from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}; %{result}" }
			id => "msgParserId88"
			add_field => {
				"level" => "%{level}"
				"action" => "Detected ESMTP size violation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId89
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Start_Session> Auth start for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId89" {
		grok {
			match => { "message" => "^[\s]*Auth[\s]+start[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>.*)$" }
			id => "msgParserId89"
			add_field => {
				"level" => "%{level}"
				"result" => "Start_Session"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId90
	# line in RSA: <@ec_theme:AccessControl><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:authentication failed><@result:server failed> { Auth from | Auth } <saddr>/<sport> to <daddr>/<dport> failed (server <hostip> failed) on interface <sinterface>
	else if [logstash][msgparser][id] == "msgParserId90" {
		grok {
			match => { "message" => "^[\s]*([\s]*Auth[\s]+from[\s]+|[\s]*Auth[\s]+)[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+failed[\s]+\(server[\s]+(?<hostip>[^\s]*)[\s]+failed\)[\s]+on[\s]+interface[\s]+(?<sinterface>.*)$" }
			id => "msgParserId90"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "authentication failed"
				"result" => "server failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "109003" {
		# MESSAGE 109003
		# line in RSA: <@ec_theme:AccessControl><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:authentication failed><@result:all servers failed> Auth from <saddr> to <daddr>/<dport> failed (all servers failed) on interface <sinterface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth from %{saddr} to %{daddr}/%{dport} failed (all servers failed) on interface %{sinterface}" }
				id => "message-109003"
				add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "authentication failed"
				"result" => "all servers failed"
					"[event][id]" => "109003"
					"[rsa][message][id1]" => "109003"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 109003:01
		# line in RSA: <@ec_theme:AccessControl><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:authentication failed><@result:all servers failed> Auth from { <saddr>/<sport> | <saddr> } to { <daddr>/<dport> | <daddr> } failed { (all servers failed) | (server <hostip> failed) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Auth[\s]+from[\s]+([\s]*(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+to[\s]+([\s]*(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)[\s]+failed[\s]+([\s]*\(all[\s]+servers[\s]+failed\)[\s]+|[\s]*\(server[\s]+(?<hostip>[^\s]*)[\s]+failed\)[\s]+)$" }
				id => "message-109003:01"
				add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "authentication failed"
				"result" => "all servers failed"
					"[event][id]" => "109003:01"
					"[rsa][message][id1]" => "109003:01"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId93
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Successful Authenticaton> Authentication succeeded for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId93" {
		grok {
			match => { "message" => "^[\s]*Authentication[\s]+succeeded[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>.*)$" }
			id => "msgParserId93"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "Successful Authenticaton"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId94
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:authentication failure> Authentication failed for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId94" {
		grok {
			match => { "message" => "^[\s]*Authentication[\s]+failed[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>.*)$" }
			id => "msgParserId94"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"result" => "authentication failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId95
	# line in RSA: <@ec_subject:User><@ec_activity:Permit><@ec_theme:AccessControl><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Successful Authorization> Authorization permitted for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId95" {
		grok {
			match => { "message" => "^[\s]*Authorization[\s]+permitted[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>.*)$" }
			id => "msgParserId95"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "AccessControl"
				"level" => "%{level}"
				"result" => "Successful Authorization"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId96
	# line in RSA: <@ec_subject:User><@ec_activity:Deny><@ec_theme:AccessControl><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Authorization failure> Authorization denied for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId96" {
		grok {
			match => { "message" => "^[\s]*Authorization[\s]+denied[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>.*)$" }
			id => "msgParserId96"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Deny"
				"ec_theme" => "AccessControl"
				"level" => "%{level}"
				"result" => "Authorization failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId97
	# line in RSA: <@ec_subject:User><@ec_activity:Deny><@ec_theme:AccessControl><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Authorization denied> Authorization denied from <saddr>/<sport> to <daddr>/<dport> (not authenticated) 
	else if [logstash][msgparser][id] == "msgParserId97" {
		dissect {
			mapping => { "message" => "Authorization denied from %{saddr}/%{sport} to %{daddr}/%{dport} (not authenticated)" }
			id => "msgParserId97"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Deny"
				"ec_theme" => "AccessControl"
				"level" => "%{level}"
				"result" => "Authorization denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId98
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Authorization denied> Auth from <saddr>/<sport> to <daddr>/<dport> failed (<result>) on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId98" {
		dissect {
			mapping => { "message" => "Auth from %{saddr}/%{sport} to %{daddr}/%{dport} failed (%{result}) on interface %{interface}" }
			id => "msgParserId98"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"result" => "Authorization denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId99
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Authen Session Start> Authen Session Start: user { '<username>' | <username> }, sid <sessionid> 
	else if [logstash][msgparser][id] == "msgParserId99" {
		grok {
			match => { "message" => "^[\s]*Authen[\s]+Session[\s]+Start:[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+sid[\s]+(?<sessionid>[^\s]*)[\s]+$" }
			id => "msgParserId99"
			add_field => {
				"level" => "%{level}"
				"result" => "Authen Session Start"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId100
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Authen Session End> Authen Session End: user { '<username>' | <username> }, sid <sessionid>, elapsed <duration> seconds
	else if [logstash][msgparser][id] == "msgParserId100" {
		grok {
			match => { "message" => "^[\s]*Authen[\s]+Session[\s]+End:[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+sid[\s]+(?<sessionid>[^,]*),[\s]+elapsed[\s]+(?<duration>[^\s]*)[\s]+seconds$" }
			id => "msgParserId100"
			add_field => {
				"level" => "%{level}"
				"result" => "Authen Session End"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId101
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><event_description> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId101" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId101"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId102
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><event_description><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId102" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId102"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "109015" {
		# MESSAGE 109015
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Authorization denied> Authorization denied (acl="<listnum>") for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport> on interface <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Authorization[\s]+denied[\s]+\(acl=\"(?<listnum>[^\"]*)\"\)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>.*)$" }
				id => "message-109015"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"result" => "Authorization denied"
					"[event][id]" => "109015"
					"[rsa][message][id1]" => "109015"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 109015:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Authorization denied> Authorization denied (acl=#<listnum>#<group>) for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport> on interface <interface> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Authorization[\s]+denied[\s]+\(acl=#(?<listnum>[^#]*)#(?<group>[^\)]*)\)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+$" }
				id => "message-109015:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"result" => "Authorization denied"
					"[event][id]" => "109015:01"
					"[rsa][message][id1]" => "109015:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 109015:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Authorization denied> Authorization denied (acl=<listnum>) for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport> on interface <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Authorization[\s]+denied[\s]+\(acl=(?<listnum>[^\)]*)\)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>.*)$" }
				id => "message-109015:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"result" => "Authorization denied"
					"[event][id]" => "109015:02"
					"[rsa][message][id1]" => "109015:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "109016" {
		# MESSAGE 109016
		# line in RSA: <@ec_theme:AccessControl><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Downloaded authorization access-list <listnum> not found for user { '<username>' | <username> } <@result:access-list not found>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Downloaded[\s]+authorization[\s]+access\-list[\s]+(?<listnum>[^\s]*)[\s]+not[\s]+found[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+$" }
				id => "message-109016"
				add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"result" => "access-list not found"
					"[event][id]" => "109016"
					"[rsa][message][id1]" => "109016"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 109016:01
		# line in RSA: <@ec_theme:AccessControl><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Can't find authorization ACL '<listnum>' on '<interface>' for user { '<username>' | <username> } <@result:authorization list not found for user>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Can't[\s]+find[\s]+authorization[\s]+ACL[\s]+'(?<listnum>[^']*)'[\s]+on[\s]+'(?<interface>[^']*)'[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+$" }
				id => "message-109016:01"
				add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"result" => "authorization list not found for user"
					"[event][id]" => "109016:01"
					"[rsa][message][id1]" => "109016:01"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId108
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>User at <hostip> exceeded auth proxy connection limit (max <fld2>) <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId108" {
		dissect {
			mapping => { "message" => "User at %{hostip} exceeded auth proxy connection limit (max %{fld2})" }
			id => "msgParserId108"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId109
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Downloaded ACL { '<listnum>' | <listnum> } is empty <@msg:*PARMVAL($MSG)><@result:ACL is empty>
	else if [logstash][msgparser][id] == "msgParserId109" {
		grok {
			match => { "message" => "^Downloaded[\s]+ACL[\s]+([\s]*'(?<listnum>[^']*)'[\s]+|[\s]*(?<listnum>[^\s]*)[\s]+)[\s]+is[\s]+empty[\s]+$" }
			id => "msgParserId109"
			add_field => {
				"level" => "%{level}"
				"result" => "ACL is empty"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId110
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Downloaded ACL { '<listnum>' | <listnum> } has parsing error; ACE <info> <@msg:*PARMVAL($MSG)><@result:ACL has parsing error>
	else if [logstash][msgparser][id] == "msgParserId110" {
		grok {
			match => { "message" => "^Downloaded[\s]+ACL[\s]+([\s]*'(?<listnum>[^']*)'[\s]+|[\s]*(?<listnum>[^\s]*)[\s]+)[\s]+has[\s]+parsing[\s]+error;[\s]+ACE[\s]+(?<info>[^\s]*)[\s]+$" }
			id => "msgParserId110"
			add_field => {
				"level" => "%{level}"
				"result" => "ACL has parsing error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId111
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Downloaded ACL { '<listnum>' | <listnum> } has config error; ACE { : '<info>' | <space> } <@msg:*PARMVAL($MSG)><@result:Downloaded ACL has config error>
	else if [logstash][msgparser][id] == "msgParserId111" {
		grok {
			match => { "message" => "^Downloaded[\s]+ACL[\s]+([\s]*'(?<listnum>[^']*)'[\s]+|[\s]*(?<listnum>[^\s]*)[\s]+)[\s]+has[\s]+config[\s]+error;[\s]+ACE[\s]+([\s]*:[\s]+'(?<info>[^']*)'[\s]+|[\s]*(?<space>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId111"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"result" => "Downloaded ACL has config error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId112
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><event_description><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId112" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId112"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId113
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)> <event_description> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId113" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId113"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "109023" {
		# MESSAGE 109023
		# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Unknown><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Authorization denied> User from <saddr>/<sport> to <daddr>/<dport> on interface <interface> using <protocol> must authenticate before using this service 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User from %{saddr}/%{sport} to %{daddr}/%{dport} on interface %{interface} using %{protocol} must authenticate before using this service" }
				id => "message-109023"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Unknown"
				"level" => "%{level}"
				"action" => "Authorization denied"
					"[event][id]" => "109023"
					"[rsa][message][id1]" => "109023"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 109023:01
		# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Unknown><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Authorization denied> User from <saddr>/<sport> to <daddr>/<dport> on interface <interface> must authenticate before using this service 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User from %{saddr}/%{sport} to %{daddr}/%{dport} on interface %{interface} must authenticate before using this service" }
				id => "message-109023:01"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Unknown"
				"level" => "%{level}"
				"action" => "Authorization denied"
					"[event][id]" => "109023:01"
					"[rsa][message][id1]" => "109023:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId116
	# line in RSA: <@ec_theme:AccessControl><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Authorization denied> Authorization denied from <saddr>/<sport> to <daddr>/<dport> (<result>) on interface <interface> using <protocol> 
	else if [logstash][msgparser][id] == "msgParserId116" {
		dissect {
			mapping => { "message" => "Authorization denied from %{saddr}/%{sport} to %{daddr}/%{dport} (%{result}) on interface %{interface} using %{protocol}" }
			id => "msgParserId116"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Authorization denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId117
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Authorization denied> Authorization denied (acl=<listnum>) for user { '<username>' | <username> } from <saddr>/<sport> to <daddr>/<dport> on interface <interface> using <protocol> 
	else if [logstash][msgparser][id] == "msgParserId117" {
		grok {
			match => { "message" => "^[\s]*Authorization[\s]+denied[\s]+\(acl=(?<listnum>[^\)]*)\)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+using[\s]+(?<protocol>[^\s]*)[\s]+$" }
			id => "msgParserId117"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Authorization denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId118
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>[<protocol>] <event_description> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId118" {
		dissect {
			mapping => { "message" => "[%{protocol}] %{event_description}" }
			id => "msgParserId118"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId119
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>[<protocol>] Unable to { decipher | decypher } response message Server = <hostip>, User = { '<username>' | <username> } <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId119" {
		grok {
			match => { "message" => "^\[(?<protocol>[^\]]*)\][\s]+Unable[\s]+to[\s]+([\s]*decipher[\s]+|[\s]*decypher[\s]+)[\s]+response[\s]+message[\s]+Server[\s]+=[\s]+(?<hostip>[^,]*),[\s]+User[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId119"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "109029" {
		# MESSAGE 109029
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Parsing downloaded ACL: WARNING: { <<<listnum>> | '<listnum>' | <listnum> } <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Parsing[\s]+downloaded[\s]+ACL:[\s]+WARNING:[\s]+([\s]*<(?<listnum>[^>]*)>[\s]+|[\s]*'(?<listnum>[^']*)'[\s]+|[\s]*(?<listnum>[^\s]*)[\s]+)[\s]+(?<result>.*)$" }
				id => "message-109029"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "109029"
					"[rsa][message][id1]" => "109029"
					"[event][categoryid]" => "1501050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 109029:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Parsing downloaded ACL: ERROR: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Parsing downloaded ACL: ERROR: %{result}" }
				id => "message-109029:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "109029:01"
					"[rsa][message][id1]" => "109029:01"
					"[event][categoryid]" => "1501050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId122
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Unable to install ACL '<listnum>', downloaded for user { '<username>' | <username> }; Error in ACE: '<result>'
	else if [logstash][msgparser][id] == "msgParserId122" {
		grok {
			match => { "message" => "^Unable[\s]+to[\s]+install[\s]+ACL[\s]+'(?<listnum>[^']*)',[\s]+downloaded[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+);[\s]+Error[\s]+in[\s]+ACE:[\s]+'(?<result>[^']*)'$" }
			id => "msgParserId122"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "109033" {
		# MESSAGE 109033:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Authentication Failed><@result:Interactive challenge processing not supported>Authentication failed for admin user { '<username>' | <username> } from <saddr>. Interactive challenge processing is not supported for { administrative <protocol> | <protocol> <info> } connections
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication[\s]+failed[\s]+for[\s]+admin[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^\.]*)\.[\s]+Interactive[\s]+challenge[\s]+processing[\s]+is[\s]+not[\s]+supported[\s]+for[\s]+([\s]*administrative[\s]+(?<protocol>[^\s]*)[\s]+|[\s]*(?<protocol>[^\s]*)[\s]+(?<info>[^\s]*)[\s]+)[\s]+connections$" }
				id => "message-109033:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Authentication Failed"
				"result" => "Interactive challenge processing not supported"
					"[event][id]" => "109033:01"
					"[rsa][message][id1]" => "109033:01"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 109033
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Authentication Failed><@result:Interactive challenge processing not supported>Authentication failed for admin user { '<username>' | <username> } from <saddr>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication[\s]+failed[\s]+for[\s]+admin[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<saddr>[^\.]*)\.$" }
				id => "message-109033"
				add_field => {
				"level" => "%{level}"
				"action" => "Authentication Failed"
				"result" => "Interactive challenge processing not supported"
					"[event][id]" => "109033"
					"[rsa][message][id1]" => "109033"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId125
	# line in RSA: <@level:*HDR(level)><@msg:*PARMVAL($MSG)><@event_description:Uauth Unproxy Failed> uauth_pickapp: Uauth Unproxy Failed due to the reason: <result>
	else if [logstash][msgparser][id] == "msgParserId125" {
		dissect {
			mapping => { "message" => "uauth_pickapp: Uauth Unproxy Failed due to the reason: %{result}" }
			id => "msgParserId125"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Uauth Unproxy Failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId126
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>No route to <daddr> from <saddr> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId126" {
		dissect {
			mapping => { "message" => "No route to %{daddr} from %{saddr}" }
			id => "msgParserId126"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "110002" {
		# MESSAGE 110002
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>No ARP for host <hostip> <@msg:*PARMVAL($MSG)><@event_description:No ARP for host>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No ARP for host %{hostip}" }
				id => "message-110002"
				add_field => {
				"level" => "%{level}"
				"event_description" => "No ARP for host"
					"[event][id]" => "110002"
					"[rsa][message][id1]" => "110002"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 110002:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Failed to locate egress interface>Failed to locate egress interface for <protocol> from <sinterface>:<saddr>/<sport> to <daddr>/<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to locate egress interface for %{protocol} from %{sinterface}:%{saddr}/%{sport} to %{daddr}/%{dport}" }
				id => "message-110002:01"
				add_field => {
				"level" => "%{level}"
				"event_description" => "Failed to locate egress interface"
					"[event][id]" => "110002:01"
					"[rsa][message][id1]" => "110002:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "110003" {
		# MESSAGE 110003:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:Routing failed to locate next-hop>Routing failed to locate next-hop for <protocol> from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport><@result:Routing failed to locate next-hop><@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Routing failed to locate next-hop for %{protocol} from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
				id => "message-110003:01"
				add_field => {
				"level" => "%{level}"
				"event_description" => "Routing failed to locate next-hop"
				"result" => "Routing failed to locate next-hop"
					"[event][id]" => "110003:01"
					"[rsa][message][id1]" => "110003:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 110003:02
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>No interface is configured (with <interface>).<@event_description:No interface configured><@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No interface is configured (with %{interface})." }
				id => "message-110003:02"
				add_field => {
				"level" => "%{level}"
				"event_description" => "No interface configured"
					"[event][id]" => "110003:02"
					"[rsa][message][id1]" => "110003:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 110003
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-110003"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "110003"
					"[rsa][message][id1]" => "110003"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId131
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Modify><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Begin configuration: <hostip> writing to <device> <@msg:*PARMVAL($MSG)><@event_description:Begin configuration writing to device>
	else if [logstash][msgparser][id] == "msgParserId131" {
		dissect {
			mapping => { "message" => "Begin configuration: %{hostip} writing to %{device}" }
			id => "msgParserId131"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Modify"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Begin configuration writing to device"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId132
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Read><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Begin configuration: <hostip> reading from <device> <@msg:*PARMVAL($MSG)><@result:Begin configuration reading from device>
	else if [logstash][msgparser][id] == "msgParserId132" {
		dissect {
			mapping => { "message" => "Begin configuration: %{hostip} reading from %{device}" }
			id => "msgParserId132"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Read"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
				"result" => "Begin configuration reading from device"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId133
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Delete><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><hostip> Erase configuration <@msg:*PARMVAL($MSG)><@event_description:Erase configuration>
	else if [logstash][msgparser][id] == "msgParserId133" {
		dissect {
			mapping => { "message" => "%{hostip} Erase configuration" }
			id => "msgParserId133"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Delete"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Erase configuration"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId134
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Stop><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>{ Console | console | <hostip> } end configuration: <disposition><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId134" {
		grok {
			match => { "message" => "^([\s]*Console[\s]+|[\s]*console[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+end[\s]+configuration:[\s]+(?<disposition>.*)$" }
			id => "msgParserId134"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Stop"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId135
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Stop><@ec_subject:Configuration><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>{ Console | console | <hostip> } end configuration: <disposition><@msg:*PARMVAL($MSG)><@result:end configuration: OK>
	else if [logstash][msgparser][id] == "msgParserId135" {
		grok {
			match => { "message" => "^([\s]*Console[\s]+|[\s]*console[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+end[\s]+configuration:[\s]+(?<disposition>.*)$" }
			id => "msgParserId135"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Stop"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "end configuration: OK"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId136
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Console Login from { '<username>' | <username> } at <hostip><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId136" {
		grok {
			match => { "message" => "^Console[\s]+Login[\s]+from[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+at[\s]+(?<hostip>.*)$" }
			id => "msgParserId136"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId137
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Read><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Begin configuration: { Console | console | <hostip> } reading from <device> <@msg:*PARMVAL($MSG)><@result:Begin configuration - reading from device>
	else if [logstash][msgparser][id] == "msgParserId137" {
		grok {
			match => { "message" => "^Begin[\s]+configuration:[\s]+([\s]*Console[\s]+|[\s]*console[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+reading[\s]+from[\s]+(?<device>[^\s]*)[\s]+$" }
			id => "msgParserId137"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Read"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
				"result" => "Begin configuration - reading from device"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "111008" {
		# MESSAGE 111008
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>User { '<username>' | <username> } executed the command <action> <@msg:*PARMVAL($MSG)><@result:user executed command>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+executed[\s]+the[\s]+command[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-111008"
				add_field => {
				"level" => "%{level}"
				"result" => "user executed command"
					"[event][id]" => "111008"
					"[rsa][message][id1]" => "111008"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 111008:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>User { '<username>' | <username> } executed the { '<action>'<fld1>'' | '<action>'<fld1>' | '<action>' | <info> } command <@msg:*PARMVAL($MSG)><@result:user executed command>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+executed[\s]+the[\s]+([\s]*'(?<action>[^']*)'(?<fld1>[^']*)''[\s]+|[\s]*'(?<action>[^']*)'(?<fld1>[^']*)'[\s]+|[\s]*'(?<action>[^']*)'[\s]+|[\s]*(?<info>[^\s]*)[\s]+)[\s]+command[\s]+$" }
				id => "message-111008:01"
				add_field => {
				"level" => "%{level}"
				"result" => "user executed command"
					"[event][id]" => "111008:01"
					"[rsa][message][id1]" => "111008:01"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId140
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:User executed cmd> User { '<username>' | <username> } executed cmd:<info> 
	else if [logstash][msgparser][id] == "msgParserId140" {
		grok {
			match => { "message" => "^[\s]*User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+executed[\s]+cmd:(?<info>[^\s]*)[\s]+$" }
			id => "msgParserId140"
			add_field => {
				"level" => "%{level}"
				"result" => "User executed cmd"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId141
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:User executed cmd> User { '<username>' | <username> }, running 'CLI' from IP <saddr>, executed '<info>' 
	else if [logstash][msgparser][id] == "msgParserId141" {
		grok {
			match => { "message" => "^[\s]*User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+running[\s]+'CLI'[\s]+from[\s]+IP[\s]+(?<saddr>[^,]*),[\s]+executed[\s]+'(?<info>[^']*)'[\s]+$" }
			id => "msgParserId141"
			add_field => {
				"level" => "%{level}"
				"result" => "User executed cmd"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId142
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <event_description>
	else if [logstash][msgparser][id] == "msgParserId142" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId142"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId143
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Delete><@ec_subject:Configuration><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId143" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId143"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Delete"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "113001" {
		# MESSAGE 113001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Session limit reached>Unable to open AAA session. Session limit { <fld1> reached. | reached. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Unable[\s]+to[\s]+open[\s]+AAA[\s]+session\.[\s]+Session[\s]+limit[\s]+([\s]*(?<fld1>[^\s]*)[\s]+reached\.[\s]+|[\s]*reached\.[\s]+)$" }
				id => "message-113001:01"
				add_field => {
				"level" => "%{level}"
				"event_description" => "Session limit reached"
					"[event][id]" => "113001:01"
					"[rsa][message][id1]" => "113001:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 113001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-113001"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "113001"
					"[rsa][message][id1]" => "113001"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId145
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:AAA group policy set for user>AAA group policy for user { '<username>' | <username> } is being set to { <policyname>. | <policyname> }
	else if [logstash][msgparser][id] == "msgParserId145" {
		grok {
			match => { "message" => "^AAA[\s]+group[\s]+policy[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+is[\s]+being[\s]+set[\s]+to[\s]+([\s]*(?<policyname>[^\.]*)\.[\s]+|[\s]*(?<policyname>[^\s]*)[\s]+)$" }
			id => "msgParserId145"
			add_field => {
				"level" => "%{level}"
				"event_description" => "AAA group policy set for user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId146
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:AAA user accounting/authentication successful> AAA user { authentication | authorization | accounting } Successful : server = <hostip> : user = { '<username>' | <username> } 
	else if [logstash][msgparser][id] == "msgParserId146" {
		grok {
			match => { "message" => "^[\s]*AAA[\s]+user[\s]+([\s]*authentication[\s]+|[\s]*authorization[\s]+|[\s]*accounting[\s]+)[\s]+Successful[\s]+:[\s]+server[\s]+=[\s]+(?<hostip>[^\s]*)[\s]+:[\s]+user[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId146"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "AAA user accounting/authentication successful"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId147
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:user authentication rejected> AAA user { authentication | authorization } Rejected : reason = <result> : server = { <hostip> : | <hostip>, } { User | user } = { '<username>' | <username> } 
	else if [logstash][msgparser][id] == "msgParserId147" {
		grok {
			match => { "message" => "^[\s]*AAA[\s]+user[\s]+([\s]*authentication[\s]+|[\s]*authorization[\s]+)[\s]+Rejected[\s]+:[\s]+reason[\s]+=[\s]+(?<result>[^\s]*)[\s]+:[\s]+server[\s]+=[\s]+([\s]*(?<hostip>[^\s]*)[\s]+:[\s]+|[\s]*(?<hostip>[^,]*),[\s]+)[\s]+([\s]*User[\s]+|[\s]*user[\s]+)[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId147"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "user authentication rejected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId148
	# line in RSA: <@ec_subject:User><@ec_activity:Lockout><@ec_theme:Authentication><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:User locked out> User { '<username>' | <username> } locked out on <result>
	else if [logstash][msgparser][id] == "msgParserId148" {
		grok {
			match => { "message" => "^[\s]*User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+locked[\s]+out[\s]+on[\s]+(?<result>.*)$" }
			id => "msgParserId148"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Lockout"
				"ec_theme" => "Authentication"
				"level" => "%{level}"
				"action" => "User locked out"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId149
	# line in RSA: <@ec_subject:User><@ec_theme:AccessControl><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>AAA transaction status <disposition> : user = { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId149" {
		grok {
			match => { "message" => "^AAA[\s]+transaction[\s]+status[\s]+(?<disposition>[^\s]*)[\s]+:[\s]+user[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId149"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId150
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:retrieved default group policy>AAA retrieved default group policy { (<policyname>) | <policyname> } for { user = | user } { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId150" {
		grok {
			match => { "message" => "^AAA[\s]+retrieved[\s]+default[\s]+group[\s]+policy[\s]+([\s]*\((?<policyname>[^\)]*)\)[\s]+|[\s]*(?<policyname>[^\s]*)[\s]+)[\s]+for[\s]+([\s]*user[\s]+=[\s]+|[\s]*user[\s]+)[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId150"
			add_field => {
				"level" => "%{level}"
				"result" => "retrieved default group policy"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId151
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:AAA challenge received for user> AAA { challenge | challege } received for user { '<username>' | <username> } from server <hostip>
	else if [logstash][msgparser][id] == "msgParserId151" {
		grok {
			match => { "message" => "^[\s]*AAA[\s]+([\s]*challenge[\s]+|[\s]*challege[\s]+)[\s]+received[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+server[\s]+(?<hostip>.*)$" }
			id => "msgParserId151"
			add_field => {
				"level" => "%{level}"
				"result" => "AAA challenge received for user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId152
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:AAA retrieved user specific group policy>AAA retrieved user specific group policy { (<policyname>) | <policyname> } for user = { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId152" {
		grok {
			match => { "message" => "^AAA[\s]+retrieved[\s]+user[\s]+specific[\s]+group[\s]+policy[\s]+([\s]*\((?<policyname>[^\)]*)\)[\s]+|[\s]*(?<policyname>[^\s]*)[\s]+)[\s]+for[\s]+user[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId152"
			add_field => {
				"level" => "%{level}"
				"result" => "AAA retrieved user specific group policy"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId153
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:AAA user authentication successful>AAA user authentication Successful : local database : user = { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId153" {
		grok {
			match => { "message" => "^AAA[\s]+user[\s]+authentication[\s]+Successful[\s]+:[\s]+local[\s]+database[\s]+:[\s]+user[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId153"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "AAA user authentication successful"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId154
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:AAA unable to complete the request>AAA unable to complete the request Error : reason = <result>: user = { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId154" {
		grok {
			match => { "message" => "^AAA[\s]+unable[\s]+to[\s]+complete[\s]+the[\s]+request[\s]+Error[\s]+:[\s]+reason[\s]+=[\s]+(?<result>[^:]*):[\s]+user[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId154"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"action" => "AAA unable to complete the request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId155
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:server not accessible>AAA { authentication | authorization } server not accessible : server =  <hostip> : user = { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId155" {
		grok {
			match => { "message" => "^AAA[\s]+([\s]*authentication[\s]+|[\s]*authorization[\s]+)[\s]+server[\s]+not[\s]+accessible[\s]+:[\s]+server[\s]+=[\s]+(?<hostip>[^\s]*)[\s]+:[\s]+user[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId155"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"action" => "server not accessible"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId156
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><action> : reason = <result> : local database : user = { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId156" {
		grok {
			match => { "message" => "^(?<action>[^\s]*)[\s]+:[\s]+reason[\s]+=[\s]+(?<result>[^\s]*)[\s]+:[\s]+local[\s]+database[\s]+:[\s]+user[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId156"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId157
	# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@host:*PARMVAL(hostip)><@msg:*PARMVAL($MSG)><action> : reason = <result> : server = <hostip> : user = { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId157" {
		grok {
			match => { "message" => "^(?<action>[^\s]*)[\s]+:[\s]+reason[\s]+=[\s]+(?<result>[^\s]*)[\s]+:[\s]+server[\s]+=[\s]+(?<hostip>[^\s]*)[\s]+:[\s]+user[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId157"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"host" => "%{hostip}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "113019" {
		# MESSAGE 113019:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@bytes:*CALC(sbytes,+,rbytes)><@msg:*PARMVAL($MSG)><@duration:*DUR($MSG,'%A%N%T%O',day,hour,min,second)> Group = <group>, Username = { '<username>' | <username> }, IP = <hostip>, <action> Session Type: <network_service>, Duration: <day>d <hour>h:<min>m:<second>s,<@fld61:*PARMVAL(hour)> Bytes xmt: <sbytes>, Bytes rcv: <rbytes>, Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<hostip>[^,]*),[\s]+(?<action>[^\s]*)[\s]+Session[\s]+Type:[\s]+(?<network_service>[^,]*),[\s]+Duration:[\s]+(?<day>[^d]*)d[\s]+(?<hour>[^h]*)h:(?<min>[^m]*)m:(?<second>[^s]*)s,(?<@fld61:*PARMVAL(hour)>[^\s]*)[\s]+Bytes[\s]+xmt:[\s]+(?<sbytes>[^,]*),[\s]+Bytes[\s]+rcv:[\s]+(?<rbytes>[^,]*),[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-113019:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "113019:01"
					"[rsa][message][id1]" => "113019:01"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 113019:02
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@bytes:*CALC(sbytes,+,rbytes)><@msg:*PARMVAL($MSG)><@duration:*DUR($MSG,'%N%U%O',hour,min,second)>Group = <group>, Username = { '<username>' | <username> }, IP = <hostip>, <action> Session Type: <network_service>, Duration: <hour>h:<min>m:<second>s,<@fld61:*PARMVAL(hour)> Bytes xmt: <sbytes>, Bytes rcv: <rbytes>, Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<hostip>[^,]*),[\s]+(?<action>[^\s]*)[\s]+Session[\s]+Type:[\s]+(?<network_service>[^,]*),[\s]+Duration:[\s]+(?<hour>[^h]*)h:(?<min>[^m]*)m:(?<second>[^s]*)s,(?<@fld61:*PARMVAL(hour)>[^\s]*)[\s]+Bytes[\s]+xmt:[\s]+(?<sbytes>[^,]*),[\s]+Bytes[\s]+rcv:[\s]+(?<rbytes>[^,]*),[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-113019:02"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "113019:02"
					"[rsa][message][id1]" => "113019:02"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 113019
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@bytes:*CALC(sbytes,+,rbytes)><@msg:*PARMVAL($MSG)>Group = <group>, Username = { '<username>' | <username> }, IP = <hostip>, <action> Session Type: <network_service>, Duration: <duration>, Bytes xmt: <sbytes>, Bytes rcv: <rbytes>, Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<hostip>[^,]*),[\s]+(?<action>[^\s]*)[\s]+Session[\s]+Type:[\s]+(?<network_service>[^,]*),[\s]+Duration:[\s]+(?<duration>[^,]*),[\s]+Bytes[\s]+xmt:[\s]+(?<sbytes>[^,]*),[\s]+Bytes[\s]+rcv:[\s]+(?<rbytes>[^,]*),[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-113019"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "113019"
					"[rsa][message][id1]" => "113019"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId161
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Kerberos error> Kerberos error : Clock skew with server <hostip> greater than 300 seconds
	else if [logstash][msgparser][id] == "msgParserId161" {
		dissect {
			mapping => { "message" => "Kerberos error : Clock skew with server %{hostip} greater than 300 seconds" }
			id => "msgParserId161"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"result" => "Kerberos error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId162
	# line in RSA: <@ec_subject:Service><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:AAA marking Server as FAILED> AAA Marking <protocol> server <hostip> in aaa-server group <fld1> as FAILED 
	else if [logstash][msgparser][id] == "msgParserId162" {
		dissect {
			mapping => { "message" => "AAA Marking %{protocol} server %{hostip} in aaa-server group %{fld1} as FAILED" }
			id => "msgParserId162"
			add_field => {
				"ec_subject" => "Service"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "AAA marking Server as FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId163
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:AAA marking Server as ACTIVE> AAA Marking <protocol> server <hostip> in aaa-server group <fld1> as ACTIVE
	else if [logstash][msgparser][id] == "msgParserId163" {
		dissect {
			mapping => { "message" => "AAA Marking %{protocol} server %{hostip} in aaa-server group %{fld1} as ACTIVE" }
			id => "msgParserId163"
			add_field => {
				"level" => "%{level}"
				"event_description" => "AAA marking Server as ACTIVE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "199001" {
		# MESSAGE 199001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>{ PIX reload | Reload } command executed from { <process> (remote <hostip>). | <hostip>. }<@result:Reload command executed> <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*PIX[\s]+reload[\s]+|[\s]*Reload[\s]+)[\s]+command[\s]+executed[\s]+from[\s]+([\s]*(?<process>[^\s]*)[\s]+\(remote[\s]+(?<hostip>[^\)]*)\)\.[\s]+|[\s]*(?<hostip>[^\.]*)\.[\s]+)[\s]+$" }
				id => "message-199001:01"
				add_field => {
				"level" => "%{level}"
				"result" => "Reload command executed"
					"[event][id]" => "199001:01"
					"[rsa][message][id1]" => "199001:01"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 199001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-199001"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "199001"
					"[rsa][message][id1]" => "199001"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId165
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:clear config>PIX clear config <fld1> from <fld2>
	else if [logstash][msgparser][id] == "msgParserId165" {
		dissect {
			mapping => { "message" => "PIX clear config %{fld1} from %{fld2}" }
			id => "msgParserId165"
			add_field => {
				"level" => "%{level}"
				"event_description" => "clear config"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId166
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Orderly reload started>Orderly reload started at <fld1> by { '<username>' | <username> }. Reload reason: <result>
	else if [logstash][msgparser][id] == "msgParserId166" {
		grok {
			match => { "message" => "^Orderly[\s]+reload[\s]+started[\s]+at[\s]+(?<fld1>[^\s]*)[\s]+by[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)\.[\s]+Reload[\s]+reason:[\s]+(?<result>.*)$" }
			id => "msgParserId166"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Orderly reload started"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId167
	# line in RSA: <@ec_activity:Modify><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Reload scheduled>Reload scheduled for <fld1> by { '<username>' | <username> } at <fld2>. Reload reason: <result>
	else if [logstash][msgparser][id] == "msgParserId167" {
		grok {
			match => { "message" => "^Reload[\s]+scheduled[\s]+for[\s]+(?<fld1>[^\s]*)[\s]+by[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+at[\s]+(?<fld2>[^\.]*)\.[\s]+Reload[\s]+reason:[\s]+(?<result>.*)$" }
			id => "msgParserId167"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Reload scheduled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId168
	# line in RSA: <@ec_subject:User><@ec_activity:Modify><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:Scheduled reload>Scheduled reload for <fld1> cancelled by { '<username>' | <username> } at <fld2><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId168" {
		grok {
			match => { "message" => "^Scheduled[\s]+reload[\s]+for[\s]+(?<fld1>[^\s]*)[\s]+cancelled[\s]+by[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+at[\s]+(?<fld2>.*)$" }
			id => "msgParserId168"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Scheduled reload"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId169
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Reload operation> Reloaded at <fld1> by { '<username>' | <username> } from <process>. Reload reason: { [<result>] | <result> }
	else if [logstash][msgparser][id] == "msgParserId169" {
		grok {
			match => { "message" => "^[\s]*Reloaded[\s]+at[\s]+(?<fld1>[^\s]*)[\s]+by[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+from[\s]+(?<process>[^\.]*)\.[\s]+Reload[\s]+reason:[\s]+([\s]*\[(?<result>[^\]]*)\][\s]+|[\s]*(?<result>[^\s]*)[\s]+)$" }
			id => "msgParserId169"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Reload operation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId170
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:IP detected an attached application using port>IP detected an attached application using port <network_port> while removing context <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId170" {
		dissect {
			mapping => { "message" => "IP detected an attached application using port %{network_port} while removing context" }
			id => "msgParserId170"
			add_field => {
				"level" => "%{level}"
				"event_description" => "IP detected an attached application using port"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId171
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><protocol> detected an attached application using local port <sport> and destination port <dport><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId171" {
		dissect {
			mapping => { "message" => "%{protocol} detected an attached application using local port %{sport} and destination port %{dport}" }
			id => "msgParserId171"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId172
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><event_description><@msg:*PARMVAL($MSG)><@protocol:ICMP>
	else if [logstash][msgparser][id] == "msgParserId172" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId172"
			add_field => {
				"level" => "%{level}"
				"protocol" => "ICMP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId173
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Out of connections! <fld1>/<fld2> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId173" {
		dissect {
			mapping => { "message" => "Out of connections! %{fld1}/%{fld2}" }
			id => "msgParserId173"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "201002" {
		# MESSAGE 201002
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Too many connections on { static | xlate } <hostip>! <fld1> <fld2> <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Too[\s]+many[\s]+connections[\s]+on[\s]+([\s]*static[\s]+|[\s]*xlate[\s]+)[\s]+(?<hostip>[^!]*)![\s]+(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+$" }
				id => "message-201002"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "201002"
					"[rsa][message][id1]" => "201002"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 201002:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Too many { TCP | tcp } connections on { static | xlate } <hostip>! <fld1> <fld2> <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Too[\s]+many[\s]+([\s]*TCP[\s]+|[\s]*tcp[\s]+)[\s]+connections[\s]+on[\s]+([\s]*static[\s]+|[\s]*xlate[\s]+)[\s]+(?<hostip>[^!]*)![\s]+(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+$" }
				id => "message-201002:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "201002:01"
					"[rsa][message][id1]" => "201002:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId176
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(sinterface)>Embryonic limit exceeded <sinterface>/<dinterface> for <saddr>/<sport> (<hostip>) <daddr>/<dport> on interface <interface><@event_description:Embryonic limit exceeded>
	else if [logstash][msgparser][id] == "msgParserId176" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(sinterface)}Embryonic limit exceeded %{sinterface}/%{dinterface} for %{saddr}/%{sport} (%{hostip}) %{daddr}/%{dport} on interface %{interface}" }
			id => "msgParserId176"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Embryonic limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "201004" {
		# MESSAGE 201004:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Too many <protocol> connections on { static | xlate } <hostip>! <fld1> <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Too[\s]+many[\s]+(?<protocol>[^\s]*)[\s]+connections[\s]+on[\s]+([\s]*static[\s]+|[\s]*xlate[\s]+)[\s]+(?<hostip>[^!]*)![\s]+(?<fld1>[^\s]*)[\s]+$" }
				id => "message-201004:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "201004:01"
					"[rsa][message][id1]" => "201004:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 201004
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Too many embryonic connections on STRING <hostip> <fld1>/<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Too many embryonic connections on STRING %{hostip} %{fld1}/%{fld2}" }
				id => "message-201004"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "201004"
					"[rsa][message][id1]" => "201004"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId179
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><protocol> data connection failed for <hostip> <@msg:*PARMVAL($MSG)><@event_description:data connection failed>
	else if [logstash][msgparser][id] == "msgParserId179" {
		dissect {
			mapping => { "message" => "%{protocol} data connection failed for %{hostip}" }
			id => "msgParserId179"
			add_field => {
				"level" => "%{level}"
				"event_description" => "data connection failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId180
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>RCMD backconnection failed for <hostip>/<network_port> <@event_description:RCMD back connection failed><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId180" {
		dissect {
			mapping => { "message" => "RCMD backconnection failed for %{hostip}/%{network_port}" }
			id => "msgParserId180"
			add_field => {
				"level" => "%{level}"
				"event_description" => "RCMD back connection failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId181
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Unable to allocate new <protocol> connections (<saddr>/<sport>-<daddr>/<dport>) <@event_description:Unable to allocate new connections>
	else if [logstash][msgparser][id] == "msgParserId181" {
		dissect {
			mapping => { "message" => "Unable to allocate new %{protocol} connections (%{saddr}/%{sport}-%{daddr}/%{dport})" }
			id => "msgParserId181"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Unable to allocate new connections"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId182
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:New connections disallowed><event_description>
	else if [logstash][msgparser][id] == "msgParserId182" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId182"
			add_field => {
				"level" => "%{level}"
				"action" => "New connections disallowed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId183
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@dclass_counter1_string:Number of connections>TCP connection limit of <dclass_counter1> for host <hostip> on <interface> exceeded<@msg:*PARMVAL($MSG)><@event_description:TCP connection limit exceeded>
	else if [logstash][msgparser][id] == "msgParserId183" {
		dissect {
			mapping => { "message" => "%{@dclass_counter1_string:Number of connections}TCP connection limit of %{dclass_counter1} for host %{hostip} on %{interface} exceeded" }
			id => "msgParserId183"
			add_field => {
				"level" => "%{level}"
				"event_description" => "TCP connection limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId184
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Embryonic connection limit exceeded <fld1>/<fld2> for <direction> packet from <saddr>/<sport> to <daddr>/<dport> on interface <interface> <@event_description:Embyonic connection limit exceeded>
	else if [logstash][msgparser][id] == "msgParserId184" {
		dissect {
			mapping => { "message" => "Embryonic connection limit exceeded %{fld1}/%{fld2} for %{direction} packet from %{saddr}/%{sport} to %{daddr}/%{dport} on interface %{interface}" }
			id => "msgParserId184"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Embyonic connection limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId185
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Connection limit exceeded <fld1>/<fld2> for <direction> packet from <saddr>/<sport> to <daddr>/<dport> on interface <interface> <@event_description:Connection limit exceeded>
	else if [logstash][msgparser][id] == "msgParserId185" {
		dissect {
			mapping => { "message" => "Connection limit exceeded %{fld1}/%{fld2} for %{direction} packet from %{saddr}/%{sport} to %{daddr}/%{dport} on interface %{interface}" }
			id => "msgParserId185"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Connection limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId186
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Unable to find translation for SRC=<saddr> DEST=<daddr> <info> 
	else if [logstash][msgparser][id] == "msgParserId186" {
		dissect {
			mapping => { "message" => "Unable to find translation for SRC=%{saddr} DEST=%{daddr} %{info}" }
			id => "msgParserId186"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId187
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Could not build translation for <saddr>.
	else if [logstash][msgparser][id] == "msgParserId187" {
		dissect {
			mapping => { "message" => "Could not build translation for %{saddr}." }
			id => "msgParserId187"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId188
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Could not build portmap translation for <saddr>.
	else if [logstash][msgparser][id] == "msgParserId188" {
		dissect {
			mapping => { "message" => "Could not build portmap translation for %{saddr}." }
			id => "msgParserId188"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId189
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Non-embryonic in embryonic list <saddr>/<sport> <daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId189" {
		dissect {
			mapping => { "message" => "Non-embryonic in embryonic list %{saddr}/%{sport} %{daddr}/%{dport}" }
			id => "msgParserId189"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId190
	# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:No Key SPI><info> Error: No Key SPI <fld1> SRC <saddr> DEST <daddr><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId190" {
		dissect {
			mapping => { "message" => "%{info} Error: No Key SPI %{fld1} SRC %{saddr} DEST %{daddr}" }
			id => "msgParserId190"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"event_description" => "No Key SPI"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId191
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>(FUNCTION:<fld1>) pix clear <fld2> return <resultcode>
	else if [logstash][msgparser][id] == "msgParserId191" {
		dissect {
			mapping => { "message" => "(FUNCTION:%{fld1}) pix clear %{fld2} return %{resultcode}" }
			id => "msgParserId191"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId192
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Unable to allocate frag record>IPFRAG: Unable to allocate frag record for <saddr>/<sport> to <daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId192" {
		dissect {
			mapping => { "message" => "IPFRAG: Unable to allocate frag record for %{saddr}/%{sport} to %{daddr}/%{dport}" }
			id => "msgParserId192"
			add_field => {
				"level" => "%{level}"
				"action" => "Unable to allocate frag record"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId193
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:First Frag have not been seen>IPFRAG: First Frag have not been seen <saddr> to <daddr> 
	else if [logstash][msgparser][id] == "msgParserId193" {
		dissect {
			mapping => { "message" => "IPFRAG: First Frag have not been seen %{saddr} to %{daddr}" }
			id => "msgParserId193"
			add_field => {
				"level" => "%{level}"
				"action" => "First Frag have not been seen"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId194
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Fragment database limit of <fld1> exceeded: <space> src = <saddr>, <space> dest = <daddr>, proto = <protocol>, id = <fld2> <@action:Fragment database limit exceeded>
	else if [logstash][msgparser][id] == "msgParserId194" {
		dissect {
			mapping => { "message" => "Fragment database limit of %{fld1} exceeded: %{space} src = %{saddr}, %{space} dest = %{daddr}, proto = %{protocol}, id = %{fld2}" }
			id => "msgParserId194"
			add_field => {
				"level" => "%{level}"
				"action" => "Fragment database limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId195
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Invalid IP fragment, size = <icmptype> exceeds maximum size = <icmpcode>: <space> src = <saddr>, dest = <daddr>, proto = <protocol>, id = <fld1> <@event_description:Invalid IP fragment><@result:size exceeded>
	else if [logstash][msgparser][id] == "msgParserId195" {
		dissect {
			mapping => { "message" => "Invalid IP fragment, size = %{icmptype} exceeds maximum size = %{icmpcode}: %{space} src = %{saddr}, dest = %{daddr}, proto = %{protocol}, id = %{fld1}" }
			id => "msgParserId195"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Invalid IP fragment"
				"result" => "size exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId196
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Discard IP fragment set with more than <fld1> elements: <space> src = <saddr>, dest = <daddr>, proto = <protocol>, id = <policy_id> <@event_description:Discarded IP fragment><@result:number of elements exceeded>
	else if [logstash][msgparser][id] == "msgParserId196" {
		dissect {
			mapping => { "message" => "Discard IP fragment set with more than %{fld1} elements: %{space} src = %{saddr}, dest = %{daddr}, proto = %{protocol}, id = %{policy_id}" }
			id => "msgParserId196"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Discarded IP fragment"
				"result" => "number of elements exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId197
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>LU SMNAME error = <resultcode>
	else if [logstash][msgparser][id] == "msgParserId197" {
		dissect {
			mapping => { "message" => "LU SMNAME error = %{resultcode}" }
			id => "msgParserId197"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId198
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>LU look NAT for <hostip> failed
	else if [logstash][msgparser][id] == "msgParserId198" {
		dissect {
			mapping => { "message" => "LU look NAT for %{hostip} failed" }
			id => "msgParserId198"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId199
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>LU no xlate for <saddr>/<sport> <daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId199" {
		dissect {
			mapping => { "message" => "LU no xlate for %{saddr}/%{sport} %{daddr}/%{dport}" }
			id => "msgParserId199"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId200
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Unable to allocate a new record for a UDP connection><@protocol:UDP>LU make UDP connection for <saddr>:<sport> <daddr>:<dport> failed
	else if [logstash][msgparser][id] == "msgParserId200" {
		dissect {
			mapping => { "message" => "LU make UDP connection for %{saddr}:%{sport} %{daddr}:%{dport} failed" }
			id => "msgParserId200"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Unable to allocate a new record for a UDP connection"
				"protocol" => "UDP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId201
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>LU create static xlate <hostip> ifc <interface> failed
	else if [logstash][msgparser][id] == "msgParserId201" {
		dissect {
			mapping => { "message" => "LU create static xlate %{hostip} ifc %{interface} failed" }
			id => "msgParserId201"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId202
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Unable to open <protocol> channel (UDP port <network_port>) on interface <interface>, error code = <resultcode>
	else if [logstash][msgparser][id] == "msgParserId202" {
		dissect {
			mapping => { "message" => "Unable to open %{protocol} channel (UDP port %{network_port}) on interface %{interface}, error code = %{resultcode}" }
			id => "msgParserId202"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId203
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Unable to open <protocol> trap channel (UDP port <network_port>) on interface <interface>, error code = <resultcode>
	else if [logstash][msgparser][id] == "msgParserId203" {
		dissect {
			mapping => { "message" => "Unable to open %{protocol} trap channel (UDP port %{network_port}) on interface %{interface}, error code = %{resultcode}" }
			id => "msgParserId203"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId204
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Unable to receive an <protocol> request on interface <interface>, error code = <resultcode>, will try again.
	else if [logstash][msgparser][id] == "msgParserId204" {
		dissect {
			mapping => { "message" => "Unable to receive an %{protocol} request on interface %{interface}, error code = %{resultcode}, will try again." }
			id => "msgParserId204"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId205
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Unable to send an <protocol> response to IP Address <daddr> Port <dport> interface <interface>, error code = <resultcode>
	else if [logstash][msgparser][id] == "msgParserId205" {
		dissect {
			mapping => { "message" => "Unable to send an %{protocol} response to IP Address %{daddr} Port %{dport} interface %{interface}, error code = %{resultcode}" }
			id => "msgParserId205"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId206
	# line in RSA: <@action:Interface exceeds data buffer size><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <direction> <protocol> request (<bytes> bytes) { from IP address <saddr> Port <sport> Interface "<interface>" | on interface <interface> } exceeds data buffer { SIZE, | size, } <result>.
	else if [logstash][msgparser][id] == "msgParserId206" {
		grok {
			match => { "message" => "^[\s]*(?<direction>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+request[\s]+\((?<bytes>[^\s]*)[\s]+bytes\)[\s]+([\s]*from[\s]+IP[\s]+address[\s]+(?<saddr>[^\s]*)[\s]+Port[\s]+(?<sport>[^\s]*)[\s]+Interface[\s]+\"(?<interface>[^\"]*)\"[\s]+|[\s]*on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+)[\s]+exceeds[\s]+data[\s]+buffer[\s]+([\s]*SIZE,[\s]+|[\s]*size,[\s]+)[\s]+(?<result>[^\.]*)\.$" }
			id => "msgParserId206"
			add_field => {
				"action" => "Interface exceeds data buffer size"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId207
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Dropping SNMP request> Dropping <protocol> request from <saddr>/<sport> to <dinterface>:<daddr>/<dport> because: <result>
	else if [logstash][msgparser][id] == "msgParserId207" {
		dissect {
			mapping => { "message" => "Dropping %{protocol} request from %{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} because: %{result}" }
			id => "msgParserId207"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Dropping SNMP request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId208
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>PPTP control daemon socket io <info><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId208" {
		dissect {
			mapping => { "message" => "PPTP control daemon socket io %{info}" }
			id => "msgParserId208"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId209
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Terminating manager session from <saddr> on interface <interface>.<space>Reason: <result> <@action:Terminated manager session>
	else if [logstash][msgparser][id] == "msgParserId209" {
		dissect {
			mapping => { "message" => "Terminating manager session from %{saddr} on interface %{interface}.%{space}Reason: %{result}" }
			id => "msgParserId209"
			add_field => {
				"level" => "%{level}"
				"action" => "Terminated manager session"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId210
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:i2c_read_block_w_suspend() error> <service> error, slot = <fld1>, device = <fld2>, address = <fld3>, byte count = <bytes>. Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId210" {
		dissect {
			mapping => { "message" => "%{service} error, slot = %{fld1}, device = %{fld2}, address = %{fld3}, byte count = %{bytes}. Reason: %{result}" }
			id => "msgParserId210"
			add_field => {
				"level" => "%{level}"
				"action" => "i2c_read_block_w_suspend() error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId211
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:HTTP config denied>Denied HTTP configuration attempt from <saddr>
	else if [logstash][msgparser][id] == "msgParserId211" {
		dissect {
			mapping => { "message" => "Denied HTTP configuration attempt from %{saddr}" }
			id => "msgParserId211"
			add_field => {
				"level" => "%{level}"
				"action" => "HTTP config denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "302001" {
		# MESSAGE 302001
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:inbound>Built inbound TCP connection <fld1> for faddr <saddr>/<sport> gaddr <hostip>/<network_port> laddr <daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built inbound TCP connection %{fld1} for faddr %{saddr}/%{sport} gaddr %{hostip}/%{network_port} laddr %{daddr}/%{dport}" }
				id => "message-302001"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"direction" => "inbound"
					"[event][id]" => "302001"
					"[rsa][message][id1]" => "302001"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302001:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:outbound>Built outbound TCP connection <fld1> for faddr <daddr>/<dport> gaddr <hostip>/<network_port> laddr <saddr>/<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built outbound TCP connection %{fld1} for faddr %{daddr}/%{dport} gaddr %{hostip}/%{network_port} laddr %{saddr}/%{sport}" }
				id => "message-302001:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"direction" => "outbound"
					"[event][id]" => "302001:01"
					"[rsa][message][id1]" => "302001:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302001:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Built TCP connection <fld1> for faddr <saddr>/<sport> gaddr <hostip>/<network_port> laddr <daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built TCP connection %{fld1} for faddr %{saddr}/%{sport} gaddr %{hostip}/%{network_port} laddr %{daddr}/%{dport}" }
				id => "message-302001:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "302001:02"
					"[rsa][message][id1]" => "302001:02"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302001:03
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Built outbound TCP connection <fld1> for <dinterface>:<daddr>/<dport> (<hostip>) to <sinterface>:<saddr>/<sport> (<fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built outbound TCP connection %{fld1} for %{dinterface}:%{daddr}/%{dport} (%{hostip}) to %{sinterface}:%{saddr}/%{sport} (%{fld3})" }
				id => "message-302001:03"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "302001:03"
					"[rsa][message][id1]" => "302001:03"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302001:04
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Built <direction> TCP connection <fld1> for <sinterface>:<saddr>/<sport> (<hostip>) to <dinterface>:<daddr>/<dport> (<fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built %{direction} TCP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} (%{hostip}) to %{dinterface}:%{daddr}/%{dport} (%{fld3})" }
				id => "message-302001:04"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "302001:04"
					"[rsa][message][id1]" => "302001:04"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "302002" {
		# MESSAGE 302002
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:teardown connection><@protocol:TCP>Teardown TCP connection <fld1> faddr <saddr>/<sport> gaddr <hostip>/<network_port> laddr <daddr>/<dport> duration <duration> bytes <bytes> (<fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown TCP connection %{fld1} faddr %{saddr}/%{sport} gaddr %{hostip}/%{network_port} laddr %{daddr}/%{dport} duration %{duration} bytes %{bytes} (%{fld3})" }
				id => "message-302002"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
				"protocol" => "TCP"
					"[event][id]" => "302002"
					"[rsa][message][id1]" => "302002"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302002:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:teardown connection><@protocol:TCP>Teardown TCP connection <fld1> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <duration> bytes <bytes> <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown TCP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{duration} bytes %{bytes} %{fld2}" }
				id => "message-302002:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
				"protocol" => "TCP"
					"[event][id]" => "302002:01"
					"[rsa][message][id1]" => "302002:01"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId219
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:build connection> Built H245 connection for faddr <saddr> laddr <daddr> 
	else if [logstash][msgparser][id] == "msgParserId219" {
		dissect {
			mapping => { "message" => "Built H245 connection for faddr %{saddr} laddr %{daddr}" }
			id => "msgParserId219"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "build connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "302004" {
		# MESSAGE 302004
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@msg:*PARMVAL($MSG)><@action:Connection pre-allocated>{ Preallocate | Pre-allocate } <network_service> <protocol> backconnection for { faddr | foreign_address } { <saddr>/<sport> | <saddr> }  to { laddr | local_address } { <daddr>/<dport> | <daddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Preallocate[\s]+|[\s]*Pre\-allocate[\s]+)[\s]+(?<network_service>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+backconnection[\s]+for[\s]+([\s]*faddr[\s]+|[\s]*foreign_address[\s]+)[\s]+([\s]*(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+to[\s]+([\s]*laddr[\s]+|[\s]*local_address[\s]+)[\s]+([\s]*(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)$" }
				id => "message-302004"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"action" => "Connection pre-allocated"
					"[event][id]" => "302004"
					"[rsa][message][id1]" => "302004"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 302004:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@msg:*PARMVAL($MSG)><@action:Connection pre-allocated>{ Preallocate | Pre-allocate } <network_service> <protocol> backconnection for { faddr | foreign_address } <saddr> to { laddr | local_address } { <daddr>/<dport> | <daddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Preallocate[\s]+|[\s]*Pre\-allocate[\s]+)[\s]+(?<network_service>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+backconnection[\s]+for[\s]+([\s]*faddr[\s]+|[\s]*foreign_address[\s]+)[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+([\s]*laddr[\s]+|[\s]*local_address[\s]+)[\s]+([\s]*(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)$" }
				id => "message-302004:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"action" => "Connection pre-allocated"
					"[event][id]" => "302004:01"
					"[rsa][message][id1]" => "302004:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "302005" {
		# MESSAGE 302005
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:build connection> Built UDP connection for faddr <saddr>/<sport> gaddr <hostip>/<network_port> laddr <daddr>/<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built UDP connection for faddr %{saddr}/%{sport} gaddr %{hostip}/%{network_port} laddr %{daddr}/%{dport}" }
				id => "message-302005"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "build connection"
					"[event][id]" => "302005"
					"[rsa][message][id1]" => "302005"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302005:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:build connection> Built outbound UDP connection <fld1> for <dinterface>:<daddr>/<dport> (<hostip>) to <sinterface>:<saddr>/<sport> (<fld3>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built outbound UDP connection %{fld1} for %{dinterface}:%{daddr}/%{dport} (%{hostip}) to %{sinterface}:%{saddr}/%{sport} (%{fld3})" }
				id => "message-302005:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "build connection"
					"[event][id]" => "302005:01"
					"[rsa][message][id1]" => "302005:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302005:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:build connection> Built <direction> UDP connection <fld1> for <sinterface>:<saddr>/<sport> (<hostip>) to <dinterface>:<daddr>/<dport> (<fld3>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built %{direction} UDP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} (%{hostip}) to %{dinterface}:%{daddr}/%{dport} (%{fld3})" }
				id => "message-302005:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "build connection"
					"[event][id]" => "302005:02"
					"[rsa][message][id1]" => "302005:02"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "302006" {
		# MESSAGE 302006
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Teardown UDP connection for faddr <saddr>/<sport> gaddr <hostip>/<network_port> laddr <daddr>/<dport><@action:teardown connection><@protocol:UDP>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown UDP connection for faddr %{saddr}/%{sport} gaddr %{hostip}/%{network_port} laddr %{daddr}/%{dport}" }
				id => "message-302006"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
				"protocol" => "UDP"
					"[event][id]" => "302006"
					"[rsa][message][id1]" => "302006"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302006:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Teardown UDP connection <fld1> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <duration> bytes <bytes> <@action:teardown connection><@protocol:UDP> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown UDP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{duration} bytes %{bytes}" }
				id => "message-302006:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
				"protocol" => "UDP"
					"[event][id]" => "302006:01"
					"[rsa][message][id1]" => "302006:01"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId227
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:build connection> Built conduit from <sinterface>:<saddr> to <dinterface>:<daddr> IP version <fld1> protocol <protocol>
	else if [logstash][msgparser][id] == "msgParserId227" {
		dissect {
			mapping => { "message" => "Built conduit from %{sinterface}:%{saddr} to %{dinterface}:%{daddr} IP version %{fld1} protocol %{protocol}" }
			id => "msgParserId227"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "build connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId228
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Teardown connection> Teardown conduit from <sinterface>:<saddr> to <dinterface>:<daddr> IP version <fld1> protocol <protocol> 
	else if [logstash][msgparser][id] == "msgParserId228" {
		dissect {
			mapping => { "message" => "Teardown conduit from %{sinterface}:%{saddr} to %{dinterface}:%{daddr} IP version %{fld1} protocol %{protocol}" }
			id => "msgParserId228"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Teardown connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "302009" {
		# MESSAGE 302009:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Rebuilt <protocol> connection <connectionid> for { faddr | foreign_address } <saddr>/<sport> { gaddr | global_address } <hostip>/<network_port> { laddr | local_address } <daddr>/<dport><@action:Rebuilt connection>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Rebuilt[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+(?<connectionid>[^\s]*)[\s]+for[\s]+([\s]*faddr[\s]+|[\s]*foreign_address[\s]+)[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+([\s]*gaddr[\s]+|[\s]*global_address[\s]+)[\s]+(?<hostip>[^/]*)/(?<network_port>[^\s]*)[\s]+([\s]*laddr[\s]+|[\s]*local_address[\s]+)[\s]+(?<daddr>[^/]*)/(?<dport>.*)$" }
				id => "message-302009:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Rebuilt connection"
					"[event][id]" => "302009:01"
					"[rsa][message][id1]" => "302009:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302009
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Rebuild connection for { faddr | foreign_address } <saddr>/<sport> { gaddr | global_address } <hostip>/<network_port> { laddr | local_address } <daddr>/<dport><@action:Rebuilt connection>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Rebuild[\s]+connection[\s]+for[\s]+([\s]*faddr[\s]+|[\s]*foreign_address[\s]+)[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+([\s]*gaddr[\s]+|[\s]*global_address[\s]+)[\s]+(?<hostip>[^/]*)/(?<network_port>[^\s]*)[\s]+([\s]*laddr[\s]+|[\s]*local_address[\s]+)[\s]+(?<daddr>[^/]*)/(?<dport>.*)$" }
				id => "message-302009"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Rebuilt connection"
					"[event][id]" => "302009"
					"[rsa][message][id1]" => "302009"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId231
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Connection pre-allocated>{ Pre-allocate | Preallocate } <network_service> Call Signalling Connection for faddr <saddr>/<sport> to laddr <daddr>
	else if [logstash][msgparser][id] == "msgParserId231" {
		grok {
			match => { "message" => "^([\s]*Pre\-allocate[\s]+|[\s]*Preallocate[\s]+)[\s]+(?<network_service>[^\s]*)[\s]+Call[\s]+Signalling[\s]+Connection[\s]+for[\s]+faddr[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+laddr[\s]+(?<daddr>.*)$" }
			id => "msgParserId231"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Connection pre-allocated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "302013" {
		# MESSAGE 302013
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:inbound><@action:build connection>Built inbound <protocol> connection <connectionid> for <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>) { '<username>' | (<username>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Built[\s]+inbound[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+(?<connectionid>[^\s]*)[\s]+for[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+\((?<stransaddr>[^/]*)/(?<stransport>[^\)]*)\)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+\((?<dtransaddr>[^/]*)/(?<dtransport>[^\)]*)\)[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+)$" }
				id => "message-302013"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "inbound"
				"action" => "build connection"
					"[event][id]" => "302013"
					"[rsa][message][id1]" => "302013"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302013:01
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:outbound><@action:build connection>Built outbound <protocol> connection <connectionid> for <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>) to <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) { '<username>' | (<username>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Built[\s]+outbound[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+(?<connectionid>[^\s]*)[\s]+for[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+\((?<dtransaddr>[^/]*)/(?<dtransport>[^\)]*)\)[\s]+to[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+\((?<stransaddr>[^/]*)/(?<stransport>[^\)]*)\)[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+)$" }
				id => "message-302013:01"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "outbound"
				"action" => "build connection"
					"[event][id]" => "302013:01"
					"[rsa][message][id1]" => "302013:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302013:02
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:inbound><@action:build connection>Built inbound <protocol> connection <connectionid> for <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built inbound %{protocol} connection %{connectionid} for %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport})" }
				id => "message-302013:02"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "inbound"
				"action" => "build connection"
					"[event][id]" => "302013:02"
					"[rsa][message][id1]" => "302013:02"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302013:03
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:outbound><@action:build connection>Built outbound <protocol> connection <connectionid> for <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>) to <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built outbound %{protocol} connection %{connectionid} for %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}) to %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport})" }
				id => "message-302013:03"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "outbound"
				"action" => "build connection"
					"[event][id]" => "302013:03"
					"[rsa][message][id1]" => "302013:03"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302013:04
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:inbound><@action:build connection>Built inbound <protocol> connection <connectionid> for <sinterface> <saddr>/<sport> gaddr <hostip>/<network_port> <dinterface> <daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built inbound %{protocol} connection %{connectionid} for %{sinterface} %{saddr}/%{sport} gaddr %{hostip}/%{network_port} %{dinterface} %{daddr}/%{dport}" }
				id => "message-302013:04"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "inbound"
				"action" => "build connection"
					"[event][id]" => "302013:04"
					"[rsa][message][id1]" => "302013:04"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302013:05
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:outbound><@action:build connection>Built outbound <protocol> connection <connectionid> for <dinterface> <daddr>/<dport> gaddr <hostip>/<network_port> <sinterface> <saddr>/<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built outbound %{protocol} connection %{connectionid} for %{dinterface} %{daddr}/%{dport} gaddr %{hostip}/%{network_port} %{sinterface} %{saddr}/%{sport}" }
				id => "message-302013:05"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "outbound"
				"action" => "build connection"
					"[event][id]" => "302013:05"
					"[rsa][message][id1]" => "302013:05"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "302014" {
		# MESSAGE 302014
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@duration:*DUR($MSG,'%N:%U:%O',duration)><@action:teardown connection>Teardown <protocol> connection <connectionid> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <duration> bytes <bytes> { '<username>' | (<username>) | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Teardown[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+(?<connectionid>[^\s]*)[\s]+for[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+duration[\s]+(?<duration>[^\s]*)[\s]+bytes[\s]+(?<bytes>[^\s]*)[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-302014"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
					"[event][id]" => "302014"
					"[rsa][message][id1]" => "302014"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302014:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@duration:*DUR($MSG,'%N:%U:%O',duration)><@action:teardown connection>Teardown <protocol> connection <connectionid> faddr <saddr>/<sport> gaddr <hostip>/<network_port> laddr <daddr>/<dport> duration <duration> bytes <bytes> { (<result>) | <result> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Teardown[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+(?<connectionid>[^\s]*)[\s]+faddr[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+gaddr[\s]+(?<hostip>[^/]*)/(?<network_port>[^\s]*)[\s]+laddr[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+duration[\s]+(?<duration>[^\s]*)[\s]+bytes[\s]+(?<bytes>[^\s]*)[\s]+([\s]*\((?<result>[^\)]*)\)[\s]+|[\s]*(?<result>[^\s]*)[\s]+)$" }
				id => "message-302014:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
					"[event][id]" => "302014:02"
					"[rsa][message][id1]" => "302014:02"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "302015" {
		# MESSAGE 302015
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:inbound>Built inbound <protocol> connection <connectionid> for <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>) { '<username>' | (<username>) }<@action:build connection>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Built[\s]+inbound[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+(?<connectionid>[^\s]*)[\s]+for[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+\((?<stransaddr>[^/]*)/(?<stransport>[^\)]*)\)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+\((?<dtransaddr>[^/]*)/(?<dtransport>[^\)]*)\)[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+)$" }
				id => "message-302015"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "inbound"
				"action" => "build connection"
					"[event][id]" => "302015"
					"[rsa][message][id1]" => "302015"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302015:01
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:outbound><@action:build connection>Built outbound <protocol> connection <connectionid> for <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>) to <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) { '<username>' | (<username>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Built[\s]+outbound[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+(?<connectionid>[^\s]*)[\s]+for[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+\((?<dtransaddr>[^/]*)/(?<dtransport>[^\)]*)\)[\s]+to[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+\((?<stransaddr>[^/]*)/(?<stransport>[^\)]*)\)[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+)$" }
				id => "message-302015:01"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "outbound"
				"action" => "build connection"
					"[event][id]" => "302015:01"
					"[rsa][message][id1]" => "302015:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302015:02
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:inbound>Built inbound <protocol> connection <connectionid> for <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>)<@action:build connection>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built inbound %{protocol} connection %{connectionid} for %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport})" }
				id => "message-302015:02"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "inbound"
				"action" => "build connection"
					"[event][id]" => "302015:02"
					"[rsa][message][id1]" => "302015:02"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302015:03
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:outbound><@action:build connection>Built outbound <protocol> connection <connectionid> for <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>) to <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built outbound %{protocol} connection %{connectionid} for %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}) to %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport})" }
				id => "message-302015:03"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"direction" => "outbound"
				"action" => "build connection"
					"[event][id]" => "302015:03"
					"[rsa][message][id1]" => "302015:03"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302015:04
		# line in RSA: <@ec_activity:Permit><@ec_theme:Communication><@ec_subject:NetworkComm><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Built <protocol> connection <connectionid> for <sinterface> <saddr>/<sport> gaddr <hostip>/<network_port> <dinterface> <daddr>/<dport><@action:build connection>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built %{protocol} connection %{connectionid} for %{sinterface} %{saddr}/%{sport} gaddr %{hostip}/%{network_port} %{dinterface} %{daddr}/%{dport}" }
				id => "message-302015:04"
				add_field => {
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"ec_subject" => "NetworkComm"
				"level" => "%{level}"
				"action" => "build connection"
					"[event][id]" => "302015:04"
					"[rsa][message][id1]" => "302015:04"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "302016" {
		# MESSAGE 302016
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Teardown <protocol> connection <connectionid> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <duration> bytes <bytes> { '<username>' | (<username>) }<@duration:*DUR($MSG,'%N:%U:%O',duration)><@action:teardown connection> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Teardown[\s]+(?<protocol>[^\s]*)[\s]+connection[\s]+(?<connectionid>[^\s]*)[\s]+for[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+duration[\s]+(?<duration>[^\s]*)[\s]+bytes[\s]+(?<bytes>[^\s]*)[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+)[\s]+$" }
				id => "message-302016"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
					"[event][id]" => "302016"
					"[rsa][message][id1]" => "302016"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302016:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Teardown <protocol> connection <connectionid> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <duration> bytes <bytes><@duration:*DUR($MSG,'%N:%U:%O',duration)><@action:teardown connection> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown %{protocol} connection %{connectionid} for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{duration} bytes %{bytes}" }
				id => "message-302016:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
					"[event][id]" => "302016:01"
					"[rsa][message][id1]" => "302016:01"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302016:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Teardown <protocol> connection <connectionid> for <sinterface> <saddr>/<sport> gaddr <hostip>/<network_port> <dinterface> <daddr>/<dport> duration <duration> bytes <bytes> <@duration:*DUR($MSG,'%N:%U:%O',duration)><@action:teardown connection>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown %{protocol} connection %{connectionid} for %{sinterface} %{saddr}/%{sport} gaddr %{hostip}/%{network_port} %{dinterface} %{daddr}/%{dport} duration %{duration} bytes %{bytes}" }
				id => "message-302016:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
					"[event][id]" => "302016:02"
					"[rsa][message][id1]" => "302016:02"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302016:03
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Teardown <protocol> connection for <sinterface> <saddr>/<sport> gaddr <hostip>/<network_port> <dinterface> <daddr>/<dport> <@action:teardown connection>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown %{protocol} connection for %{sinterface} %{saddr}/%{sport} gaddr %{hostip}/%{network_port} %{dinterface} %{daddr}/%{dport}" }
				id => "message-302016:03"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
					"[event][id]" => "302016:03"
					"[rsa][message][id1]" => "302016:03"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "302017" {
		# MESSAGE 302017
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:inbound>Built inbound GRE connection <connectionid> from <sinterface>:<saddr> (<stransaddr>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>) <@action:build connection>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built inbound GRE connection %{connectionid} from %{sinterface}:%{saddr} (%{stransaddr}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport})" }
				id => "message-302017"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"direction" => "inbound"
				"action" => "build connection"
					"[event][id]" => "302017"
					"[rsa][message][id1]" => "302017"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302017:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:outbound>Built outbound GRE connection <connectionid> from <dinterface>:<daddr> (<dtransaddr>) to <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) <@action:build connection>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built outbound GRE connection %{connectionid} from %{dinterface}:%{daddr} (%{dtransaddr}) to %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport})" }
				id => "message-302017:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"direction" => "outbound"
				"action" => "build connection"
					"[event][id]" => "302017:01"
					"[rsa][message][id1]" => "302017:01"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId249
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)>Teardown GRE connection <connectionid> from <sinterface>:<saddr> to <dinterface>:<daddr>/<dport> duration <duration> bytes <bytes> <@action:teardown connection><@protocol:GRE>
	else if [logstash][msgparser][id] == "msgParserId249" {
		dissect {
			mapping => { "message" => "Teardown GRE connection %{connectionid} from %{sinterface}:%{saddr} to %{dinterface}:%{daddr}/%{dport} duration %{duration} bytes %{bytes}" }
			id => "msgParserId249"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
				"protocol" => "GRE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "302020" {
		# MESSAGE 302020
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:inbound>Built inbound ICMP connection for faddr <saddr> gaddr <hostip> laddr <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built inbound ICMP connection for faddr %{saddr} gaddr %{hostip} laddr %{daddr}" }
				id => "message-302020"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"direction" => "inbound"
					"[event][id]" => "302020"
					"[rsa][message][id1]" => "302020"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302020:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@direction:outbound>Built outbound ICMP connection for faddr <daddr> gaddr <hostip> laddr <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built outbound ICMP connection for faddr %{daddr} gaddr %{hostip} laddr %{saddr}" }
				id => "message-302020:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"direction" => "outbound"
					"[event][id]" => "302020:01"
					"[rsa][message][id1]" => "302020:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 302020:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Built ICMP connection for faddr <saddr> gaddr <hostip> laddr <daddr> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Built ICMP connection for faddr %{saddr} gaddr %{hostip} laddr %{daddr}" }
				id => "message-302020:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "302020:02"
					"[rsa][message][id1]" => "302020:02"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId253
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Teardown ICMP connection for faddr <saddr>/<sport> gaddr <hostip> laddr <daddr>/<dport><@action:teardown connection><@protocol:ICMP>
	else if [logstash][msgparser][id] == "msgParserId253" {
		dissect {
			mapping => { "message" => "Teardown ICMP connection for faddr %{saddr}/%{sport} gaddr %{hostip} laddr %{daddr}/%{dport}" }
			id => "msgParserId253"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown connection"
				"protocol" => "ICMP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId254
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Built IP protocol <protocol> connection <connectionid> for <sinterface>:<saddr> (<stransaddr>) to <dinterface>:<daddr> (<dtransaddr>) <@action:build connection>
	else if [logstash][msgparser][id] == "msgParserId254" {
		dissect {
			mapping => { "message" => "Built IP protocol %{protocol} connection %{connectionid} for %{sinterface}:%{saddr} (%{stransaddr}) to %{dinterface}:%{daddr} (%{dtransaddr})" }
			id => "msgParserId254"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "build connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId255
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Teardown IP protocol <protocol> connection <connectionid> for <sinterface>:<saddr> to <dinterface>:<daddr> duration <duration> bytes <bytes> <@action:Teardown connection>
	else if [logstash][msgparser][id] == "msgParserId255" {
		dissect {
			mapping => { "message" => "Teardown IP protocol %{protocol} connection %{connectionid} for %{sinterface}:%{saddr} to %{dinterface}:%{daddr} duration %{duration} bytes %{bytes}" }
			id => "msgParserId255"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Teardown connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "303002" {
		# MESSAGE 303002:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>FTP connection from <sinterface>:<saddr>/<sport> to  <dinterface>:<daddr>/<dport>, user { '<username>' | <username> } <action> file <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^FTP[\s]+connection[\s]+from[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^,]*),[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+(?<action>[^\s]*)[\s]+file[\s]+(?<filename>.*)$" }
				id => "message-303002:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "303002:02"
					"[rsa][message][id1]" => "303002:02"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 303002
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ '<username>' | <username> }@<daddr> <action> <saddr>:<url><@protocol:*action2Proto(action)><@urldomain:*URL($DOMAIN,url)><@urlroot:*URL($ROOT,url)><@urlpage:*URL($PAGE,url)><@urlquery:*URL($QUERY,url)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)@(?<daddr>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<saddr>[^:]*):(?<url>.*)$" }
				id => "message-303002"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "303002"
					"[rsa][message][id1]" => "303002"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 303002:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><daddr> <action> <saddr>:<url><@protocol:*action2Proto(action)><@urldomain:*URL($DOMAIN,url)><@urlroot:*URL($ROOT,url)><@urlpage:*URL($PAGE,url)><@urlquery:*URL($QUERY,url)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{daddr} %{action} %{saddr}:%{url}" }
				id => "message-303002:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "303002:01"
					"[rsa][message][id1]" => "303002:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId259
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>FTP <action> command denied, terminating connection from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport><@result:command denied>
	else if [logstash][msgparser][id] == "msgParserId259" {
		dissect {
			mapping => { "message" => "FTP %{action} command denied, terminating connection from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId259"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"result" => "command denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "304001" {
		# MESSAGE 304001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ '<username>' | <username> }@<saddr> Accessed { JAVA URL | URL } <daddr>: <url><@action:Accessed><@protocol:HTTP><@urldomain:*URL($DOMAIN,url)><@urlroot:*URL($ROOT,url)><@urlpage:*URL($PAGE,url)><@urlquery:*URL($QUERY,url)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)@(?<saddr>[^\s]*)[\s]+Accessed[\s]+([\s]*JAVA[\s]+URL[\s]+|[\s]*URL[\s]+)[\s]+(?<daddr>[^:]*):[\s]+(?<url>.*)$" }
				id => "message-304001"
				add_field => {
				"level" => "%{level}"
				"action" => "Accessed"
				"protocol" => "HTTP"
					"[event][id]" => "304001"
					"[rsa][message][id1]" => "304001"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 304001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><saddr> Accessed { JAVA URL | URL } <daddr>: <url><@action:Accessed><@protocol:HTTP><@urldomain:*URL($DOMAIN,url)><@urlroot:*URL($ROOT,url)><@urlpage:*URL($PAGE,url)><@urlquery:*URL($QUERY,url)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<saddr>[^\s]*)[\s]+Accessed[\s]+([\s]*JAVA[\s]+URL[\s]+|[\s]*URL[\s]+)[\s]+(?<daddr>[^:]*):[\s]+(?<url>.*)$" }
				id => "message-304001:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Accessed"
				"protocol" => "HTTP"
					"[event][id]" => "304001:01"
					"[rsa][message][id1]" => "304001:01"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "304002" {
		# MESSAGE 304002
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Access denied URL <url> SRC <saddr> DEST <daddr><@urldomain:*URL($DOMAIN,url)><@urlroot:*URL($ROOT,url)><@urlpage:*URL($PAGE,url)><@urlquery:*URL($QUERY,url)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Access denied URL %{url} SRC %{saddr} DEST %{daddr}" }
				id => "message-304002"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "304002"
					"[rsa][message][id1]" => "304002"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 304002:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@urldomain:*URL($DOMAIN,url)><@urlroot:*URL($ROOT,url)><@urlpage:*URL($PAGE,url)><@urlquery:*URL($QUERY,url)>Access denied URL <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Access denied URL %{url}" }
				id => "message-304002:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "304002:01"
					"[rsa][message][id1]" => "304002:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId264
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>URL Server <hostip> timed out URL <url><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId264" {
		dissect {
			mapping => { "message" => "URL Server %{hostip} timed out URL %{url}" }
			id => "msgParserId264"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId265
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>URL Server <hostip> request failed URL <url> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId265" {
		dissect {
			mapping => { "message" => "URL Server %{hostip} request failed URL %{url}" }
			id => "msgParserId265"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId266
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>URL Server <hostip> request pending URL <url><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId266" {
		dissect {
			mapping => { "message" => "URL Server %{hostip} request pending URL %{url}" }
			id => "msgParserId266"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId267
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>URL Server <hostip> not responding<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId267" {
		dissect {
			mapping => { "message" => "URL Server %{hostip} not responding" }
			id => "msgParserId267"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId268
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>URL Server <hostip> not responding, ENTERING ALLOW mode<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId268" {
		dissect {
			mapping => { "message" => "URL Server %{hostip} not responding, ENTERING ALLOW mode" }
			id => "msgParserId268"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId269
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>{ LEAVING | Leaving } ALLOW mode, URL Server<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId269" {
		grok {
			match => { "message" => "^([\s]*LEAVING[\s]+|[\s]*Leaving[\s]+)[\s]+ALLOW[\s]+mode,[\s]+URL[\s]+Server$" }
			id => "msgParserId269"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId270
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Portmapped translation built> Portmapped translation built for gaddr <hostip>/<network_port> laddr <daddr>/<dport> 
	else if [logstash][msgparser][id] == "msgParserId270" {
		dissect {
			mapping => { "message" => "Portmapped translation built for gaddr %{hostip}/%{network_port} laddr %{daddr}/%{dport}" }
			id => "msgParserId270"
			add_field => {
				"level" => "%{level}"
				"action" => "Portmapped translation built"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId271
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Translation built> Translation built for gaddr <hostip> to laddr <daddr> 
	else if [logstash][msgparser][id] == "msgParserId271" {
		dissect {
			mapping => { "message" => "Translation built for gaddr %{hostip} to laddr %{daddr}" }
			id => "msgParserId271"
			add_field => {
				"level" => "%{level}"
				"action" => "Translation built"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "305003" {
		# MESSAGE 305003
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:teardown translation> Teardown translation for global <hostip> local <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown translation for global %{hostip} local %{daddr}" }
				id => "message-305003"
				add_field => {
				"level" => "%{level}"
				"action" => "teardown translation"
					"[event][id]" => "305003"
					"[rsa][message][id1]" => "305003"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 305003:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:teardown translation> Teardown translation for <hostip> <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown translation for %{hostip} %{daddr}" }
				id => "message-305003:01"
				add_field => {
				"level" => "%{level}"
				"action" => "teardown translation"
					"[event][id]" => "305003:01"
					"[rsa][message][id1]" => "305003:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId274
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:teardown portmap translation> Teardown portmap translation for global <hostip>/<network_port> local <daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId274" {
		dissect {
			mapping => { "message" => "Teardown portmap translation for global %{hostip}/%{network_port} local %{daddr}/%{dport}" }
			id => "msgParserId274"
			add_field => {
				"level" => "%{level}"
				"action" => "teardown portmap translation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "305005" {
		# MESSAGE 305005
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:No translation group found> No translation group found for <protocol> src <sinterface>:<saddr>/<sport> dst <dinterface>:<daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No translation group found for %{protocol} src %{sinterface}:%{saddr}/%{sport} dst %{dinterface}:%{daddr}/%{dport}" }
				id => "message-305005"
				add_field => {
				"level" => "%{level}"
				"event_description" => "No translation group found"
					"[event][id]" => "305005"
					"[rsa][message][id1]" => "305005"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 305005:02
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:No translation group found> No translation group found for protocol <protocol> src <sinterface>:<saddr> dst <dinterface>:<daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No translation group found for protocol %{protocol} src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr}" }
				id => "message-305005:02"
				add_field => {
				"level" => "%{level}"
				"event_description" => "No translation group found"
					"[event][id]" => "305005:02"
					"[rsa][message][id1]" => "305005:02"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 305005:03
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:No translation group found> No translation group found for protocol <protocol> src <saddr> dst <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No translation group found for protocol %{protocol} src %{saddr} dst %{daddr}" }
				id => "message-305005:03"
				add_field => {
				"level" => "%{level}"
				"event_description" => "No translation group found"
					"[event][id]" => "305005:03"
					"[rsa][message][id1]" => "305005:03"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 305005:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:No translation group found><@protocol:icmp> No translation group found for icmp src <sinterface>:<saddr> dst <dinterface>:<daddr> (type <icmptype>, code <icmpcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No translation group found for icmp src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr} (type %{icmptype}, code %{icmpcode})" }
				id => "message-305005:01"
				add_field => {
				"level" => "%{level}"
				"event_description" => "No translation group found"
				"protocol" => "icmp"
					"[event][id]" => "305005:01"
					"[rsa][message][id1]" => "305005:01"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "305006" {
		# MESSAGE 305006
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:translation creation failed> <service> translation creation failed for <protocol> src <sinterface>:<saddr>/<sport> dst <dinterface>:<daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service} translation creation failed for %{protocol} src %{sinterface}:%{saddr}/%{sport} dst %{dinterface}:%{daddr}/%{dport}" }
				id => "message-305006"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "translation creation failed"
					"[event][id]" => "305006"
					"[rsa][message][id1]" => "305006"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 305006:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:translation creation failed> <service> translation creation failed for <protocol> src <sinterface>:<saddr> dst { <dinterface>:<daddr> (type <icmptype>, code <icmpcode>) | <dinterface>:<daddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<service>[^\s]*)[\s]+translation[\s]+creation[\s]+failed[\s]+for[\s]+(?<protocol>[^\s]*)[\s]+src[\s]+(?<sinterface>[^:]*):(?<saddr>[^\s]*)[\s]+dst[\s]+([\s]*(?<dinterface>[^:]*):(?<daddr>[^\s]*)[\s]+\(type[\s]+(?<icmptype>[^,]*),[\s]+code[\s]+(?<icmpcode>[^\)]*)\)[\s]+|[\s]*(?<dinterface>[^:]*):(?<daddr>[^\s]*)[\s]+)$" }
				id => "message-305006:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "translation creation failed"
					"[event][id]" => "305006:01"
					"[rsa][message][id1]" => "305006:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId281
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Orphan IP detected on interface> <fld1>(): Orphan IP <hostip> on interface <interface> 
	else if [logstash][msgparser][id] == "msgParserId281" {
		dissect {
			mapping => { "message" => "%{fld1}(): Orphan IP %{hostip} on interface %{interface}" }
			id => "msgParserId281"
			add_field => {
				"level" => "%{level}"
				"result" => "Orphan IP detected on interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId282
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:trying to free unallocated global address> Free unallocated global IP address.
	else if [logstash][msgparser][id] == "msgParserId282" {
		dissect {
			mapping => { "message" => "Free unallocated global IP address." }
			id => "msgParserId282"
			add_field => {
				"level" => "%{level}"
				"event_description" => "trying to free unallocated global address"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId283
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Built translation> Built <context> translation from <sinterface>:<saddr> to <dinterface>:<daddr>  
	else if [logstash][msgparser][id] == "msgParserId283" {
		dissect {
			mapping => { "message" => "Built %{context} translation from %{sinterface}:%{saddr} to %{dinterface}:%{daddr}" }
			id => "msgParserId283"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Built translation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "305010" {
		# MESSAGE 305010
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:teardown translation> Teardown <context> translation from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <duration>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown %{context} translation from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{duration}" }
				id => "message-305010"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown translation"
					"[event][id]" => "305010"
					"[rsa][message][id1]" => "305010"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 305010:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:teardown translation> Teardown <context> translation from <sinterface>:<saddr> to <dinterface>:<daddr> duration <duration>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown %{context} translation from %{sinterface}:%{saddr} to %{dinterface}:%{daddr} duration %{duration}" }
				id => "message-305010:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown translation"
					"[event][id]" => "305010:01"
					"[rsa][message][id1]" => "305010:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId286
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Built translation> Built <context> <protocol> translation from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>  
	else if [logstash][msgparser][id] == "msgParserId286" {
		dissect {
			mapping => { "message" => "Built %{context} %{protocol} translation from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId286"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Built translation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId287
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:teardown translation> Teardown <context> <protocol> translation from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <duration>
	else if [logstash][msgparser][id] == "msgParserId287" {
		dissect {
			mapping => { "message" => "Teardown %{context} %{protocol} translation from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{duration}" }
			id => "msgParserId287"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "teardown translation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId288
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:connection denied><@result:due to NAT reverse path failure> <result>; Connection for <protocol> src <sinterface>:<saddr>/<sport> dst <dinterface>:<daddr>/<dport> denied due to NAT reverse path failure
	else if [logstash][msgparser][id] == "msgParserId288" {
		dissect {
			mapping => { "message" => "%{result}; Connection for %{protocol} src %{sinterface}:%{saddr}/%{sport} dst %{dinterface}:%{daddr}/%{dport} denied due to NAT reverse path failure" }
			id => "msgParserId288"
			add_field => {
				"level" => "%{level}"
				"action" => "connection denied"
				"result" => "due to NAT reverse path failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "307001" {
		# MESSAGE 307001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Denied <protocol> login session from <saddr> on interface <interface><@dport:23><@sport:0><@action:Denied login session>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Denied %{protocol} login session from %{saddr} on interface %{interface}" }
				id => "message-307001"
				add_field => {
				"level" => "%{level}"
				"dport" => "23"
				"sport" => "0"
				"action" => "Denied login session"
					"[event][id]" => "307001"
					"[rsa][message][id1]" => "307001"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 307001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Denied <protocol> login session from <saddr><@dport:23><@sport:0><@action:Denied login session>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Denied %{protocol} login session from %{saddr}" }
				id => "message-307001:01"
				add_field => {
				"level" => "%{level}"
				"dport" => "23"
				"sport" => "0"
				"action" => "Denied login session"
					"[event][id]" => "307001:01"
					"[rsa][message][id1]" => "307001:01"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId291
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><result> session from <saddr><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId291" {
		dissect {
			mapping => { "message" => "%{result} session from %{saddr}" }
			id => "msgParserId291"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "307003" {
		# MESSAGE 307003
		# line in RSA: <@ec_subject:NetworkComm><@ec_activity:Logon><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>telnet login session failed from <saddr> (<result>) on interface <interface><@action:login session failure>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "telnet login session failed from %{saddr} (%{result}) on interface %{interface}" }
				id => "message-307003"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "login session failure"
					"[event][id]" => "307003"
					"[rsa][message][id1]" => "307003"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 307003:01
		# line in RSA: <@ec_subject:NetworkComm><@ec_activity:Logon><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>telnet login session failed from <saddr> (<result>) <@action:login session failure>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "telnet login session failed from %{saddr} (%{result})" }
				id => "message-307003:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "login session failure"
					"[event][id]" => "307003:01"
					"[rsa][message][id1]" => "307003:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId294
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:session limit exceeded>Telnet session limit exceeded.<space>Connection request from <saddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId294" {
		dissect {
			mapping => { "message" => "Telnet session limit exceeded.%{space}Connection request from %{saddr} on interface %{interface}" }
			id => "msgParserId294"
			add_field => {
				"level" => "%{level}"
				"action" => "session limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId295
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ FWSM console | PIX console | Console } enable password incorrect for <fld1> tries (from <hostip>) <@action:enable password incorrect - multiple tries>
	else if [logstash][msgparser][id] == "msgParserId295" {
		grok {
			match => { "message" => "^([\s]*FWSM[\s]+console[\s]+|[\s]*PIX[\s]+console[\s]+|[\s]*Console[\s]+)[\s]+enable[\s]+password[\s]+incorrect[\s]+for[\s]+(?<fld1>[^\s]*)[\s]+tries[\s]+\(from[\s]+(?<hostip>[^\)]*)\)[\s]+$" }
			id => "msgParserId295"
			add_field => {
				"level" => "%{level}"
				"action" => "enable password incorrect - multiple tries"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId296
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>static <fld1> <fld2> <fld3> <fld4> overlapped with <fld5> <fld6> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId296" {
		dissect {
			mapping => { "message" => "static %{fld1} %{fld2} %{fld3} %{fld4} overlapped with %{fld5} %{fld6}" }
			id => "msgParserId296"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId297
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Denied manager connection from <saddr><@action:denied manager connection>
	else if [logstash][msgparser][id] == "msgParserId297" {
		dissect {
			mapping => { "message" => "Denied manager connection from %{saddr}" }
			id => "msgParserId297"
			add_field => {
				"level" => "%{level}"
				"action" => "denied manager connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId298
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:permitted manager connection>Permitted manager connection from <saddr>
	else if [logstash][msgparser][id] == "msgParserId298" {
		dissect {
			mapping => { "message" => "Permitted manager connection from %{saddr}" }
			id => "msgParserId298"
			add_field => {
				"level" => "%{level}"
				"action" => "permitted manager connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId299
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Manager session limit exceeded. Connection request from <saddr> on interface <interface> <@action:Manager session limit exceeded>
	else if [logstash][msgparser][id] == "msgParserId299" {
		dissect {
			mapping => { "message" => "Manager session limit exceeded. Connection request from %{saddr} on interface %{interface}" }
			id => "msgParserId299"
			add_field => {
				"level" => "%{level}"
				"action" => "Manager session limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId300
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:LU loading standby start>LU loading standby start<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId300" {
		dissect {
			mapping => { "message" => "LU loading standby start" }
			id => "msgParserId300"
			add_field => {
				"level" => "%{level}"
				"event_description" => "LU loading standby start"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId301
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:LU loading standby end>LU loading standby end<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId301" {
		dissect {
			mapping => { "message" => "LU loading standby end" }
			id => "msgParserId301"
			add_field => {
				"level" => "%{level}"
				"event_description" => "LU loading standby end"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId302
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:LU recv thread>LU recv thread up<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId302" {
		dissect {
			mapping => { "message" => "LU recv thread up" }
			id => "msgParserId302"
			add_field => {
				"level" => "%{level}"
				"event_description" => "LU recv thread"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId303
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:LU xmit thread up>LU xmit thread up<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId303" {
		dissect {
			mapping => { "message" => "LU xmit thread up" }
			id => "msgParserId303"
			add_field => {
				"level" => "%{level}"
				"event_description" => "LU xmit thread up"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId304
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>RIP hdr failed from <saddr>: cmd=<fld1>, version=<fld2> domain=<fld3> on interface <interface> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId304" {
		dissect {
			mapping => { "message" => "RIP hdr failed from %{saddr}: cmd=%{fld1}, version=%{fld2} domain=%{fld3} on interface %{interface}" }
			id => "msgParserId304"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId305
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Denied ICMP type=<icmptype>, code=<icmpcode> from <saddr> on interface <interface> <@protocol:ICMP><@action:connection denied>
	else if [logstash][msgparser][id] == "msgParserId305" {
		dissect {
			mapping => { "message" => "Denied ICMP type=%{icmptype}, code=%{icmpcode} from %{saddr} on interface %{interface}" }
			id => "msgParserId305"
			add_field => {
				"level" => "%{level}"
				"protocol" => "ICMP"
				"action" => "connection denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "313003" {
		# MESSAGE 313003
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Invalid destination <result> destination <fld1> on <interface> interface. <space> Original IP payload <@protocol:ICMP><@action:Invalid destination>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Invalid destination %{result} destination %{fld1} on %{interface} interface. %{space} Original IP payload" }
				id => "message-313003"
				add_field => {
				"level" => "%{level}"
				"protocol" => "ICMP"
				"action" => "Invalid destination"
					"[event][id]" => "313003"
					"[rsa][message][id1]" => "313003"
					"[event][categoryid]" => "1001020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 313003:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Invalid destination <result> on <interface> interface. <space> Original IP payload <@action:Invalid destination>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Invalid destination %{result} on %{interface} interface. %{space} Original IP payload" }
				id => "message-313003:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Invalid destination"
					"[event][id]" => "313003:01"
					"[rsa][message][id1]" => "313003:01"
					"[event][categoryid]" => "1001020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "313004" {
		# MESSAGE 313004
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@protocol:ICMP><@action:Denied ICMP> Denied ICMP type=<icmptype>, from laddr <saddr> on interface <interface> to <daddr>: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Denied ICMP type=%{icmptype}, from laddr %{saddr} on interface %{interface} to %{daddr}: %{result}" }
				id => "message-313004"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"protocol" => "ICMP"
				"action" => "Denied ICMP"
					"[event][id]" => "313004"
					"[rsa][message][id1]" => "313004"
					"[event][categoryid]" => "1803020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 313004:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Denied connection> Denied <protocol> type=<icmptype>, from <saddr> on interface <interface> to <daddr>:<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Denied %{protocol} type=%{icmptype}, from %{saddr} on interface %{interface} to %{daddr}:%{result}" }
				id => "message-313004:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Denied connection"
					"[event][id]" => "313004:01"
					"[rsa][message][id1]" => "313004:01"
					"[event][categoryid]" => "1803020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId310
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@fld61:*PARMVAL(sinterface)>No matching connection for ICMP error message: icmp src <sinterface>:<saddr> dst <dinterface>:<daddr> (type <icmptype>, code <icmpcode>) on <interface> interface.  Original IP payload:<info>.<@action:No matching connection for error message>
	else if [logstash][msgparser][id] == "msgParserId310" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(sinterface)}No matching connection for ICMP error message: icmp src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr} (type %{icmptype}, code %{icmpcode}) on %{interface} interface.  Original IP payload:%{info}." }
			id => "msgParserId310"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "No matching connection for error message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId311
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Pre-allocated | Pre-allocate | Preallocate } RTSP <protocol> backconnection { for faddr  | for foreign_address  | for <sinterface>: }<saddr>{ /<sport> to |  to } { laddr  | local_address  | <dinterface>:}<daddr>/{ <dport>. | <dport> }<@action:Pre-allocated connection>
	else if [logstash][msgparser][id] == "msgParserId311" {
		grok {
			match => { "message" => "^([\s]*Pre\-allocated[\s]+|[\s]*Pre\-allocate[\s]+|[\s]*Preallocate[\s]+)[\s]+RTSP[\s]+(?<protocol>[^\s]*)[\s]+backconnection[\s]+([\s]*for[\s]+faddr[\s]+|[\s]*for[\s]+foreign_address[\s]+|[\s]*for[\s]+(?<sinterface>[^:]*):[\s]+)(?<saddr>[^\s\s]*)([\s]*/(?<sport>[^\s]*)[\s]+to[\s]+|[\s]*to[\s]+)[\s]+([\s]*laddr[\s]+|[\s]*local_address[\s]+|[\s]*(?<dinterface>[^:]*):)(?<daddr>[^/]*)/([\s]*(?<dport>[^\.]*)\.[\s]+|[\s]*(?<dport>[^\s]*)[\s]+)$" }
			id => "msgParserId311"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Pre-allocated connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId312
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Denied session>Denied SSH session from <saddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId312" {
		dissect {
			mapping => { "message" => "Denied SSH session from %{saddr} on interface %{interface}" }
			id => "msgParserId312"
			add_field => {
				"level" => "%{level}"
				"action" => "Denied session"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId313
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Permitted session>Permitted SSH session from <saddr> on interface <interface> for user { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId313" {
		grok {
			match => { "message" => "^Permitted[\s]+SSH[\s]+session[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId313"
			add_field => {
				"level" => "%{level}"
				"action" => "Permitted session"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "315003" {
		# MESSAGE 315003
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Login session failed>SSH login session failed from <saddr> on (<fld1> attempts) on interface <interface> by user { '<username>' | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSH[\s]+login[\s]+session[\s]+failed[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+on[\s]+\((?<fld1>[^\s]*)[\s]+attempts\)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+by[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-315003"
				add_field => {
				"level" => "%{level}"
				"action" => "Login session failed"
					"[event][id]" => "315003"
					"[rsa][message][id1]" => "315003"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 315003:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Login session failed>SSH login session failed from <saddr>(<fld1> attempts) on interface <interface> by user { "<username>" | '<username>' | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSH[\s]+login[\s]+session[\s]+failed[\s]+from[\s]+(?<saddr>[^\(]*)\((?<fld1>[^\s]*)[\s]+attempts\)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+by[\s]+user[\s]+([\s]*\"(?<username>[^\"]*)\"[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-315003:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Login session failed"
					"[event][id]" => "315003:01"
					"[rsa][message][id1]" => "315003:01"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId316
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Fail to establish SSH session because{ PIX |<space>}RSA host key retrieval failed.<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId316" {
		grok {
			match => { "message" => "^Fail[\s]+to[\s]+establish[\s]+SSH[\s]+session[\s]+because([\s]*PIX[\s]+|(?<space>[^R]*))RSA[\s]+host[\s]+key[\s]+retrieval[\s]+failed\.$" }
			id => "msgParserId316"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId317
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:session limit exceeded>SSH session limit exceeded.<space>Connection request from <saddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId317" {
		dissect {
			mapping => { "message" => "SSH session limit exceeded.%{space}Connection request from %{saddr} on interface %{interface}" }
			id => "msgParserId317"
			add_field => {
				"level" => "%{level}"
				"action" => "session limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "315011" {
		# MESSAGE 315011
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:session disconnected>SSH session from <saddr> on interface <interface> for user { ""<username>"" | "<username>" | '<username>' | <username> } disconnected by SSH server, reason: { ""<result>"" | "<result>" | <result> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSH[\s]+session[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*\"\"(?<username>[^\"]*)\"\"[\s]+|[\s]*\"(?<username>[^\"]*)\"[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+disconnected[\s]+by[\s]+SSH[\s]+server,[\s]+reason:[\s]+([\s]*\"\"(?<result>[^\"]*)\"\"[\s]+|[\s]*\"(?<result>[^\"]*)\"[\s]+|[\s]*(?<result>[^\s]*)[\s]+)$" }
				id => "message-315011"
				add_field => {
				"level" => "%{level}"
				"action" => "session disconnected"
					"[event][id]" => "315011"
					"[rsa][message][id1]" => "315011"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 315011:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>SSH session from <saddr> on interface <interface> for user { ""<username>"" | "<username>" | '<username>' | <username> } terminated normally <@action:terminated normally>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SSH[\s]+session[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*\"\"(?<username>[^\"]*)\"\"[\s]+|[\s]*\"(?<username>[^\"]*)\"[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+terminated[\s]+normally[\s]+$" }
				id => "message-315011:01"
				add_field => {
				"level" => "%{level}"
				"action" => "terminated normally"
					"[event][id]" => "315011:01"
					"[rsa][message][id1]" => "315011:01"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "316001" {
		# MESSAGE 316001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Denied new tunnel to <saddr> VPN peer limit (<fld1>) exceeded.<@action:denied new VPN tunnel><@result:VPN peer limit exceeded>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Denied new tunnel to %{saddr} VPN peer limit (%{fld1}) exceeded." }
				id => "message-316001"
				add_field => {
				"level" => "%{level}"
				"action" => "denied new VPN tunnel"
				"result" => "VPN peer limit exceeded"
					"[event][id]" => "316001"
					"[rsa][message][id1]" => "316001"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 316001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Cannot { create |creat } more isakmp peers, exceeding the limit of <fld1> peers <@action:cannot create isakmp peers><@result:peer limit exceeded>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Cannot[\s]+([\s]*create[\s]+|creat[\s]+)[\s]+more[\s]+isakmp[\s]+peers,[\s]+exceeding[\s]+the[\s]+limit[\s]+of[\s]+(?<fld1>[^\s]*)[\s]+peers[\s]+$" }
				id => "message-316001:01"
				add_field => {
				"level" => "%{level}"
				"action" => "cannot create isakmp peers"
				"result" => "peer limit exceeded"
					"[event][id]" => "316001:01"
					"[rsa][message][id1]" => "316001:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId322
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>area <fld1> lsid <fld2> mask <fld3> adv <fld4> type <fld5>
	else if [logstash][msgparser][id] == "msgParserId322" {
		dissect {
			mapping => { "message" => "area %{fld1} lsid %{fld2} mask %{fld3} adv %{fld4} type %{fld5}" }
			id => "msgParserId322"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId323
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>lsid <fld1> adv <fld2> type <fld3> gateway <fld4> metric <fld5> network <fld6> mask <fld7> protocol <protocol> attr <fld8> net-metric <fld9>
	else if [logstash][msgparser][id] == "msgParserId323" {
		dissect {
			mapping => { "message" => "lsid %{fld1} adv %{fld2} type %{fld3} gateway %{fld4} metric %{fld5} network %{fld6} mask %{fld7} protocol %{protocol} attr %{fld8} net-metric %{fld9}" }
			id => "msgParserId323"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "319001" {
		# MESSAGE 319001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:Acknowledge for arp update>Acknowledge for arp update for IP address <daddr> not received (<count>).<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Acknowledge for arp update for IP address %{daddr} not received (%{count})." }
				id => "message-319001:01"
				add_field => {
				"level" => "%{level}"
				"event_description" => "Acknowledge for arp update"
					"[event][id]" => "319001:01"
					"[rsa][message][id1]" => "319001:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 319001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:The subject name of the peer cert is not allowed for connection>The subject name of the peer cert is not allowed for connection<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The subject name of the peer cert is not allowed for connection" }
				id => "message-319001"
				add_field => {
				"level" => "%{level}"
				"event_description" => "The subject name of the peer cert is not allowed for connection"
					"[event][id]" => "319001"
					"[rsa][message][id1]" => "319001"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId326
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Route update for IP address <daddr> to <fld1> failed <@msg:*PARMVAL($MSG)><@result:route update failure>
	else if [logstash][msgparser][id] == "msgParserId326" {
		dissect {
			mapping => { "message" => "Route update for IP address %{daddr} to %{fld1} failed" }
			id => "msgParserId326"
			add_field => {
				"level" => "%{level}"
				"result" => "route update failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId327
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><event_description><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId327" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId327"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "321001" {
		# MESSAGE 321001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Resource <fld1> limit of <fld2> reached.<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Resource %{fld1} limit of %{fld2} reached." }
				id => "message-321001"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "321001"
					"[rsa][message][id1]" => "321001"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 321001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Resource <fld1> limit of <fld2> reached for context <fld3> <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Resource %{fld1} limit of %{fld2} reached for context %{fld3}" }
				id => "message-321001:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "321001:01"
					"[rsa][message][id1]" => "321001:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId330
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Resource <fld1> rate limit of <fld2> reached.<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId330" {
		dissect {
			mapping => { "message" => "Resource %{fld1} rate limit of %{fld2} reached." }
			id => "msgParserId330"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId331
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Resource <fld1> log level of <fld2> reached.<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId331" {
		dissect {
			mapping => { "message" => "Resource %{fld1} log level of %{fld2} reached." }
			id => "msgParserId331"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId332
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Resource <fld1> rate log level of <fld2> <fld3><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId332" {
		dissect {
			mapping => { "message" => "Resource %{fld1} rate log level of %{fld2} %{fld3}" }
			id => "msgParserId332"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId333
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Deny MAC address <daddr>, possible spoof attempt on interface <interface><@action:denied mac address><@result:possible spoof attempt>
	else if [logstash][msgparser][id] == "msgParserId333" {
		dissect {
			mapping => { "message" => "Deny MAC address %{daddr}, possible spoof attempt on interface %{interface}" }
			id => "msgParserId333"
			add_field => {
				"level" => "%{level}"
				"action" => "denied mac address"
				"result" => "possible spoof attempt"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId334
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>ARP inspection check failed for arp request received from host <smacaddr> on interface <interface>.<info>
	else if [logstash][msgparser][id] == "msgParserId334" {
		dissect {
			mapping => { "message" => "ARP inspection check failed for arp request received from host %{smacaddr} on interface %{interface}.%{info}" }
			id => "msgParserId334"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId335
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>ARP inspection check failed for arp response received from host <smacaddr> on interface <interface>.<info>
	else if [logstash][msgparser][id] == "msgParserId335" {
		dissect {
			mapping => { "message" => "ARP inspection check failed for arp response received from host %{smacaddr} on interface %{interface}.%{info}" }
			id => "msgParserId335"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId336
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Module in slot <fld1> experienced a control channel communication failure<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId336" {
		dissect {
			mapping => { "message" => "Module in slot %{fld1} experienced a control channel communication failure" }
			id => "msgParserId336"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId337
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Module in slot <fld1> is not able to shut down, shut down request not answered.<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId337" {
		dissect {
			mapping => { "message" => "Module in slot %{fld1} is not able to shut down, shut down request not answered." }
			id => "msgParserId337"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId338
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Module in slot <fld1> is not able to reload, reload request not answered.<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId338" {
		dissect {
			mapping => { "message" => "Module in slot %{fld1} is not able to reload, reload request not answered." }
			id => "msgParserId338"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId339
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:data channel communication failure - data channel is DOWN> <product> Module in slot <fld1> experienced a data channel communication failure, data channel is DOWN 
	else if [logstash][msgparser][id] == "msgParserId339" {
		dissect {
			mapping => { "message" => "%{product} Module in slot %{fld1} experienced a data channel communication failure, data channel is DOWN" }
			id => "msgParserId339"
			add_field => {
				"level" => "%{level}"
				"result" => "data channel communication failure - data channel is DOWN"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId340
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Drop GTPv>Drop { GTPv | GTP } <misc> message <fld1> from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId340" {
		grok {
			match => { "message" => "^Drop[\s]+([\s]*GTPv[\s]+|[\s]*GTP[\s]+)[\s]+(?<misc>[^\s]*)[\s]+message[\s]+(?<fld1>[^\s]*)[\s]+from[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+Reason:[\s]+(?<result>.*)$" }
			id => "msgParserId340"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Drop GTPv"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId341
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:GTPv0 packet parsing error>GTPv0 packet parsing error from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>, TID: <fld1>, Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId341" {
		dissect {
			mapping => { "message" => "GTPv0 packet parsing error from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}, TID: %{fld1}, Reason: %{result}" }
			id => "msgParserId341"
			add_field => {
				"level" => "%{level}"
				"action" => "GTPv0 packet parsing error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId342
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:nonexistent resource to process GTP request>No <fld1> exists to process GTPv0 <fld2> from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>, TID: <fld3>
	else if [logstash][msgparser][id] == "msgParserId342" {
		dissect {
			mapping => { "message" => "No %{fld1} exists to process GTPv0 %{fld2} from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}, TID: %{fld3}" }
			id => "msgParserId342"
			add_field => {
				"level" => "%{level}"
				"result" => "nonexistent resource to process GTP request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId343
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:No matching GTP request> No matching request to process GTPv <fld2> <fld3> from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId343" {
		dissect {
			mapping => { "message" => "No matching request to process GTPv %{fld2} %{fld3} from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId343"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"result" => "No matching GTP request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId344
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:GTP version not supported>GTP packet with version <status> from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> is not supported
	else if [logstash][msgparser][id] == "msgParserId344" {
		dissect {
			mapping => { "message" => "GTP packet with version %{status} from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} is not supported" }
			id => "msgParserId344"
			add_field => {
				"level" => "%{level}"
				"result" => "GTP version not supported"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId345
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Unable to create tunnel>Unable to create tunnel from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId345" {
		dissect {
			mapping => { "message" => "Unable to create tunnel from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId345"
			add_field => {
				"level" => "%{level}"
				"result" => "Unable to create tunnel"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId346
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>GSN ip_addr tunnel limit <fld1> exceeded, PDP Context TID <fld2> failed<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId346" {
		dissect {
			mapping => { "message" => "GSN ip_addr tunnel limit %{fld1} exceeded, PDP Context TID %{fld2} failed" }
			id => "msgParserId346"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId347
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Unable to create GTP connection> Unable to create GTP connection for response from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId347" {
		dissect {
			mapping => { "message" => "Unable to create GTP connection for response from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId347"
			add_field => {
				"level" => "%{level}"
				"result" => "Unable to create GTP connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId348
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Router <hostip_v6> on <interface> has conflicting ND (Neighbor Discovery) settings<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId348" {
		dissect {
			mapping => { "message" => "Router %{hostip_v6} on %{interface} has conflicting ND (Neighbor Discovery) settings" }
			id => "msgParserId348"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId349
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Duplicate address <hostip_v6>/<macaddr> on <interface><@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId349" {
		dissect {
			mapping => { "message" => "Duplicate address %{hostip_v6}/%{macaddr} on %{interface}" }
			id => "msgParserId349"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId350
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Unexpected error in the timer library: <result>
	else if [logstash][msgparser][id] == "msgParserId350" {
		dissect {
			mapping => { "message" => "Unexpected error in the timer library: %{result}" }
			id => "msgParserId350"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId351
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Dynamic DNS Update failed>Dynamic DNS Update for '<domain>' <<=> <hostip> failed
	else if [logstash][msgparser][id] == "msgParserId351" {
		dissect {
			mapping => { "message" => "Dynamic DNS Update for '%{domain}' <=> %{hostip} failed" }
			id => "msgParserId351"
			add_field => {
				"level" => "%{level}"
				"action" => "Dynamic DNS Update failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId352
	# line in RSA: <@ec_activity:Disable><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:NAC is disabled> NAC is disabled for host - <hostip>
	else if [logstash][msgparser][id] == "msgParserId352" {
		dissect {
			mapping => { "message" => "NAC is disabled for host - %{hostip}" }
			id => "msgParserId352"
			add_field => {
				"ec_activity" => "Disable"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "NAC is disabled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId353
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Phone Proxy SRTP: Media session not found> Phone Proxy SRTP: Media session not found for <hostip>/<network_port> for packet from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId353" {
		dissect {
			mapping => { "message" => "Phone Proxy SRTP: Media session not found for %{hostip}/%{network_port} for packet from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId353"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"event_description" => "Phone Proxy SRTP: Media session not found"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId354
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter permitted blacklisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), source <fld1> resolved from <fld2> list:<web_domain> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId354" {
		dissect {
			mapping => { "message" => "Dynamic filter permitted blacklisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), source %{fld1} resolved from %{fld2} list:%{web_domain} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId354"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId355
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter permitted blacklisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), destination <fld1> resolved from <fld2> list:<web_domain> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId355" {
		dissect {
			mapping => { "message" => "Dynamic filter permitted blacklisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), destination %{fld1} resolved from %{fld2} list:%{web_domain} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId355"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId356
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter permitted blacklisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), source <fld1> resolved from <fld2> list:<fld3>/<mask> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId356" {
		dissect {
			mapping => { "message" => "Dynamic filter permitted blacklisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), source %{fld1} resolved from %{fld2} list:%{fld3}/%{mask} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId356"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId357
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic { filter permitted | Filter monitored | Filter permitted } blacklisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), destination <fld1> resolved from <fld2> list:<fld3>{ /<mask>, | /<mask>} threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId357" {
		grok {
			match => { "message" => "^Dynamic[\s]+([\s]*filter[\s]+permitted[\s]+|[\s]*Filter[\s]+monitored[\s]+|[\s]*Filter[\s]+permitted[\s]+)[\s]+blacklisted[\s]+(?<protocol>[^\s]*)[\s]+traffic[\s]+from[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+\((?<stransaddr>[^/]*)/(?<stransport>[^\)]*)\)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+\((?<dtransaddr>[^/]*)/(?<dtransport>[^\)]*)\),[\s]+destination[\s]+(?<fld1>[^\s]*)[\s]+resolved[\s]+from[\s]+(?<fld2>[^\s]*)[\s]+list:(?<fld3>[^\s\s]*)([\s]*/(?<mask>[^,]*),[\s]+|[\s]*/(?<mask>[^\s]*))[\s]+threat\-level:[\s]+(?<severity>[^,]*),[\s]+category:[\s]+(?<result>.*)$" }
			id => "msgParserId357"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId358
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter dropped blacklisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), source <fld1> resolved from <fld2> list:<web_domain> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId358" {
		dissect {
			mapping => { "message" => "Dynamic filter dropped blacklisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), source %{fld1} resolved from %{fld2} list:%{web_domain} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId358"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId359
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter dropped blacklisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), destination <fld1> resolved from <fld2> list:<web_domain> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId359" {
		dissect {
			mapping => { "message" => "Dynamic filter dropped blacklisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), destination %{fld1} resolved from %{fld2} list:%{web_domain} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId359"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId360
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter dropped blacklisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), source <fld1> resolved from <fld2> list:<fld3>/<mask> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId360" {
		dissect {
			mapping => { "message" => "Dynamic filter dropped blacklisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), source %{fld1} resolved from %{fld2} list:%{fld3}/%{mask} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId360"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId361
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter dropped blacklisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), destination <fld1> resolved from <fld2> list:<fld3>/<mask> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId361" {
		dissect {
			mapping => { "message" => "Dynamic filter dropped blacklisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), destination %{fld1} resolved from %{fld2} list:%{fld3}/%{mask} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId361"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId362
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter <action> whitelisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), source <fld1> resolved from <fld2> list:<web_domain>
	else if [logstash][msgparser][id] == "msgParserId362" {
		dissect {
			mapping => { "message" => "Dynamic filter %{action} whitelisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), source %{fld1} resolved from %{fld2} list:%{web_domain}" }
			id => "msgParserId362"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId363
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter <action> whitelisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), destination <fld1> resolved from <fld2> list:<web_domain>
	else if [logstash][msgparser][id] == "msgParserId363" {
		dissect {
			mapping => { "message" => "Dynamic filter %{action} whitelisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), destination %{fld1} resolved from %{fld2} list:%{web_domain}" }
			id => "msgParserId363"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId364
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter <action> whitelisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), source <fld1> resolved from <fld2> list:<fld3>/<mask>
	else if [logstash][msgparser][id] == "msgParserId364" {
		dissect {
			mapping => { "message" => "Dynamic filter %{action} whitelisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), source %{fld1} resolved from %{fld2} list:%{fld3}/%{mask}" }
			id => "msgParserId364"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId365
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter <action> whitelisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), destination <fld1> resolved from <fld2> list:<fld3>/<mask>
	else if [logstash][msgparser][id] == "msgParserId365" {
		dissect {
			mapping => { "message" => "Dynamic filter %{action} whitelisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), destination %{fld1} resolved from %{fld2} list:%{fld3}/%{mask}" }
			id => "msgParserId365"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId366
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter monitored greylisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), source <fld1> resolved from <fld2> list:<web_domain> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId366" {
		dissect {
			mapping => { "message" => "Dynamic filter monitored greylisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), source %{fld1} resolved from %{fld2} list:%{web_domain} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId366"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId367
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter monitored greylisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), destination <fld1> resolved from <fld2> list:<web_domain> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId367" {
		dissect {
			mapping => { "message" => "Dynamic filter monitored greylisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), destination %{fld1} resolved from %{fld2} list:%{web_domain} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId367"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId368
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter dropped greylisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), source <fld1> resolved from <fld2> list:<web_domain> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId368" {
		dissect {
			mapping => { "message" => "Dynamic filter dropped greylisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), source %{fld1} resolved from %{fld2} list:%{web_domain} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId368"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId369
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dynamic filter dropped greylisted <protocol> traffic from <sinterface>:<saddr>/<sport> (<stransaddr>/<stransport>) to <dinterface>:<daddr>/<dport> (<dtransaddr>/<dtransport>), destination <fld1> resolved from <fld2> list:<web_domain> threat-level: <severity>, category: <result>
	else if [logstash][msgparser][id] == "msgParserId369" {
		dissect {
			mapping => { "message" => "Dynamic filter dropped greylisted %{protocol} traffic from %{sinterface}:%{saddr}/%{sport} (%{stransaddr}/%{stransport}) to %{dinterface}:%{daddr}/%{dport} (%{dtransaddr}/%{dtransport}), destination %{fld1} resolved from %{fld2} list:%{web_domain} threat-level: %{severity}, category: %{result}" }
			id => "msgParserId369"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId370
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Intercepted DNS reply for domain <web_domain> from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>, matched <category>
	else if [logstash][msgparser][id] == "msgParserId370" {
		dissect {
			mapping => { "message" => "Intercepted DNS reply for domain %{web_domain} from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}, matched %{category}" }
			id => "msgParserId370"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId371
	# line in RSA: <@ec_activity:Create><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Address <hostip> discovered for domain <web_domain> from <category>, Adding rule
	else if [logstash][msgparser][id] == "msgParserId371" {
		dissect {
			mapping => { "message" => "Address %{hostip} discovered for domain %{web_domain} from %{category}, Adding rule" }
			id => "msgParserId371"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId372
	# line in RSA: <@ec_activity:Delete><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Address <hostip> (<web_domain>) timed out, Removing rule
	else if [logstash][msgparser][id] == "msgParserId372" {
		dissect {
			mapping => { "message" => "Address %{hostip} (%{web_domain}) timed out, Removing rule" }
			id => "msgParserId372"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId373
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Successfully downloaded dynamic filter data file from updater server <url>
	else if [logstash][msgparser][id] == "msgParserId373" {
		dissect {
			mapping => { "message" => "Successfully downloaded dynamic filter data file from updater server %{url}" }
			id => "msgParserId373"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId374
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Failed to download dynamic filter data file from updater server <url>
	else if [logstash][msgparser][id] == "msgParserId374" {
		dissect {
			mapping => { "message" => "Failed to download dynamic filter data file from updater server %{url}" }
			id => "msgParserId374"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId375
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Failed to authenticate with dynamic filter updater server <url>
	else if [logstash][msgparser][id] == "msgParserId375" {
		dissect {
			mapping => { "message" => "Failed to authenticate with dynamic filter updater server %{url}" }
			id => "msgParserId375"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId376
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Failed to decrypt downloaded dynamic filter database file
	else if [logstash][msgparser][id] == "msgParserId376" {
		dissect {
			mapping => { "message" => "Failed to decrypt downloaded dynamic filter database file" }
			id => "msgParserId376"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId377
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Dynamic filter updater server dynamically changed>Dynamic filter updater server dynamically changed from <change_old> to <change_new>
	else if [logstash][msgparser][id] == "msgParserId377" {
		dissect {
			mapping => { "message" => "Dynamic filter updater server dynamically changed from %{change_old} to %{change_new}" }
			id => "msgParserId377"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Dynamic filter updater server dynamically changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId378
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>The license on this ASA does not support dynamic filter updater feature.
	else if [logstash][msgparser][id] == "msgParserId378" {
		dissect {
			mapping => { "message" => "The license on this ASA does not support dynamic filter updater feature." }
			id => "msgParserId378"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId379
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Failed to update from dynamic filter updater server <web_domain>, reason: <result>
	else if [logstash][msgparser][id] == "msgParserId379" {
		dissect {
			mapping => { "message" => "Failed to update from dynamic filter updater server %{web_domain}, reason: %{result}" }
			id => "msgParserId379"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId380
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@src_zone:*srcDirName(inout)><@dst_zone:*dstDirName(inout)><@sigcat:*SYSVAL($CATEGORY)><product>:<sigid> <context> from <saddr> to <daddr> on interface <dinterface>
	else if [logstash][msgparser][id] == "msgParserId380" {
		dissect {
			mapping => { "message" => "%{product}:%{sigid} %{context} from %{saddr} to %{daddr} on interface %{dinterface}" }
			id => "msgParserId380"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId381
	# line in RSA: <@ec_subject:NetworkComm><@ec_activity:Scan><@ec_theme:TEV><@protocol:TCP><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@src_zone:*srcDirName(inout)><@dst_zone:*dstDirName(inout)><@sigcat:*SYSVAL($CATEGORY)><product>:<sigid> <context> from <saddr> to <daddr> on interface <dinterface>
	else if [logstash][msgparser][id] == "msgParserId381" {
		dissect {
			mapping => { "message" => "%{product}:%{sigid} %{context} from %{saddr} to %{daddr} on interface %{dinterface}" }
			id => "msgParserId381"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"protocol" => "TCP"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "401002" {
		# MESSAGE 401002:01
		# line in RSA: <@ec_activity:Create><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:Shun added><@msg:*PARMVAL($MSG)>Shun added: { <saddr> <daddr> <sport> <dport> | <hostip> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Shun[\s]+added:[\s]+([\s]*(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)$" }
				id => "message-401002:01"
				add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Shun added"
					"[event][id]" => "401002:01"
					"[rsa][message][id1]" => "401002:01"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 401002
		# line in RSA: <@ec_activity:Create><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-401002"
				add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
					"[event][id]" => "401002"
					"[rsa][message][id1]" => "401002"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId384
	# line in RSA: <@ec_activity:Delete><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Shun { deleted: | delete: } <hostip> <@event_description:Shun deleted> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId384" {
		grok {
			match => { "message" => "^Shun[\s]+([\s]*deleted:[\s]+|[\s]*delete:[\s]+)[\s]+(?<hostip>[^\s]*)[\s]+$" }
			id => "msgParserId384"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Shun deleted"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId385
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Packet dropped>{ Shunned | Shun } packet: <saddr> ==> <daddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId385" {
		grok {
			match => { "message" => "^([\s]*Shunned[\s]+|[\s]*Shun[\s]+)[\s]+packet:[\s]+(?<saddr>[^\s]*)[\s]+==>[\s]+(?<daddr>[^\s]*)[\s]+on[\s]+interface[\s]+(?<interface>.*)$" }
			id => "msgParserId385"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Packet dropped"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId386
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:Shun add failed><@msg:*PARMVAL($MSG)>{ Shunned | Shun } add failed: unable to allocate resources for { <saddr> <daddr> <sport> <dport> | <hostip> }
	else if [logstash][msgparser][id] == "msgParserId386" {
		grok {
			match => { "message" => "^([\s]*Shunned[\s]+|[\s]*Shun[\s]+)[\s]+add[\s]+failed:[\s]+unable[\s]+to[\s]+allocate[\s]+resources[\s]+for[\s]+([\s]*(?<saddr>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)$" }
			id => "msgParserId386"
			add_field => {
				"level" => "%{level}"
				"result" => "Shun add failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId387
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><fld1>: rec'd IPSEC packet has invalid spi for destaddr=<daddr>, prot=<protocol>, spi=<dst_spi><@action:invalid IPSEC packet><@result:invalid spi>
	else if [logstash][msgparser][id] == "msgParserId387" {
		dissect {
			mapping => { "message" => "%{fld1}: rec'd IPSEC packet has invalid spi for destaddr=%{daddr}, prot=%{protocol}, spi=%{dst_spi}" }
			id => "msgParserId387"
			add_field => {
				"level" => "%{level}"
				"action" => "invalid IPSEC packet"
				"result" => "invalid spi"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId388
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><fld1>: packet missing <fld2>, destadr=<daddr>, actual prot=<protocol><@action:invalid packet><@result:missing packet type>
	else if [logstash][msgparser][id] == "msgParserId388" {
		dissect {
			mapping => { "message" => "%{fld1}: packet missing %{fld2}, destadr=%{daddr}, actual prot=%{protocol}" }
			id => "msgParserId388"
			add_field => {
				"level" => "%{level}"
				"action" => "invalid packet"
				"result" => "missing packet type"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId389
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:identity doesn't match><@msg:*PARMVAL($MSG)>identity doesn't match negotiated identity { ip | (ip) } dest_addr=<daddr>, src_addr=<saddr>, prot= <protocol>, (ident) <info>
	else if [logstash][msgparser][id] == "msgParserId389" {
		grok {
			match => { "message" => "^identity[\s]+doesn't[\s]+match[\s]+negotiated[\s]+identity[\s]+([\s]*ip[\s]+|[\s]*\(ip\)[\s]+)[\s]+dest_addr=(?<daddr>[^,]*),[\s]+src_addr=(?<saddr>[^,]*),[\s]+prot=[\s]+(?<protocol>[^,]*),[\s]+\(ident\)[\s]+(?<info>.*)$" }
			id => "msgParserId389"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "identity doesn't match"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId390
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Rec'd packet not an IPSEC packet <space> (ip) dest_addr= <daddr>, src_addr= <saddr>, prot= <protocol><@action:invalid IPSEC packet>
	else if [logstash][msgparser][id] == "msgParserId390" {
		dissect {
			mapping => { "message" => "Rec'd packet not an IPSEC packet %{space} (ip) dest_addr= %{daddr}, src_addr= %{saddr}, prot= %{protocol}" }
			id => "msgParserId390"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "invalid IPSEC packet"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId391
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>IPSEC: Received an ESP packet <space> (<result>) from <saddr> to <daddr> with an invalid SPI <@action:Received an ESP packet with an invalid SPI>
	else if [logstash][msgparser][id] == "msgParserId391" {
		dissect {
			mapping => { "message" => "IPSEC: Received an ESP packet %{space} (%{result}) from %{saddr} to %{daddr} with an invalid SPI" }
			id => "msgParserId391"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Received an ESP packet with an invalid SPI"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId392
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Bad ESP packet><@service:IPSEC> IPSEC: Received an ESP packet (SPI= <dst_spi>, sequence number= <fld2>) from <saddr> { (user=<username>) | (<username>) | '<username>' | <username> } to <daddr>. <result>
	else if [logstash][msgparser][id] == "msgParserId392" {
		grok {
			match => { "message" => "^[\s]*IPSEC:[\s]+Received[\s]+an[\s]+ESP[\s]+packet[\s]+\(SPI=[\s]+(?<dst_spi>[^,]*),[\s]+sequence[\s]+number=[\s]+(?<fld2>[^\)]*)\)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+([\s]*\(user=(?<username>[^\)]*)\)[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+to[\s]+(?<daddr>[^\.]*)\.[\s]+(?<result>.*)$" }
			id => "msgParserId392"
			add_field => {
				"level" => "%{level}"
				"action" => "Bad ESP packet"
				"service" => "IPSEC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId393
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:invalid IPSEC packet><@service:IPSEC> IPSEC: Received a non-IPSec packet (protocol= <protocol>) from <saddr> to <daddr>
	else if [logstash][msgparser][id] == "msgParserId393" {
		dissect {
			mapping => { "message" => "IPSEC: Received a non-IPSec packet (protocol= %{protocol}) from %{saddr} to %{daddr}" }
			id => "msgParserId393"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "invalid IPSEC packet"
				"service" => "IPSEC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId394
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received ESP packet that failed anti-replay checking><@service:IPSEC>  IPSEC: Received an ESP packet (SPI= <dst_spi>, sequence number= <fld2>) from <saddr> { (user=<username>) | (<username>) | '<username>' | <username> } to <daddr> that failed anti-replay checking.
	else if [logstash][msgparser][id] == "msgParserId394" {
		grok {
			match => { "message" => "^[\s]*IPSEC:[\s]+Received[\s]+an[\s]+ESP[\s]+packet[\s]+\(SPI=[\s]+(?<dst_spi>[^,]*),[\s]+sequence[\s]+number=[\s]+(?<fld2>[^\)]*)\)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+([\s]*\(user=(?<username>[^\)]*)\)[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+to[\s]+(?<daddr>[^\s]*)[\s]+that[\s]+failed[\s]+anti\-replay[\s]+checking\.$" }
			id => "msgParserId394"
			add_field => {
				"level" => "%{level}"
				"action" => "Received ESP packet that failed anti-replay checking"
				"service" => "IPSEC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId395
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received ESP packet that failed authentication>IPSEC: Received an ESP packet (SPI= <dst_spi>, sequence number= <fld2>) from <saddr> { (user=<username>) | (<username>) | '<username>' | <username> } to <daddr> that failed authentication.
	else if [logstash][msgparser][id] == "msgParserId395" {
		grok {
			match => { "message" => "^IPSEC:[\s]+Received[\s]+an[\s]+ESP[\s]+packet[\s]+\(SPI=[\s]+(?<dst_spi>[^,]*),[\s]+sequence[\s]+number=[\s]+(?<fld2>[^\)]*)\)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+([\s]*\(user=(?<username>[^\)]*)\)[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+to[\s]+(?<daddr>[^\s]*)[\s]+that[\s]+failed[\s]+authentication\.$" }
			id => "msgParserId395"
			add_field => {
				"level" => "%{level}"
				"action" => "Received ESP packet that failed authentication"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId396
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:hardware accelerator error> CRYPTO: The <product> encountered an error (<context>) while executing the command <process>(<info>).
	else if [logstash][msgparser][id] == "msgParserId396" {
		dissect {
			mapping => { "message" => "CRYPTO: The %{product} encountered an error (%{context}) while executing the command %{process}(%{info})." }
			id => "msgParserId396"
			add_field => {
				"level" => "%{level}"
				"result" => "hardware accelerator error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId397
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:hardware accelerator error> CRYPTO: The <product> encountered an error (<info>)
	else if [logstash][msgparser][id] == "msgParserId397" {
		dissect {
			mapping => { "message" => "CRYPTO: The %{product} encountered an error (%{info})" }
			id => "msgParserId397"
			add_field => {
				"level" => "%{level}"
				"result" => "hardware accelerator error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId398
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Crypto archive - soft reset> CRYPTO: The <product> File { <<<filename>> | '<filename>' | <filename> } as a Soft Reset was necessary. <fld1>
	else if [logstash][msgparser][id] == "msgParserId398" {
		grok {
			match => { "message" => "^[\s]*CRYPTO:[\s]+The[\s]+(?<product>[^\s]*)[\s]+File[\s]+([\s]*<(?<filename>[^>]*)>[\s]+|[\s]*'(?<filename>[^']*)'[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)[\s]+as[\s]+a[\s]+Soft[\s]+Reset[\s]+was[\s]+necessary\.[\s]+(?<fld1>.*)$" }
			id => "msgParserId398"
			add_field => {
				"level" => "%{level}"
				"result" => "Crypto archive - soft reset"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId399
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Latest Crypto File not written> CRYPTO: The PIX is skipping the writing of latest Crypto Archive File as the maximum # of files (<fld2>) allowed have been written to { <<<filename>> | '<filename>' | <filename> }. Please archive & remove files from <fld3> if you want more Crypto Archive Files saved
	else if [logstash][msgparser][id] == "msgParserId399" {
		grok {
			match => { "message" => "^[\s]*CRYPTO:[\s]+The[\s]+PIX[\s]+is[\s]+skipping[\s]+the[\s]+writing[\s]+of[\s]+latest[\s]+Crypto[\s]+Archive[\s]+File[\s]+as[\s]+the[\s]+maximum[\s]+#[\s]+of[\s]+files[\s]+\((?<fld2>[^\)]*)\)[\s]+allowed[\s]+have[\s]+been[\s]+written[\s]+to[\s]+([\s]*<(?<filename>[^>]*)>[\s]+|[\s]*'(?<filename>[^']*)'[\s]+|[\s]*(?<filename>[^\s]*)[\s]+)\.[\s]+Please[\s]+archive[\s]+&[\s]+remove[\s]+files[\s]+from[\s]+(?<fld3>[^\s]*)[\s]+if[\s]+you[\s]+want[\s]+more[\s]+Crypto[\s]+Archive[\s]+Files[\s]+saved$" }
			id => "msgParserId399"
			add_field => {
				"level" => "%{level}"
				"result" => "Latest Crypto File not written"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId400
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Received an ESP packet with incorrect IPsec padding> CRYPTO: Received an ESP packet (SPI = <dst_spi>, sequence number= <fld2>) from <saddr> (user= <username>) to <daddr> with incorrect IPsec padding. (padding: <fld3>)
	else if [logstash][msgparser][id] == "msgParserId400" {
		dissect {
			mapping => { "message" => "CRYPTO: Received an ESP packet (SPI = %{dst_spi}, sequence number= %{fld2}) from %{saddr} (user= %{username}) to %{daddr} with incorrect IPsec padding. (padding: %{fld3})" }
			id => "msgParserId400"
			add_field => {
				"level" => "%{level}"
				"result" => "Received an ESP packet with incorrect IPsec padding"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId401
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>PPTP session state not established, but received an XGRE packet, tunnel_id=<fld1>, session_id=<sessionid>
	else if [logstash][msgparser][id] == "msgParserId401" {
		dissect {
			mapping => { "message" => "PPTP session state not established, but received an XGRE packet, tunnel_id=%{fld1}, session_id=%{sessionid}" }
			id => "msgParserId401"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId402
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>PPP virtual interface <interface> rcvd pkt with invalid protocol: <protocol>
	else if [logstash][msgparser][id] == "msgParserId402" {
		dissect {
			mapping => { "message" => "PPP virtual interface %{interface} rcvd pkt with invalid protocol: %{protocol}" }
			id => "msgParserId402"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId403
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>PPP virtual interface <interface> requires mschap for MPPE
	else if [logstash][msgparser][id] == "msgParserId403" {
		dissect {
			mapping => { "message" => "PPP virtual interface %{interface} requires mschap for MPPE" }
			id => "msgParserId403"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId404
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>PPP virtual interface <interface> requires RADIUS for MPPE
	else if [logstash][msgparser][id] == "msgParserId404" {
		dissect {
			mapping => { "message" => "PPP virtual interface %{interface} requires RADIUS for MPPE" }
			id => "msgParserId404"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId405
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>PPP virtual interface <interface> missing aaa server group info
	else if [logstash][msgparser][id] == "msgParserId405" {
		dissect {
			mapping => { "message" => "PPP virtual interface %{interface} missing aaa server group info" }
			id => "msgParserId405"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId406
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>PPP virtual interface <interface> missing client <hostip> option
	else if [logstash][msgparser][id] == "msgParserId406" {
		dissect {
			mapping => { "message" => "PPP virtual interface %{interface} missing client %{hostip} option" }
			id => "msgParserId406"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId407
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:invalid PPTP packet>Rec'd packet not an PPTP packet. (<service>) dest_addr=<daddr>, src_addr=<saddr>, data: <result> 
	else if [logstash][msgparser][id] == "msgParserId407" {
		dissect {
			mapping => { "message" => "Rec'd packet not an PPTP packet. (%{service}) dest_addr=%{daddr}, src_addr=%{saddr}, data: %{result}" }
			id => "msgParserId407"
			add_field => {
				"level" => "%{level}"
				"action" => "invalid PPTP packet"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId408
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId408" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId408"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId409
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:Unable to create new connection>Unable to { Pre-allocate | Preallocate } <service> Call Signalling Connection for { foreign_address | faddr } { <saddr>/<sport> | <saddr> } to { local_address | laddr } { <daddr>/<dport> | <daddr> } <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId409" {
		grok {
			match => { "message" => "^Unable[\s]+to[\s]+([\s]*Pre\-allocate[\s]+|[\s]*Preallocate[\s]+)[\s]+(?<service>[^\s]*)[\s]+Call[\s]+Signalling[\s]+Connection[\s]+for[\s]+([\s]*foreign_address[\s]+|[\s]*faddr[\s]+)[\s]+([\s]*(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+to[\s]+([\s]*local_address[\s]+|[\s]*laddr[\s]+)[\s]+([\s]*(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId409"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Unable to create new connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId410
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:Unable to create new connection>Unable to { Pre-allocate | Preallocate } <service> Connection for { foreign_address | faddr } { <saddr>/<sport> | <saddr> } to { local_address | laddr } { <daddr>/<dport> | <daddr> } <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId410" {
		grok {
			match => { "message" => "^Unable[\s]+to[\s]+([\s]*Pre\-allocate[\s]+|[\s]*Preallocate[\s]+)[\s]+(?<service>[^\s]*)[\s]+Connection[\s]+for[\s]+([\s]*foreign_address[\s]+|[\s]*faddr[\s]+)[\s]+([\s]*(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+to[\s]+([\s]*local_address[\s]+|[\s]*laddr[\s]+)[\s]+([\s]*(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId410"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Unable to create new connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId411
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:H225 message contains bad protocol discriminator> H225 message from <saddr>/<sport> to <daddr>/<dport> contains bad protocol discriminator <protocol> 
	else if [logstash][msgparser][id] == "msgParserId411" {
		dissect {
			mapping => { "message" => "H225 message from %{saddr}/%{sport} to %{daddr}/%{dport} contains bad protocol discriminator %{protocol}" }
			id => "msgParserId411"
			add_field => {
				"level" => "%{level}"
				"action" => "H225 message contains bad protocol discriminator"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId412
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:H225 message received from before SETUP> H225 message <fld> received from <saddr>/<sport> to <daddr>/<dport> before SETUP 
	else if [logstash][msgparser][id] == "msgParserId412" {
		dissect {
			mapping => { "message" => "H225 message %{fld} received from %{saddr}/%{sport} to %{daddr}/%{dport} before SETUP" }
			id => "msgParserId412"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "H225 message received from before SETUP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId413
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><service> RAS message AdmissionConfirm received from <saddr>/<sport> to <daddr>/<dport> { without an | withoutan }<info>
	else if [logstash][msgparser][id] == "msgParserId413" {
		grok {
			match => { "message" => "^(?<service>[^\s]*)[\s]+RAS[\s]+message[\s]+AdmissionConfirm[\s]+received[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+([\s]*without[\s]+an[\s]+|[\s]*withoutan[\s]+)(?<info>.*)$" }
			id => "msgParserId413"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId414
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:FTP connection terminated>FTP port command low port: <saddr>/<sport> to <daddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId414" {
		dissect {
			mapping => { "message" => "FTP port command low port: %{saddr}/%{sport} to %{daddr} on interface %{interface}" }
			id => "msgParserId414"
			add_field => {
				"level" => "%{level}"
				"action" => "FTP connection terminated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId415
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:FTP connection terminated>FTP port command different address: <saddr>(<fld1>) to <daddr> on interface <interface> 
	else if [logstash][msgparser][id] == "msgParserId415" {
		dissect {
			mapping => { "message" => "FTP port command different address: %{saddr}(%{fld1}) to %{daddr} on interface %{interface}" }
			id => "msgParserId415"
			add_field => {
				"level" => "%{level}"
				"action" => "FTP connection terminated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId416
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Deny traffic for local-host <interface>:<hostip>, license limit of <fld1> exceeded<@action:denied traffic><@result:license limit exceeded>
	else if [logstash][msgparser][id] == "msgParserId416" {
		dissect {
			mapping => { "message" => "Deny traffic for local-host %{interface}:%{hostip}, license limit of %{fld1} exceeded" }
			id => "msgParserId416"
			add_field => {
				"level" => "%{level}"
				"action" => "denied traffic"
				"result" => "license limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "407002" {
		# MESSAGE 407002
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Embryonic limit exceeded><@result:for through connections> Embryonic limit <fld1>/<fld2> for through connections exceeded. <saddr>/<sport> to <daddr> (<fld3>)/<dport> on interface <interface> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Embryonic limit %{fld1}/%{fld2} for through connections exceeded. %{saddr}/%{sport} to %{daddr} (%{fld3})/%{dport} on interface %{interface}" }
				id => "message-407002"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Embryonic limit exceeded"
				"result" => "for through connections"
					"[event][id]" => "407002"
					"[rsa][message][id1]" => "407002"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 407002:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Embryonic limit exceeded><@result:for through connections> Embryonic limit for through connections exceeded <fld1>. <saddr>/<sport> to <daddr> (<fld2>)/<dport> on interface <interface> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Embryonic limit for through connections exceeded %{fld1}. %{saddr}/%{sport} to %{daddr} (%{fld2})/%{dport} on interface %{interface}" }
				id => "message-407002:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Embryonic limit exceeded"
				"result" => "for through connections"
					"[event][id]" => "407002:01"
					"[rsa][message][id1]" => "407002:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId419
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Ospf IA update conflict> ospf { E1 update | E2 update | IA update |  update } <stransaddr> <fld1> [<fld2>] via <daddr>:<host> overriding conflict with <dtransaddr> <fld3> [<fld4>] <interface> 
	else if [logstash][msgparser][id] == "msgParserId419" {
		grok {
			match => { "message" => "^[\s]*ospf[\s]+([\s]*E1[\s]+update[\s]+|[\s]*E2[\s]+update[\s]+|[\s]*IA[\s]+update[\s]+|[\s]*update[\s]+)[\s]+(?<stransaddr>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+\[(?<fld2>[^\]]*)\][\s]+via[\s]+(?<daddr>[^:]*):(?<host>[^\s]*)[\s]+overriding[\s]+conflict[\s]+with[\s]+(?<dtransaddr>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+\[(?<fld4>[^\]]*)\][\s]+(?<interface>[^\s]*)[\s]+$" }
			id => "msgParserId419"
			add_field => {
				"level" => "%{level}"
				"result" => "Ospf IA update conflict"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId420
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><fld1>: external LSA <hostip> <fld> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId420" {
		dissect {
			mapping => { "message" => "%{fld1}: external LSA %{hostip} %{fld}" }
			id => "msgParserId420"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId421
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{Received | Receive } invalid packet: <result> from <saddr>, <interface>
	else if [logstash][msgparser][id] == "msgParserId421" {
		grok {
			match => { "message" => "^(Received[\s]+|[\s]*Receive[\s]+)[\s]+invalid[\s]+packet:[\s]+(?<result>[^\s]*)[\s]+from[\s]+(?<saddr>[^,]*),[\s]+(?<interface>.*)$" }
			id => "msgParserId421"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId422
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Received <result> from unknown neighbor <hostip>
	else if [logstash][msgparser][id] == "msgParserId422" {
		dissect {
			mapping => { "message" => "Received %{result} from unknown neighbor %{hostip}" }
			id => "msgParserId422"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId423
	# line in RSA: <@ec_theme:AccessControl><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Attempting AAA Fallback method <process> for <info> for user { '<username>' | <username> }: <space> Auth-server group <product> unreachable <@msg:*PARMVAL($MSG)><@result:Auth-server group unreachable>
	else if [logstash][msgparser][id] == "msgParserId423" {
		grok {
			match => { "message" => "^Attempting[\s]+AAA[\s]+Fallback[\s]+method[\s]+(?<process>[^\s]*)[\s]+for[\s]+(?<info>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+):[\s]+(?<space>[^\s]*)[\s]+Auth\-server[\s]+group[\s]+(?<product>[^\s]*)[\s]+unreachable[\s]+$" }
			id => "msgParserId423"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Error"
				"level" => "%{level}"
				"result" => "Auth-server group unreachable"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "410001" {
		# MESSAGE 410001
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dropped UDP DNS { reply | request } from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>; { packet | label | domain-name | compression pointer } length <bytes> bytes exceeds {remaining packet length | configured | protocol | packet length } limit of <fld2> bytes <@action:Dropped DNS UDP packet - length exceeded>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Dropped[\s]+UDP[\s]+DNS[\s]+([\s]*reply[\s]+|[\s]*request[\s]+)[\s]+from[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^;]*);[\s]+([\s]*packet[\s]+|[\s]*label[\s]+|[\s]*domain\-name[\s]+|[\s]*compression[\s]+pointer[\s]+)[\s]+length[\s]+(?<bytes>[^\s]*)[\s]+bytes[\s]+exceeds[\s]+(remaining[\s]+packet[\s]+length[\s]+|[\s]*configured[\s]+|[\s]*protocol[\s]+|[\s]*packet[\s]+length[\s]+)[\s]+limit[\s]+of[\s]+(?<fld2>[^\s]*)[\s]+bytes[\s]+$" }
				id => "message-410001"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Dropped DNS UDP packet - length exceeded"
					"[event][id]" => "410001"
					"[rsa][message][id1]" => "410001"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 410001:02
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dropped UDP DNS { reply | request } from <saddr>/<sport> to <daddr>/<dport>; { packet | label } length <bytes> bytes exceeds { configured | protocol } limit of <fld2> bytes <@action:Dropped DNS UDP packet - length exceeded>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Dropped[\s]+UDP[\s]+DNS[\s]+([\s]*reply[\s]+|[\s]*request[\s]+)[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<daddr>[^/]*)/(?<dport>[^;]*);[\s]+([\s]*packet[\s]+|[\s]*label[\s]+)[\s]+length[\s]+(?<bytes>[^\s]*)[\s]+bytes[\s]+exceeds[\s]+([\s]*configured[\s]+|[\s]*protocol[\s]+)[\s]+limit[\s]+of[\s]+(?<fld2>[^\s]*)[\s]+bytes[\s]+$" }
				id => "message-410001:02"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Dropped DNS UDP packet - length exceeded"
					"[event][id]" => "410001:02"
					"[rsa][message][id1]" => "410001:02"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 410001:03
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Dropped UDP DNS reply from <saddr>/<sport> to <daddr>/<dport>; compression pointer length <bytes> bytes exceeds packet length limit of <fld2> bytes <@action:Dropped DNS UDP reply packet - length exceeded>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Dropped UDP DNS reply from %{saddr}/%{sport} to %{daddr}/%{dport}; compression pointer length %{bytes} bytes exceeds packet length limit of %{fld2} bytes" }
				id => "message-410001:03"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Dropped DNS UDP reply packet - length exceeded"
					"[event][id]" => "410001:03"
					"[rsa][message][id1]" => "410001:03"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 410001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>UDP DNS packet dropped due to { compression | domainname | label | packet } length check of <bytes> bytes: actual length:<fld11> bytes<@action:Dropped DNS UDP packet - length exceeded>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^UDP[\s]+DNS[\s]+packet[\s]+dropped[\s]+due[\s]+to[\s]+([\s]*compression[\s]+|[\s]*domainname[\s]+|[\s]*label[\s]+|[\s]*packet[\s]+)[\s]+length[\s]+check[\s]+of[\s]+(?<bytes>[^\s]*)[\s]+bytes:[\s]+actual[\s]+length:(?<fld11>[^\s]*)[\s]+bytes$" }
				id => "message-410001:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Dropped DNS UDP packet - length exceeded"
					"[event][id]" => "410001:01"
					"[rsa][message][id1]" => "410001:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId428
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Line protocol on Interface <interface> { , <result> | <result> }  
	else if [logstash][msgparser][id] == "msgParserId428" {
		grok {
			match => { "message" => "^[\s]*Line[\s]+protocol[\s]+on[\s]+Interface[\s]+(?<interface>[^\s]*)[\s]+([\s]*,[\s]+(?<result>[^\s]*)[\s]+|[\s]*(?<result>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId428"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId429
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Line protocol on { Interface | interface } <interface> { , <result> | <result> } 
	else if [logstash][msgparser][id] == "msgParserId429" {
		grok {
			match => { "message" => "^[\s]*Line[\s]+protocol[\s]+on[\s]+([\s]*Interface[\s]+|[\s]*interface[\s]+)[\s]+(?<interface>[^\s]*)[\s]+([\s]*,[\s]+(?<result>[^\s]*)[\s]+|[\s]*(?<result>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId429"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId430
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Modify><@ec_subject:Configuration><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { Interface | interface } <interface> { , <result> | <result> } 
	else if [logstash][msgparser][id] == "msgParserId430" {
		grok {
			match => { "message" => "^[\s]*([\s]*Interface[\s]+|[\s]*interface[\s]+)[\s]+(?<interface>[^\s]*)[\s]+([\s]*,[\s]+(?<result>[^\s]*)[\s]+|[\s]*(?<result>[^\s]*)[\s]+)[\s]+$" }
			id => "msgParserId430"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Modify"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId431
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@misc:Interface experienced a hardware transmit hang>  { Interface | interface } <interface> experienced a hardware transmit hang. <result>. 
	else if [logstash][msgparser][id] == "msgParserId431" {
		grok {
			match => { "message" => "^[\s]*([\s]*Interface[\s]+|[\s]*interface[\s]+)[\s]+(?<interface>[^\s]*)[\s]+experienced[\s]+a[\s]+hardware[\s]+transmit[\s]+hang\.[\s]+(?<result>[^\.]*)\.[\s]+$" }
			id => "msgParserId431"
			add_field => {
				"level" => "%{level}"
				"misc" => "Interface experienced a hardware transmit hang"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId432
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Modify><@ec_subject:Configuration><@ec_outcome:Success><@msg:*PARMVAL($MSG)> MAC <interface> moved from <src_zone> to <dst_zone>
	else if [logstash][msgparser][id] == "msgParserId432" {
		dissect {
			mapping => { "message" => "MAC %{interface} moved from %{src_zone} to %{dst_zone}" }
			id => "msgParserId432"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Modify"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId433
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Module in slot<fld1>is not able to shut down. <space> Module Error: <fld2> <fld3>
	else if [logstash][msgparser][id] == "msgParserId433" {
		dissect {
			mapping => { "message" => "Module in slot%{fld1}is not able to shut down. %{space} Module Error: %{fld2} %{fld3}" }
			id => "msgParserId433"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId434
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Module in slot<fld1>is not able to reload.<space>Module Error:<fld2><data>
	else if [logstash][msgparser][id] == "msgParserId434" {
		dissect {
			mapping => { "message" => "Module in slot%{fld1}is not able to reload.%{space}Module Error:%{fld2}%{data}" }
			id => "msgParserId434"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId435
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Module in slot <fld1> is not a recognized { type. | type }<@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId435" {
		grok {
			match => { "message" => "^Module[\s]+in[\s]+slot[\s]+(?<fld1>[^\s]*)[\s]+is[\s]+not[\s]+a[\s]+recognized[\s]+([\s]*type\.[\s]+|[\s]*type[\s]+)$" }
			id => "msgParserId435"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId436
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Failed to save logging buffer using file name <filename> to FTP server <hostip> on interface <interface>: [<result>]
	else if [logstash][msgparser][id] == "msgParserId436" {
		dissect {
			mapping => { "message" => "Failed to save logging buffer using file name %{filename} to FTP server %{hostip} on interface %{interface}: [%{result}]" }
			id => "msgParserId436"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId437
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Failed to save logging buffer to flash:/syslog directory using filename: <filename>: [<result>]
	else if [logstash][msgparser][id] == "msgParserId437" {
		dissect {
			mapping => { "message" => "Failed to save logging buffer to flash:/syslog directory using filename: %{filename}: [%{result}]" }
			id => "msgParserId437"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId438
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP Tunnel detected - <listnum> <protocol> from <saddr> to <daddr><@context:HTTP Tunnel detected>
	else if [logstash][msgparser][id] == "msgParserId438" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP Tunnel detected - %{listnum} %{protocol} from %{saddr} to %{daddr}" }
			id => "msgParserId438"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP Tunnel detected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId439
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP Instant Messenger detected - <listnum> <protocol> from <saddr> to <daddr><@context:HTTP Instant Messenger detected>
	else if [logstash][msgparser][id] == "msgParserId439" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP Instant Messenger detected - %{listnum} %{protocol} from %{saddr} to %{daddr}" }
			id => "msgParserId439"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP Instant Messenger detected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId440
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP Peer-to-Peer detected - <listnum> <protocol> from <saddr> to <daddr><@context:HTTP Peer-to-Peer detected>
	else if [logstash][msgparser][id] == "msgParserId440" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP Peer-to-Peer detected - %{listnum} %{protocol} from %{saddr} to %{daddr}" }
			id => "msgParserId440"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP Peer-to-Peer detected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "415004" {
		# MESSAGE 415004
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> Content type not found - <listnum> Content Verification Failed from <saddr> to <daddr><@context:Content type not found>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{sigid} Content type not found - %{listnum} Content Verification Failed from %{saddr} to %{daddr}" }
				id => "message-415004"
				add_field => {
				"level" => "%{level}"
				"context" => "Content type not found"
					"[event][id]" => "415004"
					"[rsa][message][id1]" => "415004"
					"[event][categoryid]" => "1001030305"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 415004:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> Content type not found - <listnum> <protocol> from <saddr> to <daddr><@context:Content type not found>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{sigid} Content type not found - %{listnum} %{protocol} from %{saddr} to %{daddr}" }
				id => "message-415004:01"
				add_field => {
				"level" => "%{level}"
				"context" => "Content type not found"
					"[event][id]" => "415004:01"
					"[rsa][message][id1]" => "415004:01"
					"[event][categoryid]" => "1001030305"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId443
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> Content type does not match specified type - <listnum> Content Verification Failed from <saddr> to <daddr> <@context:Content type does not match specified type>
	else if [logstash][msgparser][id] == "msgParserId443" {
		dissect {
			mapping => { "message" => "%{sigid} Content type does not match specified type - %{listnum} Content Verification Failed from %{saddr} to %{daddr}" }
			id => "msgParserId443"
			add_field => {
				"level" => "%{level}"
				"context" => "Content type does not match specified type"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId444
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> Content size <priority> out of range - <listnum> <protocol> from <saddr> to <daddr> <@context:Content size out of range>
	else if [logstash][msgparser][id] == "msgParserId444" {
		dissect {
			mapping => { "message" => "%{sigid} Content size %{priority} out of range - %{listnum} %{protocol} from %{saddr} to %{daddr}" }
			id => "msgParserId444"
			add_field => {
				"level" => "%{level}"
				"context" => "Content size out of range"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId445
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP Extension method illegal - <listnum> '<protocol>' from <saddr> to <daddr> <@context:HTTP Extension method illegal>
	else if [logstash][msgparser][id] == "msgParserId445" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP Extension method illegal - %{listnum} '%{protocol}' from %{saddr} to %{daddr}" }
			id => "msgParserId445"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP Extension method illegal"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "415008" {
		# MESSAGE 415008
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP RFC method illegal - <listnum> '<protocol>' from <saddr> to <daddr> <@context:HTTP RFC method illegal>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{sigid} HTTP RFC method illegal - %{listnum} '%{protocol}' from %{saddr} to %{daddr}" }
				id => "message-415008"
				add_field => {
				"level" => "%{level}"
				"context" => "HTTP RFC method illegal"
					"[event][id]" => "415008"
					"[rsa][message][id1]" => "415008"
					"[event][categoryid]" => "1001030305"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 415008:01
		# line in RSA: <@:*SYSVAL($MSGID,$ID1)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP - matched <fld1> in policy-map <policyname>, header matched - Resetting connection from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{sigid} HTTP - matched %{fld1} in policy-map %{policyname}, header matched - Resetting connection from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
				id => "message-415008:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "415008:01"
					"[rsa][message][id1]" => "415008:01"
					"[event][categoryid]" => "1001030305"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId448
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP Header length exceeded. Received <priority> byte Header - <listnum> header length exceeded from <saddr> to <daddr> <@context:HTTP Header length exceeded>
	else if [logstash][msgparser][id] == "msgParserId448" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP Header length exceeded. Received %{priority} byte Header - %{listnum} header length exceeded from %{saddr} to %{daddr}" }
			id => "msgParserId448"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP Header length exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId449
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP protocol violation detected - <listnum> HTTP Protocol not detected from <saddr> to <daddr> <@context:HTTP protocol violation detected>
	else if [logstash][msgparser][id] == "msgParserId449" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP protocol violation detected - %{listnum} HTTP Protocol not detected from %{saddr} to %{daddr}" }
			id => "msgParserId449"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP protocol violation detected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId450
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP URL Length exceeded. Received <priority> byte URL - <listnum> URI length exceeded from <saddr> to <daddr> <@context:HTTP URL Length exceeded>
	else if [logstash][msgparser][id] == "msgParserId450" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP URL Length exceeded. Received %{priority} byte URL - %{listnum} URI length exceeded from %{saddr} to %{daddr}" }
			id => "msgParserId450"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP URL Length exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId451
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP Deobfuscation signature detected - <listnum> HTTP deobfuscation detected IPS evasion technique from <saddr> to <daddr> <@context:HTTP Deobfuscation signature detected>
	else if [logstash][msgparser][id] == "msgParserId451" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP Deobfuscation signature detected - %{listnum} HTTP deobfuscation detected IPS evasion technique from %{saddr} to %{daddr}" }
			id => "msgParserId451"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP Deobfuscation signature detected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId452
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> HTTP Transfer encoding violation detected - <listnum> <protocol> Transfer encoding not allowed from <saddr> to <daddr> <@context:HTTP Transfer encoding violation detected>
	else if [logstash][msgparser][id] == "msgParserId452" {
		dissect {
			mapping => { "message" => "%{sigid} HTTP Transfer encoding violation detected - %{listnum} %{protocol} Transfer encoding not allowed from %{saddr} to %{daddr}" }
			id => "msgParserId452"
			add_field => {
				"level" => "%{level}"
				"context" => "HTTP Transfer encoding violation detected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId453
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><sigid> Maximum of 10 unanswered HTTP requests exceeded from <saddr> to <daddr> <@context:Maximum of 10 unanswered HTTP requests exceeded>
	else if [logstash][msgparser][id] == "msgParserId453" {
		dissect {
			mapping => { "message" => "%{sigid} Maximum of 10 unanswered HTTP requests exceeded from %{saddr} to %{daddr}" }
			id => "msgParserId453"
			add_field => {
				"level" => "%{level}"
				"context" => "Maximum of 10 unanswered HTTP requests exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId454
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:dropped UDP SNMP packet>Dropped UDP SNMP packet from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>; <result>
	else if [logstash][msgparser][id] == "msgParserId454" {
		dissect {
			mapping => { "message" => "Dropped UDP SNMP packet from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}; %{result}" }
			id => "msgParserId454"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "dropped UDP SNMP packet"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "418001" {
		# MESSAGE 418001:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:packet denied><@result:to/from mangement-only network> Through-the-device packet to/from management-only network is denied: <protocol> src <sinterface>:<saddr>/<sport> dst <dinterface>:<daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Through-the-device packet to/from management-only network is denied: %{protocol} src %{sinterface}:%{saddr}/%{sport} dst %{dinterface}:%{daddr}/%{dport}" }
				id => "message-418001:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "packet denied"
				"result" => "to/from mangement-only network"
					"[event][id]" => "418001:01"
					"[rsa][message][id1]" => "418001:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 418001
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Through-the-device packet to/from management-only network is denied: <protocol> from <sinterface> <saddr> (<sport>) to <dinterface> <daddr> (<dport>)<@action:packet denied><@result:to/from mangement-only network>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Through-the-device packet to/from management-only network is denied: %{protocol} from %{sinterface} %{saddr} (%{sport}) to %{dinterface} %{daddr} (%{dport})" }
				id => "message-418001"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "packet denied"
				"result" => "to/from mangement-only network"
					"[event][id]" => "418001"
					"[rsa][message][id1]" => "418001"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId457
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><action> from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>, reason: <result>
	else if [logstash][msgparser][id] == "msgParserId457" {
		dissect {
			mapping => { "message" => "%{action} from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}, reason: %{result}" }
			id => "msgParserId457"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId458
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><action> from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> with different initial sequence number
	else if [logstash][msgparser][id] == "msgParserId458" {
		dissect {
			mapping => { "message" => "%{action} from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} with different initial sequence number" }
			id => "msgParserId458"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId459
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Cleared TCP urgent flag>Cleared TCP urgent flag from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId459" {
		dissect {
			mapping => { "message" => "Cleared TCP urgent flag from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId459"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Cleared TCP urgent flag"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "420002" {
		# MESSAGE 420002:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:IPS request to drop packet>IPS requested to drop <protocol> packets <sinterface>:<saddr> to <dinterface>:<daddr> (type <icmptype>, code <icmpcode>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IPS requested to drop %{protocol} packets %{sinterface}:%{saddr} to %{dinterface}:%{daddr} (type %{icmptype}, code %{icmpcode})" }
				id => "message-420002:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"event_description" => "IPS request to drop packet"
					"[event][id]" => "420002:01"
					"[rsa][message][id1]" => "420002:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 420002
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:IPS request to drop packet> <service> requested to drop <protocol> packet from <sinterface>:<saddr>/<sport> <dinterface>:<daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{service} requested to drop %{protocol} packet from %{sinterface}:%{saddr}/%{sport} %{dinterface}:%{daddr}/%{dport}" }
				id => "message-420002"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"event_description" => "IPS request to drop packet"
					"[event][id]" => "420002"
					"[rsa][message][id1]" => "420002"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId462
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:IPS request to reset connection> IPS requested to reset <protocol> connection from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> 
	else if [logstash][msgparser][id] == "msgParserId462" {
		dissect {
			mapping => { "message" => "IPS requested to reset %{protocol} connection from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId462"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "IPS request to reset connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId463
	# line in RSA: <@ec_activity:Create><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Virtual Sensor added>Virtual Sensor <vsys> was added on the <product>
	else if [logstash][msgparser][id] == "msgParserId463" {
		dissect {
			mapping => { "message" => "Virtual Sensor %{vsys} was added on the %{product}" }
			id => "msgParserId463"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Virtual Sensor added"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId464
	# line in RSA: <@ec_activity:Delete><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Virtual Sensor deleted>Virtual Sensor <vsys> was deleted from the <product>
	else if [logstash][msgparser][id] == "msgParserId464" {
		dissect {
			mapping => { "message" => "Virtual Sensor %{vsys} was deleted from the %{product}" }
			id => "msgParserId464"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Virtual Sensor deleted"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId465
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:TCP flow skipped><@result:process failure>TCP flow from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> is skipped because <application> has failed
	else if [logstash][msgparser][id] == "msgParserId465" {
		dissect {
			mapping => { "message" => "TCP flow from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} is skipped because %{application} has failed" }
			id => "msgParserId465"
			add_field => {
				"level" => "%{level}"
				"event_description" => "TCP flow skipped"
				"result" => "process failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId466
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><interface>:<hostip> is counted as a user { for | of } <product>
	else if [logstash][msgparser][id] == "msgParserId466" {
		grok {
			match => { "message" => "^(?<interface>[^:]*):(?<hostip>[^\s]*)[\s]+is[\s]+counted[\s]+as[\s]+a[\s]+user[\s]+([\s]*for[\s]+|[\s]*of[\s]+)[\s]+(?<product>.*)$" }
			id => "msgParserId466"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId467
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> There are <fld1> users of <product> during the past <fld2> hours 
	else if [logstash][msgparser][id] == "msgParserId467" {
		dissect {
			mapping => { "message" => "There are %{fld1} users of %{product} during the past %{fld2} hours" }
			id => "msgParserId467"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId468
	# line in RSA: <@ec_subject:License><@ec_theme:ALM><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Temporary license key will expire in 365 days><event_description>
	else if [logstash][msgparser][id] == "msgParserId468" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId468"
			add_field => {
				"ec_subject" => "License"
				"ec_theme" => "ALM"
				"level" => "%{level}"
				"event_description" => "Temporary license key will expire in 365 days"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId469
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>ActiveX content modified src <saddr> dest <daddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId469" {
		dissect {
			mapping => { "message" => "ActiveX content modified src %{saddr} dest %{daddr} on interface %{interface}" }
			id => "msgParserId469"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId470
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Java content modified src <saddr> dest <daddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId470" {
		dissect {
			mapping => { "message" => "Java content modified src %{saddr} dest %{daddr} on interface %{interface}" }
			id => "msgParserId470"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId471
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Bad hdr length>Bad <protocol> hdr length (hdrlen=<fld1>, pktlen=<fld2>) from <saddr>/<sport> to <daddr>/<dport>, flags: <fld3>, on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId471" {
		dissect {
			mapping => { "message" => "Bad %{protocol} hdr length (hdrlen=%{fld1}, pktlen=%{fld2}) from %{saddr}/%{sport} to %{daddr}/%{dport}, flags: %{fld3}, on interface %{interface}" }
			id => "msgParserId471"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Bad hdr length"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId472
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Invalid transport field>Invalid transport field for protocol=<protocol>, from <saddr>/<sport> to <daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId472" {
		dissect {
			mapping => { "message" => "Invalid transport field for protocol=%{protocol}, from %{saddr}/%{sport} to %{daddr}/%{dport}" }
			id => "msgParserId472"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Invalid transport field"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "501101" {
		# MESSAGE 501101
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Cmd priv level changed successfully>Cmd priv level changed: Var: <fld1> Cmd: <fld2> Priv level: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cmd priv level changed: Var: %{fld1} Cmd: %{fld2} Priv level: %{fld3}" }
				id => "message-501101"
				add_field => {
				"level" => "%{level}"
				"result" => "Cmd priv level changed successfully"
					"[event][id]" => "501101"
					"[rsa][message][id1]" => "501101"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 501101:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>User transitioning priv level<@msg:*PARMVAL($MSG)><@result:User transitioning priv level>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User transitioning priv level" }
				id => "message-501101:01"
				add_field => {
				"level" => "%{level}"
				"result" => "User transitioning priv level"
					"[event][id]" => "501101:01"
					"[rsa][message][id1]" => "501101:01"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId475
	# line in RSA: <@ec_subject:User><@ec_activity:Create><@ec_theme:UserGroup><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>New user added to local dbase: Uname: { '<username>' | <username> } Priv: <fld1> Encpass: <fld2> <@msg:*PARMVAL($MSG)><@result:New user added to local DB>
	else if [logstash][msgparser][id] == "msgParserId475" {
		grok {
			match => { "message" => "^New[\s]+user[\s]+added[\s]+to[\s]+local[\s]+dbase:[\s]+Uname:[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+Priv:[\s]+(?<fld1>[^\s]*)[\s]+Encpass:[\s]+(?<fld2>[^\s]*)[\s]+$" }
			id => "msgParserId475"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"level" => "%{level}"
				"result" => "New user added to local DB"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId476
	# line in RSA: <@ec_subject:User><@ec_activity:Delete><@ec_theme:UserGroup><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>User deleted from local dbase: Uname: { '<username>' | <username> } Priv: <fld1> Encpass: <fld2><@msg:*PARMVAL($MSG)><@result:User deleted from local DB>
	else if [logstash][msgparser][id] == "msgParserId476" {
		grok {
			match => { "message" => "^User[\s]+deleted[\s]+from[\s]+local[\s]+dbase:[\s]+Uname:[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+Priv:[\s]+(?<fld1>[^\s]*)[\s]+Encpass:[\s]+(?<fld2>.*)$" }
			id => "msgParserId476"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"level" => "%{level}"
				"result" => "User deleted from local DB"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId477
	# line in RSA: <@ec_subject:User><@ec_activity:Modify><@ec_theme:UserGroup><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>User priv level changed: Uname: { '<username>' | <username> } From: <fld1> To: <fld2> <@msg:*PARMVAL($MSG)><@result:User priv level change>
	else if [logstash][msgparser][id] == "msgParserId477" {
		grok {
			match => { "message" => "^User[\s]+priv[\s]+level[\s]+changed:[\s]+Uname:[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+From:[\s]+(?<fld1>[^\s]*)[\s]+To:[\s]+(?<fld2>[^\s]*)[\s]+$" }
			id => "msgParserId477"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"level" => "%{level}"
				"result" => "User priv level change"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId478
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>New group policy added: name:{ '<username>' | <username> } Type:<fld1> <@msg:*PARMVAL($MSG)><@result:New group policy added>
	else if [logstash][msgparser][id] == "msgParserId478" {
		grok {
			match => { "message" => "^New[\s]+group[\s]+policy[\s]+added:[\s]+name:([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+Type:(?<fld1>[^\s]*)[\s]+$" }
			id => "msgParserId478"
			add_field => {
				"level" => "%{level}"
				"result" => "New group policy added"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId479
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Group policy deleted: name:{ '<username>' | <username> } Type:<fld1> <@msg:*PARMVAL($MSG)><@result:Group policy deleted>
	else if [logstash][msgparser][id] == "msgParserId479" {
		grok {
			match => { "message" => "^Group[\s]+policy[\s]+deleted:[\s]+name:([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+Type:(?<fld1>[^\s]*)[\s]+$" }
			id => "msgParserId479"
			add_field => {
				"level" => "%{level}"
				"result" => "Group policy deleted"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId480
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Process <fld1>, Nbr <hostip> on <interface> from <fld2> to <fld3>, <result>
	else if [logstash][msgparser][id] == "msgParserId480" {
		dissect {
			mapping => { "message" => "Process %{fld1}, Nbr %{hostip} on %{interface} from %{fld2} to %{fld3}, %{result}" }
			id => "msgParserId480"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "504001" {
		# MESSAGE 504001:01
		# line in RSA: <@ec_activity:Create><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:Security context added>Security context <info> was added to the system<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security context %{info} was added to the system" }
				id => "message-504001:01"
				add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Security context added"
					"[event][id]" => "504001:01"
					"[rsa][message][id1]" => "504001:01"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 504001
		# line in RSA: <@ec_activity:Create><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-504001"
				add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
					"[event][id]" => "504001"
					"[rsa][message][id1]" => "504001"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "504002" {
		# MESSAGE 504002:01
		# line in RSA: <@ec_activity:Delete><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@event_description:Security context removed>Security context <info> was removed from the system<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Security context %{info} was removed from the system" }
				id => "message-504002:01"
				add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Security context removed"
					"[event][id]" => "504002:01"
					"[rsa][message][id1]" => "504002:01"
					"[event][categoryid]" => "1701030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 504002
		# line in RSA: <@ec_activity:Delete><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-504002"
				add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
					"[event][id]" => "504002"
					"[rsa][message][id1]" => "504002"
					"[event][categoryid]" => "1701030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId484
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:data channel communication is UP> <product> Module in slot <fld1> data channel communication is UP
	else if [logstash][msgparser][id] == "msgParserId484" {
		dissect {
			mapping => { "message" => "%{product} Module in slot %{fld1} data channel communication is UP" }
			id => "msgParserId484"
			add_field => {
				"level" => "%{level}"
				"result" => "data channel communication is UP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId485
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <product> Module in slot <fld1>, application reloading "<application>", <info> 
	else if [logstash][msgparser][id] == "msgParserId485" {
		dissect {
			mapping => { "message" => "%{product} Module in slot %{fld1}, application reloading \"%{application}\", %{info}" }
			id => "msgParserId485"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId486
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <product> Module in slot <fld1>, application down "<application>", <info> 
	else if [logstash][msgparser][id] == "msgParserId486" {
		dissect {
			mapping => { "message" => "%{product} Module in slot %{fld1}, application down \"%{application}\", %{info}" }
			id => "msgParserId486"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId487
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <product> Module in slot <fld1>, application up "<application>", <info>
	else if [logstash][msgparser][id] == "msgParserId487" {
		dissect {
			mapping => { "message" => "%{product} Module in slot %{fld1}, application up \"%{application}\", %{info}" }
			id => "msgParserId487"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId488
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:TCP-Proxy connection terminated>Terminating TCP-Proxy connection from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> - <result>
	else if [logstash][msgparser][id] == "msgParserId488" {
		dissect {
			mapping => { "message" => "Terminating TCP-Proxy connection from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} - %{result}" }
			id => "msgParserId488"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "TCP-Proxy connection terminated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId489
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Moving connection>Moving connection from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> to non-proxy mode - <result>
	else if [logstash][msgparser][id] == "msgParserId489" {
		dissect {
			mapping => { "message" => "Moving connection from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} to non-proxy mode - %{result}" }
			id => "msgParserId489"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Moving connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId490
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:tcp/udp flow terminated> { udp | tcp } flow from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> terminated by <service>, reason - <result>
	else if [logstash][msgparser][id] == "msgParserId490" {
		grok {
			match => { "message" => "^[\s]*([\s]*udp[\s]+|[\s]*tcp[\s]+)[\s]+flow[\s]+from[\s]+(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+terminated[\s]+by[\s]+(?<service>[^,]*),[\s]+reason[\s]+\-[\s]+(?<result>.*)$" }
			id => "msgParserId490"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "tcp/udp flow terminated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId491
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><@action:PMTU-D packet bytes greater than effective mtu>PMTU-D packet <fld1> { bytes | byte } greater than effective mtu <fld2> dest_addr=<daddr>, src_addr=<saddr>, prot=<protocol>
	else if [logstash][msgparser][id] == "msgParserId491" {
		grok {
			match => { "message" => "^PMTU\-D[\s]+packet[\s]+(?<fld1>[^\s]*)[\s]+([\s]*bytes[\s]+|[\s]*byte[\s]+)[\s]+greater[\s]+than[\s]+effective[\s]+mtu[\s]+(?<fld2>[^\s]*)[\s]+dest_addr=(?<daddr>[^,]*),[\s]+src_addr=(?<saddr>[^,]*),[\s]+prot=(?<protocol>.*)$" }
			id => "msgParserId491"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "PMTU-D packet bytes greater than effective mtu"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId492
	# line in RSA: <@ec_activity:Modify><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId492" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId492"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId493
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Received an ICMP Destination Unreachable>  <product>: Received an ICMP Destination Unreachable from <saddr> with <info>
	else if [logstash][msgparser][id] == "msgParserId493" {
		dissect {
			mapping => { "message" => "%{product}: Received an ICMP Destination Unreachable from %{saddr} with %{info}" }
			id => "msgParserId493"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Received an ICMP Destination Unreachable"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId494
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Received an ICMP Destination Unreachable>  <product>: Received an ICMP Destination Unreachable from <saddr>,<info>
	else if [logstash][msgparser][id] == "msgParserId494" {
		dissect {
			mapping => { "message" => "%{product}: Received an ICMP Destination Unreachable from %{saddr},%{info}" }
			id => "msgParserId494"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Received an ICMP Destination Unreachable"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "602201" {
		# MESSAGE 602201
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> ISAKMP Phase 1 SA created (local <daddr>/<dport> (responder), remote <saddr>/<sport>, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISAKMP Phase 1 SA created (local %{daddr}/%{dport} (responder), remote %{saddr}/%{sport}, %{info}" }
				id => "message-602201"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "602201"
					"[rsa][message][id1]" => "602201"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 602201:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> ISAKMP Phase 1 SA created (local <saddr>/<sport> (initiator), remote <daddr>/<dport>, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISAKMP Phase 1 SA created (local %{saddr}/%{sport} (initiator), remote %{daddr}/%{dport}, %{info}" }
				id => "message-602201:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "602201:01"
					"[rsa][message][id1]" => "602201:01"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "602202" {
		# MESSAGE 602202:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:ISAKMP session connected>ISAKMP session { connected | connect } (local <daddr> (responder), remote <saddr>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+session[\s]+([\s]*connected[\s]+|[\s]*connect[\s]+)[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+remote[\s]+(?<saddr>[^\)]*)\)$" }
				id => "message-602202:01"
				add_field => {
				"level" => "%{level}"
				"action" => "ISAKMP session connected"
					"[event][id]" => "602202:01"
					"[rsa][message][id1]" => "602202:01"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 602202
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:ISAKMP session connected>ISAKMP session { connected | connect } (local <saddr> (initiator), remote <daddr>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+session[\s]+([\s]*connected[\s]+|[\s]*connect[\s]+)[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)$" }
				id => "message-602202"
				add_field => {
				"level" => "%{level}"
				"action" => "ISAKMP session connected"
					"[event][id]" => "602202"
					"[rsa][message][id1]" => "602202"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "602203" {
		# MESSAGE 602203:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:ISAKMP session disconnected>ISAKMP session { disconnected | disconnect } (local <daddr> (responder), remote <saddr>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+session[\s]+([\s]*disconnected[\s]+|[\s]*disconnect[\s]+)[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+remote[\s]+(?<saddr>[^\)]*)\)$" }
				id => "message-602203:01"
				add_field => {
				"level" => "%{level}"
				"action" => "ISAKMP session disconnected"
					"[event][id]" => "602203:01"
					"[rsa][message][id1]" => "602203:01"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 602203
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:ISAKMP session disconnected>ISAKMP session { disconnected | disconnect } (local <saddr> (initiator), remote <daddr>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+session[\s]+([\s]*disconnected[\s]+|[\s]*disconnect[\s]+)[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)$" }
				id => "message-602203"
				add_field => {
				"level" => "%{level}"
				"action" => "ISAKMP session disconnected"
					"[event][id]" => "602203"
					"[rsa][message][id1]" => "602203"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId501
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><service>: An <direction> SA (SPI= <fld1>) between <saddr> and <daddr> { (user=<username>) | (<username>) | '<username>' | <username> } <action>
	else if [logstash][msgparser][id] == "msgParserId501" {
		grok {
			match => { "message" => "^(?<service>[^:]*):[\s]+An[\s]+(?<direction>[^\s]*)[\s]+SA[\s]+\(SPI=[\s]+(?<fld1>[^\)]*)\)[\s]+between[\s]+(?<saddr>[^\s]*)[\s]+and[\s]+(?<daddr>[^\s]*)[\s]+([\s]*\(user=(?<username>[^\)]*)\)[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+(?<action>.*)$" }
			id => "msgParserId501"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId502
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>PPP virtual interface <interface> - user: <username> aaa authentication started
	else if [logstash][msgparser][id] == "msgParserId502" {
		dissect {
			mapping => { "message" => "PPP virtual interface %{interface} - user: %{username} aaa authentication started" }
			id => "msgParserId502"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId503
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>PPP virtual interface <interface> - user: <username> aaa authentication <disposition>
	else if [logstash][msgparser][id] == "msgParserId503" {
		dissect {
			mapping => { "message" => "PPP virtual interface %{interface} - user: %{username} aaa authentication %{disposition}" }
			id => "msgParserId503"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId504
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:PPTP Tunnel created>PPTP Tunnel created, tunnel_id is <fld1>, remote_peer_ip is <saddr>, ppp_virtual_interface_id is <fld2>, client_dynamic_ip is <daddr>, username is { '<username>' | <username> }, MPPE_key_strength is <fld3>
	else if [logstash][msgparser][id] == "msgParserId504" {
		grok {
			match => { "message" => "^PPTP[\s]+Tunnel[\s]+created,[\s]+tunnel_id[\s]+is[\s]+(?<fld1>[^,]*),[\s]+remote_peer_ip[\s]+is[\s]+(?<saddr>[^,]*),[\s]+ppp_virtual_interface_id[\s]+is[\s]+(?<fld2>[^,]*),[\s]+client_dynamic_ip[\s]+is[\s]+(?<daddr>[^,]*),[\s]+username[\s]+is[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+MPPE_key_strength[\s]+is[\s]+(?<fld3>.*)$" }
			id => "msgParserId504"
			add_field => {
				"level" => "%{level}"
				"action" => "PPTP Tunnel created"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId505
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:PPTP tunnel deleted>PPTP Tunnel { deleted, tunnel_id | deleted tunnel_id } =<fld1>, remote_peer_ip=<saddr>
	else if [logstash][msgparser][id] == "msgParserId505" {
		grok {
			match => { "message" => "^PPTP[\s]+Tunnel[\s]+([\s]*deleted,[\s]+tunnel_id[\s]+|[\s]*deleted[\s]+tunnel_id[\s]+)[\s]+=(?<fld1>[^,]*),[\s]+remote_peer_ip=(?<saddr>.*)$" }
			id => "msgParserId505"
			add_field => {
				"level" => "%{level}"
				"action" => "PPTP tunnel deleted"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId506
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:L2TP tunnel created>L2TP Tunnel created, tunnel_id is <fld1>, remote_peer_ip is <saddr>, ppp_virtual_interface_id is <fld2>, client_dynamic_ip is { <daddr>, | <daddr> } username is { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId506" {
		grok {
			match => { "message" => "^L2TP[\s]+Tunnel[\s]+created,[\s]+tunnel_id[\s]+is[\s]+(?<fld1>[^,]*),[\s]+remote_peer_ip[\s]+is[\s]+(?<saddr>[^,]*),[\s]+ppp_virtual_interface_id[\s]+is[\s]+(?<fld2>[^,]*),[\s]+client_dynamic_ip[\s]+is[\s]+([\s]*(?<daddr>[^,]*),[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)[\s]+username[\s]+is[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId506"
			add_field => {
				"level" => "%{level}"
				"action" => "L2TP tunnel created"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId507
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:L2TP tunnel deleted>L2TP Tunnel { deleted, tunnel_id | deleted tunnel_id } = <fld1>, remote_peer_ip =<saddr>
	else if [logstash][msgparser][id] == "msgParserId507" {
		grok {
			match => { "message" => "^L2TP[\s]+Tunnel[\s]+([\s]*deleted,[\s]+tunnel_id[\s]+|[\s]*deleted[\s]+tunnel_id[\s]+)[\s]+=[\s]+(?<fld1>[^,]*),[\s]+remote_peer_ip[\s]+=(?<saddr>.*)$" }
			id => "msgParserId507"
			add_field => {
				"level" => "%{level}"
				"action" => "L2TP tunnel deleted"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId508
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:PPTP tunnel created>Built PPTP { Tunnel | tunnel } at <interface>, tunnel-id = <fld1>, remote-peer = <saddr>, virtual-interface = <vsys>, client-dynamic-ip = <daddr>, username = { '<username>' | <username> }, MPPE-key-strength = <fld2>
	else if [logstash][msgparser][id] == "msgParserId508" {
		grok {
			match => { "message" => "^Built[\s]+PPTP[\s]+([\s]*Tunnel[\s]+|[\s]*tunnel[\s]+)[\s]+at[\s]+(?<interface>[^,]*),[\s]+tunnel\-id[\s]+=[\s]+(?<fld1>[^,]*),[\s]+remote\-peer[\s]+=[\s]+(?<saddr>[^,]*),[\s]+virtual\-interface[\s]+=[\s]+(?<vsys>[^,]*),[\s]+client\-dynamic\-ip[\s]+=[\s]+(?<daddr>[^,]*),[\s]+username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+MPPE\-key\-strength[\s]+=[\s]+(?<fld2>.*)$" }
			id => "msgParserId508"
			add_field => {
				"level" => "%{level}"
				"action" => "PPTP tunnel created"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId509
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Teardown PPPOE tunnel>Teardown PPPOE { Tunnel | tunnel } at <interface>, tunnel-id = <fld1>, remote-peer = <saddr>
	else if [logstash][msgparser][id] == "msgParserId509" {
		grok {
			match => { "message" => "^Teardown[\s]+PPPOE[\s]+([\s]*Tunnel[\s]+|[\s]*tunnel[\s]+)[\s]+at[\s]+(?<interface>[^,]*),[\s]+tunnel\-id[\s]+=[\s]+(?<fld1>[^,]*),[\s]+remote\-peer[\s]+=[\s]+(?<saddr>.*)$" }
			id => "msgParserId509"
			add_field => {
				"level" => "%{level}"
				"action" => "Teardown PPPOE tunnel"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId510
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>DHCP client interface <interface>:<info> 
	else if [logstash][msgparser][id] == "msgParserId510" {
		dissect {
			mapping => { "message" => "DHCP client interface %{interface}:%{info}" }
			id => "msgParserId510"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId511
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>HTTP daemon interface <interface>: connection denied from <hostip>
	else if [logstash][msgparser][id] == "msgParserId511" {
		dissect {
			mapping => { "message" => "HTTP daemon interface %{interface}: connection denied from %{hostip}" }
			id => "msgParserId511"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId512
	# line in RSA: <@ec_subject:User><@ec_activity:Logon><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Login failed><service> daemon: Login { failed | failure } from <saddr> for user { "<username>" | '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId512" {
		grok {
			match => { "message" => "^(?<service>[^\s]*)[\s]+daemon:[\s]+Login[\s]+([\s]*failed[\s]+|[\s]*failure[\s]+)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*\"(?<username>[^\"]*)\"[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId512"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Login failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "605004" {
		# MESSAGE 605004
		# line in RSA: <@ec_subject:User><@ec_activity:Logon><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Login denied> Login denied from <saddr>/<sport> to <dinterface>:<daddr>/<service> for user { "<username>" | '<username>' | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Login[\s]+denied[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<service>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*\"(?<username>[^\"]*)\"[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-605004"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Login denied"
					"[event][id]" => "605004"
					"[rsa][message][id1]" => "605004"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 605004:01
		# line in RSA: <@ec_subject:User><@ec_activity:Logon><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><action> for user { "<username>" | '<username>' | <username> } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<action>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*\"(?<username>[^\"]*)\"[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+$" }
				id => "message-605004:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
					"[event][id]" => "605004:01"
					"[rsa][message][id1]" => "605004:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "605005" {
		# MESSAGE 605005
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Login permitted> Login permitted from <saddr>/<sport> to <dinterface>:<daddr>/<service> for user { <<<username>> | "<username>" | '<username>' | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Login[\s]+permitted[\s]+from[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+to[\s]+(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<service>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*\"(?<username>[^\"]*)\"[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-605005"
				add_field => {
				"level" => "%{level}"
				"action" => "Login permitted"
					"[event][id]" => "605005"
					"[rsa][message][id1]" => "605005"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 605005:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><result> for user { <<<username>> | "<username>" | '<username>' | <username> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<result>[^\s]*)[\s]+for[\s]+user[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*\"(?<username>[^\"]*)\"[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
				id => "message-605005:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "605005:01"
					"[rsa][message][id1]" => "605005:01"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId517
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ PDM | ASDM } session number <sessionid> from <hostip> started
	else if [logstash][msgparser][id] == "msgParserId517" {
		grok {
			match => { "message" => "^([\s]*PDM[\s]+|[\s]*ASDM[\s]+)[\s]+session[\s]+number[\s]+(?<sessionid>[^\s]*)[\s]+from[\s]+(?<hostip>[^\s]*)[\s]+started$" }
			id => "msgParserId517"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId518
	# line in RSA: <@ec_subject:NetworkComm><@ec_activity:Stop><@ec_theme:Communication><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ PDM | ASDM } session number <sessionid> from <hostip> ended
	else if [logstash][msgparser][id] == "msgParserId518" {
		grok {
			match => { "message" => "^([\s]*PDM[\s]+|[\s]*ASDM[\s]+)[\s]+session[\s]+number[\s]+(?<sessionid>[^\s]*)[\s]+from[\s]+(?<hostip>[^\s]*)[\s]+ended$" }
			id => "msgParserId518"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"ec_theme" => "Communication"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "606003" {
		# MESSAGE 606003
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>ASDM logging session number <sessionid> from <hostip> started <fld1> session ID assigned
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ASDM logging session number %{sessionid} from %{hostip} started %{fld1} session ID assigned" }
				id => "message-606003"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "606003"
					"[rsa][message][id1]" => "606003"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 606003:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>ASDM logging session number <sessionid> from <hostip> started
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ASDM logging session number %{sessionid} from %{hostip} started" }
				id => "message-606003:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "606003:01"
					"[rsa][message][id1]" => "606003:01"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId521
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>ASDM logging session number <sessionid> from <hostip> ended
	else if [logstash][msgparser][id] == "msgParserId521" {
		dissect {
			mapping => { "message" => "ASDM logging session number %{sessionid} from %{hostip} ended" }
			id => "msgParserId521"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "607001" {
		# MESSAGE 607001
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Pre-allocate SIP <fld1> secondary channel for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr> from <info> message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Pre-allocate SIP %{fld1} secondary channel for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr} from %{info} message" }
				id => "message-607001"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "607001"
					"[rsa][message][id1]" => "607001"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 607001:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Pre-allocate SIP <fld1> secondary channel for <sinterface>:<saddr> to <dinterface>:<daddr>/<dport> from <info> message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Pre-allocate SIP %{fld1} secondary channel for %{sinterface}:%{saddr} to %{dinterface}:%{daddr}/%{dport} from %{info} message" }
				id => "message-607001:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "607001:01"
					"[rsa][message][id1]" => "607001:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "608001" {
		# MESSAGE 608001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Pre-allocate Skinny <fld1> secondary channel for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr> from <info> message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Pre-allocate Skinny %{fld1} secondary channel for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr} from %{info} message" }
				id => "message-608001:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "608001:01"
					"[rsa][message][id1]" => "608001:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 608001
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Pre-allocate Skinny <fld1> secondary channel for <sinterface>:<saddr> to <dinterface>:<daddr>/<dport> from <info> message
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Pre-allocate Skinny %{fld1} secondary channel for %{sinterface}:%{saddr} to %{dinterface}:%{daddr}/%{dport} from %{info} message" }
				id => "message-608001"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "608001"
					"[rsa][message][id1]" => "608001"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId526
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Built local-host <interface>:<hostip>
	else if [logstash][msgparser][id] == "msgParserId526" {
		dissect {
			mapping => { "message" => "Built local-host %{interface}:%{hostip}" }
			id => "msgParserId526"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "609002" {
		# MESSAGE 609002:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Teardown connection>Teardown local-host <interface>:<hostip> duration <duration>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown local-host %{interface}:%{hostip} duration %{duration}" }
				id => "message-609002:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Teardown connection"
					"[event][id]" => "609002:01"
					"[rsa][message][id1]" => "609002:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 609002
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Teardown localhost <interface>:<hostip> duration <duration>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown localhost %{interface}:%{hostip} duration %{duration}" }
				id => "message-609002"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "609002"
					"[rsa][message][id1]" => "609002"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId529
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Packet denied><service> daemon interface <interface>: Packet denied from <hostip>
	else if [logstash][msgparser][id] == "msgParserId529" {
		dissect {
			mapping => { "message" => "%{service} daemon interface %{interface}: Packet denied from %{hostip}" }
			id => "msgParserId529"
			add_field => {
				"level" => "%{level}"
				"action" => "Packet denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId530
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Authentication failed><service> daemon interface <interface>: Authentication failed for packet from <hostip>
	else if [logstash][msgparser][id] == "msgParserId530" {
		dissect {
			mapping => { "message" => "%{service} daemon interface %{interface}: Authentication failed for packet from %{hostip}" }
			id => "msgParserId530"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Authentication failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId531
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Authorization { failed | failure }: Cmd: <action> Cmdtype: <fld1>
	else if [logstash][msgparser][id] == "msgParserId531" {
		grok {
			match => { "message" => "^Authorization[\s]+([\s]*failed[\s]+|[\s]*failure[\s]+):[\s]+Cmd:[\s]+(?<action>[^\s]*)[\s]+Cmdtype:[\s]+(?<fld1>.*)$" }
			id => "msgParserId531"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId532
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:User authentication succeeded>User authentication succeeded: Uname: { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId532" {
		grok {
			match => { "message" => "^User[\s]+authentication[\s]+succeeded:[\s]+Uname:[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId532"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "User authentication succeeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId533
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:User Authentication failed>User authentication failed: Uname: { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId533" {
		grok {
			match => { "message" => "^User[\s]+authentication[\s]+failed:[\s]+Uname:[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId533"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "User Authentication failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId534
	# line in RSA: <@ec_subject:User><@ec_activity:Logoff><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:User logged out> User logged out: Uname: { '<username>' | <username> }
	else if [logstash][msgparser][id] == "msgParserId534" {
		grok {
			match => { "message" => "^[\s]*User[\s]+logged[\s]+out:[\s]+Uname:[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)$" }
			id => "msgParserId534"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"level" => "%{level}"
				"action" => "User logged out"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId535
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>VPNClient: NAT configured for Client Mode with no split <space> tunneling: NAT addr: <stransaddr><@msg:*PARMVAL($MSG)><@action:NAT configured>
	else if [logstash][msgparser][id] == "msgParserId535" {
		dissect {
			mapping => { "message" => "VPNClient: NAT configured for Client Mode with no split %{space} tunneling: NAT addr: %{stransaddr}" }
			id => "msgParserId535"
			add_field => {
				"level" => "%{level}"
				"action" => "NAT configured"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId536
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>VPNClient: NAT exemption configured for Network Extension Mode with no split tunneling<@msg:*PARMVAL($MSG)><@action:NAT exemption configured>
	else if [logstash][msgparser][id] == "msgParserId536" {
		dissect {
			mapping => { "message" => "VPNClient: NAT exemption configured for Network Extension Mode with no split tunneling" }
			id => "msgParserId536"
			add_field => {
				"level" => "%{level}"
				"action" => "NAT exemption configured"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId537
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>VPNClient: NAT configured for Client Mode with split tunneling: NAT addr: <stransaddr> Split Tunnel Networks: <@msg:*PARMVAL($MSG)><@action:NAT configured>
	else if [logstash][msgparser][id] == "msgParserId537" {
		dissect {
			mapping => { "message" => "VPNClient: NAT configured for Client Mode with split tunneling: NAT addr: %{stransaddr} Split Tunnel Networks:" }
			id => "msgParserId537"
			add_field => {
				"level" => "%{level}"
				"action" => "NAT configured"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId538
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>VPNClient: NAT exemption configured for Network Extension Mode with split tunneling: Split Tunnel Networks: <@msg:*PARMVAL($MSG)><@action:NAT exemption configured>
	else if [logstash][msgparser][id] == "msgParserId538" {
		dissect {
			mapping => { "message" => "VPNClient: NAT exemption configured for Network Extension Mode with split tunneling: Split Tunnel Networks:" }
			id => "msgParserId538"
			add_field => {
				"level" => "%{level}"
				"action" => "NAT exemption configured"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId539
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>VPNClient: DHCP Policy installed: <@msg:*PARMVAL($MSG)><@action:Policy installed>
	else if [logstash][msgparser][id] == "msgParserId539" {
		dissect {
			mapping => { "message" => "VPNClient: DHCP Policy installed:" }
			id => "msgParserId539"
			add_field => {
				"level" => "%{level}"
				"action" => "Policy installed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId540
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>VPNClient: Perfect Forward Secrecy Policy installed<@msg:*PARMVAL($MSG)><@action:Policy installed>
	else if [logstash][msgparser][id] == "msgParserId540" {
		dissect {
			mapping => { "message" => "VPNClient: Perfect Forward Secrecy Policy installed" }
			id => "msgParserId540"
			add_field => {
				"level" => "%{level}"
				"action" => "Policy installed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId541
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>VPNClient: Head end : <hostip>
	else if [logstash][msgparser][id] == "msgParserId541" {
		dissect {
			mapping => { "message" => "VPNClient: Head end : %{hostip}" }
			id => "msgParserId541"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId542
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>VPNClient: Split DNS Policy installed: List of domains: <@msg:*PARMVAL($MSG)><@action:Policy installed><@action:Policy installed>
	else if [logstash][msgparser][id] == "msgParserId542" {
		dissect {
			mapping => { "message" => "VPNClient: Split DNS Policy installed: List of domains:" }
			id => "msgParserId542"
			add_field => {
				"level" => "%{level}"
				"action" => "Policy installed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId543
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>VPNClient: Disconnecting from head end and uninstalling previously downloaded policy: Head End : <hostip><@msg:*PARMVAL($MSG)><@action:head end disconnect>
	else if [logstash][msgparser][id] == "msgParserId543" {
		dissect {
			mapping => { "message" => "VPNClient: Disconnecting from head end and uninstalling previously downloaded policy: Head End : %{hostip}" }
			id => "msgParserId543"
			add_field => {
				"level" => "%{level}"
				"action" => "head end disconnect"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId544
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:XAUTH Succeeded>VPNClient: XAUTH Succeeded: Peer: <hostip>
	else if [logstash][msgparser][id] == "msgParserId544" {
		dissect {
			mapping => { "message" => "VPNClient: XAUTH Succeeded: Peer: %{hostip}" }
			id => "msgParserId544"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "XAUTH Succeeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId545
	# line in RSA: <@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>VPNClient: XAUTH Failed: Peer: <hostip><@action:XAUTH failed>
	else if [logstash][msgparser][id] == "msgParserId545" {
		dissect {
			mapping => { "message" => "VPNClient: XAUTH Failed: Peer: %{hostip}" }
			id => "msgParserId545"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "XAUTH failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId546
	# line in RSA: <@ec_activity:Enable><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId546" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId546"
			add_field => {
				"ec_activity" => "Enable"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId547
	# line in RSA: <@ec_activity:Disable><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId547" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId547"
			add_field => {
				"ec_activity" => "Disable"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId548
	# line in RSA: <@ec_activity:Modify><@ec_theme:Configuration><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId548" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId548"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId549
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Auto Update failed:{ '<username>' | <username> }, version:<version>, reason:<result>
	else if [logstash][msgparser][id] == "msgParserId549" {
		grok {
			match => { "message" => "^Auto[\s]+Update[\s]+failed:([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+version:(?<version>[^,]*),[\s]+reason:(?<result>.*)$" }
			id => "msgParserId549"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId550
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Auto Update failed to contact:<url>, reason:<result> 
	else if [logstash][msgparser][id] == "msgParserId550" {
		dissect {
			mapping => { "message" => "Auto Update failed to contact:%{url}, reason:%{result}" }
			id => "msgParserId550"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId551
	# line in RSA: <@ec_theme:Configuration><@ec_activity:Modify><@ec_subject:Configuration><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><hostip> changed from area <fld1> to area <fld2>
	else if [logstash][msgparser][id] == "msgParserId551" {
		dissect {
			mapping => { "message" => "%{hostip} changed from area %{fld1} to area %{fld2}" }
			id => "msgParserId551"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Modify"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "616001" {
		# MESSAGE 616001:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Pre-allocate connection>Pre-allocate MGCP <fld1> connection for <sinterface>:<saddr> to <dinterface>:<daddr>/<dport> from <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Pre-allocate MGCP %{fld1} connection for %{sinterface}:%{saddr} to %{dinterface}:%{daddr}/%{dport} from %{fld2}" }
				id => "message-616001:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Pre-allocate connection"
					"[event][id]" => "616001:01"
					"[rsa][message][id1]" => "616001:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 616001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-616001"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "616001"
					"[rsa][message][id1]" => "616001"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId553
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:GTP version not accepted><@msg:*PARMVAL($MSG)>GTPv version <fld1> from <sinterface>:<saddr>/<sport> not accepted by <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId553" {
		dissect {
			mapping => { "message" => "GTPv version %{fld1} from %{sinterface}:%{saddr}/%{sport} not accepted by %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId553"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "GTP version not accepted"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "617002" {
		# MESSAGE 617002
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Removing v1 { primary | secondary } PDP Context with TID <fld1> from GGSN <fld2> and SGSN <fld3>, Reason: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Removing[\s]+v1[\s]+([\s]*primary[\s]+|[\s]*secondary[\s]+)[\s]+PDP[\s]+Context[\s]+with[\s]+TID[\s]+(?<fld1>[^\s]*)[\s]+from[\s]+GGSN[\s]+(?<fld2>[^\s]*)[\s]+and[\s]+SGSN[\s]+(?<fld3>[^,]*),[\s]+Reason:[\s]+(?<event_description>.*)$" }
				id => "message-617002"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "617002"
					"[rsa][message][id1]" => "617002"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 617002:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Removing v1 PDP Context with TID <fld1> from GGSN <fld2> and SGSN <fld3>, Reason: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Removing v1 PDP Context with TID %{fld1} from GGSN %{fld2} and SGSN %{fld3}, Reason: %{event_description}" }
				id => "message-617002:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "617002:01"
					"[rsa][message][id1]" => "617002:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId556
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:GTP tunnel created>GTP Tunnel created from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId556" {
		dissect {
			mapping => { "message" => "GTP Tunnel created from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId556"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "GTP tunnel created"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId557
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:GTP connection created> GTP connection created for response from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId557" {
		dissect {
			mapping => { "message" => "GTP connection created for response from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId557"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "GTP connection created"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "620001" {
		# MESSAGE 620001:01
		# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Pre-allocate connection>Pre-allocate CTIQBE { RTP | RTCP } secondary channel for <sinterface>:{ <saddr>/<sport> | <saddr> } to <dinterface>:{ <daddr>/<dport> | <daddr> } from <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Pre\-allocate[\s]+CTIQBE[\s]+([\s]*RTP[\s]+|[\s]*RTCP[\s]+)[\s]+secondary[\s]+channel[\s]+for[\s]+(?<sinterface>[^:]*):([\s]*(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+to[\s]+(?<dinterface>[^:]*):([\s]*(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)[\s]+from[\s]+(?<fld1>.*)$" }
				id => "message-620001:01"
				add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Pre-allocate connection"
					"[event][id]" => "620001:01"
					"[rsa][message][id1]" => "620001:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 620001
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-620001"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "620001"
					"[rsa][message][id1]" => "620001"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "620002" {
		# MESSAGE 620002:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Unsupported CTIQBE version: <fld1>: from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unsupported CTIQBE version: %{fld1}: from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
				id => "message-620002:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "620002:01"
					"[rsa][message][id1]" => "620002:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 620002
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-620002"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "620002"
					"[rsa][message][id1]" => "620002"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702201" {
		# MESSAGE 702201:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 delete received>ISAKMP Phase 1 { deleted | delete } received (local <saddr> (initiator), remote <daddr>)<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+([\s]*deleted[\s]+|[\s]*delete[\s]+)[\s]+received[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)$" }
				id => "message-702201:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 delete received"
					"[event][id]" => "702201:01"
					"[rsa][message][id1]" => "702201:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702201
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 delete received>ISAKMP Phase 1 { deleted | delete } received (local <daddr> (responder), remote <saddr>)<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+([\s]*deleted[\s]+|[\s]*delete[\s]+)[\s]+received[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+remote[\s]+(?<saddr>[^\)]*)\)$" }
				id => "message-702201"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 delete received"
					"[event][id]" => "702201"
					"[rsa][message][id1]" => "702201"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702202" {
		# MESSAGE 702202:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 delete sent>ISAKMP Phase 1 { deleted | delete } sent (local <saddr> (initiator), remote <daddr>)<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+([\s]*deleted[\s]+|[\s]*delete[\s]+)[\s]+sent[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)$" }
				id => "message-702202:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 delete sent"
					"[event][id]" => "702202:01"
					"[rsa][message][id1]" => "702202:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702202
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 delete sent>ISAKMP Phase 1 { deleted | delete } sent (local <daddr> (responder), remote <saddr>)<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+([\s]*deleted[\s]+|[\s]*delete[\s]+)[\s]+sent[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+remote[\s]+(?<saddr>[^\)]*)\)$" }
				id => "message-702202"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 delete sent"
					"[event][id]" => "702202"
					"[rsa][message][id1]" => "702202"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702203" {
		# MESSAGE 702203:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:DPD timed out>ISAKMP DPD { timed | time } out (local <saddr> (initiator), remote <daddr>)<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+DPD[\s]+([\s]*timed[\s]+|[\s]*time[\s]+)[\s]+out[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)$" }
				id => "message-702203:01"
				add_field => {
				"level" => "%{level}"
				"action" => "DPD timed out"
					"[event][id]" => "702203:01"
					"[rsa][message][id1]" => "702203:01"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702203
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:DPD timed out>ISAKMP DPD { timed | time } out (local <daddr> (responder), remote <saddr>)<@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+DPD[\s]+([\s]*timed[\s]+|[\s]*time[\s]+)[\s]+out[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+remote[\s]+(?<saddr>[^\)]*)\)$" }
				id => "message-702203"
				add_field => {
				"level" => "%{level}"
				"action" => "DPD timed out"
					"[event][id]" => "702203"
					"[rsa][message][id1]" => "702203"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702204" {
		# MESSAGE 702204:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 retransmission>ISAKMP Phase 1 { retransmission | retransmit } (local <saddr> (initiator), remote <daddr>) <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+([\s]*retransmission[\s]+|[\s]*retransmit[\s]+)[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)[\s]+$" }
				id => "message-702204:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 retransmission"
					"[event][id]" => "702204:01"
					"[rsa][message][id1]" => "702204:01"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702204
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 retransmission>ISAKMP Phase 1 { retransmission | retransmit } (local <daddr> (responder), remote <saddr>) <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+([\s]*retransmission[\s]+|[\s]*retransmit[\s]+)[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+remote[\s]+(?<saddr>[^\)]*)\)[\s]+$" }
				id => "message-702204"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 retransmission"
					"[event][id]" => "702204"
					"[rsa][message][id1]" => "702204"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702205" {
		# MESSAGE 702205:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 retransmission>ISAKMP Phase 2 { retransmission | retransmit } (local <saddr> (initiator), remote <daddr>) <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+2[\s]+([\s]*retransmission[\s]+|[\s]*retransmit[\s]+)[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)[\s]+$" }
				id => "message-702205:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 retransmission"
					"[event][id]" => "702205:01"
					"[rsa][message][id1]" => "702205:01"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702205
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 retransmission>ISAKMP Phase 2 { retransmission | retransmit } (local <daddr> (responder), remote <saddr>) <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+2[\s]+([\s]*retransmission[\s]+|[\s]*retransmit[\s]+)[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+remote[\s]+(?<saddr>[^\)]*)\)[\s]+$" }
				id => "message-702205"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 retransmission"
					"[event][id]" => "702205"
					"[rsa][message][id1]" => "702205"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702206" {
		# MESSAGE 702206:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:malformed payload received>ISAKMP { malformed | malform } payload received (local <saddr> (initiator), remote <daddr>) <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+([\s]*malformed[\s]+|[\s]*malform[\s]+)[\s]+payload[\s]+received[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)[\s]+$" }
				id => "message-702206:01"
				add_field => {
				"level" => "%{level}"
				"action" => "malformed payload received"
					"[event][id]" => "702206:01"
					"[rsa][message][id1]" => "702206:01"
					"[event][categoryid]" => "1613030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702206
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:malformed payload received>ISAKMP { malformed | malform } payload received (local <daddr> (responder), remote <saddr>) <@msg:*PARMVAL($MSG)>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+([\s]*malformed[\s]+|[\s]*malform[\s]+)[\s]+payload[\s]+received[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+remote[\s]+(?<saddr>[^\)]*)\)[\s]+$" }
				id => "message-702206"
				add_field => {
				"level" => "%{level}"
				"action" => "malformed payload received"
					"[event][id]" => "702206"
					"[rsa][message][id1]" => "702206"
					"[event][categoryid]" => "1613030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702207" {
		# MESSAGE 702207
		# line in RSA: <@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:duplicate packet detected - initiator> ISAKMP duplicate packet detected (local <saddr> (initiator), { remote <daddr>, message-ID <fld1> | remote <shost> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*ISAKMP[\s]+duplicate[\s]+packet[\s]+detected[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+([\s]*remote[\s]+(?<daddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<shost>[^\s]*)[\s]+)$" }
				id => "message-702207"
				add_field => {
				"level" => "%{level}"
				"action" => "duplicate packet detected - initiator"
					"[event][id]" => "702207"
					"[rsa][message][id1]" => "702207"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702207:01
		# line in RSA: <@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:duplicate packet detected - responder> ISAKMP duplicate packet detected (local <daddr> (responder), { remote <saddr>, message-ID <fld1> | remote <shost> } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*ISAKMP[\s]+duplicate[\s]+packet[\s]+detected[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+([\s]*remote[\s]+(?<saddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<shost>[^\s]*)[\s]+)[\s]+$" }
				id => "message-702207:01"
				add_field => {
				"level" => "%{level}"
				"action" => "duplicate packet detected - responder"
					"[event][id]" => "702207:01"
					"[rsa][message][id1]" => "702207:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702208" {
		# MESSAGE 702208:01
		# line in RSA: <@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 exchange started> ISAKMP Phase 1 exchange { started | start } (local <saddr> (initiator), remote <daddr>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*ISAKMP[\s]+Phase[\s]+1[\s]+exchange[\s]+([\s]*started[\s]+|[\s]*start[\s]+)[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)$" }
				id => "message-702208:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 exchange started"
					"[event][id]" => "702208:01"
					"[rsa][message][id1]" => "702208:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702208
		# line in RSA: <@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 exchange started> ISAKMP Phase 1 exchange start (local <daddr> (responder), remote <saddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISAKMP Phase 1 exchange start (local %{daddr} (responder), remote %{saddr})" }
				id => "message-702208"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 exchange started"
					"[event][id]" => "702208"
					"[rsa][message][id1]" => "702208"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702208:02
		# line in RSA: <@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 exchange started>ISAKMP Phase 1 exchange started (local <daddr> (responder), remote <saddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ISAKMP Phase 1 exchange started (local %{daddr} (responder), remote %{saddr})" }
				id => "message-702208:02"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 exchange started"
					"[event][id]" => "702208:02"
					"[rsa][message][id1]" => "702208:02"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702209" {
		# MESSAGE 702209:01
		# line in RSA: <@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 2 exchange started> ISAKMP Phase 2 exchange { started | start } (local <saddr> (initiator), { remote <daddr>, message-ID <fld1> | remote <daddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*ISAKMP[\s]+Phase[\s]+2[\s]+exchange[\s]+([\s]*started[\s]+|[\s]*start[\s]+)[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+([\s]*remote[\s]+(?<daddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<daddr>[^\s]*)[\s]+)$" }
				id => "message-702209:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 2 exchange started"
					"[event][id]" => "702209:01"
					"[rsa][message][id1]" => "702209:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702209
		# line in RSA: <@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 exchange started>ISAKMP Phase 2 exchange { started | start } (local <daddr> (responder), { remote <saddr>, message-ID <fld1> | remote <saddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+2[\s]+exchange[\s]+([\s]*started[\s]+|[\s]*start[\s]+)[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+([\s]*remote[\s]+(?<saddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<saddr>[^\s]*)[\s]+)$" }
				id => "message-702209"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 exchange started"
					"[event][id]" => "702209"
					"[rsa][message][id1]" => "702209"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702210" {
		# MESSAGE 702210:01
		# line in RSA: <@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 exchange completed>ISAKMP Phase 1 exchange { completed | complete } <saddr> (initiator), remote <daddr>) 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+exchange[\s]+([\s]*completed[\s]+|[\s]*complete[\s]+)[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+remote[\s]+(?<daddr>[^\)]*)\)[\s]+$" }
				id => "message-702210:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 exchange completed"
					"[event][id]" => "702210:01"
					"[rsa][message][id1]" => "702210:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702210
		# line in RSA: <@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 exchange completed> ISAKMP Phase 1 exchange { completed | complete } <daddr> (responder), { remote <saddr>, message-ID <fld1> | remote <saddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*ISAKMP[\s]+Phase[\s]+1[\s]+exchange[\s]+([\s]*completed[\s]+|[\s]*complete[\s]+)[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+([\s]*remote[\s]+(?<saddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<saddr>[^\s]*)[\s]+)$" }
				id => "message-702210"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 exchange completed"
					"[event][id]" => "702210"
					"[rsa][message][id1]" => "702210"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702211" {
		# MESSAGE 702211:01
		# line in RSA: <@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 exchange completed> ISAKMP Phase 2 exchange { completed | complete } <saddr> (initiator), { remote <daddr>, message-ID <fld1> | remote <daddr> } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*ISAKMP[\s]+Phase[\s]+2[\s]+exchange[\s]+([\s]*completed[\s]+|[\s]*complete[\s]+)[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+([\s]*remote[\s]+(?<daddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<daddr>[^\s]*)[\s]+)[\s]+$" }
				id => "message-702211:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 exchange completed"
					"[event][id]" => "702211:01"
					"[rsa][message][id1]" => "702211:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702211
		# line in RSA: <@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 exchange completed>ISAKMP Phase 2 exchange { completed | complete } <daddr> (responder), { remote <saddr>, message-ID <fld1> | remote <saddr> } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+2[\s]+exchange[\s]+([\s]*completed[\s]+|[\s]*complete[\s]+)[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+([\s]*remote[\s]+(?<saddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<saddr>[^\s]*)[\s]+)[\s]+$" }
				id => "message-702211"
				add_field => {
				"level" => "%{level}"
				"action" => "Phase 1 exchange completed"
					"[event][id]" => "702211"
					"[rsa][message][id1]" => "702211"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "702212" {
		# MESSAGE 702212:01
		# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Modify><@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 initiating rekey>ISAKMP Phase 1 { initiating | initiate } rekey (local <saddr> (initiator), { remote <daddr>, message-ID <fld1> | remote <daddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+([\s]*initiating[\s]+|[\s]*initiate[\s]+)[\s]+rekey[\s]+\(local[\s]+(?<saddr>[^\s]*)[\s]+\(initiator\),[\s]+([\s]*remote[\s]+(?<daddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<daddr>[^\s]*)[\s]+)$" }
				id => "message-702212:01"
				add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_activity" => "Modify"
				"level" => "%{level}"
				"action" => "Phase 1 initiating rekey"
					"[event][id]" => "702212:01"
					"[rsa][message][id1]" => "702212:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 702212
		# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Modify><@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Phase 1 initiating rekey>ISAKMP Phase 1 { initiating | initiate } rekey (local <daddr> (responder), { remote <saddr>, message-ID <fld1> | remote <saddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^ISAKMP[\s]+Phase[\s]+1[\s]+([\s]*initiating[\s]+|[\s]*initiate[\s]+)[\s]+rekey[\s]+\(local[\s]+(?<daddr>[^\s]*)[\s]+\(responder\),[\s]+([\s]*remote[\s]+(?<saddr>[^,]*),[\s]+message\-ID[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*remote[\s]+(?<saddr>[^\s]*)[\s]+)$" }
				id => "message-702212"
				add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_activity" => "Modify"
				"level" => "%{level}"
				"action" => "Phase 1 initiating rekey"
					"[event][id]" => "702212"
					"[rsa][message][id1]" => "702212"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId585
	# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Modify><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><service>: An <agent> SA (SPI= <fld1>) between <saddr> and <daddr> { (user=<username>) | (<username>) | '<username>' | <username> } <action>
	else if [logstash][msgparser][id] == "msgParserId585" {
		grok {
			match => { "message" => "^(?<service>[^:]*):[\s]+An[\s]+(?<agent>[^\s]*)[\s]+SA[\s]+\(SPI=[\s]+(?<fld1>[^\)]*)\)[\s]+between[\s]+(?<saddr>[^\s]*)[\s]+and[\s]+(?<daddr>[^\s]*)[\s]+([\s]*\(user=(?<username>[^\)]*)\)[\s]+|[\s]*\((?<username>[^\)]*)\)[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+(?<action>.*)$" }
			id => "msgParserId585"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_activity" => "Modify"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId586
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId586" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId586"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId587
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId587" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId587"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId588
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:Configuration replication failure><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId588" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId588"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"result" => "Configuration replication failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId589
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:Configuration may be out of sync><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId589" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId589"
			add_field => {
				"level" => "%{level}"
				"result" => "Configuration may be out of sync"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId590
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><protocol> access requested from <saddr>/<sport> to <dinterface>:<daddr>/<service><@result:access requested>
	else if [logstash][msgparser][id] == "msgParserId590" {
		dissect {
			mapping => { "message" => "%{protocol} access requested from %{saddr}/%{sport} to %{dinterface}:%{daddr}/%{service}" }
			id => "msgParserId590"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "access requested"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId591
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><protocol> access permitted from <saddr>/<sport> to <dinterface>:<daddr>/<service><@result:access permitted>
	else if [logstash][msgparser][id] == "msgParserId591" {
		dissect {
			mapping => { "message" => "%{protocol} access permitted from %{saddr}/%{sport} to %{dinterface}:%{daddr}/%{service}" }
			id => "msgParserId591"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "access permitted"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId592
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><protocol> access denied by ACL from <saddr>/<sport> to <dinterface>:<daddr>/<service><@action:access denied>
	else if [logstash][msgparser][id] == "msgParserId592" {
		dissect {
			mapping => { "message" => "%{protocol} access denied by ACL from %{saddr}/%{sport} to %{dinterface}:%{daddr}/%{service}" }
			id => "msgParserId592"
			add_field => {
				"level" => "%{level}"
				"action" => "access denied"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId593
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:connection limit exceeded> <protocol> connection limit exceeded from <saddr>/<sport> to <dinterface>:<daddr>/<service>
	else if [logstash][msgparser][id] == "msgParserId593" {
		dissect {
			mapping => { "message" => "%{protocol} connection limit exceeded from %{saddr}/%{sport} to %{dinterface}:%{daddr}/%{service}" }
			id => "msgParserId593"
			add_field => {
				"level" => "%{level}"
				"action" => "connection limit exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId594
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><protocol> request discarded from <saddr>/<sport> to <dinterface>:<daddr>/<service><@action:request discarded>
	else if [logstash][msgparser][id] == "msgParserId594" {
		dissect {
			mapping => { "message" => "%{protocol} request discarded from %{saddr}/%{sport} to %{dinterface}:%{daddr}/%{service}" }
			id => "msgParserId594"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "request discarded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId595
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@inout:*DIRCHK(saddr)><protocol> request discarded from <saddr> to <dinterface>:<daddr><@action:request discarded>
	else if [logstash][msgparser][id] == "msgParserId595" {
		dissect {
			mapping => { "message" => "%{protocol} request discarded from %{saddr} to %{dinterface}:%{daddr}" }
			id => "msgParserId595"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "request discarded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId596
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:keepalive received> NAT-T keepalive received from <saddr>/<sport> to <dinterface>:<daddr>/<dport> 
	else if [logstash][msgparser][id] == "msgParserId596" {
		dissect {
			mapping => { "message" => "NAT-T keepalive received from %{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId596"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "keepalive received"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId597
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <daddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId597" {
		dissect {
			mapping => { "message" => "IP = %{daddr}, %{event_description}" }
			id => "msgParserId597"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId598
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Group = <host>, IP = <daddr>, Unknown identification type, Phase <fld1>, Type <fld2> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId598" {
		dissect {
			mapping => { "message" => "Group = %{host}, IP = %{daddr}, Unknown identification type, Phase %{fld1}, Type %{fld2}" }
			id => "msgParserId598"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId599
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <saddr>, <event_description> payload: <fld1>
	else if [logstash][msgparser][id] == "msgParserId599" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{event_description} payload: %{fld1}" }
			id => "msgParserId599"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId600
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>', IP = <saddr> | Group = <group>, Username = <username>, IP = <saddr> | Group = <group>, IP = <saddr> }, <action>:<info>
	else if [logstash][msgparser][id] == "msgParserId600" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>[^:]*):(?<info>.*)$" }
			id => "msgParserId600"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713025" {
		# MESSAGE 713025
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <action>:<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<action>[^:]*):(?<info>.*)$" }
				id => "message-713025"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713025"
					"[rsa][message][id1]" => "713025"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713025:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, <action>:<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action}:%{info}" }
				id => "message-713025:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713025:01"
					"[rsa][message][id1]" => "713025:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "713034" {
		# MESSAGE 713034
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, Username = { '<username>' | <username> }, IP = <saddr> , <action>:<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+,[\s]+(?<action>[^:]*):(?<info>.*)$" }
				id => "message-713034"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713034"
					"[rsa][message][id1]" => "713034"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713034:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr> , <action>:<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr} , %{action}:%{info}" }
				id => "message-713034:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713034:01"
					"[rsa][message][id1]" => "713034:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "713035" {
		# MESSAGE 713035
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, Username = { '<username>' | <username> }, IP = <saddr> , <action>:<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+,[\s]+(?<action>[^:]*):(?<info>.*)$" }
				id => "message-713035"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713035"
					"[rsa][message][id1]" => "713035"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713035:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr> , <action>:<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr} , %{action}:%{info}" }
				id => "message-713035:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713035:01"
					"[rsa][message][id1]" => "713035:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "713041" {
		# MESSAGE 713041
		# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Modify><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:IKE Initiator New/Rekeying Phase>  { Group = <group>, IP = <saddr> | Username = '<username>', IP = <saddr> | Username = <username>, IP = <saddr> | IP = <saddr> }, IKE Initiator: { Rekeying | New } Phase { 1 | 2 }, Intf <fld1>, IKE Peer <fld2><info>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE 713041:01
		# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Modify><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:IKE Initiator New/Rekeying Phase> IKE Initiator: { Rekeying | New } Phase 2, Intf <fld1>, IKE Peer <fld2><info>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	}
	# PARSER msgParserId607
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>IKE Initiator unable to find policy: Intf <interface>, Src: <saddr>, Dst: <daddr>
	else if [logstash][msgparser][id] == "msgParserId607" {
		dissect {
			mapping => { "message" => "IKE Initiator unable to find policy: Intf %{interface}, Src: %{saddr}, Dst: %{daddr}" }
			id => "msgParserId607"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId608
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Error processing payload>{ Group = <group>, IP = <saddr> | IP = <saddr> }, Error processing payload: Payload ID: <fld1>
	else if [logstash][msgparser][id] == "msgParserId608" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+Error[\s]+processing[\s]+payload:[\s]+Payload[\s]+ID:[\s]+(?<fld1>.*)$" }
			id => "msgParserId608"
			add_field => {
				"level" => "%{level}"
				"action" => "Error processing payload"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId609
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Security negotiation complete>{ Group = <group>, Username = '<username>' | Group = <group>, Username = <username> | Group = <group> }, IP = <saddr>, Security negotiation complete for { LAN-to-LAN Group | User } (<fld1>)  { Initiator | Responder }, Inbound SPI = <src_spi>, Outbound SPI = <dst_spi>
	else if [logstash][msgparser][id] == "msgParserId609" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)'[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Security[\s]+negotiation[\s]+complete[\s]+for[\s]+([\s]*LAN\-to\-LAN[\s]+Group[\s]+|[\s]*User[\s]+)[\s]+\((?<fld1>[^\)]*)\)[\s]+([\s]*Initiator[\s]+|[\s]*Responder[\s]+),[\s]+Inbound[\s]+SPI[\s]+=[\s]+(?<src_spi>[^,]*),[\s]+Outbound[\s]+SPI[\s]+=[\s]+(?<dst_spi>.*)$" }
			id => "msgParserId609"
			add_field => {
				"level" => "%{level}"
				"action" => "Security negotiation complete"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId610
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>' | Group = <group>, Username = <username> | Group = <group> }, IP = <saddr>, <action> for peer <peer>.  Reason: <result><info>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId611
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:User authenticated>Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, User (<fld1>) authenticated
	else if [logstash][msgparser][id] == "msgParserId611" {
		grok {
			match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+User[\s]+\((?<fld1>[^\)]*)\)[\s]+authenticated$" }
			id => "msgParserId611"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "User authenticated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId612
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Tunnel Rejected>Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, Tunnel Rejected: <action>
	else if [logstash][msgparser][id] == "msgParserId612" {
		grok {
			match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Tunnel[\s]+Rejected:[\s]+(?<action>.*)$" }
			id => "msgParserId612"
			add_field => {
				"level" => "%{level}"
				"result" => "Tunnel Rejected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId613
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:no matching crypto map entry>Group = <group>, IP = <saddr> , <action>:<info> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId613" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr} , %{action}:%{info} on interface %{interface}" }
			id => "msgParserId613"
			add_field => {
				"level" => "%{level}"
				"result" => "no matching crypto map entry"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713066" {
		# MESSAGE 713066
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, Username = { '<username>' | <username> }, IKE Remote Peer configured for crypto map: <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IKE[\s]+Remote[\s]+Peer[\s]+configured[\s]+for[\s]+crypto[\s]+map:[\s]+(?<fld1>.*)$" }
				id => "message-713066"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713066"
					"[rsa][message][id1]" => "713066"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713066:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, IKE Remote Peer configured for crypto map: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, IKE Remote Peer configured for crypto map: %{fld1}" }
				id => "message-713066:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713066:01"
					"[rsa][message][id1]" => "713066:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId616
	# line in RSA: <@ec_subject:Message><@ec_activity:Receive><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received non-routine Notify message> Group = <group>, { Username = <username>, IP = <saddr>, | IP = <saddr>, } Received non-routine { Notify | notify } message: { <result> (<info>) | <result> }
	else if [logstash][msgparser][id] == "msgParserId616" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+([\s]*Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+Received[\s]+non\-routine[\s]+([\s]*Notify[\s]+|[\s]*notify[\s]+)[\s]+message:[\s]+([\s]*(?<result>[^\s]*)[\s]+\((?<info>[^\)]*)\)[\s]+|[\s]*(?<result>[^\s]*)[\s]+)$" }
			id => "msgParserId616"
			add_field => {
				"ec_subject" => "Message"
				"ec_activity" => "Receive"
				"level" => "%{level}"
				"action" => "Received non-routine Notify message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId617
	# line in RSA: <@ec_subject:User><@ec_theme:Password><@level:*HDR(level)><@msg:*PARMVAL($MSG)><@action:Password for user > Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, Password for user (<fld1>) too long, <info>
	else if [logstash][msgparser][id] == "msgParserId617" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Password[\s]+for[\s]+user[\s]+\((?<fld1>[^\)]*)\)[\s]+too[\s]+long,[\s]+(?<info>.*)$" }
			id => "msgParserId617"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Password"
				"level" => "%{level}"
				"action" => "Password for user "
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId618
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Rekeying duration changed>Group = <group>, IP = <saddr>, Responder forcing change of <ike> rekeying duration from <fld1> to <fld2> seconds
	else if [logstash][msgparser][id] == "msgParserId618" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Responder forcing change of %{ike} rekeying duration from %{fld1} to %{fld2} seconds" }
			id => "msgParserId618"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Rekeying duration changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId619
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Rekeying duration changed> Group = <group>, IP = <saddr>, <event_description> 
	else if [logstash][msgparser][id] == "msgParserId619" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}" }
			id => "msgParserId619"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Rekeying duration changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713075" {
		# MESSAGE 713075
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr> , <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+,[\s]+(?<event_description>.*)$" }
				id => "message-713075"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713075"
					"[rsa][message][id1]" => "713075"
					"[event][categoryid]" => "1613040200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713075:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr> , <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr} , %{event_description}" }
				id => "message-713075:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713075:01"
					"[rsa][message][id1]" => "713075:01"
					"[event][categoryid]" => "1613040200"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId622
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr>, <event_description> 
	else if [logstash][msgparser][id] == "msgParserId622" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}" }
			id => "msgParserId622"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId623
	# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Modify><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId623" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}" }
			id => "msgParserId623"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_activity" => "Modify"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId624
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>IP = <saddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId624" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{event_description}" }
			id => "msgParserId624"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId625
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received Invalid SPI notify> Group = <group>, Username = <username>, IP = <saddr>, Received Invalid SPI notify (SPI <dst_spi>)!
	else if [logstash][msgparser][id] == "msgParserId625" {
		dissect {
			mapping => { "message" => "Group = %{group}, Username = %{username}, IP = %{saddr}, Received Invalid SPI notify (SPI %{dst_spi})!" }
			id => "msgParserId625"
			add_field => {
				"level" => "%{level}"
				"action" => "Received Invalid SPI notify"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId626
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId626" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}" }
			id => "msgParserId626"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId627
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>' | Group = <group>, Username = <username> | Group = <group>}, IP = <saddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId627" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)'[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*)),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<event_description>.*)$" }
			id => "msgParserId627"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId628
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>IP = <saddr>, Keep-alives configured <fld1> but peer does not support keep-alives (type = <fld2>)
	else if [logstash][msgparser][id] == "msgParserId628" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, Keep-alives configured %{fld1} but peer does not support keep-alives (type = %{fld2})" }
			id => "msgParserId628"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId629
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:IKE lost contact with remote peer deleting connection> Group = <group>, IP = <saddr>, IKE lost contact with remote peer, deleting connection (keepalive type: <fld1>)
	else if [logstash][msgparser][id] == "msgParserId629" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, IKE lost contact with remote peer, deleting connection (keepalive type: %{fld1})" }
			id => "msgParserId629"
			add_field => {
				"level" => "%{level}"
				"action" => "IKE lost contact with remote peer deleting connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId630
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received DPD sequence number> Group = <group>, IP = <saddr>, Received DPD sequence number <fld1> in R_U_THERE
	else if [logstash][msgparser][id] == "msgParserId630" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Received DPD sequence number %{fld1} in R_U_THERE" }
			id => "msgParserId630"
			add_field => {
				"level" => "%{level}"
				"action" => "Received DPD sequence number"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId631
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <@event_description:Xauth required but selected Proposal does not support xauth> Group = <group>, IP = <saddr>, Xauth required but selected Proposal does not support xauth, <fld1>
	else if [logstash][msgparser][id] == "msgParserId631" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Xauth required but selected Proposal does not support xauth, %{fld1}" }
			id => "msgParserId631"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Xauth required but selected Proposal does not support xauth"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713128" {
		# MESSAGE 713128
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Connection Redirected via Load Balancing> Group = <group>, IP = <saddr>, <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}" }
				id => "message-713128"
				add_field => {
				"level" => "%{level}"
				"action" => "Connection Redirected via Load Balancing"
					"[event][id]" => "713128"
					"[rsa][message][id1]" => "713128"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713128:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Connection Redirected via Load Balancing> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-713128:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Connection Redirected via Load Balancing"
					"[event][id]" => "713128:01"
					"[rsa][message][id1]" => "713128:01"
					"[event][categoryid]" => "1805020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId634
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr>, <action> payload type: <fld1>
	else if [logstash][msgparser][id] == "msgParserId634" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action} payload type: %{fld1}" }
			id => "msgParserId634"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId635
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <action>
	else if [logstash][msgparser][id] == "msgParserId635" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<action>.*)$" }
			id => "msgParserId635"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId636
	# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, Mismatch: <event_description>
	else if [logstash][msgparser][id] == "msgParserId636" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Mismatch:[\s]+(?<event_description>.*)$" }
			id => "msgParserId636"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId637
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> {Group = <group>, Username = '<username>' | Group = <group>, Username = <username> | Group = <group>}, IP = <saddr>, <action> [<fld1>]
	else if [logstash][msgparser][id] == "msgParserId637" {
		grok {
			match => { "message" => "^[\s]*(Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)'[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*)),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<action>[^\s]*)[\s]+\[(?<fld1>[^\]]*)\]$" }
			id => "msgParserId637"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713137" {
		# MESSAGE 713137
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <action> [<fld1>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<action>[^\s]*)[\s]+\[(?<fld1>[^\]]*)\]$" }
				id => "message-713137"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713137"
					"[rsa][message][id1]" => "713137"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713137:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr>, <action> refCnt [<fld1>] and tunnelCnt [<fld2>] -- deleting SA!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action} refCnt [%{fld1}] and tunnelCnt [%{fld2}] -- deleting SA!" }
				id => "message-713137:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713137:01"
					"[rsa][message][id1]" => "713137:01"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId640
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>IP = <saddr>, <event_description>: <info>
	else if [logstash][msgparser][id] == "msgParserId640" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{event_description}: %{info}" }
			id => "msgParserId640"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId641
	# line in RSA: <@level:*HDR(level)><@msg:*PARMVAL($MSG)><@event_description:adding static route for address> Group = <group>, Username = <username>, IP = <saddr>, <result>, <info>
	else if [logstash][msgparser][id] == "msgParserId641" {
		dissect {
			mapping => { "message" => "Group = %{group}, Username = %{username}, IP = %{saddr}, %{result}, %{info}" }
			id => "msgParserId641"
			add_field => {
				"level" => "%{level}"
				"event_description" => "adding static route for address"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId642
	# line in RSA: <@level:*HDR(level)><@msg:*PARMVAL($MSG)><@event_description:deleting static route for address> Group = <group>, Username = <username>, IP = <saddr>, <result>, <info>
	else if [logstash][msgparser][id] == "msgParserId642" {
		dissect {
			mapping => { "message" => "Group = %{group}, Username = %{username}, IP = %{saddr}, %{result}, %{info}" }
			id => "msgParserId642"
			add_field => {
				"level" => "%{level}"
				"event_description" => "deleting static route for address"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "713167" {
		# MESSAGE 713167
		# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Remote peer has failed user authentication> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, Remote peer has failed user authentication - <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Remote[\s]+peer[\s]+has[\s]+failed[\s]+user[\s]+authentication[\s]+\-[\s]+(?<info>.*)$" }
				id => "message-713167"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"event_description" => "Remote peer has failed user authentication"
					"[event][id]" => "713167"
					"[rsa][message][id1]" => "713167"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713167:01
		# line in RSA: <@ec_subject:User><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Remote peer has failed user authentication> Group = <group>, IP = <saddr>, Remote peer has failed user authentication - <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, Remote peer has failed user authentication - %{info}" }
				id => "message-713167:01"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Remote peer has failed user authentication"
					"[event][id]" => "713167:01"
					"[rsa][message][id1]" => "713167:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId645
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:IKE received delete message from remote peer>Group = <group>, IP = <saddr>, IKE Received delete for rekeyed SA  <info>
	else if [logstash][msgparser][id] == "msgParserId645" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, IKE Received delete for rekeyed SA  %{info}" }
			id => "msgParserId645"
			add_field => {
				"level" => "%{level}"
				"event_description" => "IKE received delete message from remote peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId646
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:IKE received delete for rekeyed centry> Group = <group>, IP = <saddr>, IKE Received delete for rekeyed centry <space> <info>
	else if [logstash][msgparser][id] == "msgParserId646" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, IKE Received delete for rekeyed centry %{space} %{info}" }
			id => "msgParserId646"
			add_field => {
				"level" => "%{level}"
				"event_description" => "IKE received delete for rekeyed centry"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId647
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { Group = <group>, IP = <saddr> | IP = <saddr> }, <action>
	else if [logstash][msgparser][id] == "msgParserId647" {
		grok {
			match => { "message" => "^[\s]*([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>.*)$" }
			id => "msgParserId647"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId648
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, Client Type: <product>  Client Application Version: <version>
	else if [logstash][msgparser][id] == "msgParserId648" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Client[\s]+Type:[\s]+(?<product>[^\s]*)[\s]+Client[\s]+Application[\s]+Version:[\s]+(?<version>.*)$" }
			id => "msgParserId648"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId649
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>Received packet with missing payload,   Expected payload: <fld1> <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId649" {
		dissect {
			mapping => { "message" => "Received packet with missing payload,   Expected payload: %{fld1}" }
			id => "msgParserId649"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId650
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>', IP = <saddr> | Group = <group>, Username = <username>, IP = <saddr> | Group = <group>, IP = <saddr> }, <action>
	else if [logstash][msgparser][id] == "msgParserId650" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>.*)$" }
			id => "msgParserId650"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId651
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, IP = <saddr>, | IP = <saddr>, } <event_description>
	else if [logstash][msgparser][id] == "msgParserId651" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<event_description>.*)$" }
			id => "msgParserId651"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId652
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <saddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId652" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{event_description}" }
			id => "msgParserId652"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId653
	# line in RSA: <@ec_activity:Create><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId653" {
		grok {
			match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<event_description>.*)$" }
			id => "msgParserId653"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId654
	# line in RSA: <@level:*HDR(level)><@msg:*PARMVAL($MSG)><@event_description:Tunnel Rejected> Group = <group>, IP = <saddr>, Tunnel Rejected: <result>
	else if [logstash][msgparser][id] == "msgParserId654" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Tunnel Rejected: %{result}" }
			id => "msgParserId654"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Tunnel Rejected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId655
	# line in RSA: <@ec_activity:Create><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Adding static router for peer> Group = <group>, IP = <saddr>,<info>
	else if [logstash][msgparser][id] == "msgParserId655" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr},%{info}" }
			id => "msgParserId655"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Adding static router for peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId656
	# line in RSA: <@ec_activity:Delete><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Deleting static router for peer> Group = <group>, IP = <saddr>,<info>
	else if [logstash][msgparser][id] == "msgParserId656" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr},%{info}" }
			id => "msgParserId656"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Deleting static router for peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId657
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, <info>
	else if [logstash][msgparser][id] == "msgParserId657" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{info}" }
			id => "msgParserId657"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId658
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Client allowed> Group = <group>, Username = <username>, IP <saddr>, Rule: <fld1> Client: <fld2> - allowed
	else if [logstash][msgparser][id] == "msgParserId658" {
		dissect {
			mapping => { "message" => "Group = %{group}, Username = %{username}, IP %{saddr}, Rule: %{fld1} Client: %{fld2} - allowed" }
			id => "msgParserId658"
			add_field => {
				"level" => "%{level}"
				"action" => "Client allowed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId659
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:messages enqueued> { Group = <group> IP | IP } = <saddr> Queuing KEY-ACQUIRE messages to be processed when P1 SA is complete
	else if [logstash][msgparser][id] == "msgParserId659" {
		grok {
			match => { "message" => "^[\s]*([\s]*Group[\s]+=[\s]+(?<group>[^\s]*)[\s]+IP[\s]+|[\s]*IP[\s]+)[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+Queuing[\s]+KEY\-ACQUIRE[\s]+messages[\s]+to[\s]+be[\s]+processed[\s]+when[\s]+P1[\s]+SA[\s]+is[\s]+complete$" }
			id => "msgParserId659"
			add_field => {
				"level" => "%{level}"
				"action" => "messages enqueued"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId660
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:pending messages dequeued>Group = <group>, IP = <saddr>, De-queuing KEY-ACQUIRE messages that were left pending
	else if [logstash][msgparser][id] == "msgParserId660" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, De-queuing KEY-ACQUIRE messages that were left pending" }
			id => "msgParserId660"
			add_field => {
				"level" => "%{level}"
				"action" => "pending messages dequeued"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId661
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Static Crypto Map check>Group = <group>, IP = <saddr>, <info>
	else if [logstash][msgparser][id] == "msgParserId661" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{info}" }
			id => "msgParserId661"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Static Crypto Map check"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId662
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Static Crypto Map check>Group = <group>, IP = <saddr>, Static Crypto Map check, map = <fld1>, seq = <fld2>, <info>
	else if [logstash][msgparser][id] == "msgParserId662" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Static Crypto Map check, map = %{fld1}, seq = %{fld2}, %{info}" }
			id => "msgParserId662"
			add_field => {
				"level" => "%{level}"
				"action" => "Static Crypto Map check"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId663
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Static Crypto Map check - no ACL configured> Group = <group>, IP = <saddr>, Static Crypto Map check, map = <fld1>, seq = <fld2>, no ACL configured
	else if [logstash][msgparser][id] == "msgParserId663" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Static Crypto Map check, map = %{fld1}, seq = %{fld2}, no ACL configured" }
			id => "msgParserId663"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Static Crypto Map check - no ACL configured"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId664
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Static Crypto Map check>Group = <group>, IP = <saddr>, Static Crypto Map check, map <fld1>, seq = <fld2> is a successful match
	else if [logstash][msgparser][id] == "msgParserId664" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Static Crypto Map check, map %{fld1}, seq = %{fld2} is a successful match" }
			id => "msgParserId664"
			add_field => {
				"level" => "%{level}"
				"action" => "Static Crypto Map check"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId665
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <saddr>, <action> for peer <fld1>. <fld2> 
	else if [logstash][msgparser][id] == "msgParserId665" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{action} for peer %{fld1}. %{fld2}" }
			id => "msgParserId665"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId666
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, Username = { '<username>' | <username> }, IP = <hostip>, Assigned private IP address <hostid> to remote user
	else if [logstash][msgparser][id] == "msgParserId666" {
		grok {
			match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<hostip>[^,]*),[\s]+Assigned[\s]+private[\s]+IP[\s]+address[\s]+(?<hostid>[^\s]*)[\s]+to[\s]+remote[\s]+user$" }
			id => "msgParserId666"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId667
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Notification to client of update string> Group = <group>, IP = <saddr>, <info>
	else if [logstash][msgparser][id] == "msgParserId667" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{info}" }
			id => "msgParserId667"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Notification to client of update string"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId668
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr>, Internal Error, <event_description>
	else if [logstash][msgparser][id] == "msgParserId668" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Internal Error, %{event_description}" }
			id => "msgParserId668"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId669
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, { Username = '<username>', IP = <saddr> | Username = <username>, IP = <saddr> | IP = <saddr> }, <event_description>, <fld1>
	else if [logstash][msgparser][id] == "msgParserId669" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+([\s]*Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<event_description>[^,]*),[\s]+(?<fld1>.*)$" }
			id => "msgParserId669"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713235" {
		# MESSAGE 713235
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <event_description>. <fld1>  
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<event_description>[^\.]*)\.[\s]+(?<fld1>[^\s]*)[\s]+$" }
				id => "message-713235"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713235"
					"[rsa][message][id1]" => "713235"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713235:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr>, <action>. <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action}. %{fld1}" }
				id => "message-713235:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713235:01"
					"[rsa][message][id1]" => "713235:01"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId672
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:IKE_DECODE Message> { IP = <saddr> | <space> } IKE_DECODE { SENDING | RECEIVED | RESENDING } Message 
	else if [logstash][msgparser][id] == "msgParserId672" {
		grok {
			match => { "message" => "^[\s]*([\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*(?<space>[^\s]*)[\s]+)[\s]+IKE_DECODE[\s]+([\s]*SENDING[\s]+|[\s]*RECEIVED[\s]+|[\s]*RESENDING[\s]+)[\s]+Message[\s]+$" }
			id => "msgParserId672"
			add_field => {
				"level" => "%{level}"
				"action" => "IKE_DECODE Message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId673
	# line in RSA: <@ec_subject:Message><@ec_activity:Receive><@ec_theme:Authentication><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received authentication failure message> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, Received authentication failure message
	else if [logstash][msgparser][id] == "msgParserId673" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Received[\s]+authentication[\s]+failure[\s]+message$" }
			id => "msgParserId673"
			add_field => {
				"ec_subject" => "Message"
				"ec_activity" => "Receive"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Received authentication failure message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId674
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <saddr>, Received <protocol> Aggressive Mode message <fld1> with unknown tunnel group name '<group>'.
	else if [logstash][msgparser][id] == "msgParserId674" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, Received %{protocol} Aggressive Mode message %{fld1} with unknown tunnel group name '%{group}'." }
			id => "msgParserId674"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId675
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Mismatched attribute types for class>  Phase <fld1> failure:  Mismatched attribute types for class <process>:  Rcv'd: <fld2>  Cfg'd: <fld3>
	else if [logstash][msgparser][id] == "msgParserId675" {
		dissect {
			mapping => { "message" => "Phase %{fld1} failure:  Mismatched attribute types for class %{process}:  Rcv'd: %{fld2}  Cfg'd: %{fld3}" }
			id => "msgParserId675"
			add_field => {
				"level" => "%{level}"
				"result" => "Mismatched attribute types for class"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713259" {
		# MESSAGE 713259
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Session is being torn down> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, Session is being torn down. Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Session[\s]+is[\s]+being[\s]+torn[\s]+down\.[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-713259"
				add_field => {
				"level" => "%{level}"
				"action" => "Session is being torn down"
					"[event][id]" => "713259"
					"[rsa][message][id1]" => "713259"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713259:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Session is being torn down> Group = <group>, IP = <saddr>, Session is being torn down. Reason: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, Session is being torn down. Reason: %{result}" }
				id => "message-713259:01"
				add_field => {
				"level" => "%{level}"
				"action" => "Session is being torn down"
					"[event][id]" => "713259:01"
					"[rsa][message][id1]" => "713259:01"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713259:02
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Session is being torn down> Username = { '<username>' | <username> }, IP = <saddr>, Session is being torn down. Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Session[\s]+is[\s]+being[\s]+torn[\s]+down\.[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-713259:02"
				add_field => {
				"level" => "%{level}"
				"action" => "Session is being torn down"
					"[event][id]" => "713259:02"
					"[rsa][message][id1]" => "713259:02"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId679
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>', IP = <saddr> | Group = <group>, Username = <username>, IP = <saddr> | Group = <group>, IP = <saddr> | IP = <saddr> }, <info>(): <event_description>
	else if [logstash][msgparser][id] == "msgParserId679" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<info>[^\(]*)\(\):[\s]+(?<event_description>.*)$" }
			id => "msgParserId679"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713902" {
		# MESSAGE 713902
		# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>', IP = <saddr> | Group = <group>, Username = <username>, IP = <saddr> | IP = <saddr> }, <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>.*)$" }
				id => "message-713902"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
					"[event][id]" => "713902"
					"[rsa][message][id1]" => "713902"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713902:01
		# line in RSA: <@ec_theme:Configuration><@ec_subject:Configuration><@ec_outcome:Error><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>| Username = '<username>' | Username = <username> }, IP = <saddr> , <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*)|[\s]*Username[\s]+=[\s]+'(?<username>[^']*)'[\s]+|[\s]*Username[\s]+=[\s]+(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+,[\s]+(?<action>.*)$" }
				id => "message-713902:01"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_subject" => "Configuration"
				"ec_outcome" => "Error"
				"level" => "%{level}"
					"[event][id]" => "713902:01"
					"[rsa][message][id1]" => "713902:01"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "713903" {
		# MESSAGE 713903
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr> , <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+,[\s]+(?<action>.*)$" }
				id => "message-713903"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713903"
					"[rsa][message][id1]" => "713903"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713903:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { Group = <group> | Username = '<username>' | Username = <username> }, IP = <saddr> , <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Group[\s]+=[\s]+(?<group>[^\s]*)[\s]+|[\s]*Username[\s]+=[\s]+'(?<username>[^']*)'[\s]+|[\s]*Username[\s]+=[\s]+(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+,[\s]+(?<action>.*)$" }
				id => "message-713903:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713903:01"
					"[rsa][message][id1]" => "713903:01"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713903:02
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <saddr> , <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP = %{saddr} , %{action}" }
				id => "message-713903:02"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713903:02"
					"[rsa][message][id1]" => "713903:02"
					"[event][categoryid]" => "1801010100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713903:03
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Runt ISAKMP packet discarded on Port> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-713903:03"
				add_field => {
				"level" => "%{level}"
				"action" => "Runt ISAKMP packet discarded on Port"
					"[event][id]" => "713903:03"
					"[rsa][message][id1]" => "713903:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId686
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{Group = <group>, Username = <username>, IP = <saddr>,|Group = <group>, IP = <saddr>,|IP = <saddr>,} <event_description>
	else if [logstash][msgparser][id] == "msgParserId686" {
		grok {
			match => { "message" => "^(Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),|Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),|IP[\s]+=[\s]+(?<saddr>[^,]*),)[\s]+(?<event_description>.*)$" }
			id => "msgParserId686"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "713905" {
		# MESSAGE 713905
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<event_description>.*)$" }
				id => "message-713905"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713905"
					"[rsa][message][id1]" => "713905"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713905:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { Group = <group>, IP = <saddr> | IP = <saddr> }, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<event_description>.*)$" }
				id => "message-713905:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713905:01"
					"[rsa][message][id1]" => "713905:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713905:02
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> INFO: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "INFO: %{info}" }
				id => "message-713905:02"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713905:02"
					"[rsa][message][id1]" => "713905:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "713906" {
		# MESSAGE 713906
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>IP = <saddr>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP = %{saddr},%{event_description}" }
				id => "message-713906"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713906"
					"[rsa][message][id1]" => "713906"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 713906:01
		# line in RSA: <@:*SYSVAL($MSGID,$ID1)><@level:*HDR(level)><@msg:*PARMVAL($MSG)> Group = <group>, Username = <username>, IP = <saddr>, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, Username = %{username}, IP = %{saddr}, %{info}" }
				id => "message-713906:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713906:01"
					"[rsa][message][id1]" => "713906:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 713906:02
		# line in RSA: <@level:*HDR(level)><@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-713906:02"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "713906:02"
					"[rsa][message][id1]" => "713906:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId693
	# line in RSA: <@level:*HDR(level)><@msg:*PARMVAL($MSG)><@event_description:OBSOLETE DESCRIPTOR> OBSOLETE DESCRIPTOR - INDEX <info>
	else if [logstash][msgparser][id] == "msgParserId693" {
		dissect {
			mapping => { "message" => "OBSOLETE DESCRIPTOR - INDEX %{info}" }
			id => "msgParserId693"
			add_field => {
				"level" => "%{level}"
				"event_description" => "OBSOLETE DESCRIPTOR"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "714002" {
		# MESSAGE 714002
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, <event_description>: msg id = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}: msg id = %{fld1}" }
				id => "message-714002"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "714002"
					"[rsa][message][id1]" => "714002"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 714002:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:IKE Initiator starting QM> IKE Initiator starting QM: msg id = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE Initiator starting QM: msg id = %{fld1}" }
				id => "message-714002:01"
				add_field => {
				"level" => "%{level}"
				"action" => "IKE Initiator starting QM"
					"[event][id]" => "714002:01"
					"[rsa][message][id1]" => "714002:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId696
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>IP = <saddr>, <action>: msg id = <fld1>
	else if [logstash][msgparser][id] == "msgParserId696" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{action}: msg id = %{fld1}" }
			id => "msgParserId696"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "714004" {
		# MESSAGE 714004
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, <action>: msg id = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action}: msg id = %{fld1}" }
				id => "message-714004"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "714004"
					"[rsa][message][id1]" => "714004"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 714004:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:IKE Initiator sending 1st QM pkt> IKE Initiator sending 1st QM pkt: msg id = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE Initiator sending 1st QM pkt: msg id = %{fld1}" }
				id => "message-714004:01"
				add_field => {
				"level" => "%{level}"
				"event_description" => "IKE Initiator sending 1st QM pkt"
					"[event][id]" => "714004:01"
					"[rsa][message][id1]" => "714004:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId699
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>', IP = <saddr> | Group = <group>, Username = <username>, IP = <saddr> | Group = <group>, IP = <saddr> }, <action>: msg id = <fld1>
	else if [logstash][msgparser][id] == "msgParserId699" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>[^:]*):[\s]+msg[\s]+id[\s]+=[\s]+(?<fld1>.*)$" }
			id => "msgParserId699"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "714006" {
		# MESSAGE 714006
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, <action>: msg id = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action}: msg id = %{fld1}" }
				id => "message-714006"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "714006"
					"[rsa][message][id1]" => "714006"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 714006:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:IKE Initiator sending 3rd QM pkt> IKE Initiator sending 3rd QM pkt: msg id = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE Initiator sending 3rd QM pkt: msg id = %{fld1}" }
				id => "message-714006:01"
				add_field => {
				"level" => "%{level}"
				"action" => "IKE Initiator sending 3rd QM pkt"
					"[event][id]" => "714006:01"
					"[rsa][message][id1]" => "714006:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId701
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Sending initial contact>Group = <group>, IP = <saddr>, IKE Initiator sending Initial Contact
	else if [logstash][msgparser][id] == "msgParserId701" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, IKE Initiator sending Initial Contact" }
			id => "msgParserId701"
			add_field => {
				"level" => "%{level}"
				"action" => "Sending initial contact"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "714011" {
		# MESSAGE 714011
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>', IP = <saddr> | Group = <group>, Username = <username>, IP = <saddr> | Group = <group>, IP = <saddr> | IP = <saddr> }, <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>.*)$" }
				id => "message-714011"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "714011"
					"[rsa][message][id1]" => "714011"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 714011:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { ID_IPV4_ADDR_SUBNET | ID_IPV4_ADDR } ID <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*ID_IPV4_ADDR_SUBNET[\s]+|[\s]*ID_IPV4_ADDR[\s]+)[\s]+ID[\s]+(?<fld1>.*)$" }
				id => "message-714011:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "714011:01"
					"[rsa][message][id1]" => "714011:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "715006" {
		# MESSAGE 715006
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, { Username = '<username>', IP = <saddr>, | Username = <username>, IP = <saddr>, | IP = <saddr>, } <action>: SPI = <dst_spi>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+([\s]*Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<action>[^:]*):[\s]+SPI[\s]+=[\s]+(?<dst_spi>.*)$" }
				id => "message-715006"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715006"
					"[rsa][message][id1]" => "715006"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 715006:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:IKE got SPI from key engine> IKE got SPI from key engine: SPI = <dst_spi>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE got SPI from key engine: SPI = %{dst_spi}" }
				id => "message-715006:01"
				add_field => {
				"level" => "%{level}"
				"event_description" => "IKE got SPI from key engine"
					"[event][id]" => "715006:01"
					"[rsa][message][id1]" => "715006:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "715007" {
		# MESSAGE 715007
		# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Create><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, { Username = '<username>', IP = <saddr>, | Username = <username>, IP = <saddr>, | IP = <saddr>, } <action>: SPI = <dst_spi>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+([\s]*Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<action>[^:]*):[\s]+SPI[\s]+=[\s]+(?<dst_spi>.*)$" }
				id => "message-715007"
				add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
				"level" => "%{level}"
					"[event][id]" => "715007"
					"[rsa][message][id1]" => "715007"
					"[event][categoryid]" => "1801020100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 715007:01
		# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Create><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:IKE got a KEY_ADD msg for SA> IKE got a KEY_ADD msg for SA: SPI = <dst_spi>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IKE got a KEY_ADD msg for SA: SPI = %{dst_spi}" }
				id => "message-715007:01"
				add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"event_description" => "IKE got a KEY_ADD msg for SA"
					"[event][id]" => "715007:01"
					"[rsa][message][id1]" => "715007:01"
					"[event][categoryid]" => "1613050100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "715009" {
		# MESSAGE 715009
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <action>: <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<action>[^:]*):[\s]+(?<info>.*)$" }
				id => "message-715009"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715009"
					"[rsa][message][id1]" => "715009"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 715009:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, IP = <saddr> | IP = <saddr> }, <action>: <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>[^:]*):[\s]+(?<info>.*)$" }
				id => "message-715009:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715009:01"
					"[rsa][message][id1]" => "715009:01"
					"[event][categoryid]" => "1801030100"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId710
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, IKEGetUserAttributes: <action>
	else if [logstash][msgparser][id] == "msgParserId710" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+IKEGetUserAttributes:[\s]+(?<action>.*)$" }
			id => "msgParserId710"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId711
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, construct_cfg_set: <action>
	else if [logstash][msgparser][id] == "msgParserId711" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+construct_cfg_set:[\s]+(?<action>.*)$" }
			id => "msgParserId711"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId712
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, { Username = '<username>', IP = <saddr> | Username = <username>, IP = <saddr> | IP = <saddr> }, <action>
	else if [logstash][msgparser][id] == "msgParserId712" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+([\s]*Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>.*)$" }
			id => "msgParserId712"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId713
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { Group = <group>, Username = '<username>', IP = <saddr> | Group = <group>, Username = <username>, IP = <saddr> | Group = <group>, IP = <saddr> }, <action>
	else if [logstash][msgparser][id] == "msgParserId713" {
		grok {
			match => { "message" => "^[\s]*([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>.*)$" }
			id => "msgParserId713"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId714
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, IP = <saddr>, | IP = <saddr>, } <info>
	else if [logstash][msgparser][id] == "msgParserId714" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<info>.*)$" }
			id => "msgParserId714"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId715
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Rekeying duration changed>Group = <group>, IP = <saddr>, Processing CONNECTED notify (MsgId <fld1>)
	else if [logstash][msgparser][id] == "msgParserId715" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, Processing CONNECTED notify (MsgId %{fld1})" }
			id => "msgParserId715"
			add_field => {
				"level" => "%{level}"
				"action" => "Rekeying duration changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId716
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <saddr>, <info>
	else if [logstash][msgparser][id] == "msgParserId716" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{info}" }
			id => "msgParserId716"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId717
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Rekeying duration changed> IP = <saddr>, Starting IOS keepalive monitor: <duration> sec.
	else if [logstash][msgparser][id] == "msgParserId717" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, Starting IOS keepalive monitor: %{duration} sec." }
			id => "msgParserId717"
			add_field => {
				"level" => "%{level}"
				"event_description" => "Rekeying duration changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId718
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, IP = <saddr>, | IP = <saddr>, } <event_description> (version: <version>, capabilities: <fld1>)
	else if [logstash][msgparser][id] == "msgParserId718" {
		grok {
			match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<event_description>[^\s]*)[\s]+\(version:[\s]+(?<version>[^,]*),[\s]+capabilities:[\s]+(?<fld1>[^\)]*)\)$" }
			id => "msgParserId718"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId719
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <event_description>.
	else if [logstash][msgparser][id] == "msgParserId719" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<event_description>[^\.]*)\.$" }
			id => "msgParserId719"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId720
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, <action> of type <event_description>, <info>
	else if [logstash][msgparser][id] == "msgParserId720" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action} of type %{event_description}, %{info}" }
			id => "msgParserId720"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId687
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId687" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<event_description>.*)$" }
			id => "msgParserId687"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "715046" {
		# MESSAGE 715046:01
		# line in RSA: <@level:*HDR(level)><@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)>{Group = <group>, Username = <username>, IP = <saddr>, |Username = <username>, IP = <saddr>, } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-715046:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715046:01"
					"[rsa][message][id1]" => "715046:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 715046
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, IP = <saddr>, | IP = <saddr>, } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-715046"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715046"
					"[rsa][message][id1]" => "715046"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "715047" {
		# MESSAGE 715047:01
		# line in RSA: <@level:*HDR(level)><@:*SYSVAL($MSGID,$ID1)><@msg:*PARMVAL($MSG)>{Group = <group>, Username = <username>, IP = <saddr>, |Username = <username>, IP = <saddr>, } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-715047:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715047:01"
					"[rsa][message][id1]" => "715047:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 715047
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, IP = <saddr>, | IP = <saddr>, } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-715047"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715047"
					"[rsa][message][id1]" => "715047"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "715049" {
		# MESSAGE 715049:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{Group = <group>, Username = <username>, IP = <saddr>, |Username = <username>, IP = <saddr>, } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-715049:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715049:01"
					"[rsa][message][id1]" => "715049:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 715049
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, IP = <saddr>, | IP = <saddr>, } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-715049"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715049"
					"[rsa][message][id1]" => "715049"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId723
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:IP failed authentication> IP = <saddr>, <event_description> 
	else if [logstash][msgparser][id] == "msgParserId723" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{event_description}" }
			id => "msgParserId723"
			add_field => {
				"level" => "%{level}"
				"action" => "IP failed authentication"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId724
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, MODE_CFG: <action>
	else if [logstash][msgparser][id] == "msgParserId724" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+MODE_CFG:[\s]+(?<action>.*)$" }
			id => "msgParserId724"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId725
	# line in RSA: <@ec_activity:Modify><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Rekeying duration changed>Group = <group>, IP = <saddr>, NAT-Discovery payloads missing.  Aborting NAT-Traversal.
	else if [logstash][msgparser][id] == "msgParserId725" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, NAT-Discovery payloads missing.  Aborting NAT-Traversal." }
			id => "msgParserId725"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Rekeying duration changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "715059" {
		# MESSAGE 715059
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, Username = { '<username>' | <username> }, IP = <saddr>, <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+(?<action>.*)$" }
				id => "message-715059"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715059"
					"[rsa][message][id1]" => "715059"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 715059:01
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Group = <group>, IP = <saddr>, <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action}" }
				id => "message-715059:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "715059:01"
					"[rsa][message][id1]" => "715059:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId727
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <saddr>, <action>. <space> Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId727" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{action}. %{space} Reason: %{result}" }
			id => "msgParserId727"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId728
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IP = <saddr>, <action>. 
	else if [logstash][msgparser][id] == "msgParserId728" {
		dissect {
			mapping => { "message" => "IP = %{saddr}, %{action}." }
			id => "msgParserId728"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId729
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { Username = '<username>', IP = <saddr>, | Username = <username>, IP = <saddr>, | IP = <saddr>, } <action>:<info>
	else if [logstash][msgparser][id] == "msgParserId729" {
		grok {
			match => { "message" => "^[\s]*([\s]*Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+)[\s]+(?<action>[^:]*):(?<info>.*)$" }
			id => "msgParserId729"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId730
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { Group = <group>, IP = <saddr> | Username = <username>, IP = <saddr> | IP = <saddr> }, <action> history (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId730" {
		grok {
			match => { "message" => "^[\s]*([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<action>[^\s]*)[\s]+history[\s]+\((?<fld1>[^\)]*)\)$" }
			id => "msgParserId730"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId731
	# line in RSA: <@ec_activity:Modify><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Rekeying duration changed>Group = <group>, IP = <saddr>, <event_description>.
	else if [logstash][msgparser][id] == "msgParserId731" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}." }
			id => "msgParserId731"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Rekeying duration changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId732
	# line in RSA: <@ec_activity:Modify><@ec_theme:Configuration><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:Rekeying duration changed>Group = <group>, IP = <saddr>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId732" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}" }
			id => "msgParserId732"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"level" => "%{level}"
				"event_description" => "Rekeying duration changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId733
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, <action> of type <fld1> (seq number <fld2>)
	else if [logstash][msgparser][id] == "msgParserId733" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{action} of type %{fld1} (seq number %{fld2})" }
			id => "msgParserId733"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId688
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> { Group = <group>, IP = <saddr> | IP = <saddr> }, <event_description>
	else if [logstash][msgparser][id] == "msgParserId688" {
		grok {
			match => { "message" => "^[\s]*([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+|[\s]*IP[\s]+=[\s]+(?<saddr>[^\s]*)[\s]+),[\s]+(?<event_description>.*)$" }
			id => "msgParserId688"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "715077" {
		# MESSAGE 715077
		# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Modify><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Group = <group>, Username = '<username>', IP = <saddr>, Pitcher: | Group = <group>, Username = <username>, IP = <saddr>, Pitcher: | Group = <group>, IP = <saddr>, Pitcher: } <action>, spi <dst_spi>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+'(?<username>[^']*)',[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Pitcher:[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+Username[\s]+=[\s]+(?<username>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Pitcher:[\s]+|[\s]*Group[\s]+=[\s]+(?<group>[^,]*),[\s]+IP[\s]+=[\s]+(?<saddr>[^,]*),[\s]+Pitcher:[\s]+)[\s]+(?<action>[^,]*),[\s]+spi[\s]+(?<dst_spi>.*)$" }
				id => "message-715077"
				add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_activity" => "Modify"
				"level" => "%{level}"
					"[event][id]" => "715077"
					"[rsa][message][id1]" => "715077"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 715077:01
		# line in RSA: <@ec_theme:Encryption><@ec_subject:CryptoKey><@ec_activity:Modify><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Pitcher: <result>, spi <dst_spi>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Pitcher: %{result}, spi %{dst_spi}" }
				id => "message-715077:01"
				add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "CryptoKey"
				"ec_activity" => "Modify"
				"level" => "%{level}"
					"[event][id]" => "715077:01"
					"[rsa][message][id1]" => "715077:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId736
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group = <group>, IP = <saddr>, <event_description>: <duration> seconds.
	else if [logstash][msgparser][id] == "msgParserId736" {
		dissect {
			mapping => { "message" => "Group = %{group}, IP = %{saddr}, %{event_description}: %{duration} seconds." }
			id => "msgParserId736"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId737
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@event_description:session started>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<saddr>> <network_service> session started
	else if [logstash][msgparser][id] == "msgParserId737" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<saddr>[^>]*)>[\s]+(?<network_service>[^\s]*)[\s]+session[\s]+started$" }
			id => "msgParserId737"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"event_description" => "session started"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId738
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:session terminated>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<saddr>> <network_service> session terminated: <result>
	else if [logstash][msgparser][id] == "msgParserId738" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<saddr>[^>]*)>[\s]+(?<network_service>[^\s]*)[\s]+session[\s]+terminated:[\s]+(?<result>.*)$" }
			id => "msgParserId738"
			add_field => {
				"level" => "%{level}"
				"action" => "session terminated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId739
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:WebVPN access GRANTED>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<saddr>> <network_service> access GRANTED: <url>
	else if [logstash][msgparser][id] == "msgParserId739" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<saddr>[^>]*)>[\s]+(?<network_service>[^\s]*)[\s]+access[\s]+GRANTED:[\s]+(?<url>.*)$" }
			id => "msgParserId739"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "WebVPN access GRANTED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId740
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:access DENIED>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<saddr>> <network_service> access DENIED to specified location: <info>
	else if [logstash][msgparser][id] == "msgParserId740" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<saddr>[^>]*)>[\s]+(?<network_service>[^\s]*)[\s]+access[\s]+DENIED[\s]+to[\s]+specified[\s]+location:[\s]+(?<info>.*)$" }
			id => "msgParserId740"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "access DENIED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId741
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Unable to create session>Group <<<group>> User { <<<username>> | '<username>' | <username> } WebVPN Unable to create session
	else if [logstash][msgparser][id] == "msgParserId741" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+WebVPN[\s]+Unable[\s]+to[\s]+create[\s]+session$" }
			id => "msgParserId741"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Unable to create session"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId742
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Session could not be established>Group <<<group>> User { <<<username>> | '<username>' | <username> } Session could not be established: session limit of maximum_sessions reached
	else if [logstash][msgparser][id] == "msgParserId742" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+Session[\s]+could[\s]+not[\s]+be[\s]+established:[\s]+session[\s]+limit[\s]+of[\s]+maximum_sessions[\s]+reached$" }
			id => "msgParserId742"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Session could not be established"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId743
	# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ Authentication: successful, group = | Group } <<<group>> { User | user = } { <<<username>> | '<username>' | <username> } { IP = | IP } <<<saddr>>{ , Session Type | <space>Authentication: successful, Session Type }: <network_service>
	else if [logstash][msgparser][id] == "msgParserId743" {
		grok {
			match => { "message" => "^([\s]*Authentication:[\s]+successful,[\s]+group[\s]+=[\s]+|[\s]*Group[\s]+)[\s]+<(?<group>[^>]*)>[\s]+([\s]*User[\s]+|[\s]*user[\s]+=[\s]+)[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+([\s]*IP[\s]+=[\s]+|[\s]*IP[\s]+)[\s]+<(?<saddr>[^>]*)>([\s]*,[\s]+Session[\s]+Type[\s]+|[\s]*(?<space>[^A]*)Authentication:[\s]+successful,[\s]+Session[\s]+Type[\s]+):[\s]+(?<network_service>.*)$" }
			id => "msgParserId743"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "716039" {
		# MESSAGE 716039
		# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Authentication: <action>, group = <<<group>> user = { <<<username>> | '<username>' | <username> } IP = << { <saddr> (<info>) | <saddr> } >, Session Type: <network_service>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication:[\s]+(?<action>[^,]*),[\s]+group[\s]+=[\s]+<(?<group>[^>]*)>[\s]+user[\s]+=[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+=[\s]+<[\s]+([\s]*(?<saddr>[^\s]*)[\s]+\((?<info>[^\)]*)\)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+>,[\s]+Session[\s]+Type:[\s]+(?<network_service>.*)$" }
				id => "message-716039"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
					"[event][id]" => "716039"
					"[rsa][message][id1]" => "716039"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 716039:01
		# line in RSA: <@ec_theme:Authentication><@ec_subject:User><@ec_activity:Logon><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Session connection rejected> Group << <group>> User { <<<username>> | '<username>' | <username> } IP << { <saddr> (<info>) | <saddr> } > Authentication:<result> Session Type: <network_service>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Group[\s]+<[\s]+(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<saddr>[^\s]*)[\s]+\((?<info>[^\)]*)\)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+>[\s]+Authentication:(?<result>[^\s]*)[\s]+Session[\s]+Type:[\s]+(?<network_service>.*)$" }
				id => "message-716039:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"action" => "Session connection rejected"
					"[event][id]" => "716039:01"
					"[rsa][message][id1]" => "716039:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId746
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@dclass_counter1_string:HitCount><@result:access-list permit url> access-list <listnum> permit url <url> hit-cnt <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId746" {
		dissect {
			mapping => { "message" => "%{@dclass_counter1_string:HitCount} access-list %{listnum} permit url %{url} hit-cnt %{dclass_counter1}" }
			id => "msgParserId746"
			add_field => {
				"level" => "%{level}"
				"result" => "access-list permit url"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId747
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Java applet started> Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<saddr>> <network_service> Java applet started. <info>.
	else if [logstash][msgparser][id] == "msgParserId747" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<saddr>[^>]*)>[\s]+(?<network_service>[^\s]*)[\s]+Java[\s]+applet[\s]+started\.[\s]+(?<info>[^\.]*)\.$" }
			id => "msgParserId747"
			add_field => {
				"level" => "%{level}"
				"action" => "Java applet started"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId748
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<saddr>> User ACL <<<listnum>> from <fld1> ignored, <info>.
	else if [logstash][msgparser][id] == "msgParserId748" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<saddr>[^>]*)>[\s]+User[\s]+ACL[\s]+<(?<listnum>[^>]*)>[\s]+from[\s]+(?<fld1>[^\s]*)[\s]+ignored,[\s]+(?<info>[^\.]*)\.$" }
			id => "msgParserId748"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId749
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group <fld0> User <username> IP <saddr> <info>
	else if [logstash][msgparser][id] == "msgParserId749" {
		dissect {
			mapping => { "message" => "Group %{fld0} User %{username} IP %{saddr} %{info}" }
			id => "msgParserId749"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId750
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group <<<group>> User <<<username>> IP <<<saddr>> <info>
	else if [logstash][msgparser][id] == "msgParserId750" {
		dissect {
			mapping => { "message" => "Group <%{group}> User <%{username}> IP <%{saddr}> %{info}" }
			id => "msgParserId750"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId751
	# line in RSA: <@ec_theme:Encryption><@ec_subject:Certificate><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><event_description>
	else if [logstash][msgparser][id] == "msgParserId751" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId751"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "Certificate"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId752
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><action>  Issuer: <dn>
	else if [logstash][msgparser][id] == "msgParserId752" {
		dissect {
			mapping => { "message" => "%{action}  Issuer: %{dn}" }
			id => "msgParserId752"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId753
	# line in RSA: <@ec_subject:Certificate><@ec_theme:Configuration><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Certificate successfully validated>Certificate was successfully validated. serial number: <serial_number>, subject name:  <cert_subject>
	else if [logstash][msgparser][id] == "msgParserId753" {
		dissect {
			mapping => { "message" => "Certificate was successfully validated. serial number: %{serial_number}, subject name:  %{cert_subject}" }
			id => "msgParserId753"
			add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "Certificate successfully validated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId754
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Checking CRL from trustpoint: <event_description>
	else if [logstash][msgparser][id] == "msgParserId754" {
		dissect {
			mapping => { "message" => "Checking CRL from trustpoint: %{event_description}" }
			id => "msgParserId754"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId755
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Validating certificate chain>Validating certificate chain containing <fld1> certificate(s)
	else if [logstash][msgparser][id] == "msgParserId755" {
		dissect {
			mapping => { "message" => "Validating certificate chain containing %{fld1} certificate(s)" }
			id => "msgParserId755"
			add_field => {
				"level" => "%{level}"
				"action" => "Validating certificate chain"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId756
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <@action:Name lookup failed during PKI operation.> Name lookup failed for hostname <hostname> during PKI operation.
	else if [logstash][msgparser][id] == "msgParserId756" {
		dissect {
			mapping => { "message" => "Name lookup failed for hostname %{hostname} during PKI operation." }
			id => "msgParserId756"
			add_field => {
				"level" => "%{level}"
				"action" => "Name lookup failed during PKI operation."
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId757
	# line in RSA: <@ec_subject:Certificate><@ec_outcome:Failure><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Certificate chain failed validated>Certificate chain failed validation. <result>
	else if [logstash][msgparser][id] == "msgParserId757" {
		dissect {
			mapping => { "message" => "Certificate chain failed validation. %{result}" }
			id => "msgParserId757"
			add_field => {
				"ec_subject" => "Certificate"
				"ec_outcome" => "Failure"
				"level" => "%{level}"
				"result" => "Certificate chain failed validated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId758
	# line in RSA: <@ec_subject:Certificate><@ec_theme:Configuration><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:Certificate chain successfully validated>Certificate chain was successfully validated <info>
	else if [logstash][msgparser][id] == "msgParserId758" {
		dissect {
			mapping => { "message" => "Certificate chain was successfully validated %{info}" }
			id => "msgParserId758"
			add_field => {
				"ec_subject" => "Certificate"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"result" => "Certificate chain successfully validated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId759
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Identified client certificate>Identified client certificate within certificate chain. serial number: <serial_number>, subject name: <cert_subject>
	else if [logstash][msgparser][id] == "msgParserId759" {
		dissect {
			mapping => { "message" => "Identified client certificate within certificate chain. serial number: %{serial_number}, subject name: %{cert_subject}" }
			id => "msgParserId759"
			add_field => {
				"level" => "%{level}"
				"action" => "Identified client certificate"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId760
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> Looking for a tunnel group match based on certificate maps for peer certificate with serial number: <serial_number>, subject name: <cert_subject>
	else if [logstash][msgparser][id] == "msgParserId760" {
		dissect {
			mapping => { "message" => "Looking for a tunnel group match based on certificate maps for peer certificate with serial number: %{serial_number}, subject name: %{cert_subject}" }
			id => "msgParserId760"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId761
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Tunnel group search using certificate maps failed for peer certificate: serial number: <serial_number>, subject name: <cert_subject> issuer_name: <dn>
	else if [logstash][msgparser][id] == "msgParserId761" {
		dissect {
			mapping => { "message" => "Tunnel group search using certificate maps failed for peer certificate: serial number: %{serial_number}, subject name: %{cert_subject} issuer_name: %{dn}" }
			id => "msgParserId761"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId762
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Sent HELLO response> Sent HELLO response to [<daddr>]
	else if [logstash][msgparser][id] == "msgParserId762" {
		dissect {
			mapping => { "message" => "Sent HELLO response to [%{daddr}]" }
			id => "msgParserId762"
			add_field => {
				"level" => "%{level}"
				"action" => "Sent HELLO response"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId763
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received HELLO request> Received HELLO request from [<saddr>]
	else if [logstash][msgparser][id] == "msgParserId763" {
		dissect {
			mapping => { "message" => "Received HELLO request from [%{saddr}]" }
			id => "msgParserId763"
			add_field => {
				"level" => "%{level}"
				"action" => "Received HELLO request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId764
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received HELLO response> Received HELLO response from [<saddr>]
	else if [logstash][msgparser][id] == "msgParserId764" {
		dissect {
			mapping => { "message" => "Received HELLO response from [%{saddr}]" }
			id => "msgParserId764"
			add_field => {
				"level" => "%{level}"
				"action" => "Received HELLO response"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId765
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Sent KEEPALIVE response> Sent KEEPALIVE response to [<daddr>]
	else if [logstash][msgparser][id] == "msgParserId765" {
		dissect {
			mapping => { "message" => "Sent KEEPALIVE response to [%{daddr}]" }
			id => "msgParserId765"
			add_field => {
				"level" => "%{level}"
				"action" => "Sent KEEPALIVE response"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId766
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received KEEPALIVE request> Received KEEPALIVE request from [<saddr>]
	else if [logstash][msgparser][id] == "msgParserId766" {
		dissect {
			mapping => { "message" => "Received KEEPALIVE request from [%{saddr}]" }
			id => "msgParserId766"
			add_field => {
				"level" => "%{level}"
				"action" => "Received KEEPALIVE request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId767
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Received KEEPALIVE response> Received KEEPALIVE response from [<saddr>]
	else if [logstash][msgparser][id] == "msgParserId767" {
		dissect {
			mapping => { "message" => "Received KEEPALIVE response from [%{saddr}]" }
			id => "msgParserId767"
			add_field => {
				"level" => "%{level}"
				"action" => "Received KEEPALIVE response"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId768
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Send OOS indicator failure> Send OOS indicator failure to [<daddr>]
	else if [logstash][msgparser][id] == "msgParserId768" {
		dissect {
			mapping => { "message" => "Send OOS indicator failure to [%{daddr}]" }
			id => "msgParserId768"
			add_field => {
				"level" => "%{level}"
				"action" => "Send OOS indicator failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId769
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Sent TOPOLOGY indicator failure> Send TOPOLOGY indicator failure to [<daddr>]
	else if [logstash][msgparser][id] == "msgParserId769" {
		dissect {
			mapping => { "message" => "Send TOPOLOGY indicator failure to [%{daddr}]" }
			id => "msgParserId769"
			add_field => {
				"level" => "%{level}"
				"action" => "Sent TOPOLOGY indicator failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId770
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Sent TOPOLOGY indicator> Sent TOPOLOGY indicator to <space> [<daddr>]
	else if [logstash][msgparser][id] == "msgParserId770" {
		dissect {
			mapping => { "message" => "Sent TOPOLOGY indicator to %{space} [%{daddr}]" }
			id => "msgParserId770"
			add_field => {
				"level" => "%{level}"
				"action" => "Sent TOPOLOGY indicator"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId771
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Deleted peer> Deleted peer <space> [<hostip>]
	else if [logstash][msgparser][id] == "msgParserId771" {
		dissect {
			mapping => { "message" => "Deleted peer %{space} [%{hostip}]" }
			id => "msgParserId771"
			add_field => {
				"level" => "%{level}"
				"action" => "Deleted peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId772
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Created peer> Created peer <space>[<hostip>]
	else if [logstash][msgparser][id] == "msgParserId772" {
		dissect {
			mapping => { "message" => "Created peer %{space}[%{hostip}]" }
			id => "msgParserId772"
			add_field => {
				"level" => "%{level}"
				"action" => "Created peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId773
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Create group policy> Create group policy [<policyname>]
	else if [logstash][msgparser][id] == "msgParserId773" {
		dissect {
			mapping => { "message" => "Create group policy [%{policyname}]" }
			id => "msgParserId773"
			add_field => {
				"level" => "%{level}"
				"action" => "Create group policy"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId774
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Created secure tunnel to peer> Created secure tunnel to peer <space> [<hostip>]
	else if [logstash][msgparser][id] == "msgParserId774" {
		dissect {
			mapping => { "message" => "Created secure tunnel to peer %{space} [%{hostip}]" }
			id => "msgParserId774"
			add_field => {
				"level" => "%{level}"
				"action" => "Created secure tunnel to peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId775
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Deleted secure tunnel to peer> Deleted secure tunnel to peer <space> [<hostip>]
	else if [logstash][msgparser][id] == "msgParserId775" {
		dissect {
			mapping => { "message" => "Deleted secure tunnel to peer %{space} [%{hostip}]" }
			id => "msgParserId775"
			add_field => {
				"level" => "%{level}"
				"action" => "Deleted secure tunnel to peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId776
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Deleted Master peer> Deleted Master peer, IP <hostip>
	else if [logstash][msgparser][id] == "msgParserId776" {
		dissect {
			mapping => { "message" => "Deleted Master peer, IP %{hostip}" }
			id => "msgParserId776"
			add_field => {
				"level" => "%{level}"
				"action" => "Deleted Master peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId777
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:State machine return code> State machine return code: <resultcode>, <info>
	else if [logstash][msgparser][id] == "msgParserId777" {
		dissect {
			mapping => { "message" => "State machine return code: %{resultcode}, %{info}" }
			id => "msgParserId777"
			add_field => {
				"level" => "%{level}"
				"action" => "State machine return code"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId778
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:State machine function trace> State machine function trace: state=<fld1>, event=<fld2>, func=<fld3>
	else if [logstash][msgparser][id] == "msgParserId778" {
		dissect {
			mapping => { "message" => "State machine function trace: state=%{fld1}, event=%{fld2}, func=%{fld3}" }
			id => "msgParserId778"
			add_field => {
				"level" => "%{level}"
				"action" => "State machine function trace"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId779
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:thread is awake> <direction> thread is awake (context=<context>).
	else if [logstash][msgparser][id] == "msgParserId779" {
		dissect {
			mapping => { "message" => "%{direction} thread is awake (context=%{context})." }
			id => "msgParserId779"
			add_field => {
				"level" => "%{level}"
				"action" => "thread is awake"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId780
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Start VPN Load Balancing> Start VPN Load Balancing in context <context>.
	else if [logstash][msgparser][id] == "msgParserId780" {
		dissect {
			mapping => { "message" => "Start VPN Load Balancing in context %{context}." }
			id => "msgParserId780"
			add_field => {
				"level" => "%{level}"
				"action" => "Start VPN Load Balancing"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId781
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Becoming slave of Load Balancing> Becoming slave of Load Balancing in context <context>.
	else if [logstash][msgparser][id] == "msgParserId781" {
		dissect {
			mapping => { "message" => "Becoming slave of Load Balancing in context %{context}." }
			id => "msgParserId781"
			add_field => {
				"level" => "%{level}"
				"action" => "Becoming slave of Load Balancing"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId782
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>  (VPN-<context>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId782" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}  (VPN-%{context}) %{event_description}" }
			id => "msgParserId782"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId783
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>  (VPN-<context>) <event_description>.
	else if [logstash][msgparser][id] == "msgParserId783" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}  (VPN-%{context}) %{event_description}." }
			id => "msgParserId783"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId784
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)> (VPN-<context>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId784" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)} (VPN-%{context}) %{event_description}" }
			id => "msgParserId784"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId785
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)> (VPN-<context>) <event_description>.
	else if [logstash][msgparser][id] == "msgParserId785" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)} (VPN-%{context}) %{event_description}." }
			id => "msgParserId785"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId786
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group <group> User <username> IP <saddr> <event_description>
	else if [logstash][msgparser][id] == "msgParserId786" {
		dissect {
			mapping => { "message" => "Group %{group} User %{username} IP %{saddr} %{event_description}" }
			id => "msgParserId786"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId787
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>  (VPN-<context>) <event_description> (function=<fld1>, line=<fld2>).
	else if [logstash][msgparser][id] == "msgParserId787" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}  (VPN-%{context}) %{event_description} (function=%{fld1}, line=%{fld2})." }
			id => "msgParserId787"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId788
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)>(VPN-<context>) Sending <info> to standby unit <@msg:*PARMVAL($MSG)>
	else if [logstash][msgparser][id] == "msgParserId788" {
		dissect {
			mapping => { "message" => "(VPN-%{context}) Sending %{info} to standby unit" }
			id => "msgParserId788"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId789
	# line in RSA: <@msg:*PARMVAL($MSG)><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)> (VPN-<context>) Receiving <info> from active unit
	else if [logstash][msgparser][id] == "msgParserId789" {
		dissect {
			mapping => { "message" => "(VPN-%{context}) Receiving %{info} from active unit" }
			id => "msgParserId789"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId790
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>(VPN-<context>) <event_description>: <info>
	else if [logstash][msgparser][id] == "msgParserId790" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}(VPN-%{context}) %{event_description}: %{info}" }
			id => "msgParserId790"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId791
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)>  (WebVPN-<context>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId791" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)}  (WebVPN-%{context}) %{event_description}" }
			id => "msgParserId791"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId792
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)> (WebVPN-<context>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId792" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)} (WebVPN-%{context}) %{event_description}" }
			id => "msgParserId792"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId793
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@fld61:*PARMVAL(context)> (WebVPN-<context>) <event_description>.
	else if [logstash][msgparser][id] == "msgParserId793" {
		dissect {
			mapping => { "message" => "%{@fld61:*PARMVAL(context)} (WebVPN-%{context}) %{event_description}." }
			id => "msgParserId793"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId794
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:session created><@fld61:*PARMVAL(context)> (WebVPN-<context>) <event_description> user { '<username>' | <username> }, IP <hostip> has been created.
	else if [logstash][msgparser][id] == "msgParserId794" {
		grok {
			match => { "message" => "^(?<@fld61:*PARMVAL(context)>[^\s]*)[\s]+\(WebVPN\-(?<context>[^\)]*)\)[\s]+(?<event_description>[^\s]*)[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+(?<hostip>[^\s]*)[\s]+has[\s]+been[\s]+created\.$" }
			id => "msgParserId794"
			add_field => {
				"level" => "%{level}"
				"action" => "session created"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId795
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:session deleted><@fld61:*PARMVAL(context)> (WebVPN-<context>) <event_description> user { '<username>' | <username> }, IP <hostip> has been deleted.
	else if [logstash][msgparser][id] == "msgParserId795" {
		grok {
			match => { "message" => "^(?<@fld61:*PARMVAL(context)>[^\s]*)[\s]+\(WebVPN\-(?<context>[^\)]*)\)[\s]+(?<event_description>[^\s]*)[\s]+user[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+IP[\s]+(?<hostip>[^\s]*)[\s]+has[\s]+been[\s]+deleted\.$" }
			id => "msgParserId795"
			add_field => {
				"level" => "%{level}"
				"action" => "session deleted"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId796
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>IP  { <hostip> (<fld1>) | <hostip> }  <event_description>.
	else if [logstash][msgparser][id] == "msgParserId796" {
		grok {
			match => { "message" => "^IP[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+(?<event_description>[^\.]*)\.$" }
			id => "msgParserId796"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId797
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group {<<<group>>|<group>} User {<<<username>>|<username>} IP {<<<hostip>>|<hostip>} SVC Message: <info>/<result>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId797" {
		grok {
			match => { "message" => "^Group[\s]+(<(?<group>[^>]*)>|(?<group>[^\s]*))[\s]+User[\s]+(<(?<username>[^>]*)>|(?<username>[^\s]*))[\s]+IP[\s]+(<(?<hostip>[^>]*)>|(?<hostip>[^\s]*))[\s]+SVC[\s]+Message:[\s]+(?<info>[^/]*)/(?<result>[^:]*):[\s]+(?<event_description>.*)$" }
			id => "msgParserId797"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId798
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<hostip>> SVC Message: <info>/NOTICE: <event_description>
	else if [logstash][msgparser][id] == "msgParserId798" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<hostip>[^>]*)>[\s]+SVC[\s]+Message:[\s]+(?<info>[^/]*)/NOTICE:[\s]+(?<event_description>.*)$" }
			id => "msgParserId798"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId799
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:SVC connection established>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>) | <hostip> } > { TCP SVC | UDP SVC | SVC } connection established { without | with } compression
	else if [logstash][msgparser][id] == "msgParserId799" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+([\s]*TCP[\s]+SVC[\s]+|[\s]*UDP[\s]+SVC[\s]+|[\s]*SVC[\s]+)[\s]+connection[\s]+established[\s]+([\s]*without[\s]+|[\s]*with[\s]+)[\s]+compression$" }
			id => "msgParserId799"
			add_field => {
				"level" => "%{level}"
				"action" => "SVC connection established"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId800
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>) | <hostip> } > { TCP SVC | UDP SVC | SVC } connection terminated { without | with } compression
	else if [logstash][msgparser][id] == "msgParserId800" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+([\s]*TCP[\s]+SVC[\s]+|[\s]*UDP[\s]+SVC[\s]+|[\s]*SVC[\s]+)[\s]+connection[\s]+terminated[\s]+([\s]*without[\s]+|[\s]*with[\s]+)[\s]+compression$" }
			id => "msgParserId800"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId801
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>SVC Global Compression Disabled
	else if [logstash][msgparser][id] == "msgParserId801" {
		dissect {
			mapping => { "message" => "SVC Global Compression Disabled" }
			id => "msgParserId801"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId802
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>) | <hostip> } > { TCP SVC | UDP SVC | SVC } decompression history reset
	else if [logstash][msgparser][id] == "msgParserId802" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+([\s]*TCP[\s]+SVC[\s]+|[\s]*UDP[\s]+SVC[\s]+|[\s]*SVC[\s]+)[\s]+decompression[\s]+history[\s]+reset$" }
			id => "msgParserId802"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId803
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Stale SVC connection closed>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<hostip>> Stale SVC connection closed.
	else if [logstash][msgparser][id] == "msgParserId803" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<hostip>[^>]*)>[\s]+Stale[\s]+SVC[\s]+connection[\s]+closed\.$" }
			id => "msgParserId803"
			add_field => {
				"level" => "%{level}"
				"action" => "Stale SVC connection closed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId804
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:SVC Session Termination>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<hostip>> SVC Session Termination:<info>
	else if [logstash][msgparser][id] == "msgParserId804" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<hostip>[^>]*)>[\s]+SVC[\s]+Session[\s]+Termination:(?<info>.*)$" }
			id => "msgParserId804"
			add_field => {
				"level" => "%{level}"
				"action" => "SVC Session Termination"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId805
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:replacing old connection>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<hostip>> New { <protocol> SVC | SVC } connection replacing old connection.
	else if [logstash][msgparser][id] == "msgParserId805" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<hostip>[^>]*)>[\s]+New[\s]+([\s]*(?<protocol>[^\s]*)[\s]+SVC[\s]+|[\s]*SVC[\s]+)[\s]+connection[\s]+replacing[\s]+old[\s]+connection\.$" }
			id => "msgParserId805"
			add_field => {
				"level" => "%{level}"
				"action" => "replacing old connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId806
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:SVC connection established> Group << <group> > User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>) | <hostip> } > First { TCP SVC | UDP SVC | SVC } connection established for SVC session.
	else if [logstash][msgparser][id] == "msgParserId806" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+<[\s]+(?<group>[^\s]*)[\s]+>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+First[\s]+([\s]*TCP[\s]+SVC[\s]+|[\s]*UDP[\s]+SVC[\s]+|[\s]*SVC[\s]+)[\s]+connection[\s]+established[\s]+for[\s]+SVC[\s]+session\.$" }
			id => "msgParserId806"
			add_field => {
				"level" => "%{level}"
				"action" => "SVC connection established"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId807
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:transmitting large packet> Group << <group> > User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>)> | <hostip>> } Received large packet <bytes> (<info>).
	else if [logstash][msgparser][id] == "msgParserId807" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+<[\s]+(?<group>[^\s]*)[\s]+>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)>[\s]+|[\s]*(?<hostip>[^>]*)>[\s]+)[\s]+Received[\s]+large[\s]+packet[\s]+(?<bytes>[^\s]*)[\s]+\((?<info>[^\)]*)\)\.$" }
			id => "msgParserId807"
			add_field => {
				"level" => "%{level}"
				"action" => "transmitting large packet"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId808
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:transmission error transmitting large packet> Group << <group> > User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>)> | <hostip>> } Transmitting large packet <bytes> (<info>) 
	else if [logstash][msgparser][id] == "msgParserId808" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+<[\s]+(?<group>[^\s]*)[\s]+>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)>[\s]+|[\s]*(?<hostip>[^>]*)>[\s]+)[\s]+Transmitting[\s]+large[\s]+packet[\s]+(?<bytes>[^\s]*)[\s]+\((?<info>[^\)]*)\)[\s]+$" }
			id => "msgParserId808"
			add_field => {
				"level" => "%{level}"
				"action" => "transmission error transmitting large packet"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId809
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:closing connection> Group << <group> > User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>) | <hostip> } > SVC closing connection: <info>.
	else if [logstash][msgparser][id] == "msgParserId809" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+<[\s]+(?<group>[^\s]*)[\s]+>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+SVC[\s]+closing[\s]+connection:[\s]+(?<info>[^\.]*)\.$" }
			id => "msgParserId809"
			add_field => {
				"level" => "%{level}"
				"action" => "closing connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId810
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:No IPv6 address available for SVC connection>  TunnelGroup << <fld1> > GroupPolicy << <group> > User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld2>) | <hostip> } > No IPv6 address available for SVC connection
	else if [logstash][msgparser][id] == "msgParserId810" {
		grok {
			match => { "message" => "^[\s]*TunnelGroup[\s]+<[\s]+(?<fld1>[^\s]*)[\s]+>[\s]+GroupPolicy[\s]+<[\s]+(?<group>[^\s]*)[\s]+>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+No[\s]+IPv6[\s]+address[\s]+available[\s]+for[\s]+SVC[\s]+connection$" }
			id => "msgParserId810"
			add_field => {
				"level" => "%{level}"
				"action" => "No IPv6 address available for SVC connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId811
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:DTLS disabled> Group << <group> > User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>) | <hostip> } > DTLS disabled: <info>
	else if [logstash][msgparser][id] == "msgParserId811" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+<[\s]+(?<group>[^\s]*)[\s]+>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+DTLS[\s]+disabled:[\s]+(?<info>.*)$" }
			id => "msgParserId811"
			add_field => {
				"level" => "%{level}"
				"action" => "DTLS disabled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId812
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Session terminated> Group << <group> > User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>) | <hostip> } > Session terminated: <info>
	else if [logstash][msgparser][id] == "msgParserId812" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+<[\s]+(?<group>[^\s]*)[\s]+>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+Session[\s]+terminated:[\s]+(?<info>.*)$" }
			id => "msgParserId812"
			add_field => {
				"level" => "%{level}"
				"action" => "Session terminated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId813
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Session terminated> Group <<<group>> User <<<username>> IP <<<hostip>> Session terminated: <info>
	else if [logstash][msgparser][id] == "msgParserId813" {
		dissect {
			mapping => { "message" => "Group <%{group}> User <%{username}> IP <%{hostip}> Session terminated: %{info}" }
			id => "msgParserId813"
			add_field => {
				"level" => "%{level}"
				"action" => "Session terminated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId814
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:assigned to session> Group << <group> > User { <<<username>> | '<username>' | <username> } IP << { <hostip> (<fld1>) | <hostip> } > Address << <hostid> > assigned to session
	else if [logstash][msgparser][id] == "msgParserId814" {
		grok {
			match => { "message" => "^[\s]*Group[\s]+<[\s]+(?<group>[^\s]*)[\s]+>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<[\s]+([\s]*(?<hostip>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+)[\s]+>[\s]+Address[\s]+<[\s]+(?<hostid>[^\s]*)[\s]+>[\s]+assigned[\s]+to[\s]+session$" }
			id => "msgParserId814"
			add_field => {
				"level" => "%{level}"
				"action" => "assigned to session"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId815
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Group <<<group>> User { <<<username>> | '<username>' | <username> } IP <<<hostip>> Secure Desktop Results: <info>
	else if [logstash][msgparser][id] == "msgParserId815" {
		grok {
			match => { "message" => "^Group[\s]+<(?<group>[^>]*)>[\s]+User[\s]+([\s]*<(?<username>[^>]*)>[\s]+|[\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+IP[\s]+<(?<hostip>[^>]*)>[\s]+Secure[\s]+Desktop[\s]+Results:[\s]+(?<info>.*)$" }
			id => "msgParserId815"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId816
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Starting SSL handshake> Starting SSL handshake with { client | server } <interface>:<hostip>/<network_port> for <version> session.
	else if [logstash][msgparser][id] == "msgParserId816" {
		grok {
			match => { "message" => "^[\s]*Starting[\s]+SSL[\s]+handshake[\s]+with[\s]+([\s]*client[\s]+|[\s]*server[\s]+)[\s]+(?<interface>[^:]*):(?<hostip>[^/]*)/(?<network_port>[^\s]*)[\s]+for[\s]+(?<version>[^\s]*)[\s]+session\.$" }
			id => "msgParserId816"
			add_field => {
				"level" => "%{level}"
				"action" => "Starting SSL handshake"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId817
	# line in RSA: <@ec_theme:Encryption><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Device completed SSL handshake>Device completed SSL handshake with { server | client } <interface>:<hostip>/<network_port>
	else if [logstash][msgparser][id] == "msgParserId817" {
		grok {
			match => { "message" => "^Device[\s]+completed[\s]+SSL[\s]+handshake[\s]+with[\s]+([\s]*server[\s]+|[\s]*client[\s]+)[\s]+(?<interface>[^:]*):(?<hostip>[^/]*)/(?<network_port>.*)$" }
			id => "msgParserId817"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"action" => "Device completed SSL handshake"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId818
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>SSL client <interface>:<hostip>/<network_port> <action>.
	else if [logstash][msgparser][id] == "msgParserId818" {
		dissect {
			mapping => { "message" => "SSL client %{interface}:%{hostip}/%{network_port} %{action}." }
			id => "msgParserId818"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId819
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:SSL server  requesting certificate for authentication><@msg:*PARMVAL($MSG)> SSL server <interface>:<hostip>/<network_port> requesting our device certificate for authentication.
	else if [logstash][msgparser][id] == "msgParserId819" {
		dissect {
			mapping => { "message" => "SSL server %{interface}:%{hostip}/%{network_port} requesting our device certificate for authentication." }
			id => "msgParserId819"
			add_field => {
				"level" => "%{level}"
				"action" => "SSL server  requesting certificate for authentication"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId820
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:Device failed SSL handshake><@msg:*PARMVAL($MSG)> Device failed SSL handshake with <interface>:<hostip>/<network_port>
	else if [logstash][msgparser][id] == "msgParserId820" {
		dissect {
			mapping => { "message" => "Device failed SSL handshake with %{interface}:%{hostip}/%{network_port}" }
			id => "msgParserId820"
			add_field => {
				"level" => "%{level}"
				"action" => "Device failed SSL handshake"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId821
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>SSL session with { server | client } <interface>:<hostip>/<network_port> terminated.
	else if [logstash][msgparser][id] == "msgParserId821" {
		grok {
			match => { "message" => "^SSL[\s]+session[\s]+with[\s]+([\s]*server[\s]+|[\s]*client[\s]+)[\s]+(?<interface>[^:]*):(?<hostip>[^/]*)/(?<network_port>[^\s]*)[\s]+terminated\.$" }
			id => "msgParserId821"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId822
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>SSL client <interface>:<hostip>/<network_port> proposes the following <fld1> cipher(s).
	else if [logstash][msgparser][id] == "msgParserId822" {
		dissect {
			mapping => { "message" => "SSL client %{interface}:%{hostip}/%{network_port} proposes the following %{fld1} cipher(s)." }
			id => "msgParserId822"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId823
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Device proposes cipher(s)> Device proposes <fld1> cipher(s) to server <interface>:<hostip>/<network_port>
	else if [logstash][msgparser][id] == "msgParserId823" {
		dissect {
			mapping => { "message" => "Device proposes %{fld1} cipher(s) to server %{interface}:%{hostip}/%{network_port}" }
			id => "msgParserId823"
			add_field => {
				"level" => "%{level}"
				"action" => "Device proposes cipher(s)"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId824
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Device supports the following <fld1> cipher(s).
	else if [logstash][msgparser][id] == "msgParserId824" {
		dissect {
			mapping => { "message" => "Device supports the following %{fld1} cipher(s)." }
			id => "msgParserId824"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId825
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Cipher[<fld1>] : <action>
	else if [logstash][msgparser][id] == "msgParserId825" {
		dissect {
			mapping => { "message" => "Cipher[%{fld1}] : %{action}" }
			id => "msgParserId825"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId826
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:Device chooses cipher for the SSL session> Device chooses cipher : <fld1> for the SSL session with client <interface>:<hostip>/<network_port>
	else if [logstash][msgparser][id] == "msgParserId826" {
		dissect {
			mapping => { "message" => "Device chooses cipher : %{fld1} for the SSL session with client %{interface}:%{hostip}/%{network_port}" }
			id => "msgParserId826"
			add_field => {
				"level" => "%{level}"
				"action" => "Device chooses cipher for the SSL session"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId827
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@action:SSL Server  choose cipher><@msg:*PARMVAL($MSG)> SSL Server <interface>:<hostip>/<network_port> choose cipher : <info>
	else if [logstash][msgparser][id] == "msgParserId827" {
		dissect {
			mapping => { "message" => "SSL Server %{interface}:%{hostip}/%{network_port} choose cipher : %{info}" }
			id => "msgParserId827"
			add_field => {
				"level" => "%{level}"
				"action" => "SSL Server  choose cipher"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId828
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@action:SSL lib error> SSL lib error. Function: <info> Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId828" {
		dissect {
			mapping => { "message" => "SSL lib error. Function: %{info} Reason: %{result}" }
			id => "msgParserId828"
			add_field => {
				"level" => "%{level}"
				"action" => "SSL lib error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId829
	# line in RSA: <@ec_theme:ALM><@ec_subject:NetworkComm><@ec_outcome:Success><@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>Inspected <im_client> <info> Session between Client <im_userid> and <im_buddyid> Packet flow from <sinterface>:/<saddr>/<sport> to <dinterface>:/<daddr>/<dport> Action: <action> Matched Class <event_description>
	else if [logstash][msgparser][id] == "msgParserId829" {
		dissect {
			mapping => { "message" => "Inspected %{im_client} %{info} Session between Client %{im_userid} and %{im_buddyid} Packet flow from %{sinterface}:/%{saddr}/%{sport} to %{dinterface}:/%{daddr}/%{dport} Action: %{action} Matched Class %{event_description}" }
			id => "msgParserId829"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Success"
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId830
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)><@result:NAC policy added> NAC policy added: name: <<<policyname>> Type: << <info> >
	else if [logstash][msgparser][id] == "msgParserId830" {
		dissect {
			mapping => { "message" => "NAC policy added: name: <%{policyname}> Type: < %{info} >" }
			id => "msgParserId830"
			add_field => {
				"level" => "%{level}"
				"result" => "NAC policy added"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId831
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>[<action>] <info>
	else if [logstash][msgparser][id] == "msgParserId831" {
		dissect {
			mapping => { "message" => "[%{action}] %{info}" }
			id => "msgParserId831"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId832
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)>{ <hostip> is attacking. | <hostip> is targeted. } <info>
	else if [logstash][msgparser][id] == "msgParserId832" {
		grok {
			match => { "message" => "^([\s]*(?<hostip>[^\s]*)[\s]+is[\s]+attacking\.[\s]+|[\s]*(?<hostip>[^\s]*)[\s]+is[\s]+targeted\.[\s]+)[\s]+(?<info>.*)$" }
			id => "msgParserId832"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId833
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@host:*PARMVAL(hostip)><@msg:*PARMVAL($MSG)> Threat-detection adds host <hostip> to shun list
	else if [logstash][msgparser][id] == "msgParserId833" {
		dissect {
			mapping => { "message" => "Threat-detection adds host %{hostip} to shun list" }
			id => "msgParserId833"
			add_field => {
				"level" => "%{level}"
				"host" => "%{hostip}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId834
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@host:*PARMVAL(hostip)><@msg:*PARMVAL($MSG)>Threat-detection removes host <hostip> from shun list
	else if [logstash][msgparser][id] == "msgParserId834" {
		dissect {
			mapping => { "message" => "Threat-detection removes host %{hostip} from shun list" }
			id => "msgParserId834"
			add_field => {
				"level" => "%{level}"
				"host" => "%{hostip}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId835
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <process>: User { '<username>' | <username> }, Addr <hostip>, <result> 
	else if [logstash][msgparser][id] == "msgParserId835" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^:]*):[\s]+User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+Addr[\s]+(?<hostip>[^,]*),[\s]+(?<result>[^\s]*)[\s]+$" }
			id => "msgParserId835"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId836
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <process>: User { '<username>' | <username> }, { Addr <hostip>, | Addr <hostip>: } <result>
	else if [logstash][msgparser][id] == "msgParserId836" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^:]*):[\s]+User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+([\s]*Addr[\s]+(?<hostip>[^,]*),[\s]+|[\s]*Addr[\s]+(?<hostip>[^:]*):[\s]+)[\s]+(?<result>.*)$" }
			id => "msgParserId836"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "734003" {
		# MESSAGE 734003:01
		# line in RSA: <@level:*HDR(level)><@:*SYSVAL($MSGID,$ID1)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <process>: User { '<username>' | <username> }, Addr <hostip>: Session Attribute endpoint.device.hostname="<hostname>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^:]*):[\s]+User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+Addr[\s]+(?<hostip>[^:]*):[\s]+Session[\s]+Attribute[\s]+endpoint\.device\.hostname=\"(?<hostname>[^\"]*)\"$" }
				id => "message-734003:01"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "734003:01"
					"[rsa][message][id1]" => "734003:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 734003:02
		# line in RSA: <@level:*HDR(level)><@:*SYSVAL($MSGID,$ID1)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <process>: User { '<username>' | <username> }, Addr <hostip>: Session Attribute endpoint.device.MAC["<macaddr>"]="<fld2>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^:]*):[\s]+User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+Addr[\s]+(?<hostip>[^:]*):[\s]+Session[\s]+Attribute[\s]+endpoint\.device\.MAC\[\"(?<macaddr>[^\"]*)\"\]=\"(?<fld2>[^\"]*)\"$" }
				id => "message-734003:02"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "734003:02"
					"[rsa][message][id1]" => "734003:02"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 734003:03
		# line in RSA: <@level:*HDR(level)><@:*SYSVAL($MSGID,$ID1)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> <process>: User { '<username>' | <username> }, Addr <hostip>: Session Attribute endpoint.os.version="<version>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^:]*):[\s]+User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+Addr[\s]+(?<hostip>[^:]*):[\s]+Session[\s]+Attribute[\s]+endpoint\.os\.version=\"(?<version>[^\"]*)\"$" }
				id => "message-734003:03"
				add_field => {
				"level" => "%{level}"
					"[event][id]" => "734003:03"
					"[rsa][message][id1]" => "734003:03"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 734003
		# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:Session Attribute assignment><@msg:*PARMVAL($MSG)> <process>: User { '<username>' | <username> }, Addr <hostip>: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^:]*):[\s]+User[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+),[\s]+Addr[\s]+(?<hostip>[^:]*):[\s]+(?<result>.*)$" }
				id => "message-734003"
				add_field => {
				"level" => "%{level}"
				"result" => "Session Attribute assignment"
					"[event][id]" => "734003"
					"[rsa][message][id1]" => "734003"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId841
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:DAP: Processing error><@msg:*PARMVAL($MSG)> DAP: Processing error: Code <resultcode>
	else if [logstash][msgparser][id] == "msgParserId841" {
		dissect {
			mapping => { "message" => "DAP: Processing error: Code %{resultcode}" }
			id => "msgParserId841"
			add_field => {
				"level" => "%{level}"
				"result" => "DAP: Processing error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId842
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:Received message><@msg:*PARMVAL($MSG)> <process>: Received message '<info>'
	else if [logstash][msgparser][id] == "msgParserId842" {
		dissect {
			mapping => { "message" => "%{process}: Received message '%{info}'" }
			id => "msgParserId842"
			add_field => {
				"level" => "%{level}"
				"result" => "Received message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId843
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:DHCP configured><@msg:*PARMVAL($MSG)> <process>: DHCP configured, no viable servers found for tunnel-group '<info>'
	else if [logstash][msgparser][id] == "msgParserId843" {
		dissect {
			mapping => { "message" => "%{process}: DHCP configured, no viable servers found for tunnel-group '%{info}'" }
			id => "msgParserId843"
			add_field => {
				"level" => "%{level}"
				"result" => "DHCP configured"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId844
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:Local pool request succeeded ><@msg:*PARMVAL($MSG)> <process>: Local pool request succeeded for tunnel-group '<info>'
	else if [logstash][msgparser][id] == "msgParserId844" {
		dissect {
			mapping => { "message" => "%{process}: Local pool request succeeded for tunnel-group '%{info}'" }
			id => "msgParserId844"
			add_field => {
				"level" => "%{level}"
				"result" => "Local pool request succeeded "
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId845
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:Freeing local pool address><@msg:*PARMVAL($MSG)> <process>: Freeing local pool address <hostip>
	else if [logstash][msgparser][id] == "msgParserId845" {
		dissect {
			mapping => { "message" => "%{process}: Freeing local pool address %{hostip}" }
			id => "msgParserId845"
			add_field => {
				"level" => "%{level}"
				"result" => "Freeing local pool address"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId846
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@result:Unable to get address from group-policy or tunnel-group><@msg:*PARMVAL($MSG)> <process>: Unable to get address from group-policy or tunnel-group local pools
	else if [logstash][msgparser][id] == "msgParserId846" {
		dissect {
			mapping => { "message" => "%{process}: Unable to get address from group-policy or tunnel-group local pools" }
			id => "msgParserId846"
			add_field => {
				"level" => "%{level}"
				"result" => "Unable to get address from group-policy or tunnel-group"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId847
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IPAA: Client assigned <hostip> from local pool
	else if [logstash][msgparser][id] == "msgParserId847" {
		dissect {
			mapping => { "message" => "IPAA: Client assigned %{hostip} from local pool" }
			id => "msgParserId847"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId848
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IPAA: Added <hostip> to standby
	else if [logstash][msgparser][id] == "msgParserId848" {
		dissect {
			mapping => { "message" => "IPAA: Added %{hostip} to standby" }
			id => "msgParserId848"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId849
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IPAA: Unable to send <hostip> to standby: address in use
	else if [logstash][msgparser][id] == "msgParserId849" {
		dissect {
			mapping => { "message" => "IPAA: Unable to send %{hostip} to standby: address in use" }
			id => "msgParserId849"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId850
	# line in RSA: <@level:*HDR(level)><@event_time:*EVNTTIME($HDR,'%B %F %W %N:%U:%O',month,day,year,time)><@msg:*PARMVAL($MSG)> IPAA: Removed <hostip> from standby
	else if [logstash][msgparser][id] == "msgParserId850" {
		dissect {
			mapping => { "message" => "IPAA: Removed %{hostip} from standby" }
			id => "msgParserId850"
			add_field => {
				"level" => "%{level}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[inout]"
		destination => "[src_zone]"
		dictionary => {
			"1" => "INSIDE"
			"0" => "OUTSIDE"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[inout]"
		destination => "[dst_zone]"
		dictionary => {
			"0" => "INSIDE"
			"1" => "OUTSIDE"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_ciscopixmsg.json"
#			template_name => "_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

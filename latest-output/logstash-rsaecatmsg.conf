# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "rsaecat"
			"[observer][name]" => "RSA ECAT"
			"[observer][type]" => "Anti Virus"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1> <hfld2> <hfld3> <hhostname> CEF:0|EMC|<hproduct>|<hversion>|<messageid>|<hevent_description>|<hseverity>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hfld2} %{hfld3} %{hhostname} CEF:0|EMC|%{hproduct}|%{hversion}|%{messageid}|%{hevent_description}|%{hseverity}|%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1> <hfld2> <hfld3> <hhostname> CEF:0|RSA|<hproduct>|<hversion>|<messageid>|<hevent_description>|<hseverity>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hfld2} %{hfld3} %{hhostname} CEF:0|RSA|%{hproduct}|%{hversion}|%{messageid}|%{hevent_description}|%{hseverity}|%{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-rsaecatmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: suid=<fld1> shost=<shost> src=<saddr> dst=<daddr> cs1Label=<fld1> cs1=<fld2> cs2Label=<fld3> cs2=<obj_name>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "suid=%{fld1} shost=%{shost} src=%{saddr} dst=%{daddr} cs1Label=%{fld1} cs1=%{fld2} cs2Label=%{fld3} cs2=%{obj_name}" }
			id => "msgParserId0"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"hostname" => "%{hhostname}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{messageid}"
				"event_description" => "%{hevent_description}"
				"severity" => "%{hseverity}"
				"obj_type" => "Suspect Level"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: agentid=<agent> shost=<shost> src=<saddr> smac=<smacaddr> instantIOCName=<threat_name> instantIOCLevel=<threat_val> rt=<fld4> machineScore=<risk_num> userOU=<user_org> machineOU=<dn> deviceDnsDomain=<domain> suser=<username> gatewayip=<gateway> remoteip=<stransaddr> os=<os> timezone=<timezone>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "agentid=%{agent} shost=%{shost} src=%{saddr} smac=%{smacaddr} instantIOCName=%{threat_name} instantIOCLevel=%{threat_val} rt=%{fld4} machineScore=%{risk_num} userOU=%{user_org} machineOU=%{dn} deviceDnsDomain=%{domain} suser=%{username} gatewayip=%{gateway} remoteip=%{stransaddr} os=%{os} timezone=%{timezone}" }
			id => "msgParserId1"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"hostname" => "%{hhostname}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{messageid}"
				"event_description" => "%{hevent_description}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: agentid=<agent> shost=<shost> src=<saddr> smac=<smacaddr> fname=<filename> fsize=<filename_size> fileHash=<checksum> instantIOCName=<threat_name> instantIOCLevel=<threat_val> machineScore=<risk_num> OPSWATResult=<cs_opswatresult> YARAResult=<cs_yararesult> Bit9Status=<cs_bit9status> ReputationResult=<cs_represult> moduleScore=<cs_modulescore> moduleSignature=<cs_modulesign> gatewayip=<gateway> remoteip=<stransaddr> os=<os> timezone=<timezone> sha256sum=<checksum> md5sum=<checksum>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "agentid=%{agent} shost=%{shost} src=%{saddr} smac=%{smacaddr} fname=%{filename} fsize=%{filename_size} fileHash=%{checksum} instantIOCName=%{threat_name} instantIOCLevel=%{threat_val} machineScore=%{risk_num} OPSWATResult=%{cs_opswatresult} YARAResult=%{cs_yararesult} Bit9Status=%{cs_bit9status} ReputationResult=%{cs_represult} moduleScore=%{cs_modulescore} moduleSignature=%{cs_modulesign} gatewayip=%{gateway} remoteip=%{stransaddr} os=%{os} timezone=%{timezone} sha256sum=%{checksum} md5sum=%{checksum}" }
			id => "msgParserId2"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"hostname" => "%{hhostname}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{messageid}"
				"event_description" => "%{hevent_description}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: agentid=<agent> shost=<shost> src=<saddr> smac=<smacaddr> instantIOCName=<threat_name> instantIOCLevel=<threat_val> machineScore=<risk_num> dst=<daddr> dhost=<dhost> start=<fld31> end=<fld32> destinationDnsDomain=<ddomain> gatewayip=<gateway> remoteip=<stransaddr> os=<os> timezone=<timezone> protocol=<protocol> port=<dport> totalsent=<sbytes> totalreceived=<rbytes> useragent=<user_agent> filename=<filename>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "agentid=%{agent} shost=%{shost} src=%{saddr} smac=%{smacaddr} instantIOCName=%{threat_name} instantIOCLevel=%{threat_val} machineScore=%{risk_num} dst=%{daddr} dhost=%{dhost} start=%{fld31} end=%{fld32} destinationDnsDomain=%{ddomain} gatewayip=%{gateway} remoteip=%{stransaddr} os=%{os} timezone=%{timezone} protocol=%{protocol} port=%{dport} totalsent=%{sbytes} totalreceived=%{rbytes} useragent=%{user_agent} filename=%{filename}" }
			id => "msgParserId3"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"hostname" => "%{hhostname}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{messageid}"
				"event_description" => "%{hevent_description}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: agentid=<agent> shost=<shost> src=<saddr> smac=<smacaddr> fname=<filename> fsize=<filename_size> fileHash=<checksum> instantIOCName=<threat_name> instantIOCLevel=<threat_val> machineScore=<risk_num> rt=<fld4> sourceModule=<cs_sourcemodule> targetModule=<cs_targetmodule> gatewayip=<gateway> remoteip=<stransaddr> os=<os> timezone=<timezone>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "agentid=%{agent} shost=%{shost} src=%{saddr} smac=%{smacaddr} fname=%{filename} fsize=%{filename_size} fileHash=%{checksum} instantIOCName=%{threat_name} instantIOCLevel=%{threat_val} machineScore=%{risk_num} rt=%{fld4} sourceModule=%{cs_sourcemodule} targetModule=%{cs_targetmodule} gatewayip=%{gateway} remoteip=%{stransaddr} os=%{os} timezone=%{timezone}" }
			id => "msgParserId4"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"hostname" => "%{hhostname}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{messageid}"
				"event_description" => "%{hevent_description}"
				"severity" => "%{hseverity}"
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-rsaecatmsg.json"
#			template_name => "rsaecat_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

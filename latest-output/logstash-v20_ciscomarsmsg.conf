# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}



# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1> %MARS-1-101: <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %MARS-1-101: %{messageid} %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_ciscomarsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Rule" {
		# MESSAGE Rule:System_Rules
		# line in RSA: <@msg:*PARMVAL($MSG)><@:*SYSVAL($MSGID,$ID1)><@event_time:*EVNTTIME($HDR,'%B %F %H:%U:%O %W',hfld1)><@starttime:*EVNTTIME($MSG,'%B %F %H:%U:%O %W',fld11,fld12,fld13,fld14)> <@endtime:*EVNTTIME($MSG,'%B %F %H:%U:%O %W',fld6,fld7,fld8,fld9)> <rule> (System Rule: <rulename>) fired and caused <severity> Incident <operation_id>, starting from <fld10> <fld11> <fld12> <fld13> <fld14> to <fld5> <fld6> <fld7> <fld8> <fld9> on <hostname>, Top 3 src dest addrs pairs showing <fld2>, Top 3 dest ports showing <fld3>, Top 3 event types showing <fld4>, Top 3 reporting devices showing <fld15>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{rule} (System Rule: %{rulename}) fired and caused %{severity} Incident %{operation_id}, starting from %{fld10} %{fld11} %{fld12} %{fld13} %{fld14} to %{fld5} %{fld6} %{fld7} %{fld8} %{fld9} on %{hostname}, Top 3 src dest addrs pairs showing %{fld2}, Top 3 dest ports showing %{fld3}, Top 3 event types showing %{fld4}, Top 3 reporting devices showing %{fld15}" }
				id => "message-Rule:System_Rules"
				add_field => {
					"[event][id]" => "Rule:System_Rules"
					"[rsa][message][id1]" => "Rule:System_Rules"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Rule:Custom_Rules
		# line in RSA: <@msg:*PARMVAL($MSG)><@:*SYSVAL($MSGID,$ID1)><@event_time:*EVNTTIME($HDR,'%B %F %H:%U:%O %W',hfld1)><@starttime:*EVNTTIME($MSG,'%B %F %H:%U:%O %W',fld11,fld12,fld13,fld14)> <@endtime:*EVNTTIME($MSG,'%B %F %H:%U:%O %W',fld6,fld7,fld8,fld9)> <rule> (<rulename>) fired and caused <severity> Incident <operation_id>, starting from <fld10> <fld11> <fld12> <fld13> <fld14> to <fld5> <fld6> <fld7> <fld8> <fld9> on <hostname>, Top 3 src dest addrs pairs showing <fld2>, Top 3 dest ports showing <fld3>, Top 3 event types showing <fld4>, Top 3 reporting devices showing <fld15>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{rule} (%{rulename}) fired and caused %{severity} Incident %{operation_id}, starting from %{fld10} %{fld11} %{fld12} %{fld13} %{fld14} to %{fld5} %{fld6} %{fld7} %{fld8} %{fld9} on %{hostname}, Top 3 src dest addrs pairs showing %{fld2}, Top 3 dest ports showing %{fld3}, Top 3 event types showing %{fld4}, Top 3 reporting devices showing %{fld15}" }
				id => "message-Rule:Custom_Rules"
				add_field => {
					"[event][id]" => "Rule:Custom_Rules"
					"[rsa][message][id1]" => "Rule:Custom_Rules"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hfld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_ciscomarsmsg.json"
#			template_name => "_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "mssql"
			"[observer][name]" => "Microsoft SQL Server"
			"[observer][type]" => "Database"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %NICWIN-<level>-<hfld10>_33205_<hfld11>: <hevent_log>,<hlinenum>,<hday> <hdatetime>,33205,<hfld1>,<hfld2>,<hfld3>,<hhostname>,<hfld4>,<hfld5>,Audit event: <hfld6> event_time:<hevent_time> sequence_number:<hoperation_id> action_id:<messageid> <!payload:hfld3>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-(?<hfld10>[^_]*)_33205_(?<hfld11>[^:]*):[\s]+(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),33205,(?<hfld1>[^,]*),(?<hfld2>[^,]*),(?<message>(?<hfld3>[^,]*),(?<hhostname>[^,]*),(?<hfld4>[^,]*),(?<hfld5>[^,]*),Audit[\s]+event:[\s]+(?<hfld6>[^\s]*)[\s]+event_time:(?<hevent_time>[^\s]*)[\s]+sequence_number:(?<hoperation_id>[^\s]*)[\s]+action_id:(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %MSSQL-<level>-<hfld10>_33205_<hfld11>: <hevent_log>,<hlinenum>,<hday> <hdatetime>,33205,<hfld1>,<hfld2>,<hfld3>,<hhostname>,<hfld4>,<hfld5>,Audit event: event_time:<hevent_time> sequence_number:<hoperation_id> action_id:<messageid> <!payload:hfld3>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MSSQL\-(?<level>[^\-]*)\-(?<hfld10>[^_]*)_33205_(?<hfld11>[^:]*):[\s]+(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),33205,(?<hfld1>[^,]*),(?<hfld2>[^,]*),(?<message>(?<hfld3>[^,]*),(?<hhostname>[^,]*),(?<hfld4>[^,]*),(?<hfld5>[^,]*),Audit[\s]+event:[\s]+event_time:(?<hevent_time>[^\s]*)[\s]+sequence_number:(?<hoperation_id>[^\s]*)[\s]+action_id:(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %MSSQL-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MSSQL-%{messageid}: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %MSSQL-<level>-<hfld1>: <hdate> <htime> <hsource> <hfld2> transactions <messageid> <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MSSQL\-(?<level>[^\-]*)\-(?<hfld1>[^:]*):[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hsource>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+transactions[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %MSSQL-<level>-<messageid>,: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MSSQL-%{level}-%{messageid},: %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %MSSQL-<level>-<messageid>:: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MSSQL-%{level}-%{messageid}:: %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: %MSSQL-<level>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MSSQL-%{level}-%{messageid}: %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: %NICWIN-<level>-{<messageid> Server Windows Service (<hfld1>):|<messageid>:} <hevent_log>,<hlinenum>,<hday> <hdatetime>,<hevent_id>,{ Report Server Windows Service (<hfld1>) | SQL Server Reporting Services (<hfld2>) | SQLBrowser | SQL Server Report Service | MSSQLServerOLAPService | SQLVDI }, <!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-((?<messageid>[^\s]*)[\s]+Server[\s]+Windows[\s]+Service[\s]+\((?<hfld1>[^\)]*)\):|(?<messageid>[^:]*):)[\s]+(?<message>(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),([\s]*Report[\s]+Server[\s]+Windows[\s]+Service[\s]+\((?<hfld1>[^\)]*)\)[\s]+|[\s]*SQL[\s]+Server[\s]+Reporting[\s]+Services[\s]+\((?<hfld2>[^\)]*)\)[\s]+|[\s]*SQLBrowser[\s]+|[\s]*SQL[\s]+Server[\s]+Report[\s]+Service[\s]+|[\s]*MSSQLServerOLAPService[\s]+|[\s]*SQLVDI[\s]+),[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: %NICWIN-<level>-<messageid>: <hevent_log>,<hlinenum>,<hday> <hdatetime>,<hevent_id>,{ MSSQLSERVER | MSSQLServer | MSSQLServerADHelper | SQLSERVERAGENT | SQLISPackage}, <!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-(?<messageid>[^:]*):[\s]+(?<message>(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),([\s]*MSSQLSERVER[\s]+|[\s]*MSSQLServer[\s]+|[\s]*MSSQLServerADHelper[\s]+|[\s]*SQLSERVERAGENT[\s]+|[\s]*SQLISPackage),[\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: %NICWIN-<level>-<msgIdPart1>$<hinstance>: <hevent_log>,<hlinenum>,<hday> <hdatetime>,<hevent_id>,MSSQL$<hfld1>, <!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-(?<msgIdPart1>[^\$]*)\$(?<hinstance>[^:]*):[\s]+(?<message>(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),MSSQL\$(?<hfld1>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{msgIdPart1}SERVER"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: %NICWIN-<level>-<msgIdPart1>SQLAgent$<hinstance>: <hevent_log>,<hlinenum>,<hday> <hdatetime>,<hevent_id>,SQLAgent$<hfld1>, <!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<level>[^\-]*)\-(?<msgIdPart1>[^S]*)SQLAgent\$(?<hinstance>[^:]*):[\s]+(?<message>(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),SQLAgent\$(?<hfld1>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{msgIdPart1}SQLSERVERAGENT"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: %MSSQL-<level>-<messageid>: <hevent_log>,<hlinenum>,<hday> <hdatetime>,<hevent_id>,{ MSSQLSERVER | MSSQLServer | MSSQLServerADHelper | SQLSERVERAGENT }, <!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MSSQL\-(?<level>[^\-]*)\-(?<messageid>[^:]*):[\s]+(?<message>(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),([\s]*MSSQLSERVER[\s]+|[\s]*MSSQLServer[\s]+|[\s]*MSSQLServerADHelper[\s]+|[\s]*SQLSERVERAGENT[\s]+),[\s]+(?<payload>.*))$" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0013
	# line in RSA: %MSSQL-<level>-<msgIdPart1>$<hinstance>: <hevent_log>,<hlinenum>,<hday> <hdatetime>,<hevent_id>,MSSQL$<hfld1>, <!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MSSQL\-(?<level>[^\-]*)\-(?<msgIdPart1>[^\$]*)\$(?<hinstance>[^:]*):[\s]+(?<message>(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),MSSQL\$(?<hfld1>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0013"
			add_field => {
				"[rsa][header][id]" => "0013"
				"[rsa][message][id2]" => "%{msgIdPart1}SERVER"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0014
	# line in RSA: %MSSQL-<level>-<msgIdPart1>SQLAgent$<hinstance>: <hevent_log>,<hlinenum>,<hday> <hdatetime>,<hevent_id>,SQLAgent$<hfld1>, <!payload:hevent_log>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MSSQL\-(?<level>[^\-]*)\-(?<msgIdPart1>[^S]*)SQLAgent\$(?<hinstance>[^:]*):[\s]+(?<message>(?<hevent_log>[^,]*),(?<hlinenum>[^,]*),(?<hday>[^\s]*)[\s]+(?<hdatetime>[^,]*),(?<hevent_id>[^,]*),SQLAgent\$(?<hfld1>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0014"
			add_field => {
				"[rsa][header][id]" => "0014"
				"[rsa][message][id2]" => "%{msgIdPart1}SQLSERVERAGENT"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0015
	# line in RSA: %MSSQL-<level>-<hfld1> <hdate> <htime> <hsource> <hfld2> Files\Microsoft <messageid> <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MSSQL\-(?<level>[^\-]*)\-(?<hfld1>[^\s]*)[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hsource>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+Files\\Microsoft[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0015"
			add_field => {
				"[rsa][header][id]" => "0015"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0016
	# line in RSA: %MSSQL-<level>-<hfld1>::<hdate> <htime> <hsource> <hfld2> <messageid> <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MSSQL\-(?<level>[^\-]*)\-(?<hfld1>[^:]*)::(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hsource>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0016"
			add_field => {
				"[rsa][header][id]" => "0016"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0017
	# line in RSA: %MSSQL-<level>-<hfld1>: <hdate> <htime> <hsource> <hfld2> <hfld3> <messageid> <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MSSQL\-(?<level>[^\-]*)\-(?<hfld1>[^:]*):[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hsource>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0017"
			add_field => {
				"[rsa][header][id]" => "0017"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: %NICWIN-<hlevel>-<hfld1>_<hfld2>_MSSQL<hfld3>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{hfld1}_%{hfld2}_MSSQL%{hfld3}: %{message}" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "MSSQL_WIN_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9998
	# line in RSA: %NICWIN-<hlevel>-<hfld1>_<hfld2>_SQL<hfld3>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{hfld1}_%{hfld2}_SQL%{hfld3}: %{message}" }
			id => "header-9998"
			add_field => {
				"[rsa][header][id]" => "9998"
				"[rsa][message][id2]" => "MSSQL_WIN_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9997
	# line in RSA: %MSSQL-<p_msgid>: <id> || <c_username> ||<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MSSQL-%{p_msgid}: %{id} || %{c_username} ||%{message}" }
			id => "header-9997"
			add_field => {
				"[rsa][header][id]" => "9997"
				"[rsa][message][id2]" => "MSSQL_ODBC_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9996
	# line in RSA: %MSSQL-<level>-<p_msgid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MSSQL-%{level}-%{p_msgid}: %{message}" }
			id => "header-9996"
			add_field => {
				"[rsa][header][id]" => "9996"
				"[rsa][message][id2]" => "MSSQL_FILE_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9995
	# line in RSA: %MSSQL<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MSSQL%{message}" }
			id => "header-9995"
			add_field => {
				"[rsa][header][id]" => "9995"
				"[rsa][message][id2]" => "MSSQL_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_mssqlmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "10" {
		# MESSAGE RPC:Completed
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-RPC:Completed"
				add_field => {
					"[event][id]" => "RPC:Completed"
					"[rsa][message][id1]" => "RPC:Completed"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003611
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>.*)$" }
				id => "message-003611"
				add_field => {
					"[event][id]" => "003611"
					"[rsa][message][id1]" => "003611"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "11" {
		# MESSAGE RPC:Starting
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-RPC:Starting"
				add_field => {
					"[event][id]" => "RPC:Starting"
					"[rsa][message][id1]" => "RPC:Starting"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003613
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>.*)$" }
				id => "message-003613"
				add_field => {
					"[event][id]" => "003613"
					"[rsa][message][id1]" => "003613"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId2" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId2"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "OS"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "20" {
		# MESSAGE Audit_Login_Failed:02
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action>. Reason: <result> [CLIENT: <saddr>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\.]*)\.[\s]+Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]$" }
				id => "message-Audit_Login_Failed:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "User failed to log in to Microsoft SQL Server"
				"event_computer" => "%{hostname}"
					"[event][id]" => "Audit_Login_Failed:02"
					"[rsa][message][id1]" => "Audit_Login_Failed:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE Audit_Login_Failed:05
		# line in RSA: <id>||<c_username>||<username>||<db_pid>||{(null)|<fld50>}||<obj_name>||<fld35>||<trans_id>||<domain>||<hostname>||<process_id>||<application>||<duration>||{(null)|<fld51>}||<lread>||<lwrite>||<cpu>||<permissions>||<severity>||<fld39>||<fld36>||<event_state>||<index>||<info>||<instance>||<obj_type>||<fld37>||<fld40>||<resultcode>||<fld41>||<fld42>||<db_name>||<filename>||<owner>||<privilege>||<fld43>||<fld44>||<logon_id>||<fld45>||<fld46>||<statement>||<binary>||{Login failed for user '<fld11>'.|Login failed for user '<fld11>' Reason:<result>}[CLIENT:<saddr>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|\|(?<c_username>[^\|]*)\|\|(?<username>[^\|]*)\|\|(?<db_pid>[^\|]*)\|\|(\(null\)|(?<fld50>[^\|]*))\|\|(?<obj_name>[^\|]*)\|\|(?<fld35>[^\|]*)\|\|(?<trans_id>[^\|]*)\|\|(?<domain>[^\|]*)\|\|(?<hostname>[^\|]*)\|\|(?<process_id>[^\|]*)\|\|(?<application>[^\|]*)\|\|(?<duration>[^\|]*)\|\|(\(null\)|(?<fld51>[^\|]*))\|\|(?<lread>[^\|]*)\|\|(?<lwrite>[^\|]*)\|\|(?<cpu>[^\|]*)\|\|(?<permissions>[^\|]*)\|\|(?<severity>[^\|]*)\|\|(?<fld39>[^\|]*)\|\|(?<fld36>[^\|]*)\|\|(?<event_state>[^\|]*)\|\|(?<index>[^\|]*)\|\|(?<info>[^\|]*)\|\|(?<instance>[^\|]*)\|\|(?<obj_type>[^\|]*)\|\|(?<fld37>[^\|]*)\|\|(?<fld40>[^\|]*)\|\|(?<resultcode>[^\|]*)\|\|(?<fld41>[^\|]*)\|\|(?<fld42>[^\|]*)\|\|(?<db_name>[^\|]*)\|\|(?<filename>[^\|]*)\|\|(?<owner>[^\|]*)\|\|(?<privilege>[^\|]*)\|\|(?<fld43>[^\|]*)\|\|(?<fld44>[^\|]*)\|\|(?<logon_id>[^\|]*)\|\|(?<fld45>[^\|]*)\|\|(?<fld46>[^\|]*)\|\|(?<statement>[^\|]*)\|\|(?<binary>[^\|]*)\|\|(Login[\s]+failed[\s]+for[\s]+user[\s]+'(?<fld11>[^']*)'\.|Login[\s]+failed[\s]+for[\s]+user[\s]+'(?<fld11>[^']*)'[\s]+Reason:(?<result>[^\[]*))\[CLIENT:(?<saddr>[^\]]*)\]$" }
				id => "message-Audit_Login_Failed:05"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "User failed to log in to Microsoft SQL Server"
				"event_computer" => "%{hostname}"
					"[event][id]" => "Audit_Login_Failed:05"
					"[rsa][message][id1]" => "Audit_Login_Failed:05"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE Audit_Login_Failed:03
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action>. [CLIENT: <saddr>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\.]*)\.[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]$" }
				id => "message-Audit_Login_Failed:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "User failed to log in to Microsoft SQL Server"
				"event_computer" => "%{hostname}"
					"[event][id]" => "Audit_Login_Failed:03"
					"[rsa][message][id1]" => "Audit_Login_Failed:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE Audit_Login_Failed:01
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action>. Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\.]*)\.[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-Audit_Login_Failed:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "User failed to log in to Microsoft SQL Server"
				"event_computer" => "%{hostname}"
					"[event][id]" => "Audit_Login_Failed:01"
					"[rsa][message][id1]" => "Audit_Login_Failed:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE Audit_Login_Failed
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-Audit_Login_Failed"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "User failed to log in to Microsoft SQL Server"
				"event_computer" => "%{hostname}"
					"[event][id]" => "Audit_Login_Failed"
					"[rsa][message][id1]" => "Audit_Login_Failed"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "21" {
		# MESSAGE EventLog:01
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> ||Login succeeded for user '<fld31>'. Connection made using SQL Server authentication. [CLIENT: {<<<saddr>>|<saddr>}] 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|Login[\s]+succeeded[\s]+for[\s]+user[\s]+'(?<fld31>[^']*)'\.[\s]+Connection[\s]+made[\s]+using[\s]+SQL[\s]+Server[\s]+authentication\.[\s]+\[CLIENT:[\s]+(<(?<saddr>[^>]*)>|(?<saddr>[^\]]*))\][\s]+$" }
				id => "message-EventLog:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "EventLog:01"
					"[rsa][message][id1]" => "EventLog:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE EventLog
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-EventLog"
				add_field => {
					"[event][id]" => "EventLog"
					"[rsa][message][id1]" => "EventLog"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "22" {
		# MESSAGE 003876
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <fld33> || <fld45> || <fld46> || <statement> || <fld32> ||  <fld31> <fld56> <fld57> SQL Server has encountered <fld1> occurrence(s) of cachestore flush for the '<fld47>' cachestore (part of plan cache) due to some database maintenance or reconfigure operations.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<fld33>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<fld32>[^\s]*)[\s]+\|\|[\s]+(?<fld31>[^\s]*)[\s]+(?<fld56>[^\s]*)[\s]+(?<fld57>[^\s]*)[\s]+SQL[\s]+Server[\s]+has[\s]+encountered[\s]+(?<fld1>[^\s]*)[\s]+occurrence\(s\)[\s]+of[\s]+cachestore[\s]+flush[\s]+for[\s]+the[\s]+'(?<fld47>[^']*)'[\s]+cachestore[\s]+\(part[\s]+of[\s]+plan[\s]+cache\)[\s]+due[\s]+to[\s]+some[\s]+database[\s]+maintenance[\s]+or[\s]+reconfigure[\s]+operations\.$" }
				id => "message-003876"
				add_field => {
					"[event][id]" => "003876"
					"[rsa][message][id1]" => "003876"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003877
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <fld33> || <fld45> || <fld46> || <statement> || <fld48> ||  <fld31> <fld56> <fld57> SQL Server has encountered <fld47> occurrence(s) of I/O requests taking longer than <fld49> seconds to complete on file [<result>] in database [<fld52>] (<fld53>).  The OS file handle is <fld54>.  The offset of the latest long I/O is: <fld55>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<fld33>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<fld48>[^\s]*)[\s]+\|\|[\s]+(?<fld31>[^\s]*)[\s]+(?<fld56>[^\s]*)[\s]+(?<fld57>[^\s]*)[\s]+SQL[\s]+Server[\s]+has[\s]+encountered[\s]+(?<fld47>[^\s]*)[\s]+occurrence\(s\)[\s]+of[\s]+I/O[\s]+requests[\s]+taking[\s]+longer[\s]+than[\s]+(?<fld49>[^\s]*)[\s]+seconds[\s]+to[\s]+complete[\s]+on[\s]+file[\s]+\[(?<result>[^\]]*)\][\s]+in[\s]+database[\s]+\[(?<fld52>[^\]]*)\][\s]+\((?<fld53>[^\)]*)\)\.[\s]+The[\s]+OS[\s]+file[\s]+handle[\s]+is[\s]+(?<fld54>[^\.]*)\.[\s]+The[\s]+offset[\s]+of[\s]+the[\s]+latest[\s]+long[\s]+I/O[\s]+is:[\s]+(?<fld55>.*)$" }
				id => "message-003877"
				add_field => {
					"[event][id]" => "003877"
					"[rsa][message][id1]" => "003877"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003879
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <fld32> || <fld45> || <fld46> || <statement> || <fld33> ||  <fld31> <fld56> <fld57> Starting up database '<fld47>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<fld32>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<fld33>[^\s]*)[\s]+\|\|[\s]+(?<fld31>[^\s]*)[\s]+(?<fld56>[^\s]*)[\s]+(?<fld57>[^\s]*)[\s]+Starting[\s]+up[\s]+database[\s]+'(?<fld47>[^']*)'\.$" }
				id => "message-003879"
				add_field => {
					"[event][id]" => "003879"
					"[rsa][message][id1]" => "003879"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003874
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <fld33> || <fld45> || <fld46> || <statement> || <fld32> ||  <fld31> <fld56> <fld57> Process ID <fld49> was killed by hostname <fld48>, host process ID <fld34>. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<fld33>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<fld32>[^\s]*)[\s]+\|\|[\s]+(?<fld31>[^\s]*)[\s]+(?<fld56>[^\s]*)[\s]+(?<fld57>[^\s]*)[\s]+Process[\s]+ID[\s]+(?<fld49>[^\s]*)[\s]+was[\s]+killed[\s]+by[\s]+hostname[\s]+(?<fld48>[^,]*),[\s]+host[\s]+process[\s]+ID[\s]+(?<fld34>[^\.]*)\.[\s]+$" }
				id => "message-003874"
				add_field => {
					"[event][id]" => "003874"
					"[rsa][message][id1]" => "003874"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003873
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <fld33> || <fld45> || <fld46> || <statement> || <fld32> ||  <fld31> <fld56> <fld57>  Setting database option <fld48> to <fld49> for database <fld34>. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<fld33>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<fld32>[^\s]*)[\s]+\|\|[\s]+(?<fld31>[^\s]*)[\s]+(?<fld56>[^\s]*)[\s]+(?<fld57>[^\s]*)[\s]+Setting[\s]+database[\s]+option[\s]+(?<fld48>[^\s]*)[\s]+to[\s]+(?<fld49>[^\s]*)[\s]+for[\s]+database[\s]+(?<fld34>[^\.]*)\.[\s]+$" }
				id => "message-003873"
				add_field => {
					"[event][id]" => "003873"
					"[rsa][message][id1]" => "003873"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE LoginSuccess
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <fld48> || <fld45> || <fld46> || <statement> || <fld33> || <fld31> <fld56> <fld57> Login succeeded for user '<fld32>'. {Connection made using <fld13> authentication. | Connection: trusted. }[CLIENT: {<<<saddr>>|<saddr>}] 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<fld48>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<fld33>[^\s]*)[\s]+\|\|[\s]+(?<fld31>[^\s]*)[\s]+(?<fld56>[^\s]*)[\s]+(?<fld57>[^\s]*)[\s]+Login[\s]+succeeded[\s]+for[\s]+user[\s]+'(?<fld32>[^']*)'\.[\s]+(Connection[\s]+made[\s]+using[\s]+(?<fld13>[^\s]*)[\s]+authentication\.[\s]+|[\s]*Connection:[\s]+trusted\.[\s]+)\[CLIENT:[\s]+(<(?<saddr>[^>]*)>|(?<saddr>[^\]]*))\][\s]+$" }
				id => "message-LoginSuccess"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "LoginSuccess"
					"[rsa][message][id1]" => "LoginSuccess"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE LoginSuccess:01
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <fld48> || <fld45> || <fld46> || <statement> || <fld32> || <fld31> <fld56> <fld57> Login succeeded for user '<fld33>'. {Connection made using <fld13> authentication. | Connection: non-trusted. }[CLIENT: {<<<saddr>>|<saddr>}] 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<fld48>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<fld32>[^\s]*)[\s]+\|\|[\s]+(?<fld31>[^\s]*)[\s]+(?<fld56>[^\s]*)[\s]+(?<fld57>[^\s]*)[\s]+Login[\s]+succeeded[\s]+for[\s]+user[\s]+'(?<fld33>[^']*)'\.[\s]+(Connection[\s]+made[\s]+using[\s]+(?<fld13>[^\s]*)[\s]+authentication\.[\s]+|[\s]*Connection:[\s]+non\-trusted\.[\s]+)\[CLIENT:[\s]+(<(?<saddr>[^>]*)>|(?<saddr>[^\]]*))\][\s]+$" }
				id => "message-LoginSuccess:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "LoginSuccess:01"
					"[rsa][message][id1]" => "LoginSuccess:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003875
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <fld32> || <fld45> || <fld46> || <statement> || <fld30> ||  <fld31> <fld56> <fld57> <fld33>. This is an informational message only; no user action is required.  
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<fld32>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<fld30>[^\s]*)[\s]+\|\|[\s]+(?<fld31>[^\s]*)[\s]+(?<fld56>[^\s]*)[\s]+(?<fld57>[^\s]*)[\s]+(?<fld33>[^\.]*)\.[\s]+This[\s]+is[\s]+an[\s]+informational[\s]+message[\s]+only;[\s]+no[\s]+user[\s]+action[\s]+is[\s]+required\.[\s]+$" }
				id => "message-003875"
				add_field => {
					"[event][id]" => "003875"
					"[rsa][message][id1]" => "003875"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE ErrorLog
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-ErrorLog"
				add_field => {
					"[event][id]" => "ErrorLog"
					"[rsa][message][id1]" => "ErrorLog"
					"[event][categoryid]" => "1602020000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA:  <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId19" {
		grok {
			match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId19"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "40" {
		# MESSAGE SQL:StmtStarting:01
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> FROM [<fld1>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+FROM[\s]+\[(?<fld1>[^\]]*)\]$" }
				id => "message-SQL:StmtStarting:01"
				add_field => {
					"[event][id]" => "SQL:StmtStarting:01"
					"[rsa][message][id1]" => "SQL:StmtStarting:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE SQL:StmtStarting
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-SQL:StmtStarting"
				add_field => {
					"[event][id]" => "SQL:StmtStarting"
					"[rsa][message][id1]" => "SQL:StmtStarting"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "42" {
		# MESSAGE SP:Starting
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-SP:Starting"
				add_field => {
					"[event][id]" => "SP:Starting"
					"[rsa][message][id1]" => "SP:Starting"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003612
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>.*)$" }
				id => "message-003612"
				add_field => {
					"[event][id]" => "003612"
					"[rsa][message][id1]" => "003612"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId21" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId21"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId22" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId22"
			add_field => {
				"ec_subject" => "Permission"
				"ec_theme" => "AccessControl"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId23" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId23"
			add_field => {
				"ec_subject" => "Password"
				"ec_activity" => "Modify"
				"ec_theme" => "Password"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId24" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId24"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: <id> || <c_username> || <administrator> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <username> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId25" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<administrator>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId25"
			add_field => {
				"ec_subject" => "Database"
				"ec_activity" => "Modify"
				"ec_theme" => "AccessControl"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA: <id> || <c_username> || <administrator> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <username> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId26" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<administrator>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId26"
			add_field => {
				"ec_subject" => "Group"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId27" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId27"
			add_field => {
				"ec_subject" => "Group"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId28" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId28"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId29" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId29"
			add_field => {
				"ec_subject" => "Database"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId30" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId30"
			add_field => {
				"ec_subject" => "Database"
				"ec_activity" => "Modify"
				"ec_theme" => "AccessControl"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId31
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId31" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId31"
			add_field => {
				"ec_subject" => "OS"
				"ec_activity" => "Modify"
				"ec_theme" => "AccessControl"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId32
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId32" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId32"
			add_field => {
				"ec_subject" => "Database"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId33
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId33" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId33"
			add_field => {
				"ec_subject" => "Permission"
				"ec_theme" => "AccessControl"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId34
	# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
	else if [logstash][msgparser][id] == "msgParserId34" {
		grok {
			match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId34"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "65528" {
		# MESSAGE 65528
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary> || <action> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>[^\s]*)[\s]+\|\|[\s]+(?<action>[^\s]*)[\s]+$" }
				id => "message-65528"
				add_field => {
					"[event][id]" => "65528"
					"[rsa][message][id1]" => "65528"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
		# MESSAGE 003610
		# line in RSA: <id> || <c_username> || <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || <binary>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\s]*)[\s]+\|\|[\s]+(?<c_username>[^\s]*)[\s]+\|\|[\s]+(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+(?<binary>.*)$" }
				id => "message-003610"
				add_field => {
					"[event][id]" => "003610"
					"[rsa][message][id1]" => "003610"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld50}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},%{event_description}" }
			id => "msgParserId35"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId36
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,18801:  SQLSETUP: The service pack installation for <service> has started.
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},18801:  SQLSETUP: The service pack installation for %{service} has started." }
			id => "msgParserId36"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application_107_Report" {
		# MESSAGE Application_107_Report
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Report Server Windows Service <service> cannot connect to the report server database.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},Report Server Windows Service %{service} cannot connect to the report server database." }
				id => "message-Application_107_Report"
				add_field => {
					"[event][id]" => "Application_107_Report"
					"[rsa][message][id1]" => "Application_107_Report"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_107_Report:01
		# line in RSA: <event_log>,rn=<fld10> cid=<fld11> eid=<fld12>,<fld14> <fld55>,<id>,<event_source>,<fld13>,<fld26>,<event_computer>,<fld16>,<fld17>,
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld10} cid=%{fld11} eid=%{fld12},%{fld14} %{fld55},%{id},%{event_source},%{fld13},%{fld26},%{event_computer},%{fld16},%{fld17}," }
				id => "message-Application_107_Report:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: trusted"
					"[event][id]" => "Application_107_Report:01"
					"[rsa][message][id1]" => "Application_107_Report:01"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source> (<service>),<event_user>,<event_type>,<event_computer>,<category>,<fld1>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source} (%{service}),%{event_user},%{event_type},%{event_computer},%{category},%{fld1},%{event_description}" }
			id => "msgParserId39"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId40
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source> (<service>),<event_user>,<event_type>,<event_computer>,<category>,<fld1>,The application domain <domain> failed to initialize. Error:<error>
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source} (%{service}),%{event_user},%{event_type},%{event_computer},%{category},%{fld1},The application domain %{domain} failed to initialize. Error:%{error}" }
			id => "msgParserId40"
			add_field => {
				"event_description" => "The application domain failed to initialize."
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application_18487_MSSQLSERVER" {
		# MESSAGE Application_18487_MSSQLSERVER:01
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Login failed for user '<username>'. Reason: <result> [CLIENT: <saddr>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},Login failed for user '%{username}'. Reason: %{result} [CLIENT: %{saddr}]" }
				id => "message-Application_18487_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Application_18487_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_18487_MSSQLSERVER:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_18487_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,{<event_description> Reason: <result> [CLIENT: <saddr>]|<event_description> [CLIENT: <saddr>]|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),((?<event_description>[^\s]*)[\s]+Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|(?<event_description>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|(?<event_description>.*))$" }
				id => "message-Application_18487_MSSQLSERVER"
				add_field => {
					"[event][id]" => "Application_18487_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_18487_MSSQLSERVER"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_18488_MSSQLSERVER" {
		# MESSAGE Application_18488_MSSQLSERVER:01
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Login failed for user '<username>'. {Reason: <result> [CLIENT: <<<saddr>>]|Reason: <result> [CLIENT: <saddr>]|[CLIENT: <<<saddr>>]|[CLIENT: <saddr>]}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),Login[\s]+failed[\s]+for[\s]+user[\s]+'(?<username>[^']*)'\.[\s]+(Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+<(?<saddr>[^>]*)>\]|Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|\[CLIENT:[\s]+<(?<saddr>[^>]*)>\]|\[CLIENT:[\s]+(?<saddr>[^\]]*)\])$" }
				id => "message-Application_18488_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Application_18488_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_18488_MSSQLSERVER:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_18488_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,<event_description> {Reason: <result> [CLIENT: <<<saddr>>]|Reason: <result> [CLIENT: <saddr>]|[CLIENT: <<<saddr>>]|[CLIENT: <saddr>]}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),(?<event_description>[^\s]*)[\s]+(Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+<(?<saddr>[^>]*)>\]|Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|\[CLIENT:[\s]+<(?<saddr>[^>]*)>\]|\[CLIENT:[\s]+(?<saddr>[^\]]*)\])$" }
				id => "message-Application_18488_MSSQLSERVER"
				add_field => {
					"[event][id]" => "Application_18488_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_18488_MSSQLSERVER"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_17104_MSSQLSERVER" {
		# MESSAGE Application_17104_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Server { Process | process } ID is <process_id> .
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),Server[\s]+([\s]*Process[\s]+|[\s]*process[\s]+)[\s]+ID[\s]+is[\s]+(?<process_id>[^\s]*)[\s]+\.$" }
				id => "message-Application_17104_MSSQLSERVER"
				add_field => {
					"[event][id]" => "Application_17104_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_17104_MSSQLSERVER"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_17104_MSSQLSERVER:01
		# line in RSA: <event_log>,rn=<fld10> cid=<fld11> eid=<fld12>,<fld14> <fld55>,<id>,<event_source>,<fld13>,<fld26>,<event_computer>,<fld16>,<fld17>,
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld10} cid=%{fld11} eid=%{fld12},%{fld14} %{fld55},%{id},%{event_source},%{fld13},%{fld26},%{event_computer},%{fld16},%{fld17}," }
				id => "message-Application_17104_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: trusted"
					"[event][id]" => "Application_17104_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_17104_MSSQLSERVER:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_17187_MSSQLSERVER" {
		# MESSAGE Application_17187_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,SQL Server is not ready to accept new client connections. Wait a few minutes before trying again. If you have access to the error log, look for the informational message that indicates that SQL Server is ready before trying to connect again.  [CLIENT: <saddr>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},SQL Server is not ready to accept new client connections. Wait a few minutes before trying again. If you have access to the error log, look for the informational message that indicates that SQL Server is ready before trying to connect again.  [CLIENT: %{saddr}]" }
				id => "message-Application_17187_MSSQLSERVER"
				add_field => {
					"[event][id]" => "Application_17187_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_17187_MSSQLSERVER"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_17187_MSSQLSERVER:01
		# line in RSA: <event_log>,rn=<fld10> cid=<fld11> eid=<fld12>,<fld14> <fld55>,<id>,<event_source>,<fld13>,<fld20>,<event_computer>,<fld16>,<fld17>,
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld10} cid=%{fld11} eid=%{fld12},%{fld14} %{fld55},%{id},%{event_source},%{fld13},%{fld20},%{event_computer},%{fld16},%{fld17}," }
				id => "message-Application_17187_MSSQLSERVER:01"
				add_field => {
					"[event][id]" => "Application_17187_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_17187_MSSQLSERVER:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId48
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,{<event_description> [CLIENT: <saddr>]|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId48" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),((?<event_description>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|(?<event_description>.*))$" }
			id => "msgParserId48"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application_18264_MSSQLSERVER" {
		# MESSAGE Application_18264_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Database backed up <space> Database: <db_name> , creation date(time): <fld20>, pages dumped: <fld21> , first LSN: <fld22> , last LSN: <fld23> , number of dump devices: <fld24> , device information: <fld25>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},Database backed up %{space} Database: %{db_name} , creation date(time): %{fld20}, pages dumped: %{fld21} , first LSN: %{fld22} , last LSN: %{fld23} , number of dump devices: %{fld24} , device information: %{fld25}" }
				id => "message-Application_18264_MSSQLSERVER"
				add_field => {
					"[event][id]" => "Application_18264_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_18264_MSSQLSERVER"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_18264_MSSQLSERVER:01
		# line in RSA: <event_log>,rn=<fld10> cid=<fld11> eid=<fld12>,<fld14> <fld55>,<id>,<event_source>,<fld13>,<fld26>,<event_computer>,<fld16>,<fld17>,
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld10} cid=%{fld11} eid=%{fld12},%{fld14} %{fld55},%{id},%{event_source},%{fld13},%{fld26},%{event_computer},%{fld16},%{fld17}," }
				id => "message-Application_18264_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: trusted"
					"[event][id]" => "Application_18264_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_18264_MSSQLSERVER:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_18265_MSSQLSERVER" {
		# MESSAGE Application_18265_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Log was backed up. Database: <db_name> , creation date(time): <fld20>, first LSN: <fld22> , last LSN: <fld23> , number of dump devices: <fld24> , device information: <fld25>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},Log was backed up. Database: %{db_name} , creation date(time): %{fld20}, first LSN: %{fld22} , last LSN: %{fld23} , number of dump devices: %{fld24} , device information: %{fld25}" }
				id => "message-Application_18265_MSSQLSERVER"
				add_field => {
					"[event][id]" => "Application_18265_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_18265_MSSQLSERVER"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_18265_MSSQLSERVER:01
		# line in RSA: <event_log>,rn=<fld10> cid=<fld11> eid=<fld12>,<fld14> <fld55>,<id>,<event_source>,<fld13>,<fld20>,<event_computer>,<fld16>,<fld17>, <fld18>. string-data=<fld19>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld10} cid=%{fld11} eid=%{fld12},%{fld14} %{fld55},%{id},%{event_source},%{fld13},%{fld20},%{event_computer},%{fld16},%{fld17}, %{fld18}. string-data=%{fld19}" }
				id => "message-Application_18265_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: trusted"
					"[event][id]" => "Application_18265_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_18265_MSSQLSERVER:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,{ Database restored | Database was restored }: Database: <db_name> , creation date(time): <fld20>, first LSN: <fld22> , last LSN: <fld23> , number of dump devices: <fld24> , device information: <fld25>
	else if [logstash][msgparser][id] == "msgParserId52" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),([\s]*Database[\s]+restored[\s]+|[\s]*Database[\s]+was[\s]+restored[\s]+):[\s]+Database:[\s]+(?<db_name>[^\s]*)[\s]+,[\s]+creation[\s]+date\(time\):[\s]+(?<fld20>[^,]*),[\s]+first[\s]+LSN:[\s]+(?<fld22>[^\s]*)[\s]+,[\s]+last[\s]+LSN:[\s]+(?<fld23>[^\s]*)[\s]+,[\s]+number[\s]+of[\s]+dump[\s]+devices:[\s]+(?<fld24>[^\s]*)[\s]+,[\s]+device[\s]+information:[\s]+(?<fld25>.*)$" }
			id => "msgParserId52"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application_18270_MSSQLSERVER" {
		# MESSAGE Application_18270_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Database differential changes were backed up <space> Database: <db_name> , creation date(time): <fld20>, pages dumped: <fld21> , first LSN: <fld22> , last LSN: <fld23> , number of dump devices: <fld24> , device information: <fld25>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},Database differential changes were backed up %{space} Database: %{db_name} , creation date(time): %{fld20}, pages dumped: %{fld21} , first LSN: %{fld22} , last LSN: %{fld23} , number of dump devices: %{fld24} , device information: %{fld25}" }
				id => "message-Application_18270_MSSQLSERVER"
				add_field => {
				"event_description" => "Database differential changes were backed up"
					"[event][id]" => "Application_18270_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_18270_MSSQLSERVER"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_18270_MSSQLSERVER:01
		# line in RSA: <event_log>,rn=<fld10> cid=<fld11> eid=<fld12>,<fld14> <fld55>,<id>,<event_source>,<fld13>,<fld26>,<event_computer>,<fld16>,<fld17>,
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld10} cid=%{fld11} eid=%{fld12},%{fld14} %{fld55},%{id},%{event_source},%{fld13},%{fld26},%{event_computer},%{fld16},%{fld17}," }
				id => "message-Application_18270_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: trusted"
					"[event][id]" => "Application_18270_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_18270_MSSQLSERVER:01"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId54
	# line in RSA:  <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Login failed for user '<username>'. {<info> [CLIENT: <saddr>]|<info>}
	else if [logstash][msgparser][id] == "msgParserId54" {
		grok {
			match => { "message" => "^[\s]*(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),Login[\s]+failed[\s]+for[\s]+user[\s]+'(?<username>[^']*)'\.[\s]+((?<info>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|(?<info>.*))$" }
			id => "msgParserId54"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Login failed for user"
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application_12288_SQLISPackage" {
		# MESSAGE Application_12288_SQLISPackage
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,<event_description>. string-data=[<fld2>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},%{event_description}. string-data=[%{fld2}]" }
				id => "message-Application_12288_SQLISPackage"
				add_field => {
					"[event][id]" => "Application_12288_SQLISPackage"
					"[rsa][message][id1]" => "Application_12288_SQLISPackage"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_12288_SQLISPackage:01
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld13>,<event_description>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld13},%{event_description}." }
				id => "message-Application_12288_SQLISPackage:01"
				add_field => {
					"[event][id]" => "Application_12288_SQLISPackage:01"
					"[rsa][message][id1]" => "Application_12288_SQLISPackage:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_12289_SQLISPackage" {
		# MESSAGE Application_12289_SQLISPackage
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,<event_description>. string-data=[<fld2>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},%{event_description}. string-data=[%{fld2}]" }
				id => "message-Application_12289_SQLISPackage"
				add_field => {
					"[event][id]" => "Application_12289_SQLISPackage"
					"[rsa][message][id1]" => "Application_12289_SQLISPackage"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_12289_SQLISPackage:01
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld13>,<event_description>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld13},%{event_description}." }
				id => "message-Application_12289_SQLISPackage:01"
				add_field => {
					"[event][id]" => "Application_12289_SQLISPackage:01"
					"[rsa][message][id1]" => "Application_12289_SQLISPackage:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId55
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,<event_description>. string-data=[<fld2>]
	else if [logstash][msgparser][id] == "msgParserId55" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},%{event_description}. string-data=[%{fld2}]" }
			id => "msgParserId55"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application_18453_MSSQLSERVER" {
		# MESSAGE Application_18453_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Login succeeded for user '<username>'. {Connection made using <fld13> authentication. | Connection: trusted. }[CLIENT: {<<<saddr>>|<saddr>}]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),Login[\s]+succeeded[\s]+for[\s]+user[\s]+'(?<username>[^']*)'\.[\s]+(Connection[\s]+made[\s]+using[\s]+(?<fld13>[^\s]*)[\s]+authentication\.[\s]+|[\s]*Connection:[\s]+trusted\.[\s]+)\[CLIENT:[\s]+(<(?<saddr>[^>]*)>|(?<saddr>[^\]]*))\]$" }
				id => "message-Application_18453_MSSQLSERVER"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: trusted"
					"[event][id]" => "Application_18453_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_18453_MSSQLSERVER"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_18453_MSSQLSERVER:01
		# line in RSA: <event_log>,rn=<fld10> cid=<fld11> eid=<fld12>,<fld14> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld13>,<fld1>,
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld10} cid=%{fld11} eid=%{fld12},%{fld14} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld13},%{fld1}," }
				id => "message-Application_18453_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: trusted"
					"[event][id]" => "Application_18453_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_18453_MSSQLSERVER:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_18454_MSSQLSERVER" {
		# MESSAGE Application_18454_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Login succeeded for user '<username>'. {Connection made using <fld13> authentication. | Connection: non-trusted. }[CLIENT: {<<<saddr>>|<saddr>}]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),Login[\s]+succeeded[\s]+for[\s]+user[\s]+'(?<username>[^']*)'\.[\s]+(Connection[\s]+made[\s]+using[\s]+(?<fld13>[^\s]*)[\s]+authentication\.[\s]+|[\s]*Connection:[\s]+non\-trusted\.[\s]+)\[CLIENT:[\s]+(<(?<saddr>[^>]*)>|(?<saddr>[^\]]*))\]$" }
				id => "message-Application_18454_MSSQLSERVER"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: non-trusted"
					"[event][id]" => "Application_18454_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_18454_MSSQLSERVER"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_18454_MSSQLSERVER:01
		# line in RSA: <event_log>,rn=<fld10> cid=<fld11> eid=<fld12>,<fld14> <fld55>,<id>,<event_source>,<fld13>,<fld26>,<event_computer>,<fld16>,<fld17>,
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld10} cid=%{fld11} eid=%{fld12},%{fld14} %{fld55},%{id},%{event_source},%{fld13},%{fld26},%{event_computer},%{fld16},%{fld17}," }
				id => "message-Application_18454_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "Login succeeded for user. Connection: trusted"
					"[event][id]" => "Application_18454_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_18454_MSSQLSERVER:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_18456_MSSQLSERVER" {
		# MESSAGE Application_18456_MSSQLSERVER:01
		# line in RSA:  <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Login failed for user '<username>'. {Reason: <result>. [CLIENT: <saddr>]|[CLIENT: <saddr>]|Reason: <result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),Login[\s]+failed[\s]+for[\s]+user[\s]+'(?<username>[^']*)'\.[\s]+(Reason:[\s]+(?<result>[^\.]*)\.[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|Reason:[\s]+(?<result>.*))$" }
				id => "message-Application_18456_MSSQLSERVER:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Login failed for user"
					"[event][id]" => "Application_18456_MSSQLSERVER:01"
					"[rsa][message][id1]" => "Application_18456_MSSQLSERVER:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_18456_MSSQLSERVER
		# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},%{event_description}" }
				id => "message-Application_18456_MSSQLSERVER"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Application_18456_MSSQLSERVER"
					"[rsa][message][id1]" => "Application_18456_MSSQLSERVER"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld55}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId63
	# line in RSA:  <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,Login failed for user '<username>'. {Reason: <result>. <info> [CLIENT: <saddr>]|<info> [CLIENT: <saddr>]|<info>}
	else if [logstash][msgparser][id] == "msgParserId63" {
		grok {
			match => { "message" => "^[\s]*(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),Login[\s]+failed[\s]+for[\s]+user[\s]+'(?<username>[^']*)'\.[\s]+(Reason:[\s]+(?<result>[^\.]*)\.[\s]+(?<info>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|(?<info>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|(?<info>.*))$" }
			id => "msgParserId63"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Login failed for user"
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId64
	# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
	else if [logstash][msgparser][id] == "msgParserId64" {
		grok {
			match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
			id => "msgParserId64"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "AL" {
		# MESSAGE ALTER
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-ALTER"
				add_field => {
					"[event][id]" => "ALTER"
					"[rsa][message][id1]" => "ALTER"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ALTER:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-ALTER:01"
				add_field => {
					"[event][id]" => "ALTER:01"
					"[rsa][message][id1]" => "ALTER:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "APRL" {
		# MESSAGE ADD_MEMBER
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-ADD_MEMBER"
				add_field => {
					"[event][id]" => "ADD_MEMBER"
					"[rsa][message][id1]" => "ADD_MEMBER"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ADD_MEMBER:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-ADD_MEMBER:01"
				add_field => {
					"[event][id]" => "ADD_MEMBER:01"
					"[rsa][message][id1]" => "ADD_MEMBER:01"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "AUSC" {
		# MESSAGE AUDIT_SESSION_CHANGED
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-AUDIT_SESSION_CHANGED"
				add_field => {
					"[event][id]" => "AUDIT_SESSION_CHANGED"
					"[rsa][message][id1]" => "AUDIT_SESSION_CHANGED"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUDIT_SESSION_CHANGED:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-AUDIT_SESSION_CHANGED:01"
				add_field => {
					"[event][id]" => "AUDIT_SESSION_CHANGED:01"
					"[rsa][message][id1]" => "AUDIT_SESSION_CHANGED:01"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "BA" {
		# MESSAGE BACKUP
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-BACKUP"
				add_field => {
					"[event][id]" => "BACKUP"
					"[rsa][message][id1]" => "BACKUP"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE BACKUP:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-BACKUP:01"
				add_field => {
					"[event][id]" => "BACKUP:01"
					"[rsa][message][id1]" => "BACKUP:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "BAL" {
		# MESSAGE BACKUP_LOG
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-BACKUP_LOG"
				add_field => {
					"[event][id]" => "BACKUP_LOG"
					"[rsa][message][id1]" => "BACKUP_LOG"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE BACKUP_LOG:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-BACKUP_LOG:01"
				add_field => {
					"[event][id]" => "BACKUP_LOG:01"
					"[rsa][message][id1]" => "BACKUP_LOG:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "CR" {
		# MESSAGE CREATE
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-CREATE"
				add_field => {
					"[event][id]" => "CREATE"
					"[rsa][message][id1]" => "CREATE"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CREATE:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-CREATE:01"
				add_field => {
					"[event][id]" => "CREATE:01"
					"[rsa][message][id1]" => "CREATE:01"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId66
	# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: audit_schema_version:<version> event_time:<fld4>|Audit event: event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>|is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> sequence_group_id:<fld49>|class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info> user_defined_information:<fld91>|<action> additional_information:<info>|<action>} 
	else if [logstash][msgparser][id] == "msgParserId66" {
		grok {
			match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*)|Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+sequence_group_id:(?<fld49>[^\s]*)|class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)[\s]+user_defined_information:(?<fld91>[^\s]*)|(?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
			id => "msgParserId66"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "DBCC" {
		# MESSAGE DBCC
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-DBCC"
				add_field => {
					"[event][id]" => "DBCC"
					"[rsa][message][id1]" => "DBCC"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DBCC:01
		# line in RSA: <fld1>,<hostname>,<fld20>,<fld2>,Audit event:<fld3> event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld5> session_id:<sessionid> server_principal_id:<fld6> database_principal_id:<fld7> target_server_principal_id:<fld8> target_database_principal_id:<fld9> object_id:<fld10> user_defined_event_id:<fld11> class_type:<obj_type> permission_bitmask:<fld12> session_server_principal_name:<fld13> server_principal_name:<username> server_principal_sid:<fld14> database_principal_name:<fld15> target_server_principal_name:<c_username> target_server_principal_sid:<fld17> target_database_principal_name:<fld18> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{ <action> additional_information:<info> | <action> } user_defined_information:<fld19>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld20>[^,]*),(?<fld2>[^,]*),Audit[\s]+event:(?<fld3>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld5>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld6>[^\s]*)[\s]+database_principal_id:(?<fld7>[^\s]*)[\s]+target_server_principal_id:(?<fld8>[^\s]*)[\s]+target_database_principal_id:(?<fld9>[^\s]*)[\s]+object_id:(?<fld10>[^\s]*)[\s]+user_defined_event_id:(?<fld11>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld12>[^\s]*)[\s]+session_server_principal_name:(?<fld13>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<fld14>[^\s]*)[\s]+database_principal_name:(?<fld15>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld17>[^\s]*)[\s]+target_database_principal_name:(?<fld18>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:([\s]*(?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)[\s]+|[\s]*(?<action>[^\s]*)[\s]+)[\s]+user_defined_information:(?<fld19>.*)$" }
				id => "message-DBCC:01"
				add_field => {
					"[event][id]" => "DBCC:01"
					"[rsa][message][id1]" => "DBCC:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001082
		# line in RSA:  <fld30> <fld31> <event_source> DBCC <fld1> (<fld2>) executed by <fld3> found <fld4> errors and repaired <fld5> errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC %{fld1} (%{fld2}) executed by %{fld3} found %{fld4} errors and repaired %{fld5} errors." }
				id => "message-001082"
				add_field => {
					"[event][id]" => "001082"
					"[rsa][message][id1]" => "001082"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001083
		# line in RSA:  <fld30> <fld31> <event_source> DBCC <fld1> scanning '<fld2>' table... 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC %{fld1} scanning '%{fld2}' table..." }
				id => "message-001083"
				add_field => {
					"[event][id]" => "001083"
					"[rsa][message][id1]" => "001083"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001084
		# line in RSA:  <fld30> <fld31> <event_source> DBCC cannot find the function <fld1> in the library <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC cannot find the function %{fld1} in the library %{fld2}." }
				id => "message-001084"
				add_field => {
					"[event][id]" => "001084"
					"[rsa][message][id1]" => "001084"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001085
		# line in RSA:  <fld30> <fld31> <event_source> DBCC cannot find the library initialization function <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC cannot find the library initialization function %{fld1}." }
				id => "message-001085"
				add_field => {
					"[event][id]" => "001085"
					"[rsa][message][id1]" => "001085"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001086
		# line in RSA:  <fld30> <fld31> <event_source> DBCC cannot free DLL <fld1>. SQL Server depends on this DLL to function properly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC cannot free DLL %{fld1}. SQL Server depends on this DLL to function properly." }
				id => "message-001086"
				add_field => {
					"[event][id]" => "001086"
					"[rsa][message][id1]" => "001086"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001087
		# line in RSA:  <fld30> <fld31> <event_source> DBCC cannot free DLL '<fld1>'. The DLL is in use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC cannot free DLL '%{fld1}'. The DLL is in use." }
				id => "message-001087"
				add_field => {
					"[event][id]" => "001087"
					"[rsa][message][id1]" => "001087"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001088
		# line in RSA:  <fld30> <fld31> <event_source> DBCC DBCONTROL error. Database was not made read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC DBCONTROL error. Database was not made read-only." }
				id => "message-001088"
				add_field => {
					"[event][id]" => "001088"
					"[rsa][message][id1]" => "001088"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001089
		# line in RSA:  <fld30> <fld31> <event_source> DBCC DBCONTROL error. Database was not made single user. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC DBCONTROL error. Database was not made single user." }
				id => "message-001089"
				add_field => {
					"[event][id]" => "001089"
					"[rsa][message][id1]" => "001089"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001090
		# line in RSA:  <fld30> <fld31> <event_source> DBCC DBCONTROL error. Database was not placed offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC DBCONTROL error. Database was not placed offline." }
				id => "message-001090"
				add_field => {
					"[event][id]" => "001090"
					"[rsa][message][id1]" => "001090"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001091
		# line in RSA:  <fld30> <fld31> <event_source> DBCC DBRECOVER failed for database ID <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC DBRECOVER failed for database ID %{fld1}." }
				id => "message-001091"
				add_field => {
					"[event][id]" => "001091"
					"[rsa][message][id1]" => "001091"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001092
		# line in RSA:  <fld30> <fld31> <event_source> DBCC DBREINDEX cannot be used on system tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC DBREINDEX cannot be used on system tables." }
				id => "message-001092"
				add_field => {
					"[event][id]" => "001092"
					"[rsa][message][id1]" => "001092"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001093
		# line in RSA:  <fld30> <fld31> <event_source> DBCC DBREPAIR: '<fld1>' index restored for '<fld2>.<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC DBREPAIR: '%{fld1}' index restored for '%{fld2}.%{fld3}'." }
				id => "message-001093"
				add_field => {
					"[event][id]" => "001093"
					"[rsa][message][id1]" => "001093"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001094
		# line in RSA:  <fld30> <fld31> <event_source> DBCC execution completed. If DBCC printed error messages, contact your system administrator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC execution completed. If DBCC printed error messages, contact your system administrator." }
				id => "message-001094"
				add_field => {
					"[event][id]" => "001094"
					"[rsa][message][id1]" => "001094"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001095
		# line in RSA:  <fld30> <fld31> <event_source> DBCC function <fld1> in the library <fld2> generated an access violation. SQL Server is terminating process <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC function %{fld1} in the library %{fld2} generated an access violation. SQL Server is terminating process %{fld3}." }
				id => "message-001095"
				add_field => {
					"[event][id]" => "001095"
					"[rsa][message][id1]" => "001095"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001096
		# line in RSA:  <fld30> <fld31> <event_source> DBCC INDEXDEFRAG cannot be used on system table indexes 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC INDEXDEFRAG cannot be used on system table indexes" }
				id => "message-001096"
				add_field => {
					"[event][id]" => "001096"
					"[rsa][message][id1]" => "001096"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001097
		# line in RSA:  <fld30> <fld31> <event_source> DBCC results for '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC results for '%{fld1}'." }
				id => "message-001097"
				add_field => {
					"[event][id]" => "001097"
					"[rsa][message][id1]" => "001097"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001098
		# line in RSA:  <fld30> <fld31> <event_source> DBCC SHRINKFILE could not shrink file <fld1>. Log files are not supported. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC SHRINKFILE could not shrink file %{fld1}. Log files are not supported." }
				id => "message-001098"
				add_field => {
					"[event][id]" => "001098"
					"[rsa][message][id1]" => "001098"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001099
		# line in RSA:  <fld30> <fld31> <event_source> DBCC TRACEOFF <fld1>, server process ID (<fld2>) <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC TRACEOFF %{fld1}, server process ID (%{fld2}) %{fld3}." }
				id => "message-001099"
				add_field => {
					"[event][id]" => "001099"
					"[rsa][message][id1]" => "001099"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001100
		# line in RSA:  <fld30> <fld31> <event_source> DBCC TRACEON <fld1>, server process ID (<fld2>) <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC TRACEON %{fld1}, server process ID (%{fld2}) %{fld3}." }
				id => "message-001100"
				add_field => {
					"[event][id]" => "001100"
					"[rsa][message][id1]" => "001100"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001101
		# line in RSA:  <fld30> <fld31> <event_source> DBCC UPDATEUSAGE: sysindexes row updated for table '<fld1>' (index ID <fld2>): 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC UPDATEUSAGE: sysindexes row updated for table '%{fld1}' (index ID %{fld2}):" }
				id => "message-001101"
				add_field => {
					"[event][id]" => "001101"
					"[rsa][message][id1]" => "001101"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001102
		# line in RSA:  <fld30> <fld31> <event_source> DBCC: Compaction phase of index '<fld1>' is <fld2> complete. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC: Compaction phase of index '%{fld1}' is %{fld2} complete." }
				id => "message-001102"
				add_field => {
					"[event][id]" => "001102"
					"[rsa][message][id1]" => "001102"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001103
		# line in RSA:  <fld30> <fld31> <event_source> DBCC: Defrag phase of index '<fld1>' is <fld2> complete. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBCC: Defrag phase of index '%{fld1}' is %{fld2} complete." }
				id => "message-001103"
				add_field => {
					"[event][id]" => "001103"
					"[rsa][message][id1]" => "001103"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "DL" {
		# MESSAGE DELETE
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-DELETE"
				add_field => {
					"[event][id]" => "DELETE"
					"[rsa][message][id1]" => "DELETE"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DELETE:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-DELETE:01"
				add_field => {
					"[event][id]" => "DELETE:01"
					"[rsa][message][id1]" => "DELETE:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId65
	# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
	else if [logstash][msgparser][id] == "msgParserId65" {
		grok {
			match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
			id => "msgParserId65"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "DR" {
		# MESSAGE DROP
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-DROP"
				add_field => {
					"[event][id]" => "DROP"
					"[rsa][message][id1]" => "DROP"
					"[event][categoryid]" => "1701030000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DROP:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-DROP:01"
				add_field => {
					"[event][id]" => "DROP:01"
					"[rsa][message][id1]" => "DROP:01"
					"[event][categoryid]" => "1701030000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "EX" {
		# MESSAGE EXECUTE
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-EXECUTE"
				add_field => {
					"[event][id]" => "EXECUTE"
					"[rsa][message][id1]" => "EXECUTE"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE EXECUTE:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-EXECUTE:01"
				add_field => {
					"[event][id]" => "EXECUTE:01"
					"[rsa][message][id1]" => "EXECUTE:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "G" {
		# MESSAGE GRANT
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-GRANT"
				add_field => {
					"[event][id]" => "GRANT"
					"[rsa][message][id1]" => "GRANT"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE GRANT:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld46> {transaction_id:<fld47> class_type:<obj_type>|class_type:<obj_type>} permission_bitmask:<permissions> {sequence_group_id:<fld48> session_server_principal_name:<fld11>|session_server_principal_name:<fld11>} server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info> user_defined_information:<fld91>|<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld46>[^\s]*)[\s]+(transaction_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)|class_type:(?<obj_type>[^\s]*))[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+(sequence_group_id:(?<fld48>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)|session_server_principal_name:(?<fld11>[^\s]*))[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)[\s]+user_defined_information:(?<fld91>[^\s]*)|(?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-GRANT:01"
				add_field => {
					"[event][id]" => "GRANT:01"
					"[rsa][message][id1]" => "GRANT:01"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "IN" {
		# MESSAGE INSERT
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-INSERT"
				add_field => {
					"[event][id]" => "INSERT"
					"[rsa][message][id1]" => "INSERT"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE INSERT:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-INSERT:01"
				add_field => {
					"[event][id]" => "INSERT:01"
					"[rsa][message][id1]" => "INSERT:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "LGDA" {
		# MESSAGE DISABLE
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-DISABLE"
				add_field => {
					"[event][id]" => "DISABLE"
					"[rsa][message][id1]" => "DISABLE"
					"[event][categoryid]" => "1402020400"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE DISABLE:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld37> class_type:<obj_type> permission_bitmask:<fld38> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld37>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld38>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-DISABLE:01"
				add_field => {
					"[event][id]" => "DISABLE:01"
					"[rsa][message][id1]" => "DISABLE:01"
					"[event][categoryid]" => "1402020400"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId70
	# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> Reason: <result> [CLIENT: <saddr>] additional_information:<info>|<action> [CLIENT: <saddr>] additional_information:<info>|<action>} 
	else if [logstash][msgparser][id] == "msgParserId70" {
		grok {
			match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\][\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\][\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
			id => "msgParserId70"
			add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "LGIF" {
		# MESSAGE LOGIN_FAILED
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> Reason: <result> [CLIENT: <saddr>] additional_information:<info>|<action> [CLIENT: <saddr>] additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\][\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\][\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-LOGIN_FAILED"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "LOGIN_FAILED"
					"[rsa][message][id1]" => "LOGIN_FAILED"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE LOGIN_FAILED:04
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:Login failed for user '<fld77>'. Reason: <result> [CLIENT: <saddr>] additional_information:<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:Login[\s]+failed[\s]+for[\s]+user[\s]+'(?<fld77>[^']*)'\.[\s]+Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\][\s]+additional_information:(?<info>.*)$" }
				id => "message-LOGIN_FAILED:04"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "LOGIN_FAILED:04"
					"[rsa][message][id1]" => "LOGIN_FAILED:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE LOGIN_FAILED:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> Reason: <result> [CLIENT: <saddr>] additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+Reason:[\s]+(?<result>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\][\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-LOGIN_FAILED:01"
				add_field => {
					"[event][id]" => "LOGIN_FAILED:01"
					"[rsa][message][id1]" => "LOGIN_FAILED:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "LGIS" {
		# MESSAGE LOGIN_SUCCEEDED
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-LOGIN_SUCCEEDED"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "LOGIN_SUCCEEDED"
					"[rsa][message][id1]" => "LOGIN_SUCCEEDED"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE LOGIN_SUCCESS
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-LOGIN_SUCCESS"
				add_field => {
					"[event][id]" => "LOGIN_SUCCESS"
					"[rsa][message][id1]" => "LOGIN_SUCCESS"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "LGO" {
		# MESSAGE LOGOUT
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-LOGOUT"
				add_field => {
					"[event][id]" => "LOGOUT"
					"[rsa][message][id1]" => "LOGOUT"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE LOGOUT:02
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,{Audit event: event_time:<fld4>| Audit event: audit_schema_version:<version> event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>| is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld46> class_type:<obj_type> permission_bitmask:<fld47> sequence_group_id:<fld48>| class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld56> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),(Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)|[\s]*Audit[\s]+event:[\s]+audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|[\s]*is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld46>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<fld47>[^\s]*)[\s]+sequence_group_id:(?<fld48>[^\s]*)|[\s]*class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld56>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-LOGOUT:02"
				add_field => {
					"[event][id]" => "LOGOUT:02"
					"[rsa][message][id1]" => "LOGOUT:02"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId73
	# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
	else if [logstash][msgparser][id] == "msgParserId73" {
		grok {
			match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
			id => "msgParserId73"
			add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "PWCS" {
		# MESSAGE CHANGE_OWN_PASSWORD
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-CHANGE_OWN_PASSWORD"
				add_field => {
					"[event][id]" => "CHANGE_OWN_PASSWORD"
					"[rsa][message][id1]" => "CHANGE_OWN_PASSWORD"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CHANGE_OWN_PASSWORD:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-CHANGE_OWN_PASSWORD:01"
				add_field => {
					"[event][id]" => "CHANGE_OWN_PASSWORD:01"
					"[rsa][message][id1]" => "CHANGE_OWN_PASSWORD:01"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId74
	# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: {audit_schema_version:<version> event_time:<fld4>|event_time:<fld4>} sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> {permission_bitmask:<permissions> is_column_permission:<fld6>|is_column_permission:<fld6>} session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> {user_defined_event_id:<fld12> class_type:<obj_type> permission_bitmask:<permissions> sequence_group_id:<fld14>|class_type:<obj_type>} session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld93> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info> user_defined_information:<fld91>|<action> additional_information:<info>|<action>} 
	else if [logstash][msgparser][id] == "msgParserId74" {
		grok {
			match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+(audit_schema_version:(?<version>[^\s]*)[\s]+event_time:(?<fld4>[^\s]*)|event_time:(?<fld4>[^\s]*))[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+(permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)|is_column_permission:(?<fld6>[^\s]*))[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+(user_defined_event_id:(?<fld12>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+sequence_group_id:(?<fld14>[^\s]*)|class_type:(?<obj_type>[^\s]*))[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld93>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)[\s]+user_defined_information:(?<fld91>[^\s]*)|(?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
			id => "msgParserId74"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "PWR" {
		# MESSAGE RESET_PASSWORD
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-RESET_PASSWORD"
				add_field => {
					"[event][id]" => "RESET_PASSWORD"
					"[rsa][message][id1]" => "RESET_PASSWORD"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE RESET_PASSWORD:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-RESET_PASSWORD:01"
				add_field => {
					"[event][id]" => "RESET_PASSWORD:01"
					"[rsa][message][id1]" => "RESET_PASSWORD:01"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "PWU" {
		# MESSAGE UNLOCK_ACCOUNT
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-UNLOCK_ACCOUNT"
				add_field => {
					"[event][id]" => "UNLOCK_ACCOUNT"
					"[rsa][message][id1]" => "UNLOCK_ACCOUNT"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE UNLOCK_ACCOUNT:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-UNLOCK_ACCOUNT:01"
				add_field => {
					"[event][id]" => "UNLOCK_ACCOUNT:01"
					"[rsa][message][id1]" => "UNLOCK_ACCOUNT:01"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SL" {
		# MESSAGE SELECT
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-SELECT"
				add_field => {
					"[event][id]" => "SELECT"
					"[rsa][message][id1]" => "SELECT"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SELECT:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-SELECT:01"
				add_field => {
					"[event][id]" => "SELECT:01"
					"[rsa][message][id1]" => "SELECT:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "UP" {
		# MESSAGE UPDATE
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> permission_bitmask:<permissions> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> class_type:<obj_type> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>[^\s]*)|(?<action>[^\s]*))[\s]+$" }
				id => "message-UPDATE"
				add_field => {
					"[event][id]" => "UPDATE"
					"[rsa][message][id1]" => "UPDATE"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE UPDATE:01
		# line in RSA: <fld1>,<hostname>,<fld2>,<fld3>,Audit event: event_time:<fld4> sequence_number:<dclass_counter1> action_id:<event_type> succeeded:<event_state> is_column_permission:<fld6> session_id:<sessionid> server_principal_id:<fld7> database_principal_id:<fld8> target_server_principal_id:<fld9> target_database_principal_id:<fld10> object_id:<fld36> user_defined_event_id:<fld47> class_type:<obj_type> permission_bitmask:<permissions> session_server_principal_name:<fld11> server_principal_name:<username> server_principal_sid:<logon_id> database_principal_name:<fld14> target_server_principal_name:<c_username> target_server_principal_sid:<fld46> target_database_principal_name:<fld16> server_instance_name:<instance> database_name:<db_name> schema_name:<owner> object_name:<obj_name> statement:{<action> additional_information:<info>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^,]*),(?<hostname>[^,]*),(?<fld2>[^,]*),(?<fld3>[^,]*),Audit[\s]+event:[\s]+event_time:(?<fld4>[^\s]*)[\s]+sequence_number:(?<dclass_counter1>[^\s]*)[\s]+action_id:(?<event_type>[^\s]*)[\s]+succeeded:(?<event_state>[^\s]*)[\s]+is_column_permission:(?<fld6>[^\s]*)[\s]+session_id:(?<sessionid>[^\s]*)[\s]+server_principal_id:(?<fld7>[^\s]*)[\s]+database_principal_id:(?<fld8>[^\s]*)[\s]+target_server_principal_id:(?<fld9>[^\s]*)[\s]+target_database_principal_id:(?<fld10>[^\s]*)[\s]+object_id:(?<fld36>[^\s]*)[\s]+user_defined_event_id:(?<fld47>[^\s]*)[\s]+class_type:(?<obj_type>[^\s]*)[\s]+permission_bitmask:(?<permissions>[^\s]*)[\s]+session_server_principal_name:(?<fld11>[^\s]*)[\s]+server_principal_name:(?<username>[^\s]*)[\s]+server_principal_sid:(?<logon_id>[^\s]*)[\s]+database_principal_name:(?<fld14>[^\s]*)[\s]+target_server_principal_name:(?<c_username>[^\s]*)[\s]+target_server_principal_sid:(?<fld46>[^\s]*)[\s]+target_database_principal_name:(?<fld16>[^\s]*)[\s]+server_instance_name:(?<instance>[^\s]*)[\s]+database_name:(?<db_name>[^\s]*)[\s]+schema_name:(?<owner>[^\s]*)[\s]+object_name:(?<obj_name>[^\s]*)[\s]+statement:((?<action>[^\s]*)[\s]+additional_information:(?<info>.*)|(?<action>.*))$" }
				id => "message-UPDATE:01"
				add_field => {
					"[event][id]" => "UPDATE:01"
					"[rsa][message][id1]" => "UPDATE:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId76
	# line in RSA:  <fld30> <fld31> <event_source> @dts_package_name can be set for push subscriptions only. 
	else if [logstash][msgparser][id] == "msgParserId76" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} @dts_package_name can be set for push subscriptions only." }
			id => "msgParserId76"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "@dynamic_snapshot_location" {
		# MESSAGE 000002
		# line in RSA:  <fld30> <fld31> <event_source> @dynamic_snapshot_location cannot be a non-empty string while @alt_snapshot_folder is neither empty nor null. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} @dynamic_snapshot_location cannot be a non-empty string while @alt_snapshot_folder is neither empty nor null." }
				id => "message-000002"
				add_field => {
					"[event][id]" => "000002"
					"[rsa][message][id1]" => "000002"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000003
		# line in RSA:  <fld30> <fld31> <event_source> @dynamic_snapshot_location cannot be a non-empty string while @use_ftp is 'true'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} @dynamic_snapshot_location cannot be a non-empty string while @use_ftp is 'true'." }
				id => "message-000003"
				add_field => {
					"[event][id]" => "000003"
					"[rsa][message][id1]" => "000003"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "@freq_interval" {
		# MESSAGE 000004
		# line in RSA:  <fld30> <fld31> <event_source> @freq_interval must be a valid day of the week bitmask [Sunday = 1 .. Saturday = 64] for a weekly job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} @freq_interval must be a valid day of the week bitmask [Sunday = 1 .. Saturday = 64] for a weekly job." }
				id => "message-000004"
				add_field => {
					"[event][id]" => "000004"
					"[rsa][message][id1]" => "000004"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000005
		# line in RSA:  <fld30> <fld31> <event_source> @freq_interval must be at least 1 for a daily job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} @freq_interval must be at least 1 for a daily job." }
				id => "message-000005"
				add_field => {
					"[event][id]" => "000005"
					"[rsa][message][id1]" => "000005"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000006
		# line in RSA:  <fld30> <fld31> <event_source> @freq_interval must be between 1 and 10 (1 = Sunday .. 7 = Saturday, 8 = Day, 9 = Weekday, 10 = Weekend-day) for a monthly-relative job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} @freq_interval must be between 1 and 10 (1 = Sunday .. 7 = Saturday, 8 = Day, 9 = Weekday, 10 = Weekend-day) for a monthly-relative job." }
				id => "message-000006"
				add_field => {
					"[event][id]" => "000006"
					"[rsa][message][id1]" => "000006"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000007
		# line in RSA:  <fld30> <fld31> <event_source> @freq_interval must be between 1 and 31 for a monthly job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} @freq_interval must be between 1 and 31 for a monthly job." }
				id => "message-000007"
				add_field => {
					"[event][id]" => "000007"
					"[rsa][message][id1]" => "000007"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId83
	# line in RSA:  <fld30> <fld31> <event_source> @freq_recurrence_factor must be at least 1. 
	else if [logstash][msgparser][id] == "msgParserId83" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} @freq_recurrence_factor must be at least 1." }
			id => "msgParserId83"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId84
	# line in RSA:  <fld30> <fld31> <event_source> @freq_relative_interval must be one of 1st (0x1), 2nd (0x2), 3rd [0x4], 4th (0x8) or Last (0x10). 
	else if [logstash][msgparser][id] == "msgParserId84" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} @freq_relative_interval must be one of 1st (0x1), 2nd (0x2), 3rd [0x4], 4th (0x8) or Last (0x10)." }
			id => "msgParserId84"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "@identity_range" {
		# MESSAGE 000010
		# line in RSA:  <fld30> <fld31> <event_source> @identity_range, @pub_identity_range, and @threshold must be NULL when @auto_identity_support is set to FALSE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} @identity_range, @pub_identity_range, and @threshold must be NULL when @auto_identity_support is set to FALSE." }
				id => "message-000010"
				add_field => {
					"[event][id]" => "000010"
					"[rsa][message][id1]" => "000010"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000011
		# line in RSA:  <fld30> <fld31> <event_source> @identity_range, @pub_identity_range, or @threshold cannot be NULL when @auto_identity_support is set to TRUE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} @identity_range, @pub_identity_range, or @threshold cannot be NULL when @auto_identity_support is set to TRUE." }
				id => "message-000011"
				add_field => {
					"[event][id]" => "000011"
					"[rsa][message][id1]" => "000011"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId87
	# line in RSA:  <fld30> <fld31> <event_source> @rowcount_only parameter must be the value 0,1, or 2. 0=7.0 compatible checksum. 1=only check rowcounts. 2=new checksum functionality introduced in version 8.0. 
	else if [logstash][msgparser][id] == "msgParserId87" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} @rowcount_only parameter must be the value 0,1, or 2. 0=7.0 compatible checksum. 1=only check rowcounts. 2=new checksum functionality introduced in version 8.0." }
			id => "msgParserId87"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId88
	# line in RSA:  <fld30> <fld31> <event_source> @use_ftp cannot be 'true' while @alt_snapshot_folder is neither NULL nor empty. 
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} @use_ftp cannot be 'true' while @alt_snapshot_folder is neither NULL nor empty." }
			id => "msgParserId88"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId89
	# line in RSA:  <fld30> <fld31> <event_source> @xact_seqno_start and @publisher_database_id must be specified if @command_id is specified. 
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} @xact_seqno_start and @publisher_database_id must be specified if @command_id is specified." }
			id => "msgParserId89"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId90
	# line in RSA:  <fld30> <fld31> <event_source> 1-byte integer data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId90" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} 1-byte integer data type %{fld1}" }
			id => "msgParserId90"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId91
	# line in RSA:  <fld30> <fld31> <event_source> 2-byte integer data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId91" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} 2-byte integer data type %{fld1}" }
			id => "msgParserId91"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "4-byte" {
		# MESSAGE 000017
		# line in RSA:  <fld30> <fld31> <event_source> 4-byte datetime data type, nulls allowed <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 4-byte datetime data type, nulls allowed %{fld1}" }
				id => "message-000017"
				add_field => {
					"[event][id]" => "000017"
					"[rsa][message][id1]" => "000017"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000018
		# line in RSA:  <fld30> <fld31> <event_source> 4-byte float data type, nulls allowed <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 4-byte float data type, nulls allowed %{fld1}" }
				id => "message-000018"
				add_field => {
					"[event][id]" => "000018"
					"[rsa][message][id1]" => "000018"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000019
		# line in RSA:  <fld30> <fld31> <event_source> 4-byte integer data type, nulls allowed <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 4-byte integer data type, nulls allowed %{fld1}" }
				id => "message-000019"
				add_field => {
					"[event][id]" => "000019"
					"[rsa][message][id1]" => "000019"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000020
		# line in RSA:  <fld30> <fld31> <event_source> 4-byte integer data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 4-byte integer data type %{fld1}" }
				id => "message-000020"
				add_field => {
					"[event][id]" => "000020"
					"[rsa][message][id1]" => "000020"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000021
		# line in RSA:  <fld30> <fld31> <event_source> 4-byte money data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 4-byte money data type %{fld1}" }
				id => "message-000021"
				add_field => {
					"[event][id]" => "000021"
					"[rsa][message][id1]" => "000021"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "8000-byte" {
		# MESSAGE 000022
		# line in RSA:  <fld30> <fld31> <event_source> 8000-byte binary data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 8000-byte binary data type %{fld1}" }
				id => "message-000022"
				add_field => {
					"[event][id]" => "000022"
					"[rsa][message][id1]" => "000022"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000023
		# line in RSA:  <fld30> <fld31> <event_source> 8000-byte character data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 8000-byte character data type %{fld1}" }
				id => "message-000023"
				add_field => {
					"[event][id]" => "000023"
					"[rsa][message][id1]" => "000023"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000024
		# line in RSA:  <fld30> <fld31> <event_source> 8000-byte Unicode character data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 8000-byte Unicode character data type %{fld1}" }
				id => "message-000024"
				add_field => {
					"[event][id]" => "000024"
					"[rsa][message][id1]" => "000024"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000025
		# line in RSA:  <fld30> <fld31> <event_source> 8000-byte Unicode variable-length character data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 8000-byte Unicode variable-length character data type %{fld1}" }
				id => "message-000025"
				add_field => {
					"[event][id]" => "000025"
					"[rsa][message][id1]" => "000025"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000026
		# line in RSA:  <fld30> <fld31> <event_source> 8000-byte variable-length binary data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 8000-byte variable-length binary data type %{fld1}" }
				id => "message-000026"
				add_field => {
					"[event][id]" => "000026"
					"[rsa][message][id1]" => "000026"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000027
		# line in RSA:  <fld30> <fld31> <event_source> 8000-byte variable-length character data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 8000-byte variable-length character data type %{fld1}" }
				id => "message-000027"
				add_field => {
					"[event][id]" => "000027"
					"[rsa][message][id1]" => "000027"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "8-byte" {
		# MESSAGE 000028
		# line in RSA:  <fld30> <fld31> <event_source> 8-byte float data type, nulls allowed <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 8-byte float data type, nulls allowed %{fld1}" }
				id => "message-000028"
				add_field => {
					"[event][id]" => "000028"
					"[rsa][message][id1]" => "000028"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000029
		# line in RSA:  <fld30> <fld31> <event_source> 8-byte float data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} 8-byte float data type %{fld1}" }
				id => "message-000029"
				add_field => {
					"[event][id]" => "000029"
					"[rsa][message][id1]" => "000029"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "a" {
		# MESSAGE 000030
		# line in RSA:  <fld30> <fld31> <event_source> a COMPUTE clause 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} a COMPUTE clause" }
				id => "message-000030"
				add_field => {
					"[event][id]" => "000030"
					"[rsa][message][id1]" => "000030"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000031
		# line in RSA:  <fld30> <fld31> <event_source> a cursor declaration 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} a cursor declaration" }
				id => "message-000031"
				add_field => {
					"[event][id]" => "000031"
					"[rsa][message][id1]" => "000031"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000032
		# line in RSA:  <fld30> <fld31> <event_source> a DISTINCT clause 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} a DISTINCT clause" }
				id => "message-000032"
				add_field => {
					"[event][id]" => "000032"
					"[rsa][message][id1]" => "000032"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000033
		# line in RSA:  <fld30> <fld31> <event_source> a procedure or trigger 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} a procedure or trigger" }
				id => "message-000033"
				add_field => {
					"[event][id]" => "000033"
					"[rsa][message][id1]" => "000033"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000034
		# line in RSA:  <fld30> <fld31> <event_source> a SELECT INTO statement 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} a SELECT INTO statement" }
				id => "message-000034"
				add_field => {
					"[event][id]" => "000034"
					"[rsa][message][id1]" => "000034"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000035
		# line in RSA:  <fld30> <fld31> <event_source> a USE database statement 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} a USE database statement" }
				id => "message-000035"
				add_field => {
					"[event][id]" => "000035"
					"[rsa][message][id1]" => "000035"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000036
		# line in RSA:  <fld30> <fld31> <event_source> a view 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} a view" }
				id => "message-000036"
				add_field => {
					"[event][id]" => "000036"
					"[rsa][message][id1]" => "000036"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "A" {
		# MESSAGE 000037
		# line in RSA:  <fld30> <fld31> <event_source> A clustered index cannot be created on the view '<fld1>' because the index key includes columns which are not in the GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A clustered index cannot be created on the view '%{fld1}' because the index key includes columns which are not in the GROUP BY clause." }
				id => "message-000037"
				add_field => {
					"[event][id]" => "000037"
					"[rsa][message][id1]" => "000037"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000038
		# line in RSA:  <fld30> <fld31> <event_source> A column has been specified more than once in the order by list. Columns in the order by list must be unique. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A column has been specified more than once in the order by list. Columns in the order by list must be unique." }
				id => "message-000038"
				add_field => {
					"[event][id]" => "000038"
					"[rsa][message][id1]" => "000038"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000039
		# line in RSA:  <fld30> <fld31> <event_source> A column insert or update conflicts with a rule imposed by a previous CREATE RULE statement. The statement was terminated. The conflict occurred in database '<fld1>', table '<fld2>', column '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A column insert or update conflicts with a rule imposed by a previous CREATE RULE statement. The statement was terminated. The conflict occurred in database '%{fld1}', table '%{fld2}', column '%{fld3}'." }
				id => "message-000039"
				add_field => {
					"[event][id]" => "000039"
					"[rsa][message][id1]" => "000039"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000040
		# line in RSA:  <fld30> <fld31> <event_source> A column used in filter clause '<fld1>' either does not exist in the table '<fld2>' or cannot be excluded from the current partition.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A column used in filter clause '%{fld1}' either does not exist in the table '%{fld2}' or cannot be excluded from the current partition." }
				id => "message-000040"
				add_field => {
					"[event][id]" => "000040"
					"[rsa][message][id1]" => "000040"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000041
		# line in RSA:  <fld30> <fld31> <event_source> A COMPUTE BY item was not found in the order by list. All expressions in the compute by list must also be present in the order by list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A COMPUTE BY item was not found in the order by list. All expressions in the compute by list must also be present in the order by list." }
				id => "message-000041"
				add_field => {
					"[event][id]" => "000041"
					"[rsa][message][id1]" => "000041"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000042
		# line in RSA:  <fld30> <fld31> <event_source> A CONTAINS or FREETEXT predicate can only operate on one table. Qualify the use of * with a table name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A CONTAINS or FREETEXT predicate can only operate on one table. Qualify the use of * with a table name." }
				id => "message-000042"
				add_field => {
					"[event][id]" => "000042"
					"[rsa][message][id1]" => "000042"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000043
		# line in RSA:  <fld30> <fld31> <event_source> A correlated expression is invalid because it is not in a GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A correlated expression is invalid because it is not in a GROUP BY clause." }
				id => "message-000043"
				add_field => {
					"[event][id]" => "000043"
					"[rsa][message][id1]" => "000043"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000044
		# line in RSA:  <fld30> <fld31> <event_source> A cursor plan could not be generated for the given statement because it contains textptr ( inrow lob ). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A cursor plan could not be generated for the given statement because it contains textptr ( inrow lob )." }
				id => "message-000044"
				add_field => {
					"[event][id]" => "000044"
					"[rsa][message][id1]" => "000044"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000045
		# line in RSA:  <fld30> <fld31> <event_source> A cursor variable cannot be used as a parameter to a remote procedure call. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A cursor variable cannot be used as a parameter to a remote procedure call." }
				id => "message-000045"
				add_field => {
					"[event][id]" => "000045"
					"[rsa][message][id1]" => "000045"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000046
		# line in RSA:  <fld30> <fld31> <event_source> A cursor with the name '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A cursor with the name '%{fld1}' already exists." }
				id => "message-000046"
				add_field => {
					"[event][id]" => "000046"
					"[rsa][message][id1]" => "000046"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000047
		# line in RSA:  <fld30> <fld31> <event_source> A cursor with the name '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A cursor with the name '%{fld1}' does not exist." }
				id => "message-000047"
				add_field => {
					"[event][id]" => "000047"
					"[rsa][message][id1]" => "000047"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000048
		# line in RSA:  <fld30> <fld31> <event_source> A default-name mapping of a remote login from remote server '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A default-name mapping of a remote login from remote server '%{fld1}' already exists." }
				id => "message-000048"
				add_field => {
					"[event][id]" => "000048"
					"[rsa][message][id1]" => "000048"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000049
		# line in RSA:  <fld30> <fld31> <event_source> A domain error occurred. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A domain error occurred." }
				id => "message-000049"
				add_field => {
					"[event][id]" => "000049"
					"[rsa][message][id1]" => "000049"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000050
		# line in RSA:  <fld30> <fld31> <event_source> A dynamic snapshot job can be scheduled only for a publication with dynamic filtering enabled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A dynamic snapshot job can be scheduled only for a publication with dynamic filtering enabled." }
				id => "message-000050"
				add_field => {
					"[event][id]" => "000050"
					"[rsa][message][id1]" => "000050"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000051
		# line in RSA:  <fld30> <fld31> <event_source> A failure occurred while giving parameter information to OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A failure occurred while giving parameter information to OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000051"
				add_field => {
					"[event][id]" => "000051"
					"[rsa][message][id1]" => "000051"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000052
		# line in RSA:  <fld30> <fld31> <event_source> A filegroup cannot be added using ALTER DATABASE ADD FILE. Use ALTER DATABASE ADD FILEGROUP. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A filegroup cannot be added using ALTER DATABASE ADD FILE. Use ALTER DATABASE ADD FILEGROUP." }
				id => "message-000052"
				add_field => {
					"[event][id]" => "000052"
					"[rsa][message][id1]" => "000052"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000053
		# line in RSA:  <fld30> <fld31> <event_source> A filegroup cannot be used with log files. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A filegroup cannot be used with log files." }
				id => "message-000053"
				add_field => {
					"[event][id]" => "000053"
					"[rsa][message][id1]" => "000053"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000054
		# line in RSA:  <fld30> <fld31> <event_source> A floating point exception occurred in the user process. Current transaction is canceled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A floating point exception occurred in the user process. Current transaction is canceled." }
				id => "message-000054"
				add_field => {
					"[event][id]" => "000054"
					"[rsa][message][id1]" => "000054"
					"[event][categoryid]" => "1603020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000055
		# line in RSA:  <fld30> <fld31> <event_source> A full-text catalog named '<fld1>' already exists in this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A full-text catalog named '%{fld1}' already exists in this database." }
				id => "message-000055"
				add_field => {
					"[event][id]" => "000055"
					"[rsa][message][id1]" => "000055"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000056
		# line in RSA:  <fld30> <fld31> <event_source> A full-text index for table '<fld1>' has already been created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A full-text index for table '%{fld1}' has already been created." }
				id => "message-000056"
				add_field => {
					"[event][id]" => "000056"
					"[rsa][message][id1]" => "000056"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000057
		# line in RSA:  <fld30> <fld31> <event_source> A GOTO statement references the label '<fld1>' but the label has not been declared. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A GOTO statement references the label '%{fld1}' but the label has not been declared." }
				id => "message-000057"
				add_field => {
					"[event][id]" => "000057"
					"[rsa][message][id1]" => "000057"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000058
		# line in RSA:  <fld30> <fld31> <event_source> A grouping function argument does not match any of the expressions in the GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A grouping function argument does not match any of the expressions in the GROUP BY clause." }
				id => "message-000058"
				add_field => {
					"[event][id]" => "000058"
					"[rsa][message][id1]" => "000058"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000059
		# line in RSA:  <fld30> <fld31> <event_source> A grouping function can only be specified when either CUBE or ROLLUP is specified in the GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A grouping function can only be specified when either CUBE or ROLLUP is specified in the GROUP BY clause." }
				id => "message-000059"
				add_field => {
					"[event][id]" => "000059"
					"[rsa][message][id1]" => "000059"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000060
		# line in RSA:  <fld30> <fld31> <event_source> A log shipping monitor is already defined. Call sp_define_log_shipping_monitor with @delete_existing = 1. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A log shipping monitor is already defined. Call sp_define_log_shipping_monitor with @delete_existing = 1." }
				id => "message-000060"
				add_field => {
					"[event][id]" => "000060"
					"[rsa][message][id1]" => "000060"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000061
		# line in RSA:  <fld30> <fld31> <event_source> A log shipping monitor is already defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A log shipping monitor is already defined." }
				id => "message-000061"
				add_field => {
					"[event][id]" => "000061"
					"[rsa][message][id1]" => "000061"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000062
		# line in RSA:  <fld30> <fld31> <event_source> A member of the sysadmin role must reset the database to multiuser mode with sp_dboption. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A member of the sysadmin role must reset the database to multiuser mode with sp_dboption." }
				id => "message-000062"
				add_field => {
					"[event][id]" => "000062"
					"[rsa][message][id1]" => "000062"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000063
		# line in RSA:  <fld30> <fld31> <event_source> A member of the sysadmin role must set database '<fld1>' to single user mode with sp_dboption before it can be renamed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A member of the sysadmin role must set database '%{fld1}' to single user mode with sp_dboption before it can be renamed." }
				id => "message-000063"
				add_field => {
					"[event][id]" => "000063"
					"[rsa][message][id1]" => "000063"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000064
		# line in RSA:  <fld30> <fld31> <event_source> A performance condition must be formatted as: 'object_name|counter_name|instance_name|comparator(> or << or =)|numeric value'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A performance condition must be formatted as: 'object_name|counter_name|instance_name|comparator(> or < or =)|numeric value'." }
				id => "message-000064"
				add_field => {
					"[event][id]" => "000064"
					"[rsa][message][id1]" => "000064"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000065
		# line in RSA:  <fld30> <fld31> <event_source> A publication must have at least one article before a subscription to it can be created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A publication must have at least one article before a subscription to it can be created." }
				id => "message-000065"
				add_field => {
					"[event][id]" => "000065"
					"[rsa][message][id1]" => "000065"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000066
		# line in RSA:  <fld30> <fld31> <event_source> A publication that allows DTS cannot be enabled for updatable subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A publication that allows DTS cannot be enabled for updatable subscriptions." }
				id => "message-000066"
				add_field => {
					"[event][id]" => "000066"
					"[rsa][message][id1]" => "000066"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000067
		# line in RSA:  <fld30> <fld31> <event_source> A push subscription to the publication '<fld1>' already exists. Use sp_mergesubscription_cleanup to drop defunct push subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A push subscription to the publication '%{fld1}' already exists. Use sp_mergesubscription_cleanup to drop defunct push subscriptions." }
				id => "message-000067"
				add_field => {
					"[event][id]" => "000067"
					"[rsa][message][id1]" => "000067"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000068
		# line in RSA:  <fld30> <fld31> <event_source> A push subscription to the publication exists. Use sp_subscription_cleanup to drop defunct push subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A push subscription to the publication exists. Use sp_subscription_cleanup to drop defunct push subscriptions." }
				id => "message-000068"
				add_field => {
					"[event][id]" => "000068"
					"[rsa][message][id1]" => "000068"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000069
		# line in RSA:  <fld30> <fld31> <event_source> A remote distribution Publisher is not allowed on this server version. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A remote distribution Publisher is not allowed on this server version." }
				id => "message-000069"
				add_field => {
					"[event][id]" => "000069"
					"[rsa][message][id1]" => "000069"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000070
		# line in RSA:  <fld30> <fld31> <event_source> A REMOTE hint can only be specified with an INNER JOIN clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A REMOTE hint can only be specified with an INNER JOIN clause." }
				id => "message-000070"
				add_field => {
					"[event][id]" => "000070"
					"[rsa][message][id1]" => "000070"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000071
		# line in RSA:  <fld30> <fld31> <event_source> A remote user '<username>' already exists for remote server '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A remote user '%{username}' already exists for remote server '%{fld1}'." }
				id => "message-000071"
				add_field => {
					"[event][id]" => "000071"
					"[rsa][message][id1]" => "000071"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000072
		# line in RSA:  <fld30> <fld31> <event_source> A RETURN statement with a return value cannot be used in this context. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A RETURN statement with a return value cannot be used in this context." }
				id => "message-000072"
				add_field => {
					"[event][id]" => "000072"
					"[rsa][message][id1]" => "000072"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000073
		# line in RSA:  <fld30> <fld31> <event_source> A schedule (ID <fld1>, '<fld2>') for this job with this definition already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A schedule (ID %{fld1}, '%{fld2}') for this job with this definition already exists." }
				id => "message-000073"
				add_field => {
					"[event][id]" => "000073"
					"[rsa][message][id1]" => "000073"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000074
		# line in RSA:  <fld30> <fld31> <event_source> A SELECT INTO statement cannot contain a SELECT statement that assigns values to a variable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A SELECT INTO statement cannot contain a SELECT statement that assigns values to a variable." }
				id => "message-000074"
				add_field => {
					"[event][id]" => "000074"
					"[rsa][message][id1]" => "000074"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000075
		# line in RSA:  <fld30> <fld31> <event_source> A SELECT statement that assigns a value to a variable must not be combined with data-retrieval operations. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A SELECT statement that assigns a value to a variable must not be combined with data-retrieval operations." }
				id => "message-000075"
				add_field => {
					"[event][id]" => "000075"
					"[rsa][message][id1]" => "000075"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000076
		# line in RSA:  <fld30> <fld31> <event_source> A server cursor is not allowed on a remote stored procedure or stored procedure with more than one SELECT statement. Use a default result set or client cursor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A server cursor is not allowed on a remote stored procedure or stored procedure with more than one SELECT statement. Use a default result set or client cursor." }
				id => "message-000076"
				add_field => {
					"[event][id]" => "000076"
					"[rsa][message][id1]" => "000076"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000077
		# line in RSA:  <fld30> <fld31> <event_source> A Snapshot Agent must be added for the specified publication before a dynamic snapshot job can be scheduled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A Snapshot Agent must be added for the specified publication before a dynamic snapshot job can be scheduled." }
				id => "message-000077"
				add_field => {
					"[event][id]" => "000077"
					"[rsa][message][id1]" => "000077"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000078
		# line in RSA:  <fld30> <fld31> <event_source> A stored procedure can be published only as a 'serializable proc exec' article, a 'proc exec' article, or a 'proc schema only' article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A stored procedure can be published only as a 'serializable proc exec' article, a 'proc exec' article, or a 'proc schema only' article." }
				id => "message-000078"
				add_field => {
					"[event][id]" => "000078"
					"[rsa][message][id1]" => "000078"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000079
		# line in RSA:  <fld30> <fld31> <event_source> A table can only have one timestamp column. Because table '<fld1>' already has one, the column '<fld2>' cannot be added. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A table can only have one timestamp column. Because table '%{fld1}' already has one, the column '%{fld2}' cannot be added." }
				id => "message-000079"
				add_field => {
					"[event][id]" => "000079"
					"[rsa][message][id1]" => "000079"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000080
		# line in RSA:  <fld30> <fld31> <event_source> A table used in merge replication must have at least one non-computed column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A table used in merge replication must have at least one non-computed column." }
				id => "message-000080"
				add_field => {
					"[event][id]" => "000080"
					"[rsa][message][id1]" => "000080"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000081
		# line in RSA:  <fld30> <fld31> <event_source> A target server cannot be named '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A target server cannot be named '%{fld1}'." }
				id => "message-000081"
				add_field => {
					"[event][id]" => "000081"
					"[rsa][message][id1]" => "000081"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000082
		# line in RSA:  <fld30> <fld31> <event_source> A time out occurred while waiting for memory resources to execute the query. Rerun the query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A time out occurred while waiting for memory resources to execute the query. Rerun the query." }
				id => "message-000082"
				add_field => {
					"[event][id]" => "000082"
					"[rsa][message][id1]" => "000082"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000083
		# line in RSA:  <fld30> <fld31> <event_source> A time out occurred while waiting to optimize the query. Rerun the query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A time out occurred while waiting to optimize the query. Rerun the query." }
				id => "message-000083"
				add_field => {
					"[event][id]" => "000083"
					"[rsa][message][id1]" => "000083"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000084
		# line in RSA:  <fld30> <fld31> <event_source> A USER ATTENTION signal raised during RESTORE LOG is being ignored until the current restore completes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A USER ATTENTION signal raised during RESTORE LOG is being ignored until the current restore completes." }
				id => "message-000084"
				add_field => {
					"[event][id]" => "000084"
					"[rsa][message][id1]" => "000084"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000085
		# line in RSA:  <fld30> <fld31> <event_source> A user name is necessary for SQL Server security. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A user name is necessary for SQL Server security." }
				id => "message-000085"
				add_field => {
					"[event][id]" => "000085"
					"[rsa][message][id1]" => "000085"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000086
		# line in RSA:  <fld30> <fld31> <event_source> A valid identity range is not available. Check the data type of the identity column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A valid identity range is not available. Check the data type of the identity column." }
				id => "message-000086"
				add_field => {
					"[event][id]" => "000086"
					"[rsa][message][id1]" => "000086"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000087
		# line in RSA:  <fld30> <fld31> <event_source> A variable cannot be used to specify a search condition in a fulltext predicate when accessed through a cursor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A variable cannot be used to specify a search condition in a fulltext predicate when accessed through a cursor." }
				id => "message-000087"
				add_field => {
					"[event][id]" => "000087"
					"[rsa][message][id1]" => "000087"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000088
		# line in RSA:  <fld30> <fld31> <event_source> A varno of <fld1> was passed to the opentable system function. The largest valid value is <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A varno of %{fld1} was passed to the opentable system function. The largest valid value is %{fld2}." }
				id => "message-000088"
				add_field => {
					"[event][id]" => "000088"
					"[rsa][message][id1]" => "000088"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE A:01
		# line in RSA:  <fld30> <fld31> <event_source> A <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} A %{info}" }
				id => "message-A:01"
				add_field => {
					"[event][id]" => "A:01"
					"[rsa][message][id1]" => "A:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Access" {
		# MESSAGE 000089
		# line in RSA:  <fld30> <fld31> <event_source> Access denied. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Access denied." }
				id => "message-000089"
				add_field => {
					"[event][id]" => "000089"
					"[rsa][message][id1]" => "000089"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000090
		# line in RSA:  <fld30> <fld31> <event_source> Access is denied due to a password failure 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Access is denied due to a password failure" }
				id => "message-000090"
				add_field => {
					"[event][id]" => "000090"
					"[rsa][message][id1]" => "000090"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000091
		# line in RSA:  <fld30> <fld31> <event_source> Access is denied to '<fld1>', or the path is invalid. Full-text search was not installed properly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Access is denied to '%{fld1}', or the path is invalid. Full-text search was not installed properly." }
				id => "message-000091"
				add_field => {
					"[event][id]" => "000091"
					"[rsa][message][id1]" => "000091"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000092
		# line in RSA:  <fld30> <fld31> <event_source> Access to the remote server is denied because no login-mapping exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Access to the remote server is denied because no login-mapping exists." }
				id => "message-000092"
				add_field => {
					"[event][id]" => "000092"
					"[rsa][message][id1]" => "000092"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Active" {
		# MESSAGE 000093
		# line in RSA:  <fld30> <fld31> <event_source> Active Directory is either not enabled on the network or not supported by the operating system. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Active Directory is either not enabled on the network or not supported by the operating system." }
				id => "message-000093"
				add_field => {
					"[event][id]" => "000093"
					"[rsa][message][id1]" => "000093"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000094
		# line in RSA:  <fld30> <fld31> <event_source> Active Scripting Subsystem 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Active Scripting Subsystem" }
				id => "message-000094"
				add_field => {
					"[event][id]" => "000094"
					"[rsa][message][id1]" => "000094"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Ad" {
		# MESSAGE 000095
		# line in RSA:  <fld30> <fld31> <event_source> Ad hoc access to OLE DB provider '<fld1>' has been denied. You must access this provider through a linked server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Ad hoc access to OLE DB provider '%{fld1}' has been denied. You must access this provider through a linked server." }
				id => "message-000095"
				add_field => {
					"[event][id]" => "000095"
					"[rsa][message][id1]" => "000095"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000096
		# line in RSA:  <fld30> <fld31> <event_source> Ad hoc updates to system catalogs are not enabled. The system administrator must reconfigure SQL Server to allow this. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Ad hoc updates to system catalogs are not enabled. The system administrator must reconfigure SQL Server to allow this." }
				id => "message-000096"
				add_field => {
					"[event][id]" => "000096"
					"[rsa][message][id1]" => "000096"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000097
		# line in RSA:  <fld30> <fld31> <event_source> Ad hoc updates to system catalogs not recommended. Use the RECONFIGURE WITH OVERRIDE statement to force this configuration. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Ad hoc updates to system catalogs not recommended. Use the RECONFIGURE WITH OVERRIDE statement to force this configuration." }
				id => "message-000097"
				add_field => {
					"[event][id]" => "000097"
					"[rsa][message][id1]" => "000097"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId173
	# line in RSA:  <fld30> <fld31> <event_source> Add device request denied. A physical device named '<fld1>' already exists. 
	else if [logstash][msgparser][id] == "msgParserId173" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Add device request denied. A physical device named '%{fld1}' already exists." }
			id => "msgParserId173"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId174
	# line in RSA:  <fld30> <fld31> <event_source> Adding a value to a '<fld1>' column caused overflow. 
	else if [logstash][msgparser][id] == "msgParserId174" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Adding a value to a '%{fld1}' column caused overflow." }
			id => "msgParserId174"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId175
	# line in RSA:  <fld30> <fld31> <event_source> Address Windowing Extensions enabled. 
	else if [logstash][msgparser][id] == "msgParserId175" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Address Windowing Extensions enabled." }
			id => "msgParserId175"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Agent" {
		# MESSAGE 000100
		# line in RSA:  <fld30> <fld31> <event_source> Agent execution cannot be distributed to a Subscriber that resides on the same server as the Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Agent execution cannot be distributed to a Subscriber that resides on the same server as the Distributor." }
				id => "message-000100"
				add_field => {
					"[event][id]" => "000100"
					"[rsa][message][id1]" => "000100"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000101
		# line in RSA:  <fld30> <fld31> <event_source> Agent history clean up: <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Agent history clean up: %{fld1}" }
				id => "message-000101"
				add_field => {
					"[event][id]" => "000101"
					"[rsa][message][id1]" => "000101"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000102
		# line in RSA:  <fld30> <fld31> <event_source> Agent profile for detailed history logging. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Agent profile for detailed history logging." }
				id => "message-000102"
				add_field => {
					"[event][id]" => "000102"
					"[rsa][message][id1]" => "000102"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000103
		# line in RSA:  <fld30> <fld31> <event_source> Agent profile for low bandwidth connections. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Agent profile for low bandwidth connections." }
				id => "message-000103"
				add_field => {
					"[event][id]" => "000103"
					"[rsa][message][id1]" => "000103"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000104
		# line in RSA:  <fld30> <fld31> <event_source> Agent profile for replicated queued transaction reader. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Agent profile for replicated queued transaction reader." }
				id => "message-000104"
				add_field => {
					"[event][id]" => "000104"
					"[rsa][message][id1]" => "000104"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000105
		# line in RSA:  <fld30> <fld31> <event_source> Agent profile for skipping data consistency errors. It can be used only by SQL Server Subscribers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Agent profile for skipping data consistency errors. It can be used only by SQL Server Subscribers." }
				id => "message-000105"
				add_field => {
					"[event][id]" => "000105"
					"[rsa][message][id1]" => "000105"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000106
		# line in RSA:  <fld30> <fld31> <event_source> Agent shutdown. For more information, see the SQL Server Agent job history for job '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Agent shutdown. For more information, see the SQL Server Agent job history for job '%{fld1}'." }
				id => "message-000106"
				add_field => {
					"[event][id]" => "000106"
					"[rsa][message][id1]" => "000106"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId183
	# line in RSA:  <fld30> <fld31> <event_source> Aggregates are not allowed in this context. Only scalar expressions are allowed. 
	else if [logstash][msgparser][id] == "msgParserId183" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Aggregates are not allowed in this context. Only scalar expressions are allowed." }
			id => "msgParserId183"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Alias" {
		# MESSAGE 000108
		# line in RSA:  <fld30> <fld31> <event_source> Alias user added. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Alias user added." }
				id => "message-000108"
				add_field => {
					"[event][id]" => "000108"
					"[rsa][message][id1]" => "000108"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000109
		# line in RSA:  <fld30> <fld31> <event_source> Alias user dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Alias user dropped." }
				id => "message-000109"
				add_field => {
					"[event][id]" => "000109"
					"[rsa][message][id1]" => "000109"
					"[event][categoryid]" => "1501000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "All" {
		# MESSAGE 000110
		# line in RSA:  <fld30> <fld31> <event_source> All backup devices must be of the same general class (for example, DISK and TAPE). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} All backup devices must be of the same general class (for example, DISK and TAPE)." }
				id => "message-000110"
				add_field => {
					"[event][id]" => "000110"
					"[rsa][message][id1]" => "000110"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000111
		# line in RSA:  <fld30> <fld31> <event_source> All fragments for database '<fld1>' on device '<fld2>' are now dedicated for log usage only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} All fragments for database '%{fld1}' on device '%{fld2}' are now dedicated for log usage only." }
				id => "message-000111"
				add_field => {
					"[event][id]" => "000111"
					"[rsa][message][id1]" => "000111"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000112
		# line in RSA:  <fld30> <fld31> <event_source> All localized versions of this message must be dropped before the us_english version can be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} All localized versions of this message must be dropped before the us_english version can be dropped." }
				id => "message-000112"
				add_field => {
					"[event][id]" => "000112"
					"[rsa][message][id1]" => "000112"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000113
		# line in RSA:  <fld30> <fld31> <event_source> All prerequisites for cleaning up merge meta data have been completed. Execute sp_mergecompletecleanup to initiate the final phase of merge meta data cleanup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} All prerequisites for cleaning up merge meta data have been completed. Execute sp_mergecompletecleanup to initiate the final phase of merge meta data cleanup." }
				id => "message-000113"
				add_field => {
					"[event][id]" => "000113"
					"[rsa][message][id1]" => "000113"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000114
		# line in RSA:  <fld30> <fld31> <event_source> All queries in an SQL statement containing a UNION operator must have an equal number of expressions in their target lists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} All queries in an SQL statement containing a UNION operator must have an equal number of expressions in their target lists." }
				id => "message-000114"
				add_field => {
					"[event][id]" => "000114"
					"[rsa][message][id1]" => "000114"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000115
		# line in RSA:  <fld30> <fld31> <event_source> All the queries in a query expression containing a UNION operator must have the same number of expressions in their select lists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} All the queries in a query expression containing a UNION operator must have the same number of expressions in their select lists." }
				id => "message-000115"
				add_field => {
					"[event][id]" => "000115"
					"[rsa][message][id1]" => "000115"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000116
		# line in RSA:  <fld30> <fld31> <event_source> All user IDs have been assigned. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} All user IDs have been assigned." }
				id => "message-000116"
				add_field => {
					"[event][id]" => "000116"
					"[rsa][message][id1]" => "000116"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000117
		# line in RSA:  <fld30> <fld31> <event_source> All rights reserved.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} All rights reserved." }
				id => "message-000117"
				add_field => {
					"[event][id]" => "000117"
					"[rsa][message][id1]" => "000117"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId194
	# line in RSA:  <fld30> <fld31> <event_source> Allocation page <fld1> in database '<fld2>' has different segment ID than that of the object which is being allocated to. Run DBCC CHECKALLOC. 
	else if [logstash][msgparser][id] == "msgParserId194" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Allocation page %{fld1} in database '%{fld2}' has different segment ID than that of the object which is being allocated to. Run DBCC CHECKALLOC." }
			id => "msgParserId194"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "ALTER" {
		# MESSAGE 000119
		# line in RSA:  <fld30> <fld31> <event_source> ALTER DATABASE failed because a lock could not be placed on database '<fld1>'. Try again later. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER DATABASE failed because a lock could not be placed on database '%{fld1}'. Try again later." }
				id => "message-000119"
				add_field => {
					"[event][id]" => "000119"
					"[rsa][message][id1]" => "000119"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000120
		# line in RSA:  <fld30> <fld31> <event_source> ALTER DATABASE failed.  Database '<fld1>' was not created with 'FOR LOAD' option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER DATABASE failed.  Database '%{fld1}' was not created with 'FOR LOAD' option." }
				id => "message-000120"
				add_field => {
					"[event][id]" => "000120"
					"[rsa][message][id1]" => "000120"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000121
		# line in RSA:  <fld30> <fld31> <event_source> ALTER DATABASE failed. Some disk names listed in the statement were not found. Check that the names exist and are spelled correctly before rerunning the statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER DATABASE failed. Some disk names listed in the statement were not found. Check that the names exist and are spelled correctly before rerunning the statement." }
				id => "message-000121"
				add_field => {
					"[event][id]" => "000121"
					"[rsa][message][id1]" => "000121"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000122
		# line in RSA:  <fld30> <fld31> <event_source> ALTER DATABASE failed. The default collation of database '<fld1>' cannot be set to <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER DATABASE failed. The default collation of database '%{fld1}' cannot be set to %{fld2}." }
				id => "message-000122"
				add_field => {
					"[event][id]" => "000122"
					"[rsa][message][id1]" => "000122"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000123
		# line in RSA:  <fld30> <fld31> <event_source> ALTER DATABASE failed. The total size specified must be 1 MB or greater. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER DATABASE failed. The total size specified must be 1 MB or greater." }
				id => "message-000123"
				add_field => {
					"[event][id]" => "000123"
					"[rsa][message][id1]" => "000123"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000124
		# line in RSA:  <fld30> <fld31> <event_source> ALTER DATABASE statement failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER DATABASE statement failed." }
				id => "message-000124"
				add_field => {
					"[event][id]" => "000124"
					"[rsa][message][id1]" => "000124"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000125
		# line in RSA:  <fld30> <fld31> <event_source> ALTER TABLE ALTER COLUMN ADD ROWGUIDCOL failed because a column already exists in table '<fld1>' with ROWGUIDCOL property. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER TABLE ALTER COLUMN ADD ROWGUIDCOL failed because a column already exists in table '%{fld1}' with ROWGUIDCOL property." }
				id => "message-000125"
				add_field => {
					"[event][id]" => "000125"
					"[rsa][message][id1]" => "000125"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000126
		# line in RSA:  <fld30> <fld31> <event_source> ALTER TABLE ALTER COLUMN DROP ROWGUIDCOL failed because a column does not exist in table '<fld1>' with ROWGUIDCOL property. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER TABLE ALTER COLUMN DROP ROWGUIDCOL failed because a column does not exist in table '%{fld1}' with ROWGUIDCOL property." }
				id => "message-000126"
				add_field => {
					"[event][id]" => "000126"
					"[rsa][message][id1]" => "000126"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000127
		# line in RSA:  <fld30> <fld31> <event_source> ALTER TABLE DROP COLUMN failed because '<fld1>' is currently replicated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER TABLE DROP COLUMN failed because '%{fld1}' is currently replicated." }
				id => "message-000127"
				add_field => {
					"[event][id]" => "000127"
					"[rsa][message][id1]" => "000127"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000128
		# line in RSA:  <fld30> <fld31> <event_source> ALTER TABLE DROP COLUMN failed because '<fld1>' is the only data column in table '<fld2>'. A table must have at least one data column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER TABLE DROP COLUMN failed because '%{fld1}' is the only data column in table '%{fld2}'. A table must have at least one data column." }
				id => "message-000128"
				add_field => {
					"[event][id]" => "000128"
					"[rsa][message][id1]" => "000128"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000129
		# line in RSA:  <fld30> <fld31> <event_source> ALTER TABLE failed because trigger '<fld1>' does not belong to table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER TABLE failed because trigger '%{fld1}' does not belong to table '%{fld2}'." }
				id => "message-000129"
				add_field => {
					"[event][id]" => "000129"
					"[rsa][message][id1]" => "000129"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000130
		# line in RSA:  <fld30> <fld31> <event_source> ALTER TABLE failed because trigger '<fld1>' on table '<fld2>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER TABLE failed because trigger '%{fld1}' on table '%{fld2}' does not exist." }
				id => "message-000130"
				add_field => {
					"[event][id]" => "000130"
					"[rsa][message][id1]" => "000130"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000131
		# line in RSA:  <fld30> <fld31> <event_source> ALTER TABLE only allows columns to be added that can contain nulls or have a DEFAULT definition specified. Column '<fld1>' cannot be added to table '<fld2>' because it does not allow nulls and does not specify a DEFAULT definition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ALTER TABLE only allows columns to be added that can contain nulls or have a DEFAULT definition specified. Column '%{fld1}' cannot be added to table '%{fld2}' because it does not allow nulls and does not specify a DEFAULT definition." }
				id => "message-000131"
				add_field => {
					"[event][id]" => "000131"
					"[rsa][message][id1]" => "000131"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId208
	# line in RSA:  <fld30> <fld31> <event_source> Ambiguous column name '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId208" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Ambiguous column name '%{fld1}'." }
			id => "msgParserId208"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "an" {
		# MESSAGE 000133
		# line in RSA:  <fld30> <fld31> <event_source> an ORDER BY clause 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} an ORDER BY clause" }
				id => "message-000133"
				add_field => {
					"[event][id]" => "000133"
					"[rsa][message][id1]" => "000133"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000134
		# line in RSA:  <fld30> <fld31> <event_source> an assignment 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} an assignment" }
				id => "message-000134"
				add_field => {
					"[event][id]" => "000134"
					"[rsa][message][id1]" => "000134"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000135
		# line in RSA:  <fld30> <fld31> <event_source> an INTO clause 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} an INTO clause" }
				id => "message-000135"
				add_field => {
					"[event][id]" => "000135"
					"[rsa][message][id1]" => "000135"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "An" {
		# MESSAGE 000136
		# line in RSA:  <fld30> <fld31> <event_source> An aggregate cannot appear in an ON clause unless it is in a subquery contained in a HAVING clause or select list, and the column being aggregated is an outer reference. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An aggregate cannot appear in an ON clause unless it is in a subquery contained in a HAVING clause or select list, and the column being aggregated is an outer reference." }
				id => "message-000136"
				add_field => {
					"[event][id]" => "000136"
					"[rsa][message][id1]" => "000136"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000137
		# line in RSA:  <fld30> <fld31> <event_source> An aggregate may not appear in the set list of an UPDATE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An aggregate may not appear in the set list of an UPDATE statement." }
				id => "message-000137"
				add_field => {
					"[event][id]" => "000137"
					"[rsa][message][id1]" => "000137"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000138
		# line in RSA:  <fld30> <fld31> <event_source> An aggregate may not appear in the WHERE clause unless it is in a subquery contained in a HAVING clause or a select list, and the column being aggregated is an outer reference. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An aggregate may not appear in the WHERE clause unless it is in a subquery contained in a HAVING clause or a select list, and the column being aggregated is an outer reference." }
				id => "message-000138"
				add_field => {
					"[event][id]" => "000138"
					"[rsa][message][id1]" => "000138"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000139
		# line in RSA:  <fld30> <fld31> <event_source> An aggregated expression containing an outer reference must be contained in either the select list, or a HAVING clause subquery in the query whose FROM clause contains the table with the column being aggregated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An aggregated expression containing an outer reference must be contained in either the select list, or a HAVING clause subquery in the query whose FROM clause contains the table with the column being aggregated." }
				id => "message-000139"
				add_field => {
					"[event][id]" => "000139"
					"[rsa][message][id1]" => "000139"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000140
		# line in RSA:  <fld30> <fld31> <event_source> An alert ('<fld1>') has already been defined on this condition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An alert ('%{fld1}') has already been defined on this condition." }
				id => "message-000140"
				add_field => {
					"[event][id]" => "000140"
					"[rsa][message][id1]" => "000140"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000141
		# line in RSA:  <fld30> <fld31> <event_source> An alternate synchronization partner can be configured only at the Publisher.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An alternate synchronization partner can be configured only at the Publisher." }
				id => "message-000141"
				add_field => {
					"[event][id]" => "000141"
					"[rsa][message][id1]" => "000141"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000142
		# line in RSA:  <fld30> <fld31> <event_source> An error has occurred that requires SQL Server to shut down so that recovery can be performed on database ID <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error has occurred that requires SQL Server to shut down so that recovery can be performed on database ID %{fld1}." }
				id => "message-000142"
				add_field => {
					"[event][id]" => "000142"
					"[rsa][message][id1]" => "000142"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000143
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred because one or more properties could not be set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred because one or more properties could not be set." }
				id => "message-000143"
				add_field => {
					"[event][id]" => "000143"
					"[rsa][message][id1]" => "000143"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000144
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred while deleting the row. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred while deleting the row." }
				id => "message-000144"
				add_field => {
					"[event][id]" => "000144"
					"[rsa][message][id1]" => "000144"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000145
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred while informing replication of the backup. The backup will continue, but the replication environment should be inspected. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred while informing replication of the backup. The backup will continue, but the replication environment should be inspected." }
				id => "message-000145"
				add_field => {
					"[event][id]" => "000145"
					"[rsa][message][id1]" => "000145"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000146
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred while preparing a query for execution against OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred while preparing a query for execution against OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000146"
				add_field => {
					"[event][id]" => "000146"
					"[rsa][message][id1]" => "000146"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000147
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred while processing the log for database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred while processing the log for database '%{fld1}'." }
				id => "message-000147"
				add_field => {
					"[event][id]" => "000147"
					"[rsa][message][id1]" => "000147"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000148
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred while setting data for one or more columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred while setting data for one or more columns." }
				id => "message-000148"
				add_field => {
					"[event][id]" => "000148"
					"[rsa][message][id1]" => "000148"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000149
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred while setting the data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred while setting the data." }
				id => "message-000149"
				add_field => {
					"[event][id]" => "000149"
					"[rsa][message][id1]" => "000149"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000150
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred while submitting the query text to OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred while submitting the query text to OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000150"
				add_field => {
					"[event][id]" => "000150"
					"[rsa][message][id1]" => "000150"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000151
		# line in RSA:  <fld30> <fld31> <event_source> An error occurred while waiting on the article cache access event. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An error occurred while waiting on the article cache access event." }
				id => "message-000151"
				add_field => {
					"[event][id]" => "000151"
					"[rsa][message][id1]" => "000151"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000152
		# line in RSA:  <fld30> <fld31> <event_source> An expected checksum value was passed, but checksums will not be compared because rowcount-only checking was requested. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An expected checksum value was passed, but checksums will not be compared because rowcount-only checking was requested." }
				id => "message-000152"
				add_field => {
					"[event][id]" => "000152"
					"[rsa][message][id1]" => "000152"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000153
		# line in RSA:  <fld30> <fld31> <event_source> An explicit DROP INDEX is not allowed on index '<fld1>'. It is being used for <fld2> constraint enforcement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An explicit DROP INDEX is not allowed on index '%{fld1}'. It is being used for %{fld2} constraint enforcement." }
				id => "message-000153"
				add_field => {
					"[event][id]" => "000153"
					"[rsa][message][id1]" => "000153"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000154
		# line in RSA:  <fld30> <fld31> <event_source> An explicit value for the identity column in table '<fld1>' can only be specified when a column list is used and IDENTITY_INSERT is ON. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An explicit value for the identity column in table '%{fld1}' can only be specified when a column list is used and IDENTITY_INSERT is ON." }
				id => "message-000154"
				add_field => {
					"[event][id]" => "000154"
					"[rsa][message][id1]" => "000154"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000155
		# line in RSA:  <fld30> <fld31> <event_source> An incorrect number of parameters was given to the DBCC statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An incorrect number of parameters was given to the DBCC statement." }
				id => "message-000155"
				add_field => {
					"[event][id]" => "000155"
					"[rsa][message][id1]" => "000155"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000156
		# line in RSA:  <fld30> <fld31> <event_source> An index cannot be created on the view '<fld1>' because no row can satisfy the view definition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An index cannot be created on the view '%{fld1}' because no row can satisfy the view definition." }
				id => "message-000156"
				add_field => {
					"[event][id]" => "000156"
					"[rsa][message][id1]" => "000156"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000157
		# line in RSA:  <fld30> <fld31> <event_source> An index cannot be created on the view '<fld1>' because the select list of the view contains a non-aggregate expression. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An index cannot be created on the view '%{fld1}' because the select list of the view contains a non-aggregate expression." }
				id => "message-000157"
				add_field => {
					"[event][id]" => "000157"
					"[rsa][message][id1]" => "000157"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000158
		# line in RSA:  <fld30> <fld31> <event_source> An index cannot be created on the view '<fld1>' because the view definition does not include all the columns in the GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An index cannot be created on the view '%{fld1}' because the view definition does not include all the columns in the GROUP BY clause." }
				id => "message-000158"
				add_field => {
					"[event][id]" => "000158"
					"[rsa][message][id1]" => "000158"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000159
		# line in RSA:  <fld30> <fld31> <event_source> An index cannot be created on the view '<fld1>' because the view definition does not include count_big(*). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An index cannot be created on the view '%{fld1}' because the view definition does not include count_big(*)." }
				id => "message-000159"
				add_field => {
					"[event][id]" => "000159"
					"[rsa][message][id1]" => "000159"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000160
		# line in RSA:  <fld30> <fld31> <event_source> An index cannot be created on the view '<fld1>' because the view definition includes an unknown value (the sum of a nullable expression). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An index cannot be created on the view '%{fld1}' because the view definition includes an unknown value (the sum of a nullable expression)." }
				id => "message-000160"
				add_field => {
					"[event][id]" => "000160"
					"[rsa][message][id1]" => "000160"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000161
		# line in RSA:  <fld30> <fld31> <event_source> An index cannot be created on the view '<fld1>' because the view definition includes duplicate column names. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An index cannot be created on the view '%{fld1}' because the view definition includes duplicate column names." }
				id => "message-000161"
				add_field => {
					"[event][id]" => "000161"
					"[rsa][message][id1]" => "000161"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000162
		# line in RSA:  <fld30> <fld31> <event_source> An INSERT EXEC statement cannot be nested. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An INSERT EXEC statement cannot be nested." }
				id => "message-000162"
				add_field => {
					"[event][id]" => "000162"
					"[rsa][message][id1]" => "000162"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000163
		# line in RSA:  <fld30> <fld31> <event_source> An INSERT statement cannot contain a SELECT statement that assigns values to a variable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An INSERT statement cannot contain a SELECT statement that assigns values to a variable." }
				id => "message-000163"
				add_field => {
					"[event][id]" => "000163"
					"[rsa][message][id1]" => "000163"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000164
		# line in RSA:  <fld30> <fld31> <event_source> An insufficient number of arguments were supplied for the procedure or function <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An insufficient number of arguments were supplied for the procedure or function %{fld1}." }
				id => "message-000164"
				add_field => {
					"[event][id]" => "000164"
					"[rsa][message][id1]" => "000164"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000165
		# line in RSA:  <fld30> <fld31> <event_source> An internal buffer has become full. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An internal buffer has become full." }
				id => "message-000165"
				add_field => {
					"[event][id]" => "000165"
					"[rsa][message][id1]" => "000165"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000166
		# line in RSA:  <fld30> <fld31> <event_source> An internal consistency error occurred. Contact Technical Support for assistance. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An internal consistency error occurred. Contact Technical Support for assistance." }
				id => "message-000166"
				add_field => {
					"[event][id]" => "000166"
					"[rsa][message][id1]" => "000166"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000167
		# line in RSA:  <fld30> <fld31> <event_source> An invalid datetime value was encountered. Value exceeds the year 9999. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An invalid datetime value was encountered. Value exceeds the year 9999." }
				id => "message-000167"
				add_field => {
					"[event][id]" => "000167"
					"[rsa][message][id1]" => "000167"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000168
		# line in RSA:  <fld30> <fld31> <event_source> An invalid parameter or option was specified for procedure '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An invalid parameter or option was specified for procedure '%{fld1}'." }
				id => "message-000168"
				add_field => {
					"[event][id]" => "000168"
					"[rsa][message][id1]" => "000168"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000169
		# line in RSA:  <fld30> <fld31> <event_source> An unknown full-text failure (<fld1>) occurred in function <fld2> on full-text catalog '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An unknown full-text failure (%{fld1}) occurred in function %{fld2} on full-text catalog '%{fld3}'." }
				id => "message-000169"
				add_field => {
					"[event][id]" => "000169"
					"[rsa][message][id1]" => "000169"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000170
		# line in RSA:  <fld30> <fld31> <event_source> An updatable subscription to publication '<fld1>' on Subscriber '<fld2>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} An updatable subscription to publication '%{fld1}' on Subscriber '%{fld2}' already exists." }
				id => "message-000170"
				add_field => {
					"[event][id]" => "000170"
					"[rsa][message][id1]" => "000170"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId247
	# line in RSA:  <fld30> <fld31> <event_source> Analysis of database '<fld1>' (<fld2>) is <fld3> complete (approximately <fld4> more seconds) 
	else if [logstash][msgparser][id] == "msgParserId247" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Analysis of database '%{fld1}' (%{fld2}) is %{fld3} complete (approximately %{fld4} more seconds)" }
			id => "msgParserId247"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Anonymous" {
		# MESSAGE 000172
		# line in RSA:  <fld30> <fld31> <event_source> Anonymous Subscribers cannot have updatable subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Anonymous Subscribers cannot have updatable subscriptions." }
				id => "message-000172"
				add_field => {
					"[event][id]" => "000172"
					"[rsa][message][id1]" => "000172"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000173
		# line in RSA:  <fld30> <fld31> <event_source> Anonymous Subscribers or Subscribers at this server are not allowed to create merge publications.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Anonymous Subscribers or Subscribers at this server are not allowed to create merge publications." }
				id => "message-000173"
				add_field => {
					"[event][id]" => "000173"
					"[rsa][message][id1]" => "000173"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Another" {
		# MESSAGE 000174
		# line in RSA:  <fld30> <fld31> <event_source> Another <fld1> agent for the subscription(s) is running. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Another %{fld1} agent for the subscription(s) is running." }
				id => "message-000174"
				add_field => {
					"[event][id]" => "000174"
					"[rsa][message][id1]" => "000174"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000175
		# line in RSA:  <fld30> <fld31> <event_source> Another log reader is replicating the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Another log reader is replicating the database." }
				id => "message-000175"
				add_field => {
					"[event][id]" => "000175"
					"[rsa][message][id1]" => "000175"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000176
		# line in RSA:  <fld30> <fld31> <event_source> Another user has decided a different outcome for the distributed transaction associated with UOW <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Another user has decided a different outcome for the distributed transaction associated with UOW %{fld1}." }
				id => "message-000176"
				add_field => {
					"[event][id]" => "000176"
					"[rsa][message][id1]" => "000176"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application" {
		# MESSAGE 000177
		# line in RSA:  <fld30> <fld31> <event_source> Application role dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Application role dropped." }
				id => "message-000177"
				add_field => {
					"[event][id]" => "000177"
					"[rsa][message][id1]" => "000177"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000178
		# line in RSA:  <fld30> <fld31> <event_source> Application roles can only be activated at the ad hoc level. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Application roles can only be activated at the ad hoc level." }
				id => "message-000178"
				add_field => {
					"[event][id]" => "000178"
					"[rsa][message][id1]" => "000178"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId255
	# line in RSA:  <fld30> <fld31> <event_source> Argument data type <fld1> is invalid for argument <fld2> of <fld4> function. 
	else if [logstash][msgparser][id] == "msgParserId255" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Argument data type %{fld1} is invalid for argument %{fld2} of %{fld4} function." }
			id => "msgParserId255"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Arithmetic" {
		# MESSAGE 000180
		# line in RSA:  <fld30> <fld31> <event_source> Arithmetic overflow error converting <fld1> to data type <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Arithmetic overflow error converting %{fld1} to data type %{fld2}." }
				id => "message-000180"
				add_field => {
					"[event][id]" => "000180"
					"[rsa][message][id1]" => "000180"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000181
		# line in RSA:  <fld30> <fld31> <event_source> Arithmetic overflow error for data type <fld1>, value =<fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Arithmetic overflow error for data type %{fld1}, value =%{fld2}." }
				id => "message-000181"
				add_field => {
					"[event][id]" => "000181"
					"[rsa][message][id1]" => "000181"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000182
		# line in RSA:  <fld30> <fld31> <event_source> Arithmetic overflow error for type <fld1>, value = <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Arithmetic overflow error for type %{fld1}, value = %{fld2}." }
				id => "message-000182"
				add_field => {
					"[event][id]" => "000182"
					"[rsa][message][id1]" => "000182"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000183
		# line in RSA:  <fld30> <fld31> <event_source> Arithmetic overflow occurred. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Arithmetic overflow occurred." }
				id => "message-000183"
				add_field => {
					"[event][id]" => "000183"
					"[rsa][message][id1]" => "000183"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Article" {
		# MESSAGE 000184
		# line in RSA:  <fld30> <fld31> <event_source> Article '<fld1>' cannot be dropped because there are other articles using it as a join article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Article '%{fld1}' cannot be dropped because there are other articles using it as a join article." }
				id => "message-000184"
				add_field => {
					"[event][id]" => "000184"
					"[rsa][message][id1]" => "000184"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000185
		# line in RSA:  <fld30> <fld31> <event_source> Article name cannot be 'all'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Article name cannot be 'all'." }
				id => "message-000185"
				add_field => {
					"[event][id]" => "000185"
					"[rsa][message][id1]" => "000185"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000186
		# line in RSA:  <fld30> <fld31> <event_source> Article property '<fld1>' can be set only when the article uses automatic identity range management. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Article property '%{fld1}' can be set only when the article uses automatic identity range management." }
				id => "message-000186"
				add_field => {
					"[event][id]" => "000186"
					"[rsa][message][id1]" => "000186"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000187
		# line in RSA:  <fld30> <fld31> <event_source> Article property must be changed at the original Publisher of article '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Article property must be changed at the original Publisher of article '%{fld1}'." }
				id => "message-000187"
				add_field => {
					"[event][id]" => "000187"
					"[rsa][message][id1]" => "000187"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000188
		# line in RSA:  <fld30> <fld31> <event_source> Article update successful. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Article update successful." }
				id => "message-000188"
				add_field => {
					"[event][id]" => "000188"
					"[rsa][message][id1]" => "000188"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId265
	# line in RSA:  <fld30> <fld31> <event_source> Articles can be added or changed only at the Publisher.  
	else if [logstash][msgparser][id] == "msgParserId265" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Articles can be added or changed only at the Publisher." }
			id => "msgParserId265"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Attempt" {
		# MESSAGE 000190
		# line in RSA:  <fld30> <fld31> <event_source> Attempt to fetch logical page <fld1> in database '<fld2>' belongs to object '<fld3>', not to object '<fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempt to fetch logical page %{fld1} in database '%{fld2}' belongs to object '%{fld3}', not to object '%{fld4}'." }
				id => "message-000190"
				add_field => {
					"[event][id]" => "000190"
					"[rsa][message][id1]" => "000190"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000191
		# line in RSA:  <fld30> <fld31> <event_source> Attempt to initialize OLE library failed. Check for correct versions of OLE DLLs on this machine. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempt to initialize OLE library failed. Check for correct versions of OLE DLLs on this machine." }
				id => "message-000191"
				add_field => {
					"[event][id]" => "000191"
					"[rsa][message][id1]" => "000191"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId268
	# line in RSA:  <fld30> <fld31> <event_source> Attempted to create a record with a fixed length of '<fld1>'. Maximum allowable fixed length is '<fld2>'. 
	else if [logstash][msgparser][id] == "msgParserId268" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempted to create a record with a fixed length of '%{fld1}'. Maximum allowable fixed length is '%{fld2}'." }
			id => "msgParserId268"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Attempting" {
		# MESSAGE 000193
		# line in RSA:  <fld30> <fld31> <event_source> Attempting to add multiple identity columns to table '<fld1>' using the SELECT INTO statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempting to add multiple identity columns to table '%{fld1}' using the SELECT INTO statement." }
				id => "message-000193"
				add_field => {
					"[event][id]" => "000193"
					"[rsa][message][id1]" => "000193"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000194
		# line in RSA:  <fld30> <fld31> <event_source> Attempting to change default collation to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempting to change default collation to %{fld1}." }
				id => "message-000194"
				add_field => {
					"[event][id]" => "000194"
					"[rsa][message][id1]" => "000194"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000195
		# line in RSA:  <fld30> <fld31> <event_source> Attempting to close a database that is not already open. Contact Technical Support. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempting to close a database that is not already open. Contact Technical Support." }
				id => "message-000195"
				add_field => {
					"[event][id]" => "000195"
					"[rsa][message][id1]" => "000195"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000196
		# line in RSA:  <fld30> <fld31> <event_source> Attempting to release application lock '<fld1>' that is not currently held. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempting to release application lock '%{fld1}' that is not currently held." }
				id => "message-000196"
				add_field => {
					"[event][id]" => "000196"
					"[rsa][message][id1]" => "000196"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000197
		# line in RSA:  <fld30> <fld31> <event_source> Attempting to initialize Distributed Transaction Coordinator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempting to initialize Distributed Transaction Coordinator." }
				id => "message-000197"
				add_field => {
					"[event][id]" => "000197"
					"[rsa][message][id1]" => "000197"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003595
		# line in RSA:  <fld30> <fld31> <event_source> Attempting to cycle errorlog.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempting to cycle errorlog." }
				id => "message-003595"
				add_field => {
				"result" => "Attempting to cycle errorlog"
					"[event][id]" => "003595"
					"[rsa][message][id1]" => "003595"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Attempting:02
		# line in RSA:  <fld30> <fld31> <event_source> Attempting <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attempting %{fld1}" }
				id => "message-Attempting:02"
				add_field => {
					"[event][id]" => "Attempting:02"
					"[rsa][message][id1]" => "Attempting:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId275
	# line in RSA:  <fld30> <fld31> <event_source> Attribute-centric IDREFS or NMTOKENS field not supported on tags having element-centric field '<fld1>' of type TEXT/NTEXT or IMAGE.  Either specify ELEMENT on IDREFS/NMTOKENS field or remove the ELEMENT directive. 
	else if [logstash][msgparser][id] == "msgParserId275" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Attribute-centric IDREFS or NMTOKENS field not supported on tags having element-centric field '%{fld1}' of type TEXT/NTEXT or IMAGE.  Either specify ELEMENT on IDREFS/NMTOKENS field or remove the ELEMENT directive." }
			id => "msgParserId275"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Authentication" {
		# MESSAGE 000199
		# line in RSA:  <fld30> <fld31> <event_source> Authentication failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Authentication failed." }
				id => "message-000199"
				add_field => {
					"[event][id]" => "000199"
					"[rsa][message][id1]" => "000199"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Authentication:01
		# line in RSA:  <fld30> <fld31> Server <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} Server %{info}" }
				id => "message-Authentication:01"
				add_field => {
					"[event][id]" => "Authentication:01"
					"[rsa][message][id1]" => "Authentication:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Autogrow" {
		# MESSAGE 003585
		# line in RSA:  <fld30> <fld31> <event_source> Autogrow of file '<fld1>' in database '<fld2>' cancelled or timed out after <fld3>  <action> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Autogrow of file '%{fld1}' in database '%{fld2}' cancelled or timed out after %{fld3}  %{action}" }
				id => "message-003585"
				add_field => {
					"[event][id]" => "003585"
					"[rsa][message][id1]" => "003585"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003585:01
		# line in RSA:  <fld30> <fld31> <event_source> Autogrow of file '<fld1>' in database '<fld2>' took <fld3> milliseconds.  <action> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Autogrow of file '%{fld1}' in database '%{fld2}' took %{fld3} milliseconds.  %{action}" }
				id => "message-003585:01"
				add_field => {
					"[event][id]" => "003585:01"
					"[rsa][message][id1]" => "003585:01"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Automatic" {
		# MESSAGE 000200
		# line in RSA:  <fld30> <fld31> <event_source> Automatic checkpointing is disabled in database '<fld1>' because the log is out of space. It will continue when the database owner successfully checkpoints the database. Free up some space or extend the database and then run the CHECKPOINT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Automatic checkpointing is disabled in database '%{fld1}' because the log is out of space. It will continue when the database owner successfully checkpoints the database. Free up some space or extend the database and then run the CHECKPOINT statement." }
				id => "message-000200"
				add_field => {
					"[event][id]" => "000200"
					"[rsa][message][id1]" => "000200"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000201
		# line in RSA:  <fld30> <fld31> <event_source> Automatic identity range support is useful only for publications that allow queued updating. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Automatic identity range support is useful only for publications that allow queued updating." }
				id => "message-000201"
				add_field => {
					"[event][id]" => "000201"
					"[rsa][message][id1]" => "000201"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId281
	# line in RSA:  <fld30> <fld31> <event_source> Automatically starts when SQLServerAgent starts. 
	else if [logstash][msgparser][id] == "msgParserId281" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Automatically starts when SQLServerAgent starts." }
			id => "msgParserId281"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId282
	# line in RSA:  <fld30> <fld31> <event_source> AvailableVirtualMemory = <fld1>, AvailablePagingFile = <fld2>
	else if [logstash][msgparser][id] == "msgParserId282" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} AvailableVirtualMemory = %{fld1}, AvailablePagingFile = %{fld2}" }
			id => "msgParserId282"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId283
	# line in RSA:  <fld30> <fld31> <event_source> Average time slices above <fld1> milliseconds not recommended. Use the RECONFIGURE WITH OVERRIDE statement to force this configuration. 
	else if [logstash][msgparser][id] == "msgParserId283" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Average time slices above %{fld1} milliseconds not recommended. Use the RECONFIGURE WITH OVERRIDE statement to force this configuration." }
			id => "msgParserId283"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId284
	# line in RSA:  <fld30> <fld31> <event_source> Background checkpoint process suspended until locks are available. 
	else if [logstash][msgparser][id] == "msgParserId284" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Background checkpoint process suspended until locks are available." }
			id => "msgParserId284"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Backup" {
		# MESSAGE 000205
		# line in RSA:  <fld30> <fld31> <event_source> Backup and file manipulation operations (such as ALTER DATABASE ADD FILE) on a database must be serialized. Reissue the statement after the current backup or file manipulation operation is completed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Backup and file manipulation operations (such as ALTER DATABASE ADD FILE) on a database must be serialized. Reissue the statement after the current backup or file manipulation operation is completed." }
				id => "message-000205"
				add_field => {
					"[event][id]" => "000205"
					"[rsa][message][id1]" => "000205"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000206
		# line in RSA:  <fld30> <fld31> <event_source> Backup and restore operations are not allowed on database tempdb. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Backup and restore operations are not allowed on database tempdb." }
				id => "message-000206"
				add_field => {
					"[event][id]" => "000206"
					"[rsa][message][id1]" => "000206"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000207
		# line in RSA:  <fld30> <fld31> <event_source> Backup history older than <fld1> has been deleted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Backup history older than %{fld1} has been deleted." }
				id => "message-000207"
				add_field => {
					"[event][id]" => "000207"
					"[rsa][message][id1]" => "000207"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000208
		# line in RSA:  <fld30> <fld31> <event_source> Backup or restore requires at least one backup device. Rerun your statement specifying a backup device. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Backup or restore requires at least one backup device. Rerun your statement specifying a backup device." }
				id => "message-000208"
				add_field => {
					"[event][id]" => "000208"
					"[rsa][message][id1]" => "000208"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "BACKUP" {
		# MESSAGE 000209
		# line in RSA:  <fld30> <fld31> <event_source> BACKUP DATABASE cannot be used on a database opened in emergency mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} BACKUP DATABASE cannot be used on a database opened in emergency mode." }
				id => "message-000209"
				add_field => {
					"[event][id]" => "000209"
					"[rsa][message][id1]" => "000209"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000210
		# line in RSA:  <fld30> <fld31> <event_source> BACKUP failed to complete the command <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} BACKUP failed to complete the command %{fld1}" }
				id => "message-000210"
				add_field => {
					"[event][id]" => "000210"
					"[rsa][message][id1]" => "000210"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000211
		# line in RSA:  <fld30> <fld31> <event_source> BACKUP LOG cannot modify the database because database is read-only. The backup will continue,although subsequent backups will duplicate the work of this backup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} BACKUP LOG cannot modify the database because database is read-only. The backup will continue,although subsequent backups will duplicate the work of this backup." }
				id => "message-000211"
				add_field => {
					"[event][id]" => "000211"
					"[rsa][message][id1]" => "000211"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "BackupDiskFile" {
		# MESSAGE 003584
		# line in RSA:   <fld19>:: <fld30> <fld31> <event_source> BackupDiskFile::RequestDurableMedia:  failure on backup device '<fld1>'. Operating system error <fld2>(<fld3>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld19}:: %{fld30} %{fld31} %{event_source} BackupDiskFile::RequestDurableMedia:  failure on backup device '%{fld1}'. Operating system error %{fld2}(%{fld3})." }
				id => "message-003584"
				add_field => {
				"result" => "Operating system error"
					"[event][id]" => "003584"
					"[rsa][message][id1]" => "003584"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003604
		# line in RSA:  <fld19>:: <fld30> <fld31> <event_source> BackupDiskFile::CreateMedia: Backup device '<fld1>' failed to create. Operating system error = <fld2>(<fld3>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld19}:: %{fld30} %{fld31} %{event_source} BackupDiskFile::CreateMedia: Backup device '%{fld1}' failed to create. Operating system error = %{fld2}(%{fld3})." }
				id => "message-003604"
				add_field => {
				"result" => "Operating system error"
					"[event][id]" => "003604"
					"[rsa][message][id1]" => "003604"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId294
	# line in RSA:   <fld19>:: <fld30> <fld31> <event_source> BackupMedium::ReportIoError: write failure on backup device '<fld1>'. Operating system error <fld2>(<result>). 
	else if [logstash][msgparser][id] == "msgParserId294" {
		dissect {
			mapping => { "message" => "%{fld19}:: %{fld30} %{fld31} %{event_source} BackupMedium::ReportIoError: write failure on backup device '%{fld1}'. Operating system error %{fld2}(%{result})." }
			id => "msgParserId294"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId295
	# line in RSA: <fld30> <fld31> <event_source> Backups on raw devices are not supported. '<fld1>' is a raw device. 
	else if [logstash][msgparser][id] == "msgParserId295" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Backups on raw devices are not supported. '%{fld1}' is a raw device." }
			id => "msgParserId295"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId296
	# line in RSA:  <fld19>:: <fld30> <fld31> <event_source> BackupSoftFile::WriteMediaFileMark:  failure on backup device '<username>'. <result>(<fld1>). 
	else if [logstash][msgparser][id] == "msgParserId296" {
		dissect {
			mapping => { "message" => "%{fld19}:: %{fld30} %{fld31} %{event_source} BackupSoftFile::WriteMediaFileMark:  failure on backup device '%{username}'. %{result}(%{fld1})." }
			id => "msgParserId296"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "BackupVirtualDeviceFile" {
		# MESSAGE 003580
		# line in RSA:  <fld19>::<fld30> <fld31> <event_source> BackupVirtualDeviceFile::RequestDurableMedia: Flush failure on backup device '<username>'. <result>(<fld1>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld19}::%{fld30} %{fld31} %{event_source} BackupVirtualDeviceFile::RequestDurableMedia: Flush failure on backup device '%{username}'. %{result}(%{fld1})." }
				id => "message-003580"
				add_field => {
					"[event][id]" => "003580"
					"[rsa][message][id1]" => "003580"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003580:01
		# line in RSA:   <fld19>:: <fld30> <fld31> <event_source> BackupVirtualDeviceFile::ClearError:  failure on backup device '<username>'. <result>(<msg>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld19}:: %{fld30} %{fld31} %{event_source} BackupVirtualDeviceFile::ClearError:  failure on backup device '%{username}'. %{result}(%{msg})." }
				id => "message-003580:01"
				add_field => {
					"[event][id]" => "003580:01"
					"[rsa][message][id1]" => "003580:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId299
	# line in RSA:  <fld30> <fld31> <event_source> Barring a conflict, the row for user '<fld1>' will be fixed by updating its link to a new login. Consider changing the new password from null. 
	else if [logstash][msgparser][id] == "msgParserId299" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Barring a conflict, the row for user '%{fld1}' will be fixed by updating its link to a new login. Consider changing the new password from null." }
			id => "msgParserId299"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId300
	# line in RSA:  <fld30> <fld31> <event_source> Batch/procedure exceeds maximum length of <fld1> characters. 
	else if [logstash][msgparser][id] == "msgParserId300" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Batch/procedure exceeds maximum length of %{fld1} characters." }
			id => "msgParserId300"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId301
	# line in RSA:  <fld30> <fld31> <event_source> before or after @active_start_time 
	else if [logstash][msgparser][id] == "msgParserId301" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} before or after @active_start_time" }
			id => "msgParserId301"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId302
	# line in RSA:  <fld30> <fld31> <event_source> Begin LSN specified for replication log scan is invalid. 
	else if [logstash][msgparser][id] == "msgParserId302" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Begin LSN specified for replication log scan is invalid." }
			id => "msgParserId302"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId303
	# line in RSA:  <fld30> <fld31> <event_source> binary data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId303" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} binary data type %{fld1}" }
			id => "msgParserId303"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "bit" {
		# MESSAGE 000218
		# line in RSA:  <fld30> <fld31> <event_source> bit data type, nulls allowed <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} bit data type, nulls allowed %{fld1}" }
				id => "message-000218"
				add_field => {
					"[event][id]" => "000218"
					"[rsa][message][id1]" => "000218"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000219
		# line in RSA:  <fld30> <fld31> <event_source> bit data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} bit data type %{fld1}" }
				id => "message-000219"
				add_field => {
					"[event][id]" => "000219"
					"[rsa][message][id1]" => "000219"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Both" {
		# MESSAGE 000220
		# line in RSA:  <fld30> <fld31> <event_source> Both @subscriber and @subscriberdb must be specified with non-null values simultaneously, or both must be left unspecified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Both @subscriber and @subscriberdb must be specified with non-null values simultaneously, or both must be left unspecified." }
				id => "message-000220"
				add_field => {
					"[event][id]" => "000220"
					"[rsa][message][id1]" => "000220"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000221
		# line in RSA:  <fld30> <fld31> <event_source> Both a PRIMARY KEY and UNIQUE constraint have been defined for column '<fld1>', table '<fld2>'. Only one is allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Both a PRIMARY KEY and UNIQUE constraint have been defined for column '%{fld1}', table '%{fld2}'. Only one is allowed." }
				id => "message-000221"
				add_field => {
					"[event][id]" => "000221"
					"[rsa][message][id1]" => "000221"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000222
		# line in RSA:  <fld30> <fld31> <event_source> Both terms of an outer join must contain columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Both terms of an outer join must contain columns." }
				id => "message-000222"
				add_field => {
					"[event][id]" => "000222"
					"[rsa][message][id1]" => "000222"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Browse" {
		# MESSAGE 000223
		# line in RSA:  <fld30> <fld31> <event_source> Browse mode is invalid for a statement that assigns values to a variable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Browse mode is invalid for a statement that assigns values to a variable." }
				id => "message-000223"
				add_field => {
					"[event][id]" => "000223"
					"[rsa][message][id1]" => "000223"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000224
		# line in RSA:  <fld30> <fld31> <event_source> Browse mode is invalid for statements containing a UNION operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Browse mode is invalid for statements containing a UNION operator." }
				id => "message-000224"
				add_field => {
					"[event][id]" => "000224"
					"[rsa][message][id1]" => "000224"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000225
		# line in RSA:  <fld30> <fld31> <event_source> Browse mode is invalid for subqueries and derived tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Browse mode is invalid for subqueries and derived tables." }
				id => "message-000225"
				add_field => {
					"[event][id]" => "000225"
					"[rsa][message][id1]" => "000225"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Buffer" {
		# MESSAGE 000226
		# line in RSA:  <fld30> <fld31> <event_source> Buffer <fld1>, allocation page <fld2>, in database '<fld3>' is not in allocation buffer pool in PSS (process status structure). Contact Technical Support. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Buffer %{fld1}, allocation page %{fld2}, in database '%{fld3}' is not in allocation buffer pool in PSS (process status structure). Contact Technical Support." }
				id => "message-000226"
				add_field => {
					"[event][id]" => "000226"
					"[rsa][message][id1]" => "000226"
					"[event][categoryid]" => "1603020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000227
		# line in RSA:  <fld30> <fld31> <event_source> Buffer holding logical page <fld1> not found in keep pool in SDES for object '<fld2>'. Contact Technical Support. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Buffer holding logical page %{fld1} not found in keep pool in SDES for object '%{fld2}'. Contact Technical Support." }
				id => "message-000227"
				add_field => {
					"[event][id]" => "000227"
					"[rsa][message][id1]" => "000227"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Bulk" {
		# MESSAGE 000228
		# line in RSA:  <fld30> <fld31> <event_source> Bulk copy operations cannot trigger BULK INSERT statements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk copy operations cannot trigger BULK INSERT statements." }
				id => "message-000228"
				add_field => {
					"[event][id]" => "000228"
					"[rsa][message][id1]" => "000228"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000229
		# line in RSA:  <fld30> <fld31> <event_source> Bulk copying into a table with { sql_variant | bigint } columns is not supported for versions earlier than SQL Server 2000. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Bulk[\s]+copying[\s]+into[\s]+a[\s]+table[\s]+with[\s]+([\s]*sql_variant[\s]+|[\s]*bigint[\s]+)[\s]+columns[\s]+is[\s]+not[\s]+supported[\s]+for[\s]+versions[\s]+earlier[\s]+than[\s]+SQL[\s]+Server[\s]+2000\.[\s]+$" }
				id => "message-000229"
				add_field => {
					"[event][id]" => "000229"
					"[rsa][message][id1]" => "000229"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000230
		# line in RSA:  <fld30> <fld31> <event_source> Bulk copying into a table with computed columns is not supported for downlevel clients. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk copying into a table with computed columns is not supported for downlevel clients." }
				id => "message-000230"
				add_field => {
					"[event][id]" => "000230"
					"[rsa][message][id1]" => "000230"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000231
		# line in RSA:  <fld30> <fld31> <event_source> Bulk insert data conversion error ({ overflow | truncation | type mismatch }) for row <fld1>, column <fld2> (<fld3>). 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Bulk[\s]+insert[\s]+data[\s]+conversion[\s]+error[\s]+\(([\s]*overflow[\s]+|[\s]*truncation[\s]+|[\s]*type[\s]+mismatch[\s]+)\)[\s]+for[\s]+row[\s]+(?<fld1>[^,]*),[\s]+column[\s]+(?<fld2>[^\s]*)[\s]+\((?<fld3>[^\)]*)\)\.[\s]+$" }
				id => "message-000231"
				add_field => {
					"[event][id]" => "000231"
					"[rsa][message][id1]" => "000231"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000232
		# line in RSA:  <fld30> <fld31> <event_source> Bulk Insert failed. Unexpected NULL value in data file row <fld1>, column <fld2>. Destination column (<fld3>) is defined NOT NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk Insert failed. Unexpected NULL value in data file row %{fld1}, column %{fld2}. Destination column (%{fld3}) is defined NOT NULL." }
				id => "message-000232"
				add_field => {
					"[event][id]" => "000232"
					"[rsa][message][id1]" => "000232"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000233
		# line in RSA:  <fld30> <fld31> <event_source> Bulk Insert fails. Codepage '<fld1>' is not installed. Install the codepage and run the command again. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk Insert fails. Codepage '%{fld1}' is not installed. Install the codepage and run the command again." }
				id => "message-000233"
				add_field => {
					"[event][id]" => "000233"
					"[rsa][message][id1]" => "000233"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000234
		# line in RSA:  <fld30> <fld31> <event_source> Bulk Insert fails. Column is too long in the data file for row <fld1>, column <fld2>. Make sure the field terminator and row terminator are specified correctly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk Insert fails. Column is too long in the data file for row %{fld1}, column %{fld2}. Make sure the field terminator and row terminator are specified correctly." }
				id => "message-000234"
				add_field => {
					"[event][id]" => "000234"
					"[rsa][message][id1]" => "000234"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000235
		# line in RSA:  <fld30> <fld31> <event_source> Bulk Insert: DataFileType was incorrectly specified as char. DataFileType will be assumed to be widechar because the data file has a Unicode signature. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk Insert: DataFileType was incorrectly specified as char. DataFileType will be assumed to be widechar because the data file has a Unicode signature." }
				id => "message-000235"
				add_field => {
					"[event][id]" => "000235"
					"[rsa][message][id1]" => "000235"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000236
		# line in RSA:  <fld30> <fld31> <event_source> Bulk Insert: DataFileType was incorrectly specified as widechar. DataFileType will be assumed to be char because the data file does not have a Unicode signature. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk Insert: DataFileType was incorrectly specified as widechar. DataFileType will be assumed to be char because the data file does not have a Unicode signature." }
				id => "message-000236"
				add_field => {
					"[event][id]" => "000236"
					"[rsa][message][id1]" => "000236"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000237
		# line in RSA:  <fld30> <fld31> <event_source> Bulk Insert: Unexpected end-of-file (EOF) encountered in data file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk Insert: Unexpected end-of-file (EOF) encountered in data file." }
				id => "message-000237"
				add_field => {
					"[event][id]" => "000237"
					"[rsa][message][id1]" => "000237"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000238
		# line in RSA:  <fld30> <fld31> <event_source> Bulk Insert: Version mismatch between the provider dynamic link library and the server executable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bulk Insert: Version mismatch between the provider dynamic link library and the server executable." }
				id => "message-000238"
				add_field => {
					"[event][id]" => "000238"
					"[rsa][message][id1]" => "000238"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId325
	# line in RSA:  <fld30> <fld31> <event_source> Bypassing recovery for database '<db_name>' because it is marked IN LOAD. 
	else if [logstash][msgparser][id] == "msgParserId325" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Bypassing recovery for database '%{db_name}' because it is marked IN LOAD." }
			id => "msgParserId325"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Can" {
		# MESSAGE 000239
		# line in RSA:  <fld30> <fld31> <event_source> Can only RESTORE LOG in the master database if SQL Server is in single user mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Can only RESTORE LOG in the master database if SQL Server is in single user mode." }
				id => "message-000239"
				add_field => {
					"[event][id]" => "000239"
					"[rsa][message][id1]" => "000239"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000240
		# line in RSA:  <fld30> <fld31> <event_source> Can only use IF UPDATE within a CREATE TRIGGER statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Can only use IF UPDATE within a CREATE TRIGGER statement." }
				id => "message-000240"
				add_field => {
					"[event][id]" => "000240"
					"[rsa][message][id1]" => "000240"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Cannot" {
		# MESSAGE 000241
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> '<fld2>' because it is being referenced by object '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} '%{fld2}' because it is being referenced by object '%{fld3}'." }
				id => "message-000241"
				add_field => {
					"[event][id]" => "000241"
					"[rsa][message][id1]" => "000241"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000242
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> the <fld2> '<fld3>'. It contains one or more disallowed constructs. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} the %{fld2} '%{fld3}'. It contains one or more disallowed constructs." }
				id => "message-000242"
				add_field => {
					"[event][id]" => "000242"
					"[rsa][message][id1]" => "000242"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000243
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> the index '<fld2>' because it is not a statistics collection. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} the index '%{fld2}' because it is not a statistics collection." }
				id => "message-000243"
				add_field => {
					"[event][id]" => "000243"
					"[rsa][message][id1]" => "000243"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000244
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> INSTEAD OF DELETE or UPDATE TRIGGER '<fld2>' on table '<fld3>' because the table has a FOREIGN KEY with cascaded DELETE or UPDATE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} INSTEAD OF DELETE or UPDATE TRIGGER '%{fld2}' on table '%{fld3}' because the table has a FOREIGN KEY with cascaded DELETE or UPDATE." }
				id => "message-000244"
				add_field => {
					"[event][id]" => "000244"
					"[rsa][message][id1]" => "000244"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000245
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> trigger '<fld2>' for <fld3> '<fld4>' because an INSTEAD OF <fld5> trigger already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} trigger '%{fld2}' for %{fld3} '%{fld4}' because an INSTEAD OF %{fld5} trigger already exists." }
				id => "message-000245"
				add_field => {
					"[event][id]" => "000245"
					"[rsa][message][id1]" => "000245"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000246
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> trigger '<fld2>' for view '<fld3>' because it is defined with the CHECK OPTION. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} trigger '%{fld2}' for view '%{fld3}' because it is defined with the CHECK OPTION." }
				id => "message-000246"
				add_field => {
					"[event][id]" => "000246"
					"[rsa][message][id1]" => "000246"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000247
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> the <fld2> '<fld3>' because it is a system <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} the %{fld2} '%{fld3}' because it is a system %{fld4}." }
				id => "message-000247"
				add_field => {
					"[event][id]" => "000247"
					"[rsa][message][id1]" => "000247"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000248
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> the <fld2> '<fld3>' because it is being used for replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} the %{fld2} '%{fld3}' because it is being used for replication." }
				id => "message-000248"
				add_field => {
					"[event][id]" => "000248"
					"[rsa][message][id1]" => "000248"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000249
		# line in RSA:  <fld30> <fld31> <event_source> Cannot <fld1> the <fld2> '<fld3>', because it does not exist in the system catalog. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot %{fld1} the %{fld2} '%{fld3}', because it does not exist in the system catalog." }
				id => "message-000249"
				add_field => {
					"[event][id]" => "000249"
					"[rsa][message][id1]" => "000249"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000250
		# line in RSA:  <fld30> <fld31> <event_source> Cannot access temporary tables from within a function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot access temporary tables from within a function." }
				id => "message-000250"
				add_field => {
					"[event][id]" => "000250"
					"[rsa][message][id1]" => "000250"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000251
		# line in RSA:  <fld30> <fld31> <event_source> Cannot activate full-text search for table '<fld1>' because no columns have been enabled for full-text search. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot activate full-text search for table '%{fld1}' because no columns have been enabled for full-text search." }
				id => "message-000251"
				add_field => {
					"[event][id]" => "000251"
					"[rsa][message][id1]" => "000251"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000252
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add (drop) column to table '<fld1>' because the table belongs to publication(s) with an active updatable subscription. Set @force_reinit_subscription to 1 to force reinitialization. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add (drop) column to table '%{fld1}' because the table belongs to publication(s) with an active updatable subscription. Set @force_reinit_subscription to 1 to force reinitialization." }
				id => "message-000252"
				add_field => {
					"[event][id]" => "000252"
					"[rsa][message][id1]" => "000252"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000253
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add a computed column or a timestamp column to a vertical partition for a character mode publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add a computed column or a timestamp column to a vertical partition for a character mode publication." }
				id => "message-000253"
				add_field => {
					"[event][id]" => "000253"
					"[rsa][message][id1]" => "000253"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000254
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add a Distribution Agent at the Subscriber for a push subscription. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add a Distribution Agent at the Subscriber for a push subscription." }
				id => "message-000254"
				add_field => {
					"[event][id]" => "000254"
					"[rsa][message][id1]" => "000254"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000255
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add a job to the '<fld1>' job category. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add a job to the '%{fld1}' job category." }
				id => "message-000255"
				add_field => {
					"[event][id]" => "000255"
					"[rsa][message][id1]" => "000255"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000256
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add a local job to a multiserver job category. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add a local job to a multiserver job category." }
				id => "message-000256"
				add_field => {
					"[event][id]" => "000256"
					"[rsa][message][id1]" => "000256"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000257
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add a multiserver job to a local job category. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add a multiserver job to a local job category." }
				id => "message-000257"
				add_field => {
					"[event][id]" => "000257"
					"[rsa][message][id1]" => "000257"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000258
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add columns to <fld1> '<fld2>' because it is being published for merge replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add columns to %{fld1} '%{fld2}' because it is being published for merge replication." }
				id => "message-000258"
				add_field => {
					"[event][id]" => "000258"
					"[rsa][message][id1]" => "000258"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000259
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add identity column without forcing reinitialization. Set @force_reinit_subscription to 1 to force reinitialization. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add identity column without forcing reinitialization. Set @force_reinit_subscription to 1 to force reinitialization." }
				id => "message-000259"
				add_field => {
					"[event][id]" => "000259"
					"[rsa][message][id1]" => "000259"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000260
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add identity column, using the SELECT INTO statement, to table '<fld1>', which already has column '<fld2>' that inherits the identity property. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add identity column, using the SELECT INTO statement, to table '%{fld1}', which already has column '%{fld2}' that inherits the identity property." }
				id => "message-000260"
				add_field => {
					"[event][id]" => "000260"
					"[rsa][message][id1]" => "000260"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000261
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add login '<username>' to the publication access list because it does not have access to the distribution server '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add login '%{username}' to the publication access list because it does not have access to the distribution server '%{fld1}'." }
				id => "message-000261"
				add_field => {
					"[event][id]" => "000261"
					"[rsa][message][id1]" => "000261"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000262
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add more than one clustered index for constraints on table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add more than one clustered index for constraints on table '%{fld1}'." }
				id => "message-000262"
				add_field => {
					"[event][id]" => "000262"
					"[rsa][message][id1]" => "000262"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000263
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add multiple PRIMARY KEY constraints to table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add multiple PRIMARY KEY constraints to table '%{fld1}'." }
				id => "message-000263"
				add_field => {
					"[event][id]" => "000263"
					"[rsa][message][id1]" => "000263"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000264
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add rows to sysdepends for the current stored procedure because it depends on the missing object '<fld1>'. The stored procedure will still be created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add rows to sysdepends for the current stored procedure because it depends on the missing object '%{fld1}'. The stored procedure will still be created." }
				id => "message-000264"
				add_field => {
					"[event][id]" => "000264"
					"[rsa][message][id1]" => "000264"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000265
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add the remote Distributor. Make sure that the local server is configured as a Publisher at the Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add the remote Distributor. Make sure that the local server is configured as a Publisher at the Distributor." }
				id => "message-000265"
				add_field => {
					"[event][id]" => "000265"
					"[rsa][message][id1]" => "000265"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000266
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add, remove, or modify a file in filegroup '<fld1>' because the filegroup is offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add, remove, or modify a file in filegroup '%{fld1}' because the filegroup is offline." }
				id => "message-000266"
				add_field => {
					"[event][id]" => "000266"
					"[rsa][message][id1]" => "000266"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000267
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add, remove, or modify file '<fld1>' because it is offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add, remove, or modify file '%{fld1}' because it is offline." }
				id => "message-000267"
				add_field => {
					"[event][id]" => "000267"
					"[rsa][message][id1]" => "000267"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000268
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add, remove, or modify file '<fld1>'. The file is read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add, remove, or modify file '%{fld1}'. The file is read-only." }
				id => "message-000268"
				add_field => {
					"[event][id]" => "000268"
					"[rsa][message][id1]" => "000268"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000269
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add, remove, or modify files in filegroup '<fld1>'. The filegroup is read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add, remove, or modify files in filegroup '%{fld1}'. The filegroup is read-only." }
				id => "message-000269"
				add_field => {
					"[event][id]" => "000269"
					"[rsa][message][id1]" => "000269"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000270
		# line in RSA:  <fld30> <fld31> <event_source> Cannot add, update, or delete a job (or its steps or schedules) that originated from an MSX server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot add, update, or delete a job (or its steps or schedules) that originated from an MSX server." }
				id => "message-000270"
				add_field => {
					"[event][id]" => "000270"
					"[rsa][message][id1]" => "000270"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000271
		# line in RSA:  <fld30> <fld31> <event_source> Cannot allocate a GUID for the token. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot allocate a GUID for the token." }
				id => "message-000271"
				add_field => {
					"[event][id]" => "000271"
					"[rsa][message][id1]" => "000271"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000272
		# line in RSA:  <fld30> <fld31> <event_source> Cannot alter '<fld1>' because it is not a table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot alter '%{fld1}' because it is not a table." }
				id => "message-000272"
				add_field => {
					"[event][id]" => "000272"
					"[rsa][message][id1]" => "000272"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000273
		# line in RSA:  <fld30> <fld31> <event_source> Cannot alter collation for database '<fld1>' because it is READONLY, OFFLINE, or marked SUSPECT. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot alter collation for database '%{fld1}' because it is READONLY, OFFLINE, or marked SUSPECT." }
				id => "message-000273"
				add_field => {
					"[event][id]" => "000273"
					"[rsa][message][id1]" => "000273"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000274
		# line in RSA:  <fld30> <fld31> <event_source> Cannot alter column '<fld1>' because it is '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot alter column '%{fld1}' because it is '%{fld2}'." }
				id => "message-000274"
				add_field => {
					"[event][id]" => "000274"
					"[rsa][message][id1]" => "000274"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000275
		# line in RSA:  <fld30> <fld31> <event_source> Cannot alter column '<fld1>' to be data type <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot alter column '%{fld1}' to be data type %{fld2}." }
				id => "message-000275"
				add_field => {
					"[event][id]" => "000275"
					"[rsa][message][id1]" => "000275"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000276
		# line in RSA:  <fld30> <fld31> <event_source> Cannot alter or drop column '<fld1>' because it is enabled for Full-Text Search. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot alter or drop column '%{fld1}' because it is enabled for Full-Text Search." }
				id => "message-000276"
				add_field => {
					"[event][id]" => "000276"
					"[rsa][message][id1]" => "000276"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000277
		# line in RSA:  <fld30> <fld31> <event_source> Cannot alter table '<fld1>' because this table does not exist in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot alter table '%{fld1}' because this table does not exist in database '%{fld2}'." }
				id => "message-000277"
				add_field => {
					"[event][id]" => "000277"
					"[rsa][message][id1]" => "000277"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000278
		# line in RSA:  <fld30> <fld31> <event_source> Cannot alter the <fld1> '<fld2>' because it is being published for replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot alter the %{fld1} '%{fld2}' because it is being published for replication." }
				id => "message-000278"
				add_field => {
					"[event][id]" => "000278"
					"[rsa][message][id1]" => "000278"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000279
		# line in RSA:  <fld30> <fld31> <event_source> Cannot alter trigger '<fld1>' for table '<fld2>' because this trigger does not belong to this table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot alter trigger '%{fld1}' for table '%{fld2}' because this trigger does not belong to this table." }
				id => "message-000279"
				add_field => {
					"[event][id]" => "000279"
					"[rsa][message][id1]" => "000279"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000280
		# line in RSA:  <fld30> <fld31> <event_source> Cannot apply the backup on device '<fld1>' to database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot apply the backup on device '%{fld1}' to database '%{fld2}'." }
				id => "message-000280"
				add_field => {
					"[event][id]" => "000280"
					"[rsa][message][id1]" => "000280"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000281
		# line in RSA:  <fld30> <fld31> <event_source> Cannot assign a default value to a local variable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot assign a default value to a local variable." }
				id => "message-000281"
				add_field => {
					"[event][id]" => "000281"
					"[rsa][message][id1]" => "000281"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000282
		# line in RSA:  <fld30> <fld31> <event_source> Cannot associate files with different databases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot associate files with different databases." }
				id => "message-000282"
				add_field => {
					"[event][id]" => "000282"
					"[rsa][message][id1]" => "000282"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000283
		# line in RSA:  <fld30> <fld31> <event_source> Cannot attach subscription file '<fld1>'. Ensure the file path is valid and the file is updatable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot attach subscription file '%{fld1}'. Ensure the file path is valid and the file is updatable." }
				id => "message-000283"
				add_field => {
					"[event][id]" => "000283"
					"[rsa][message][id1]" => "000283"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000284
		# line in RSA:  <fld30> <fld31> <event_source> Cannot attach subscription file '<fld1>'. Make sure that it is a valid subscription copy file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot attach subscription file '%{fld1}'. Make sure that it is a valid subscription copy file." }
				id => "message-000284"
				add_field => {
					"[event][id]" => "000284"
					"[rsa][message][id1]" => "000284"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000285
		# line in RSA:  <fld30> <fld31> <event_source> Cannot back up the log of the master database. Use BACKUP DATABASE instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot back up the log of the master database. Use BACKUP DATABASE instead." }
				id => "message-000285"
				add_field => {
					"[event][id]" => "000285"
					"[rsa][message][id1]" => "000285"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000286
		# line in RSA:  <fld30> <fld31> <event_source> Cannot bind a default to a column created with or altered to have a default value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot bind a default to a column created with or altered to have a default value." }
				id => "message-000286"
				add_field => {
					"[event][id]" => "000286"
					"[rsa][message][id1]" => "000286"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000287
		# line in RSA:  <fld30> <fld31> <event_source> Cannot bind a default to a column of data type timestamp. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot bind a default to a column of data type timestamp." }
				id => "message-000287"
				add_field => {
					"[event][id]" => "000287"
					"[rsa][message][id1]" => "000287"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000288
		# line in RSA:  <fld30> <fld31> <event_source> Cannot bind a default to an identity column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot bind a default to an identity column." }
				id => "message-000288"
				add_field => {
					"[event][id]" => "000288"
					"[rsa][message][id1]" => "000288"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000289
		# line in RSA:  <fld30> <fld31> <event_source> Cannot bind a rule to a column of data type text, ntext, image, or timestamp. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot bind a rule to a column of data type text, ntext, image, or timestamp." }
				id => "message-000289"
				add_field => {
					"[event][id]" => "000289"
					"[rsa][message][id1]" => "000289"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000290
		# line in RSA:  <fld30> <fld31> <event_source> Cannot bind default '<fld1>'. The default must be created using the CREATE DEFAULT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot bind default '%{fld1}'. The default must be created using the CREATE DEFAULT statement." }
				id => "message-000290"
				add_field => {
					"[event][id]" => "000290"
					"[rsa][message][id1]" => "000290"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000291
		# line in RSA:  <fld30> <fld31> <event_source> Cannot bind using an XP token while the server is not in an XP call. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot bind using an XP token while the server is not in an XP call." }
				id => "message-000291"
				add_field => {
					"[event][id]" => "000291"
					"[rsa][message][id1]" => "000291"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000292
		# line in RSA:  <fld30> <fld31> <event_source> Cannot build a nonclustered index on a memory-only work table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot build a nonclustered index on a memory-only work table." }
				id => "message-000292"
				add_field => {
					"[event][id]" => "000292"
					"[rsa][message][id1]" => "000292"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000293
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change article '<fld1>'.  All articles that are part of a concurrent synchronization publication must use stored procedures to apply changes to the Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change article '%{fld1}'.  All articles that are part of a concurrent synchronization publication must use stored procedures to apply changes to the Subscriber." }
				id => "message-000293"
				add_field => {
					"[event][id]" => "000293"
					"[rsa][message][id1]" => "000293"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000294
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change default database belonging to someone else. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change default database belonging to someone else." }
				id => "message-000294"
				add_field => {
					"[event][id]" => "000294"
					"[rsa][message][id1]" => "000294"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000295
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change distribution Publisher property 'distribution_db' because the remote Publisher is using the current distribution database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change distribution Publisher property 'distribution_db' because the remote Publisher is using the current distribution database." }
				id => "message-000295"
				add_field => {
					"[event][id]" => "000295"
					"[rsa][message][id1]" => "000295"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000296
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change owner of object '<fld1>' or one of its child objects because the new owner '<username>' already has an object with the same name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change owner of object '%{fld1}' or one of its child objects because the new owner '%{username}' already has an object with the same name." }
				id => "message-000296"
				add_field => {
					"[event][id]" => "000296"
					"[rsa][message][id1]" => "000296"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000297
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change queue type while there are subscriptions to the publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change queue type while there are subscriptions to the publication." }
				id => "message-000297"
				add_field => {
					"[event][id]" => "000297"
					"[rsa][message][id1]" => "000297"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000298
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change sort order or locale. Server shutting down. Restart SQL Server to continue with sort order unchanged. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change sort order or locale. Server shutting down. Restart SQL Server to continue with sort order unchanged." }
				id => "message-000298"
				add_field => {
					"[event][id]" => "000298"
					"[rsa][message][id1]" => "000298"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000299
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change the '<fld1>' option of a database while another user is in the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change the '%{fld1}' option of a database while another user is in the database." }
				id => "message-000299"
				add_field => {
					"[event][id]" => "000299"
					"[rsa][message][id1]" => "000299"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000300
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change the 'allow_pull' property of the publication to "false". There are pull subscriptions on the publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change the 'allow_pull' property of the publication to \"false\". There are pull subscriptions on the publication." }
				id => "message-000300"
				add_field => {
					"[event][id]" => "000300"
					"[rsa][message][id1]" => "000300"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000301
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change the 'allow_push' property of the publication to "false". There are push subscriptions on the publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change the 'allow_push' property of the publication to \"false\". There are push subscriptions on the publication." }
				id => "message-000301"
				add_field => {
					"[event][id]" => "000301"
					"[rsa][message][id1]" => "000301"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000302
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change the compatibility level of replicated or distributed databases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change the compatibility level of replicated or distributed databases." }
				id => "message-000302"
				add_field => {
					"[event][id]" => "000302"
					"[rsa][message][id1]" => "000302"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000303
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change the compatibility level of the '<fld1>' database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change the compatibility level of the '%{fld1}' database." }
				id => "message-000303"
				add_field => {
					"[event][id]" => "000303"
					"[rsa][message][id1]" => "000303"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000304
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change the owner of the master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change the owner of the master database." }
				id => "message-000304"
				add_field => {
					"[event][id]" => "000304"
					"[rsa][message][id1]" => "000304"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000305
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change the properties of empty filegroup '<fld1>'. The filegroup must contain at least one file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change the properties of empty filegroup '%{fld1}'. The filegroup must contain at least one file." }
				id => "message-000305"
				add_field => {
					"[event][id]" => "000305"
					"[rsa][message][id1]" => "000305"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000306
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change the READONLY property of the PRIMARY filegroup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change the READONLY property of the PRIMARY filegroup." }
				id => "message-000306"
				add_field => {
					"[event][id]" => "000306"
					"[rsa][message][id1]" => "000306"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000307
		# line in RSA:  <fld30> <fld31> <event_source> Cannot change this publication property because there are active subscriptions to this publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot change this publication property because there are active subscriptions to this publication." }
				id => "message-000307"
				add_field => {
					"[event][id]" => "000307"
					"[rsa][message][id1]" => "000307"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000308
		# line in RSA:  <fld30> <fld31> <event_source> Cannot clean up the meta data for publication '<fld1>' because other publications are using one or more articles in this publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot clean up the meta data for publication '%{fld1}' because other publications are using one or more articles in this publication." }
				id => "message-000308"
				add_field => {
					"[event][id]" => "000308"
					"[rsa][message][id1]" => "000308"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000309
		# line in RSA:  <fld30> <fld31> <event_source> Cannot compile replication filter procedure without defining table being filtered. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot compile replication filter procedure without defining table being filtered." }
				id => "message-000309"
				add_field => {
					"[event][id]" => "000309"
					"[rsa][message][id1]" => "000309"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000310
		# line in RSA:  <fld30> <fld31> <event_source> Cannot complete this operation because an unexpected error occurred. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot complete this operation because an unexpected error occurred." }
				id => "message-000310"
				add_field => {
					"[event][id]" => "000310"
					"[rsa][message][id1]" => "000310"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000311
		# line in RSA:  <fld30> <fld31> <event_source> Cannot convert a char value to money. The char value has incorrect syntax. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot convert a char value to money. The char value has incorrect syntax." }
				id => "message-000311"
				add_field => {
					"[event][id]" => "000311"
					"[rsa][message][id1]" => "000311"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000312
		# line in RSA:  <fld30> <fld31> <event_source> Cannot convert a clustered index to a nonclustered index using the DROP_EXISTING option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot convert a clustered index to a nonclustered index using the DROP_EXISTING option." }
				id => "message-000312"
				add_field => {
					"[event][id]" => "000312"
					"[rsa][message][id1]" => "000312"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000313
		# line in RSA:  <fld30> <fld31> <event_source> Cannot convert char value to smallmoney. The char value has incorrect syntax. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot convert char value to smallmoney. The char value has incorrect syntax." }
				id => "message-000313"
				add_field => {
					"[event][id]" => "000313"
					"[rsa][message][id1]" => "000313"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000314
		# line in RSA:  <fld30> <fld31> <event_source> Cannot convert data type <fld1> to <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot convert data type %{fld1} to %{fld2}." }
				id => "message-000314"
				add_field => {
					"[event][id]" => "000314"
					"[rsa][message][id1]" => "000314"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000315
		# line in RSA:  <fld30> <fld31> <event_source> Cannot copy a subscription database to an existing database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot copy a subscription database to an existing database." }
				id => "message-000315"
				add_field => {
					"[event][id]" => "000315"
					"[rsa][message][id1]" => "000315"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000316
		# line in RSA:  <fld30> <fld31> <event_source> Cannot copy Schema.txt to '<fld1>' because access is denied or the path is invalid. Full-text search was not installed properly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot copy Schema.txt to '%{fld1}' because access is denied or the path is invalid. Full-text search was not installed properly." }
				id => "message-000316"
				add_field => {
					"[event][id]" => "000316"
					"[rsa][message][id1]" => "000316"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000317
		# line in RSA:  <fld30> <fld31> <event_source> Cannot copy subscription. Only single file subscription databases are supported for this operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot copy subscription. Only single file subscription databases are supported for this operation." }
				id => "message-000317"
				add_field => {
					"[event][id]" => "000317"
					"[rsa][message][id1]" => "000317"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000318
		# line in RSA:  <fld30> <fld31> <event_source> Cannot copy subscriptions because there is no synchronized subscription found in the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot copy subscriptions because there is no synchronized subscription found in the database." }
				id => "message-000318"
				add_field => {
					"[event][id]" => "000318"
					"[rsa][message][id1]" => "000318"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000319
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create <fld1> on view '<fld2>' because the view is not schema bound. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create %{fld1} on view '%{fld2}' because the view is not schema bound." }
				id => "message-000319"
				add_field => {
					"[event][id]" => "000319"
					"[rsa][message][id1]" => "000319"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000320
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create <fld1> on view '<fld2>'. It does not have a unique clustered index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create %{fld1} on view '%{fld2}'. It does not have a unique clustered index." }
				id => "message-000320"
				add_field => {
					"[event][id]" => "000320"
					"[rsa][message][id1]" => "000320"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000321
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create a clustered index because nonclustered index ID <fld1> is on { a read-only | an offline } filegroup. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Cannot[\s]+create[\s]+a[\s]+clustered[\s]+index[\s]+because[\s]+nonclustered[\s]+index[\s]+ID[\s]+(?<fld1>[^\s]*)[\s]+is[\s]+on[\s]+([\s]*a[\s]+read\-only[\s]+|[\s]*an[\s]+offline[\s]+)[\s]+filegroup\.[\s]+$" }
				id => "message-000321"
				add_field => {
					"[event][id]" => "000321"
					"[rsa][message][id1]" => "000321"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000322
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create a non-unique clustered index on a table after it is published for transactional replication. Drop all publications that include this table before creating the index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create a non-unique clustered index on a table after it is published for transactional replication. Drop all publications that include this table before creating the index." }
				id => "message-000322"
				add_field => {
					"[event][id]" => "000322"
					"[rsa][message][id1]" => "000322"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000323
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create a row of size <fld1> which is greater than the allowable maximum of <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create a row of size %{fld1} which is greater than the allowable maximum of %{fld2}." }
				id => "message-000323"
				add_field => {
					"[event][id]" => "000323"
					"[rsa][message][id1]" => "000323"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000324
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create a subscription of sync_type 'none' to a publication using the 'concurrent' or 'concurrent_c' synchronization method. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create a subscription of sync_type 'none' to a publication using the 'concurrent' or 'concurrent_c' synchronization method." }
				id => "message-000324"
				add_field => {
					"[event][id]" => "000324"
					"[rsa][message][id1]" => "000324"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000325
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create a trigger on a temporary object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create a trigger on a temporary object." }
				id => "message-000325"
				add_field => {
					"[event][id]" => "000325"
					"[rsa][message][id1]" => "000325"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000326
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create a trigger on table '<fld1>' because you can only create a trigger on a table in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create a trigger on table '%{fld1}' because you can only create a trigger on a table in the current database." }
				id => "message-000326"
				add_field => {
					"[event][id]" => "000326"
					"[rsa][message][id1]" => "000326"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000327
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create a trigger on table '<fld1>', because this table does not exist in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create a trigger on table '%{fld1}', because this table does not exist in database '%{fld2}'." }
				id => "message-000327"
				add_field => {
					"[event][id]" => "000327"
					"[rsa][message][id1]" => "000327"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000328
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create a worktable row larger than allowable maximum. Resubmit your query with the ROBUST PLAN hint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create a worktable row larger than allowable maximum. Resubmit your query with the ROBUST PLAN hint." }
				id => "message-000328"
				add_field => {
					"[event][id]" => "000328"
					"[rsa][message][id1]" => "000328"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000329
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create an index on '<fld1>', because this table does not exist in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create an index on '%{fld1}', because this table does not exist in database '%{fld2}'." }
				id => "message-000329"
				add_field => {
					"[event][id]" => "000329"
					"[rsa][message][id1]" => "000329"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000330
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create an index on a view or computed column because the compatibility level of this database is less than 80. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create an index on a view or computed column because the compatibility level of this database is less than 80." }
				id => "message-000330"
				add_field => {
					"[event][id]" => "000330"
					"[rsa][message][id1]" => "000330"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000331
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create article '<fld1>'. All articles that are part of a concurrent synchronization publication must use stored procedures to apply changes to the Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create article '%{fld1}'. All articles that are part of a concurrent synchronization publication must use stored procedures to apply changes to the Subscriber." }
				id => "message-000331"
				add_field => {
					"[event][id]" => "000331"
					"[rsa][message][id1]" => "000331"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000332
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create file '<fld1>' because it already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create file '%{fld1}' because it already exists." }
				id => "message-000332"
				add_field => {
					"[event][id]" => "000332"
					"[rsa][message][id1]" => "000332"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000333
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create file at '<fld1>'. Ensure the file path is valid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create file at '%{fld1}'. Ensure the file path is valid." }
				id => "message-000333"
				add_field => {
					"[event][id]" => "000333"
					"[rsa][message][id1]" => "000333"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000334
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create index because the key column '<fld1>' is non-deterministic or imprecise. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create index because the key column '%{fld1}' is non-deterministic or imprecise." }
				id => "message-000334"
				add_field => {
					"[event][id]" => "000334"
					"[rsa][message][id1]" => "000334"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000335
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create index. Object '<fld1>' was created with the following SET options off: '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create index. Object '%{fld1}' was created with the following SET options off: '%{fld2}'." }
				id => "message-000335"
				add_field => {
					"[event][id]" => "000335"
					"[rsa][message][id1]" => "000335"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000336
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create more than <fld1> nonclustered indices or column statistics on one table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create more than %{fld1} nonclustered indices or column statistics on one table." }
				id => "message-000336"
				add_field => {
					"[event][id]" => "000336"
					"[rsa][message][id1]" => "000336"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000337
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create more than one clustered index on table '<fld1>'. Drop the existing clustered index '<fld2>' before creating another. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create more than one clustered index on table '%{fld1}'. Drop the existing clustered index '%{fld2}' before creating another." }
				id => "message-000337"
				add_field => {
					"[event][id]" => "000337"
					"[rsa][message][id1]" => "000337"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000338
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create OLE DB provider enumeration object installed with SQL Server. Verify installation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create OLE DB provider enumeration object installed with SQL Server. Verify installation." }
				id => "message-000338"
				add_field => {
					"[event][id]" => "000338"
					"[rsa][message][id1]" => "000338"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000339
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create procedure '<fld1>' with a group number of <fld2> because a procedure with the same name and a group number of 1 does not currently exist in the database. Must execute CREATE PROCEDURE '<fld3>';1 first. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create procedure '%{fld1}' with a group number of %{fld2} because a procedure with the same name and a group number of 1 does not currently exist in the database. Must execute CREATE PROCEDURE '%{fld3}';1 first." }
				id => "message-000339"
				add_field => {
					"[event][id]" => "000339"
					"[rsa][message][id1]" => "000339"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000340
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create statistics on table '<fld1>' because this table does not exist in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create statistics on table '%{fld1}' because this table does not exist in database '%{fld2}'." }
				id => "message-000340"
				add_field => {
					"[event][id]" => "000340"
					"[rsa][message][id1]" => "000340"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000341
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create statistics on table '<fld1>'. This table is a virtual system table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create statistics on table '%{fld1}'. This table is a virtual system table." }
				id => "message-000341"
				add_field => {
					"[event][id]" => "000341"
					"[rsa][message][id1]" => "000341"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000342
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create the foreign key '<fld1>' because the referenced column '<fld2>' is a computed column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create the foreign key '%{fld1}' because the referenced column '%{fld2}' is a computed column." }
				id => "message-000342"
				add_field => {
					"[event][id]" => "000342"
					"[rsa][message][id1]" => "000342"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000343
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create the row. Would exceed the total number of active rows supported by the rowset. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create the row. Would exceed the total number of active rows supported by the rowset." }
				id => "message-000343"
				add_field => {
					"[event][id]" => "000343"
					"[rsa][message][id1]" => "000343"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000344
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create transactional subscription to merge publication '<fld1>'. The publication type should be either transactional(0) or snapshot(1) for this operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create transactional subscription to merge publication '%{fld1}'. The publication type should be either transactional(0) or snapshot(1) for this operation." }
				id => "message-000344"
				add_field => {
					"[event][id]" => "000344"
					"[rsa][message][id1]" => "000344"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000345
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create two constraints named '<fld1>'. Duplicate constraint names are not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create two constraints named '%{fld1}'. Duplicate constraint names are not allowed." }
				id => "message-000345"
				add_field => {
					"[event][id]" => "000345"
					"[rsa][message][id1]" => "000345"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000346
		# line in RSA:  <fld30> <fld31> <event_source> Cannot create worker thread. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot create worker thread." }
				id => "message-000346"
				add_field => {
					"[event][id]" => "000346"
					"[rsa][message][id1]" => "000346"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000347
		# line in RSA:  <fld30> <fld31> <event_source> Cannot define foreign key constraint '<fld1>' with cascaded DELETE or UPDATE on table '<fld2>' because the table has an INSTEAD OF DELETE or UPDATE TRIGGER defined on it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot define foreign key constraint '%{fld1}' with cascaded DELETE or UPDATE on table '%{fld2}' because the table has an INSTEAD OF DELETE or UPDATE TRIGGER defined on it." }
				id => "message-000347"
				add_field => {
					"[event][id]" => "000347"
					"[rsa][message][id1]" => "000347"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000348
		# line in RSA:  <fld30> <fld31> <event_source> Cannot define PRIMARY KEY constraint on nullable column in table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot define PRIMARY KEY constraint on nullable column in table '%{fld1}'." }
				id => "message-000348"
				add_field => {
					"[event][id]" => "000348"
					"[rsa][message][id1]" => "000348"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000349
		# line in RSA:  <fld30> <fld31> <event_source> Cannot delete the monitor server while databases are participating in log shipping. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot delete the monitor server while databases are participating in log shipping." }
				id => "message-000349"
				add_field => {
					"[event][id]" => "000349"
					"[rsa][message][id1]" => "000349"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000350
		# line in RSA:  <fld30> <fld31> <event_source> Cannot delete this plan. The plan contains enlisted databases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot delete this plan. The plan contains enlisted databases." }
				id => "message-000350"
				add_field => {
					"[event][id]" => "000350"
					"[rsa][message][id1]" => "000350"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000351
		# line in RSA:  <fld30> <fld31> <event_source> Cannot detach database '<fld1>' because it does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot detach database '%{fld1}' because it does not exist." }
				id => "message-000351"
				add_field => {
					"[event][id]" => "000351"
					"[rsa][message][id1]" => "000351"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000352
		# line in RSA:  <fld30> <fld31> <event_source> Cannot detach the <fld1> '<fld2>' because it is currently in use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot detach the %{fld1} '%{fld2}' because it is currently in use." }
				id => "message-000352"
				add_field => {
					"[event][id]" => "000352"
					"[rsa][message][id1]" => "000352"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000353
		# line in RSA:  <fld30> <fld31> <event_source> Cannot determine the service account for this SQL Server instance. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot determine the service account for this SQL Server instance." }
				id => "message-000353"
				add_field => {
					"[event][id]" => "000353"
					"[rsa][message][id1]" => "000353"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000354
		# line in RSA:  <fld30> <fld31> <event_source> Cannot determine the SQL Server Agent proxy account for this SQL Server instance or the account is not a domain user account. Use xp_sqlagent_proxy_account to configure SQL Server Agent to use a domain user account as the proxy account. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot determine the SQL Server Agent proxy account for this SQL Server instance or the account is not a domain user account. Use xp_sqlagent_proxy_account to configure SQL Server Agent to use a domain user account as the proxy account." }
				id => "message-000354"
				add_field => {
					"[event][id]" => "000354"
					"[rsa][message][id1]" => "000354"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000355
		# line in RSA:  <fld30> <fld31> <event_source> Cannot display the specified SPID's buffer; in transition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot display the specified SPID's buffer; in transition." }
				id => "message-000355"
				add_field => {
					"[event][id]" => "000355"
					"[rsa][message][id1]" => "000355"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000356
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop a message with an ID less than 50000. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop a message with an ID less than 50000." }
				id => "message-000356"
				add_field => {
					"[event][id]" => "000356"
					"[rsa][message][id1]" => "000356"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000357
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop a push subscription entry at the Subscriber unless @drop_push is 'true'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop a push subscription entry at the Subscriber unless @drop_push is 'true'." }
				id => "message-000357"
				add_field => {
					"[event][id]" => "000357"
					"[rsa][message][id1]" => "000357"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000358
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop article '<fld1>' from publication '<fld2>' because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force this and invalidate the existing snapshot. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop article '%{fld1}' from publication '%{fld2}' because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force this and invalidate the existing snapshot." }
				id => "message-000358"
				add_field => {
					"[event][id]" => "000358"
					"[rsa][message][id1]" => "000358"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000359
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop article '<fld1>' from publication '<fld2>' because its snapshot has been run and this publication could have active subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop article '%{fld1}' from publication '%{fld2}' because its snapshot has been run and this publication could have active subscriptions." }
				id => "message-000359"
				add_field => {
					"[event][id]" => "000359"
					"[rsa][message][id1]" => "000359"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000360
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop Distribution Publisher '<fld1>'. The remote Publisher is using '<fld2>' as Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop Distribution Publisher '%{fld1}'. The remote Publisher is using '%{fld2}' as Distributor." }
				id => "message-000360"
				add_field => {
					"[event][id]" => "000360"
					"[rsa][message][id1]" => "000360"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000361
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop Distributor Publisher '<fld1>'. There are Subscribers associated with it in the distribution database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop Distributor Publisher '%{fld1}'. There are Subscribers associated with it in the distribution database '%{fld2}'." }
				id => "message-000361"
				add_field => {
					"[event][id]" => "000361"
					"[rsa][message][id1]" => "000361"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000362
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop filter '<fld1>' because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force this and invalidate the existing snapshot. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop filter '%{fld1}' because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force this and invalidate the existing snapshot." }
				id => "message-000362"
				add_field => {
					"[event][id]" => "000362"
					"[rsa][message][id1]" => "000362"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000363
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop filter '<fld1>' from publication '<fld2>' because its snapshot has been run and this publication could have active subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop filter '%{fld1}' from publication '%{fld2}' because its snapshot has been run and this publication could have active subscriptions." }
				id => "message-000363"
				add_field => {
					"[event][id]" => "000363"
					"[rsa][message][id1]" => "000363"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000364
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop full-text catalog '<fld1>' because it contains a full-text index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop full-text catalog '%{fld1}' because it contains a full-text index." }
				id => "message-000364"
				add_field => {
					"[event][id]" => "000364"
					"[rsa][message][id1]" => "000364"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000365
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop index '<fld1>' because it enforces the full-text key for table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop index '%{fld1}' because it enforces the full-text key for table '%{fld2}'." }
				id => "message-000365"
				add_field => {
					"[event][id]" => "000365"
					"[rsa][message][id1]" => "000365"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000366
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop profile because it is in use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop profile because it is in use." }
				id => "message-000366"
				add_field => {
					"[event][id]" => "000366"
					"[rsa][message][id1]" => "000366"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000367
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop profile. Either it is not defined or it is defined as the default profile. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop profile. Either it is not defined or it is defined as the default profile." }
				id => "message-000367"
				add_field => {
					"[event][id]" => "000367"
					"[rsa][message][id1]" => "000367"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000368
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop server '<fld1>' as Distribution Publisher because there are databases enabled for replication on that server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop server '%{fld1}' as Distribution Publisher because there are databases enabled for replication on that server." }
				id => "message-000368"
				add_field => {
					"[event][id]" => "000368"
					"[rsa][message][id1]" => "000368"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000369
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop server '<fld1>' because it is used as a { Distributor | Publisher | Subscriber } in replication. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Cannot[\s]+drop[\s]+server[\s]+'(?<fld1>[^']*)'[\s]+because[\s]+it[\s]+is[\s]+used[\s]+as[\s]+a[\s]+([\s]*Distributor[\s]+|[\s]*Publisher[\s]+|[\s]*Subscriber[\s]+)[\s]+in[\s]+replication\.[\s]+$" }
				id => "message-000369"
				add_field => {
					"[event][id]" => "000369"
					"[rsa][message][id1]" => "000369"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000370
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop server '<fld1>' because it is used as a Subscriber to remote Publisher '<fld2>' in replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop server '%{fld1}' because it is used as a Subscriber to remote Publisher '%{fld2}' in replication." }
				id => "message-000370"
				add_field => {
					"[event][id]" => "000370"
					"[rsa][message][id1]" => "000370"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000371
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop Subscriber '<fld1>'. There are existing subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop Subscriber '%{fld1}'. There are existing subscriptions." }
				id => "message-000371"
				add_field => {
					"[event][id]" => "000371"
					"[rsa][message][id1]" => "000371"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000372
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop Subscriber '<fld1>'. There are subscriptions from it in the publication database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop Subscriber '%{fld1}'. There are subscriptions from it in the publication database '%{fld2}'." }
				id => "message-000372"
				add_field => {
					"[event][id]" => "000372"
					"[rsa][message][id1]" => "000372"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000373
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop the <fld1> '<fld2>' because at least part of the table resides on { a read-only | an offline } filegroup. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Cannot[\s]+drop[\s]+the[\s]+(?<fld1>[^\s]*)[\s]+'(?<fld2>[^']*)'[\s]+because[\s]+at[\s]+least[\s]+part[\s]+of[\s]+the[\s]+table[\s]+resides[\s]+on[\s]+([\s]*a[\s]+read\-only[\s]+|[\s]*an[\s]+offline[\s]+)[\s]+filegroup\.[\s]+$" }
				id => "message-000373"
				add_field => {
					"[event][id]" => "000373"
					"[rsa][message][id1]" => "000373"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000374
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop the <fld1> '<fld2>' because it is being used for distribution. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop the %{fld1} '%{fld2}' because it is being used for distribution." }
				id => "message-000374"
				add_field => {
					"[event][id]" => "000374"
					"[rsa][message][id1]" => "000374"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000375
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop the <fld1> '<fld2>' because it is currently in use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop the %{fld1} '%{fld2}' because it is currently in use." }
				id => "message-000375"
				add_field => {
					"[event][id]" => "000375"
					"[rsa][message][id1]" => "000375"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000376
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop the database owner. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop the database owner." }
				id => "message-000376"
				add_field => {
					"[event][id]" => "000376"
					"[rsa][message][id1]" => "000376"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000377
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop the guest user from master or tempdb. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop the guest user from master or tempdb." }
				id => "message-000377"
				add_field => {
					"[event][id]" => "000377"
					"[rsa][message][id1]" => "000377"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000378
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop the local distribution Publisher because there are Subscribers defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop the local distribution Publisher because there are Subscribers defined." }
				id => "message-000378"
				add_field => {
					"[event][id]" => "000378"
					"[rsa][message][id1]" => "000378"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000379
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop the Local, Repository, or LocalDefault DTS categories. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop the Local, Repository, or LocalDefault DTS categories." }
				id => "message-000379"
				add_field => {
					"[event][id]" => "000379"
					"[rsa][message][id1]" => "000379"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000380
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop the role '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop the role '%{fld1}'." }
				id => "message-000380"
				add_field => {
					"[event][id]" => "000380"
					"[rsa][message][id1]" => "000380"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000381
		# line in RSA:  <fld30> <fld31> <event_source> Cannot drop. The data type is being used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot drop. The data type is being used." }
				id => "message-000381"
				add_field => {
					"[event][id]" => "000381"
					"[rsa][message][id1]" => "000381"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000382
		# line in RSA:  <fld30> <fld31> <event_source> Cannot enable a merge publication on this server because the working directory of its Distributors is not using a UNC path. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot enable a merge publication on this server because the working directory of its Distributors is not using a UNC path." }
				id => "message-000382"
				add_field => {
					"[event][id]" => "000382"
					"[rsa][message][id1]" => "000382"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000383
		# line in RSA:  <fld30> <fld31> <event_source> Cannot enlist in the transaction because the transaction does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot enlist in the transaction because the transaction does not exist." }
				id => "message-000383"
				add_field => {
					"[event][id]" => "000383"
					"[rsa][message][id1]" => "000383"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000384
		# line in RSA:  <fld30> <fld31> <event_source> Cannot enlist in the transaction because the transaction has already been committed or rolled back. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot enlist in the transaction because the transaction has already been committed or rolled back." }
				id => "message-000384"
				add_field => {
					"[event][id]" => "000384"
					"[rsa][message][id1]" => "000384"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000385
		# line in RSA:  <fld30> <fld31> <event_source> Cannot enlist into the local machine. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot enlist into the local machine." }
				id => "message-000385"
				add_field => {
					"[event][id]" => "000385"
					"[rsa][message][id1]" => "000385"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000386
		# line in RSA:  <fld30> <fld31> <event_source> Cannot execute '<fld1>' because the database is in read-only access mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot execute '%{fld1}' because the database is in read-only access mode." }
				id => "message-000386"
				add_field => {
					"[event][id]" => "000386"
					"[rsa][message][id1]" => "000386"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000387
		# line in RSA:  <fld30> <fld31> <event_source> Cannot execute a procedure marked FOR REPLICATION. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot execute a procedure marked FOR REPLICATION." }
				id => "message-000387"
				add_field => {
					"[event][id]" => "000387"
					"[rsa][message][id1]" => "000387"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000388
		# line in RSA:  <fld30> <fld31> <event_source> Cannot execute a USE statement while an application role is active. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot execute a USE statement while an application role is active." }
				id => "message-000388"
				add_field => {
					"[event][id]" => "000388"
					"[rsa][message][id1]" => "000388"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000389
		# line in RSA:  <fld30> <fld31> <event_source> Cannot explicitly open or close master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot explicitly open or close master database." }
				id => "message-000389"
				add_field => {
					"[event][id]" => "000389"
					"[rsa][message][id1]" => "000389"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000390
		# line in RSA:  <fld30> <fld31> <event_source> Cannot extend file '<fld1>' using this syntax as it was not created with DISK INIT. Use ALTER DATABASE MODIFY FILE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot extend file '%{fld1}' using this syntax as it was not created with DISK INIT. Use ALTER DATABASE MODIFY FILE." }
				id => "message-000390"
				add_field => {
					"[event][id]" => "000390"
					"[rsa][message][id1]" => "000390"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000391
		# line in RSA:  <fld30> <fld31> <event_source> Cannot fetch into text, ntext, and image variables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot fetch into text, ntext, and image variables." }
				id => "message-000391"
				add_field => {
					"[event][id]" => "000391"
					"[rsa][message][id1]" => "000391"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000392
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find '<fld1>' in sysdatabases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find '%{fld1}' in sysdatabases." }
				id => "message-000392"
				add_field => {
					"[event][id]" => "000392"
					"[rsa][message][id1]" => "000392"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000393
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find '<fld1>'. This language may have been dropped. Contact your system administrator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find '%{fld1}'. This language may have been dropped. Contact your system administrator." }
				id => "message-000393"
				add_field => {
					"[event][id]" => "000393"
					"[rsa][message][id1]" => "000393"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000394
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find Active Directory information in the registry for this SQL Server instance. Run sp_ActiveDirectory_SCP again. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find Active Directory information in the registry for this SQL Server instance. Run sp_ActiveDirectory_SCP again." }
				id => "message-000394"
				add_field => {
					"[event][id]" => "000394"
					"[rsa][message][id1]" => "000394"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000395
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find entry in sysaltfiles for file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find entry in sysaltfiles for file '%{fld1}'." }
				id => "message-000395"
				add_field => {
					"[event][id]" => "000395"
					"[rsa][message][id1]" => "000395"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000396
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find file ID <fld1> on device '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find file ID %{fld1} on device '%{fld2}'." }
				id => "message-000396"
				add_field => {
					"[event][id]" => "000396"
					"[rsa][message][id1]" => "000396"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000397
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find index '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find index '%{fld1}'." }
				id => "message-000397"
				add_field => {
					"[event][id]" => "000397"
					"[rsa][message][id1]" => "000397"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000398
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find source object ID information for article <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find source object ID information for article %{fld1}." }
				id => "message-000398"
				add_field => {
					"[event][id]" => "000398"
					"[rsa][message][id1]" => "000398"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000399
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find the function <fld1> in the library <fld2>. Reason: <result>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find the function %{fld1} in the library %{fld2}. Reason: %{result}." }
				id => "message-000399"
				add_field => {
					"[event][id]" => "000399"
					"[rsa][message][id1]" => "000399"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000400
		# line in RSA:  <fld30> <fld31> <event_source> Cannot find the table name or the table owner corresponding to the alternative table ID(nickname) '<fld1>' in sysmergearticles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot find the table name or the table owner corresponding to the alternative table ID(nickname) '%{fld1}' in sysmergearticles." }
				id => "message-000400"
				add_field => {
					"[event][id]" => "000400"
					"[rsa][message][id1]" => "000400"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000401
		# line in RSA:  <fld30> <fld31> <event_source> Cannot get a transaction token if there is no transaction active. Reissue the statement after a transaction has been started 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot get a transaction token if there is no transaction active. Reissue the statement after a transaction has been started" }
				id => "message-000401"
				add_field => {
					"[event][id]" => "000401"
					"[rsa][message][id1]" => "000401"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000402
		# line in RSA:  <fld30> <fld31> <event_source> Cannot get properties from OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot get properties from OLE DB provider '%{fld1}'." }
				id => "message-000402"
				add_field => {
					"[event][id]" => "000402"
					"[rsa][message][id1]" => "000402"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000403
		# line in RSA:  <fld30> <fld31> <event_source> Cannot go remote while the session is enlisted in a distributed transaction that has an active savepoint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot go remote while the session is enlisted in a distributed transaction that has an active savepoint." }
				id => "message-000403"
				add_field => {
					"[event][id]" => "000403"
					"[rsa][message][id1]" => "000403"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000404
		# line in RSA:  <fld30> <fld31> <event_source> Cannot grant or revoke access directly on publication '<fld1>' because it uses the default publication access list.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot grant or revoke access directly on publication '%{fld1}' because it uses the default publication access list." }
				id => "message-000404"
				add_field => {
					"[event][id]" => "000404"
					"[rsa][message][id1]" => "000404"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000405
		# line in RSA:  <fld30> <fld31> <event_source> Cannot grant, deny or revoke permissions to or from special roles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot grant, deny or revoke permissions to or from special roles." }
				id => "message-000405"
				add_field => {
					"[event][id]" => "000405"
					"[rsa][message][id1]" => "000405"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000406
		# line in RSA:  <fld30> <fld31> <event_source> Cannot have a filegroup with the name 'DEFAULT'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot have a filegroup with the name 'DEFAULT'." }
				id => "message-000406"
				add_field => {
					"[event][id]" => "000406"
					"[rsa][message][id1]" => "000406"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000407
		# line in RSA:  <fld30> <fld31> <event_source> Cannot have an anonymous subscription on a publication that does not have an independent agent. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot have an anonymous subscription on a publication that does not have an independent agent." }
				id => "message-000407"
				add_field => {
					"[event][id]" => "000407"
					"[rsa][message][id1]" => "000407"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000408
		# line in RSA:  <fld30> <fld31> <event_source> Cannot ignore the remote Distributor (@ignore_remote_distributor cannot be 1) when enabling the database for publishing or merge publishing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot ignore the remote Distributor (@ignore_remote_distributor cannot be 1) when enabling the database for publishing or merge publishing." }
				id => "message-000408"
				add_field => {
					"[event][id]" => "000408"
					"[rsa][message][id1]" => "000408"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000409
		# line in RSA:  <fld30> <fld31> <event_source> Cannot index the view '<fld1>'. It references another view or function '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot index the view '%{fld1}'. It references another view or function '%{fld2}'." }
				id => "message-000409"
				add_field => {
					"[event][id]" => "000409"
					"[rsa][message][id1]" => "000409"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000410
		# line in RSA:  <fld30> <fld31> <event_source> Cannot initialize COM library because CoInitialize failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot initialize COM library because CoInitialize failed." }
				id => "message-000410"
				add_field => {
					"[event][id]" => "000410"
					"[rsa][message][id1]" => "000410"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000411
		# line in RSA:  <fld30> <fld31> <event_source> Cannot initialize Message Queuing-based subscription because the platform is not Message Queuing <fld1> compliant 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot initialize Message Queuing-based subscription because the platform is not Message Queuing %{fld1} compliant" }
				id => "message-000411"
				add_field => {
					"[event][id]" => "000411"
					"[rsa][message][id1]" => "000411"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000412
		# line in RSA:  <fld30> <fld31> <event_source> Cannot insert a non-null value into a timestamp column. Use INSERT with a column list or with a default of NULL for the timestamp column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot insert a non-null value into a timestamp column. Use INSERT with a column list or with a default of NULL for the timestamp column." }
				id => "message-000412"
				add_field => {
					"[event][id]" => "000412"
					"[rsa][message][id1]" => "000412"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000413
		# line in RSA:  <fld30> <fld31> <event_source> Cannot insert duplicate key row in object '<fld1>' with unique index '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot insert duplicate key row in object '%{fld1}' with unique index '%{fld2}'." }
				id => "message-000413"
				add_field => {
					"[event][id]" => "000413"
					"[rsa][message][id1]" => "000413"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000414
		# line in RSA:  <fld30> <fld31> <event_source> Cannot insert explicit value for identity column in table '<fld1>' when IDENTITY_INSERT is set to OFF. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot insert explicit value for identity column in table '%{fld1}' when IDENTITY_INSERT is set to OFF." }
				id => "message-000414"
				add_field => {
					"[event][id]" => "000414"
					"[rsa][message][id1]" => "000414"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000415
		# line in RSA:  <fld30> <fld31> <event_source> Cannot insert into a sort not in row input phase. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot insert into a sort not in row input phase." }
				id => "message-000415"
				add_field => {
					"[event][id]" => "000415"
					"[rsa][message][id1]" => "000415"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000416
		# line in RSA:  <fld30> <fld31> <event_source> Cannot INSERT into partitioned view '<fld1>' because values were not supplied for all columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot INSERT into partitioned view '%{fld1}' because values were not supplied for all columns." }
				id => "message-000416"
				add_field => {
					"[event][id]" => "000416"
					"[rsa][message][id1]" => "000416"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000417
		# line in RSA:  <fld30> <fld31> <event_source> Cannot insert the value NULL into column '<fld1>', table '<fld2>'; column does not allow nulls. <fld3> fails. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot insert the value NULL into column '%{fld1}', table '%{fld2}'; column does not allow nulls. %{fld3} fails." }
				id => "message-000417"
				add_field => {
					"[event][id]" => "000417"
					"[rsa][message][id1]" => "000417"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000418
		# line in RSA:  <fld30> <fld31> <event_source> Cannot issue SAVE TRANSACTION when there is no active transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot issue SAVE TRANSACTION when there is no active transaction." }
				id => "message-000418"
				add_field => {
					"[event][id]" => "000418"
					"[rsa][message][id1]" => "000418"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000419
		# line in RSA:  <fld30> <fld31> <event_source> Cannot list '<fld1>' in Active Directory because the name is too long. Active Directory common names cannot exceed 64 characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot list '%{fld1}' in Active Directory because the name is too long. Active Directory common names cannot exceed 64 characters." }
				id => "message-000419"
				add_field => {
					"[event][id]" => "000419"
					"[rsa][message][id1]" => "000419"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000420
		# line in RSA:  <fld30> <fld31> <event_source> Cannot load the DLL <fld1>, or one of the DLLs it references. Reason: <result>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot load the DLL %{fld1}, or one of the DLLs it references. Reason: %{result}." }
				id => "message-000420"
				add_field => {
					"[event][id]" => "000420"
					"[rsa][message][id1]" => "000420"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000421
		# line in RSA:  <fld30> <fld31> <event_source> Cannot make '<fld1>' database removable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot make '%{fld1}' database removable." }
				id => "message-000421"
				add_field => {
					"[event][id]" => "000421"
					"[rsa][message][id1]" => "000421"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000422
		# line in RSA:  <fld30> <fld31> <event_source> Cannot make a role a member of itself. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot make a role a member of itself." }
				id => "message-000422"
				add_field => {
					"[event][id]" => "000422"
					"[rsa][message][id1]" => "000422"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000423
		# line in RSA:  <fld30> <fld31> <event_source> Cannot make the change because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force the change and invalidate the existing snapshot. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot make the change because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force the change and invalidate the existing snapshot." }
				id => "message-000423"
				add_field => {
					"[event][id]" => "000423"
					"[rsa][message][id1]" => "000423"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000424
		# line in RSA:  <fld30> <fld31> <event_source> Cannot make the change because there are active subscriptions. Set @force_reinit_subscription to 1 to force the change and reinitialize the active subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot make the change because there are active subscriptions. Set @force_reinit_subscription to 1 to force the change and reinitialize the active subscriptions." }
				id => "message-000424"
				add_field => {
					"[event][id]" => "000424"
					"[rsa][message][id1]" => "000424"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000425
		# line in RSA:  <fld30> <fld31> <event_source> Cannot modify or delete operator '<fld1>' while this server is a <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot modify or delete operator '%{fld1}' while this server is a %{fld2}." }
				id => "message-000425"
				add_field => {
					"[event][id]" => "000425"
					"[rsa][message][id1]" => "000425"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000426
		# line in RSA:  <fld30> <fld31> <event_source> Cannot modify publication '<fld1>'.  The sync_method cannot be changed to 'native', 'concurrent' or 'concurrent_c' because the publication has subscriptions from ODBC or OLE DB Subscribers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot modify publication '%{fld1}'.  The sync_method cannot be changed to 'native', 'concurrent' or 'concurrent_c' because the publication has subscriptions from ODBC or OLE DB Subscribers." }
				id => "message-000426"
				add_field => {
					"[event][id]" => "000426"
					"[rsa][message][id1]" => "000426"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000427
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open '<fld1>' to take offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open '%{fld1}' to take offline." }
				id => "message-000427"
				add_field => {
					"[event][id]" => "000427"
					"[rsa][message][id1]" => "000427"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000428
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open backup device '<fld1>'. Device error or device off-line. See the SQL Server error log for more details. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open backup device '%{fld1}'. Device error or device off-line. See the SQL Server error log for more details." }
				id => "message-000428"
				add_field => {
					"[event][id]" => "000428"
					"[rsa][message][id1]" => "000428"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000429
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open database '<username>' version <fld2>. Upgrade the database to the latest version. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open database '%{username}' version %{fld2}. Upgrade the database to the latest version." }
				id => "message-000429"
				add_field => {
					"[event][id]" => "000429"
					"[rsa][message][id1]" => "000429"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000430
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open database '<username>'. It has not been upgraded to the latest format. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open database '%{username}'. It has not been upgraded to the latest format." }
				id => "message-000430"
				add_field => {
					"[event][id]" => "000430"
					"[rsa][message][id1]" => "000430"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000431
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open database requested in login '<username>'. Login fails. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open database requested in login '%{username}'. Login fails." }
				id => "message-000431"
				add_field => {
				"result" => "Login Failed"
					"[event][id]" => "000431"
					"[rsa][message][id1]" => "000431"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000432
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open database requested in login (<fld1>). Using user default '<username>' instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open database requested in login (%{fld1}). Using user default '%{username}' instead." }
				id => "message-000432"
				add_field => {
					"[event][id]" => "000432"
					"[rsa][message][id1]" => "000432"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000433
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open either database requested in login (<fld1>) or user default database. Using master database instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open either database requested in login (%{fld1}) or user default database. Using master database instead." }
				id => "message-000433"
				add_field => {
					"[event][id]" => "000433"
					"[rsa][message][id1]" => "000433"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000434
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open or query registry key '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open or query registry key '%{fld1}'." }
				id => "message-000434"
				add_field => {
					"[event][id]" => "000434"
					"[rsa][message][id1]" => "000434"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000435
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open user default database. Login failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open user default database. Login failed." }
				id => "message-000435"
				add_field => {
				"result" => "Login Failed"
					"[event][id]" => "000435"
					"[rsa][message][id1]" => "000435"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000436
		# line in RSA:  <fld30> <fld31> <event_source> Cannot open user default database. Using master database instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot open user default database. Using master database instead." }
				id => "message-000436"
				add_field => {
					"[event][id]" => "000436"
					"[rsa][message][id1]" => "000436"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000437
		# line in RSA:  <fld30> <fld31> <event_source> Cannot overwrite file '<fld1>' because it is marked as read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot overwrite file '%{fld1}' because it is marked as read-only." }
				id => "message-000437"
				add_field => {
					"[event][id]" => "000437"
					"[rsa][message][id1]" => "000437"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000438
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform a <fld1> operation inside a user transaction. Terminate the transaction and reissue the statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform a %{fld1} operation inside a user transaction. Terminate the transaction and reissue the statement." }
				id => "message-000438"
				add_field => {
					"[event][id]" => "000438"
					"[rsa][message][id1]" => "000438"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000439
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform a backup or restore operation within a transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform a backup or restore operation within a transaction." }
				id => "message-000439"
				add_field => {
					"[event][id]" => "000439"
					"[rsa][message][id1]" => "000439"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000440
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform a differential backup for database '<fld1>', because a current database backup does not exist. Perform a full database backup by reissuing BACKUP DATABASE, omitting the WITH DIFFERENTIAL option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform a differential backup for database '%{fld1}', because a current database backup does not exist. Perform a full database backup by reissuing BACKUP DATABASE, omitting the WITH DIFFERENTIAL option." }
				id => "message-000440"
				add_field => {
					"[event][id]" => "000440"
					"[rsa][message][id1]" => "000440"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000441
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform a differential backup for file '<fld1>' because a current file backup does not exist. Reissue BACKUP DATABASE omitting the WITH DIFFERENTIAL option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform a differential backup for file '%{fld1}' because a current file backup does not exist. Reissue BACKUP DATABASE omitting the WITH DIFFERENTIAL option." }
				id => "message-000441"
				add_field => {
					"[event][id]" => "000441"
					"[rsa][message][id1]" => "000441"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000442
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform alter on <fld1> because it is an incompatible object type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform alter on %{fld1} because it is an incompatible object type." }
				id => "message-000442"
				add_field => {
					"[event][id]" => "000442"
					"[rsa][message][id1]" => "000442"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000443
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform an aggregate function on an expression containing an aggregate or a subquery. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform an aggregate function on an expression containing an aggregate or a subquery." }
				id => "message-000443"
				add_field => {
					"[event][id]" => "000443"
					"[rsa][message][id1]" => "000443"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000444
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform bulk insert. Invalid collation name for source column <fld1> in format file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform bulk insert. Invalid collation name for source column %{fld1} in format file '%{fld2}'." }
				id => "message-000444"
				add_field => {
					"[event][id]" => "000444"
					"[rsa][message][id1]" => "000444"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000445
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform SQL Server 7.0 compatible checksum operation on a merge article that has a vertical or horizontal partition. Rowcount validation and SQL Server 2000 compatible binary checksum operation can be performed on this article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform SQL Server 7.0 compatible checksum operation on a merge article that has a vertical or horizontal partition. Rowcount validation and SQL Server 2000 compatible binary checksum operation can be performed on this article." }
				id => "message-000445"
				add_field => {
					"[event][id]" => "000445"
					"[rsa][message][id1]" => "000445"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000446
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform this action on a job you do not own. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform this action on a job you do not own." }
				id => "message-000446"
				add_field => {
					"[event][id]" => "000446"
					"[rsa][message][id1]" => "000446"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000447
		# line in RSA:  <fld30> <fld31> <event_source> Cannot perform this operation while SQLServerAgent is starting. Try again later. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot perform this operation while SQLServerAgent is starting. Try again later." }
				id => "message-000447"
				add_field => {
					"[event][id]" => "000447"
					"[rsa][message][id1]" => "000447"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000448
		# line in RSA:  <fld30> <fld31> <event_source> Cannot publish table '<fld1>' for both a merge publication and a publication with the queued updating option . 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot publish table '%{fld1}' for both a merge publication and a publication with the queued updating option ." }
				id => "message-000448"
				add_field => {
					"[event][id]" => "000448"
					"[rsa][message][id1]" => "000448"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000449
		# line in RSA:  <fld30> <fld31> <event_source> Cannot publish the database object '<fld1>' because it is encrypted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot publish the database object '%{fld1}' because it is encrypted." }
				id => "message-000449"
				add_field => {
					"[event][id]" => "000449"
					"[rsa][message][id1]" => "000449"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000450
		# line in RSA:  <fld30> <fld31> <event_source> Cannot rebuild index for the '<fld1>' table in the '<fld2>' database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot rebuild index for the '%{fld1}' table in the '%{fld2}' database." }
				id => "message-000450"
				add_field => {
					"[event][id]" => "000450"
					"[rsa][message][id1]" => "000450"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000451
		# line in RSA:  <fld30> <fld31> <event_source> Cannot reconfigure SQL Server to use sort order ID <fld1>, because the row for that sort order does not exist in syscharsets. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot reconfigure SQL Server to use sort order ID %{fld1}, because the row for that sort order does not exist in syscharsets." }
				id => "message-000451"
				add_field => {
					"[event][id]" => "000451"
					"[rsa][message][id1]" => "000451"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000452
		# line in RSA:  <fld30> <fld31> <event_source> Cannot recover the master database. Exiting. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot recover the master database. Exiting." }
				id => "message-000452"
				add_field => {
					"[event][id]" => "000452"
					"[rsa][message][id1]" => "000452"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000454
		# line in RSA:  <fld30> <fld31> <event_source> Cannot re-create index '<fld1>'. The new index definition does not match the constraint being enforced by the existing index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot re-create index '%{fld1}'. The new index definition does not match the constraint being enforced by the existing index." }
				id => "message-000454"
				add_field => {
					"[event][id]" => "000454"
					"[rsa][message][id1]" => "000454"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000455
		# line in RSA:  <fld30> <fld31> <event_source> Cannot re-create index on this table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot re-create index on this table." }
				id => "message-000455"
				add_field => {
					"[event][id]" => "000455"
					"[rsa][message][id1]" => "000455"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000456
		# line in RSA:  <fld30> <fld31> <event_source> Cannot reference text, ntext, or image columns in a filter stored procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot reference text, ntext, or image columns in a filter stored procedure." }
				id => "message-000456"
				add_field => {
					"[event][id]" => "000456"
					"[rsa][message][id1]" => "000456"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000457
		# line in RSA:  <fld30> <fld31> <event_source> Cannot reinitialize article '<fld1>' in subscription '<fld2>' to publication '<fld3>' (subscribed with the 'no sync' option). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot reinitialize article '%{fld1}' in subscription '%{fld2}' to publication '%{fld3}' (subscribed with the 'no sync' option)." }
				id => "message-000457"
				add_field => {
					"[event][id]" => "000457"
					"[rsa][message][id1]" => "000457"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000458
		# line in RSA:  <fld30> <fld31> <event_source> Cannot reinitialize subscriptions of non-immediate_sync publications. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot reinitialize subscriptions of non-immediate_sync publications." }
				id => "message-000458"
				add_field => {
					"[event][id]" => "000458"
					"[rsa][message][id1]" => "000458"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000459
		# line in RSA:  <fld30> <fld31> <event_source> Cannot remove the file '<fld1>' because it is the only file in the DEFAULT filegroup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot remove the file '%{fld1}' because it is the only file in the DEFAULT filegroup." }
				id => "message-000459"
				add_field => {
					"[event][id]" => "000459"
					"[rsa][message][id1]" => "000459"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000460
		# line in RSA:  <fld30> <fld31> <event_source> Cannot rename the '<fld1>' operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot rename the '%{fld1}' operator." }
				id => "message-000460"
				add_field => {
					"[event][id]" => "000460"
					"[rsa][message][id1]" => "000460"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000461
		# line in RSA:  <fld30> <fld31> <event_source> Cannot rename the table because it is published for replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot rename the table because it is published for replication." }
				id => "message-000461"
				add_field => {
					"[event][id]" => "000461"
					"[rsa][message][id1]" => "000461"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000462
		# line in RSA:  <fld30> <fld31> <event_source> Cannot resolve collation conflict for <fld1> operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot resolve collation conflict for %{fld1} operation." }
				id => "message-000462"
				add_field => {
					"[event][id]" => "000462"
					"[rsa][message][id1]" => "000462"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000463
		# line in RSA:  <fld30> <fld31> <event_source> Cannot resolve collation conflict for column <fld1> in <fld2> statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot resolve collation conflict for column %{fld1} in %{fld2} statement." }
				id => "message-000463"
				add_field => {
					"[event][id]" => "000463"
					"[rsa][message][id1]" => "000463"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000464
		# line in RSA:  <fld30> <fld31> <event_source> Cannot resolve load hint for object <fld1> because the object is not a user table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot resolve load hint for object %{fld1} because the object is not a user table." }
				id => "message-000464"
				add_field => {
					"[event][id]" => "000464"
					"[rsa][message][id1]" => "000464"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000465
		# line in RSA:  <fld30> <fld31> <event_source> Cannot restore any database other than master when the server is in single user mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot restore any database other than master when the server is in single user mode." }
				id => "message-000465"
				add_field => {
					"[event][id]" => "000465"
					"[rsa][message][id1]" => "000465"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000466
		# line in RSA:  <fld30> <fld31> <event_source> Cannot restore file <fld1> because the file is offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot restore file %{fld1} because the file is offline." }
				id => "message-000466"
				add_field => {
					"[event][id]" => "000466"
					"[rsa][message][id1]" => "000466"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000467
		# line in RSA:  <fld30> <fld31> <event_source> Cannot restore filegroup <fld1> because the filegroup is offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot restore filegroup %{fld1} because the filegroup is offline." }
				id => "message-000467"
				add_field => {
					"[event][id]" => "000467"
					"[rsa][message][id1]" => "000467"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000468
		# line in RSA:  <fld30> <fld31> <event_source> Cannot restore the file '<fld1>' because it was originally written with sector size <fld2> '<fld3>' is now on a device with sector size <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot restore the file '%{fld1}' because it was originally written with sector size %{fld2} '%{fld3}' is now on a device with sector size %{fld4}." }
				id => "message-000468"
				add_field => {
					"[event][id]" => "000468"
					"[rsa][message][id1]" => "000468"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000469
		# line in RSA:  <fld30> <fld31> <event_source> Cannot retrieve row from page <fld1> by RID because the slotid (<fld2>) is not valid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot retrieve row from page %{fld1} by RID because the slotid (%{fld2}) is not valid." }
				id => "message-000469"
				add_field => {
					"[event][id]" => "000469"
					"[rsa][message][id1]" => "000469"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000470
		# line in RSA:  <fld30> <fld31> <event_source> Cannot return multiple result sets (not supported by the provider). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot return multiple result sets (not supported by the provider)." }
				id => "message-000470"
				add_field => {
					"[event][id]" => "000470"
					"[rsa][message][id1]" => "000470"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000471
		# line in RSA:  <fld30> <fld31> <event_source> Cannot roll back <fld1>. No transaction or savepoint of that name was found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot roll back %{fld1}. No transaction or savepoint of that name was found." }
				id => "message-000471"
				add_field => {
					"[event][id]" => "000471"
					"[rsa][message][id1]" => "000471"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000472
		# line in RSA:  <fld30> <fld31> <event_source> Cannot roll forward the database with on-disk structure version <fld1>. The server supports version <fld2>. Reissue the RESTORE statement WITH RECOVERY. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot roll forward the database with on-disk structure version %{fld1}. The server supports version %{fld2}. Reissue the RESTORE statement WITH RECOVERY." }
				id => "message-000472"
				add_field => {
					"[event][id]" => "000472"
					"[rsa][message][id1]" => "000472"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000473
		# line in RSA:  <fld30> <fld31> <event_source> Cannot run '<fld1>' when the Log Reader Agent is replicating the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot run '%{fld1}' when the Log Reader Agent is replicating the database." }
				id => "message-000473"
				add_field => {
					"[event][id]" => "000473"
					"[rsa][message][id1]" => "000473"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000474
		# line in RSA:  <fld30> <fld31> <event_source> Cannot run SELECT INTO in this database. The database owner must run sp_dboption to enable this option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot run SELECT INTO in this database. The database owner must run sp_dboption to enable this option." }
				id => "message-000474"
				add_field => {
					"[event][id]" => "000474"
					"[rsa][message][id1]" => "000474"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000475
		# line in RSA:  <fld30> <fld31> <event_source> Cannot schema bind <fld1> '<fld2>' because name '<fld3>' is invalid for schema binding. Names must be in two-part format and an object cannot reference itself. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot schema bind %{fld1} '%{fld2}' because name '%{fld3}' is invalid for schema binding. Names must be in two-part format and an object cannot reference itself." }
				id => "message-000475"
				add_field => {
					"[event][id]" => "000475"
					"[rsa][message][id1]" => "000475"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000476
		# line in RSA:  <fld30> <fld31> <event_source> Cannot schema bind <fld1> '<fld2>'. '<fld3>' is not schema bound. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot schema bind %{fld1} '%{fld2}'. '%{fld3}' is not schema bound." }
				id => "message-000476"
				add_field => {
					"[event][id]" => "000476"
					"[rsa][message][id1]" => "000476"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000477
		# line in RSA:  <fld30> <fld31> <event_source> Cannot schema bind function '<fld1>' because it contains an EXECUTE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot schema bind function '%{fld1}' because it contains an EXECUTE statement." }
				id => "message-000477"
				add_field => {
					"[event][id]" => "000477"
					"[rsa][message][id1]" => "000477"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000478
		# line in RSA:  <fld30> <fld31> <event_source> Cannot set alerts on message ID <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot set alerts on message ID %{fld1}." }
				id => "message-000478"
				add_field => {
					"[event][id]" => "000478"
					"[rsa][message][id1]" => "000478"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000479
		# line in RSA:  <fld30> <fld31> <event_source> Cannot set any properties while there is an open rowset. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot set any properties while there is an open rowset." }
				id => "message-000479"
				add_field => {
					"[event][id]" => "000479"
					"[rsa][message][id1]" => "000479"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000480
		# line in RSA:  <fld30> <fld31> <event_source> Cannot set compatibility level because database has a view or computed column that is indexed. These indexes require a SQL Server compatible database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot set compatibility level because database has a view or computed column that is indexed. These indexes require a SQL Server compatible database." }
				id => "message-000480"
				add_field => {
					"[event][id]" => "000480"
					"[rsa][message][id1]" => "000480"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000481
		# line in RSA:  <fld30> <fld31> <event_source> Cannot set incompatible publication properties. The 'allow_anonymous' property of a publication depends on the 'immediate_sync' property. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot set incompatible publication properties. The 'allow_anonymous' property of a publication depends on the 'immediate_sync' property." }
				id => "message-000481"
				add_field => {
					"[event][id]" => "000481"
					"[rsa][message][id1]" => "000481"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000482
		# line in RSA:  <fld30> <fld31> <event_source> Cannot set incompatible publication properties. The 'immediate_sync' property of a publication is dependent on the 'independent agent' property of a publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot set incompatible publication properties. The 'immediate_sync' property of a publication is dependent on the 'independent agent' property of a publication." }
				id => "message-000482"
				add_field => {
					"[event][id]" => "000482"
					"[rsa][message][id1]" => "000482"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000483
		# line in RSA:  <fld30> <fld31> <event_source> Cannot set or reset the <fld1> option within a procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot set or reset the %{fld1} option within a procedure." }
				id => "message-000483"
				add_field => {
					"[event][id]" => "000483"
					"[rsa][message][id1]" => "000483"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000484
		# line in RSA:  <fld30> <fld31> <event_source> Cannot set the default language to a language ID not defined in syslanguages. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot set the default language to a language ID not defined in syslanguages." }
				id => "message-000484"
				add_field => {
					"[event][id]" => "000484"
					"[rsa][message][id1]" => "000484"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000485
		# line in RSA:  <fld30> <fld31> <event_source> Cannot share extent <fld1> among more than eight sort runs. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot share extent %{fld1} among more than eight sort runs." }
				id => "message-000485"
				add_field => {
					"[event][id]" => "000485"
					"[rsa][message][id1]" => "000485"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000486
		# line in RSA:  <fld30> <fld31> <event_source> Cannot share extent <fld1> with shared extent directory full. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot share extent %{fld1} with shared extent directory full." }
				id => "message-000486"
				add_field => {
					"[event][id]" => "000486"
					"[rsa][message][id1]" => "000486"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000487
		# line in RSA:  <fld30> <fld31> <event_source> Cannot shrink 'read only' database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot shrink 'read only' database '%{fld1}'." }
				id => "message-000487"
				add_field => {
					"[event][id]" => "000487"
					"[rsa][message][id1]" => "000487"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000488
		# line in RSA:  <fld30> <fld31> <event_source> Cannot shrink file '<fld1>' in database '<fld2>' to <fld3> pages as it only contains <fld4> pages. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot shrink file '%{fld1}' in database '%{fld2}' to %{fld3} pages as it only contains %{fld4} pages." }
				id => "message-000488"
				add_field => {
					"[event][id]" => "000488"
					"[rsa][message][id1]" => "000488"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000489
		# line in RSA:  <fld30> <fld31> <event_source> Cannot shrink log file <fld1> (<fld2>) because all logical log files are in use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot shrink log file %{fld1} (%{fld2}) because all logical log files are in use." }
				id => "message-000489"
				add_field => {
					"[event][id]" => "000489"
					"[rsa][message][id1]" => "000489"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000490
		# line in RSA:  <fld30> <fld31> <event_source> Cannot shrink log file <fld1> (<fld2>) because of minimum log space required. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot shrink log file %{fld1} (%{fld2}) because of minimum log space required." }
				id => "message-000490"
				add_field => {
					"[event][id]" => "000490"
					"[rsa][message][id1]" => "000490"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000491
		# line in RSA:  <fld30> <fld31> <event_source> Cannot shrink log file <fld1> (<fld2>) because requested size (<fld3>KB) is larger than the start of the last logical log file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot shrink log file %{fld1} (%{fld2}) because requested size (%{fld3}KB) is larger than the start of the last logical log file." }
				id => "message-000491"
				add_field => {
					"[event][id]" => "000491"
					"[rsa][message][id1]" => "000491"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000492
		# line in RSA:  <fld30> <fld31> <event_source> Cannot shrink log file <fld1> (<fld2>) because total number of logical log files cannot be fewer than <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot shrink log file %{fld1} (%{fld2}) because total number of logical log files cannot be fewer than %{fld3}." }
				id => "message-000492"
				add_field => {
					"[event][id]" => "000492"
					"[rsa][message][id1]" => "000492"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000493
		# line in RSA:  <fld30> <fld31> <event_source> Cannot sort a row of size <fld1>, which is greater than the allowable maximum of <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot sort a row of size %{fld1}, which is greater than the allowable maximum of %{fld2}." }
				id => "message-000493"
				add_field => {
					"[event][id]" => "000493"
					"[rsa][message][id1]" => "000493"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000494
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify <fld1> data type (RAISERROR parameter <fld2>) as a substitution parameter for RAISERRROR. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify %{fld1} data type (RAISERROR parameter %{fld2}) as a substitution parameter for RAISERRROR." }
				id => "message-000494"
				add_field => {
					"[event][id]" => "000494"
					"[rsa][message][id1]" => "000494"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000495
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify '<fld1>' as the operator to be notified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify '%{fld1}' as the operator to be notified." }
				id => "message-000495"
				add_field => {
					"[event][id]" => "000495"
					"[rsa][message][id1]" => "000495"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000496
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify a job ID for a new job. An ID will be assigned by the procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify a job ID for a new job. An ID will be assigned by the procedure." }
				id => "message-000496"
				add_field => {
					"[event][id]" => "000496"
					"[rsa][message][id1]" => "000496"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000497
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify a JOIN algorithm with a remote JOIN. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify a JOIN algorithm with a remote JOIN." }
				id => "message-000497"
				add_field => {
					"[event][id]" => "000497"
					"[rsa][message][id1]" => "000497"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000498
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify a log device in a CREATE DATABASE statement without also specifying at least one non-log device. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify a log device in a CREATE DATABASE statement without also specifying at least one non-log device." }
				id => "message-000498"
				add_field => {
					"[event][id]" => "000498"
					"[rsa][message][id1]" => "000498"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000499
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify an index or locking hint for a remote data source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify an index or locking hint for a remote data source." }
				id => "message-000499"
				add_field => {
					"[event][id]" => "000499"
					"[rsa][message][id1]" => "000499"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000500
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify both READ_ONLY and FOR READ ONLY on a cursor declaration. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify both READ_ONLY and FOR READ ONLY on a cursor declaration." }
				id => "message-000500"
				add_field => {
					"[event][id]" => "000500"
					"[rsa][message][id1]" => "000500"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000501
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify more than <fld1> column names for statistics or index key list. <fld2> specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify more than %{fld1} column names for statistics or index key list. %{fld2} specified." }
				id => "message-000501"
				add_field => {
					"[event][id]" => "000501"
					"[rsa][message][id1]" => "000501"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000502
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify outer join operators in a query containing joined tables. View or function '<fld1>' contains outer join operators. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify outer join operators in a query containing joined tables. View or function '%{fld1}' contains outer join operators." }
				id => "message-000502"
				add_field => {
					"[event][id]" => "000502"
					"[rsa][message][id1]" => "000502"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000503
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify UPDLOCK or TABLOCKX on a read-only table in a cursor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify UPDLOCK or TABLOCKX on a read-only table in a cursor." }
				id => "message-000503"
				add_field => {
					"[event][id]" => "000503"
					"[rsa][message][id1]" => "000503"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000504
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify UPDLOCK or TABLOCKX with READ ONLY or INSENSITIVE cursors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify UPDLOCK or TABLOCKX with READ ONLY or INSENSITIVE cursors." }
				id => "message-000504"
				add_field => {
					"[event][id]" => "000504"
					"[rsa][message][id1]" => "000504"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000505
		# line in RSA:  <fld30> <fld31> <event_source> Cannot specify user error format string with a length exceeding <fld29> bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot specify user error format string with a length exceeding %{fld29} bytes." }
				id => "message-000505"
				add_field => {
					"[event][id]" => "000505"
					"[rsa][message][id1]" => "000505"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000506
		# line in RSA:  <fld30> <fld31> <event_source> Cannot start C2 audit trace. SQL Server is shutting down. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot start C2 audit trace. SQL Server is shutting down." }
				id => "message-000506"
				add_field => {
					"[event][id]" => "000506"
					"[rsa][message][id1]" => "000506"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000507
		# line in RSA:  <fld30> <fld31> <event_source> Cannot start job '<fld1>' (ID <fld2>) because it does not have any job server(s) defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot start job '%{fld1}' (ID %{fld2}) because it does not have any job server(s) defined." }
				id => "message-000507"
				add_field => {
					"[event][id]" => "000507"
					"[rsa][message][id1]" => "000507"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000508
		# line in RSA:  <fld30> <fld31> <event_source> Cannot start the MSSQLServerADHelper service. Verify that the service account for this SQL Server instance has the necessary permissions to start the MSSQLServerADHelper service. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot start the MSSQLServerADHelper service. Verify that the service account for this SQL Server instance has the necessary permissions to start the MSSQLServerADHelper service." }
				id => "message-000508"
				add_field => {
					"[event][id]" => "000508"
					"[rsa][message][id1]" => "000508"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000509
		# line in RSA:  <fld30> <fld31> <event_source> Cannot stop job '<fld1>' (ID <fld2>) because it does not have any job server(s) defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot stop job '%{fld1}' (ID %{fld2}) because it does not have any job server(s) defined." }
				id => "message-000509"
				add_field => {
					"[event][id]" => "000509"
					"[rsa][message][id1]" => "000509"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000510
		# line in RSA:  <fld30> <fld31> <event_source> Cannot subscribe to an inactive publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot subscribe to an inactive publication." }
				id => "message-000510"
				add_field => {
					"[event][id]" => "000510"
					"[rsa][message][id1]" => "000510"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000511
		# line in RSA:  <fld30> <fld31> <event_source> Cannot subscribe to publication <fld1> because the Subscriber has a subscription to a publication of sync_type 'dump database'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot subscribe to publication %{fld1} because the Subscriber has a subscription to a publication of sync_type 'dump database'." }
				id => "message-000511"
				add_field => {
					"[event][id]" => "000511"
					"[rsa][message][id1]" => "000511"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000512
		# line in RSA:  <fld30> <fld31> <event_source> Cannot subscribe to publication of sync_type 'dump database' because the Subscriber has subscriptions to other publications. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot subscribe to publication of sync_type 'dump database' because the Subscriber has subscriptions to other publications." }
				id => "message-000512"
				add_field => {
					"[event][id]" => "000512"
					"[rsa][message][id1]" => "000512"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000513
		# line in RSA:  <fld30> <fld31> <event_source> Cannot support identity_range_control because this table does not have an identity column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot support identity_range_control because this table does not have an identity column." }
				id => "message-000513"
				add_field => {
					"[event][id]" => "000513"
					"[rsa][message][id1]" => "000513"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000514
		# line in RSA:  <fld30> <fld31> <event_source> Cannot suspend a sort not in row input phase. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot suspend a sort not in row input phase." }
				id => "message-000514"
				add_field => {
					"[event][id]" => "000514"
					"[rsa][message][id1]" => "000514"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000515
		# line in RSA:  <fld30> <fld31> <event_source> Cannot take '<fld1>' offline because the database is in use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot take '%{fld1}' offline because the database is in use." }
				id => "message-000515"
				add_field => {
					"[event][id]" => "000515"
					"[rsa][message][id1]" => "000515"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000516
		# line in RSA:  <fld30> <fld31> <event_source> Cannot truncate table '<fld1>' because it is being referenced by a FOREIGN KEY constraint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot truncate table '%{fld1}' because it is being referenced by a FOREIGN KEY constraint." }
				id => "message-000516"
				add_field => {
					"[event][id]" => "000516"
					"[rsa][message][id1]" => "000516"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000517
		# line in RSA:  <fld30> <fld31> <event_source> Cannot truncate table '<fld1>' because it is published for replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot truncate table '%{fld1}' because it is published for replication." }
				id => "message-000517"
				add_field => {
					"[event][id]" => "000517"
					"[rsa][message][id1]" => "000517"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000518
		# line in RSA:  <fld30> <fld31> <event_source> Cannot unbind from '<fld1>'. Use ALTER TABLE DROP CONSTRAINT. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot unbind from '%{fld1}'. Use ALTER TABLE DROP CONSTRAINT." }
				id => "message-000518"
				add_field => {
					"[event][id]" => "000518"
					"[rsa][message][id1]" => "000518"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000519
		# line in RSA:  <fld30> <fld31> <event_source> Cannot uninstall the Distributor because there are databases enabled for publishing or merge publishing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot uninstall the Distributor because there are databases enabled for publishing or merge publishing." }
				id => "message-000519"
				add_field => {
					"[event][id]" => "000519"
					"[rsa][message][id1]" => "000519"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000520
		# line in RSA:  <fld30> <fld31> <event_source> Cannot uninstall the Distributor because there are Subscribers defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot uninstall the Distributor because there are Subscribers defined." }
				id => "message-000520"
				add_field => {
					"[event][id]" => "000520"
					"[rsa][message][id1]" => "000520"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000521
		# line in RSA:  <fld30> <fld31> <event_source> Cannot unsplit logical page <fld1> in object '<fld2>', in database '<fld3>'. Both pages together contain more data than will fit on one page. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot unsplit logical page %{fld1} in object '%{fld2}', in database '%{fld3}'. Both pages together contain more data than will fit on one page." }
				id => "message-000521"
				add_field => {
					"[event][id]" => "000521"
					"[rsa][message][id1]" => "000521"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000522
		# line in RSA:  <fld30> <fld31> <event_source> Cannot update a timestamp column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot update a timestamp column." }
				id => "message-000522"
				add_field => {
					"[event][id]" => "000522"
					"[rsa][message][id1]" => "000522"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000523
		# line in RSA:  <fld30> <fld31> <event_source> Cannot update identity column '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot update identity column '%{fld1}'." }
				id => "message-000523"
				add_field => {
					"[event][id]" => "000523"
					"[rsa][message][id1]" => "000523"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000524
		# line in RSA:  <fld30> <fld31> <event_source> Cannot update partitioned view '<fld1>' because the definition of the view column '<fld2>' in table '<fld3>' has a IDENTITY constraint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot update partitioned view '%{fld1}' because the definition of the view column '%{fld2}' in table '%{fld3}' has a IDENTITY constraint." }
				id => "message-000524"
				add_field => {
					"[event][id]" => "000524"
					"[rsa][message][id1]" => "000524"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000525
		# line in RSA:  <fld30> <fld31> <event_source> Cannot UPDATE partitioning column '<fld1>' of view '<fld2>' because the table '<fld3>' has a CASCADE DELETE or CASCADE UPDATE constraint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot UPDATE partitioning column '%{fld1}' of view '%{fld2}' because the table '%{fld3}' has a CASCADE DELETE or CASCADE UPDATE constraint." }
				id => "message-000525"
				add_field => {
					"[event][id]" => "000525"
					"[rsa][message][id1]" => "000525"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000526
		# line in RSA:  <fld30> <fld31> <event_source> Cannot UPDATE partitioning column '<fld1>' of view '<fld2>' because the table '<fld3>' has a INSERT, UPDATE or DELETE trigger. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot UPDATE partitioning column '%{fld1}' of view '%{fld2}' because the table '%{fld3}' has a INSERT, UPDATE or DELETE trigger." }
				id => "message-000526"
				add_field => {
					"[event][id]" => "000526"
					"[rsa][message][id1]" => "000526"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000527
		# line in RSA:  <fld30> <fld31> <event_source> Cannot update Subscriber information row.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot update Subscriber information row." }
				id => "message-000527"
				add_field => {
					"[event][id]" => "000527"
					"[rsa][message][id1]" => "000527"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000528
		# line in RSA:  <fld30> <fld31> <event_source> Cannot update subscription row.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot update subscription row." }
				id => "message-000528"
				add_field => {
					"[event][id]" => "000528"
					"[rsa][message][id1]" => "000528"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000529
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use <fld1> granularity hint on table '<fld2>' because locking at the specified granularity is inhibited. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use %{fld1} granularity hint on table '%{fld2}' because locking at the specified granularity is inhibited." }
				id => "message-000529"
				add_field => {
					"[event][id]" => "000529"
					"[rsa][message][id1]" => "000529"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000530
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use a BREAK statement outside the scope of a WHILE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use a BREAK statement outside the scope of a WHILE statement." }
				id => "message-000530"
				add_field => {
					"[event][id]" => "000530"
					"[rsa][message][id1]" => "000530"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000531
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use a column in the <fld1> clause unless it is contained in either an aggregate function or the GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use a column in the %{fld1} clause unless it is contained in either an aggregate function or the GROUP BY clause." }
				id => "message-000531"
				add_field => {
					"[event][id]" => "000531"
					"[rsa][message][id1]" => "000531"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000532
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use a CONTAINS or FREETEXT predicate on <fld1> '<fld2>' because it is not full-text indexed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use a CONTAINS or FREETEXT predicate on %{fld1} '%{fld2}' because it is not full-text indexed." }
				id => "message-000532"
				add_field => {
					"[event][id]" => "000532"
					"[rsa][message][id1]" => "000532"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000533
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use a CONTINUE statement outside the scope of a WHILE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use a CONTINUE statement outside the scope of a WHILE statement." }
				id => "message-000533"
				add_field => {
					"[event][id]" => "000533"
					"[rsa][message][id1]" => "000533"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000534
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use a full-text predicate on <fld1> '<fld2>' because it is not located on the local server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use a full-text predicate on %{fld1} '%{fld2}' because it is not located on the local server." }
				id => "message-000534"
				add_field => {
					"[event][id]" => "000534"
					"[rsa][message][id1]" => "000534"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000535
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use an aggregate or a subquery in an expression used for the group by list of a GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use an aggregate or a subquery in an expression used for the group by list of a GROUP BY clause." }
				id => "message-000535"
				add_field => {
					"[event][id]" => "000535"
					"[rsa][message][id1]" => "000535"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000536
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use an existing function name to specify a stored procedure name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use an existing function name to specify a stored procedure name." }
				id => "message-000536"
				add_field => {
					"[event][id]" => "000536"
					"[rsa][message][id1]" => "000536"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000537
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use CHECKSUM(*) in a computed column definition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use CHECKSUM(*) in a computed column definition." }
				id => "message-000537"
				add_field => {
					"[event][id]" => "000537"
					"[rsa][message][id1]" => "000537"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000538
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use DROP <fld1> with '<fld2>' because '<fld3>' is a <fld4>. Use DROP <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use DROP %{fld1} with '%{fld2}' because '%{fld3}' is a %{fld4}. Use DROP %{fld5}." }
				id => "message-000538"
				add_field => {
					"[event][id]" => "000538"
					"[rsa][message][id1]" => "000538"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000539
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use duplicate column names in index key list. Column name '<fld1>' listed more than once. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use duplicate column names in index key list. Column name '%{fld1}' listed more than once." }
				id => "message-000539"
				add_field => {
					"[event][id]" => "000539"
					"[rsa][message][id1]" => "000539"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000540
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use duplicate parameter names. Parameter name '<fld1>' listed more than once. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use duplicate parameter names. Parameter name '%{fld1}' listed more than once." }
				id => "message-000540"
				add_field => {
					"[event][id]" => "000540"
					"[rsa][message][id1]" => "000540"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000541
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use empty object or column names. Use a single space if necessary. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use empty object or column names. Use a single space if necessary." }
				id => "message-000541"
				add_field => {
					"[event][id]" => "000541"
					"[rsa][message][id1]" => "000541"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000542
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use file '<fld1>' because it was originally formatted with sector size <fld2> and is now on a device with sector size <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use file '%{fld1}' because it was originally formatted with sector size %{fld2} and is now on a device with sector size %{fld3}." }
				id => "message-000542"
				add_field => {
					"[event][id]" => "000542"
					"[rsa][message][id1]" => "000542"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000543
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use file '<fld1>' for clustered server. Only formatted files on which the cluster resource of the server has a dependency can be used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use file '%{fld1}' for clustered server. Only formatted files on which the cluster resource of the server has a dependency can be used." }
				id => "message-000543"
				add_field => {
					"[event][id]" => "000543"
					"[rsa][message][id1]" => "000543"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000544
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use file '<fld1>', which is on a device with sector size <fld2>. SQL Server supports a maximum sector size of 4096 bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use file '%{fld1}', which is on a device with sector size %{fld2}. SQL Server supports a maximum sector size of 4096 bytes." }
				id => "message-000544"
				add_field => {
					"[event][id]" => "000544"
					"[rsa][message][id1]" => "000544"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000545
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use GROUP BY ALL with the special tables INSERTED or DELETED. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use GROUP BY ALL with the special tables INSERTED or DELETED." }
				id => "message-000545"
				add_field => {
					"[event][id]" => "000545"
					"[rsa][message][id1]" => "000545"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000546
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use HOLDLOCK in browse mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use HOLDLOCK in browse mode." }
				id => "message-000546"
				add_field => {
					"[event][id]" => "000546"
					"[rsa][message][id1]" => "000546"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000547
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use KILL to kill your own process. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use KILL to kill your own process." }
				id => "message-000547"
				add_field => {
					"[event][id]" => "000547"
					"[rsa][message][id1]" => "000547"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000548
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use ROLLBACK with a savepoint within a distributed transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use ROLLBACK with a savepoint within a distributed transaction." }
				id => "message-000548"
				add_field => {
					"[event][id]" => "000548"
					"[rsa][message][id1]" => "000548"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000549
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use SAVE TRANSACTION within a distributed transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use SAVE TRANSACTION within a distributed transaction." }
				id => "message-000549"
				add_field => {
					"[event][id]" => "000549"
					"[rsa][message][id1]" => "000549"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000550
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use SELECT INTO in browse mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use SELECT INTO in browse mode." }
				id => "message-000550"
				add_field => {
					"[event][id]" => "000550"
					"[rsa][message][id1]" => "000550"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000551
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use sp_addpublisher to add a Publisher. Use sp_adddistpublisher. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use sp_addpublisher to add a Publisher. Use sp_adddistpublisher." }
				id => "message-000551"
				add_field => {
					"[event][id]" => "000551"
					"[rsa][message][id1]" => "000551"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000552
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use text, ntext, or image columns in the 'inserted' and 'deleted' tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use text, ntext, or image columns in the 'inserted' and 'deleted' tables." }
				id => "message-000552"
				add_field => {
					"[event][id]" => "000552"
					"[rsa][message][id1]" => "000552"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000553
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use TEXTIMAGE_ON when a table has no text, ntext, or image columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use TEXTIMAGE_ON when a table has no text, ntext, or image columns." }
				id => "message-000553"
				add_field => {
					"[event][id]" => "000553"
					"[rsa][message][id1]" => "000553"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000554
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the '<fld1>' function on a remote data source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the '%{fld1}' function on a remote data source." }
				id => "message-000554"
				add_field => {
					"[event][id]" => "000554"
					"[rsa][message][id1]" => "000554"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000555
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the backup file '<fld1>' because it was originally formatted with sector size <fld2> and is now on a device with sector size <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the backup file '%{fld1}' because it was originally formatted with sector size %{fld2} and is now on a device with sector size %{fld3}." }
				id => "message-000555"
				add_field => {
					"[event][id]" => "000555"
					"[rsa][message][id1]" => "000555"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000556
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the column prefix '<fld1>'. This must match the object in the UPDATE clause '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the column prefix '%{fld1}'. This must match the object in the UPDATE clause '%{fld2}'." }
				id => "message-000556"
				add_field => {
					"[event][id]" => "000556"
					"[rsa][message][id1]" => "000556"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000557
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the COMMIT statement within an INSERT-EXEC statement unless BEGIN TRANSACTION is used first. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the COMMIT statement within an INSERT-EXEC statement unless BEGIN TRANSACTION is used first." }
				id => "message-000557"
				add_field => {
					"[event][id]" => "000557"
					"[rsa][message][id1]" => "000557"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000558
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the INSERT command because the table has an identity column. The insert custom stored procedure must be used to set 'identity_insert' settings at the Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the INSERT command because the table has an identity column. The insert custom stored procedure must be used to set 'identity_insert' settings at the Subscriber." }
				id => "message-000558"
				add_field => {
					"[event][id]" => "000558"
					"[rsa][message][id1]" => "000558"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000559
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the OUTPUT option in a DECLARE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the OUTPUT option in a DECLARE statement." }
				id => "message-000559"
				add_field => {
					"[event][id]" => "000559"
					"[rsa][message][id1]" => "000559"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000560
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the OUTPUT option when passing a constant to a stored procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the OUTPUT option when passing a constant to a stored procedure." }
				id => "message-000560"
				add_field => {
					"[event][id]" => "000560"
					"[rsa][message][id1]" => "000560"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000561
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the reserved user or role name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the reserved user or role name '%{fld1}'." }
				id => "message-000561"
				add_field => {
					"[event][id]" => "000561"
					"[rsa][message][id1]" => "000561"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000562
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the ROLLBACK statement within an INSERT-EXEC statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the ROLLBACK statement within an INSERT-EXEC statement." }
				id => "message-000562"
				add_field => {
					"[event][id]" => "000562"
					"[rsa][message][id1]" => "000562"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000563
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use the volume on device '<fld1>' as a continuation volume. It is sequence number <fld2> of family <fld3> for the current media set. Insert a new volume, or sequence number <fld4> of family <fld5> for the current set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use the volume on device '%{fld1}' as a continuation volume. It is sequence number %{fld2} of family %{fld3} for the current media set. Insert a new volume, or sequence number %{fld4} of family %{fld5} for the current set." }
				id => "message-000563"
				add_field => {
					"[event][id]" => "000563"
					"[rsa][message][id1]" => "000563"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000564
		# line in RSA:  <fld30> <fld31> <event_source> Cannot use transaction marks on database '<fld1>' with bulk-logged operations that have not been backed up. The mark is ignored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot use transaction marks on database '%{fld1}' with bulk-logged operations that have not been backed up. The mark is ignored." }
				id => "message-000564"
				add_field => {
					"[event][id]" => "000564"
					"[rsa][message][id1]" => "000564"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000565
		# line in RSA:  <fld30> <fld31> <event_source> Cannot validate a merge article that uses looping join filters.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cannot validate a merge article that uses looping join filters." }
				id => "message-000565"
				add_field => {
					"[event][id]" => "000565"
					"[rsa][message][id1]" => "000565"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId652
	# line in RSA:  <fld30> <fld31> <event_source> Cascading foreign key '<fld1>' cannot be created where the referencing column '<fld2>' is an identity column. 
	else if [logstash][msgparser][id] == "msgParserId652" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cascading foreign key '%{fld1}' cannot be created where the referencing column '%{fld2}' is an identity column." }
			id => "msgParserId652"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId653
	# line in RSA:  <fld30> <fld31> <event_source> Case expressions may only be nested to level <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId653" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Case expressions may only be nested to level %{fld1}." }
			id => "msgParserId653"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId654
	# line in RSA:  <fld30> <fld31> <event_source> CAST or CONVERT: invalid attributes specified for type '<fld1>' 
	else if [logstash][msgparser][id] == "msgParserId654" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} CAST or CONVERT: invalid attributes specified for type '%{fld1}'" }
			id => "msgParserId654"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Caution" {
		# MESSAGE 000569
		# line in RSA:  <fld30> <fld31> <event_source> Caution: Changing any part of an object name could break scripts and stored procedures. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Caution: Changing any part of an object name could break scripts and stored procedures." }
				id => "message-000569"
				add_field => {
					"[event][id]" => "000569"
					"[rsa][message][id1]" => "000569"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000570
		# line in RSA:  <fld30> <fld31> <event_source> Caution: sysdepends shows that other objects (views, procedures and so on) are referencing this object by its old name. These objects will become invalid, and should be dropped and re-created promptly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Caution: sysdepends shows that other objects (views, procedures and so on) are referencing this object by its old name. These objects will become invalid, and should be dropped and re-created promptly." }
				id => "message-000570"
				add_field => {
					"[event][id]" => "000570"
					"[rsa][message][id1]" => "000570"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId657
	# line in RSA:  <fld30> <fld31> <event_source> Chain sequence numbers are out of order in IAM chain for object ID <fld1>, index ID <fld2>. Page <fld3> sequence number <fld4> points to page <fld5> sequence number <fld6>. 
	else if [logstash][msgparser][id] == "msgParserId657" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Chain sequence numbers are out of order in IAM chain for object ID %{fld1}, index ID %{fld2}. Page %{fld3} sequence number %{fld4} points to page %{fld5} sequence number %{fld6}." }
			id => "msgParserId657"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Changed" {
		# MESSAGE 000572
		# line in RSA:  <fld30> <fld31> <event_source> Changed database context to '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Changed database context to '%{fld1}'." }
				id => "message-000572"
				add_field => {
					"[event][id]" => "000572"
					"[rsa][message][id1]" => "000572"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000573
		# line in RSA:  <fld30> <fld31> <event_source> Changed language setting to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Changed language setting to %{fld1}." }
				id => "message-000573"
				add_field => {
					"[event][id]" => "000573"
					"[rsa][message][id1]" => "000573"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000574
		# line in RSA:  <fld30> <fld31> <event_source> Changed update mode from [<fld1>] to [<fld2>]. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Changed update mode from [%{fld1}] to [%{fld2}]." }
				id => "message-000574"
				add_field => {
					"[event][id]" => "000574"
					"[rsa][message][id1]" => "000574"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Changes" {
		# MESSAGE 000575
		# line in RSA:  <fld30> <fld31> <event_source> Changes to publication '<fld1>' cannot be merged because it has been marked inactive. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Changes to publication '%{fld1}' cannot be merged because it has been marked inactive." }
				id => "message-000575"
				add_field => {
					"[event][id]" => "000575"
					"[rsa][message][id1]" => "000575"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000576
		# line in RSA:  <fld30> <fld31> <event_source> Changes to the state or options of database '<fld1>' cannot be made at this time. The database is in single-user mode, and a user is currently connected to it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Changes to the state or options of database '%{fld1}' cannot be made at this time. The database is in single-user mode, and a user is currently connected to it." }
				id => "message-000576"
				add_field => {
					"[event][id]" => "000576"
					"[rsa][message][id1]" => "000576"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId663
	# line in RSA:  <fld30> <fld31> <event_source> Changing publication names is no longer supported. 
	else if [logstash][msgparser][id] == "msgParserId663" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Changing publication names is no longer supported." }
			id => "msgParserId663"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId664
	# line in RSA:  <fld30> <fld31> <event_source> char data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId664" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} char data type %{fld1}" }
			id => "msgParserId664"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Character" {
		# MESSAGE 000579
		# line in RSA:  <fld30> <fld31> <event_source> Character data comparison failure. A list of Sort-Map-Elements from the server-wide default sort table does not end properly. This list begins at SMEL entry [<fld1>]. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Character data comparison failure. A list of Sort-Map-Elements from the server-wide default sort table does not end properly. This list begins at SMEL entry [%{fld1}]." }
				id => "message-000579"
				add_field => {
					"[event][id]" => "000579"
					"[rsa][message][id1]" => "000579"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000580
		# line in RSA:  <fld30> <fld31> <event_source> Character data comparison failure. An unrecognized Sort-Map-Element type (<fld1>) was found in the server-wide default sort table at SMEL entry [<fld2>]. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Character data comparison failure. An unrecognized Sort-Map-Element type (%{fld1}) was found in the server-wide default sort table at SMEL entry [%{fld2}]." }
				id => "message-000580"
				add_field => {
					"[event][id]" => "000580"
					"[rsa][message][id1]" => "000580"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000581
		# line in RSA:  <fld30> <fld31> <event_source> Character mode publication does not support vertical filtering when the base table does not support column-level tracking. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Character mode publication does not support vertical filtering when the base table does not support column-level tracking." }
				id => "message-000581"
				add_field => {
					"[event][id]" => "000581"
					"[rsa][message][id1]" => "000581"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000582
		# line in RSA:  <fld30> <fld31> <event_source> Character set, sort order, or collation cannot be changed because at least one database is not writable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Character set, sort order, or collation cannot be changed because at least one database is not writable." }
				id => "message-000582"
				add_field => {
					"[event][id]" => "000582"
					"[rsa][message][id1]" => "000582"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId669
	# line in RSA:  <fld30> <fld31> <event_source> character string 
	else if [logstash][msgparser][id] == "msgParserId669" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} character string" }
			id => "msgParserId669"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId670
	# line in RSA:  <fld30> <fld31> <event_source> Checking identity information: current identity value '<fld1>', current column value '<fld2>'. 
	else if [logstash][msgparser][id] == "msgParserId670" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Checking identity information: current identity value '%{fld1}', current column value '%{fld2}'." }
			id => "msgParserId670"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId671
	# line in RSA:  <fld30> <fld31> <event_source> Checkpoint process is terminating due to a fatal exception. 
	else if [logstash][msgparser][id] == "msgParserId671" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Checkpoint process is terminating due to a fatal exception." }
			id => "msgParserId671"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId672
	# line in RSA:  <fld30> <fld31> <event_source> Checkpointing database that was changed. 
	else if [logstash][msgparser][id] == "msgParserId672" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Checkpointing database that was changed." }
			id => "msgParserId672"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId673
	# line in RSA:  <fld30> <fld31> <event_source> Checksum validation is not supported because the publication allows DTS. Use row count only validation. 
	else if [logstash][msgparser][id] == "msgParserId673" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Checksum validation is not supported because the publication allows DTS. Use row count only validation." }
			id => "msgParserId673"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "CHECKTABLE" {
		# MESSAGE 000588
		# line in RSA:  <fld30> <fld31> <event_source> CHECKTABLE processing of object ID <fld1>, index ID <fld2> encountered page <fld3>, slot <fld4> twice. Possible internal error or allocation fault. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CHECKTABLE processing of object ID %{fld1}, index ID %{fld2} encountered page %{fld3}, slot %{fld4} twice. Possible internal error or allocation fault." }
				id => "message-000588"
				add_field => {
					"[event][id]" => "000588"
					"[rsa][message][id1]" => "000588"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000589
		# line in RSA:  <fld30> <fld31> <event_source> CHECKTABLE terminated. A failure was detected while collecting facts. Possibly tempdb out of space or a system table is inconsistent. Check previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CHECKTABLE terminated. A failure was detected while collecting facts. Possibly tempdb out of space or a system table is inconsistent. Check previous errors." }
				id => "message-000589"
				add_field => {
					"[event][id]" => "000589"
					"[rsa][message][id1]" => "000589"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId676
	# line in RSA:  <fld30> <fld31> <event_source> Circular dependencies exist. Dependency evaluation cannot continue. 
	else if [logstash][msgparser][id] == "msgParserId676" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Circular dependencies exist. Dependency evaluation cannot continue." }
			id => "msgParserId676"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId677
	# line in RSA:  <fld30> <fld31> <event_source> Ckpt dbid <username> <result>
	else if [logstash][msgparser][id] == "msgParserId677" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Ckpt dbid %{username} %{result}" }
			id => "msgParserId677"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Cleanup" {
		# MESSAGE 000591
		# line in RSA:  <fld30> <fld31> <event_source> Cleanup of merge meta data at republisher '<fld1>'.'<fld2>' could not be performed because merge processes are propagating changes to the republisher. All subscriptions to this republisher must be reinitialized. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cleanup of merge meta data at republisher '%{fld1}'.'%{fld2}' could not be performed because merge processes are propagating changes to the republisher. All subscriptions to this republisher must be reinitialized." }
				id => "message-000591"
				add_field => {
					"[event][id]" => "000591"
					"[rsa][message][id1]" => "000591"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000592
		# line in RSA:  <fld30> <fld31> <event_source> Cleanup of merge meta data cannot be performed because some republishers have not quiesced their changes. Cleanup will proceed after all republishers have quiesced their changes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cleanup of merge meta data cannot be performed because some republishers have not quiesced their changes. Cleanup will proceed after all republishers have quiesced their changes." }
				id => "message-000592"
				add_field => {
					"[event][id]" => "000592"
					"[rsa][message][id1]" => "000592"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000593
		# line in RSA:  <fld30> <fld31> <event_source> Cleanup of merge meta data cannot be performed while merge processes are running. Cleanup will proceed after the merge processes have completed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cleanup of merge meta data cannot be performed while merge processes are running. Cleanup will proceed after the merge processes have completed." }
				id => "message-000593"
				add_field => {
					"[event][id]" => "000593"
					"[rsa][message][id1]" => "000593"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000594
		# line in RSA:  <fld30> <fld31> <event_source> Cleanup of merge meta data cannot be performed while merge processes are running. Retry this operation after the merge processes have completed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cleanup of merge meta data cannot be performed while merge processes are running. Retry this operation after the merge processes have completed." }
				id => "message-000594"
				add_field => {
					"[event][id]" => "000594"
					"[rsa][message][id1]" => "000594"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId682
	# line in RSA:  <fld30> <fld31> <event_source> Clearing <fld1> database.
	else if [logstash][msgparser][id] == "msgParserId682" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Clearing %{fld1} database." }
			id => "msgParserId682"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "closetable" {
		# MESSAGE 000596
		# line in RSA:  <fld30> <fld31> <event_source> closetable: Called with null session descriptor (SDES), server process ID (<fld1>) <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} closetable: Called with null session descriptor (SDES), server process ID (%{fld1}) %{fld2}." }
				id => "message-000596"
				add_field => {
					"[event][id]" => "000596"
					"[rsa][message][id1]" => "000596"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000597
		# line in RSA:  <fld30> <fld31> <event_source> closetable: Table already closed for session descriptor (SDES) <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} closetable: Table already closed for session descriptor (SDES) %{fld1}." }
				id => "message-000597"
				add_field => {
					"[event][id]" => "000597"
					"[rsa][message][id1]" => "000597"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId685
	# line in RSA:  <fld30> <fld31> <event_source> Clustered indexes on sysobjects and sysindexes cannot be re-created. 
	else if [logstash][msgparser][id] == "msgParserId685" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Clustered indexes on sysobjects and sysindexes cannot be re-created." }
			id => "msgParserId685"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Code" {
		# MESSAGE 000599
		# line in RSA:  <fld30> <fld31> <event_source> Code page <fld1> is not supported by the operating system. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Code page %{fld1} is not supported by the operating system." }
				id => "message-000599"
				add_field => {
					"[event][id]" => "000599"
					"[rsa][message][id1]" => "000599"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000600
		# line in RSA:  <fld30> <fld31> <event_source> Code page translations are not supported for the text data type. From: <fld1> To: <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Code page translations are not supported for the text data type. From: %{fld1} To: %{fld2}." }
				id => "message-000600"
				add_field => {
					"[event][id]" => "000600"
					"[rsa][message][id1]" => "000600"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "COLLATE" {
		# MESSAGE 000601
		# line in RSA:  <fld30> <fld31> <event_source> COLLATE clause cannot be used on expressions containing a COLLATE clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} COLLATE clause cannot be used on expressions containing a COLLATE clause." }
				id => "message-000601"
				add_field => {
					"[event][id]" => "000601"
					"[rsa][message][id1]" => "000601"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000602
		# line in RSA:  <fld30> <fld31> <event_source> COLLATE clause cannot be used on user-defined data types. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} COLLATE clause cannot be used on user-defined data types." }
				id => "message-000602"
				add_field => {
					"[event][id]" => "000602"
					"[rsa][message][id1]" => "000602"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Collation" {
		# MESSAGE 000603
		# line in RSA:  <fld30> <fld31> <event_source> Collation '<fld1>' is supported on Unicode data types only and cannot be set at the database or server level. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Collation '%{fld1}' is supported on Unicode data types only and cannot be set at the database or server level." }
				id => "message-000603"
				add_field => {
					"[event][id]" => "000603"
					"[rsa][message][id1]" => "000603"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000604
		# line in RSA:  <fld30> <fld31> <event_source> Collation '<fld1>' is not supported by the operating system 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Collation '%{fld1}' is not supported by the operating system" }
				id => "message-000604"
				add_field => {
					"[event][id]" => "000604"
					"[rsa][message][id1]" => "000604"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000605
		# line in RSA:  <fld30> <fld31> <event_source> Collation '<fld1>' is supported for Unicode data types only and cannot be set at either the database or server level. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Collation '%{fld1}' is supported for Unicode data types only and cannot be set at either the database or server level." }
				id => "message-000605"
				add_field => {
					"[event][id]" => "000605"
					"[rsa][message][id1]" => "000605"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000606
		# line in RSA:  <fld30> <fld31> <event_source> Collation conflict caused by collate clauses with different collation '<fld1>' and '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Collation conflict caused by collate clauses with different collation '%{fld1}' and '%{fld2}'." }
				id => "message-000606"
				add_field => {
					"[event][id]" => "000606"
					"[rsa][message][id1]" => "000606"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000607
		# line in RSA:  <fld30> <fld31> <event_source> Collation ID <fld1> is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Collation ID %{fld1} is invalid." }
				id => "message-000607"
				add_field => {
					"[event][id]" => "000607"
					"[rsa][message][id1]" => "000607"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Column" {
		# MESSAGE 000608
		# line in RSA:  <fld30> <fld31> <event_source> Column <fld1> constraint for column '<fld2>' references another column, table '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column %{fld1} constraint for column '%{fld2}' references another column, table '%{fld3}'." }
				id => "message-000608"
				add_field => {
					"[event][id]" => "000608"
					"[rsa][message][id1]" => "000608"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000609
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' cannot be modified because it is a computed column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' cannot be modified because it is a computed column." }
				id => "message-000609"
				add_field => {
					"[event][id]" => "000609"
					"[rsa][message][id1]" => "000609"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000610
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' cannot be used in an IF UPDATE clause because it is a computed column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' cannot be used in an IF UPDATE clause because it is a computed column." }
				id => "message-000610"
				add_field => {
					"[event][id]" => "000610"
					"[rsa][message][id1]" => "000610"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000611
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' has invalid width: <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' has invalid width: %{fld2}." }
				id => "message-000611"
				add_field => {
					"[event][id]" => "000611"
					"[rsa][message][id1]" => "000611"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000612
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>'. Cannot create index on a column of { bit | text, ntext, or image } data type. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Column[\s]+'(?<fld1>[^']*)'\.[\s]+Cannot[\s]+create[\s]+index[\s]+on[\s]+a[\s]+column[\s]+of[\s]+([\s]*bit[\s]+|[\s]*text,[\s]+ntext,[\s]+or[\s]+image[\s]+)[\s]+data[\s]+type\.[\s]+$" }
				id => "message-000612"
				add_field => {
					"[event][id]" => "000612"
					"[rsa][message][id1]" => "000612"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000613
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>'. Cannot create statistics on a column of data type <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}'. Cannot create statistics on a column of data type %{fld2}." }
				id => "message-000613"
				add_field => {
					"[event][id]" => "000613"
					"[rsa][message][id1]" => "000613"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000614
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' is invalid in the HAVING clause because it is not contained in an aggregate function and there is no GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' is invalid in the HAVING clause because it is not contained in an aggregate function and there is no GROUP BY clause." }
				id => "message-000614"
				add_field => {
					"[event][id]" => "000614"
					"[rsa][message][id1]" => "000614"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000615
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' is invalid in the HAVING clause because it is not contained in either an aggregate function or the GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' is invalid in the HAVING clause because it is not contained in either an aggregate function or the GROUP BY clause." }
				id => "message-000615"
				add_field => {
					"[event][id]" => "000615"
					"[rsa][message][id1]" => "000615"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000616
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' is invalid in the select list because it is not contained in an aggregate function and there is no GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' is invalid in the select list because it is not contained in an aggregate function and there is no GROUP BY clause." }
				id => "message-000616"
				add_field => {
					"[event][id]" => "000616"
					"[rsa][message][id1]" => "000616"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000617
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause." }
				id => "message-000617"
				add_field => {
					"[event][id]" => "000617"
					"[rsa][message][id1]" => "000617"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000618
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' is not { the | of } same { collation | data type | length } as referencing column '<fld2>' in foreign key '<fld3>'. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Column[\s]+'(?<fld1>[^']*)'[\s]+is[\s]+not[\s]+([\s]*the[\s]+|[\s]*of[\s]+)[\s]+same[\s]+([\s]*collation[\s]+|[\s]*data[\s]+type[\s]+|[\s]*length[\s]+)[\s]+as[\s]+referencing[\s]+column[\s]+'(?<fld2>[^']*)'[\s]+in[\s]+foreign[\s]+key[\s]+'(?<fld3>[^']*)'\.[\s]+$" }
				id => "message-000618"
				add_field => {
					"[event][id]" => "000618"
					"[rsa][message][id1]" => "000618"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000619
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' contains an invalid data type. Valid data types are char, varchar, nchar,{ and nvarchar | nvarchar, text, and ntext }. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Column[\s]+'(?<fld1>[^']*)'[\s]+contains[\s]+an[\s]+invalid[\s]+data[\s]+type\.[\s]+Valid[\s]+data[\s]+types[\s]+are[\s]+char,[\s]+varchar,[\s]+nchar,([\s]*and[\s]+nvarchar[\s]+|[\s]*nvarchar,[\s]+text,[\s]+and[\s]+ntext[\s]+)\.[\s]+$" }
				id => "message-000619"
				add_field => {
					"[event][id]" => "000619"
					"[rsa][message][id1]" => "000619"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000620
		# line in RSA:  <fld30> <fld31> <event_source> Column '<username>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{username}' does not exist." }
				id => "message-000620"
				add_field => {
					"[event][id]" => "000620"
					"[rsa][message][id1]" => "000620"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000621
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' in the specified edge table has an invalid or null value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' in the specified edge table has an invalid or null value." }
				id => "message-000621"
				add_field => {
					"[event][id]" => "000621"
					"[rsa][message][id1]" => "000621"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000622
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' is not a computed column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' is not a computed column." }
				id => "message-000622"
				add_field => {
					"[event][id]" => "000622"
					"[rsa][message][id1]" => "000622"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000623
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' of table '<fld2>' cannot be used for full-text search because it is not a character-based column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' of table '%{fld2}' cannot be used for full-text search because it is not a character-based column." }
				id => "message-000623"
				add_field => {
					"[event][id]" => "000623"
					"[rsa][message][id1]" => "000623"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000624
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' already exists in table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' already exists in table '%{fld2}'." }
				id => "message-000624"
				add_field => {
					"[event][id]" => "000624"
					"[rsa][message][id1]" => "000624"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000625
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' cannot be dropped from table '<fld2>' because it is a primary key column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' cannot be dropped from table '%{fld2}' because it is a primary key column." }
				id => "message-000625"
				add_field => {
					"[event][id]" => "000625"
					"[rsa][message][id1]" => "000625"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000626
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' cannot be dropped from table '<fld2>' because there is a unique index accessing this column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' cannot be dropped from table '%{fld2}' because there is a unique index accessing this column." }
				id => "message-000626"
				add_field => {
					"[event][id]" => "000626"
					"[rsa][message][id1]" => "000626"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000627
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' cannot be excluded from a vertical partition because it is neither nullable nor defined with a default value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' cannot be excluded from a vertical partition because it is neither nullable nor defined with a default value." }
				id => "message-000627"
				add_field => {
					"[event][id]" => "000627"
					"[rsa][message][id1]" => "000627"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000628
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' cannot be excluded from the vertical partitioning because there is a unique index accessing this column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' cannot be excluded from the vertical partitioning because there is a unique index accessing this column." }
				id => "message-000628"
				add_field => {
					"[event][id]" => "000628"
					"[rsa][message][id1]" => "000628"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000629
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' cannot be included in a vertical partition because it is neither nullable nor defined with a default value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' cannot be included in a vertical partition because it is neither nullable nor defined with a default value." }
				id => "message-000629"
				add_field => {
					"[event][id]" => "000629"
					"[rsa][message][id1]" => "000629"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000631
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' has no default. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' has no default." }
				id => "message-000631"
				add_field => {
					"[event][id]" => "000631"
					"[rsa][message][id1]" => "000631"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000632
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' has no rule. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' has no rule." }
				id => "message-000632"
				add_field => {
					"[event][id]" => "000632"
					"[rsa][message][id1]" => "000632"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000633
		# line in RSA:  <fld30> <fld31> <event_source> Column '<fld1>' of table '<fld2>' cannot be excluded from a vertical partition because there is a computed column that depends on it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column '%{fld1}' of table '%{fld2}' cannot be excluded from a vertical partition because there is a computed column that depends on it." }
				id => "message-000633"
				add_field => {
					"[event][id]" => "000633"
					"[rsa][message][id1]" => "000633"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000634
		# line in RSA:  <fld30> <fld31> <event_source> Column already has a DEFAULT bound to it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column already has a DEFAULT bound to it." }
				id => "message-000634"
				add_field => {
					"[event][id]" => "000634"
					"[rsa][message][id1]" => "000634"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000635
		# line in RSA:  <fld30> <fld31> <event_source> column heading 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} column heading" }
				id => "message-000635"
				add_field => {
					"[event][id]" => "000635"
					"[rsa][message][id1]" => "000635"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000636
		# line in RSA:  <fld30> <fld31> <event_source> Column list cannot be specified for object-level permissions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column list cannot be specified for object-level permissions." }
				id => "message-000636"
				add_field => {
					"[event][id]" => "000636"
					"[rsa][message][id1]" => "000636"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000637
		# line in RSA:  <fld30> <fld31> <event_source> Column name '<fld1>' appears more than once in the result column list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column name '%{fld1}' appears more than once in the result column list." }
				id => "message-000637"
				add_field => {
					"[event][id]" => "000637"
					"[rsa][message][id1]" => "000637"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000638
		# line in RSA:  <fld30> <fld31> <event_source> Column name '<fld1>' does not exist in the target table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column name '%{fld1}' does not exist in the target table." }
				id => "message-000638"
				add_field => {
					"[event][id]" => "000638"
					"[rsa][message][id1]" => "000638"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000639
		# line in RSA:  <fld30> <fld31> <event_source> Column name '<fld1>' is repeated. The same attribute cannot be generated more than once on the same XML tag. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column name '%{fld1}' is repeated. The same attribute cannot be generated more than once on the same XML tag." }
				id => "message-000639"
				add_field => {
					"[event][id]" => "000639"
					"[rsa][message][id1]" => "000639"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000640
		# line in RSA:  <fld30> <fld31> <event_source> Column name '<fld1>.<fld2>' is invalid in the ORDER BY clause because it is not contained in an aggregate function and there is no GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column name '%{fld1}.%{fld2}' is invalid in the ORDER BY clause because it is not contained in an aggregate function and there is no GROUP BY clause." }
				id => "message-000640"
				add_field => {
					"[event][id]" => "000640"
					"[rsa][message][id1]" => "000640"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000641
		# line in RSA:  <fld30> <fld31> <event_source> Column name '<fld1>.<fld2>' is invalid in the ORDER BY clause because it is not contained in either an aggregate function or the GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column name '%{fld1}.%{fld2}' is invalid in the ORDER BY clause because it is not contained in either an aggregate function or the GROUP BY clause." }
				id => "message-000641"
				add_field => {
					"[event][id]" => "000641"
					"[rsa][message][id1]" => "000641"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000642
		# line in RSA:  <fld30> <fld31> <event_source> Column names in each table must be unique. Column name '<fld1>' in table '<fld2>' is specified more than once. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column names in each table must be unique. Column name '%{fld1}' in table '%{fld2}' is specified more than once." }
				id => "message-000642"
				add_field => {
					"[event][id]" => "000642"
					"[rsa][message][id1]" => "000642"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000643
		# line in RSA:  <fld30> <fld31> <event_source> Column names in each view or function must be unique. Column name '<fld1>' in view or function '<fld2>' is specified more than once. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column names in each view or function must be unique. Column name '%{fld1}' in view or function '%{fld2}' is specified more than once." }
				id => "message-000643"
				add_field => {
					"[event][id]" => "000643"
					"[rsa][message][id1]" => "000643"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000644
		# line in RSA:  <fld30> <fld31> <event_source> Column or parameter #<fld1>: Cannot find data type <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column or parameter #%{fld1}: Cannot find data type %{fld2}." }
				id => "message-000644"
				add_field => {
					"[event][id]" => "000644"
					"[rsa][message][id1]" => "000644"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000645
		# line in RSA:  <fld30> <fld31> <event_source> Column or parameter #<fld1>: Cannot specify a column width on data type <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column or parameter #%{fld1}: Cannot specify a column width on data type %{fld2}." }
				id => "message-000645"
				add_field => {
					"[event][id]" => "000645"
					"[rsa][message][id1]" => "000645"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000646
		# line in RSA:  <fld30> <fld31> <event_source> Column or parameter #<fld1>: Cannot specify null values on a column of data type bit. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column or parameter #%{fld1}: Cannot specify null values on a column of data type bit." }
				id => "message-000646"
				add_field => {
					"[event][id]" => "000646"
					"[rsa][message][id1]" => "000646"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000647
		# line in RSA:  <fld30> <fld31> <event_source> Column or parameter #<fld1>: Specified column precision <fld2> is greater than the maximum precision of <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column or parameter #%{fld1}: Specified column precision %{fld2} is greater than the maximum precision of %{fld3}." }
				id => "message-000647"
				add_field => {
					"[event][id]" => "000647"
					"[rsa][message][id1]" => "000647"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000648
		# line in RSA:  <fld30> <fld31> <event_source> Column or parameter #<fld1>: Specified column scale <fld2> is greater than the specified precision of <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Column or parameter #%{fld1}: Specified column scale %{fld2} is greater than the specified precision of %{fld3}." }
				id => "message-000648"
				add_field => {
					"[event][id]" => "000648"
					"[rsa][message][id1]" => "000648"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId735
	# line in RSA:  <fld30> <fld31> <event_source> columns are searched: 
	else if [logstash][msgparser][id] == "msgParserId735" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} columns are searched:" }
			id => "msgParserId735"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Columns" {
		# MESSAGE 000650
		# line in RSA:  <fld30> <fld31> <event_source> Columns of the specified user data type had their defaults unbound. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Columns of the specified user data type had their defaults unbound." }
				id => "message-000650"
				add_field => {
					"[event][id]" => "000650"
					"[rsa][message][id1]" => "000650"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000651
		# line in RSA:  <fld30> <fld31> <event_source> Columns of the specified user data type had their rules unbound. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Columns of the specified user data type had their rules unbound." }
				id => "message-000651"
				add_field => {
					"[event][id]" => "000651"
					"[rsa][message][id1]" => "000651"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId738
	# line in RSA:  <fld30> <fld31> <event_source> Command was not prepared. 
	else if [logstash][msgparser][id] == "msgParserId738" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Command was not prepared." }
			id => "msgParserId738"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId739
	# line in RSA:  <fld30> <fld31> <event_source> Command-Line Subsystem 
	else if [logstash][msgparser][id] == "msgParserId739" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Command-Line Subsystem" }
			id => "msgParserId739"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Commit" {
		# MESSAGE 000654
		# line in RSA:  <fld30> <fld31> <event_source> Commit of internal MSDTC transaction failed: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Commit of internal MSDTC transaction failed: %{fld1}." }
				id => "message-000654"
				add_field => {
					"[event][id]" => "000654"
					"[rsa][message][id1]" => "000654"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000655
		# line in RSA:  <fld30> <fld31> <event_source> Commit record (<fld1>) reports oldest active LSN as (0:0:0). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Commit record (%{fld1}) reports oldest active LSN as (0:0:0)." }
				id => "message-000655"
				add_field => {
					"[event][id]" => "000655"
					"[rsa][message][id1]" => "000655"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000656
		# line in RSA:  <fld30> <fld31> <event_source> Commit record at (<fld1>) has already been distributed. Check DBTABLE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Commit record at (%{fld1}) has already been distributed. Check DBTABLE." }
				id => "message-000656"
				add_field => {
					"[event][id]" => "000656"
					"[rsa][message][id1]" => "000656"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId743
	# line in RSA:  <fld30> <fld31> <event_source> communication buffer 
	else if [logstash][msgparser][id] == "msgParserId743" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} communication buffer" }
			id => "msgParserId743"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId744
	# line in RSA:  <fld30> <fld31> <event_source> Compatibility level cannot be smaller than 60. 
	else if [logstash][msgparser][id] == "msgParserId744" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Compatibility level cannot be smaller than 60." }
			id => "msgParserId744"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "COMPUTE" {
		# MESSAGE 000659
		# line in RSA:  <fld30> <fld31> <event_source> COMPUTE clause #<fld1> 'BY' expression #<fld2> is not in the order by list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} COMPUTE clause #%{fld1} 'BY' expression #%{fld2} is not in the order by list." }
				id => "message-000659"
				add_field => {
					"[event][id]" => "000659"
					"[rsa][message][id1]" => "000659"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000660
		# line in RSA:  <fld30> <fld31> <event_source> COMPUTE clause #<fld1>, aggregate expression #<fld2> is not in the select list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} COMPUTE clause #%{fld1}, aggregate expression #%{fld2} is not in the select list." }
				id => "message-000660"
				add_field => {
					"[event][id]" => "000660"
					"[rsa][message][id1]" => "000660"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Concurrency" {
		# MESSAGE 000661
		# line in RSA:  <fld30> <fld31> <event_source> Concurrency violations since <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Concurrency violations since %{fld1}" }
				id => "message-000661"
				add_field => {
					"[event][id]" => "000661"
					"[rsa][message][id1]" => "000661"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000662
		# line in RSA:  <fld30> <fld31> <event_source> Concurrency violations will be written to the SQL Server error log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Concurrency violations will be written to the SQL Server error log." }
				id => "message-000662"
				add_field => {
					"[event][id]" => "000662"
					"[rsa][message][id1]" => "000662"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000663
		# line in RSA:  <fld30> <fld31> <event_source> Concurrency violations will not be written to the SQL Server error log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Concurrency violations will not be written to the SQL Server error log." }
				id => "message-000663"
				add_field => {
					"[event][id]" => "000663"
					"[rsa][message][id1]" => "000663"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId750
	# line in RSA:  <fld30> <fld31> <event_source> Conditional Fast Rowcount method requested without specifying an expected count. Fast method will be used. 
	else if [logstash][msgparser][id] == "msgParserId750" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Conditional Fast Rowcount method requested without specifying an expected count. Fast method will be used." }
			id => "msgParserId750"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId751
	# line in RSA:  <fld30> <fld31> <event_source> Configuration option '<fld1>' changed from <fld2> to <fld3>. Run the RECONFIGURE statement to install. 
	else if [logstash][msgparser][id] == "msgParserId751" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Configuration option '%{fld1}' changed from %{fld2} to %{fld3}. Run the RECONFIGURE statement to install." }
			id => "msgParserId751"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Conflict" {
		# MESSAGE 000666
		# line in RSA:  <fld30> <fld31> <event_source> Conflict table '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Conflict table '%{fld1}' does not exist." }
				id => "message-000666"
				add_field => {
					"[event][id]" => "000666"
					"[rsa][message][id1]" => "000666"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000667
		# line in RSA:  <fld30> <fld31> <event_source> Conflict table for article '<fld1>' could not be created successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Conflict table for article '%{fld1}' could not be created successfully." }
				id => "message-000667"
				add_field => {
					"[event][id]" => "000667"
					"[rsa][message][id1]" => "000667"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Conflicting" {
		# MESSAGE 000668
		# line in RSA:  <fld30> <fld31> <event_source> Conflicting <fld1> optimizer hints specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Conflicting %{fld1} optimizer hints specified." }
				id => "message-000668"
				add_field => {
					"[event][id]" => "000668"
					"[rsa][message][id1]" => "000668"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000669
		# line in RSA:  <fld30> <fld31> <event_source> Conflicting <fld1> options <fld2> and <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Conflicting %{fld1} options %{fld2} and %{fld3}." }
				id => "message-000669"
				add_field => {
					"[event][id]" => "000669"
					"[rsa][message][id1]" => "000669"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000671
		# line in RSA:  <fld30> <fld31> <event_source> Conflicting locking hints specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Conflicting locking hints specified." }
				id => "message-000671"
				add_field => {
					"[event][id]" => "000671"
					"[rsa][message][id1]" => "000671"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId757
	# line in RSA:  <fld30> <fld31> <event_source> Connection opened but invalid login packet(s) sent.  Connection closed. 
	else if [logstash][msgparser][id] == "msgParserId757" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Connection opened but invalid login packet(s) sent.  Connection closed." }
			id => "msgParserId757"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Constraint" {
		# MESSAGE 000673
		# line in RSA:  <fld30> <fld31> <event_source> Constraint '<fld1>' does not belong to table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Constraint '%{fld1}' does not belong to table '%{fld2}'." }
				id => "message-000673"
				add_field => {
					"[event][id]" => "000673"
					"[rsa][message][id1]" => "000673"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000674
		# line in RSA:  <fld30> <fld31> <event_source> Constraint '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Constraint '%{fld1}' does not exist." }
				id => "message-000674"
				add_field => {
					"[event][id]" => "000674"
					"[rsa][message][id1]" => "000674"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000675
		# line in RSA:  <fld30> <fld31> <event_source> Constraint name '<fld1>' not permitted. Constraint names cannot begin with a number sign (#). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Constraint name '%{fld1}' not permitted. Constraint names cannot begin with a number sign (#)." }
				id => "message-000675"
				add_field => {
					"[event][id]" => "000675"
					"[rsa][message][id1]" => "000675"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId761
	# line in RSA:  <fld30> <fld31> <event_source> Constraints of type <fld1> cannot be created on columns of type <fld2>. 
	else if [logstash][msgparser][id] == "msgParserId761" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Constraints of type %{fld1} cannot be created on columns of type %{fld2}." }
			id => "msgParserId761"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId762
	# line in RSA:  <fld30> <fld31> <event_source> Continue on data consistency errors. 
	else if [logstash][msgparser][id] == "msgParserId762" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Continue on data consistency errors." }
			id => "msgParserId762"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Conversion" {
		# MESSAGE 000678
		# line in RSA:  <fld30> <fld31> <event_source> Conversion failed because the data value overflowed the data type used by the provider. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Conversion failed because the data value overflowed the data type used by the provider." }
				id => "message-000678"
				add_field => {
					"[event][id]" => "000678"
					"[rsa][message][id1]" => "000678"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000679
		# line in RSA:  <fld30> <fld31> <event_source> Conversion to data type <fld1> failed for full-text search key value 0x<fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Conversion to data type %{fld1} failed for full-text search key value 0x%{fld2}." }
				id => "message-000679"
				add_field => {
					"[event][id]" => "000679"
					"[rsa][message][id1]" => "000679"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId765
	# line in RSA:  <fld30> <fld31> <event_source> convert specification 
	else if [logstash][msgparser][id] == "msgParserId765" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} convert specification" }
			id => "msgParserId765"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId766
	# line in RSA:  <fld30> <fld31> <event_source> Converting database '<fld1>' from version <fld2> to the current version <fld3>. 
	else if [logstash][msgparser][id] == "msgParserId766" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Converting database '%{fld1}' from version %{fld2} to the current version %{fld3}." }
			id => "msgParserId766"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId767
	# line in RSA:  <fld30> <fld31> <event_source> Copyright (C) 1988-2002 Microsoft Corporation.
	else if [logstash][msgparser][id] == "msgParserId767" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Copyright (C) 1988-2002 Microsoft Corporation." }
			id => "msgParserId767"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId768
	# line in RSA:  <fld30> <fld31> <event_source> Core Job Details: 
	else if [logstash][msgparser][id] == "msgParserId768" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Core Job Details:" }
			id => "msgParserId768"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId769
	# line in RSA:  <fld30> <fld31> <event_source> Correlation clause in a subquery not permitted. 
	else if [logstash][msgparser][id] == "msgParserId769" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Correlation clause in a subquery not permitted." }
			id => "msgParserId769"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Could" {
		# MESSAGE 000685
		# line in RSA:  <fld30> <fld31> <event_source> Could not activate or scan all of the log files for database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not activate or scan all of the log files for database '%{fld1}'." }
				id => "message-000685"
				add_field => {
					"[event][id]" => "000685"
					"[rsa][message][id1]" => "000685"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000686
		# line in RSA:  <fld30> <fld31> <event_source> Could not add article '<fld1>' because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force this and invalidate the existing snapshot. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not add article '%{fld1}' because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force this and invalidate the existing snapshot." }
				id => "message-000686"
				add_field => {
					"[event][id]" => "000686"
					"[rsa][message][id1]" => "000686"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000687
		# line in RSA:  <fld30> <fld31> <event_source> Could not add article '<fld1>' because there are active subscriptions. Set @force_reinit_subscription to 1 to force this and reintialize the active subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not add article '%{fld1}' because there are active subscriptions. Set @force_reinit_subscription to 1 to force this and reintialize the active subscriptions." }
				id => "message-000687"
				add_field => {
					"[event][id]" => "000687"
					"[rsa][message][id1]" => "000687"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000688
		# line in RSA:  <fld30> <fld31> <event_source> Could not add filter '<fld1>' because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force this and invalidate the existing snapshot. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not add filter '%{fld1}' because a snapshot is already generated. Set @force_invalidate_snapshot to 1 to force this and invalidate the existing snapshot." }
				id => "message-000688"
				add_field => {
					"[event][id]" => "000688"
					"[rsa][message][id1]" => "000688"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000689
		# line in RSA:  <fld30> <fld31> <event_source> Could not add filter '<fld1>' because there are active subscriptions. Set @force_reinit_subscription to 1 to force this and reintialize the active subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not add filter '%{fld1}' because there are active subscriptions. Set @force_reinit_subscription to 1 to force this and reintialize the active subscriptions." }
				id => "message-000689"
				add_field => {
					"[event][id]" => "000689"
					"[rsa][message][id1]" => "000689"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000690
		# line in RSA:  <fld30> <fld31> <event_source> Could not add login using sp_addlogin (user = <username>). Terminating this procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not add login using sp_addlogin (user = %{username}). Terminating this procedure." }
				id => "message-000690"
				add_field => {
					"[event][id]" => "000690"
					"[rsa][message][id1]" => "000690"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000691
		# line in RSA:  <fld30> <fld31> <event_source> Could not add startup handler '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not add startup handler '%{fld1}'." }
				id => "message-000691"
				add_field => {
					"[event][id]" => "000691"
					"[rsa][message][id1]" => "000691"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000692
		# line in RSA:  <fld30> <fld31> <event_source> Could not add the distribution database '<fld1>'. This distribution database already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not add the distribution database '%{fld1}'. This distribution database already exists." }
				id => "message-000692"
				add_field => {
					"[event][id]" => "000692"
					"[rsa][message][id1]" => "000692"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000693
		# line in RSA:  <fld30> <fld31> <event_source> Could not adjust the replication state of database '<fld1>'. The database was successfully restored, however its replication state is indeterminate. See the Troubleshooting Replication section in SQL Server Books Online. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not adjust the replication state of database '%{fld1}'. The database was successfully restored, however its replication state is indeterminate. See the Troubleshooting Replication section in SQL Server Books Online." }
				id => "message-000693"
				add_field => {
					"[event][id]" => "000693"
					"[rsa][message][id1]" => "000693"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000694
		# line in RSA:  <fld30> <fld31> <event_source> Could not adjust the space allocation for file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not adjust the space allocation for file '%{fld1}'." }
				id => "message-000694"
				add_field => {
					"[event][id]" => "000694"
					"[rsa][message][id1]" => "000694"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000695
		# line in RSA:  <fld30> <fld31> <event_source> Could not allocate ancillary table for a subquery. Maximum number of tables in a query (<fld1>) exceeded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not allocate ancillary table for a subquery. Maximum number of tables in a query (%{fld1}) exceeded." }
				id => "message-000695"
				add_field => {
					"[event][id]" => "000695"
					"[rsa][message][id1]" => "000695"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000696
		# line in RSA:  <fld30> <fld31> <event_source> Could not allocate ancillary table for query optimization. Maximum number of tables in a query (<fld1>) exceeded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not allocate ancillary table for query optimization. Maximum number of tables in a query (%{fld1}) exceeded." }
				id => "message-000696"
				add_field => {
					"[event][id]" => "000696"
					"[rsa][message][id1]" => "000696"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000697
		# line in RSA:  <fld30> <fld31> <event_source> Could not allocate ancillary table for view or function resolution. The maximum number of tables in a query (<fld1>) was exceeded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not allocate ancillary table for view or function resolution. The maximum number of tables in a query (%{fld1}) was exceeded." }
				id => "message-000697"
				add_field => {
					"[event][id]" => "000697"
					"[rsa][message][id1]" => "000697"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000698
		# line in RSA:  <fld30> <fld31> <event_source> Could not allocate disk space for a work table in database '<fld1>'. You may be able to free up space by using BACKUP LOG, or you may want to extend the size of the database by using ALTER DATABASE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not allocate disk space for a work table in database '%{fld1}'. You may be able to free up space by using BACKUP LOG, or you may want to extend the size of the database by using ALTER DATABASE." }
				id => "message-000698"
				add_field => {
					"[event][id]" => "000698"
					"[rsa][message][id1]" => "000698"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000699
		# line in RSA:  <fld30> <fld31> <event_source> Could not allocate enough memory to initialize '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not allocate enough memory to initialize '%{fld1}'." }
				id => "message-000699"
				add_field => {
					"[event][id]" => "000699"
					"[rsa][message][id1]" => "000699"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000700
		# line in RSA:  <fld30> <fld31> <event_source> Could not allocate memory for replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not allocate memory for replication." }
				id => "message-000700"
				add_field => {
					"[event][id]" => "000700"
					"[rsa][message][id1]" => "000700"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000701
		# line in RSA:  <fld30> <fld31> <event_source> Could not allocate new page for database '<fld1>'. There are no more pages available in filegroup <fld2>. Space can be created by dropping objects, adding additional files, or allowing file growth. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not allocate new page for database '%{fld1}'. There are no more pages available in filegroup %{fld2}. Space can be created by dropping objects, adding additional files, or allowing file growth." }
				id => "message-000701"
				add_field => {
					"[event][id]" => "000701"
					"[rsa][message][id1]" => "000701"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000702
		# line in RSA:  <fld30> <fld31> <event_source> Could not allocate space for object '<fld1>' in database '<fld2>' because the '<fld3>' filegroup is full. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not allocate space for object '%{fld1}' in database '%{fld2}' because the '%{fld3}' filegroup is full." }
				id => "message-000702"
				add_field => {
					"[event][id]" => "000702"
					"[rsa][message][id1]" => "000702"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000703
		# line in RSA:  <fld30> <fld31> <event_source> Could not attach database '<fld1>' to file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not attach database '%{fld1}' to file '%{fld2}'." }
				id => "message-000703"
				add_field => {
					"[event][id]" => "000703"
					"[rsa][message][id1]" => "000703"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000704
		# line in RSA:  <fld30> <fld31> <event_source> Could not bind foreign key constraint. Too many tables involved in the query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bind foreign key constraint. Too many tables involved in the query." }
				id => "message-000704"
				add_field => {
					"[event][id]" => "000704"
					"[rsa][message][id1]" => "000704"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000705
		# line in RSA:  <fld30> <fld31> <event_source> Could not build an allocation map for the database '<fld1>'. Database does not have a DBINFO structure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not build an allocation map for the database '%{fld1}'. Database does not have a DBINFO structure." }
				id => "message-000705"
				add_field => {
					"[event][id]" => "000705"
					"[rsa][message][id1]" => "000705"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000706
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert because file '<fld1>' could not be opened. Operating system error code <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert because file '%{fld1}' could not be opened. Operating system error code %{fld2}." }
				id => "message-000706"
				add_field => {
					"[event][id]" => "000706"
					"[rsa][message][id1]" => "000706"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000707
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert because file '<fld1>' could not be read. Operating system error code <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert because file '%{fld1}' could not be read. Operating system error code %{fld2}." }
				id => "message-000707"
				add_field => {
					"[event][id]" => "000707"
					"[rsa][message][id1]" => "000707"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000708
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert because the maximum number of errors (<fld1>) was exceeded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert because the maximum number of errors (%{fld1}) was exceeded." }
				id => "message-000708"
				add_field => {
					"[event][id]" => "000708"
					"[rsa][message][id1]" => "000708"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000709
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Bulk data stream was incorrectly specified as sorted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Bulk data stream was incorrectly specified as sorted." }
				id => "message-000709"
				add_field => {
					"[event][id]" => "000709"
					"[rsa][message][id1]" => "000709"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000710
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Error reading destination table column name for source column <fld1> in format file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Error reading destination table column name for source column %{fld1} in format file '%{fld2}'." }
				id => "message-000710"
				add_field => {
					"[event][id]" => "000710"
					"[rsa][message][id1]" => "000710"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000711
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Error reading the number of columns from format file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Error reading the number of columns from format file '%{fld1}'." }
				id => "message-000711"
				add_field => {
					"[event][id]" => "000711"
					"[rsa][message][id1]" => "000711"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000712
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. File '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. File '%{fld1}' does not exist." }
				id => "message-000712"
				add_field => {
					"[event][id]" => "000712"
					"[rsa][message][id1]" => "000712"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000713
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Invalid column length for column number <fld1> in format file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Invalid column length for column number %{fld1} in format file '%{fld2}'." }
				id => "message-000713"
				add_field => {
					"[event][id]" => "000713"
					"[rsa][message][id1]" => "000713"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000714
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Invalid column number in format file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Invalid column number in format file '%{fld1}'." }
				id => "message-000714"
				add_field => {
					"[event][id]" => "000714"
					"[rsa][message][id1]" => "000714"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000715
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Invalid column terminator for column number <fld1> in format file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Invalid column terminator for column number %{fld1} in format file '%{fld2}'." }
				id => "message-000715"
				add_field => {
					"[event][id]" => "000715"
					"[rsa][message][id1]" => "000715"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000716
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Invalid data type for column number <fld1> in format file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Invalid data type for column number %{fld1} in format file '%{fld2}'." }
				id => "message-000716"
				add_field => {
					"[event][id]" => "000716"
					"[rsa][message][id1]" => "000716"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000717
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Invalid destination table column number for source column <fld1> in format file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Invalid destination table column number for source column %{fld1} in format file '%{fld2}'." }
				id => "message-000717"
				add_field => {
					"[event][id]" => "000717"
					"[rsa][message][id1]" => "000717"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000718
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Invalid number of columns in format file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Invalid number of columns in format file '%{fld1}'." }
				id => "message-000718"
				add_field => {
					"[event][id]" => "000718"
					"[rsa][message][id1]" => "000718"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000719
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Invalid prefix for column number <fld1> in format file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Invalid prefix for column number %{fld1} in format file '%{fld2}'." }
				id => "message-000719"
				add_field => {
					"[event][id]" => "000719"
					"[rsa][message][id1]" => "000719"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000720
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Invalid sorted column '<fld1>'. Assuming data stream is not sorted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Invalid sorted column '%{fld1}'. Assuming data stream is not sorted." }
				id => "message-000720"
				add_field => {
					"[event][id]" => "000720"
					"[rsa][message][id1]" => "000720"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000721
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Prefix length, field length, or terminator required for source column <fld1> in format file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Prefix length, field length, or terminator required for source column %{fld1} in format file '%{fld2}'." }
				id => "message-000721"
				add_field => {
					"[event][id]" => "000721"
					"[rsa][message][id1]" => "000721"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000722
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Sorted column '<fld1>' was specified more than once. Assuming data stream is not sorted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Sorted column '%{fld1}' was specified more than once. Assuming data stream is not sorted." }
				id => "message-000722"
				add_field => {
					"[event][id]" => "000722"
					"[rsa][message][id1]" => "000722"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000723
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. Unknown version of format file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. Unknown version of format file '%{fld1}'." }
				id => "message-000723"
				add_field => {
					"[event][id]" => "000723"
					"[rsa][message][id1]" => "000723"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000724
		# line in RSA:  <fld30> <fld31> <event_source> Could not bulk insert. When using the FIRSTROW and LASTROW parameters, the value for FIRSTROW cannot be greater than the value for LASTROW. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not bulk insert. When using the FIRSTROW and LASTROW parameters, the value for FIRSTROW cannot be greater than the value for LASTROW." }
				id => "message-000724"
				add_field => {
					"[event][id]" => "000724"
					"[rsa][message][id1]" => "000724"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000725
		# line in RSA:  <fld30> <fld31> <event_source> Could not change article because there is an existing subscription to the article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not change article because there is an existing subscription to the article." }
				id => "message-000725"
				add_field => {
					"[event][id]" => "000725"
					"[rsa][message][id1]" => "000725"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000726
		# line in RSA:  <fld30> <fld31> <event_source> Could not change property '<fld1>' for article '<fld2>' because there is an existing subscription to the article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not change property '%{fld1}' for article '%{fld2}' because there is an existing subscription to the article." }
				id => "message-000726"
				add_field => {
					"[event][id]" => "000726"
					"[rsa][message][id1]" => "000726"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000727
		# line in RSA:  <fld30> <fld31> <event_source> Could not change replication frequency because there are active subscriptions on the publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not change replication frequency because there are active subscriptions on the publication." }
				id => "message-000727"
				add_field => {
					"[event][id]" => "000727"
					"[rsa][message][id1]" => "000727"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000728
		# line in RSA:  <fld30> <fld31> <event_source> Could not change startup option because this option is restricted to objects that have no parameters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not change startup option because this option is restricted to objects that have no parameters." }
				id => "message-000728"
				add_field => {
					"[event][id]" => "000728"
					"[rsa][message][id1]" => "000728"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000729
		# line in RSA:  <fld30> <fld31> <event_source> Could not change the article '<fld1>' because the publication has already been activated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not change the article '%{fld1}' because the publication has already been activated." }
				id => "message-000729"
				add_field => {
					"[event][id]" => "000729"
					"[rsa][message][id1]" => "000729"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000730
		# line in RSA:  <fld30> <fld31> <event_source> Could not change the merge publish option because the server is not set up for replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not change the merge publish option because the server is not set up for replication." }
				id => "message-000730"
				add_field => {
					"[event][id]" => "000730"
					"[rsa][message][id1]" => "000730"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000731
		# line in RSA:  <fld30> <fld31> <event_source> Could not change the Publisher because the subscription has been dropped. Use sp_subscription_cleanup to clean up the triggers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not change the Publisher because the subscription has been dropped. Use sp_subscription_cleanup to clean up the triggers." }
				id => "message-000731"
				add_field => {
					"[event][id]" => "000731"
					"[rsa][message][id1]" => "000731"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000732
		# line in RSA:  <fld30> <fld31> <event_source> Could not clean up the distribution history tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not clean up the distribution history tables." }
				id => "message-000732"
				add_field => {
					"[event][id]" => "000732"
					"[rsa][message][id1]" => "000732"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000733
		# line in RSA:  <fld30> <fld31> <event_source> Could not clean up the distribution transaction tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not clean up the distribution transaction tables." }
				id => "message-000733"
				add_field => {
					"[event][id]" => "000733"
					"[rsa][message][id1]" => "000733"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000734
		# line in RSA:  <fld30> <fld31> <event_source> Could not cleanup worktable IAM chains to allow shrink or remove file operation.  Please try again when tempdb is idle. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not cleanup worktable IAM chains to allow shrink or remove file operation.  Please try again when tempdb is idle." }
				id => "message-000734"
				add_field => {
					"[event][id]" => "000734"
					"[rsa][message][id1]" => "000734"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000735
		# line in RSA:  <fld30> <fld31> <event_source> Could not clear '<fld1>' bitmap in database '<fld2>' due to error <fld3>.  A subsequent backup operation may be slower/larger than normal. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not clear '%{fld1}' bitmap in database '%{fld2}' due to error %{fld3}.  A subsequent backup operation may be slower/larger than normal." }
				id => "message-000735"
				add_field => {
					"[event][id]" => "000735"
					"[rsa][message][id1]" => "000735"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000736
		# line in RSA:  <fld30> <fld31> <event_source> Could not close Net-Library '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not close Net-Library '%{fld1}'." }
				id => "message-000736"
				add_field => {
					"[event][id]" => "000736"
					"[rsa][message][id1]" => "000736"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000737
		# line in RSA:  <fld30> <fld31> <event_source> Could not complete cursor operation because the set options have changed since the cursor was declared. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not complete cursor operation because the set options have changed since the cursor was declared." }
				id => "message-000737"
				add_field => {
					"[event][id]" => "000737"
					"[rsa][message][id1]" => "000737"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000738
		# line in RSA:  <fld30> <fld31> <event_source> Could not complete cursor operation because the table schema changed after the cursor was declared. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not complete cursor operation because the table schema changed after the cursor was declared." }
				id => "message-000738"
				add_field => {
					"[event][id]" => "000738"
					"[rsa][message][id1]" => "000738"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000739
		# line in RSA:  <fld30> <fld31> <event_source> Could not connect to server '<fld1>' because '<fld2>' is not defined as a remote login at the server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not connect to server '%{fld1}' because '%{fld2}' is not defined as a remote login at the server." }
				id => "message-000739"
				add_field => {
					"[event][id]" => "000739"
					"[rsa][message][id1]" => "000739"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000740
		# line in RSA:  <fld30> <fld31> <event_source> Could not connect to server '<fld1>' because '<fld2>' is not defined as a remote server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not connect to server '%{fld1}' because '%{fld2}' is not defined as a remote server." }
				id => "message-000740"
				add_field => {
					"[event][id]" => "000740"
					"[rsa][message][id1]" => "000740"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000741
		# line in RSA:  <fld30> <fld31> <event_source> Could not connect to server '<fld1>' because it is not configured for remote access. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not connect to server '%{fld1}' because it is not configured for remote access." }
				id => "message-000741"
				add_field => {
					"[event][id]" => "000741"
					"[rsa][message][id1]" => "000741"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000742
		# line in RSA:  <fld30> <fld31> <event_source> Could not connect. The maximum number of '<fld1>' configured user connections are already connected. The system administrator can change the maximum to a higher value using sp_configure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not connect. The maximum number of '%{fld1}' configured user connections are already connected. The system administrator can change the maximum to a higher value using sp_configure." }
				id => "message-000742"
				add_field => {
					"[event][id]" => "000742"
					"[rsa][message][id1]" => "000742"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000743
		# line in RSA:  <fld30> <fld31> <event_source> Could not construct column clause for article view. Reduce the number of columns or create the view manually. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not construct column clause for article view. Reduce the number of columns or create the view manually." }
				id => "message-000743"
				add_field => {
					"[event][id]" => "000743"
					"[rsa][message][id1]" => "000743"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000744
		# line in RSA:  <fld30> <fld31> <event_source> Could not continue scan with NOLOCK due to data movement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not continue scan with NOLOCK due to data movement." }
				id => "message-000744"
				add_field => {
					"[event][id]" => "000744"
					"[rsa][message][id1]" => "000744"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000745
		# line in RSA:  <fld30> <fld31> <event_source> Could not convert a string to or from Unicode, <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not convert a string to or from Unicode, %{fld1}." }
				id => "message-000745"
				add_field => {
					"[event][id]" => "000745"
					"[rsa][message][id1]" => "000745"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000746
		# line in RSA:  <fld30> <fld31> <event_source> Could not convert the data type because of a sign mismatch. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not convert the data type because of a sign mismatch." }
				id => "message-000746"
				add_field => {
					"[event][id]" => "000746"
					"[rsa][message][id1]" => "000746"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000747
		# line in RSA:  <fld30> <fld31> <event_source> Could not convert the data value due to reasons other than sign mismatch or overflow. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not convert the data value due to reasons other than sign mismatch or overflow." }
				id => "message-000747"
				add_field => {
					"[event][id]" => "000747"
					"[rsa][message][id1]" => "000747"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000750
		# line in RSA:  <fld30> <fld31> <event_source> Could not convert the value for OPENXML column '<fld1>' to sql_variant data type. The value is too long. Change the data type of this column to text, ntext or image. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not convert the value for OPENXML column '%{fld1}' to sql_variant data type. The value is too long. Change the data type of this column to text, ntext or image." }
				id => "message-000750"
				add_field => {
					"[event][id]" => "000750"
					"[rsa][message][id1]" => "000750"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000751
		# line in RSA:  <fld30> <fld31> <event_source> Could not create a column accessor for OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create a column accessor for OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000751"
				add_field => {
					"[event][id]" => "000751"
					"[rsa][message][id1]" => "000751"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000752
		# line in RSA:  <fld30> <fld31> <event_source> Could not create a new log file with file '<fld1>'. See previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create a new log file with file '%{fld1}'. See previous errors." }
				id => "message-000752"
				add_field => {
					"[event][id]" => "000752"
					"[rsa][message][id1]" => "000752"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000753
		# line in RSA:  <fld30> <fld31> <event_source> Could not create a new session on OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create a new session on OLE DB provider '%{fld1}'." }
				id => "message-000753"
				add_field => {
					"[event][id]" => "000753"
					"[rsa][message][id1]" => "000753"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000754
		# line in RSA:  <fld30> <fld31> <event_source> Could not create a statement object using OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create a statement object using OLE DB provider '%{fld1}'." }
				id => "message-000754"
				add_field => {
					"[event][id]" => "000754"
					"[rsa][message][id1]" => "000754"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000755
		# line in RSA:  <fld30> <fld31> <event_source> Could not create an acceptable cursor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create an acceptable cursor." }
				id => "message-000755"
				add_field => {
					"[event][id]" => "000755"
					"[rsa][message][id1]" => "000755"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000756
		# line in RSA:  <fld30> <fld31> <event_source> Could not create an instance of OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create an instance of OLE DB provider '%{fld1}'." }
				id => "message-000756"
				add_field => {
					"[event][id]" => "000756"
					"[rsa][message][id1]" => "000756"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000757
		# line in RSA:  <fld30> <fld31> <event_source> Could not create column list because it is too long. Create the list manually. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create column list because it is too long. Create the list manually." }
				id => "message-000757"
				add_field => {
					"[event][id]" => "000757"
					"[rsa][message][id1]" => "000757"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000758
		# line in RSA:  <fld30> <fld31> <event_source> Could not create constraint. See previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create constraint. See previous errors." }
				id => "message-000758"
				add_field => {
					"[event][id]" => "000758"
					"[rsa][message][id1]" => "000758"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000759
		# line in RSA:  <fld30> <fld31> <event_source> Could not create default data file because the name was too long. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create default data file because the name was too long." }
				id => "message-000759"
				add_field => {
					"[event][id]" => "000759"
					"[rsa][message][id1]" => "000759"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000760
		# line in RSA:  <fld30> <fld31> <event_source> Could not create DEFAULT for column '<fld1>' as it is not a valid column in the table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create DEFAULT for column '%{fld1}' as it is not a valid column in the table '%{fld2}'." }
				id => "message-000760"
				add_field => {
					"[event][id]" => "000760"
					"[rsa][message][id1]" => "000760"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000761
		# line in RSA:  <fld30> <fld31> <event_source> Could not create default log file because the name was too long. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create default log file because the name was too long." }
				id => "message-000761"
				add_field => {
					"[event][id]" => "000761"
					"[rsa][message][id1]" => "000761"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000762
		# line in RSA:  <fld30> <fld31> <event_source> Could not create IDENTITY attribute on nullable column '<fld1>', table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create IDENTITY attribute on nullable column '%{fld1}', table '%{fld2}'." }
				id => "message-000762"
				add_field => {
					"[event][id]" => "000762"
					"[rsa][message][id1]" => "000762"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000763
		# line in RSA:  <fld30> <fld31> <event_source> Could not create one or more files. Consider using the WITH MOVE option to identify valid locations. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create one or more files. Consider using the WITH MOVE option to identify valid locations." }
				id => "message-000763"
				add_field => {
					"[event][id]" => "000763"
					"[rsa][message][id1]" => "000763"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000764
		# line in RSA:  <fld30> <fld31> <event_source> Could not create Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create Subscriber." }
				id => "message-000764"
				add_field => {
					"[event][id]" => "000764"
					"[rsa][message][id1]" => "000764"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000765
		# line in RSA:  <fld30> <fld31> <event_source> Could not create tempdb. If space is low, extend the amount of space and restart. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create tempdb. If space is low, extend the amount of space and restart." }
				id => "message-000765"
				add_field => {
					"[event][id]" => "000765"
					"[rsa][message][id1]" => "000765"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000766
		# line in RSA:  <fld30> <fld31> <event_source> Could not create the '<fld1>' portion of the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create the '%{fld1}' portion of the database." }
				id => "message-000766"
				add_field => {
					"[event][id]" => "000766"
					"[rsa][message][id1]" => "000766"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000767
		# line in RSA:  <fld30> <fld31> <event_source> Could not create the merge replication PAL database role for publication '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create the merge replication PAL database role for publication '%{fld1}'." }
				id => "message-000767"
				add_field => {
					"[event][id]" => "000767"
					"[rsa][message][id1]" => "000767"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000768
		# line in RSA:  <fld30> <fld31> <event_source> Could not create the publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create the publication." }
				id => "message-000768"
				add_field => {
					"[event][id]" => "000768"
					"[rsa][message][id1]" => "000768"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000769
		# line in RSA:  <fld30> <fld31> <event_source> Could not create the snapshot directory structure in the specified @destination_folder. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create the snapshot directory structure in the specified @destination_folder." }
				id => "message-000769"
				add_field => {
					"[event][id]" => "000769"
					"[rsa][message][id1]" => "000769"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000770
		# line in RSA:  <fld30> <fld31> <event_source> Could not create worker thread. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not create worker thread." }
				id => "message-000770"
				add_field => {
					"[event][id]" => "000770"
					"[rsa][message][id1]" => "000770"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000771
		# line in RSA:  <fld30> <fld31> <event_source> Could not delete entries for backup set ID '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not delete entries for backup set ID '%{fld1}'." }
				id => "message-000771"
				add_field => {
					"[event][id]" => "000771"
					"[rsa][message][id1]" => "000771"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000772
		# line in RSA:  <fld30> <fld31> <event_source> Could not delete file '<fld1>'. See the SQL Server error log for more information. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not delete file '%{fld1}'. See the SQL Server error log for more information." }
				id => "message-000772"
				add_field => {
					"[event][id]" => "000772"
					"[rsa][message][id1]" => "000772"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000773
		# line in RSA:  <fld30> <fld31> <event_source> Could not delete the physical file '<fld1>'. The DeleteFile system function returned error <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not delete the physical file '%{fld1}'. The DeleteFile system function returned error %{fld2}." }
				id => "message-000773"
				add_field => {
					"[event][id]" => "000773"
					"[rsa][message][id1]" => "000773"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000774
		# line in RSA:  <fld30> <fld31> <event_source> Could not delete the row because it does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not delete the row because it does not exist." }
				id => "message-000774"
				add_field => {
					"[event][id]" => "000774"
					"[rsa][message][id1]" => "000774"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000775
		# line in RSA:  <fld30> <fld31> <event_source> Could not deny login access to '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not deny login access to '%{fld1}'." }
				id => "message-000775"
				add_field => {
					"[event][id]" => "000775"
					"[rsa][message][id1]" => "000775"
					"[event][categoryid]" => "1501000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000776
		# line in RSA:  <fld30> <fld31> <event_source> Could not determine the Subscriber name for distributed agent execution. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not determine the Subscriber name for distributed agent execution." }
				id => "message-000776"
				add_field => {
					"[event][id]" => "000776"
					"[rsa][message][id1]" => "000776"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000777
		# line in RSA:  <fld30> <fld31> <event_source> Could not disable database for publishing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not disable database for publishing." }
				id => "message-000777"
				add_field => {
					"[event][id]" => "000777"
					"[rsa][message][id1]" => "000777"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000778
		# line in RSA:  <fld30> <fld31> <event_source> Could not dispatch SQL Server by Service Control Manager. Operating system error = <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not dispatch SQL Server by Service Control Manager. Operating system error = %{fld1}." }
				id => "message-000778"
				add_field => {
					"[event][id]" => "000778"
					"[rsa][message][id1]" => "000778"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000779
		# line in RSA:  <fld30> <fld31> <event_source> Could not do cleanup for the killed process. Received message <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not do cleanup for the killed process. Received message %{fld1}." }
				id => "message-000779"
				add_field => {
					"[event][id]" => "000779"
					"[rsa][message][id1]" => "000779"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000780
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop article. A subscription exists on it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop article. A subscription exists on it." }
				id => "message-000780"
				add_field => {
					"[event][id]" => "000780"
					"[rsa][message][id1]" => "000780"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000781
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop constraint. See previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop constraint. See previous errors." }
				id => "message-000781"
				add_field => {
					"[event][id]" => "000781"
					"[rsa][message][id1]" => "000781"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000782
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop index '<fld1>' because the table or clustered index entry cannot be found in the sysindexes system table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop index '%{fld1}' because the table or clustered index entry cannot be found in the sysindexes system table." }
				id => "message-000782"
				add_field => {
					"[event][id]" => "000782"
					"[rsa][message][id1]" => "000782"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000783
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop login '<fld1>' as the user is currently logged in. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop login '%{fld1}' as the user is currently logged in." }
				id => "message-000783"
				add_field => {
					"[event][id]" => "000783"
					"[rsa][message][id1]" => "000783"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000784
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop object '<fld1>' because it is referenced by a FOREIGN KEY constraint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop object '%{fld1}' because it is referenced by a FOREIGN KEY constraint." }
				id => "message-000784"
				add_field => {
					"[event][id]" => "000784"
					"[rsa][message][id1]" => "000784"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000785
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop publication. A subscription exists to it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop publication. A subscription exists to it." }
				id => "message-000785"
				add_field => {
					"[event][id]" => "000785"
					"[rsa][message][id1]" => "000785"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000786
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop synchronous update stored procedure '<fld1>' in '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop synchronous update stored procedure '%{fld1}' in '%{fld2}'." }
				id => "message-000786"
				add_field => {
					"[event][id]" => "000786"
					"[rsa][message][id1]" => "000786"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000787
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop the article(s) from the publication '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop the article(s) from the publication '%{fld1}'." }
				id => "message-000787"
				add_field => {
					"[event][id]" => "000787"
					"[rsa][message][id1]" => "000787"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000788
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop the distribution database '<fld1>'. This distributor database is associated with a Publisher. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop the distribution database '%{fld1}'. This distributor database is associated with a Publisher." }
				id => "message-000788"
				add_field => {
					"[event][id]" => "000788"
					"[rsa][message][id1]" => "000788"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000789
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop the Distributor '<fld1>'. This Distributor has associated distribution databases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop the Distributor '%{fld1}'. This Distributor has associated distribution databases." }
				id => "message-000789"
				add_field => {
					"[event][id]" => "000789"
					"[rsa][message][id1]" => "000789"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000790
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop the publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop the publication." }
				id => "message-000790"
				add_field => {
					"[event][id]" => "000790"
					"[rsa][message][id1]" => "000790"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 0007791
		# line in RSA:  <fld30> <fld31> <event_source> Could not drop <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not drop %{fld1}." }
				id => "message-0007791"
				add_field => {
					"[event][id]" => "0007791"
					"[rsa][message][id1]" => "0007791"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000792
		# line in RSA:  <fld30> <fld31> <event_source> Could not enable database for publishing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not enable database for publishing." }
				id => "message-000792"
				add_field => {
					"[event][id]" => "000792"
					"[rsa][message][id1]" => "000792"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000793
		# line in RSA:  <fld30> <fld31> <event_source> Could not enable or disable the constraint. See previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not enable or disable the constraint. See previous errors." }
				id => "message-000793"
				add_field => {
					"[event][id]" => "000793"
					"[rsa][message][id1]" => "000793"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000794
		# line in RSA:  <fld30> <fld31> <event_source> Could not enforce the remote join hint for this query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not enforce the remote join hint for this query." }
				id => "message-000794"
				add_field => {
					"[event][id]" => "000794"
					"[rsa][message][id1]" => "000794"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000795
		# line in RSA:  <fld30> <fld31> <event_source> Could not execute '<fld1>'. Check '<fld2>' in the install directory. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not execute '%{fld1}'. Check '%{fld2}' in the install directory." }
				id => "message-000795"
				add_field => {
					"[event][id]" => "000795"
					"[rsa][message][id1]" => "000795"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000796
		# line in RSA:  <fld30> <fld31> <event_source> Could not execute procedure '<fld1>' on remote server '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not execute procedure '%{fld1}' on remote server '%{fld2}'." }
				id => "message-000796"
				add_field => {
					"[event][id]" => "000796"
					"[rsa][message][id1]" => "000796"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000797
		# line in RSA:  <fld30> <fld31> <event_source> Could not execute procedure on remote server '<fld1>' because SQL Server is not configured for remote access. Ask your system administrator to reconfigure SQL Server to allow remote access. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not execute procedure on remote server '%{fld1}' because SQL Server is not configured for remote access. Ask your system administrator to reconfigure SQL Server to allow remote access." }
				id => "message-000797"
				add_field => {
					"[event][id]" => "000797"
					"[rsa][message][id1]" => "000797"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000798
		# line in RSA:  <fld30> <fld31> <event_source> Could not execute query against OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not execute query against OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000798"
				add_field => {
					"[event][id]" => "000798"
					"[rsa][message][id1]" => "000798"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000799
		# line in RSA:  <fld30> <fld31> <event_source> Could not execute query. The OLE DB provider '<fld1>' did not provide an appropriate interface to access the text, ntext, or image column '<fld2>.<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not execute query. The OLE DB provider '%{fld1}' did not provide an appropriate interface to access the text, ntext, or image column '%{fld2}.%{fld3}'." }
				id => "message-000799"
				add_field => {
					"[event][id]" => "000799"
					"[rsa][message][id1]" => "000799"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000800
		# line in RSA:  <fld30> <fld31> <event_source> Could not fetch a row from OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not fetch a row from OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000800"
				add_field => {
					"[event][id]" => "000800"
					"[rsa][message][id1]" => "000800"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000801
		# line in RSA:  <fld30> <fld31> <event_source> Could not fetch a row using a bookmark from OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not fetch a row using a bookmark from OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000801"
				add_field => {
					"[event][id]" => "000801"
					"[rsa][message][id1]" => "000801"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000802
		# line in RSA:  <fld30> <fld31> <event_source> Could not fetch logical page <fld1>, database ID <fld2>. The page is not currently allocated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not fetch logical page %{fld1}, database ID %{fld2}. The page is not currently allocated." }
				id => "message-000802"
				add_field => {
					"[event][id]" => "000802"
					"[rsa][message][id1]" => "000802"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000803
		# line in RSA:  <fld30> <fld31> <event_source> Could not find 'zero' row for index '<fld1>' the table in sysindexes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find 'zero' row for index '%{fld1}' the table in sysindexes." }
				id => "message-000803"
				add_field => {
					"[event][id]" => "000803"
					"[rsa][message][id1]" => "000803"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000804
		# line in RSA:  <fld30> <fld31> <event_source> Could not find a default segment to create the table on. Ask your system administrator to specify a default segment in syssegments. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find a default segment to create the table on. Ask your system administrator to specify a default segment in syssegments." }
				id => "message-000804"
				add_field => {
					"[event][id]" => "000804"
					"[rsa][message][id1]" => "000804"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000805
		# line in RSA:  <fld30> <fld31> <event_source> Could not find a table or object name '<fld1>' in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find a table or object name '%{fld1}' in database '%{fld2}'." }
				id => "message-000805"
				add_field => {
					"[event][id]" => "000805"
					"[rsa][message][id1]" => "000805"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000806
		# line in RSA:  <fld30> <fld31> <event_source> Could not find a table or object named '<fld1>'. Check sysobjects. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find a table or object named '%{fld1}'. Check sysobjects." }
				id => "message-000806"
				add_field => {
					"[event][id]" => "000806"
					"[rsa][message][id1]" => "000806"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000807
		# line in RSA:  <fld30> <fld31> <event_source> Could not find any index named '<fld1>' for table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find any index named '%{fld1}' for table '%{fld2}'." }
				id => "message-000807"
				add_field => {
					"[event][id]" => "000807"
					"[rsa][message][id1]" => "000807"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000808
		# line in RSA:  <fld30> <fld31> <event_source> Could not find application role '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find application role '%{fld1}'." }
				id => "message-000808"
				add_field => {
					"[event][id]" => "000808"
					"[rsa][message][id1]" => "000808"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000809
		# line in RSA:  <fld30> <fld31> <event_source> Could not find buffer <fld32> holding logical page <fld1> in the SDES <fld33> kept buffer pool for object '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find buffer %{fld32} holding logical page %{fld1} in the SDES %{fld33} kept buffer pool for object '%{fld2}'." }
				id => "message-000809"
				add_field => {
					"[event][id]" => "000809"
					"[rsa][message][id1]" => "000809"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000810
		# line in RSA:  <fld30> <fld31> <event_source> Could not find CHECK constraint for '<fld1>', although the table is flagged as having one. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find CHECK constraint for '%{fld1}', although the table is flagged as having one." }
				id => "message-000810"
				add_field => {
					"[event][id]" => "000810"
					"[rsa][message][id1]" => "000810"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000811
		# line in RSA:  <fld30> <fld31> <event_source> Could not find column ID <fld1> in syscolumns for object ID <fld2> in database ID <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find column ID %{fld1} in syscolumns for object ID %{fld2} in database ID %{fld3}." }
				id => "message-000811"
				add_field => {
					"[event][id]" => "000811"
					"[rsa][message][id1]" => "000811"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000812
		# line in RSA:  <fld30> <fld31> <event_source> Could not find database '<fld1>'. Check sysdatabases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find database '%{fld1}'. Check sysdatabases." }
				id => "message-000812"
				add_field => {
					"[event][id]" => "000812"
					"[rsa][message][id1]" => "000812"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000813
		# line in RSA:  <fld30> <fld31> <event_source> Could not find database ID <fld1> in sysdatabases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find database ID %{fld1} in sysdatabases." }
				id => "message-000813"
				add_field => {
					"[event][id]" => "000813"
					"[rsa][message][id1]" => "000813"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000814
		# line in RSA:  <fld30> <fld31> <event_source> Could not find database ID <fld1>. Check sysdatabases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find database ID %{fld1}. Check sysdatabases." }
				id => "message-000814"
				add_field => {
					"[event][id]" => "000814"
					"[rsa][message][id1]" => "000814"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000815
		# line in RSA:  <fld30> <fld31> <event_source> Could not find database ID <fld1>. Database may not be activated yet or may be in transition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find database ID %{fld1}. Database may not be activated yet or may be in transition." }
				id => "message-000815"
				add_field => {
					"[event][id]" => "000815"
					"[rsa][message][id1]" => "000815"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000816
		# line in RSA:  <fld30> <fld31> <event_source> Could not find database table ID <fld1>, name '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find database table ID %{fld1}, name '%{fld2}'." }
				id => "message-000816"
				add_field => {
					"[event][id]" => "000816"
					"[rsa][message][id1]" => "000816"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000817
		# line in RSA:  <fld30> <fld31> <event_source> Could not find descriptor for database ID <fld1>, object ID <fld2> in hash table after hashing it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find descriptor for database ID %{fld1}, object ID %{fld2} in hash table after hashing it." }
				id => "message-000817"
				add_field => {
					"[event][id]" => "000817"
					"[rsa][message][id1]" => "000817"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000818
		# line in RSA:  <fld30> <fld31> <event_source> Could not find filegroup '<fld1>' in sysfilegroups for database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find filegroup '%{fld1}' in sysfilegroups for database '%{fld2}'." }
				id => "message-000818"
				add_field => {
					"[event][id]" => "000818"
					"[rsa][message][id1]" => "000818"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000819
		# line in RSA:  <fld30> <fld31> <event_source> Could not find filegroup ID <fld1> in sysfilegroups for database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find filegroup ID %{fld1} in sysfilegroups for database '%{fld2}'." }
				id => "message-000819"
				add_field => {
					"[event][id]" => "000819"
					"[rsa][message][id1]" => "000819"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000820
		# line in RSA:  <fld30> <fld31> <event_source> Could not find FOREIGN KEY constraints for table '<fld1>' in database ID <fld2> although the table is flagged as having them. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find FOREIGN KEY constraints for table '%{fld1}' in database ID %{fld2} although the table is flagged as having them." }
				id => "message-000820"
				add_field => {
					"[event][id]" => "000820"
					"[rsa][message][id1]" => "000820"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000821
		# line in RSA:  <fld30> <fld31> <event_source> Could not find full-text index for database ID <fld1>, table ID <fld2>. Use sp_fulltext_table to deactivate then activate this index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find full-text index for database ID %{fld1}, table ID %{fld2}. Use sp_fulltext_table to deactivate then activate this index." }
				id => "message-000821"
				add_field => {
					"[event][id]" => "000821"
					"[rsa][message][id1]" => "000821"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000822
		# line in RSA:  <fld30> <fld31> <event_source> Could not find new constraint ID <fld1> in sysconstraints, database ID <fld2>, at compile time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find new constraint ID %{fld1} in sysconstraints, database ID %{fld2}, at compile time." }
				id => "message-000822"
				add_field => {
					"[event][id]" => "000822"
					"[rsa][message][id1]" => "000822"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000823
		# line in RSA:  <fld30> <fld31> <event_source> Could not find package '<fld1>' in msdb at server '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find package '%{fld1}' in msdb at server '%{fld2}'." }
				id => "message-000823"
				add_field => {
					"[event][id]" => "000823"
					"[rsa][message][id1]" => "000823"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000824
		# line in RSA:  <fld30> <fld31> <event_source> Could not find prepared statement with handle <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find prepared statement with handle %{fld1}." }
				id => "message-000824"
				add_field => {
					"[event][id]" => "000824"
					"[rsa][message][id1]" => "000824"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000825
		# line in RSA:  <fld30> <fld31> <event_source> Could not find row in sysconstraints for constraint ID <fld1> in database ID <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find row in sysconstraints for constraint ID %{fld1} in database ID %{fld2}." }
				id => "message-000825"
				add_field => {
					"[event][id]" => "000825"
					"[rsa][message][id1]" => "000825"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000826
		# line in RSA:  <fld30> <fld31> <event_source> Could not find row in sysdatabases for database ID <fld1> at checkpoint time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find row in sysdatabases for database ID %{fld1} at checkpoint time." }
				id => "message-000826"
				add_field => {
					"[event][id]" => "000826"
					"[rsa][message][id1]" => "000826"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000827
		# line in RSA:  <fld30> <fld31> <event_source> Could not find row in sysindexes for clustered index on system catalog <fld1> in database ID <fld2>. This index should exist in all databases. Run DBCC CHECKTABLE on sysindexes in the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find row in sysindexes for clustered index on system catalog %{fld1} in database ID %{fld2}. This index should exist in all databases. Run DBCC CHECKTABLE on sysindexes in the database." }
				id => "message-000827"
				add_field => {
					"[event][id]" => "000827"
					"[rsa][message][id1]" => "000827"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000828
		# line in RSA:  <fld30> <fld31> <event_source> Could not find row in sysindexes for database ID <fld1>, object ID <fld2>, index ID <fld3>. Run DBCC CHECKTABLE on sysindexes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find row in sysindexes for database ID %{fld1}, object ID %{fld2}, index ID %{fld3}. Run DBCC CHECKTABLE on sysindexes." }
				id => "message-000828"
				add_field => {
					"[event][id]" => "000828"
					"[rsa][message][id1]" => "000828"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000829
		# line in RSA:  <fld30> <fld31> <event_source> Could not find row in sysindexes with index ID <fld1> for table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find row in sysindexes with index ID %{fld1} for table '%{fld2}'." }
				id => "message-000829"
				add_field => {
					"[event][id]" => "000829"
					"[rsa][message][id1]" => "000829"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000830
		# line in RSA:  <fld30> <fld31> <event_source> Could not find row in sysobjects for object ID <fld1> in database '<fld2>'. Run DBCC CHECKTABLE on sysobjects. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find row in sysobjects for object ID %{fld1} in database '%{fld2}'. Run DBCC CHECKTABLE on sysobjects." }
				id => "message-000830"
				add_field => {
					"[event][id]" => "000830"
					"[rsa][message][id1]" => "000830"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000831
		# line in RSA:  <fld30> <fld31> <event_source> Could not find server '<fld1>' in sysservers. Execute sp_addlinkedserver to add the server to sysservers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find server '%{fld1}' in sysservers. Execute sp_addlinkedserver to add the server to sysservers." }
				id => "message-000831"
				add_field => {
					"[event][id]" => "000831"
					"[rsa][message][id1]" => "000831"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000832
		# line in RSA:  <fld30> <fld31> <event_source> Could not find stored procedure '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find stored procedure '%{fld1}'." }
				id => "message-000832"
				add_field => {
					"[event][id]" => "000832"
					"[rsa][message][id1]" => "000832"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000834
		# line in RSA:  <fld30> <fld31> <event_source> Could not find table <fld1>. Will try to resolve this table name later. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find table %{fld1}. Will try to resolve this table name later." }
				id => "message-000834"
				add_field => {
					"[event][id]" => "000834"
					"[rsa][message][id1]" => "000834"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000835
		# line in RSA:  <fld30> <fld31> <event_source> Could not find the 'Sync' subsystem with the task ID <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find the 'Sync' subsystem with the task ID %{fld1}." }
				id => "message-000835"
				add_field => {
					"[event][id]" => "000835"
					"[rsa][message][id1]" => "000835"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000836
		# line in RSA:  <fld30> <fld31> <event_source> Could not find the clustered index entry for page <fld1>, object ID <fld2>, status <fld32>. Index page <fld3>, in database '<fld4>', was searched for this entry. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find the clustered index entry for page %{fld1}, object ID %{fld2}, status %{fld32}. Index page %{fld3}, in database '%{fld4}', was searched for this entry." }
				id => "message-000836"
				add_field => {
					"[event][id]" => "000836"
					"[rsa][message][id1]" => "000836"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000837
		# line in RSA:  <fld30> <fld31> <event_source> Could not find the Distributor or the distribution database for the local server. The Distributor may not be installed, or the local server may not be configured as a Publisher at the Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find the Distributor or the distribution database for the local server. The Distributor may not be installed, or the local server may not be configured as a Publisher at the Distributor." }
				id => "message-000837"
				add_field => {
					"[event][id]" => "000837"
					"[rsa][message][id1]" => "000837"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000838
		# line in RSA:  <fld30> <fld31> <event_source> Could not find the dynamic snapshot job with a '<fld1>' of '<fld2>' for the specified publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find the dynamic snapshot job with a '%{fld1}' of '%{fld2}' for the specified publication." }
				id => "message-000838"
				add_field => {
					"[event][id]" => "000838"
					"[rsa][message][id1]" => "000838"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000839
		# line in RSA:  <fld30> <fld31> <event_source> Could not find the index entry for RID '<fld1>' in index page <fld2>, index ID <fld3>, database '<fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find the index entry for RID '%{fld1}' in index page %{fld2}, index ID %{fld3}, database '%{fld4}'." }
				id => "message-000839"
				add_field => {
					"[event][id]" => "000839"
					"[rsa][message][id1]" => "000839"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000840
		# line in RSA:  <fld30> <fld31> <event_source> Could not find the Snapshot Agent command line for the specified publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find the Snapshot Agent command line for the specified publication." }
				id => "message-000840"
				add_field => {
					"[event][id]" => "000840"
					"[rsa][message][id1]" => "000840"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000841
		# line in RSA:  <fld30> <fld31> <event_source> Could not find the Snapshot Agent ID for the specified publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not find the Snapshot Agent ID for the specified publication." }
				id => "message-000841"
				add_field => {
					"[event][id]" => "000841"
					"[rsa][message][id1]" => "000841"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000842
		# line in RSA:  <fld30> <fld31> <event_source> Could not free up descriptor in rel_desclosed() system function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not free up descriptor in rel_desclosed() system function." }
				id => "message-000842"
				add_field => {
					"[event][id]" => "000842"
					"[rsa][message][id1]" => "000842"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000843
		# line in RSA:  <fld30> <fld31> <event_source> Could not generate asynchronous keyset. The cursor has been deallocated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not generate asynchronous keyset. The cursor has been deallocated." }
				id => "message-000843"
				add_field => {
					"[event][id]" => "000843"
					"[rsa][message][id1]" => "000843"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000844
		# line in RSA:  <fld30> <fld31> <event_source> Could not generate nickname for '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not generate nickname for '%{fld1}'." }
				id => "message-000844"
				add_field => {
					"[event][id]" => "000844"
					"[rsa][message][id1]" => "000844"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000845
		# line in RSA:  <fld30> <fld31> <event_source> Could not get an exclusive lock on the database '<fld1>'. Make sure that no other users are currently using this database, and rerun the CHECKPOINT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get an exclusive lock on the database '%{fld1}'. Make sure that no other users are currently using this database, and rerun the CHECKPOINT statement." }
				id => "message-000845"
				add_field => {
					"[event][id]" => "000845"
					"[rsa][message][id1]" => "000845"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000846
		# line in RSA:  <fld30> <fld31> <event_source> Could not get exclusive use of <fld1>_MSG '<fld2>' to perform the requested operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get exclusive use of %{fld1}_MSG '%{fld2}' to perform the requested operation." }
				id => "message-000846"
				add_field => {
					"[event][id]" => "000846"
					"[rsa][message][id1]" => "000846"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000847
		# line in RSA:  <fld30> <fld31> <event_source> Could not get license information correctly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get license information correctly." }
				id => "message-000847"
				add_field => {
					"[event][id]" => "000847"
					"[rsa][message][id1]" => "000847"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000848
		# line in RSA:  <fld30> <fld31> <event_source> Could not get replication information for table <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get replication information for table %{fld1}." }
				id => "message-000848"
				add_field => {
					"[event][id]" => "000848"
					"[rsa][message][id1]" => "000848"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000849
		# line in RSA:  <fld30> <fld31> <event_source> Could not get the column information from the OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get the column information from the OLE DB provider '%{fld1}'." }
				id => "message-000849"
				add_field => {
					"[event][id]" => "000849"
					"[rsa][message][id1]" => "000849"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000850
		# line in RSA:  <fld30> <fld31> <event_source> Could not get the current row value of column '<fld1>.<fld2>' from the OLE DB provider '<fld3>'. <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get the current row value of column '%{fld1}.%{fld2}' from the OLE DB provider '%{fld3}'. %{fld4}" }
				id => "message-000850"
				add_field => {
					"[event][id]" => "000850"
					"[rsa][message][id1]" => "000850"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000851
		# line in RSA:  <fld30> <fld31> <event_source> Could not get the data of the row from the OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get the data of the row from the OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000851"
				add_field => {
					"[event][id]" => "000851"
					"[rsa][message][id1]" => "000851"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000852
		# line in RSA:  <fld30> <fld31> <event_source> Could not get the length of a storage object from the OLE DB provider '<fld1>' for table '<fld2>', column '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get the length of a storage object from the OLE DB provider '%{fld1}' for table '%{fld2}', column '%{fld3}'." }
				id => "message-000852"
				add_field => {
					"[event][id]" => "000852"
					"[rsa][message][id1]" => "000852"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000853
		# line in RSA:  <fld30> <fld31> <event_source> Could not get version information correctly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not get version information correctly." }
				id => "message-000853"
				add_field => {
					"[event][id]" => "000853"
					"[rsa][message][id1]" => "000853"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000854
		# line in RSA:  <fld30> <fld31> <event_source> Could not grant login access to '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not grant login access to '%{fld1}'." }
				id => "message-000854"
				add_field => {
					"[event][id]" => "000854"
					"[rsa][message][id1]" => "000854"
					"[event][categoryid]" => "1501000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000855
		# line in RSA:  <fld30> <fld31> <event_source> Could not grant replication login permission to '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not grant replication login permission to '%{fld1}'." }
				id => "message-000855"
				add_field => {
					"[event][id]" => "000855"
					"[rsa][message][id1]" => "000855"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000856
		# line in RSA:  <fld30> <fld31> <event_source> Could not identify the Publisher '<fld1>' at the Distributor '<fld2>'. Make sure that '<fld3>' is registered in the sysservers table at the Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not identify the Publisher '%{fld1}' at the Distributor '%{fld2}'. Make sure that '%{fld3}' is registered in the sysservers table at the Distributor." }
				id => "message-000856"
				add_field => {
					"[event][id]" => "000856"
					"[rsa][message][id1]" => "000856"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000857
		# line in RSA:  <fld30> <fld31> <event_source> Could not import table '<fld1>'. Error <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not import table '%{fld1}'. Error %{fld2}." }
				id => "message-000857"
				add_field => {
					"[event][id]" => "000857"
					"[rsa][message][id1]" => "000857"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000858
		# line in RSA:  <fld30> <fld31> <event_source> Could not initialize data source object of OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not initialize data source object of OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000858"
				add_field => {
					"[event][id]" => "000858"
					"[rsa][message][id1]" => "000858"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000859
		# line in RSA:  <fld30> <fld31> <event_source> Could not insert a backup or restore history/detail record in the msdb database. This may indicate a problem with the msdb database. The backup/restore operation was still successful. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not insert a backup or restore history/detail record in the msdb database. This may indicate a problem with the msdb database. The backup/restore operation was still successful." }
				id => "message-000859"
				add_field => {
					"[event][id]" => "000859"
					"[rsa][message][id1]" => "000859"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000860
		# line in RSA:  <fld30> <fld31> <event_source> Could not insert a row larger than the page size into a hash table. Resubmit the query with the ROBUST PLAN hint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not insert a row larger than the page size into a hash table. Resubmit the query with the ROBUST PLAN hint." }
				id => "message-000860"
				add_field => {
					"[event][id]" => "000860"
					"[rsa][message][id1]" => "000860"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000861
		# line in RSA:  <fld30> <fld31> <event_source> Could not insert into sysarticleupdates using sp_articlecolumn. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not insert into sysarticleupdates using sp_articlecolumn." }
				id => "message-000861"
				add_field => {
					"[event][id]" => "000861"
					"[rsa][message][id1]" => "000861"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000862
		# line in RSA:  <fld30> <fld31> <event_source> Could not insert into table <fld1> because row length <fld2> is less than the minimum length <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not insert into table %{fld1} because row length %{fld2} is less than the minimum length %{fld3}." }
				id => "message-000862"
				add_field => {
					"[event][id]" => "000862"
					"[rsa][message][id1]" => "000862"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000863
		# line in RSA:  <fld30> <fld31> <event_source> Could not load Net-Library '<fld1>' version '<fld2>'. Need Net-Library version '<fld3>' or greater. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not load Net-Library '%{fld1}' version '%{fld2}'. Need Net-Library version '%{fld3}' or greater." }
				id => "message-000863"
				add_field => {
					"[event][id]" => "000863"
					"[rsa][message][id1]" => "000863"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000864
		# line in RSA:  <fld30> <fld31> <event_source> Could not load Net-Library '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not load Net-Library '%{fld1}'." }
				id => "message-000864"
				add_field => {
					"[event][id]" => "000864"
					"[rsa][message][id1]" => "000864"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000865
		# line in RSA:  <fld30> <fld31> <event_source> Could not load startup handler DLL '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not load startup handler DLL '%{fld1}'." }
				id => "message-000865"
				add_field => {
					"[event][id]" => "000865"
					"[rsa][message][id1]" => "000865"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000866
		# line in RSA:  <fld30> <fld31> <event_source> Could not load startup handler function '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not load startup handler function '%{fld1}'." }
				id => "message-000866"
				add_field => {
					"[event][id]" => "000866"
					"[rsa][message][id1]" => "000866"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000867
		# line in RSA:  <fld30> <fld31> <event_source> Could not load sysprocedures entries for constraint ID <fld1> in database ID <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not load sysprocedures entries for constraint ID %{fld1} in database ID %{fld2}." }
				id => "message-000867"
				add_field => {
					"[event][id]" => "000867"
					"[rsa][message][id1]" => "000867"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000868
		# line in RSA:  <fld30> <fld31> <event_source> Could not locate entry in sysdatabases for database '<fld1>'. No entry found with that name. Make sure that the name is entered correctly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not locate entry in sysdatabases for database '%{fld1}'. No entry found with that name. Make sure that the name is entered correctly." }
				id => "message-000868"
				add_field => {
					"[event][id]" => "000868"
					"[rsa][message][id1]" => "000868"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000869
		# line in RSA:  <fld30> <fld31> <event_source> Could not locate entry in sysdatabases for database '<fld1>'. No entry found with that name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not locate entry in sysdatabases for database '%{fld1}'. No entry found with that name." }
				id => "message-000869"
				add_field => {
					"[event][id]" => "000869"
					"[rsa][message][id1]" => "000869"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000870
		# line in RSA:  <fld30> <fld31> <event_source> Could not locate file '<fld1>' in sysfiles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not locate file '%{fld1}' in sysfiles." }
				id => "message-000870"
				add_field => {
					"[event][id]" => "000870"
					"[rsa][message][id1]" => "000870"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000871
		# line in RSA:  <fld30> <fld31> <event_source> Could not locate registry entry for OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not locate registry entry for OLE DB provider '%{fld1}'." }
				id => "message-000871"
				add_field => {
					"[event][id]" => "000871"
					"[rsa][message][id1]" => "000871"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000872
		# line in RSA:  <fld30> <fld31> <event_source> Could not locate row in sysobjects for system catalog '<fld1>' in database '<fld2>'. This system catalog should exist in all databases. Run DBCC CHECKTABLE on sysobjects in this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not locate row in sysobjects for system catalog '%{fld1}' in database '%{fld2}'. This system catalog should exist in all databases. Run DBCC CHECKTABLE on sysobjects in this database." }
				id => "message-000872"
				add_field => {
					"[event][id]" => "000872"
					"[rsa][message][id1]" => "000872"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000873
		# line in RSA:  <fld30> <fld31> <event_source> Could not locate statistics '<fld1>' in the system catalogs. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not locate statistics '%{fld1}' in the system catalogs." }
				id => "message-000873"
				add_field => {
					"[event][id]" => "000873"
					"[rsa][message][id1]" => "000873"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000874
		# line in RSA:  <fld30> <fld31> <event_source> Could not locate statistics for column '<fld1>' in the system catalogs. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not locate statistics for column '%{fld1}' in the system catalogs." }
				id => "message-000874"
				add_field => {
					"[event][id]" => "000874"
					"[rsa][message][id1]" => "000874"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000875
		# line in RSA:  <fld30> <fld31> <event_source> Could not locate text information records for column <fld1> during command construction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not locate text information records for column %{fld1} during command construction." }
				id => "message-000875"
				add_field => {
					"[event][id]" => "000875"
					"[rsa][message][id1]" => "000875"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000876
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain a required interface from OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain a required interface from OLE DB provider '%{fld1}'." }
				id => "message-000876"
				add_field => {
					"[event][id]" => "000876"
					"[rsa][message][id1]" => "000876"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000877
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain an interface required for text, ntext, or image access. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain an interface required for text, ntext, or image access." }
				id => "message-000877"
				add_field => {
					"[event][id]" => "000877"
					"[rsa][message][id1]" => "000877"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000878
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain columns rowset from OLE DB provider '<fld1>'. The provider supports the interface, but returns a failure code when used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain columns rowset from OLE DB provider '%{fld1}'. The provider supports the interface, but returns a failure code when used." }
				id => "message-000878"
				add_field => {
					"[event][id]" => "000878"
					"[rsa][message][id1]" => "000878"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000879
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain exclusive lock on database '<fld1>'. Retry the operation later. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain exclusive lock on database '%{fld1}'. Retry the operation later." }
				id => "message-000879"
				add_field => {
					"[event][id]" => "000879"
					"[rsa][message][id1]" => "000879"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000880
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain information about Windows NT group/user '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain information about Windows NT group/user '%{fld1}'." }
				id => "message-000880"
				add_field => {
					"[event][id]" => "000880"
					"[rsa][message][id1]" => "000880"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000881
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain optional metadata columns of columns rowset from the OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain optional metadata columns of columns rowset from the OLE DB provider '%{fld1}'." }
				id => "message-000881"
				add_field => {
					"[event][id]" => "000881"
					"[rsa][message][id1]" => "000881"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000882
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain the column ID for the specified column. Schema replication failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain the column ID for the specified column. Schema replication failed." }
				id => "message-000882"
				add_field => {
					"[event][id]" => "000882"
					"[rsa][message][id1]" => "000882"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000883
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain the data source of a session from OLE DB provider '<fld1>'. This action must be supported by the provider. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain the data source of a session from OLE DB provider '%{fld1}'. This action must be supported by the provider." }
				id => "message-000883"
				add_field => {
					"[event][id]" => "000883"
					"[rsa][message][id1]" => "000883"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000884
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain the schema options for OLE DB provider '<fld1>'. The provider supports the interface, but returns a failure code when it is used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain the schema options for OLE DB provider '%{fld1}'. The provider supports the interface, but returns a failure code when it is used." }
				id => "message-000884"
				add_field => {
					"[event][id]" => "000884"
					"[rsa][message][id1]" => "000884"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000885
		# line in RSA:  <fld30> <fld31> <event_source> Could not obtain the schema rowset for OLE DB provider '<fld1>'. The provider supports the interface, but returns a failure code when it is used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not obtain the schema rowset for OLE DB provider '%{fld1}'. The provider supports the interface, but returns a failure code when it is used." }
				id => "message-000885"
				add_field => {
					"[event][id]" => "000885"
					"[rsa][message][id1]" => "000885"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000886
		# line in RSA:  <fld30> <fld31> <event_source> Could not open database <fld1>. Replication settings and system objects could not be upgraded. If the database is used for replication, run sp_vupgrade_replication in the [master] database when the database is available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open database %{fld1}. Replication settings and system objects could not be upgraded. If the database is used for replication, run sp_vupgrade_replication in the [master] database when the database is available." }
				id => "message-000886"
				add_field => {
					"[event][id]" => "000886"
					"[rsa][message][id1]" => "000886"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000888
		# line in RSA:  <fld30> <fld31> <event_source> Could not open distribution database <fld1> because it is offline or being recovered. Replication settings and system objects could not be upgraded. Be sure this database is available and run sp_vupgrade_replication again. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open distribution database %{fld1} because it is offline or being recovered. Replication settings and system objects could not be upgraded. Be sure this database is available and run sp_vupgrade_replication again." }
				id => "message-000888"
				add_field => {
					"[event][id]" => "000888"
					"[rsa][message][id1]" => "000888"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000889
		# line in RSA:  <fld30> <fld31> <event_source> Could not open FCB for invalid file ID <fld1> in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open FCB for invalid file ID %{fld1} in database '%{fld2}'." }
				id => "message-000889"
				add_field => {
					"[event][id]" => "000889"
					"[rsa][message][id1]" => "000889"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000890
		# line in RSA:  <fld30> <fld31> <event_source> Could not open index '<fld1>' on table '<fld2>' from OLE DB provider '<fld3>'. <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open index '%{fld1}' on table '%{fld2}' from OLE DB provider '%{fld3}'. %{fld4}" }
				id => "message-000890"
				add_field => {
					"[event][id]" => "000890"
					"[rsa][message][id1]" => "000890"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000891
		# line in RSA:  <fld30> <fld31> <event_source> Could not open new database '<fld1>'. CREATE DATABASE is aborted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open new database '%{fld1}'. CREATE DATABASE is aborted." }
				id => "message-000891"
				add_field => {
					"[event][id]" => "000891"
					"[rsa][message][id1]" => "000891"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000892
		# line in RSA:  <fld30> <fld31> <event_source> Could not open referenced table ID <fld1> in database ID <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open referenced table ID %{fld1} in database ID %{fld2}." }
				id => "message-000892"
				add_field => {
					"[event][id]" => "000892"
					"[rsa][message][id1]" => "000892"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000893
		# line in RSA:  <fld30> <fld31> <event_source> Could not open table '<fld1>' from OLE DB provider '<fld2>'. <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open table '%{fld1}' from OLE DB provider '%{fld2}'. %{fld3}" }
				id => "message-000893"
				add_field => {
					"[event][id]" => "000893"
					"[rsa][message][id1]" => "000893"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000894
		# line in RSA:  <fld30> <fld31> <event_source> Could not open table <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open table %{fld1}." }
				id => "message-000894"
				add_field => {
					"[event][id]" => "000894"
					"[rsa][message][id1]" => "000894"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000895
		# line in RSA:  <fld30> <fld31> <event_source> Could not open tempdb. Cannot continue. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open tempdb. Cannot continue." }
				id => "message-000895"
				add_field => {
					"[event][id]" => "000895"
					"[rsa][message][id1]" => "000895"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000896
		# line in RSA:  <fld30> <fld31> <event_source> Could not open the cursor because one or more of its tables have gone out of scope. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not open the cursor because one or more of its tables have gone out of scope." }
				id => "message-000896"
				add_field => {
					"[event][id]" => "000896"
					"[rsa][message][id1]" => "000896"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000897
		# line in RSA:  <fld30> <fld31> <event_source> Could not perform a Windows NT authenticated login because delegation is not available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not perform a Windows NT authenticated login because delegation is not available." }
				id => "message-000897"
				add_field => {
					"[event][id]" => "000897"
					"[rsa][message][id1]" => "000897"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000898
		# line in RSA:  <fld30> <fld31> <event_source> Could not perform CREATE VIEW because WITH <fld1> was specified and the view contains set operators. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not perform CREATE VIEW because WITH %{fld1} was specified and the view contains set operators." }
				id => "message-000898"
				add_field => {
					"[event][id]" => "000898"
					"[rsa][message][id1]" => "000898"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000899
		# line in RSA:  <fld30> <fld31> <event_source> Could not perform CREATE VIEW because WITH <fld1> was specified and the view is not updatable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not perform CREATE VIEW because WITH %{fld1} was specified and the view is not updatable." }
				id => "message-000899"
				add_field => {
					"[event][id]" => "000899"
					"[rsa][message][id1]" => "000899"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000900
		# line in RSA:  <fld30> <fld31> <event_source> Could not perform the requested operation because the minimum query memory is not available. Decrease the configured value for the 'min memory per query' server configuration option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not perform the requested operation because the minimum query memory is not available. Decrease the configured value for the 'min memory per query' server configuration option." }
				id => "message-000900"
				add_field => {
					"[event][id]" => "000900"
					"[rsa][message][id1]" => "000900"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000901
		# line in RSA:  <fld30> <fld31> <event_source> Could not process object '<fld1>'. The OLE DB provider '<fld2>' indicates that the object has no columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not process object '%{fld1}'. The OLE DB provider '%{fld2}' indicates that the object has no columns." }
				id => "message-000901"
				add_field => {
					"[event][id]" => "000901"
					"[rsa][message][id1]" => "000901"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000902
		# line in RSA:  <fld30> <fld31> <event_source> Could not propagate the change on publication '<fld1>' to Active Directory. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not propagate the change on publication '%{fld1}' to Active Directory." }
				id => "message-000902"
				add_field => {
					"[event][id]" => "000902"
					"[rsa][message][id1]" => "000902"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000903
		# line in RSA:  <fld30> <fld31> <event_source> Could not read a storage object from the OLE DB provider '<fld1>', for table '<fld2>', column '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not read a storage object from the OLE DB provider '%{fld1}', for table '%{fld2}', column '%{fld3}'." }
				id => "message-000903"
				add_field => {
					"[event][id]" => "000903"
					"[rsa][message][id1]" => "000903"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000904
		# line in RSA:  <fld30> <fld31> <event_source> Could not read allocation page <fld1> because either the object ID (<fld2>) is not correct, or the page ID (<fld3>) is not correct. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not read allocation page %{fld1} because either the object ID (%{fld2}) is not correct, or the page ID (%{fld3}) is not correct." }
				id => "message-000904"
				add_field => {
					"[event][id]" => "000904"
					"[rsa][message][id1]" => "000904"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000905
		# line in RSA:  <fld30> <fld31> <event_source> Could not read and latch page <fld1> with latch type <fld2>. <fld3> failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not read and latch page %{fld1} with latch type %{fld2}. %{fld3} failed." }
				id => "message-000905"
				add_field => {
					"[event][id]" => "000905"
					"[rsa][message][id1]" => "000905"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000906
		# line in RSA:  <fld30> <fld31> <event_source> Could not recover database '<fld1>' (database ID <fld2>) due to unresolved transaction outcomes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not recover database '%{fld1}' (database ID %{fld2}) due to unresolved transaction outcomes." }
				id => "message-000906"
				add_field => {
					"[event][id]" => "000906"
					"[rsa][message][id1]" => "000906"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000907
		# line in RSA:  <fld30> <fld31> <event_source> Could not redo log record <fld1>_LSN, for transaction ID <fld2>_XID, on page <fld3>, database '<fld4>' (<fld5>). Page: LSN = <fld6>_LSN, type = <fld7>. Log: OpCode = <fld8>, context <fld9>, PrevPageLSN: <fld10>_LSN. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not redo log record %{fld1}_LSN, for transaction ID %{fld2}_XID, on page %{fld3}, database '%{fld4}' (%{fld5}). Page: LSN = %{fld6}_LSN, type = %{fld7}. Log: OpCode = %{fld8}, context %{fld9}, PrevPageLSN: %{fld10}_LSN." }
				id => "message-000907"
				add_field => {
					"[event][id]" => "000907"
					"[rsa][message][id1]" => "000907"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000908
		# line in RSA:  <fld30> <fld31> <event_source> Could not register Service Control Handler. Operating system error = <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not register Service Control Handler. Operating system error = %{fld1}." }
				id => "message-000908"
				add_field => {
					"[event][id]" => "000908"
					"[rsa][message][id1]" => "000908"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000909
		# line in RSA:  <fld30> <fld31> <event_source> Could not relay results of procedure '<fld1>' from remote server '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not relay results of procedure '%{fld1}' from remote server '%{fld2}'." }
				id => "message-000909"
				add_field => {
					"[event][id]" => "000909"
					"[rsa][message][id1]" => "000909"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000910
		# line in RSA:  <fld30> <fld31> <event_source> Could not remove directory '<fld1>'. Check the security context of xp_cmdshell and close other processes that may be accessing the directory. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not remove directory '%{fld1}'. Check the security context of xp_cmdshell and close other processes that may be accessing the directory." }
				id => "message-000910"
				add_field => {
					"[event][id]" => "000910"
					"[rsa][message][id1]" => "000910"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000911
		# line in RSA:  <fld30> <fld31> <event_source> Could not remove publication '<fld1>' from Active Directory. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not remove publication '%{fld1}' from Active Directory." }
				id => "message-000911"
				add_field => {
					"[event][id]" => "000911"
					"[rsa][message][id1]" => "000911"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000912
		# line in RSA:  <fld30> <fld31> <event_source> Could not remove the monitor as there are still databases involved in log shipping. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not remove the monitor as there are still databases involved in log shipping." }
				id => "message-000912"
				add_field => {
					"[event][id]" => "000912"
					"[rsa][message][id1]" => "000912"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000913
		# line in RSA:  <fld30> <fld31> <event_source> Could not repair this error.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not repair this error." }
				id => "message-000913"
				add_field => {
					"[event][id]" => "000913"
					"[rsa][message][id1]" => "000913"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000914
		# line in RSA:  <fld30> <fld31> <event_source> Could not rescan the result set from OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not rescan the result set from OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-000914"
				add_field => {
					"[event][id]" => "000914"
					"[rsa][message][id1]" => "000914"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000915
		# line in RSA:  <fld30> <fld31> <event_source> Could not resolve table name for object ID <fld1>, database ID <fld2>, when compiling foreign key. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not resolve table name for object ID %{fld1}, database ID %{fld2}, when compiling foreign key." }
				id => "message-000915"
				add_field => {
					"[event][id]" => "000915"
					"[rsa][message][id1]" => "000915"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000916
		# line in RSA:  <fld30> <fld31> <event_source> Could not resolve the referenced column name in table ID <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not resolve the referenced column name in table ID %{fld1}." }
				id => "message-000916"
				add_field => {
					"[event][id]" => "000916"
					"[rsa][message][id1]" => "000916"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000917
		# line in RSA:  <fld30> <fld31> <event_source> Could not resolve the referencing column name in table ID <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not resolve the referencing column name in table ID %{fld1}." }
				id => "message-000917"
				add_field => {
					"[event][id]" => "000917"
					"[rsa][message][id1]" => "000917"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000918
		# line in RSA:  <fld30> <fld31> <event_source> Could not restart database '<fld1>'. Reverting back to old status. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not restart database '%{fld1}'. Reverting back to old status." }
				id => "message-000918"
				add_field => {
					"[event][id]" => "000918"
					"[rsa][message][id1]" => "000918"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000919
		# line in RSA:  <fld30> <fld31> <event_source> Could not resume interrupted backup or restore operation. See the SQL Server error log for more information. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not resume interrupted backup or restore operation. See the SQL Server error log for more information." }
				id => "message-000919"
				add_field => {
					"[event][id]" => "000919"
					"[rsa][message][id1]" => "000919"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000920
		# line in RSA:  <fld30> <fld31> <event_source> Could not retrieve row from page by RID because logical page <fld1> is not a data page. <fld2>_RID. <fld3>_PAGE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not retrieve row from page by RID because logical page %{fld1} is not a data page. %{fld2}_RID. %{fld3}_PAGE." }
				id => "message-000920"
				add_field => {
					"[event][id]" => "000920"
					"[rsa][message][id1]" => "000920"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000921
		# line in RSA:  <fld30> <fld31> <event_source> Could not retrieve row from page by RID because the requested RID has a higher number than the last RID on the page. <fld1>_RID.<fld2>_PAGE, DBID <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not retrieve row from page by RID because the requested RID has a higher number than the last RID on the page. %{fld1}_RID.%{fld2}_PAGE, DBID %{fld3}." }
				id => "message-000921"
				add_field => {
					"[event][id]" => "000921"
					"[rsa][message][id1]" => "000921"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000922
		# line in RSA:  <fld30> <fld31> <event_source> Could not revoke login access from '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not revoke login access from '%{fld1}'." }
				id => "message-000922"
				add_field => {
					"[event][id]" => "000922"
					"[rsa][message][id1]" => "000922"
					"[event][categoryid]" => "1501000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000923
		# line in RSA:  <fld30> <fld31> <event_source> Could not run BEGIN TRANSACTION in database '<fld1>' because the database is in bypass recovery mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not run BEGIN TRANSACTION in database '%{fld1}' because the database is in bypass recovery mode." }
				id => "message-000923"
				add_field => {
					"[event][id]" => "000923"
					"[rsa][message][id1]" => "000923"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000924
		# line in RSA:  <fld30> <fld31> <event_source> Could not run BEGIN TRANSACTION in database '<fld1>' because the database is read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not run BEGIN TRANSACTION in database '%{fld1}' because the database is read-only." }
				id => "message-000924"
				add_field => {
					"[event][id]" => "000924"
					"[rsa][message][id1]" => "000924"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000925
		# line in RSA:  <fld30> <fld31> <event_source> Could not run DISK statement. You must be in the master database to run this statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not run DISK statement. You must be in the master database to run this statement." }
				id => "message-000925"
				add_field => {
					"[event][id]" => "000925"
					"[rsa][message][id1]" => "000925"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000926
		# line in RSA:  <fld30> <fld31> <event_source> Could not set any property values. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not set any property values." }
				id => "message-000926"
				add_field => {
					"[event][id]" => "000926"
					"[rsa][message][id1]" => "000926"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000927
		# line in RSA:  <fld30> <fld31> <event_source> Could not set database '<fld1>' <fld2> read-only user mode because you could not exclusively lock the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not set database '%{fld1}' %{fld2} read-only user mode because you could not exclusively lock the database." }
				id => "message-000927"
				add_field => {
					"[event][id]" => "000927"
					"[rsa][message][id1]" => "000927"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000928
		# line in RSA:  <fld30> <fld31> <event_source> Could not set single user mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not set single user mode." }
				id => "message-000928"
				add_field => {
					"[event][id]" => "000928"
					"[rsa][message][id1]" => "000928"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000929
		# line in RSA:  <fld30> <fld31> <event_source> Could not set the file size to the desired amount. The operating system file size limit may have been reached. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not set the file size to the desired amount. The operating system file size limit may have been reached." }
				id => "message-000929"
				add_field => {
					"[event][id]" => "000929"
					"[rsa][message][id1]" => "000929"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000930
		# line in RSA:  <fld30> <fld31> <event_source> Could not set the initialization properties for the OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not set the initialization properties for the OLE DB provider '%{fld1}'." }
				id => "message-000930"
				add_field => {
					"[event][id]" => "000930"
					"[rsa][message][id1]" => "000930"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000931
		# line in RSA:  <fld30> <fld31> <event_source> Could not set the session properties for the OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not set the session properties for the OLE DB provider '%{fld1}'." }
				id => "message-000931"
				add_field => {
					"[event][id]" => "000931"
					"[rsa][message][id1]" => "000931"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000932
		# line in RSA:  <fld30> <fld31> <event_source> Could not set up Net-Library '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not set up Net-Library '%{fld1}'." }
				id => "message-000932"
				add_field => {
					"[event][id]" => "000932"
					"[rsa][message][id1]" => "000932"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000933
		# line in RSA:  <fld30> <fld31> <event_source> Could not set up parameter for remote server '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not set up parameter for remote server '%{fld1}'." }
				id => "message-000933"
				add_field => {
					"[event][id]" => "000933"
					"[rsa][message][id1]" => "000933"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000934
		# line in RSA:  <fld30> <fld31> <event_source> Could not start a transaction for OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not start a transaction for OLE DB provider '%{fld1}'." }
				id => "message-000934"
				add_field => {
					"[event][id]" => "000934"
					"[rsa][message][id1]" => "000934"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000935
		# line in RSA:  <fld30> <fld31> <event_source> Could not start due to invalid serial number. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not start due to invalid serial number." }
				id => "message-000935"
				add_field => {
					"[event][id]" => "000935"
					"[rsa][message][id1]" => "000935"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000936
		# line in RSA:  <fld30> <fld31> <event_source> Could not start I/O for request <fld1>_BLKIOPTR. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not start I/O for request %{fld1}_BLKIOPTR." }
				id => "message-000936"
				add_field => {
					"[event][id]" => "000936"
					"[rsa][message][id1]" => "000936"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000937
		# line in RSA:  <fld30> <fld31> <event_source> Could not start transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not start transaction." }
				id => "message-000937"
				add_field => {
					"[event][id]" => "000937"
					"[rsa][message][id1]" => "000937"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000938
		# line in RSA:  <fld30> <fld31> <event_source> Could not subscribe because non-SQL Server Subscriber '<fld1>' does not support 'sync tran' update mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not subscribe because non-SQL Server Subscriber '%{fld1}' does not support 'sync tran' update mode." }
				id => "message-000938"
				add_field => {
					"[event][id]" => "000938"
					"[rsa][message][id1]" => "000938"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000939
		# line in RSA:  <fld30> <fld31> <event_source> Could not subscribe because non-SQL Server Subscriber '<fld1>' does not support custom stored procedures. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not subscribe because non-SQL Server Subscriber '%{fld1}' does not support custom stored procedures." }
				id => "message-000939"
				add_field => {
					"[event][id]" => "000939"
					"[rsa][message][id1]" => "000939"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000940
		# line in RSA:  <fld30> <fld31> <event_source> Could not subscribe because non-SQL Server Subscriber '<fld1>' does not support parameterized statements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not subscribe because non-SQL Server Subscriber '%{fld1}' does not support parameterized statements." }
				id => "message-000940"
				add_field => {
					"[event][id]" => "000940"
					"[rsa][message][id1]" => "000940"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000941
		# line in RSA:  <fld30> <fld31> <event_source> Could not subscribe to article '<fld1>' because heterogeneous Subscriber '<fld2>' does not support the @pre_creation_cmd parameter value 'truncate'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not subscribe to article '%{fld1}' because heterogeneous Subscriber '%{fld2}' does not support the @pre_creation_cmd parameter value 'truncate'." }
				id => "message-000941"
				add_field => {
					"[event][id]" => "000941"
					"[rsa][message][id1]" => "000941"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000942
		# line in RSA:  <fld30> <fld31> <event_source> Could not subscribe to publication '<fld1>' because heterogeneous Subscriber '<fld2>' only supports the @sync_method parameter value 'bcp character' . 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not subscribe to publication '%{fld1}' because heterogeneous Subscriber '%{fld2}' only supports the @sync_method parameter value 'bcp character' ." }
				id => "message-000942"
				add_field => {
					"[event][id]" => "000942"
					"[rsa][message][id1]" => "000942"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000943
		# line in RSA:  <fld30> <fld31> <event_source> Could not truncate object '<fld1>' because it is not a table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not truncate object '%{fld1}' because it is not a table." }
				id => "message-000943"
				add_field => {
					"[event][id]" => "000943"
					"[rsa][message][id1]" => "000943"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000944
		# line in RSA:  <fld30> <fld31> <event_source> Could not truncate object '<fld1>' because it or one of its indexes resides on a READONLY filegroup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not truncate object '%{fld1}' because it or one of its indexes resides on a READONLY filegroup." }
				id => "message-000944"
				add_field => {
					"[event][id]" => "000944"
					"[rsa][message][id1]" => "000944"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000945
		# line in RSA:  <fld30> <fld31> <event_source> Could not truncate table '<fld1>' because there is not enough room in the log to record the deallocation of all the index and data pages. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not truncate table '%{fld1}' because there is not enough room in the log to record the deallocation of all the index and data pages." }
				id => "message-000945"
				add_field => {
					"[event][id]" => "000945"
					"[rsa][message][id1]" => "000945"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000946
		# line in RSA:  <fld30> <fld31> <event_source> Could not truncate table '<fld1>' because this table does not exist in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not truncate table '%{fld1}' because this table does not exist in database '%{fld2}'." }
				id => "message-000946"
				add_field => {
					"[event][id]" => "000946"
					"[rsa][message][id1]" => "000946"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000947
		# line in RSA:  <fld30> <fld31> <event_source> Could not undo log record <fld1>_LSN, for transaction ID <fld2>_XID, on page <fld3>, database '<fld4>' (database ID <fld5>). Page information: LSN = <fld6>_LSN, type = <fld7>. Log information: OpCode = <fld8>, context <fld9>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not undo log record %{fld1}_LSN, for transaction ID %{fld2}_XID, on page %{fld3}, database '%{fld4}' (database ID %{fld5}). Page information: LSN = %{fld6}_LSN, type = %{fld7}. Log information: OpCode = %{fld8}, context %{fld9}." }
				id => "message-000947"
				add_field => {
					"[event][id]" => "000947"
					"[rsa][message][id1]" => "000947"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000948
		# line in RSA:  <fld30> <fld31> <event_source> Could not unhash buffer at <fld32> with a buffer page number of <fld1> and database ID <fld2> with HASHED status set. The buffer was not found. <fld3>_PAGE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not unhash buffer at %{fld32} with a buffer page number of %{fld1} and database ID %{fld2} with HASHED status set. The buffer was not found. %{fld3}_PAGE." }
				id => "message-000948"
				add_field => {
					"[event][id]" => "000948"
					"[rsa][message][id1]" => "000948"
					"[event][categoryid]" => "1603020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000949
		# line in RSA:  <fld30> <fld31> <event_source> Could not update primary file information in sysdatabases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not update primary file information in sysdatabases." }
				id => "message-000949"
				add_field => {
					"[event][id]" => "000949"
					"[rsa][message][id1]" => "000949"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000950
		# line in RSA:  <fld30> <fld31> <event_source> Could not update sysarticles. The subscription status could not be changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not update sysarticles. The subscription status could not be changed." }
				id => "message-000950"
				add_field => {
					"[event][id]" => "000950"
					"[rsa][message][id1]" => "000950"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000951
		# line in RSA:  <fld30> <fld31> <event_source> Could not update sysobjects. The subscription status could not be changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not update sysobjects. The subscription status could not be changed." }
				id => "message-000951"
				add_field => {
					"[event][id]" => "000951"
					"[rsa][message][id1]" => "000951"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000952
		# line in RSA:  <fld30> <fld31> <event_source> Could not update the distribution database subscription table. The subscription status could not be changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not update the distribution database subscription table. The subscription status could not be changed." }
				id => "message-000952"
				add_field => {
					"[event][id]" => "000952"
					"[rsa][message][id1]" => "000952"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000953
		# line in RSA:  <fld30> <fld31> <event_source> Could not use qualified table names (schema or catalog) with OLE DB provider '<fld1>' because it does not implement required functionality. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not use qualified table names (schema or catalog) with OLE DB provider '%{fld1}' because it does not implement required functionality." }
				id => "message-000953"
				add_field => {
					"[event][id]" => "000953"
					"[rsa][message][id1]" => "000953"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000954
		# line in RSA:  <fld30> <fld31> <event_source> Could not use SQLEVN70.DLL version '<fld1>'. SQLEVN70.DLL version '<fld2>' was expected. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not use SQLEVN70.DLL version '%{fld1}'. SQLEVN70.DLL version '%{fld2}' was expected." }
				id => "message-000954"
				add_field => {
					"[event][id]" => "000954"
					"[rsa][message][id1]" => "000954"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000955
		# line in RSA:  <fld30> <fld31> <event_source> Could not use view or function '<fld1>' because of binding errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not use view or function '%{fld1}' because of binding errors." }
				id => "message-000955"
				add_field => {
					"[event][id]" => "000955"
					"[rsa][message][id1]" => "000955"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000956
		# line in RSA:  <fld30> <fld31> <event_source> Could not validate the article '<fld1>'. It is not activated.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not validate the article '%{fld1}'. It is not activated." }
				id => "message-000956"
				add_field => {
					"[event][id]" => "000956"
					"[rsa][message][id1]" => "000956"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000957
		# line in RSA:  <fld30> <fld31> <event_source> Could not write a CHECKPOINT record in database ID <fld1> because the log is out of space. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not write a CHECKPOINT record in database ID %{fld1} because the log is out of space." }
				id => "message-000957"
				add_field => {
					"[event][id]" => "000957"
					"[rsa][message][id1]" => "000957"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000958
		# line in RSA:  <fld30> <fld31> <event_source> Could not write to Net-Library '<fld1>', loginname '<fld2>', hostname '<hostname>'. Connection closed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Could not write to Net-Library '%{fld1}', loginname '%{fld2}', hostname '%{hostname}'. Connection closed." }
				id => "message-000958"
				add_field => {
					"[event][id]" => "000958"
					"[rsa][message][id1]" => "000958"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "CREATE" {
		# MESSAGE 000959
		# line in RSA:  <fld30> <fld31> <event_source> CREATE DATABASE failed. COLLATE clause cannot be used with the FOR ATTACH option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE DATABASE failed. COLLATE clause cannot be used with the FOR ATTACH option." }
				id => "message-000959"
				add_field => {
					"[event][id]" => "000959"
					"[rsa][message][id1]" => "000959"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000960
		# line in RSA:  <fld30> <fld31> <event_source> CREATE DATABASE failed. Could not allocate enough disk space for a new database on the named disks. Total space allocated must be at least <fld1> MB to accommodate a copy of the model database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE DATABASE failed. Could not allocate enough disk space for a new database on the named disks. Total space allocated must be at least %{fld1} MB to accommodate a copy of the model database." }
				id => "message-000960"
				add_field => {
					"[event][id]" => "000960"
					"[rsa][message][id1]" => "000960"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000961
		# line in RSA:  <fld30> <fld31> <event_source> CREATE DATABASE failed. Some file names listed could not be created. Check previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE DATABASE failed. Some file names listed could not be created. Check previous errors." }
				id => "message-000961"
				add_field => {
					"[event][id]" => "000961"
					"[rsa][message][id1]" => "000961"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000962
		# line in RSA:  <fld30> <fld31> <event_source> CREATE DATABASE failed. The default collation of database '<fld1>' cannot be set to '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE DATABASE failed. The default collation of database '%{fld1}' cannot be set to '%{fld2}'." }
				id => "message-000962"
				add_field => {
					"[event][id]" => "000962"
					"[rsa][message][id1]" => "000962"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000963
		# line in RSA:  <fld30> <fld31> <event_source> CREATE DATABASE permission can only be granted in the master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE DATABASE permission can only be granted in the master database." }
				id => "message-000963"
				add_field => {
					"[event][id]" => "000963"
					"[rsa][message][id1]" => "000963"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000964
		# line in RSA:  <fld30> <fld31> <event_source> CREATE FILE encountered operating system error <fld1> while attempting to open or create the physical file '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE FILE encountered operating system error %{fld1} while attempting to open or create the physical file '%{fld2}'." }
				id => "message-000964"
				add_field => {
					"[event][id]" => "000964"
					"[rsa][message][id1]" => "000964"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000965
		# line in RSA:  <fld30> <fld31> <event_source> CREATE FUNCTION failed because a column name is not specified for column <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE FUNCTION failed because a column name is not specified for column %{fld1}." }
				id => "message-000965"
				add_field => {
					"[event][id]" => "000965"
					"[rsa][message][id1]" => "000965"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000966
		# line in RSA:  <fld30> <fld31> <event_source> CREATE FUNCTION failed because column '<fld1>' in function '<fld2>' exceeds the maximum of <fld3> columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE FUNCTION failed because column '%{fld1}' in function '%{fld2}' exceeds the maximum of %{fld3} columns." }
				id => "message-000966"
				add_field => {
					"[event][id]" => "000966"
					"[rsa][message][id1]" => "000966"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000967
		# line in RSA:  <fld30> <fld31> <event_source> CREATE INDEX option '<fld1>' is no longer supported. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE INDEX option '%{fld1}' is no longer supported." }
				id => "message-000967"
				add_field => {
					"[event][id]" => "000967"
					"[rsa][message][id1]" => "000967"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000968
		# line in RSA:  <fld30> <fld31> <event_source> CREATE INDEX options <fld1> and <fld2> are mutually exclusive. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE INDEX options %{fld1} and %{fld2} are mutually exclusive." }
				id => "message-000968"
				add_field => {
					"[event][id]" => "000968"
					"[rsa][message][id1]" => "000968"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000969
		# line in RSA:  <fld30> <fld31> <event_source> CREATE INDEX terminated because a duplicate row was found. Primary key is '<fld1>_KEY'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE INDEX terminated because a duplicate row was found. Primary key is '%{fld1}_KEY'." }
				id => "message-000969"
				add_field => {
					"[event][id]" => "000969"
					"[rsa][message][id1]" => "000969"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000970
		# line in RSA:  <fld30> <fld31> <event_source> CREATE INDEX with DROP_EXISTING was aborted because a row was out of order. Most significant offending primary key is '<fld1>_KEY'. Explicitly drop and create the index instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE INDEX with DROP_EXISTING was aborted because a row was out of order. Most significant offending primary key is '%{fld1}_KEY'. Explicitly drop and create the index instead." }
				id => "message-000970"
				add_field => {
					"[event][id]" => "000970"
					"[rsa][message][id1]" => "000970"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000971
		# line in RSA:  <fld30> <fld31> <event_source> CREATE PROCEDURE contains no statements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE PROCEDURE contains no statements." }
				id => "message-000971"
				add_field => {
					"[event][id]" => "000971"
					"[rsa][message][id1]" => "000971"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000972
		# line in RSA:  <fld30> <fld31> <event_source> CREATE SCHEMA failed due to previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE SCHEMA failed due to previous errors." }
				id => "message-000972"
				add_field => {
					"[event][id]" => "000972"
					"[rsa][message][id1]" => "000972"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000973
		# line in RSA:  <fld30> <fld31> <event_source> CREATE TABLE failed because column '<fld1>' in table '<fld2>' exceeds the maximum of <fld3> columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE TABLE failed because column '%{fld1}' in table '%{fld2}' exceeds the maximum of %{fld3} columns." }
				id => "message-000973"
				add_field => {
					"[event][id]" => "000973"
					"[rsa][message][id1]" => "000973"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000974
		# line in RSA:  <fld30> <fld31> <event_source> CREATE TRIGGER contains no statements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE TRIGGER contains no statements." }
				id => "message-000974"
				add_field => {
					"[event][id]" => "000974"
					"[rsa][message][id1]" => "000974"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000975
		# line in RSA:  <fld30> <fld31> <event_source> CREATE UNIQUE INDEX terminated because a duplicate key was found for index ID <fld1>. Most significant primary key is '<fld2>_KEY'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE UNIQUE INDEX terminated because a duplicate key was found for index ID %{fld1}. Most significant primary key is '%{fld2}_KEY'." }
				id => "message-000975"
				add_field => {
					"[event][id]" => "000975"
					"[rsa][message][id1]" => "000975"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000976
		# line in RSA:  <fld30> <fld31> <event_source> CREATE VIEW failed because column '<fld1>' in view '<fld2>' exceeds the maximum of <fld3> columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE VIEW failed because column '%{fld1}' in view '%{fld2}' exceeds the maximum of %{fld3} columns." }
				id => "message-000976"
				add_field => {
					"[event][id]" => "000976"
					"[rsa][message][id1]" => "000976"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1058
	# line in RSA:  <fld30> <fld31> <event_source> Create View or Function failed because no column name was specified for column <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId1058" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Create View or Function failed because no column name was specified for column %{fld1}." }
			id => "msgParserId1058"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1059
	# line in RSA:  <fld30> <fld31> <event_source> CREATE/ALTER DATABASE failed because the resulting cumulative database size would exceed your licensed limit of <fld1> MB per <fld2>_MSG. 
	else if [logstash][msgparser][id] == "msgParserId1059" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} CREATE/ALTER DATABASE failed because the resulting cumulative database size would exceed your licensed limit of %{fld1} MB per %{fld2}_MSG." }
			id => "msgParserId1059"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1060
	# line in RSA:  <fld30> <fld31> <event_source> Creating '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1060" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Creating '%{fld1}'." }
			id => "msgParserId1060"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Creation" {
		# MESSAGE 000980
		# line in RSA:  <fld30> <fld31> <event_source> Creation of table '<fld1>' failed because the row size would be <fld2>, including internal overhead. This exceeds the maximum allowable table row size, <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Creation of table '%{fld1}' failed because the row size would be %{fld2}, including internal overhead. This exceeds the maximum allowable table row size, %{fld3}." }
				id => "message-000980"
				add_field => {
					"[event][id]" => "000980"
					"[rsa][message][id1]" => "000980"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000981
		# line in RSA:  <fld30> <fld31> <event_source> Creation of temporary functions is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Creation of temporary functions is not allowed." }
				id => "message-000981"
				add_field => {
					"[event][id]" => "000981"
					"[rsa][message][id1]" => "000981"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1063
	# line in RSA:  <fld30> <fld31> <event_source> Cross-database foreign key references are not supported. Foreign key '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1063" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cross-database foreign key references are not supported. Foreign key '%{fld1}'." }
			id => "msgParserId1063"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1064
	# line in RSA:  <fld30> <fld31> <event_source> CryptoAPI function '<fld1>' failed. Error <fld32>: <fld2> 
	else if [logstash][msgparser][id] == "msgParserId1064" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} CryptoAPI function '%{fld1}' failed. Error %{fld32}: %{fld2}" }
			id => "msgParserId1064"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Current" {
		# MESSAGE 000984
		# line in RSA:  <fld30> <fld31> <event_source> Current database is not enabled for publishing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Current database is not enabled for publishing." }
				id => "message-000984"
				add_field => {
					"[event][id]" => "000984"
					"[rsa][message][id1]" => "000984"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000985
		# line in RSA:  <fld30> <fld31> <event_source> Current MSDTC transaction must be committed by remote client. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Current MSDTC transaction must be committed by remote client." }
				id => "message-000985"
				add_field => {
					"[event][id]" => "000985"
					"[rsa][message][id1]" => "000985"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000986
		# line in RSA:  <fld30> <fld31> <event_source> Current user account was invoked with SETUSER. Changing databases is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Current user account was invoked with SETUSER. Changing databases is not allowed." }
				id => "message-000986"
				add_field => {
					"[event][id]" => "000986"
					"[rsa][message][id1]" => "000986"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Cursor" {
		# MESSAGE 000987
		# line in RSA:  <fld30> <fld31> <event_source> Cursor created was not of the requested type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cursor created was not of the requested type." }
				id => "message-000987"
				add_field => {
					"[event][id]" => "000987"
					"[rsa][message][id1]" => "000987"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000988
		# line in RSA:  <fld30> <fld31> <event_source> Cursor Fetch: Implicit conversion from data type <fld1> to <fld2> is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cursor Fetch: Implicit conversion from data type %{fld1} to %{fld2} is not allowed." }
				id => "message-000988"
				add_field => {
					"[event][id]" => "000988"
					"[rsa][message][id1]" => "000988"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000989
		# line in RSA:  <fld30> <fld31> <event_source> Cursor is not open. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cursor is not open." }
				id => "message-000989"
				add_field => {
					"[event][id]" => "000989"
					"[rsa][message][id1]" => "000989"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000990
		# line in RSA:  <fld30> <fld31> <event_source> Cursor parameters in a stored procedure must be declared with OUTPUT and VARYING options, and they must be specified in the order CURSOR VARYING OUTPUT. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cursor parameters in a stored procedure must be declared with OUTPUT and VARYING options, and they must be specified in the order CURSOR VARYING OUTPUT." }
				id => "message-000990"
				add_field => {
					"[event][id]" => "000990"
					"[rsa][message][id1]" => "000990"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000991
		# line in RSA:  <fld30> <fld31> <event_source> Cursor updates are not allowed on tables opened with the NOLOCK option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cursor updates are not allowed on tables opened with the NOLOCK option." }
				id => "message-000991"
				add_field => {
					"[event][id]" => "000991"
					"[rsa][message][id1]" => "000991"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1073
	# line in RSA:  <fld30> <fld31> <event_source> Cursorfetch: The number of variables declared in the INTO list must match that of selected columns. 
	else if [logstash][msgparser][id] == "msgParserId1073" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Cursorfetch: The number of variables declared in the INTO list must match that of selected columns." }
			id => "msgParserId1073"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Custom" {
		# MESSAGE 000993
		# line in RSA:  <fld30> <fld31> <event_source> Custom procedure will not be scripted because '<fld1>' is not a recognized article update command syntax. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Custom procedure will not be scripted because '%{fld1}' is not a recognized article update command syntax." }
				id => "message-000993"
				add_field => {
					"[event][id]" => "000993"
					"[rsa][message][id1]" => "000993"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000994
		# line in RSA:  <fld30> <fld31> <event_source> Custom procedures will not be scripted for article update commands based on direct INSERT, UPDATE, or DELETE statements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Custom procedures will not be scripted for article update commands based on direct INSERT, UPDATE, or DELETE statements." }
				id => "message-000994"
				add_field => {
					"[event][id]" => "000994"
					"[rsa][message][id1]" => "000994"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1076
	# line in RSA:  <fld30> <fld31> <event_source> data page 
	else if [logstash][msgparser][id] == "msgParserId1076" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} data page" }
			id => "msgParserId1076"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1077
	# line in RSA:  <fld30> <fld31> <event_source> DATA pages: Changed from (<fld1>) to (<fld2>) pages. 
	else if [logstash][msgparser][id] == "msgParserId1077" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} DATA pages: Changed from (%{fld1}) to (%{fld2}) pages." }
			id => "msgParserId1077"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Data" {
		# MESSAGE 000997
		# line in RSA:  <fld30> <fld31> <event_source> Data changes are not allowed while cleanup of merge meta data is in progress. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Data changes are not allowed while cleanup of merge meta data is in progress." }
				id => "message-000997"
				add_field => {
					"[event][id]" => "000997"
					"[rsa][message][id1]" => "000997"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000998
		# line in RSA:  <fld30> <fld31> <event_source> Data import: Table '<fld1>' already has data. Skipping to next table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Data import: Table '%{fld1}' already has data. Skipping to next table." }
				id => "message-000998"
				add_field => {
					"[event][id]" => "000998"
					"[rsa][message][id1]" => "000998"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 000999
		# line in RSA:  <fld30> <fld31> <event_source> Data import: Table '<fld1>' does not exist or it is not a user table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Data import: Table '%{fld1}' does not exist or it is not a user table." }
				id => "message-000999"
				add_field => {
					"[event][id]" => "000999"
					"[rsa][message][id1]" => "000999"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001000
		# line in RSA:  <fld30> <fld31> <event_source> Data import: Table '<fld1>' is already locked by another user. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Data import: Table '%{fld1}' is already locked by another user." }
				id => "message-001000"
				add_field => {
					"[event][id]" => "001000"
					"[rsa][message][id1]" => "001000"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001001
		# line in RSA:  <fld30> <fld31> <event_source> Data row (<fld1>:<fld2>:<fld3>) identified by (<fld4>) has index values (<fld5>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Data row (%{fld1}:%{fld2}:%{fld3}) identified by (%{fld4}) has index values (%{fld5})." }
				id => "message-001001"
				add_field => {
					"[event][id]" => "001001"
					"[rsa][message][id1]" => "001001"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001002
		# line in RSA:  <fld30> <fld31> <event_source> Data stream is invalid for WRITETEXT statement in bulk form. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Data stream is invalid for WRITETEXT statement in bulk form." }
				id => "message-001002"
				add_field => {
					"[event][id]" => "001002"
					"[rsa][message][id1]" => "001002"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001003
		# line in RSA:  <fld30> <fld31> <event_source> Data stream missing from WRITETEXT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Data stream missing from WRITETEXT statement." }
				id => "message-001003"
				add_field => {
					"[event][id]" => "001003"
					"[rsa][message][id1]" => "001003"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001004
		# line in RSA:  <fld30> <fld31> <event_source> Data type <fld1> of receiving variable is not equal to the data type <fld2> of column '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Data type %{fld1} of receiving variable is not equal to the data type %{fld2} of column '%{fld3}'." }
				id => "message-001004"
				add_field => {
					"[event][id]" => "001004"
					"[rsa][message][id1]" => "001004"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1086
	# line in RSA:  <fld30> <fld31> <event_source> database collation 
	else if [logstash][msgparser][id] == "msgParserId1086" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} database collation" }
			id => "msgParserId1086"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Database" {
		# MESSAGE 001006
		# line in RSA:  <fld30> <fld31> <event_source> Database  changes restored: Database: <fld1>, creation date(time): <fld2>( <fld3>), first LSN:  <fld4>, last LSN:  <fld5>, number of dump devices: <fld6>, device information: ( <fld7>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database  changes restored: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), first LSN:  %{fld4}, last LSN:  %{fld5}, number of dump devices: %{fld6}, device information: ( %{fld7})." }
				id => "message-001006"
				add_field => {
					"[event][id]" => "001006"
					"[rsa][message][id1]" => "001006"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001007
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' (database ID <fld2>) could not recover. Contact Technical Support. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' (database ID %{fld2}) could not recover. Contact Technical Support." }
				id => "message-001007"
				add_field => {
					"[event][id]" => "001007"
					"[rsa][message][id1]" => "001007"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001008
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' (database ID <fld2>) failed to recover because transaction first LSN is not equal to LSN in checkpoint. Contact Technical Support. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' (database ID %{fld2}) failed to recover because transaction first LSN is not equal to LSN in checkpoint. Contact Technical Support." }
				id => "message-001008"
				add_field => {
					"[event][id]" => "001008"
					"[rsa][message][id1]" => "001008"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001009
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' (database ID <fld2>) was marked for standby or read-only use, but has been modified. The RESTORE LOG statement cannot be performed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' (database ID %{fld2}) was marked for standby or read-only use, but has been modified. The RESTORE LOG statement cannot be performed." }
				id => "message-001009"
				add_field => {
					"[event][id]" => "001009"
					"[rsa][message][id1]" => "001009"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001010
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' (database ID <fld2>). The DBCC RECOVERDB statement can only be run after a RESTORE statement that used the WITH NORECOVERY option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' (database ID %{fld2}). The DBCC RECOVERDB statement can only be run after a RESTORE statement that used the WITH NORECOVERY option." }
				id => "message-001010"
				add_field => {
					"[event][id]" => "001010"
					"[rsa][message][id1]" => "001010"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001011
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' (database ID <fld2>). The DBCC RECOVERDB statement failed due to previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' (database ID %{fld2}). The DBCC RECOVERDB statement failed due to previous errors." }
				id => "message-001011"
				add_field => {
					"[event][id]" => "001011"
					"[rsa][message][id1]" => "001011"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001012
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' (database ID <fld2>). The RESTORE statement could not access file '<fld3>'. Error was '<fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' (database ID %{fld2}). The RESTORE statement could not access file '%{fld3}'. Error was '%{fld4}'." }
				id => "message-001012"
				add_field => {
					"[event][id]" => "001012"
					"[rsa][message][id1]" => "001012"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001013
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' (database ID <fld2>). The size of the undo file is insufficient. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' (database ID %{fld2}). The size of the undo file is insufficient." }
				id => "message-001013"
				add_field => {
					"[event][id]" => "001013"
					"[rsa][message][id1]" => "001013"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001014
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' already exists." }
				id => "message-001014"
				add_field => {
					"[event][id]" => "001014"
					"[rsa][message][id1]" => "001014"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001015
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be changed from read-only because the primary and/or log file(s) are not writable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be changed from read-only because the primary and/or log file(s) are not writable." }
				id => "message-001015"
				add_field => {
					"[event][id]" => "001015"
					"[rsa][message][id1]" => "001015"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001016
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be opened because it is offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be opened because it is offline." }
				id => "message-001016"
				add_field => {
					"[event][id]" => "001016"
					"[rsa][message][id1]" => "001016"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001017
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be opened because its version (<fld2>) is later than the current server version (<fld3>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be opened because its version (%{fld2}) is later than the current server version (%{fld3})." }
				id => "message-001017"
				add_field => {
					"[event][id]" => "001017"
					"[rsa][message][id1]" => "001017"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001018
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be opened due to inaccessible files or insufficient memory or disk space.  See the SQL Server errorlog for details. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be opened due to inaccessible files or insufficient memory or disk space.  See the SQL Server errorlog for details." }
				id => "message-001018"
				add_field => {
					"[event][id]" => "001018"
					"[rsa][message][id1]" => "001018"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001019
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be opened. It has been marked SUSPECT by recovery. See the SQL Server errorlog for more information. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be opened. It has been marked SUSPECT by recovery. See the SQL Server errorlog for more information." }
				id => "message-001019"
				add_field => {
					"[event][id]" => "001019"
					"[rsa][message][id1]" => "001019"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001020
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be opened. It is in the middle of a restore. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be opened. It is in the middle of a restore." }
				id => "message-001020"
				add_field => {
					"[event][id]" => "001020"
					"[rsa][message][id1]" => "001020"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001021
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be opened. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be opened." }
				id => "message-001021"
				add_field => {
					"[event][id]" => "001021"
					"[rsa][message][id1]" => "001021"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001022
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be upgraded  - database has a version (<fld2>) earlier  than SQL Server 7.0(<fld3>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be upgraded  - database has a version (%{fld2}) earlier  than SQL Server 7.0(%{fld3})." }
				id => "message-001022"
				add_field => {
					"[event][id]" => "001022"
					"[rsa][message][id1]" => "001022"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001023
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' cannot be upgraded. Database is version <fld2> and this server supports version <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' cannot be upgraded. Database is version %{fld2} and this server supports version %{fld3}." }
				id => "message-001023"
				add_field => {
					"[event][id]" => "001023"
					"[rsa][message][id1]" => "001023"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001024
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' contains columns or parameters with the following code page(s) not supported by the operating system: <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' contains columns or parameters with the following code page(s) not supported by the operating system: %{fld2}." }
				id => "message-001024"
				add_field => {
					"[event][id]" => "001024"
					"[rsa][message][id1]" => "001024"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001025
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' does not exist. Check sysdatabases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' does not exist. Check sysdatabases." }
				id => "message-001025"
				add_field => {
					"[event][id]" => "001025"
					"[rsa][message][id1]" => "001025"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001026
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' does not exist." }
				id => "message-001026"
				add_field => {
					"[event][id]" => "001026"
					"[rsa][message][id1]" => "001026"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001027
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' does not have an entry in sysdatabases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' does not have an entry in sysdatabases." }
				id => "message-001027"
				add_field => {
					"[event][id]" => "001027"
					"[rsa][message][id1]" => "001027"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001028
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' has not been recovered yet. Wait and try again. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' has not been recovered yet. Wait and try again." }
				id => "message-001028"
				add_field => {
					"[event][id]" => "001028"
					"[rsa][message][id1]" => "001028"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001029
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is already offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is already offline." }
				id => "message-001029"
				add_field => {
					"[event][id]" => "001029"
					"[rsa][message][id1]" => "001029"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001030
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is already open and can only have one user at a time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is already open and can only have one user at a time." }
				id => "message-001030"
				add_field => {
					"[event][id]" => "001030"
					"[rsa][message][id1]" => "001030"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001031
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is being recovered. Waiting until recovery is finished. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is being recovered. Waiting until recovery is finished." }
				id => "message-001031"
				add_field => {
					"[event][id]" => "001031"
					"[rsa][message][id1]" => "001031"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001032
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is in restricted mode. Only the database owner and members of the dbcreator and sysadmin roles can access it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is in restricted mode. Only the database owner and members of the dbcreator and sysadmin roles can access it." }
				id => "message-001032"
				add_field => {
					"[event][id]" => "001032"
					"[rsa][message][id1]" => "001032"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001033
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is in transition. Try the ALTER DATABASE statement later. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is in transition. Try the ALTER DATABASE statement later." }
				id => "message-001033"
				add_field => {
					"[event][id]" => "001033"
					"[rsa][message][id1]" => "001033"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001034
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is in transition. Try the statement later. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is in transition. Try the statement later." }
				id => "message-001034"
				add_field => {
					"[event][id]" => "001034"
					"[rsa][message][id1]" => "001034"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001035
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is in warm standby. A warm-standby database is read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is in warm standby. A warm-standby database is read-only." }
				id => "message-001035"
				add_field => {
					"[event][id]" => "001035"
					"[rsa][message][id1]" => "001035"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001036
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is not marked suspect. You cannot drop it with DBCC. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is not marked suspect. You cannot drop it with DBCC." }
				id => "message-001036"
				add_field => {
					"[event][id]" => "001036"
					"[rsa][message][id1]" => "001036"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001037
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is read-only or has read-only files and must be made writable before it can be upgraded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is read-only or has read-only files and must be made writable before it can be upgraded." }
				id => "message-001037"
				add_field => {
					"[event][id]" => "001037"
					"[rsa][message][id1]" => "001037"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001038
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' must be set to single user mode before executing this statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' must be set to single user mode before executing this statement." }
				id => "message-001038"
				add_field => {
					"[event][id]" => "001038"
					"[rsa][message][id1]" => "001038"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001039
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' running the upgrade step from version <fld2> to version <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' running the upgrade step from version %{fld2} to version %{fld3}." }
				id => "message-001039"
				add_field => {
					"[event][id]" => "001039"
					"[rsa][message][id1]" => "001039"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001040
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' set to read only mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' set to read only mode." }
				id => "message-001040"
				add_field => {
					"[event][id]" => "001040"
					"[rsa][message][id1]" => "001040"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001041
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' set to single user mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' set to single user mode." }
				id => "message-001041"
				add_field => {
					"[event][id]" => "001041"
					"[rsa][message][id1]" => "001041"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001042
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' consistency errors in sysobjects, sysindexes, syscolumns, or systypes prevent further <fld2> processing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' consistency errors in sysobjects, sysindexes, syscolumns, or systypes prevent further %{fld2} processing." }
				id => "message-001042"
				add_field => {
					"[event][id]" => "001042"
					"[rsa][message][id1]" => "001042"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001043
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' is in warm-standby state (set by executing RESTORE WITH STANDBY) and cannot be backed up until the entire load sequence is completed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' is in warm-standby state (set by executing RESTORE WITH STANDBY) and cannot be backed up until the entire load sequence is completed." }
				id => "message-001043"
				add_field => {
					"[event][id]" => "001043"
					"[rsa][message][id1]" => "001043"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001044
		# line in RSA:  <fld30> <fld31> <event_source> Database '<fld1>' has no object, user, and so on 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database '%{fld1}' has no object, user, and so on" }
				id => "message-001044"
				add_field => {
					"[event][id]" => "001044"
					"[rsa][message][id1]" => "001044"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001045:01
		# line in RSA:  <fld30> <fld31> <event_source> Database backed up. Database: <db_name>, creation date(time): <fld2>( <fld3>), pages dumped: <fld4>, first LSN:  <fld5>, last LSN:  <fld6>, number of dump devices: <dclass_counter1>, device information: (FILE=<fld22>, TYPE=<fld23>: {{'<filename>'}). <info> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Database[\s]+backed[\s]+up\.[\s]+Database:[\s]+(?<db_name>[^,]*),[\s]+creation[\s]+date\(time\):[\s]+(?<fld2>[^\(]*)\([\s]+(?<fld3>[^\)]*)\),[\s]+pages[\s]+dumped:[\s]+(?<fld4>[^,]*),[\s]+first[\s]+LSN:[\s]+(?<fld5>[^,]*),[\s]+last[\s]+LSN:[\s]+(?<fld6>[^,]*),[\s]+number[\s]+of[\s]+dump[\s]+devices:[\s]+(?<dclass_counter1>[^,]*),[\s]+device[\s]+information:[\s]+\(FILE=(?<fld22>[^,]*),[\s]+TYPE=(?<fld23>[^:]*):[\s]+\{'(?<filename>[^']*)'\}\)\.[\s]+(?<info>[^\s]*)[\s]+$" }
				id => "message-001045:01"
				add_field => {
				"event_description" => "Database backed up."
					"[event][id]" => "001045:01"
					"[rsa][message][id1]" => "001045:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001045
		# line in RSA:  <fld30> <fld31> <event_source> Database backed up: Database: <fld1>, creation date(time): <fld2>( <fld3>), pages dumped: <fld4>, first LSN:  <fld5>, last LSN:  <fld6>, number of dump devices: <fld7>, device information: (<fld8>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database backed up: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), pages dumped: %{fld4}, first LSN:  %{fld5}, last LSN:  %{fld6}, number of dump devices: %{fld7}, device information: (%{fld8})." }
				id => "message-001045"
				add_field => {
					"[event][id]" => "001045"
					"[rsa][message][id1]" => "001045"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001046
		# line in RSA:  <fld30> <fld31> <event_source> Database compatibility level at immediate updating Subscribers cannot be less than 70. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database compatibility level at immediate updating Subscribers cannot be less than 70." }
				id => "message-001046"
				add_field => {
					"[event][id]" => "001046"
					"[rsa][message][id1]" => "001046"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001047
		# line in RSA:  <fld30> <fld31> <event_source> Database differential changes backed up: Database: <fld1>, creation date(time): <fld2>( <fld3>), pages dumped: <fld4>, first LSN:  <fld5>, last LSN:  <fld6>, full backup LSN:  <fld7>, number of dump devices: <fld8>, device information: (<fld9>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database differential changes backed up: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), pages dumped: %{fld4}, first LSN:  %{fld5}, last LSN:  %{fld6}, full backup LSN:  %{fld7}, number of dump devices: %{fld8}, device information: (%{fld9})." }
				id => "message-001047"
				add_field => {
					"[event][id]" => "001047"
					"[rsa][message][id1]" => "001047"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001048
		# line in RSA:  <fld30> <fld31> <event_source> Database error: Page <fld1> is marked with the wrong type in PFS page <fld2>. PFS status <fld3> expected <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database error: Page %{fld1} is marked with the wrong type in PFS page %{fld2}. PFS status %{fld3} expected %{fld4}." }
				id => "message-001048"
				add_field => {
					"[event][id]" => "001048"
					"[rsa][message][id1]" => "001048"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001049
		# line in RSA:  <fld30> <fld31> <event_source> Database file <fld1> is offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database file %{fld1} is offline." }
				id => "message-001049"
				add_field => {
					"[event][id]" => "001049"
					"[rsa][message][id1]" => "001049"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001050
		# line in RSA:  <fld30> <fld31> <event_source> Database file backed up: Database: <fld1>, creation date(time): <fld2>( <fld3>), file list: ( <fld4>), pages dumped: <fld5>, number of dump devices: <fld6>, device information: ( <fld7>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database file backed up: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), file list: ( %{fld4}), pages dumped: %{fld5}, number of dump devices: %{fld6}, device information: ( %{fld7})." }
				id => "message-001050"
				add_field => {
					"[event][id]" => "001050"
					"[rsa][message][id1]" => "001050"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001051
		# line in RSA:  <fld30> <fld31> <event_source> Database file changes restored: Database: <fld1>, creation date(time): <fld2>( <fld3>), file list: ( <fld4>), number of dump devices: <fld5>, device information: ( <fld6>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database file changes restored: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), file list: ( %{fld4}), number of dump devices: %{fld5}, device information: ( %{fld6})." }
				id => "message-001051"
				add_field => {
					"[event][id]" => "001051"
					"[rsa][message][id1]" => "001051"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001052
		# line in RSA:  <fld30> <fld31> <event_source> Database file differential changes backed up: Database: <fld1>, creation date(time): <fld2>( <fld3>), file list: ( <fld4>), pages dumped: <fld5>, number of dump devices: <fld6>, device information: ( <fld7>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database file differential changes backed up: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), file list: ( %{fld4}), pages dumped: %{fld5}, number of dump devices: %{fld6}, device information: ( %{fld7})." }
				id => "message-001052"
				add_field => {
					"[event][id]" => "001052"
					"[rsa][message][id1]" => "001052"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001053
		# line in RSA:  <fld30> <fld31> <event_source> Database file restored: Database: <fld1>, creation date(time): <fld2>( <fld3>), file list: ( <fld4>), number of dump devices: <fld5>, device information: ( <fld6>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database file restored: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), file list: ( %{fld4}), number of dump devices: %{fld5}, device information: ( %{fld6})." }
				id => "message-001053"
				add_field => {
					"[event][id]" => "001053"
					"[rsa][message][id1]" => "001053"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001054
		# line in RSA:  <fld30> <fld31> <event_source> Database ID <fld1>, object '<fld2>' (ID <fld3>). Loop in data chain detected at <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database ID %{fld1}, object '%{fld2}' (ID %{fld3}). Loop in data chain detected at %{fld4}." }
				id => "message-001054"
				add_field => {
					"[event][id]" => "001054"
					"[rsa][message][id1]" => "001054"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001055
		# line in RSA:  <fld30> <fld31> <event_source> Database ID <fld1>. Could not find clustered index on system table ID <fld2>. This index should exist in all databases. Run DBCC CHECKTABLE on sysindexes in the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database ID %{fld1}. Could not find clustered index on system table ID %{fld2}. This index should exist in all databases. Run DBCC CHECKTABLE on sysindexes in the database." }
				id => "message-001055"
				add_field => {
					"[event][id]" => "001055"
					"[rsa][message][id1]" => "001055"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001056
		# line in RSA:  <fld30> <fld31> <event_source> Database ID <fld1>. Could not find object ID <fld2> in sysobjects. This system catalog should exist in all databases. Run DBCC CHECKTABLE on sysobjects in this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database ID %{fld1}. Could not find object ID %{fld2} in sysobjects. This system catalog should exist in all databases. Run DBCC CHECKTABLE on sysobjects in this database." }
				id => "message-001056"
				add_field => {
					"[event][id]" => "001056"
					"[rsa][message][id1]" => "001056"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001057
		# line in RSA:  <fld30> <fld31> <event_source> Database ID <fld1>. Could not mark database as suspect. Getnext NC scan on sysdatabases.dbid failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database ID %{fld1}. Could not mark database as suspect. Getnext NC scan on sysdatabases.dbid failed." }
				id => "message-001057"
				add_field => {
					"[event][id]" => "001057"
					"[rsa][message][id1]" => "001057"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001058
		# line in RSA:  <fld30> <fld31> <event_source> Database in use. The system administrator must have exclusive use of the database to restore the log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database in use. The system administrator must have exclusive use of the database to restore the log." }
				id => "message-001058"
				add_field => {
					"[event][id]" => "001058"
					"[rsa][message][id1]" => "001058"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001059
		# line in RSA:  <fld30> <fld31> <event_source> Database is already online. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database is already online." }
				id => "message-001059"
				add_field => {
					"[event][id]" => "001059"
					"[rsa][message][id1]" => "001059"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001060
		# line in RSA:  <fld30> <fld31> <event_source> Database is no longer enabled for merge publications. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database is no longer enabled for merge publications." }
				id => "message-001060"
				add_field => {
					"[event][id]" => "001060"
					"[rsa][message][id1]" => "001060"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001061
		# line in RSA:  <fld30> <fld31> <event_source> Database is no longer enabled for subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database is no longer enabled for subscriptions." }
				id => "message-001061"
				add_field => {
					"[event][id]" => "001061"
					"[rsa][message][id1]" => "001061"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001062
		# line in RSA:  <fld30> <fld31> <event_source> Database is no longer published. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database is no longer published." }
				id => "message-001062"
				add_field => {
					"[event][id]" => "001062"
					"[rsa][message][id1]" => "001062"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001063
		# line in RSA:  <fld30> <fld31> <event_source> Database is now online. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database is now online." }
				id => "message-001063"
				add_field => {
					"[event][id]" => "001063"
					"[rsa][message][id1]" => "001063"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001064
		# line in RSA:  <fld30> <fld31> <event_source> Database log truncated: Database: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database log truncated: Database: %{fld1}." }
				id => "message-001064"
				add_field => {
					"[event][id]" => "001064"
					"[rsa][message][id1]" => "001064"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001065
		# line in RSA:  <fld30> <fld31> <event_source> Database must be put in bypass recovery mode to rebuild the log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database must be put in bypass recovery mode to rebuild the log." }
				id => "message-001065"
				add_field => {
					"[event][id]" => "001065"
					"[rsa][message][id1]" => "001065"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001066
		# line in RSA:  <fld30> <fld31> <event_source> Database name '<fld1>' ignored, referencing object in tempdb. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database name '%{fld1}' ignored, referencing object in tempdb." }
				id => "message-001066"
				add_field => {
					"[event][id]" => "001066"
					"[rsa][message][id1]" => "001066"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001067
		# line in RSA:  <fld30> <fld31> <event_source> Database option '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database option '%{fld1}' does not exist." }
				id => "message-001067"
				add_field => {
					"[event][id]" => "001067"
					"[rsa][message][id1]" => "001067"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001068
		# line in RSA:  <fld30> <fld31> <event_source> Database option '<fld1>' is not unique. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database option '%{fld1}' is not unique." }
				id => "message-001068"
				add_field => {
					"[event][id]" => "001068"
					"[rsa][message][id1]" => "001068"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001069
		# line in RSA:  <fld30> <fld31> <event_source> Database options single user and dbo use only cannot be set at the same time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database options single user and dbo use only cannot be set at the same time." }
				id => "message-001069"
				add_field => {
					"[event][id]" => "001069"
					"[rsa][message][id1]" => "001069"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001070
		# line in RSA:  <fld30> <fld31> <event_source> Database owner changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database owner changed." }
				id => "message-001070"
				add_field => {
					"[event][id]" => "001070"
					"[rsa][message][id1]" => "001070"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001071
		# line in RSA:  <fld30> <fld31> <event_source> Database property 'IsRecursiveTriggersEnabled' has to be false for subscription databases at Subscribers that allow updatable subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database property 'IsRecursiveTriggersEnabled' has to be false for subscription databases at Subscribers that allow updatable subscriptions." }
				id => "message-001071"
				add_field => {
					"[event][id]" => "001071"
					"[rsa][message][id1]" => "001071"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001072
		# line in RSA:  <fld30> <fld31> <event_source> Database removed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database removed." }
				id => "message-001072"
				add_field => {
					"[event][id]" => "001072"
					"[rsa][message][id1]" => "001072"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001073:01
		# line in RSA:  <fld30> <fld31> <event_source> Database was restored: Database: <db_name>, creation date(time): <fld2>( <fld3>), first LSN:  <fld4>, last LSN:  <fld5>, number of dump devices: <dclass_counter1>, device information: (FILE=<fld22>, TYPE=<fld23>: {{'<filename>'}). <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Database[\s]+was[\s]+restored:[\s]+Database:[\s]+(?<db_name>[^,]*),[\s]+creation[\s]+date\(time\):[\s]+(?<fld2>[^\(]*)\([\s]+(?<fld3>[^\)]*)\),[\s]+first[\s]+LSN:[\s]+(?<fld4>[^,]*),[\s]+last[\s]+LSN:[\s]+(?<fld5>[^,]*),[\s]+number[\s]+of[\s]+dump[\s]+devices:[\s]+(?<dclass_counter1>[^,]*),[\s]+device[\s]+information:[\s]+\(FILE=(?<fld22>[^,]*),[\s]+TYPE=(?<fld23>[^:]*):[\s]+\{'(?<filename>[^']*)'\}\)\.[\s]+(?<info>.*)$" }
				id => "message-001073:01"
				add_field => {
				"event_description" => "Database was restored"
					"[event][id]" => "001073:01"
					"[rsa][message][id1]" => "001073:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001073
		# line in RSA:  <fld30> <fld31> <event_source> Database restored: Database: <fld1>, creation date(time): <fld2>( <fld3>), first LSN:  <fld4>, last LSN:  <fld5>, number of dump devices: <fld6>, device information: ( <fld7>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database restored: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), first LSN:  %{fld4}, last LSN:  %{fld5}, number of dump devices: %{fld6}, device information: ( %{fld7})." }
				id => "message-001073"
				add_field => {
					"[event][id]" => "001073"
					"[rsa][message][id1]" => "001073"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001074
		# line in RSA:  <fld30> <fld31> <event_source> Database state cannot be changed while other users are using the database '<fld1>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database state cannot be changed while other users are using the database '%{fld1}'" }
				id => "message-001074"
				add_field => {
					"[event][id]" => "001074"
					"[rsa][message][id1]" => "001074"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001075
		# line in RSA:  <fld30> <fld31> <event_source> Database successfully enabled for subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database successfully enabled for subscriptions." }
				id => "message-001075"
				add_field => {
					"[event][id]" => "001075"
					"[rsa][message][id1]" => "001075"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001076
		# line in RSA:  <fld30> <fld31> <event_source> Database successfully published using merge replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database successfully published using merge replication." }
				id => "message-001076"
				add_field => {
					"[event][id]" => "001076"
					"[rsa][message][id1]" => "001076"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001077
		# line in RSA:  <fld30> <fld31> <event_source> Database successfully published. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database successfully published." }
				id => "message-001077"
				add_field => {
					"[event][id]" => "001077"
					"[rsa][message][id1]" => "001077"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001078
		# line in RSA:  <fld30> <fld31> <event_source> Database tempdb allocation errors prevent further <fld1> processing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database tempdb allocation errors prevent further %{fld1} processing." }
				id => "message-001078"
				add_field => {
					"[event][id]" => "001078"
					"[rsa][message][id1]" => "001078"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1162
	# line in RSA:  <fld30> <fld31> <event_source> Database_Name should not be used to qualify owner.object for the parameter into this procedure. 
	else if [logstash][msgparser][id] == "msgParserId1162" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Database_Name should not be used to qualify owner.object for the parameter into this procedure." }
			id => "msgParserId1162"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "datetime" {
		# MESSAGE 001080
		# line in RSA:  <fld30> <fld31> <event_source> datetime data type, nulls allowed <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} datetime data type, nulls allowed %{fld1}" }
				id => "message-001080"
				add_field => {
					"[event][id]" => "001080"
					"[rsa][message][id1]" => "001080"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001081
		# line in RSA:  <fld30> <fld31> <event_source> datetime data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} datetime data type %{fld1}" }
				id => "message-001081"
				add_field => {
					"[event][id]" => "001081"
					"[rsa][message][id1]" => "001081"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1187
	# line in RSA:  <fld30> <fld31> <event_source> DBPROP_CHANGEINSERTEDROWS was VARIANT_FALSE and the insertion for the row has been transmitted to the data source. 
	else if [logstash][msgparser][id] == "msgParserId1187" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} DBPROP_CHANGEINSERTEDROWS was VARIANT_FALSE and the insertion for the row has been transmitted to the data source." }
			id => "msgParserId1187"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Deactivated" {
		# MESSAGE 001105
		# line in RSA:  <fld30> <fld31> <event_source> Deactivated initial snapshot for anonymous publication(s). New subscriptions must wait for the next scheduled snapshot. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deactivated initial snapshot for anonymous publication(s). New subscriptions must wait for the next scheduled snapshot." }
				id => "message-001105"
				add_field => {
					"[event][id]" => "001105"
					"[rsa][message][id1]" => "001105"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001106
		# line in RSA:  <fld30> <fld31> <event_source> Deactivated subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deactivated subscriptions." }
				id => "message-001106"
				add_field => {
					"[event][id]" => "001106"
					"[rsa][message][id1]" => "001106"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1190
	# line in RSA:  <fld30> <fld31> <event_source> Deadlock detected during DBCC. Complete the transaction in progress and retry this statement. 
	else if [logstash][msgparser][id] == "msgParserId1190" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deadlock detected during DBCC. Complete the transaction in progress and retry this statement." }
			id => "msgParserId1190"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "decimal" {
		# MESSAGE 001108
		# line in RSA:  <fld30> <fld31> <event_source> decimal data type, nulls allowed <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} decimal data type, nulls allowed %{fld1}" }
				id => "message-001108"
				add_field => {
					"[event][id]" => "001108"
					"[rsa][message][id1]" => "001108"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001109
		# line in RSA:  <fld30> <fld31> <event_source> decimal data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} decimal data type %{fld1}" }
				id => "message-001109"
				add_field => {
					"[event][id]" => "001109"
					"[rsa][message][id1]" => "001109"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Default" {
		# MESSAGE 001110
		# line in RSA:  <fld30> <fld31> <event_source> Default agent profile 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default agent profile" }
				id => "message-001110"
				add_field => {
					"[event][id]" => "001110"
					"[rsa][message][id1]" => "001110"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001111
		# line in RSA:  <fld30> <fld31> <event_source> Default bound to column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default bound to column." }
				id => "message-001111"
				add_field => {
					"[event][id]" => "001111"
					"[rsa][message][id1]" => "001111"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001112
		# line in RSA:  <fld30> <fld31> <event_source> Default bound to data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default bound to data type." }
				id => "message-001112"
				add_field => {
					"[event][id]" => "001112"
					"[rsa][message][id1]" => "001112"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001113
		# line in RSA:  <fld30> <fld31> <event_source> Default collation successfully changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default collation successfully changed." }
				id => "message-001113"
				add_field => {
					"[event][id]" => "001113"
					"[rsa][message][id1]" => "001113"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001114
		# line in RSA:  <fld30> <fld31> <event_source> Default database changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default database changed." }
				id => "message-001114"
				add_field => {
					"[event][id]" => "001114"
					"[rsa][message][id1]" => "001114"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001115
		# line in RSA:  <fld30> <fld31> <event_source> Default date order '<fld1>' for language <fld2> is invalid. Using mdy instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default date order '%{fld1}' for language %{fld2} is invalid. Using mdy instead." }
				id => "message-001115"
				add_field => {
					"[event][id]" => "001115"
					"[rsa][message][id1]" => "001115"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001116
		# line in RSA:  <fld30> <fld31> <event_source> Default devices are not supported. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default devices are not supported." }
				id => "message-001116"
				add_field => {
					"[event][id]" => "001116"
					"[rsa][message][id1]" => "001116"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001117
		# line in RSA:  <fld30> <fld31> <event_source> Default unbound from data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default unbound from data type." }
				id => "message-001117"
				add_field => {
					"[event][id]" => "001117"
					"[rsa][message][id1]" => "001117"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001118
		# line in RSA:  <fld30> <fld31> <event_source> Default unbound from table column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default unbound from table column." }
				id => "message-001118"
				add_field => {
					"[event][id]" => "001118"
					"[rsa][message][id1]" => "001118"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001119
		# line in RSA:  <fld30> <fld31> <event_source> Default, table, and user data types must be in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Default, table, and user data types must be in the current database." }
				id => "message-001119"
				add_field => {
					"[event][id]" => "001119"
					"[rsa][message][id1]" => "001119"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Default:01
		# line in RSA:  <fld30> <fld31> Server <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} Server %{info}" }
				id => "message-Default:01"
				add_field => {
					"[event][id]" => "Default:01"
					"[rsa][message][id1]" => "Default:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Defaults" {
		# MESSAGE 001120
		# line in RSA:  <fld30> <fld31> <event_source> Defaults cannot be created on columns of data type timestamp. Table '<fld1>', column '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Defaults cannot be created on columns of data type timestamp. Table '%{fld1}', column '%{fld2}'." }
				id => "message-001120"
				add_field => {
					"[event][id]" => "001120"
					"[rsa][message][id1]" => "001120"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001121
		# line in RSA:  <fld30> <fld31> <event_source> Defaults cannot be created on columns with an IDENTITY attribute. Table '<fld1>', column '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Defaults cannot be created on columns with an IDENTITY attribute. Table '%{fld1}', column '%{fld2}'." }
				id => "message-001121"
				add_field => {
					"[event][id]" => "001121"
					"[rsa][message][id1]" => "001121"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1205
	# line in RSA:  <fld30> <fld31> <event_source> Deferred accessor validation occurred. Invalid binding for this column. 
	else if [logstash][msgparser][id] == "msgParserId1205" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deferred accessor validation occurred. Invalid binding for this column." }
			id => "msgParserId1205"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1206
	# line in RSA:  <fld30> <fld31> <event_source> <fld1>
	else if [logstash][msgparser][id] == "msgParserId1206" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} %{fld1}" }
			id => "msgParserId1206"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Deleting" {
		# MESSAGE 001123
		# line in RSA:  <fld30> <fld31> <event_source> Deleting database file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deleting database file '%{fld1}'." }
				id => "message-001123"
				add_field => {
					"[event][id]" => "001123"
					"[rsa][message][id1]" => "001123"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001124
		# line in RSA:  <fld30> <fld31> <event_source> Deleting the row violated the integrity constraints for the column or table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deleting the row violated the integrity constraints for the column or table." }
				id => "message-001124"
				add_field => {
					"[event][id]" => "001124"
					"[rsa][message][id1]" => "001124"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001125
		# line in RSA:  <fld30> <fld31> <event_source> Deleting the row would exceed the limit for pending changes specified by the rowset property DBPROP_MAXPENDINGROWS. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deleting the row would exceed the limit for pending changes specified by the rowset property DBPROP_MAXPENDINGROWS." }
				id => "message-001125"
				add_field => {
					"[event][id]" => "001125"
					"[rsa][message][id1]" => "001125"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001126
		# line in RSA:  <fld30> <fld31> <event_source> Deleting users except guest and the database owner from sysusers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deleting users except guest and the database owner from sysusers." }
				id => "message-001126"
				add_field => {
					"[event][id]" => "001126"
					"[rsa][message][id1]" => "001126"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Deletion" {
		# MESSAGE 001127
		# line in RSA:  <fld30> <fld31> <event_source> Deletion length <fld1> is not in the range of available text, ntext, or image data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deletion length %{fld1} is not in the range of available text, ntext, or image data." }
				id => "message-001127"
				add_field => {
					"[event][id]" => "001127"
					"[rsa][message][id1]" => "001127"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001128
		# line in RSA:  <fld30> <fld31> <event_source> Deletion of the row was canceled during notification. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Deletion of the row was canceled during notification." }
				id => "message-001128"
				add_field => {
					"[event][id]" => "001128"
					"[rsa][message][id1]" => "001128"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1213
	# line in RSA:  <fld30> <fld31> <event_source> Denied login access to '<username>'. 
	else if [logstash][msgparser][id] == "msgParserId1213" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Denied login access to '%{username}'." }
			id => "msgParserId1213"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login Failed"
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Derived" {
		# MESSAGE 001130
		# line in RSA:  <fld30> <fld31> <event_source> Derived table '<fld1>' is not updatable because a column of the derived table is derived or constant. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Derived table '%{fld1}' is not updatable because a column of the derived table is derived or constant." }
				id => "message-001130"
				add_field => {
					"[event][id]" => "001130"
					"[rsa][message][id1]" => "001130"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001131
		# line in RSA:  <fld30> <fld31> <event_source> Derived table '<fld1>' is not updatable because it contains aggregates. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Derived table '%{fld1}' is not updatable because it contains aggregates." }
				id => "message-001131"
				add_field => {
					"[event][id]" => "001131"
					"[rsa][message][id1]" => "001131"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001132
		# line in RSA:  <fld30> <fld31> <event_source> Derived table '<fld1>' is not updatable because the <fld2> statement contains a GROUP BY ALL clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Derived table '%{fld1}' is not updatable because the %{fld2} statement contains a GROUP BY ALL clause." }
				id => "message-001132"
				add_field => {
					"[event][id]" => "001132"
					"[rsa][message][id1]" => "001132"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001133
		# line in RSA:  <fld30> <fld31> <event_source> Derived table '<fld1>' is not updatable because the definition contains a UNION operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Derived table '%{fld1}' is not updatable because the definition contains a UNION operator." }
				id => "message-001133"
				add_field => {
					"[event][id]" => "001133"
					"[rsa][message][id1]" => "001133"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001134
		# line in RSA:  <fld30> <fld31> <event_source> Derived table '<fld1>' is not updatable because the definition contains the DISTINCT clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Derived table '%{fld1}' is not updatable because the definition contains the DISTINCT clause." }
				id => "message-001134"
				add_field => {
					"[event][id]" => "001134"
					"[rsa][message][id1]" => "001134"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001135
		# line in RSA:  <fld30> <fld31> <event_source> Derived table '<fld1>' is not updatable because the modification affects multiple base tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Derived table '%{fld1}' is not updatable because the modification affects multiple base tables." }
				id => "message-001135"
				add_field => {
					"[event][id]" => "001135"
					"[rsa][message][id1]" => "001135"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Descriptor" {
		# MESSAGE 001136
		# line in RSA:  <fld30> <fld31> <event_source> Descriptor block size exceeds <fld1> bytes. Use a shorter name and/or description string and retry the operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Descriptor block size exceeds %{fld1} bytes. Use a shorter name and/or description string and retry the operation." }
				id => "message-001136"
				add_field => {
					"[event][id]" => "001136"
					"[rsa][message][id1]" => "001136"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001137
		# line in RSA:  <fld30> <fld31> <event_source> Descriptor for object ID <fld1> in database ID <fld2> not found in the hash table during attempt to unhash it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Descriptor for object ID %{fld1} in database ID %{fld2} not found in the hash table during attempt to unhash it." }
				id => "message-001137"
				add_field => {
					"[event][id]" => "001137"
					"[rsa][message][id1]" => "001137"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1222
	# line in RSA:  <fld30> <fld31> <event_source> Detect nonlogged agent shutdown. 
	else if [logstash][msgparser][id] == "msgParserId1222" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Detect nonlogged agent shutdown." }
			id => "msgParserId1222"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Detected" {
		# MESSAGE 001139
		# line in RSA:  <fld30> <fld31> <event_source> Detected inconsistencies in the replication agent table. The specified job ID corresponds to multiple entries in '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Detected inconsistencies in the replication agent table. The specified job ID corresponds to multiple entries in '%{fld1}'." }
				id => "message-001139"
				add_field => {
					"[event][id]" => "001139"
					"[rsa][message][id1]" => "001139"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001140
		# line in RSA:  <fld30> <fld31> <event_source> Detected inconsistencies in the replication agent table. The specified job ID does not correspond to an entry in '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Detected inconsistencies in the replication agent table. The specified job ID does not correspond to an entry in '%{fld1}'." }
				id => "message-001140"
				add_field => {
					"[event][id]" => "001140"
					"[rsa][message][id1]" => "001140"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Detected:01
		# line in RSA:  <fld30> <fld31> Server <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} Server %{info}" }
				id => "message-Detected:01"
				add_field => {
					"[event][id]" => "Detected:01"
					"[rsa][message][id1]" => "Detected:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Detects" {
		# MESSAGE 001141
		# line in RSA:  <fld30> <fld31> <event_source> Detects and removes expired subscriptions from published databases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Detects and removes expired subscriptions from published databases." }
				id => "message-001141"
				add_field => {
					"[event][id]" => "001141"
					"[rsa][message][id1]" => "001141"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001142
		# line in RSA:  <fld30> <fld31> <event_source> Detects replication agents that are not logging history actively. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Detects replication agents that are not logging history actively." }
				id => "message-001142"
				add_field => {
					"[event][id]" => "001142"
					"[rsa][message][id1]" => "001142"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Device" {
		# MESSAGE 001143
		# line in RSA:  <fld30> <fld31> <event_source> Device '<fld1>' (physical name '<fld2>', virtual device number <fld3>) is not available. Contact the system administrator for assistance. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Device '%{fld1}' (physical name '%{fld2}', virtual device number %{fld3}) is not available. Contact the system administrator for assistance." }
				id => "message-001143"
				add_field => {
					"[event][id]" => "001143"
					"[rsa][message][id1]" => "001143"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001144
		# line in RSA:  <fld30> <fld31> <event_source> Device activation error. The physical file name '<fld1>' may be incorrect. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Device activation error. The physical file name '%{fld1}' may be incorrect." }
				id => "message-001144"
				add_field => {
					"[event][id]" => "001144"
					"[rsa][message][id1]" => "001144"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001145
		# line in RSA:  <fld30> <fld31> <event_source> Device dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Device dropped." }
				id => "message-001145"
				add_field => {
					"[event][id]" => "001145"
					"[rsa][message][id1]" => "001145"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1230
	# line in RSA:  <fld30> <fld31> <event_source> Difference of two datetime columns caused overflow at runtime. 
	else if [logstash][msgparser][id] == "msgParserId1230" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Difference of two datetime columns caused overflow at runtime." }
			id => "msgParserId1230"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1231
	# line in RSA:  <fld30> <fld31> <event_source> Disabling <fld1> option for database '<fld2>'. 
	else if [logstash][msgparser][id] == "msgParserId1231" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Disabling %{fld1} option for database '%{fld2}'." }
			id => "msgParserId1231"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1232
	# line in RSA:  <fld30> <fld31> <event_source> Disallowed implicit conversion from data type <fld1> to data type <fld2>, table '<fld3>', column '<fld4>'. Use the CONVERT function to run this query. 
	else if [logstash][msgparser][id] == "msgParserId1232" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Disallowed implicit conversion from data type %{fld1} to data type %{fld2}, table '%{fld3}', column '%{fld4}'. Use the CONVERT function to run this query." }
			id => "msgParserId1232"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1233
	# line in RSA:  <fld30> <fld31> <event_source> Disk '<fld1>' is already completely used by other databases. It can be expanded with DISK RESIZE. 
	else if [logstash][msgparser][id] == "msgParserId1233" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Disk '%{fld1}' is already completely used by other databases. It can be expanded with DISK RESIZE." }
			id => "msgParserId1233"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Distributed" {
		# MESSAGE 001150
		# line in RSA:  <fld30> <fld31> <event_source> Distributed transaction aborted by MSDTC. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Distributed transaction aborted by MSDTC." }
				id => "message-001150"
				add_field => {
					"[event][id]" => "001150"
					"[rsa][message][id1]" => "001150"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001151
		# line in RSA:  <fld30> <fld31> <event_source> Distributed transaction completed. Either enlist this session in a new transaction or the NULL transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Distributed transaction completed. Either enlist this session in a new transaction or the NULL transaction." }
				id => "message-001151"
				add_field => {
					"[event][id]" => "001151"
					"[rsa][message][id1]" => "001151"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001152
		# line in RSA:  <fld30> <fld31> <event_source> Distributed transaction with UOW <fld1> is being used by another user. KILL command failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Distributed transaction with UOW %{fld1} is being used by another user. KILL command failed." }
				id => "message-001152"
				add_field => {
					"[event][id]" => "001152"
					"[rsa][message][id1]" => "001152"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001153
		# line in RSA:  <fld30> <fld31> <event_source> Distributed transaction with UOW <fld1> is in prepared state. Only Microsoft Distributed Transaction Coordinator can resolve this transaction. KILL command failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Distributed transaction with UOW %{fld1} is in prepared state. Only Microsoft Distributed Transaction Coordinator can resolve this transaction. KILL command failed." }
				id => "message-001153"
				add_field => {
					"[event][id]" => "001153"
					"[rsa][message][id1]" => "001153"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001154
		# line in RSA:  <fld30> <fld31> <event_source> Distributed transaction with UOW <fld1> is rolling back: estimated rollback completion: <fld2>, estimated time left <fld3> seconds. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Distributed transaction with UOW %{fld1} is rolling back: estimated rollback completion: %{fld2}, estimated time left %{fld3} seconds." }
				id => "message-001154"
				add_field => {
					"[event][id]" => "001154"
					"[rsa][message][id1]" => "001154"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Distribution" {
		# MESSAGE 001155
		# line in RSA:  <fld30> <fld31> <event_source> Distribution Agent startup message. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Distribution Agent startup message." }
				id => "message-001155"
				add_field => {
					"[event][id]" => "001155"
					"[rsa][message][id1]" => "001155"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001156
		# line in RSA:  <fld30> <fld31> <event_source> Distribution clean up: <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Distribution clean up: %{fld1}" }
				id => "message-001156"
				add_field => {
					"[event][id]" => "001156"
					"[rsa][message][id1]" => "001156"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001157
		# line in RSA:  <fld30> <fld31> <event_source> Distribution retention periods must be greater than 0. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Distribution retention periods must be greater than 0." }
				id => "message-001157"
				add_field => {
					"[event][id]" => "001157"
					"[rsa][message][id1]" => "001157"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1242
	# line in RSA:  <fld30> <fld31> <event_source> Divide by zero error encountered. 
	else if [logstash][msgparser][id] == "msgParserId1242" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Divide by zero error encountered." }
			id => "msgParserId1242"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1243
	# line in RSA:  <fld30> <fld31> <event_source> Division by zero occurred. 
	else if [logstash][msgparser][id] == "msgParserId1243" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Division by zero occurred." }
			id => "msgParserId1243"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1244
	# line in RSA:  <fld30> <fld31> <event_source> Do not call this stored procedure for schema change because the current database is not enabled for replication. 
	else if [logstash][msgparser][id] == "msgParserId1244" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Do not call this stored procedure for schema change because the current database is not enabled for replication." }
			id => "msgParserId1244"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1245
	# line in RSA:  <fld30> <fld31> <event_source> done packet status field <fld1> 
	else if [logstash][msgparser][id] == "msgParserId1245" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} done packet status field %{fld1}" }
			id => "msgParserId1245"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1246
	# line in RSA:  <fld30> <fld31> <event_source> Drop the Distributor before you uninstall replication.  
	else if [logstash][msgparser][id] == "msgParserId1246" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Drop the Distributor before you uninstall replication." }
			id => "msgParserId1246"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1247
	# line in RSA:  <fld30> <fld31> <event_source> Dropped <fld1> anonymous subscription(s). 
	else if [logstash][msgparser][id] == "msgParserId1247" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Dropped %{fld1} anonymous subscription(s)." }
			id => "msgParserId1247"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Dropping" {
		# MESSAGE 001164
		# line in RSA:  <fld30> <fld31> <event_source> Dropping a column that is being used by a merge filter clause is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Dropping a column that is being used by a merge filter clause is not allowed." }
				id => "message-001164"
				add_field => {
					"[event][id]" => "001164"
					"[rsa][message][id1]" => "001164"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001165
		# line in RSA:  <fld30> <fld31> <event_source> Dropping row filter(<fld1>) for article '<fld2>' in '<fld3>'. Reissue sp_articlefilter and sp_articleview to create a row filter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Dropping row filter(%{fld1}) for article '%{fld2}' in '%{fld3}'. Reissue sp_articlefilter and sp_articleview to create a row filter." }
				id => "message-001165"
				add_field => {
					"[event][id]" => "001165"
					"[rsa][message][id1]" => "001165"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "DTS" {
		# MESSAGE 001166
		# line in RSA:  <fld30> <fld31> <event_source> DTS Category '<fld1>' already exists in the specified parent category. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DTS Category '%{fld1}' already exists in the specified parent category." }
				id => "message-001166"
				add_field => {
					"[event][id]" => "001166"
					"[rsa][message][id1]" => "001166"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001167
		# line in RSA:  <fld30> <fld31> <event_source> DTS Category '<fld1>' contains packages and/or other categories. You must drop these first, or specify a recursive drop. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DTS Category '%{fld1}' contains packages and/or other categories. You must drop these first, or specify a recursive drop." }
				id => "message-001167"
				add_field => {
					"[event][id]" => "001167"
					"[rsa][message][id1]" => "001167"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001168
		# line in RSA:  <fld30> <fld31> <event_source> DTS Category '<fld1>' was found in multiple parent categories. You must uniquely specify the category to be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DTS Category '%{fld1}' was found in multiple parent categories. You must uniquely specify the category to be dropped." }
				id => "message-001168"
				add_field => {
					"[event][id]" => "001168"
					"[rsa][message][id1]" => "001168"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001169
		# line in RSA:  <fld30> <fld31> <event_source> DTS Package '<fld1>' already exists with a different ID in this category. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DTS Package '%{fld1}' already exists with a different ID in this category." }
				id => "message-001169"
				add_field => {
					"[event][id]" => "001169"
					"[rsa][message][id1]" => "001169"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001170
		# line in RSA:  <fld30> <fld31> <event_source> DTS Package '<fld1>' exists in another category. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DTS Package '%{fld1}' exists in another category." }
				id => "message-001170"
				add_field => {
					"[event][id]" => "001170"
					"[rsa][message][id1]" => "001170"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001171
		# line in RSA:  <fld30> <fld31> <event_source> DTS Package '<fld1>' exists in different categories. You must uniquely specify the package. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DTS Package '%{fld1}' exists in different categories. You must uniquely specify the package." }
				id => "message-001171"
				add_field => {
					"[event][id]" => "001171"
					"[rsa][message][id1]" => "001171"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001172
		# line in RSA:  <fld30> <fld31> <event_source> DTS Package 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DTS Package" }
				id => "message-001172"
				add_field => {
					"[event][id]" => "001172"
					"[rsa][message][id1]" => "001172"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001174
		# line in RSA:  <fld30> <fld31> <event_source> DTS properties cannot be set because the publication does not allow for data transformation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} DTS properties cannot be set because the publication does not allow for data transformation." }
				id => "message-001174"
				add_field => {
					"[event][id]" => "001174"
					"[rsa][message][id1]" => "001174"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Duplicate" {
		# MESSAGE 001175
		# line in RSA:  <fld30> <fld31> <event_source> Duplicate column specified as ROWGUIDCOL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Duplicate column specified as ROWGUIDCOL." }
				id => "message-001175"
				add_field => {
					"[event][id]" => "001175"
					"[rsa][message][id1]" => "001175"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001176
		# line in RSA:  <fld30> <fld31> <event_source> Duplicate columns specified in <fld1> constraint key list, table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Duplicate columns specified in %{fld1} constraint key list, table '%{fld2}'." }
				id => "message-001176"
				add_field => {
					"[event][id]" => "001176"
					"[rsa][message][id1]" => "001176"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001177
		# line in RSA:  <fld30> <fld31> <event_source> Duplicate index names '<fld1>' and '<fld2>' detected on table '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Duplicate index names '%{fld1}' and '%{fld2}' detected on table '%{fld3}'." }
				id => "message-001177"
				add_field => {
					"[event][id]" => "001177"
					"[rsa][message][id1]" => "001177"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001178
		# line in RSA:  <fld30> <fld31> <event_source> Duplicate key was ignored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Duplicate key was ignored." }
				id => "message-001178"
				add_field => {
					"[event][id]" => "001178"
					"[rsa][message][id1]" => "001178"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001179
		# line in RSA:  <fld30> <fld31> <event_source> Duplicate row was ignored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Duplicate row was ignored." }
				id => "message-001179"
				add_field => {
					"[event][id]" => "001179"
					"[rsa][message][id1]" => "001179"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001180
		# line in RSA:  <fld30> <fld31> <event_source> Duplicate rows found in <fld1>. Unique index not created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Duplicate rows found in %{fld1}. Unique index not created." }
				id => "message-001180"
				add_field => {
					"[event][id]" => "001180"
					"[rsa][message][id1]" => "001180"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1264
	# line in RSA:  <fld30> <fld31> <event_source> During rollback, process <fld1> was expected to hold mode <fld2> lock at level <fld3> for row <fld4>_RID in database '<fld5>' under transaction <fld6>_XID. 
	else if [logstash][msgparser][id] == "msgParserId1264" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} During rollback, process %{fld1} was expected to hold mode %{fld2} lock at level %{fld3} for row %{fld4}_RID in database '%{fld5}' under transaction %{fld6}_XID." }
			id => "msgParserId1264"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Each" {
		# MESSAGE 001182
		# line in RSA:  <fld30> <fld31> <event_source> Each disk file size must be greater than or equal to 1 MB. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Each disk file size must be greater than or equal to 1 MB." }
				id => "message-001182"
				add_field => {
					"[event][id]" => "001182"
					"[rsa][message][id1]" => "001182"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001183
		# line in RSA:  <fld30> <fld31> <event_source> Each file size must be greater than or equal to 512 KB. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Each file size must be greater than or equal to 512 KB." }
				id => "message-001183"
				add_field => {
					"[event][id]" => "001183"
					"[rsa][message][id1]" => "001183"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Either" {
		# MESSAGE 001184
		# line in RSA:  <fld30> <fld31> <event_source> Either @publisher (and @publisher_db) or @subscriber (and @subscriber_db) must be specified, but both cannot be specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Either @publisher (and @publisher_db) or @subscriber (and @subscriber_db) must be specified, but both cannot be specified." }
				id => "message-001184"
				add_field => {
					"[event][id]" => "001184"
					"[rsa][message][id1]" => "001184"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001185
		# line in RSA:  <fld30> <fld31> <event_source> Either column '<fld1>.<fld2>' or referencing column '<fld3>.<fld4>' in foreign key '<fld5>' is a timestamp column. This data type cannot be used with cascading referential integrity constraints. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Either column '%{fld1}.%{fld2}' or referencing column '%{fld3}.%{fld4}' in foreign key '%{fld5}' is a timestamp column. This data type cannot be used with cascading referential integrity constraints." }
				id => "message-001185"
				add_field => {
					"[event][id]" => "001185"
					"[rsa][message][id1]" => "001185"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001186
		# line in RSA:  <fld30> <fld31> <event_source> Either start LSN or end LSN specified in OpenRowset(DBLog, ...) is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Either start LSN or end LSN specified in OpenRowset(DBLog, ...) is invalid." }
				id => "message-001186"
				add_field => {
					"[event][id]" => "001186"
					"[rsa][message][id1]" => "001186"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001187
		# line in RSA:  <fld30> <fld31> <event_source> Either the parameter @objname is ambiguous or the claimed @objtype (<fld1>) is wrong. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Either the parameter @objname is ambiguous or the claimed @objtype (%{fld1}) is wrong." }
				id => "message-001187"
				add_field => {
					"[event][id]" => "001187"
					"[rsa][message][id1]" => "001187"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001188
		# line in RSA:  <fld30> <fld31> <event_source> Either the snapshot files have not been generated or they have been cleaned up. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Either the snapshot files have not been generated or they have been cleaned up." }
				id => "message-001188"
				add_field => {
					"[event][id]" => "001188"
					"[rsa][message][id1]" => "001188"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1272
	# line in RSA:  <fld30> <fld31> <event_source> ELEMENTS mode requires FOR XML AUTO. 
	else if [logstash][msgparser][id] == "msgParserId1272" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} ELEMENTS mode requires FOR XML AUTO." }
			id => "msgParserId1272"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1273
	# line in RSA:  <fld30> <fld31> <event_source> Enabling <fld1> option for database '<fld2>'. 
	else if [logstash][msgparser][id] == "msgParserId1273" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Enabling %{fld1} option for database '%{fld2}'." }
			id => "msgParserId1273"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1274
	# line in RSA:  <fld30> <fld31> <event_source> Encountered an unexpected error while checking the sector size for file '<fld1>'. Check the SQL Server error log for more information. 
	else if [logstash][msgparser][id] == "msgParserId1274" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Encountered an unexpected error while checking the sector size for file '%{fld1}'. Check the SQL Server error log for more information." }
			id => "msgParserId1274"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1275
	# line in RSA:  <fld30> <fld31> <event_source> Encryption requested but no valid certificate was found. SQL Server terminating. 
	else if [logstash][msgparser][id] == "msgParserId1275" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Encryption requested but no valid certificate was found. SQL Server terminating." }
			id => "msgParserId1275"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1276
	# line in RSA:  <fld30> <fld31> <event_source> End of tape has been reached. Remove tape '<fld1>' and mount next tape for <fld2> of database '<fld3>'. 
	else if [logstash][msgparser][id] == "msgParserId1276" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} End of tape has been reached. Remove tape '%{fld1}' and mount next tape for %{fld2} of database '%{fld3}'." }
			id => "msgParserId1276"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1277
	# line in RSA:  <fld30> <fld31> <event_source> Enlist of MSDTC transaction failed: <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId1277" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Enlist of MSDTC transaction failed: %{fld1}." }
			id => "msgParserId1277"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1278
	# line in RSA:  <fld30> <fld31> <event_source> error severity type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId1278" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} error severity type %{fld1}" }
			id => "msgParserId1278"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Error" {
		# MESSAGE 001196
		# line in RSA:  <fld30> <fld31> <event_source> Error accepting connection request via Net-Library '<fld1>'. Execution continuing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error accepting connection request via Net-Library '%{fld1}'. Execution continuing." }
				id => "message-001196"
				add_field => {
					"[event][id]" => "001196"
					"[rsa][message][id1]" => "001196"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001197
		# line in RSA:  <fld30> <fld31> <event_source> Error converting data type <fld1> to <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error converting data type %{fld1} to %{fld2}." }
				id => "message-001197"
				add_field => {
					"[event][id]" => "001197"
					"[rsa][message][id1]" => "001197"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001198
		# line in RSA:  <fld30> <fld31> <event_source> Error evaluating article synchronization object after column drop. The filter clause for article '<fld1>' must not reference the dropped column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error evaluating article synchronization object after column drop. The filter clause for article '%{fld1}' must not reference the dropped column." }
				id => "message-001198"
				add_field => {
					"[event][id]" => "001198"
					"[rsa][message][id1]" => "001198"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001199
		# line in RSA:  <fld30> <fld31> <event_source> Error expanding '*':  An uncomparable column has been found in an underlying table or view. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error expanding '*':  An uncomparable column has been found in an underlying table or view." }
				id => "message-001199"
				add_field => {
					"[event][id]" => "001199"
					"[rsa][message][id1]" => "001199"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001200
		# line in RSA:  <fld30> <fld31> <event_source> Error expanding '*': all columns incomparable, '*' expanded to zero columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error expanding '*': all columns incomparable, '*' expanded to zero columns." }
				id => "message-001200"
				add_field => {
					"[event][id]" => "001200"
					"[rsa][message][id1]" => "001200"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001201
		# line in RSA:  <fld30> <fld31> <event_source> Error number <fld1> is invalid. The number must be from <fld2> through <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error number %{fld1} is invalid. The number must be from %{fld2} through %{fld3}" }
				id => "message-001201"
				add_field => {
					"[event][id]" => "001201"
					"[rsa][message][id1]" => "001201"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001202
		# line in RSA:  <fld30> <fld31> <event_source> Error recovering database '<fld1>'. Could not connect to MSDTC to check the completion status of transaction <fld2>_XID. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error recovering database '%{fld1}'. Could not connect to MSDTC to check the completion status of transaction %{fld2}_XID." }
				id => "message-001202"
				add_field => {
					"[event][id]" => "001202"
					"[rsa][message][id1]" => "001202"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001203
		# line in RSA:  <fld30> <fld31> <event_source> Error severity levels greater than <fld1> can only be specified by members of the sysadmin role, using the WITH LOG option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error severity levels greater than %{fld1} can only be specified by members of the sysadmin role, using the WITH LOG option." }
				id => "message-001203"
				add_field => {
					"[event][id]" => "001203"
					"[rsa][message][id1]" => "001203"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001204
		# line in RSA:  <fld30> <fld31> <event_source> Error while closing database '<fld1>' cleanly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error while closing database '%{fld1}' cleanly." }
				id => "message-001204"
				add_field => {
					"[event][id]" => "001204"
					"[rsa][message][id1]" => "001204"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001205
		# line in RSA:  <fld30> <fld31> <event_source> Error while redoing logged operation in database '<fld1>'. Error at log record ID <fld2>_LSN. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error while redoing logged operation in database '%{fld1}'. Error at log record ID %{fld2}_LSN." }
				id => "message-001205"
				add_field => {
					"[event][id]" => "001205"
					"[rsa][message][id1]" => "001205"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001206
		# line in RSA:  <fld30> <fld31> <event_source> Error while undoing logged operation in database '<fld1>'. Error at log record ID <fld2>_LSN. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error while undoing logged operation in database '%{fld1}'. Error at log record ID %{fld2}_LSN." }
				id => "message-001206"
				add_field => {
					"[event][id]" => "001206"
					"[rsa][message][id1]" => "001206"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001207
		# line in RSA:  <fld30> <fld31> <event_source> Error writing audit trace.  SQL Server is shutting down. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error writing audit trace.  SQL Server is shutting down." }
				id => "message-001207"
				add_field => {
					"[event][id]" => "001207"
					"[rsa][message][id1]" => "001207"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001209
		# line in RSA:  <fld30> <fld31> <event_source> Error: <result>, Severity: <fld1>, State: <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error: %{result}, Severity: %{fld1}, State: %{fld2}" }
				id => "message-001209"
				add_field => {
					"[event][id]" => "001209"
					"[rsa][message][id1]" => "001209"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001211
		# line in RSA:  <fld30> <fld31> <event_source> Error: Cannot bulk copy into a table '<fld1>' enabled for immediate-updating subscriptions 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error: Cannot bulk copy into a table '%{fld1}' enabled for immediate-updating subscriptions" }
				id => "message-001211"
				add_field => {
					"[event][id]" => "001211"
					"[rsa][message][id1]" => "001211"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001212
		# line in RSA:  <fld30> <fld31> <event_source> Error: DBCC DBREPAIR REMAP failed for database '<fld1>' (device '<fld2>'). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error: DBCC DBREPAIR REMAP failed for database '%{fld1}' (device '%{fld2}')." }
				id => "message-001212"
				add_field => {
					"[event][id]" => "001212"
					"[rsa][message][id1]" => "001212"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001213
		# line in RSA:  <fld30> <fld31> <event_source> Error: Explicit @itemtype '<fld1>' is unrecognized (<fld2>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error: Explicit @itemtype '%{fld1}' is unrecognized (%{fld2})." }
				id => "message-001213"
				add_field => {
					"[event][id]" => "001213"
					"[rsa][message][id1]" => "001213"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001214
		# line in RSA:  <fld30> <fld31> <event_source> Error: The @newname value '<fld1>' is already in use as a <fld2> name and would cause a duplicate that is not permitted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error: The @newname value '%{fld1}' is already in use as a %{fld2} name and would cause a duplicate that is not permitted." }
				id => "message-001214"
				add_field => {
					"[event][id]" => "001214"
					"[rsa][message][id1]" => "001214"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001215
		# line in RSA:  <fld30> <fld31> <event_source> Error: The input parameter '<fld1>' is not allowed to be null. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error: The input parameter '%{fld1}' is not allowed to be null." }
				id => "message-001215"
				add_field => {
					"[event][id]" => "001215"
					"[rsa][message][id1]" => "001215"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001216
		# line in RSA:  <fld30> <fld31> <event_source> Error: The qualified @oldname references a database (<fld2>) other than the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error: The qualified @oldname references a database (%{fld2}) other than the current database." }
				id => "message-001216"
				add_field => {
					"[event][id]" => "001216"
					"[rsa][message][id1]" => "001216"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001217
		# line in RSA:  <fld30> <fld31> <event_source> Error: The value for the @newname parameter contains invalid characters or violates a basic restriction (<fld1>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error: The value for the @newname parameter contains invalid characters or violates a basic restriction (%{fld1})." }
				id => "message-001217"
				add_field => {
					"[event][id]" => "001217"
					"[rsa][message][id1]" => "001217"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1291
	# line in RSA:  <fld30> <fld31> <event_source> Error. Updating sysdatabases returned <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId1291" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Error. Updating sysdatabases returned %{fld1}." }
			id => "msgParserId1291"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1300
	# line in RSA:  <fld30> <fld31> <event_source> Errorlog has been reinitialized.  See previous log for older entries.
	else if [logstash][msgparser][id] == "msgParserId1300" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Errorlog has been reinitialized.  See previous log for older entries." }
			id => "msgParserId1300"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1301
	# line in RSA:  <fld30> <fld31> <event_source> event type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId1301" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} event type %{fld1}" }
			id => "msgParserId1301"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1302
	# line in RSA:  <fld30> <fld31> <event_source> Every IDREFS or NMTOKENS column in a FOR XML EXPLICIT query must appear in a separate SELECT clause, and the instances must be ordered directly after the element to which they belong. 
	else if [logstash][msgparser][id] == "msgParserId1302" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Every IDREFS or NMTOKENS column in a FOR XML EXPLICIT query must appear in a separate SELECT clause, and the instances must be ordered directly after the element to which they belong." }
			id => "msgParserId1302"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1303
	# line in RSA:  <fld30> <fld31> <event_source> Excluding the last column in the partition is not allowed. 
	else if [logstash][msgparser][id] == "msgParserId1303" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Excluding the last column in the partition is not allowed." }
			id => "msgParserId1303"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1304
	# line in RSA:  <fld30> <fld31> <event_source> Exclusive access could not be obtained because the database is in use. 
	else if [logstash][msgparser][id] == "msgParserId1304" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Exclusive access could not be obtained because the database is in use." }
			id => "msgParserId1304"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1305
	# line in RSA:  <fld30> <fld31> <event_source> EXECUTE cannot be used as a source when inserting into a table variable. 
	else if [logstash][msgparser][id] == "msgParserId1305" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} EXECUTE cannot be used as a source when inserting into a table variable." }
			id => "msgParserId1305"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1306
	# line in RSA:  <fld30> <fld31> <event_source> Executing SQL directly; no cursor. 
	else if [logstash][msgparser][id] == "msgParserId1306" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Executing SQL directly; no cursor." }
			id => "msgParserId1306"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Execution" {
		# MESSAGE 001224
		# line in RSA:  <fld30> <fld31> <event_source> Execution of a full-text operation failed. <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Execution of a full-text operation failed. %{fld1}" }
				id => "message-001224"
				add_field => {
					"[event][id]" => "001224"
					"[rsa][message][id1]" => "001224"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001225
		# line in RSA:  <fld30> <fld31> <event_source> Execution of filter stored procedure <fld1> failed. See the SQL Server errorlog for more information. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Execution of filter stored procedure %{fld1} failed. See the SQL Server errorlog for more information." }
				id => "message-001225"
				add_field => {
					"[event][id]" => "001225"
					"[rsa][message][id1]" => "001225"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001226
		# line in RSA:  <fld30> <fld31> <event_source> Execution terminated by the provider because a resource limit was reached. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Execution terminated by the provider because a resource limit was reached." }
				id => "message-001226"
				add_field => {
					"[event][id]" => "001226"
					"[rsa][message][id1]" => "001226"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Expected" {
		# MESSAGE 001227
		# line in RSA:  <fld30> <fld31> <event_source> Expected the column offset in data stream for bulk copy of text or image data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Expected the column offset in data stream for bulk copy of text or image data." }
				id => "message-001227"
				add_field => {
					"[event][id]" => "001227"
					"[rsa][message][id1]" => "001227"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001228
		# line in RSA:  <fld30> <fld31> <event_source> Expected the row offset in data stream for bulk copy of text or image data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Expected the row offset in data stream for bulk copy of text or image data." }
				id => "message-001228"
				add_field => {
					"[event][id]" => "001228"
					"[rsa][message][id1]" => "001228"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001229
		# line in RSA:  <fld30> <fld31> <event_source> Expected the text length in data stream for bulk copy of text, ntext, or image data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Expected the text length in data stream for bulk copy of text, ntext, or image data." }
				id => "message-001229"
				add_field => {
					"[event][id]" => "001229"
					"[rsa][message][id1]" => "001229"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001230
		# line in RSA:  <fld30> <fld31> <event_source> Expected the TEXT token in data stream for bulk copy of text or image data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Expected the TEXT token in data stream for bulk copy of text or image data." }
				id => "message-001230"
				add_field => {
					"[event][id]" => "001230"
					"[rsa][message][id1]" => "001230"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001231
		# line in RSA:  <fld30> <fld31> <event_source> Expected to find buffer in keep slot for table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Expected to find buffer in keep slot for table '%{fld1}'." }
				id => "message-001231"
				add_field => {
					"[event][id]" => "001231"
					"[rsa][message][id1]" => "001231"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1315
	# line in RSA:  <fld30> <fld31> <event_source> Expired subscription clean up 
	else if [logstash][msgparser][id] == "msgParserId1315" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Expired subscription clean up" }
			id => "msgParserId1315"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Explicit" {
		# MESSAGE 001233
		# line in RSA:  <fld30> <fld31> <event_source> Explicit conversion from data type <fld1> to <fld2> is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Explicit conversion from data type %{fld1} to %{fld2} is not allowed." }
				id => "message-001233"
				add_field => {
					"[event][id]" => "001233"
					"[rsa][message][id1]" => "001233"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001234
		# line in RSA:  <fld30> <fld31> <event_source> Explicit value must be specified for identity column in table '<fld1>' when IDENTITY_INSERT is set to ON. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Explicit value must be specified for identity column in table '%{fld1}' when IDENTITY_INSERT is set to ON." }
				id => "message-001234"
				add_field => {
					"[event][id]" => "001234"
					"[rsa][message][id1]" => "001234"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Expression" {
		# MESSAGE 001235
		# line in RSA:  <fld30> <fld31> <event_source> Expression result length exceeds the maximum. <fld1> max, <fld2> found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Expression result length exceeds the maximum. %{fld1} max, %{fld2} found." }
				id => "message-001235"
				add_field => {
					"[event][id]" => "001235"
					"[rsa][message][id1]" => "001235"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001236
		# line in RSA:  <fld30> <fld31> <event_source> Expression type <fld1> is invalid for COLLATE clause.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Expression type %{fld1} is invalid for COLLATE clause." }
				id => "message-001236"
				add_field => {
					"[event][id]" => "001236"
					"[rsa][message][id1]" => "001236"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Extended" {
		# MESSAGE 001237
		# line in RSA:  <fld30> <fld31> <event_source> Extended procedure memory allocation failed for '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extended procedure memory allocation failed for '%{fld1}'." }
				id => "message-001237"
				add_field => {
					"[event][id]" => "001237"
					"[rsa][message][id1]" => "001237"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001238
		# line in RSA:  <fld30> <fld31> <event_source> Extended stored procedure DLL '<fld1>' does not export __GetXpVersion(). Refer to the topic "Backward Compatibility Details (Level 1) - Open Data Services" in the documentation for more information. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extended stored procedure DLL '%{fld1}' does not export __GetXpVersion(). Refer to the topic \"Backward Compatibility Details (Level 1) - Open Data Services\" in the documentation for more information." }
				id => "message-001238"
				add_field => {
					"[event][id]" => "001238"
					"[rsa][message][id1]" => "001238"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001239
		# line in RSA:  <fld30> <fld31> <event_source> Extended stored procedure DLL '<fld1>' reports its version is <fld2>.<fld3>. Server expects version <fld4>.<fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extended stored procedure DLL '%{fld1}' reports its version is %{fld2}.%{fld3}. Server expects version %{fld4}.%{fld5}." }
				id => "message-001239"
				add_field => {
					"[event][id]" => "001239"
					"[rsa][message][id1]" => "001239"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001240
		# line in RSA:  <fld30> <fld31> <event_source> Extended stored procedures can only be created in the master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extended stored procedures can only be created in the master database." }
				id => "message-001240"
				add_field => {
					"[event][id]" => "001240"
					"[rsa][message][id1]" => "001240"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1324
	# line in RSA:  <fld30> <fld31> <event_source> Extending database by  <fld1> MB on disk '<fld2>'. 
	else if [logstash][msgparser][id] == "msgParserId1324" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extending database by  %{fld1} MB on disk '%{fld2}'." }
			id => "msgParserId1324"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Extent" {
		# MESSAGE 001242
		# line in RSA:  <fld30> <fld31> <event_source> Extent <fld1> in database ID <fld2> is allocated by more than one allocation object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extent %{fld1} in database ID %{fld2} is allocated by more than one allocation object." }
				id => "message-001242"
				add_field => {
					"[event][id]" => "001242"
					"[rsa][message][id1]" => "001242"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001243
		# line in RSA:  <fld30> <fld31> <event_source> Extent <fld1> in database ID <fld2> is allocated in both GAM <fld3> and SGAM <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extent %{fld1} in database ID %{fld2} is allocated in both GAM %{fld3} and SGAM %{fld4}." }
				id => "message-001243"
				add_field => {
					"[event][id]" => "001243"
					"[rsa][message][id1]" => "001243"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001244
		# line in RSA:  <fld30> <fld31> <event_source> Extent <fld1> in database ID <fld2> is marked allocated in the GAM, but no SGAM or IAM has allocated it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extent %{fld1} in database ID %{fld2} is marked allocated in the GAM, but no SGAM or IAM has allocated it." }
				id => "message-001244"
				add_field => {
					"[event][id]" => "001244"
					"[rsa][message][id1]" => "001244"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001245
		# line in RSA:  <fld30> <fld31> <event_source> Extent <fld1> is allocated to '<fld2>' and at least one other object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extent %{fld1} is allocated to '%{fld2}' and at least one other object." }
				id => "message-001245"
				add_field => {
					"[event][id]" => "001245"
					"[rsa][message][id1]" => "001245"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001246
		# line in RSA:  <fld30> <fld31> <event_source> Extent <fld1> not found in shared extent directory. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extent %{fld1} not found in shared extent directory." }
				id => "message-001246"
				add_field => {
					"[event][id]" => "001246"
					"[rsa][message][id1]" => "001246"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001247
		# line in RSA:  <fld30> <fld31> <event_source> Extent ID <fld1> which should belong to syslogs belongs to object ID <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Extent ID %{fld1} which should belong to syslogs belongs to object ID %{fld2}." }
				id => "message-001247"
				add_field => {
					"[event][id]" => "001247"
					"[rsa][message][id1]" => "001247"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Failed" {
		# MESSAGE 001248
		# line in RSA:  <fld30> <fld31> <event_source> Failed to access file '<fld1>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to access file '%{fld1}'" }
				id => "message-001248"
				add_field => {
					"[event][id]" => "001248"
					"[rsa][message][id1]" => "001248"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001250
		# line in RSA:  <fld30> <fld31> <event_source> Failed to acquire the application lock indicating the front of the queue. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to acquire the application lock indicating the front of the queue." }
				id => "message-001250"
				add_field => {
					"[event][id]" => "001250"
					"[rsa][message][id1]" => "001250"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001251
		# line in RSA:  <fld30> <fld31> <event_source> Failed to add column '<fld1>' to table '<fld2>' because of metadata overflow. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to add column '%{fld1}' to table '%{fld2}' because of metadata overflow." }
				id => "message-001251"
				add_field => {
					"[event][id]" => "001251"
					"[rsa][message][id1]" => "001251"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001252
		# line in RSA:  <fld30> <fld31> <event_source> Failed to add column '<fld1>' to table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to add column '%{fld1}' to table '%{fld2}'." }
				id => "message-001252"
				add_field => {
					"[event][id]" => "001252"
					"[rsa][message][id1]" => "001252"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001253
		# line in RSA:  <fld30> <fld31> <event_source> Failed to add publication '<fld1>' to Active Directory. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to add publication '%{fld1}' to Active Directory. %{fld2}" }
				id => "message-001253"
				add_field => {
					"[event][id]" => "001253"
					"[rsa][message][id1]" => "001253"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001254
		# line in RSA:  <fld30> <fld31> <event_source> Failed to adjust Publisher identity range for publication '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to adjust Publisher identity range for publication '%{fld1}'." }
				id => "message-001254"
				add_field => {
					"[event][id]" => "001254"
					"[rsa][message][id1]" => "001254"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001255
		# line in RSA:  <fld30> <fld31> <event_source> Failed to adjust Publisher identity range for table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to adjust Publisher identity range for table '%{fld1}'." }
				id => "message-001255"
				add_field => {
					"[event][id]" => "001255"
					"[rsa][message][id1]" => "001255"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001256
		# line in RSA:  <fld30> <fld31> <event_source> Failed to allocate new identity range. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to allocate new identity range." }
				id => "message-001256"
				add_field => {
					"[event][id]" => "001256"
					"[rsa][message][id1]" => "001256"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001257
		# line in RSA:  <fld30> <fld31> <event_source> Failed to change the owner of '<fld1>' to '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to change the owner of '%{fld1}' to '%{fld2}'." }
				id => "message-001257"
				add_field => {
					"[event][id]" => "001257"
					"[rsa][message][id1]" => "001257"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001258
		# line in RSA:  <fld30> <fld31> <event_source> Failed to copy user script file to the Distributor.(<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to copy user script file to the Distributor.(%{fld1})" }
				id => "message-001258"
				add_field => {
					"[event][id]" => "001258"
					"[rsa][message][id1]" => "001258"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001259
		# line in RSA:  <fld30> <fld31> <event_source> Failed to create a sub-directory under the replication working directory.(<fld1>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to create a sub-directory under the replication working directory.(%{fld1})" }
				id => "message-001259"
				add_field => {
					"[event][id]" => "001259"
					"[rsa][message][id1]" => "001259"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001260
		# line in RSA:  <fld30> <fld31> <event_source> Failed to drop column '<fld1>' from table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to drop column '%{fld1}' from table '%{fld2}'." }
				id => "message-001260"
				add_field => {
					"[event][id]" => "001260"
					"[rsa][message][id1]" => "001260"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001261
		# line in RSA:  <fld30> <fld31> <event_source> Failed to drop column '<fld1>' from the partition because a computed column is accessing it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to drop column '%{fld1}' from the partition because a computed column is accessing it." }
				id => "message-001261"
				add_field => {
					"[event][id]" => "001261"
					"[rsa][message][id1]" => "001261"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001262
		# line in RSA:  <fld30> <fld31> <event_source> Failed to encrypt string <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to encrypt string %{fld1}" }
				id => "message-001262"
				add_field => {
					"[event][id]" => "001262"
					"[rsa][message][id1]" => "001262"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001263
		# line in RSA:  <fld30> <fld31> <event_source> Failed to get MSDTC PREPARE information: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to get MSDTC PREPARE information: %{fld1}." }
				id => "message-001263"
				add_field => {
					"[event][id]" => "001263"
					"[rsa][message][id1]" => "001263"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001264
		# line in RSA:  <fld30> <fld31> <event_source> Failed to instantiate class '<fld1>'. Make sure Msxml2.dll exists in the SQL Server installation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to instantiate class '%{fld1}'. Make sure Msxml2.dll exists in the SQL Server installation." }
				id => "message-001264"
				add_field => {
					"[event][id]" => "001264"
					"[rsa][message][id1]" => "001264"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001265
		# line in RSA:  <fld30> <fld31> <event_source> Failed to load Msxml2.dll. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to load Msxml2.dll." }
				id => "message-001265"
				add_field => {
					"[event][id]" => "001265"
					"[rsa][message][id1]" => "001265"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003582
		# line in RSA:  <fld30> <fld31> <event_source> <space> Failed to obtain <fld34>: Result Code = <resultcode> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} %{space} Failed to obtain %{fld34}: Result Code = %{resultcode}" }
				id => "message-003582"
				add_field => {
					"[event][id]" => "003582"
					"[rsa][message][id1]" => "003582"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001266
		# line in RSA:  <fld30> <fld31> <event_source> Failed to restart the current database. The current database is switched to master. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to restart the current database. The current database is switched to master." }
				id => "message-001266"
				add_field => {
					"[event][id]" => "001266"
					"[rsa][message][id1]" => "001266"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001267
		# line in RSA:  <fld30> <fld31> <event_source> Failed to resynchronize this subscription. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to resynchronize this subscription." }
				id => "message-001267"
				add_field => {
					"[event][id]" => "001267"
					"[rsa][message][id1]" => "001267"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001268
		# line in RSA:  <fld30> <fld31> <event_source> Failed to retrieve information about the publication : <fld1>. Check the name again. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to retrieve information about the publication : %{fld1}. Check the name again." }
				id => "message-001268"
				add_field => {
					"[event][id]" => "001268"
					"[rsa][message][id1]" => "001268"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003608
		# line in RSA:  <fld30> <fld31> <event_source> Failed to obtain TransactionDispenserInterface: <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Failed to obtain TransactionDispenserInterface: %{fld1}" }
				id => "message-003608"
				add_field => {
					"[event][id]" => "003608"
					"[rsa][message][id1]" => "003608"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "File" {
		# MESSAGE 001269
		# line in RSA:  <fld30> <fld31> <event_source> File <fld1> (number of mixed extents = <fld2>, mixed pages = <fld3>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File %{fld1} (number of mixed extents = %{fld2}, mixed pages = %{fld3})." }
				id => "message-001269"
				add_field => {
					"[event][id]" => "001269"
					"[rsa][message][id1]" => "001269"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001270
		# line in RSA:  <fld30> <fld31> <event_source> File <fld1>. Extents <fld2>, used pages <fld3>, reserved pages <fld4>, mixed extents <fld5>, mixed pages <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File %{fld1}. Extents %{fld2}, used pages %{fld3}, reserved pages %{fld4}, mixed extents %{fld5}, mixed pages %{fld6}." }
				id => "message-001270"
				add_field => {
					"[event][id]" => "001270"
					"[rsa][message][id1]" => "001270"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001271
		# line in RSA:  <fld30> <fld31> <event_source> File <fld1>. Number of extents = <fld2>, used pages = <fld3>, reserved pages = <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File %{fld1}. Number of extents = %{fld2}, used pages = %{fld3}, reserved pages = %{fld4}." }
				id => "message-001271"
				add_field => {
					"[event][id]" => "001271"
					"[rsa][message][id1]" => "001271"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001272
		# line in RSA:  <fld30> <fld31> <event_source> File <fld1> is not in the correct state to have this differential backup applied to it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File %{fld1} is not in the correct state to have this differential backup applied to it." }
				id => "message-001272"
				add_field => {
					"[event][id]" => "001272"
					"[rsa][message][id1]" => "001272"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001273
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' already used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' already used." }
				id => "message-001273"
				add_field => {
					"[event][id]" => "001273"
					"[rsa][message][id1]" => "001273"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001274
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' either does not exist or is not a recognizable trace file. Or there was an error opening the file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' either does not exist or is not a recognizable trace file. Or there was an error opening the file." }
				id => "message-001274"
				add_field => {
					"[event][id]" => "001274"
					"[rsa][message][id1]" => "001274"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001275
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' is on a network device not supported for database files. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' is on a network device not supported for database files." }
				id => "message-001275"
				add_field => {
					"[event][id]" => "001275"
					"[rsa][message][id1]" => "001275"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001276
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' is on a network drive, which is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' is on a network drive, which is not allowed." }
				id => "message-001276"
				add_field => {
					"[event][id]" => "001276"
					"[rsa][message][id1]" => "001276"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001277
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' modified in sysaltfiles. Delete old file after restarting SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' modified in sysaltfiles. Delete old file after restarting SQL Server." }
				id => "message-001277"
				add_field => {
					"[event][id]" => "001277"
					"[rsa][message][id1]" => "001277"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001278
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' was not backed up in file <fld2> on device '<fld3>'. The file cannot be restored from this backup set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' was not backed up in file %{fld2} on device '%{fld3}'. The file cannot be restored from this backup set." }
				id => "message-001278"
				add_field => {
					"[event][id]" => "001278"
					"[rsa][message][id1]" => "001278"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001279
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' cannot be created. Use WITH MOVE to specify a usable physical file name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' cannot be created. Use WITH MOVE to specify a usable physical file name." }
				id => "message-001279"
				add_field => {
					"[event][id]" => "001279"
					"[rsa][message][id1]" => "001279"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001280
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' cannot be restored over the existing '<fld2>'. Reissue the RESTORE statement using WITH REPLACE to overwrite pre-existing files. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' cannot be restored over the existing '%{fld2}'. Reissue the RESTORE statement using WITH REPLACE to overwrite pre-existing files." }
				id => "message-001280"
				add_field => {
					"[event][id]" => "001280"
					"[rsa][message][id1]" => "001280"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001281
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' cannot be restored to '<fld2>'. Use WITH MOVE to identify a valid location for the file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' cannot be restored to '%{fld2}'. Use WITH MOVE to identify a valid location for the file." }
				id => "message-001281"
				add_field => {
					"[event][id]" => "001281"
					"[rsa][message][id1]" => "001281"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001282
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' cannot be reused until after the next BACKUP LOG operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' cannot be reused until after the next BACKUP LOG operation." }
				id => "message-001282"
				add_field => {
					"[event][id]" => "001282"
					"[rsa][message][id1]" => "001282"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001283
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' has an unsupported page size (<fld2>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' has an unsupported page size (%{fld2})." }
				id => "message-001283"
				add_field => {
					"[event][id]" => "001283"
					"[rsa][message][id1]" => "001283"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001284
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' has been rolled forward to LSN <fld2>. This log terminates at LSN <fld3>, which is too early to apply the WITH RECOVERY option. Reissue the RESTORE LOG statement WITH NORECOVERY. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' has been rolled forward to LSN %{fld2}. This log terminates at LSN %{fld3}, which is too early to apply the WITH RECOVERY option. Reissue the RESTORE LOG statement WITH NORECOVERY." }
				id => "message-001284"
				add_field => {
					"[event][id]" => "001284"
					"[rsa][message][id1]" => "001284"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001285
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' is claimed by '<fld2>'(<fld3>) and '<fld4>'(<fld5>). The WITH MOVE clause can be used to relocate one or more files. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' is claimed by '%{fld2}'(%{fld3}) and '%{fld4}'(%{fld5}). The WITH MOVE clause can be used to relocate one or more files." }
				id => "message-001285"
				add_field => {
					"[event][id]" => "001285"
					"[rsa][message][id1]" => "001285"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001286
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' is missing. Rollforward stops at log sequence number <fld2>. File is created at LSN <fld3>, dropped at LSN <fld4>. Restore transaction log beyond beyond point in time when file was dropped or restore data to be consistent with rest of database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' is missing. Rollforward stops at log sequence number %{fld2}. File is created at LSN %{fld3}, dropped at LSN %{fld4}. Restore transaction log beyond beyond point in time when file was dropped or restore data to be consistent with rest of database." }
				id => "message-001286"
				add_field => {
					"[event][id]" => "001286"
					"[rsa][message][id1]" => "001286"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001287
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' is not a valid undo file for database '<fld2>', database ID <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' is not a valid undo file for database '%{fld2}', database ID %{fld3}." }
				id => "message-001287"
				add_field => {
					"[event][id]" => "001287"
					"[rsa][message][id1]" => "001287"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001288
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' is not part of database '<fld2>'. You can only list files that are members of this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' is not part of database '%{fld2}'. You can only list files that are members of this database." }
				id => "message-001288"
				add_field => {
					"[event][id]" => "001288"
					"[rsa][message][id1]" => "001288"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001289
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' of database '<fld2>' has been removed or shrunk since this backup or restore operation was interrupted. The operation cannot be restarted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' of database '%{fld2}' has been removed or shrunk since this backup or restore operation was interrupted. The operation cannot be restarted." }
				id => "message-001289"
				add_field => {
					"[event][id]" => "001289"
					"[rsa][message][id1]" => "001289"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001290
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' was only partially restored by a database or file restore. The entire file must be successfully restored before applying the log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' was only partially restored by a database or file restore. The entire file must be successfully restored before applying the log." }
				id => "message-001290"
				add_field => {
					"[event][id]" => "001290"
					"[rsa][message][id1]" => "001290"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001291
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' closed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' closed." }
				id => "message-001291"
				add_field => {
					"[event][id]" => "001291"
					"[rsa][message][id1]" => "001291"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001292
		# line in RSA:  <fld30> <fld31> <event_source> File '<fld1>' was removed from tempdb, and will take effect upon server restart. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File '%{fld1}' was removed from tempdb, and will take effect upon server restart." }
				id => "message-001292"
				add_field => {
					"[event][id]" => "001292"
					"[rsa][message][id1]" => "001292"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001293
		# line in RSA:  <fld30> <fld31> <event_source> File option <fld1> is required in this CREATE/ALTER DATABASE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} File option %{fld1} is required in this CREATE/ALTER DATABASE statement." }
				id => "message-001293"
				add_field => {
					"[event][id]" => "001293"
					"[rsa][message][id1]" => "001293"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Filegroup" {
		# MESSAGE 001294
		# line in RSA:  <fld30> <fld31> <event_source> Filegroup <username> is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Filegroup %{username} is invalid." }
				id => "message-001294"
				add_field => {
					"[event][id]" => "001294"
					"[rsa][message][id1]" => "001294"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001295
		# line in RSA:  <fld30> <fld31> <event_source> Filegroup { '<username>' | <username> } is offline. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Filegroup[\s]+([\s]*'(?<username>[^']*)'[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+is[\s]+offline\.[\s]+$" }
				id => "message-001295"
				add_field => {
					"[event][id]" => "001295"
					"[rsa][message][id1]" => "001295"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001296
		# line in RSA:  <fld30> <fld31> <event_source> Filegroup '<username>' already exists in this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Filegroup '%{username}' already exists in this database." }
				id => "message-001296"
				add_field => {
					"[event][id]" => "001296"
					"[rsa][message][id1]" => "001296"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001297
		# line in RSA:  <fld30> <fld31> <event_source> Filegroup '<username>' has no files assigned to it. Tables, indexes, and text, ntext, and image columns cannot be created on this filegroup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Filegroup '%{username}' has no files assigned to it. Tables, indexes, and text, ntext, and image columns cannot be created on this filegroup." }
				id => "message-001297"
				add_field => {
					"[event][id]" => "001297"
					"[rsa][message][id1]" => "001297"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001298
		# line in RSA:  <fld30> <fld31> <event_source> Filegroup '<username>' has no files assigned to it. Tables, indexes, and text, ntext, and image columns cannot be populated on this filegroup until a file is added. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Filegroup '%{username}' has no files assigned to it. Tables, indexes, and text, ntext, and image columns cannot be populated on this filegroup until a file is added." }
				id => "message-001298"
				add_field => {
					"[event][id]" => "001298"
					"[rsa][message][id1]" => "001298"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001300
		# line in RSA:  <fld30> <fld31> <event_source> Filegroup '<username>' is read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Filegroup '%{username}' is read-only." }
				id => "message-001300"
				add_field => {
					"[event][id]" => "001300"
					"[rsa][message][id1]" => "001300"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1384
	# line in RSA:  <fld30> <fld31> <event_source> FILEGROWTH cannot be greater than MAXSIZE for file '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1384" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} FILEGROWTH cannot be greater than MAXSIZE for file '%{fld1}'." }
			id => "msgParserId1384"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1385
	# line in RSA:  <fld30> <fld31> <event_source> Fillfactor <fld1> is not a valid percentage; fillfactor must be between 1 and 100. 
	else if [logstash][msgparser][id] == "msgParserId1385" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Fillfactor %{fld1} is not a valid percentage; fillfactor must be between 1 and 100." }
			id => "msgParserId1385"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1386
	# line in RSA:  <fld30> <fld31> <event_source> Filter '<fld1>' of article '<fld2>' cannot be changed. 
	else if [logstash][msgparser][id] == "msgParserId1386" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Filter '%{fld1}' of article '%{fld2}' cannot be changed." }
			id => "msgParserId1386"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "FIPS" {
		# MESSAGE 001304
		# line in RSA:  <fld30> <fld31> <event_source> FIPS Warning: Implicit conversion from <fld1> to <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FIPS Warning: Implicit conversion from %{fld1} to %{fld2}." }
				id => "message-001304"
				add_field => {
					"[event][id]" => "001304"
					"[rsa][message][id1]" => "001304"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001305
		# line in RSA:  <fld30> <fld31> <event_source> FIPS Warning: Line <fld1> has the non-ANSI clause '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FIPS Warning: Line %{fld1} has the non-ANSI clause '%{fld2}'." }
				id => "message-001305"
				add_field => {
					"[event][id]" => "001305"
					"[rsa][message][id1]" => "001305"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001306
		# line in RSA:  <fld30> <fld31> <event_source> FIPS Warning: Line <fld1> has the non-ANSI function '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FIPS Warning: Line %{fld1} has the non-ANSI function '%{fld2}'." }
				id => "message-001306"
				add_field => {
					"[event][id]" => "001306"
					"[rsa][message][id1]" => "001306"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001307
		# line in RSA:  <fld30> <fld31> <event_source> FIPS Warning: Line <fld1> has the non-ANSI statement '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FIPS Warning: Line %{fld1} has the non-ANSI statement '%{fld2}'." }
				id => "message-001307"
				add_field => {
					"[event][id]" => "001307"
					"[rsa][message][id1]" => "001307"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001308
		# line in RSA:  <fld30> <fld31> <event_source> FIPS Warning: The length of identifier '<fld1>' exceeds 18. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FIPS Warning: The length of identifier '%{fld1}' exceeds 18." }
				id => "message-001308"
				add_field => {
					"[event][id]" => "001308"
					"[rsa][message][id1]" => "001308"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1392
	# line in RSA:  <fld30> <fld31> <event_source> floating point value 
	else if [logstash][msgparser][id] == "msgParserId1392" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} floating point value" }
			id => "msgParserId1392"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "For" {
		# MESSAGE 001310
		# line in RSA:  <fld30> <fld31> <event_source> For a publication to be enabled for the Internet, the 'ftp_address' property must not be null. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} For a publication to be enabled for the Internet, the 'ftp_address' property must not be null." }
				id => "message-001310"
				add_field => {
					"[event][id]" => "001310"
					"[rsa][message][id1]" => "001310"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001311
		# line in RSA:  <fld30> <fld31> <event_source> For backward compatibility, sp_addpublisher can be used to add a Publisher for this Distributor. However, sp_adddistpublisher is more flexible. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} For backward compatibility, sp_addpublisher can be used to add a Publisher for this Distributor. However, sp_adddistpublisher is more flexible." }
				id => "message-001311"
				add_field => {
					"[event][id]" => "001311"
					"[rsa][message][id1]" => "001311"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001312
		# line in RSA:  <fld30> <fld31> <event_source> For DROP INDEX, you must give both the table and the index name, in the form tablename.indexname. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} For DROP INDEX, you must give both the table and the index name, in the form tablename.indexname." }
				id => "message-001312"
				add_field => {
					"[event][id]" => "001312"
					"[rsa][message][id1]" => "001312"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001313
		# line in RSA:  <fld30> <fld31> <event_source> For DROP STATISTICS, you must give both the table and the column name in the form 'tablename.column'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} For DROP STATISTICS, you must give both the table and the column name in the form 'tablename.column'." }
				id => "message-001313"
				add_field => {
					"[event][id]" => "001313"
					"[rsa][message][id1]" => "001313"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001314
		# line in RSA:  <fld30> <fld31> <event_source> For row in sysdatabases for database '<fld1>', the status bit <fld2> was forced off and mode was forced to 0. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} For row in sysdatabases for database '%{fld1}', the status bit %{fld2} was forced off and mode was forced to 0." }
				id => "message-001314"
				add_field => {
					"[event][id]" => "001314"
					"[rsa][message][id1]" => "001314"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001315
		# line in RSA:  <fld30> <fld31> <event_source> For stored procedure articles, the @property parameter value must be 'description', 'dest_table', 'dest_object', 'creation_script', 'pre_creation_cmd', 'schema_option', or 'destination_owner'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} For stored procedure articles, the @property parameter value must be 'description', 'dest_table', 'dest_object', 'creation_script', 'pre_creation_cmd', 'schema_option', or 'destination_owner'." }
				id => "message-001315"
				add_field => {
					"[event][id]" => "001315"
					"[rsa][message][id1]" => "001315"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "FOR" {
		# MESSAGE 001316
		# line in RSA:  <fld30> <fld31> <event_source> FOR UPDATE cannot be specified on a READ ONLY cursor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR UPDATE cannot be specified on a READ ONLY cursor." }
				id => "message-001316"
				add_field => {
					"[event][id]" => "001316"
					"[rsa][message][id1]" => "001316"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001317
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML AUTO cannot generate a URL address for binary data if a primary key is also binary. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML AUTO cannot generate a URL address for binary data if a primary key is also binary." }
				id => "message-001317"
				add_field => {
					"[event][id]" => "001317"
					"[rsa][message][id1]" => "001317"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001318
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML AUTO could not find the table owning the following column '<fld1>' to create a URL address for it. Remove the column, or use the BINARY BASE64 mode, or create the URL directly using the 'dbobject/TABLE[@PK1="V1"]/@COLUMN' syntax. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML AUTO could not find the table owning the following column '%{fld1}' to create a URL address for it. Remove the column, or use the BINARY BASE64 mode, or create the URL directly using the 'dbobject/TABLE[@PK1=\"V1\"]/@COLUMN' syntax." }
				id => "message-001318"
				add_field => {
					"[event][id]" => "001318"
					"[rsa][message][id1]" => "001318"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001319
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML AUTO requires at least one table for generating XML tags. Use FOR XML RAW or add a FROM clause with a table name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML AUTO requires at least one table for generating XML tags. Use FOR XML RAW or add a FROM clause with a table name." }
				id => "message-001319"
				add_field => {
					"[event][id]" => "001319"
					"[rsa][message][id1]" => "001319"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001320
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML AUTO requires primary keys to create references for '<fld1>'. Select primary keys, or use BINARY BASE64 to obtain binary data in encoded form if no primary keys exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML AUTO requires primary keys to create references for '%{fld1}'. Select primary keys, or use BINARY BASE64 to obtain binary data in encoded form if no primary keys exist." }
				id => "message-001320"
				add_field => {
					"[event][id]" => "001320"
					"[rsa][message][id1]" => "001320"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001321
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT and RAW modes currently do not support addressing binary data as URLs in column '<fld1>'. Remove the column, or use the BINARY BASE64 mode, or create the URL directly using the 'dbobject/TABLE[@PK1="V1"]/@COLUMN' syntax. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT and RAW modes currently do not support addressing binary data as URLs in column '%{fld1}'. Remove the column, or use the BINARY BASE64 mode, or create the URL directly using the 'dbobject/TABLE[@PK1=\"V1\"]/@COLUMN' syntax." }
				id => "message-001321"
				add_field => {
					"[event][id]" => "001321"
					"[rsa][message][id1]" => "001321"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001322
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT cannot combine multiple occurrences of ELEMENT, XML, XMLTEXT, and CDATA in column name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT cannot combine multiple occurrences of ELEMENT, XML, XMLTEXT, and CDATA in column name '%{fld1}'." }
				id => "message-001322"
				add_field => {
					"[event][id]" => "001322"
					"[rsa][message][id1]" => "001322"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001323
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT cannot combine multiple occurrences of ID, IDREF, IDREFS, NMTOKEN, and/or NMTOKENS in column name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT cannot combine multiple occurrences of ID, IDREF, IDREFS, NMTOKEN, and/or NMTOKENS in column name '%{fld1}'." }
				id => "message-001323"
				add_field => {
					"[event][id]" => "001323"
					"[rsa][message][id1]" => "001323"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001324
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT does not support XMLTEXT field on tag '<fld1>' that has IDREFS or NMTOKENS fields. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT does not support XMLTEXT field on tag '%{fld1}' that has IDREFS or NMTOKENS fields." }
				id => "message-001324"
				add_field => {
					"[event][id]" => "001324"
					"[rsa][message][id1]" => "001324"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001325
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT field '<fld1>' can specify the directive HIDE only once. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT field '%{fld1}' can specify the directive HIDE only once." }
				id => "message-001325"
				add_field => {
					"[event][id]" => "001325"
					"[rsa][message][id1]" => "001325"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001326
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT queries allow only one XMLTEXT column per tag. Column '<fld1>' declares another XMLTEXT column that is not permitted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT queries allow only one XMLTEXT column per tag. Column '%{fld1}' declares another XMLTEXT column that is not permitted." }
				id => "message-001326"
				add_field => {
					"[event][id]" => "001326"
					"[rsa][message][id1]" => "001326"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001327
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT query contains the invalid column name '<fld1>'. Use the TAGNAME!TAGID!ATTRIBUTENAME[!..] format where TAGID is a positive integer. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT query contains the invalid column name '%{fld1}'. Use the TAGNAME!TAGID!ATTRIBUTENAME[!..] format where TAGID is a positive integer." }
				id => "message-001327"
				add_field => {
					"[event][id]" => "001327"
					"[rsa][message][id1]" => "001327"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001328
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT requires at least three columns, including the tag column, the parent column, and at least one data column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT requires at least three columns, including the tag column, the parent column, and at least one data column." }
				id => "message-001328"
				add_field => {
					"[event][id]" => "001328"
					"[rsa][message][id1]" => "001328"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001329
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT requires attribute-centric IDREFS or NMTOKENS field '<fld1>' to precede element-centric IDREFS/NMTOKEN fields. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT requires attribute-centric IDREFS or NMTOKENS field '%{fld1}' to precede element-centric IDREFS/NMTOKEN fields." }
				id => "message-001329"
				add_field => {
					"[event][id]" => "001329"
					"[rsa][message][id1]" => "001329"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001330
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT requires column <fld1> to be named '<fld2>' instead of '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT requires column %{fld1} to be named '%{fld2}' instead of '%{fld3}'." }
				id => "message-001330"
				add_field => {
					"[event][id]" => "001330"
					"[rsa][message][id1]" => "001330"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001331
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT requires the first column to hold positive integers that represent XML tag IDs. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT requires the first column to hold positive integers that represent XML tag IDs." }
				id => "message-001331"
				add_field => {
					"[event][id]" => "001331"
					"[rsa][message][id1]" => "001331"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001332
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT requires the second column to hold NULL or nonnegative integers that represent XML parent tag IDs. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT requires the second column to hold NULL or nonnegative integers that represent XML parent tag IDs." }
				id => "message-001332"
				add_field => {
					"[event][id]" => "001332"
					"[rsa][message][id1]" => "001332"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001333
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML EXPLICIT stack overflow occurred. Circular parent tag relationships are not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML EXPLICIT stack overflow occurred. Circular parent tag relationships are not allowed." }
				id => "message-001333"
				add_field => {
					"[event][id]" => "001333"
					"[rsa][message][id1]" => "001333"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001334
		# line in RSA:  <fld30> <fld31> <event_source> FOR XML is incompatible with COMPUTE expressions.  Remove the COMPUTE expression. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOR XML is incompatible with COMPUTE expressions.  Remove the COMPUTE expression." }
				id => "message-001334"
				add_field => {
					"[event][id]" => "001334"
					"[rsa][message][id1]" => "001334"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Foreign" {
		# MESSAGE 001335
		# line in RSA:  <fld30> <fld31> <event_source> Foreign key '<fld1>' defines an invalid relationship between a user table and system table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Foreign key '%{fld1}' defines an invalid relationship between a user table and system table." }
				id => "message-001335"
				add_field => {
					"[event][id]" => "001335"
					"[rsa][message][id1]" => "001335"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001336
		# line in RSA:  <fld30> <fld31> <event_source> Foreign key '<fld1>' has implicit reference to object '<fld2>' which does not have a primary key defined on it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Foreign key '%{fld1}' has implicit reference to object '%{fld2}' which does not have a primary key defined on it." }
				id => "message-001336"
				add_field => {
					"[event][id]" => "001336"
					"[rsa][message][id1]" => "001336"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001337
		# line in RSA:  <fld30> <fld31> <event_source> Foreign key '<fld1>' references invalid column '<fld2>' in referenced table '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Foreign key '%{fld1}' references invalid column '%{fld2}' in referenced table '%{fld3}'." }
				id => "message-001337"
				add_field => {
					"[event][id]" => "001337"
					"[rsa][message][id1]" => "001337"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001338
		# line in RSA:  <fld30> <fld31> <event_source> Foreign key '<fld1>' references invalid column '<fld2>' in referencing table '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Foreign key '%{fld1}' references invalid column '%{fld2}' in referencing table '%{fld3}'." }
				id => "message-001338"
				add_field => {
					"[event][id]" => "001338"
					"[rsa][message][id1]" => "001338"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001339
		# line in RSA:  <fld30> <fld31> <event_source> Foreign key '<fld1>' references invalid table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Foreign key '%{fld1}' references invalid table '%{fld2}'." }
				id => "message-001339"
				add_field => {
					"[event][id]" => "001339"
					"[rsa][message][id1]" => "001339"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001340
		# line in RSA:  <fld30> <fld31> <event_source> Foreign key '<fld1>' references object '<fld2>' which is not a user table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Foreign key '%{fld1}' references object '%{fld2}' which is not a user table." }
				id => "message-001340"
				add_field => {
					"[event][id]" => "001340"
					"[rsa][message][id1]" => "001340"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001341
		# line in RSA:  <fld30> <fld31> <event_source> Foreign key column '<fld1>' cannot be excluded from a vertical partition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Foreign key column '%{fld1}' cannot be excluded from a vertical partition." }
				id => "message-001341"
				add_field => {
					"[event][id]" => "001341"
					"[rsa][message][id1]" => "001341"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001342
		# line in RSA:  <fld30> <fld31> <event_source> Foreign key references to temporary tables are not supported. Foreign key '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Foreign key references to temporary tables are not supported. Foreign key '%{fld1}'." }
				id => "message-001342"
				add_field => {
					"[event][id]" => "001342"
					"[rsa][message][id1]" => "001342"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1426
	# line in RSA:  <fld30> <fld31> <event_source> FOREIGN KEY constraints do not have space allocated. 
	else if [logstash][msgparser][id] == "msgParserId1426" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} FOREIGN KEY constraints do not have space allocated." }
			id => "msgParserId1426"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1427
	# line in RSA:  <fld30> <fld31> <event_source> Formal parameter '<fld1>' was defined as OUTPUT but the actual parameter not declared OUTPUT. 
	else if [logstash][msgparser][id] == "msgParserId1427" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Formal parameter '%{fld1}' was defined as OUTPUT but the actual parameter not declared OUTPUT." }
			id => "msgParserId1427"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Forwarded" {
		# MESSAGE 001345
		# line in RSA:  <fld30> <fld31> <event_source> Forwarded row mismatch: Object ID <fld1>, page <fld2>, slot <fld3> points to forwarded row page <fld4>, slot <fld5>; the forwarded row points back to page <fld6>, slot <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Forwarded row mismatch: Object ID %{fld1}, page %{fld2}, slot %{fld3} points to forwarded row page %{fld4}, slot %{fld5}; the forwarded row points back to page %{fld6}, slot %{fld7}." }
				id => "message-001345"
				add_field => {
					"[event][id]" => "001345"
					"[rsa][message][id1]" => "001345"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001346
		# line in RSA:  <fld30> <fld31> <event_source> Forwarded row referenced by more than one row. Object ID <fld1>, page <fld2>, slot <fld3> incorrectly points to forwarded row page <fld4>, slot <fld5>; the forwarded row correctly refers back to page <fld6>, slot <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Forwarded row referenced by more than one row. Object ID %{fld1}, page %{fld2}, slot %{fld3} incorrectly points to forwarded row page %{fld4}, slot %{fld5}; the forwarded row correctly refers back to page %{fld6}, slot %{fld7}." }
				id => "message-001346"
				add_field => {
					"[event][id]" => "001346"
					"[rsa][message][id1]" => "001346"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1430
	# line in RSA:  <fld30> <fld31> <event_source> freepss: Bad process status structure (PSS) value. 
	else if [logstash][msgparser][id] == "msgParserId1430" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} freepss: Bad process status structure (PSS) value." }
			id => "msgParserId1430"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1431
	# line in RSA:  <fld30> <fld31> <event_source> Frequency Type 0x2 (OnDemand) is no longer supported. 
	else if [logstash][msgparser][id] == "msgParserId1431" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Frequency Type 0x2 (OnDemand) is no longer supported." }
			id => "msgParserId1431"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Full-text" {
		# MESSAGE 001349
		# line in RSA:  <fld30> <fld31> <event_source> Full-text auto propagation is currently enabled for table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text auto propagation is currently enabled for table '%{fld1}'." }
				id => "message-001349"
				add_field => {
					"[event][id]" => "001349"
					"[rsa][message][id1]" => "001349"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001350
		# line in RSA:  <fld30> <fld31> <event_source> Full-text catalog '<fld1>' cannot be populated because the database is in single-user access mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text catalog '%{fld1}' cannot be populated because the database is in single-user access mode." }
				id => "message-001350"
				add_field => {
					"[event][id]" => "001350"
					"[rsa][message][id1]" => "001350"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001352
		# line in RSA:  <fld30> <fld31> <event_source> Full-text catalog '<fld1>' has been lost. Use sp_fulltext_catalog to rebuild and to repopulate this full-text catalog. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text catalog '%{fld1}' has been lost. Use sp_fulltext_catalog to rebuild and to repopulate this full-text catalog." }
				id => "message-001352"
				add_field => {
					"[event][id]" => "001352"
					"[rsa][message][id1]" => "001352"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001353
		# line in RSA:  <fld30> <fld31> <event_source> Full-text catalog '<fld1>' is in a unusable state. Drop and re-create this full-text catalog. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text catalog '%{fld1}' is in a unusable state. Drop and re-create this full-text catalog." }
				id => "message-001353"
				add_field => {
					"[event][id]" => "001353"
					"[rsa][message][id1]" => "001353"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001354
		# line in RSA:  <fld30> <fld31> <event_source> Full-text catalog '<fld1>' lacks sufficient disk space to complete this operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text catalog '%{fld1}' lacks sufficient disk space to complete this operation." }
				id => "message-001354"
				add_field => {
					"[event][id]" => "001354"
					"[rsa][message][id1]" => "001354"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001355
		# line in RSA:  <fld30> <fld31> <event_source> Full-text catalog in directory '<fld1>' for clustered server cannot be created. Only directories on a disk in the cluster group of the server can be used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text catalog in directory '%{fld1}' for clustered server cannot be created. Only directories on a disk in the cluster group of the server can be used." }
				id => "message-001355"
				add_field => {
					"[event][id]" => "001355"
					"[rsa][message][id1]" => "001355"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001356
		# line in RSA:  <fld30> <fld31> <event_source> Full-text change tracking is currently enabled for table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text change tracking is currently enabled for table '%{fld1}'." }
				id => "message-001356"
				add_field => {
					"[event][id]" => "001356"
					"[rsa][message][id1]" => "001356"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001357
		# line in RSA:  <fld30> <fld31> <event_source> Full-text change tracking must be started on table '<fld1>' before full-text auto propagation can begin. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text change tracking must be started on table '%{fld1}' before full-text auto propagation can begin." }
				id => "message-001357"
				add_field => {
					"[event][id]" => "001357"
					"[rsa][message][id1]" => "001357"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001358
		# line in RSA:  <fld30> <fld31> <event_source> Full-text change tracking must be started on table '<fld1>' before the changes can be flushed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text change tracking must be started on table '%{fld1}' before the changes can be flushed." }
				id => "message-001358"
				add_field => {
					"[event][id]" => "001358"
					"[rsa][message][id1]" => "001358"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001359
		# line in RSA:  <fld30> <fld31> <event_source> Full-text index for table '<fld1>' cannot be populated because the database is in single-user access mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text index for table '%{fld1}' cannot be populated because the database is in single-user access mode." }
				id => "message-001359"
				add_field => {
					"[event][id]" => "001359"
					"[rsa][message][id1]" => "001359"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001360
		# line in RSA:  <fld30> <fld31> <event_source> Full-text index population failed to start on this table. Execute sp_fulltext_table '<fld1>', '<fld2>' to update the index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text index population failed to start on this table. Execute sp_fulltext_table '%{fld1}', '%{fld2}' to update the index." }
				id => "message-001360"
				add_field => {
					"[event][id]" => "001360"
					"[rsa][message][id1]" => "001360"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001361
		# line in RSA:  <fld30> <fld31> <event_source> Full-text operation failed due to a time out. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text operation failed due to a time out." }
				id => "message-001361"
				add_field => {
					"[event][id]" => "001361"
					"[rsa][message][id1]" => "001361"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001362
		# line in RSA:  <fld30> <fld31> <event_source> Full-text query failed because full-text catalog '<fld1>' is not yet ready for queries. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text query failed because full-text catalog '%{fld1}' is not yet ready for queries." }
				id => "message-001362"
				add_field => {
					"[event][id]" => "001362"
					"[rsa][message][id1]" => "001362"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001363
		# line in RSA:  <fld30> <fld31> <event_source> Full-text search has already been activated for table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text search has already been activated for table '%{fld1}'." }
				id => "message-001363"
				add_field => {
					"[event][id]" => "001363"
					"[rsa][message][id1]" => "001363"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001367
		# line in RSA:  <fld30> <fld31> <event_source> Full-text search must be activated on table '<fld1>' before this operation can be performed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text search must be activated on table '%{fld1}' before this operation can be performed." }
				id => "message-001367"
				add_field => {
					"[event][id]" => "001367"
					"[rsa][message][id1]" => "001367"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001368
		# line in RSA:  <fld30> <fld31> <event_source> Full-text table has more than one LCID among its full-text indexed columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-text table has more than one LCID among its full-text indexed columns." }
				id => "message-001368"
				add_field => {
					"[event][id]" => "001368"
					"[rsa][message][id1]" => "001368"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Full-Text" {
		# MESSAGE 001351
		# line in RSA:  <fld30> <fld31> <event_source> Full-Text catalog '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-Text catalog '%{fld1}' does not exist." }
				id => "message-001351"
				add_field => {
					"[event][id]" => "001351"
					"[rsa][message][id1]" => "001351"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001364
		# line in RSA:  <fld30> <fld31> <event_source> Full-Text Search is not enabled for the current database. Use sp_fulltext_database to enable full-text search for the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-Text Search is not enabled for the current database. Use sp_fulltext_database to enable full-text search for the database." }
				id => "message-001364"
				add_field => {
					"[event][id]" => "001364"
					"[rsa][message][id1]" => "001364"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001365
		# line in RSA:  <fld30> <fld31> <event_source> Full-Text Search is not enabled for the current database. Use sp_fulltext_database to enable Full-Text Search. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-Text Search is not enabled for the current database. Use sp_fulltext_database to enable Full-Text Search." }
				id => "message-001365"
				add_field => {
					"[event][id]" => "001365"
					"[rsa][message][id1]" => "001365"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001366
		# line in RSA:  <fld30> <fld31> <event_source> Full-Text Search is not installed, or a full-text component cannot be loaded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Full-Text Search is not installed, or a full-text component cannot be loaded." }
				id => "message-001366"
				add_field => {
					"[event][id]" => "001366"
					"[rsa][message][id1]" => "001366"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Function" {
		# MESSAGE 001369
		# line in RSA:  <fld30> <fld31> <event_source> Function '<fld1>' can be used only on user and system tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Function '%{fld1}' can be used only on user and system tables." }
				id => "message-001369"
				add_field => {
					"[event][id]" => "001369"
					"[rsa][message][id1]" => "001369"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001370
		# line in RSA:  <fld30> <fld31> <event_source> Function '<fld1>' requires at least <fld2> argument(s). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Function '%{fld1}' requires at least %{fld2} argument(s)." }
				id => "message-001370"
				add_field => {
					"[event][id]" => "001370"
					"[rsa][message][id1]" => "001370"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1454
	# line in RSA:  <fld30> <fld31> <event_source> function name 
	else if [logstash][msgparser][id] == "msgParserId1454" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} function name" }
			id => "msgParserId1454"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Generated" {
		# MESSAGE 001372
		# line in RSA:  <fld30> <fld31> <event_source> Generated expected rowcount value of <fld1> and expected checksum value of <fld2> for <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Generated expected rowcount value of %{fld1} and expected checksum value of %{fld2} for %{fld3}." }
				id => "message-001372"
				add_field => {
					"[event][id]" => "001372"
					"[rsa][message][id1]" => "001372"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001373
		# line in RSA:  <fld30> <fld31> <event_source> Generated expected rowcount value of <fld1> for <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Generated expected rowcount value of %{fld1} for %{fld2}." }
				id => "message-001373"
				add_field => {
					"[event][id]" => "001373"
					"[rsa][message][id1]" => "001373"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1457
	# line in RSA:  <fld30> <fld31> <event_source> Giving ownership of all objects to the database owner. 
	else if [logstash][msgparser][id] == "msgParserId1457" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Giving ownership of all objects to the database owner." }
			id => "msgParserId1457"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Granted" {
		# MESSAGE 001375
		# line in RSA:  <fld30> <fld31> <event_source> Granted database access to '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Granted database access to '%{fld1}'." }
				id => "message-001375"
				add_field => {
					"[event][id]" => "001375"
					"[rsa][message][id1]" => "001375"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001376
		# line in RSA:  <fld30> <fld31> <event_source> Granted login access to '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Granted login access to '%{fld1}'." }
				id => "message-001376"
				add_field => {
				"result" => "Login state"
					"[event][id]" => "001376"
					"[rsa][message][id1]" => "001376"
					"[event][categoryid]" => "1501000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001377
		# line in RSA:  <fld30> <fld31> <event_source> Granted or revoked privilege <fld1> is not compatible with object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Granted or revoked privilege %{fld1} is not compatible with object." }
				id => "message-001377"
				add_field => {
					"[event][id]" => "001377"
					"[rsa][message][id1]" => "001377"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1461
	# line in RSA:  <fld30> <fld31> <event_source> Grantor does not have GRANT permission. 
	else if [logstash][msgparser][id] == "msgParserId1461" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Grantor does not have GRANT permission." }
			id => "msgParserId1461"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "GROUP" {
		# MESSAGE 001379
		# line in RSA:  <fld30> <fld31> <event_source> GROUP BY ALL is not supported in queries that access remote tables if there is also a WHERE clause in the query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} GROUP BY ALL is not supported in queries that access remote tables if there is also a WHERE clause in the query." }
				id => "message-001379"
				add_field => {
					"[event][id]" => "001379"
					"[rsa][message][id1]" => "001379"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001380
		# line in RSA:  <fld30> <fld31> <event_source> GROUP BY and aggregate functions are currently not supported with FOR XML AUTO. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} GROUP BY and aggregate functions are currently not supported with FOR XML AUTO." }
				id => "message-001380"
				add_field => {
					"[event][id]" => "001380"
					"[rsa][message][id1]" => "001380"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001381
		# line in RSA:  <fld30> <fld31> <event_source> GROUP BY expressions must refer to column names that appear in the select list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} GROUP BY expressions must refer to column names that appear in the select list." }
				id => "message-001381"
				add_field => {
					"[event][id]" => "001381"
					"[rsa][message][id1]" => "001381"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1465
	# line in RSA:  <fld30> <fld31> <event_source> Group changed. 
	else if [logstash][msgparser][id] == "msgParserId1465" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Group changed." }
			id => "msgParserId1465"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1466
	# line in RSA:  <fld30> <fld31> <event_source> Having a queue timeout value of over 12 hours is not allowed. 
	else if [logstash][msgparser][id] == "msgParserId1466" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Having a queue timeout value of over 12 hours is not allowed." }
			id => "msgParserId1466"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Heartbeats" {
		# MESSAGE 001384
		# line in RSA:  <fld30> <fld31> <event_source> Heartbeats detected for all running replication agents. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Heartbeats detected for all running replication agents." }
				id => "message-001384"
				add_field => {
					"[event][id]" => "001384"
					"[rsa][message][id1]" => "001384"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001385
		# line in RSA:  <fld30> <fld31> <event_source> Heartbeats not detected for some replication agents. The status of these agents have been changed to 'Failed'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Heartbeats not detected for some replication agents. The status of these agents have been changed to 'Failed'." }
				id => "message-001385"
				add_field => {
					"[event][id]" => "001385"
					"[rsa][message][id1]" => "001385"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1469
	# line in RSA:  <fld30> <fld31> <event_source> Heterogeneous queries require the ANSI_NULLS and ANSI_WARNINGS options to be set for the connection. This ensures consistent query semantics. Enable these options and then reissue your query. 
	else if [logstash][msgparser][id] == "msgParserId1469" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Heterogeneous queries require the ANSI_NULLS and ANSI_WARNINGS options to be set for the connection. This ensures consistent query semantics. Enable these options and then reissue your query." }
			id => "msgParserId1469"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1470
	# line in RSA:  <fld30> <fld31> <event_source> High Volume Server-to-Server Profile 
	else if [logstash][msgparser][id] == "msgParserId1470" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} High Volume Server-to-Server Profile" }
			id => "msgParserId1470"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1471
	# line in RSA:  <fld30> <fld31> <event_source> Hint '<fld1>' on object '<fld2>' is invalid. 
	else if [logstash][msgparser][id] == "msgParserId1471" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Hint '%{fld1}' on object '%{fld2}' is invalid." }
			id => "msgParserId1471"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "I/O" {
		# MESSAGE 001389
		# line in RSA:  <fld30> <fld31> <event_source> I/O error <fld1> detected during <fld2> at offset <fld3> in file '<fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} I/O error %{fld1} detected during %{fld2} at offset %{fld3} in file '%{fld4}'." }
				id => "message-001389"
				add_field => {
					"[event][id]" => "001389"
					"[rsa][message][id1]" => "001389"
					"[event][categoryid]" => "1603010100"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001390
		# line in RSA:  <fld30> <fld31> <event_source> I/O error encountered in the writelog system function during backout. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} I/O error encountered in the writelog system function during backout." }
				id => "message-001390"
				add_field => {
					"[event][id]" => "001390"
					"[rsa][message][id1]" => "001390"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001391
		# line in RSA:  <fld30> <fld31> <event_source> I/O error on backup or restore restart-checkpoint file '<fld1>'. Operating system error <fld2>. The statement is proceeding but is non-restartable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} I/O error on backup or restore restart-checkpoint file '%{fld1}'. Operating system error %{fld2}. The statement is proceeding but is non-restartable." }
				id => "message-001391"
				add_field => {
					"[event][id]" => "001391"
					"[rsa][message][id1]" => "001391"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001392
		# line in RSA:  <fld30> <fld31> <event_source> I/O request 0x <fld1>8x failed I/O verification. See the error log for a description. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} I/O request 0x %{fld1}8x failed I/O verification. See the error log for a description." }
				id => "message-001392"
				add_field => {
					"[event][id]" => "001392"
					"[rsa][message][id1]" => "001392"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "IAM" {
		# MESSAGE 001393
		# line in RSA:  <fld30> <fld31> <event_source> IAM page <fld1> for object ID <fld2>, index ID <fld3> controls pages in filegroup <fld4>, that should be in filegroup <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} IAM page %{fld1} for object ID %{fld2}, index ID %{fld3} controls pages in filegroup %{fld4}, that should be in filegroup %{fld5}." }
				id => "message-001393"
				add_field => {
					"[event][id]" => "001393"
					"[rsa][message][id1]" => "001393"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001394
		# line in RSA:  <fld30> <fld31> <event_source> IAM page <fld1> for object ID <fld2> is incorrect. The <fld3>_MSG ID on page is <fld4>; should be <fld5>. The entry in sysindexes may be incorrect or the IAM page may contain an error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} IAM page %{fld1} for object ID %{fld2} is incorrect. The %{fld3}_MSG ID on page is %{fld4}; should be %{fld5}. The entry in sysindexes may be incorrect or the IAM page may contain an error." }
				id => "message-001394"
				add_field => {
					"[event][id]" => "001394"
					"[rsa][message][id1]" => "001394"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001395
		# line in RSA:  <fld30> <fld31> <event_source> IAM page <fld1> is pointed to by the next pointer of IAM page <fld2> object ID <fld3> index ID <fld4> but was not detected in the scan. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} IAM page %{fld1} is pointed to by the next pointer of IAM page %{fld2} object ID %{fld3} index ID %{fld4} but was not detected in the scan." }
				id => "message-001395"
				add_field => {
					"[event][id]" => "001395"
					"[rsa][message][id1]" => "001395"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001396
		# line in RSA:  <fld30> <fld31> <event_source> IAM page <fld1> is pointed to by the previous pointer of IAM page <fld2> object ID <fld3> index ID <fld4> but was not detected in the scan. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} IAM page %{fld1} is pointed to by the previous pointer of IAM page %{fld2} object ID %{fld3} index ID %{fld4} but was not detected in the scan." }
				id => "message-001396"
				add_field => {
					"[event][id]" => "001396"
					"[rsa][message][id1]" => "001396"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1480
	# line in RSA:  <fld30> <fld31> <event_source> ID.VersionID =  
	else if [logstash][msgparser][id] == "msgParserId1480" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} ID.VersionID =" }
			id => "msgParserId1480"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Identity" {
		# MESSAGE 001398
		# line in RSA:  <fld30> <fld31> <event_source> Identity automation failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Identity automation failed." }
				id => "message-001398"
				add_field => {
					"[event][id]" => "001398"
					"[rsa][message][id1]" => "001398"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001399
		# line in RSA:  <fld30> <fld31> <event_source> Identity column '<fld1>' contains invalid INCREMENT. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Identity column '%{fld1}' contains invalid INCREMENT." }
				id => "message-001399"
				add_field => {
					"[event][id]" => "001399"
					"[rsa][message][id1]" => "001399"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001400
		# line in RSA:  <fld30> <fld31> <event_source> Identity column '<fld1>' contains invalid SEED. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Identity column '%{fld1}' contains invalid SEED." }
				id => "message-001400"
				add_field => {
					"[event][id]" => "001400"
					"[rsa][message][id1]" => "001400"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001401
		# line in RSA:  <fld30> <fld31> <event_source> Identity column '<fld1>' must be of data type int, bigint, smallint, tinyint, or decimal or numeric with a scale of 0, and constrained to be nonnullable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Identity column '%{fld1}' must be of data type int, bigint, smallint, tinyint, or decimal or numeric with a scale of 0, and constrained to be nonnullable." }
				id => "message-001401"
				add_field => {
					"[event][id]" => "001401"
					"[rsa][message][id1]" => "001401"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001402
		# line in RSA:  <fld30> <fld31> <event_source> Identity range value is too large for the data type of the identity column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Identity range value is too large for the data type of the identity column." }
				id => "message-001402"
				add_field => {
					"[event][id]" => "001402"
					"[rsa][message][id1]" => "001402"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001403
		# line in RSA:  <fld30> <fld31> <event_source> Identity range values must be positive numbers that are greater than 1. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Identity range values must be positive numbers that are greater than 1." }
				id => "message-001403"
				add_field => {
					"[event][id]" => "001403"
					"[rsa][message][id1]" => "001403"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1487
	# line in RSA:  <fld30> <fld31> <event_source> IDENTITY_INSERT is already ON for table '<fld1>.<fld2>.<fld3>'. Cannot perform SET operation for table '<fld4>'. 
	else if [logstash][msgparser][id] == "msgParserId1487" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} IDENTITY_INSERT is already ON for table '%{fld1}.%{fld2}.%{fld3}'. Cannot perform SET operation for table '%{fld4}'." }
			id => "msgParserId1487"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "If" {
		# MESSAGE 001405
		# line in RSA:  <fld30> <fld31> <event_source> If a publication is enabled for the Internet, the 'alt_snapshot_folder' property must be non-empty. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} If a publication is enabled for the Internet, the 'alt_snapshot_folder' property must be non-empty." }
				id => "message-001405"
				add_field => {
					"[event][id]" => "001405"
					"[rsa][message][id1]" => "001405"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001406
		# line in RSA:  <fld30> <fld31> <event_source> If the qualified object name specifies a database, that database must be the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} If the qualified object name specifies a database, that database must be the current database." }
				id => "message-001406"
				add_field => {
					"[event][id]" => "001406"
					"[rsa][message][id1]" => "001406"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001407
		# line in RSA:  <fld30> <fld31> <event_source> If you wish to change these names, use '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} If you wish to change these names, use '%{fld1}'." }
				id => "message-001407"
				add_field => {
					"[event][id]" => "001407"
					"[rsa][message][id1]" => "001407"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1491
	# line in RSA:  <fld30> <fld31> <event_source> image data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId1491" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} image data type %{fld1}" }
			id => "msgParserId1491"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Implicit" {
		# MESSAGE 001409
		# line in RSA:  <fld30> <fld31> <event_source> Implicit conversion from data type <fld1> to <fld2> is not allowed. Use the CONVERT function to run this query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Implicit conversion from data type %{fld1} to %{fld2} is not allowed. Use the CONVERT function to run this query." }
				id => "message-001409"
				add_field => {
					"[event][id]" => "001409"
					"[rsa][message][id1]" => "001409"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001410
		# line in RSA:  <fld30> <fld31> <event_source> Implicit conversion of <fld1> value to <fld2> cannot be performed because the collation of the value is unresolved due to a collation conflict. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Implicit conversion of %{fld1} value to %{fld2} cannot be performed because the collation of the value is unresolved due to a collation conflict." }
				id => "message-001410"
				add_field => {
					"[event][id]" => "001410"
					"[rsa][message][id1]" => "001410"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001411
		# line in RSA:  <fld30> <fld31> <event_source> Implicit conversion of <fld1> value to <fld2> cannot be performed because the resulting collation is unresolved due to collation conflict. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Implicit conversion of %{fld1} value to %{fld2} cannot be performed because the resulting collation is unresolved due to collation conflict." }
				id => "message-001411"
				add_field => {
					"[event][id]" => "001411"
					"[rsa][message][id1]" => "001411"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1495
	# line in RSA:  <fld30> <fld31> <event_source> Import of MSDTC transaction failed: <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId1495" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Import of MSDTC transaction failed: %{fld1}." }
			id => "msgParserId1495"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "in" {
		# MESSAGE 003187
		# line in RSA:  <fld30> <fld31> <event_source> There are too many consecutive snapshot transactions in the distribution database.  Run the Log Reader Agent again or clean up the distribution database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are too many consecutive snapshot transactions in the distribution database.  Run the Log Reader Agent again or clean up the distribution database." }
				id => "message-003187"
				add_field => {
					"[event][id]" => "003187"
					"[rsa][message][id1]" => "003187"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001413
		# line in RSA:  <fld30> <fld31> <event_source> in several important columns of system tables. The following 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} in several important columns of system tables. The following" }
				id => "message-001413"
				add_field => {
					"[event][id]" => "001413"
					"[rsa][message][id1]" => "001413"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "In" {
		# MESSAGE 001414
		# line in RSA:  <fld30> <fld31> <event_source> In all databases: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In all databases:" }
				id => "message-001414"
				add_field => {
					"[event][id]" => "001414"
					"[rsa][message][id1]" => "001414"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001415
		# line in RSA:  <fld30> <fld31> <event_source> In EXECUTE <username>, procname can only be a literal or variable of type char, varchar, nchar, or nvarchar. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In EXECUTE %{username}, procname can only be a literal or variable of type char, varchar, nchar, or nvarchar." }
				id => "message-001415"
				add_field => {
					"[event][id]" => "001415"
					"[rsa][message][id1]" => "001415"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001416
		# line in RSA:  <fld30> <fld31> <event_source> In master: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In master:" }
				id => "message-001416"
				add_field => {
					"[event][id]" => "001416"
					"[rsa][message][id1]" => "001416"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001417
		# line in RSA:  <fld30> <fld31> <event_source> In the current database, the specified object is referenced by the following: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In the current database, the specified object is referenced by the following:" }
				id => "message-001417"
				add_field => {
					"[event][id]" => "001417"
					"[rsa][message][id1]" => "001417"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001418
		# line in RSA:  <fld30> <fld31> <event_source> In the current database, the specified object references the following: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In the current database, the specified object references the following:" }
				id => "message-001418"
				add_field => {
					"[event][id]" => "001418"
					"[rsa][message][id1]" => "001418"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001419
		# line in RSA:  <fld30> <fld31> <event_source> In the FOR XML EXPLICIT clause, CDATA attributes must be unnamed in '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In the FOR XML EXPLICIT clause, CDATA attributes must be unnamed in '%{fld1}'." }
				id => "message-001419"
				add_field => {
					"[event][id]" => "001419"
					"[rsa][message][id1]" => "001419"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001420
		# line in RSA:  <fld30> <fld31> <event_source> In the FOR XML EXPLICIT clause, ID, IDREF, IDREFS, NMTOKEN, and NMTOKENS attributes cannot be generated as CDATA, XML, or XMLTEXT in '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In the FOR XML EXPLICIT clause, ID, IDREF, IDREFS, NMTOKEN, and NMTOKENS attributes cannot be generated as CDATA, XML, or XMLTEXT in '%{fld1}'." }
				id => "message-001420"
				add_field => {
					"[event][id]" => "001420"
					"[rsa][message][id1]" => "001420"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001421
		# line in RSA:  <fld30> <fld31> <event_source> In the FOR XML EXPLICIT clause, ID, IDREF, IDREFS, NMTOKEN, and NMTOKENS attributes cannot be hidden in '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In the FOR XML EXPLICIT clause, ID, IDREF, IDREFS, NMTOKEN, and NMTOKENS attributes cannot be hidden in '%{fld1}'." }
				id => "message-001421"
				add_field => {
					"[event][id]" => "001421"
					"[rsa][message][id1]" => "001421"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001422
		# line in RSA:  <fld30> <fld31> <event_source> In the FOR XML EXPLICIT clause, ID, IDREF, IDREFS, NMTOKEN, and NMTOKENS require attribute names in '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In the FOR XML EXPLICIT clause, ID, IDREF, IDREFS, NMTOKEN, and NMTOKENS require attribute names in '%{fld1}'." }
				id => "message-001422"
				add_field => {
					"[event][id]" => "001422"
					"[rsa][message][id1]" => "001422"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001423
		# line in RSA:  <fld30> <fld31> <event_source> In the FOR XML EXPLICIT clause, mode '<fld1>' in a column name is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} In the FOR XML EXPLICIT clause, mode '%{fld1}' in a column name is invalid." }
				id => "message-001423"
				add_field => {
					"[event][id]" => "001423"
					"[rsa][message][id1]" => "001423"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Incorrect" {
		# MESSAGE 001424
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect checksum computed for the backup set on device <fld1>. The backup set cannot be restored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect checksum computed for the backup set on device %{fld1}. The backup set cannot be restored." }
				id => "message-001424"
				add_field => {
					"[event][id]" => "001424"
					"[rsa][message][id1]" => "001424"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001425
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect DBCC statement. Check the documentation for the correct DBCC syntax and options. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect DBCC statement. Check the documentation for the correct DBCC syntax and options." }
				id => "message-001425"
				add_field => {
					"[event][id]" => "001425"
					"[rsa][message][id1]" => "001425"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001426
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect password supplied for application role '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect password supplied for application role '%{fld1}'." }
				id => "message-001426"
				add_field => {
					"[event][id]" => "001426"
					"[rsa][message][id1]" => "001426"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001427
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect PFS free space information for page <fld1>, object ID <fld2>, index ID <fld3>, in database ID <fld4>. Expected value <fld5>, actual value <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect PFS free space information for page %{fld1}, object ID %{fld2}, index ID %{fld3}, in database ID %{fld4}. Expected value %{fld5}, actual value %{fld6}." }
				id => "message-001427"
				add_field => {
					"[event][id]" => "001427"
					"[rsa][message][id1]" => "001427"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001428
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect syntax for definition of the '<fld1>' constraint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect syntax for definition of the '%{fld1}' constraint." }
				id => "message-001428"
				add_field => {
					"[event][id]" => "001428"
					"[rsa][message][id1]" => "001428"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001429
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect syntax near '<fld1>', expected '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect syntax near '%{fld1}', expected '%{fld2}'." }
				id => "message-001429"
				add_field => {
					"[event][id]" => "001429"
					"[rsa][message][id1]" => "001429"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001430
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect syntax near '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect syntax near '%{fld1}'." }
				id => "message-001430"
				add_field => {
					"[event][id]" => "001430"
					"[rsa][message][id1]" => "001430"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001431
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect syntax near the keyword '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect syntax near the keyword '%{fld1}'." }
				id => "message-001431"
				add_field => {
					"[event][id]" => "001431"
					"[rsa][message][id1]" => "001431"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001432
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect time syntax in time string '<fld1>' used with WAITFOR. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect time syntax in time string '%{fld1}' used with WAITFOR." }
				id => "message-001432"
				add_field => {
					"[event][id]" => "001432"
					"[rsa][message][id1]" => "001432"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001433
		# line in RSA:  <fld30> <fld31> <event_source> Incorrect value for parameter '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Incorrect value for parameter '%{fld1}'." }
				id => "message-001433"
				add_field => {
					"[event][id]" => "001433"
					"[rsa][message][id1]" => "001433"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1518
	# line in RSA:  <fld30> <fld31> <event_source> index page 
	else if [logstash][msgparser][id] == "msgParserId1518" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} index page" }
			id => "msgParserId1518"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Index" {
		# MESSAGE 001435
		# line in RSA:  <fld30> <fld31> <event_source> Index <fld1> for table '<fld2>' resides on offline filegroup that cannot be accessed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index %{fld1} for table '%{fld2}' resides on offline filegroup that cannot be accessed." }
				id => "message-001435"
				add_field => {
					"[event][id]" => "001435"
					"[rsa][message][id1]" => "001435"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001436
		# line in RSA:  <fld30> <fld31> <event_source> Index '<fld1>' on table '<fld2>' (specified in the FROM clause) does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index '%{fld1}' on table '%{fld2}' (specified in the FROM clause) does not exist." }
				id => "message-001436"
				add_field => {
					"[event][id]" => "001436"
					"[rsa][message][id1]" => "001436"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001437
		# line in RSA:  <fld30> <fld31> <event_source> Index '<fld1>' on table '<fld2>' is marked offline. Rebuild the index to bring it online. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index '%{fld1}' on table '%{fld2}' is marked offline. Rebuild the index to bring it online." }
				id => "message-001437"
				add_field => {
					"[event][id]" => "001437"
					"[rsa][message][id1]" => "001437"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001438
		# line in RSA:  <fld30> <fld31> <event_source> Index '<fld1>' was not created. This index has a key length of at least <fld2> bytes. The maximum permissible key length is <fld3> bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index '%{fld1}' was not created. This index has a key length of at least %{fld2} bytes. The maximum permissible key length is %{fld3} bytes." }
				id => "message-001438"
				add_field => {
					"[event][id]" => "001438"
					"[rsa][message][id1]" => "001438"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001439
		# line in RSA:  <fld30> <fld31> <event_source> Index (ID = <fld1>) is being rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index (ID = %{fld1}) is being rebuilt." }
				id => "message-001439"
				add_field => {
					"[event][id]" => "001439"
					"[rsa][message][id1]" => "001439"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001440
		# line in RSA:  <fld30> <fld31> <event_source> Index cannot be created on <fld1>_MSG '<fld2>' because the underlying object '<fld3>' has a different owner. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index cannot be created on %{fld1}_MSG '%{fld2}' because the underlying object '%{fld3}' has a different owner." }
				id => "message-001440"
				add_field => {
					"[event][id]" => "001440"
					"[rsa][message][id1]" => "001440"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001441
		# line in RSA:  <fld30> <fld31> <event_source> Index cannot be created on object '<fld1>' because the object is not a user table or view. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index cannot be created on object '%{fld1}' because the object is not a user table or view." }
				id => "message-001441"
				add_field => {
					"[event][id]" => "001441"
					"[rsa][message][id1]" => "001441"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001442
		# line in RSA:  <fld30> <fld31> <event_source> Index cannot be created on view '<fld1>' because the view contains a self-join on '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index cannot be created on view '%{fld1}' because the view contains a self-join on '%{fld2}'." }
				id => "message-001442"
				add_field => {
					"[event][id]" => "001442"
					"[rsa][message][id1]" => "001442"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001443
		# line in RSA:  <fld30> <fld31> <event_source> Index cannot be created on view '<fld1>' because the view contains text, ntext or image columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index cannot be created on view '%{fld1}' because the view contains text, ntext or image columns." }
				id => "message-001443"
				add_field => {
					"[event][id]" => "001443"
					"[rsa][message][id1]" => "001443"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001444
		# line in RSA:  <fld30> <fld31> <event_source> Index cannot be created on view '<fld1>' because the view has one or more nondeterministic expressions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index cannot be created on view '%{fld1}' because the view has one or more nondeterministic expressions." }
				id => "message-001444"
				add_field => {
					"[event][id]" => "001444"
					"[rsa][message][id1]" => "001444"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001445
		# line in RSA:  <fld30> <fld31> <event_source> Index hints are only allowed in a FROM clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index hints are only allowed in a FROM clause." }
				id => "message-001445"
				add_field => {
					"[event][id]" => "001445"
					"[rsa][message][id1]" => "001445"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001446
		# line in RSA:  <fld30> <fld31> <event_source> Index hints cannot be specified within a schema-bound object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index hints cannot be specified within a schema-bound object." }
				id => "message-001446"
				add_field => {
					"[event][id]" => "001446"
					"[rsa][message][id1]" => "001446"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001447
		# line in RSA:  <fld30> <fld31> <event_source> Index ID <fld1> for table '<fld2>' resides on a read-only filegroup which cannot be modified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index ID %{fld1} for table '%{fld2}' resides on a read-only filegroup which cannot be modified." }
				id => "message-001447"
				add_field => {
					"[event][id]" => "001447"
					"[rsa][message][id1]" => "001447"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001448
		# line in RSA:  <fld30> <fld31> <event_source> Index ID <fld1> on table '<fld2>' (specified in the FROM clause) does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index ID %{fld1} on table '%{fld2}' (specified in the FROM clause) does not exist." }
				id => "message-001448"
				add_field => {
					"[event][id]" => "001448"
					"[rsa][message][id1]" => "001448"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001449
		# line in RSA:  <fld30> <fld31> <event_source> Index ID <fld1>. <fld2> pages used in <fld3> dedicated extents. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index ID %{fld1}. %{fld2} pages used in %{fld3} dedicated extents." }
				id => "message-001449"
				add_field => {
					"[event][id]" => "001449"
					"[rsa][message][id1]" => "001449"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001450
		# line in RSA:  <fld30> <fld31> <event_source> Index ID <fld1>. FirstIAM <fld2>. Root <fld3>. Dpages <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index ID %{fld1}. FirstIAM %{fld2}. Root %{fld3}. Dpages %{fld4}." }
				id => "message-001450"
				add_field => {
					"[event][id]" => "001450"
					"[rsa][message][id1]" => "001450"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001451
		# line in RSA:  <fld30> <fld31> <event_source> Index keys are too large. The <fld1> bytes needed to represent the keys for index <fld2> exceeds the size limit of <fld3> bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index keys are too large. The %{fld1} bytes needed to represent the keys for index %{fld2} exceeds the size limit of %{fld3} bytes." }
				id => "message-001451"
				add_field => {
					"[event][id]" => "001451"
					"[rsa][message][id1]" => "001451"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001452
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because function '<fld2>' yields nondeterministic results. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because function '%{fld2}' yields nondeterministic results." }
				id => "message-001452"
				add_field => {
					"[event][id]" => "001452"
					"[rsa][message][id1]" => "001452"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001453
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because some arguments are missing in a built-in function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because some arguments are missing in a built-in function." }
				id => "message-001453"
				add_field => {
					"[event][id]" => "001453"
					"[rsa][message][id1]" => "001453"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001454
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because the view contains a nondeterministic computed column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because the view contains a nondeterministic computed column." }
				id => "message-001454"
				add_field => {
					"[event][id]" => "001454"
					"[rsa][message][id1]" => "001454"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001455
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because the view contains an imprecise expression in a GROUP BY clause 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because the view contains an imprecise expression in a GROUP BY clause" }
				id => "message-001455"
				add_field => {
					"[event][id]" => "001455"
					"[rsa][message][id1]" => "001455"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001456
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because the view contains an imprecise expression in a join. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because the view contains an imprecise expression in a join." }
				id => "message-001456"
				add_field => {
					"[event][id]" => "001456"
					"[rsa][message][id1]" => "001456"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001457
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because the view contains an imprecise expression in the WHERE clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because the view contains an imprecise expression in the WHERE clause." }
				id => "message-001457"
				add_field => {
					"[event][id]" => "001457"
					"[rsa][message][id1]" => "001457"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001458
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because the view requires a conversion involving dates or variants. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because the view requires a conversion involving dates or variants." }
				id => "message-001458"
				add_field => {
					"[event][id]" => "001458"
					"[rsa][message][id1]" => "001458"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001459
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because the view uses a column bound to a rule. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because the view uses a column bound to a rule." }
				id => "message-001459"
				add_field => {
					"[event][id]" => "001459"
					"[rsa][message][id1]" => "001459"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001460
		# line in RSA:  <fld30> <fld31> <event_source> Index on view '<fld1>' cannot be created because the view uses a nondeterministic user-defined function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index on view '%{fld1}' cannot be created because the view uses a nondeterministic user-defined function." }
				id => "message-001460"
				add_field => {
					"[event][id]" => "001460"
					"[rsa][message][id1]" => "001460"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001461
		# line in RSA:  <fld30> <fld31> <event_source> Index row (<fld1>:<fld2>:<fld3>) with values (<fld4>) points to the data row identified by (<fld5>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index row (%{fld1}:%{fld2}:%{fld3}) with values (%{fld4}) points to the data row identified by (%{fld5})." }
				id => "message-001461"
				add_field => {
					"[event][id]" => "001461"
					"[rsa][message][id1]" => "001461"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001462
		# line in RSA:  <fld30> <fld31> <event_source> Index shrink program returned invalid status of 0. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Index shrink program returned invalid status of 0." }
				id => "message-001462"
				add_field => {
					"[event][id]" => "001462"
					"[rsa][message][id1]" => "001462"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1547
	# line in RSA:  <fld30> <fld31> <event_source> Indexes used in hints must be explicitly included by the index tuning wizard. 
	else if [logstash][msgparser][id] == "msgParserId1547" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Indexes used in hints must be explicitly included by the index tuning wizard." }
			id => "msgParserId1547"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1548
	# line in RSA:  <fld30> <fld31> <event_source> Informational: <info>
	else if [logstash][msgparser][id] == "msgParserId1548" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Informational: %{info}" }
			id => "msgParserId1548"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "initconfig" {
		# MESSAGE 001464
		# line in RSA:  <fld30> <fld31> <event_source> initconfig: Error <fld1> opening '<fld2>' for configuration information. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initconfig: Error %{fld1} opening '%{fld2}' for configuration information." }
				id => "message-001464"
				add_field => {
					"[event][id]" => "001464"
					"[rsa][message][id1]" => "001464"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001465
		# line in RSA:  <fld30> <fld31> <event_source> initconfig: Error <fld1> reading configuration information from '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initconfig: Error %{fld1} reading configuration information from '%{fld2}'." }
				id => "message-001465"
				add_field => {
					"[event][id]" => "001465"
					"[rsa][message][id1]" => "001465"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001466
		# line in RSA:  <fld30> <fld31> <event_source> initconfig: Number of server processes reduced to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initconfig: Number of server processes reduced to %{fld1}." }
				id => "message-001466"
				add_field => {
					"[event][id]" => "001466"
					"[rsa][message][id1]" => "001466"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001467
		# line in RSA:  <fld30> <fld31> <event_source> initconfig: Number of user connections reduced to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initconfig: Number of user connections reduced to %{fld1}." }
				id => "message-001467"
				add_field => {
					"[event][id]" => "001467"
					"[rsa][message][id1]" => "001467"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "initdata" {
		# MESSAGE 001468
		# line in RSA:  <fld30> <fld31> <event_source> initdata: No memory for kernel buffer hash table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initdata: No memory for kernel buffer hash table." }
				id => "message-001468"
				add_field => {
					"[event][id]" => "001468"
					"[rsa][message][id1]" => "001468"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001469
		# line in RSA:  <fld30> <fld31> <event_source> initdata: No memory for kernel buffers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initdata: No memory for kernel buffers." }
				id => "message-001469"
				add_field => {
					"[event][id]" => "001469"
					"[rsa][message][id1]" => "001469"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001470
		# line in RSA:  <fld30> <fld31> <event_source> initdata: No memory for kernel locks. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initdata: No memory for kernel locks." }
				id => "message-001470"
				add_field => {
					"[event][id]" => "001470"
					"[rsa][message][id1]" => "001470"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001471
		# line in RSA:  <fld30> <fld31> <event_source> initdata: Not enough memory for descriptor hash tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initdata: Not enough memory for descriptor hash tables." }
				id => "message-001471"
				add_field => {
					"[event][id]" => "001471"
					"[rsa][message][id1]" => "001471"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001472
		# line in RSA:  <fld30> <fld31> <event_source> initdata: Not enough memory for descriptors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initdata: Not enough memory for descriptors." }
				id => "message-001472"
				add_field => {
					"[event][id]" => "001472"
					"[rsa][message][id1]" => "001472"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001473
		# line in RSA:  <fld30> <fld31> <event_source> initdata: Not enough memory for procedure cache/hash table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initdata: Not enough memory for procedure cache/hash table." }
				id => "message-001473"
				add_field => {
					"[event][id]" => "001473"
					"[rsa][message][id1]" => "001473"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001474
		# line in RSA:  <fld30> <fld31> <event_source> initdata: Warning: Could not set working set size to <fld1> KB. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} initdata: Warning: Could not set working set size to %{fld1} KB." }
				id => "message-001474"
				add_field => {
					"[event][id]" => "001474"
					"[rsa][message][id1]" => "001474"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1560
	# line in RSA:  <fld30> <fld31> <event_source> initeventlog: Could not initiate the EventLog Service for the key '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1560" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} initeventlog: Could not initiate the EventLog Service for the key '%{fld1}'." }
			id => "msgParserId1560"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1561
	# line in RSA:  <fld30> <fld31> <event_source> initmaster: Could not allocate process status structure (PSS). 
	else if [logstash][msgparser][id] == "msgParserId1561" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} initmaster: Could not allocate process status structure (PSS)." }
			id => "msgParserId1561"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1562
	# line in RSA:  <fld30> <fld31> <event_source> Input name '<fld1>' does not have a matching user table or indexed view in the current database. 
	else if [logstash][msgparser][id] == "msgParserId1562" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Input name '%{fld1}' does not have a matching user table or indexed view in the current database." }
			id => "msgParserId1562"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Insert" {
		# MESSAGE 001478
		# line in RSA:  <fld30> <fld31> <event_source> Insert Error: Column name or number of supplied values does not match table definition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Insert Error: Column name or number of supplied values does not match table definition." }
				id => "message-001478"
				add_field => {
					"[event][id]" => "001478"
					"[rsa][message][id1]" => "001478"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001479
		# line in RSA:  <fld30> <fld31> <event_source> Insert failed because the iResourceSignificantBit is already in use by another resource. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Insert failed because the iResourceSignificantBit is already in use by another resource." }
				id => "message-001479"
				add_field => {
					"[event][id]" => "001479"
					"[rsa][message][id1]" => "001479"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001480
		# line in RSA:  <fld30> <fld31> <event_source> Insert into syslanguages failed. Language not added. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Insert into syslanguages failed. Language not added." }
				id => "message-001480"
				add_field => {
					"[event][id]" => "001480"
					"[rsa][message][id1]" => "001480"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "INSERT" {
		# MESSAGE 001481
		# line in RSA:  <fld30> <fld31> <event_source> INSERT into an identity column not allowed on table variables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} INSERT into an identity column not allowed on table variables." }
				id => "message-001481"
				add_field => {
					"[event][id]" => "001481"
					"[rsa][message][id1]" => "001481"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001482
		# line in RSA:  <fld30> <fld31> <event_source> INSERT EXEC failed because the stored procedure altered the schema of the target table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} INSERT EXEC failed because the stored procedure altered the schema of the target table." }
				id => "message-001482"
				add_field => {
					"[event][id]" => "001482"
					"[rsa][message][id1]" => "001482"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1568
	# line in RSA:  <fld30> <fld31> <event_source> Inside txn_1a_, update failed. Will roll back (1a1). 
	else if [logstash][msgparser][id] == "msgParserId1568" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Inside txn_1a_, update failed. Will roll back (1a1)." }
			id => "msgParserId1568"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "INSTEAD" {
		# MESSAGE 001484
		# line in RSA:  <fld30> <fld31> <event_source> INSTEAD OF trigger '<fld1>' cannot be associated with an order. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} INSTEAD OF trigger '%{fld1}' cannot be associated with an order." }
				id => "message-001484"
				add_field => {
					"[event][id]" => "001484"
					"[rsa][message][id1]" => "001484"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001485
		# line in RSA:  <fld30> <fld31> <event_source> INSTEAD OF triggers do not support direct recursion. Trigger execution failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} INSTEAD OF triggers do not support direct recursion. Trigger execution failed." }
				id => "message-001485"
				add_field => {
					"[event][id]" => "001485"
					"[rsa][message][id1]" => "001485"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Insufficient" {
		# MESSAGE 001486
		# line in RSA:  <fld30> <fld31> <event_source> Insufficient memory available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Insufficient memory available." }
				id => "message-001486"
				add_field => {
					"[event][id]" => "001486"
					"[rsa][message][id1]" => "001486"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001487
		# line in RSA:  <fld30> <fld31> <event_source> Insufficient resources to create UMS scheduler. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Insufficient resources to create UMS scheduler." }
				id => "message-001487"
				add_field => {
					"[event][id]" => "001487"
					"[rsa][message][id1]" => "001487"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001488
		# line in RSA:  <fld30> <fld31> <event_source> Insufficient result space to convert uniqueidentifier value to char. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Insufficient result space to convert uniqueidentifier value to char." }
				id => "message-001488"
				add_field => {
					"[event][id]" => "001488"
					"[rsa][message][id1]" => "001488"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001489
		# line in RSA:  <fld30> <fld31> <event_source> Insufficient room was allocated for search arguments in the session descriptor for object '<fld1>'. Only <fld2> search arguments were anticipated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Insufficient room was allocated for search arguments in the session descriptor for object '%{fld1}'. Only %{fld2} search arguments were anticipated." }
				id => "message-001489"
				add_field => {
					"[event][id]" => "001489"
					"[rsa][message][id1]" => "001489"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1575
	# line in RSA:  <fld30> <fld31> <event_source> integer value 
	else if [logstash][msgparser][id] == "msgParserId1575" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} integer value" }
			id => "msgParserId1575"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Internal" {
		# MESSAGE 001491
		# line in RSA:  <fld30> <fld31> <event_source> Internal Cursor Error: A cursor work table operation failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Cursor Error: A cursor work table operation failed." }
				id => "message-001491"
				add_field => {
					"[event][id]" => "001491"
					"[rsa][message][id1]" => "001491"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001492
		# line in RSA:  <fld30> <fld31> <event_source> Internal Cursor Error: The cursor is in an invalid state. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Cursor Error: The cursor is in an invalid state." }
				id => "message-001492"
				add_field => {
					"[event][id]" => "001492"
					"[rsa][message][id1]" => "001492"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001493
		# line in RSA:  <fld30> <fld31> <event_source> Internal Query Processor Error: The plan selected for execution does not support the invoked given execution routine. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Query Processor Error: The plan selected for execution does not support the invoked given execution routine." }
				id => "message-001493"
				add_field => {
					"[event][id]" => "001493"
					"[rsa][message][id1]" => "001493"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001494
		# line in RSA:  <fld30> <fld31> <event_source> Internal Query Processor Error: The query processor could not obtain access to a required interface. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Query Processor Error: The query processor could not obtain access to a required interface." }
				id => "message-001494"
				add_field => {
					"[event][id]" => "001494"
					"[rsa][message][id1]" => "001494"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001495
		# line in RSA:  <fld30> <fld31> <event_source> Internal Query Processor Error: The query processor could not produce a query plan.  Contact your primary support provider for more information. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Query Processor Error: The query processor could not produce a query plan.  Contact your primary support provider for more information." }
				id => "message-001495"
				add_field => {
					"[event][id]" => "001495"
					"[rsa][message][id1]" => "001495"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001496
		# line in RSA:  <fld30> <fld31> <event_source> Internal Query Processor Error: The query processor encountered an internal limit overflow. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Query Processor Error: The query processor encountered an internal limit overflow." }
				id => "message-001496"
				add_field => {
					"[event][id]" => "001496"
					"[rsa][message][id1]" => "001496"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001497
		# line in RSA:  <fld30> <fld31> <event_source> Internal Query Processor Error: The query processor encountered an unexpected error during execution. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Query Processor Error: The query processor encountered an unexpected error during execution." }
				id => "message-001497"
				add_field => {
					"[event][id]" => "001497"
					"[rsa][message][id1]" => "001497"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001498
		# line in RSA:  <fld30> <fld31> <event_source> Internal Query Processor Error: The query processor encountered an unexpected error during the processing of a remote query phase. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Query Processor Error: The query processor encountered an unexpected error during the processing of a remote query phase." }
				id => "message-001498"
				add_field => {
					"[event][id]" => "001498"
					"[rsa][message][id1]" => "001498"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001499
		# line in RSA:  <fld30> <fld31> <event_source> Internal Query Processor Error: The query processor encountered an unexpected work table error during execution. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Query Processor Error: The query processor encountered an unexpected work table error during execution." }
				id => "message-001499"
				add_field => {
					"[event][id]" => "001499"
					"[rsa][message][id1]" => "001499"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001500
		# line in RSA:  <fld30> <fld31> <event_source> Internal Query Processor Error: The query processor ran out of stack space during query optimization. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal Query Processor Error: The query processor ran out of stack space during query optimization." }
				id => "message-001500"
				add_field => {
					"[event][id]" => "001500"
					"[rsa][message][id1]" => "001500"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001501
		# line in RSA:  <fld30> <fld31> <event_source> Internal SQL Server error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal SQL Server error." }
				id => "message-001501"
				add_field => {
					"[event][id]" => "001501"
					"[rsa][message][id1]" => "001501"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003579
		# line in RSA:   <fld30> <fld31> <event_source> Internal I/O request <fld1>: Op: <fld2>, pBuffer: <fld3>, Size: <fld4>, Position: <fld5>, UMS: Internal: <fld6>, InternalHigh: <fld7>, Offset: <fld8>, OffsetHigh: <fld9>, m_buf: <fld10>, m_len: <fld11>, m_actualBytes: <fld12>, m_errcode: <fld13>, BackupFile: <fld14> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Internal I/O request %{fld1}: Op: %{fld2}, pBuffer: %{fld3}, Size: %{fld4}, Position: %{fld5}, UMS: Internal: %{fld6}, InternalHigh: %{fld7}, Offset: %{fld8}, OffsetHigh: %{fld9}, m_buf: %{fld10}, m_len: %{fld11}, m_actualBytes: %{fld12}, m_errcode: %{fld13}, BackupFile: %{fld14}" }
				id => "message-003579"
				add_field => {
				"result" => "Internal I/O request info"
					"[event][id]" => "003579"
					"[rsa][message][id1]" => "003579"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1588
	# line in RSA:  <fld30> <fld31> <event_source> Intra-query parallelism caused your server command (process ID #<fld1>) to deadlock. Rerun the query without intra-query parallelism by using the query hint option (maxdop 1). 
	else if [logstash][msgparser][id] == "msgParserId1588" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Intra-query parallelism caused your server command (process ID #%{fld1}) to deadlock. Rerun the query without intra-query parallelism by using the query hint option (maxdop 1)." }
			id => "msgParserId1588"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1589
	# line in RSA:  <fld30> <fld31> <event_source> Introducing FOREIGN KEY constraint '<fld1>' on table '<fld2>' may cause cycles or multiple cascade paths. Specify ON DELETE NO ACTION or ON UPDATE NO ACTION, or modify other FOREIGN KEY constraints. 
	else if [logstash][msgparser][id] == "msgParserId1589" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Introducing FOREIGN KEY constraint '%{fld1}' on table '%{fld2}' may cause cycles or multiple cascade paths. Specify ON DELETE NO ACTION or ON UPDATE NO ACTION, or modify other FOREIGN KEY constraints." }
			id => "msgParserId1589"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Invalid" {
		# MESSAGE 001504
		# line in RSA:  <fld30> <fld31> <event_source> Invalid <fld1> statement for article <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid %{fld1} statement for article %{fld2}." }
				id => "message-001504"
				add_field => {
					"[event][id]" => "001504"
					"[rsa][message][id1]" => "001504"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001505
		# line in RSA:  <fld30> <fld31> <event_source> Invalid '<fld1>' specified. It must be <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid '%{fld1}' specified. It must be %{fld2}." }
				id => "message-001505"
				add_field => {
					"[event][id]" => "001505"
					"[rsa][message][id1]" => "001505"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001506
		# line in RSA:  <fld30> <fld31> <event_source> Invalid '<fld1>' value for stored procedure '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid '%{fld1}' value for stored procedure '%{fld2}'." }
				id => "message-001506"
				add_field => {
					"[event][id]" => "001506"
					"[rsa][message][id1]" => "001506"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001507
		# line in RSA:  <fld30> <fld31> <event_source> Invalid '<fld1>' value in '<fld2>'. The publication is not enabled for '<fld3>' updatable subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid '%{fld1}' value in '%{fld2}'. The publication is not enabled for '%{fld3}' updatable subscriptions." }
				id => "message-001507"
				add_field => {
					"[event][id]" => "001507"
					"[rsa][message][id1]" => "001507"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001508
		# line in RSA:  <fld30> <fld31> <event_source> Invalid '<fld1>' value. Valid values are 'read only', 'sync tran', 'queued tran', or 'failover'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid '%{fld1}' value. Valid values are 'read only', 'sync tran', 'queued tran', or 'failover'." }
				id => "message-001508"
				add_field => {
					"[event][id]" => "001508"
					"[rsa][message][id1]" => "001508"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001509
		# line in RSA:  <fld30> <fld31> <event_source> Invalid '<fld1>' value. Valid values are 'true' or 'false'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid '%{fld1}' value. Valid values are 'true' or 'false'." }
				id => "message-001509"
				add_field => {
					"[event][id]" => "001509"
					"[rsa][message][id1]" => "001509"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001510
		# line in RSA:  <fld30> <fld31> <event_source> Invalid '<fld25>' value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid '%{fld25}' value." }
				id => "message-001510"
				add_field => {
					"[event][id]" => "001510"
					"[rsa][message][id1]" => "001510"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001511
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @dts_package_location parameter value. Valid options are 'Distributor' or 'Subscriber'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @dts_package_location parameter value. Valid options are 'Distributor' or 'Subscriber'." }
				id => "message-001511"
				add_field => {
					"[event][id]" => "001511"
					"[rsa][message][id1]" => "001511"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001512
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @restricted parameter value. Valid options are 'true' or 'false'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @restricted parameter value. Valid options are 'true' or 'false'." }
				id => "message-001512"
				add_field => {
					"[event][id]" => "001512"
					"[rsa][message][id1]" => "001512"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001513
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @schema_option value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @schema_option value." }
				id => "message-001513"
				add_field => {
					"[event][id]" => "001513"
					"[rsa][message][id1]" => "001513"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001514
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @subscriber_type value. Valid options are 'local' and 'global'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @subscriber_type value. Valid options are 'local' and 'global'." }
				id => "message-001514"
				add_field => {
					"[event][id]" => "001514"
					"[rsa][message][id1]" => "001514"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001515
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @subscriber_type value. Valid options are 'local', 'global', 'anonymous', or 'repub'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @subscriber_type value. Valid options are 'local', 'global', 'anonymous', or 'repub'." }
				id => "message-001515"
				add_field => {
					"[event][id]" => "001515"
					"[rsa][message][id1]" => "001515"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001516
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @subscription_type parameter value. Valid options are 'push' or 'pull'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @subscription_type parameter value. Valid options are 'push' or 'pull'." }
				id => "message-001516"
				add_field => {
					"[event][id]" => "001516"
					"[rsa][message][id1]" => "001516"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001517
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @subscription_type parameter value. Valid options are 'push', 'pull', or 'both'.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @subscription_type parameter value. Valid options are 'push', 'pull', or 'both'." }
				id => "message-001517"
				add_field => {
					"[event][id]" => "001517"
					"[rsa][message][id1]" => "001517"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001518
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @subscription_type value. Valid values are 'pull' or 'anonymous'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @subscription_type value. Valid values are 'pull' or 'anonymous'." }
				id => "message-001518"
				add_field => {
					"[event][id]" => "001518"
					"[rsa][message][id1]" => "001518"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001519
		# line in RSA:  <fld30> <fld31> <event_source> Invalid @with_log parameter value. Valid values are 'true' or 'false'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid @with_log parameter value. Valid values are 'true' or 'false'." }
				id => "message-001519"
				add_field => {
					"[event][id]" => "001519"
					"[rsa][message][id1]" => "001519"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001520
		# line in RSA:  <fld30> <fld31> <event_source> Invalid argument for SET ROWCOUNT. Must be a non-null non-negative integer. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid argument for SET ROWCOUNT. Must be a non-null non-negative integer." }
				id => "message-001520"
				add_field => {
					"[event][id]" => "001520"
					"[rsa][message][id1]" => "001520"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001521
		# line in RSA:  <fld30> <fld31> <event_source> Invalid article ID specified for procedure script generation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid article ID specified for procedure script generation." }
				id => "message-001521"
				add_field => {
					"[event][id]" => "001521"
					"[rsa][message][id1]" => "001521"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001522
		# line in RSA:  <fld30> <fld31> <event_source> Invalid article status <fld1> specified when adding article '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid article status %{fld1} specified when adding article '%{fld2}'." }
				id => "message-001522"
				add_field => {
					"[event][id]" => "001522"
					"[rsa][message][id1]" => "001522"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001523
		# line in RSA:  <fld30> <fld31> <event_source> Invalid awakening state. Slept in <fld1>; awoke in <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid awakening state. Slept in %{fld1}; awoke in %{fld2}." }
				id => "message-001523"
				add_field => {
					"[event][id]" => "001523"
					"[rsa][message][id1]" => "001523"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001524
		# line in RSA:  <fld30> <fld31> <event_source> Invalid begin LSN (<fld1>) for commit record (<fld2>). Check DBTABLE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid begin LSN (%{fld1}) for commit record (%{fld2}). Check DBTABLE." }
				id => "message-001524"
				add_field => {
					"[event][id]" => "001524"
					"[rsa][message][id1]" => "001524"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001525
		# line in RSA:  <fld30> <fld31> <event_source> Invalid buffer received from client. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid buffer received from client." }
				id => "message-001525"
				add_field => {
					"[event][id]" => "001525"
					"[rsa][message][id1]" => "001525"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001526
		# line in RSA:  <fld30> <fld31> <event_source> Invalid collation '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid collation '%{fld1}'." }
				id => "message-001526"
				add_field => {
					"[event][id]" => "001526"
					"[rsa][message][id1]" => "001526"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001527
		# line in RSA:  <fld30> <fld31> <event_source> Invalid column '<fld1>' is specified in a constraint or computed-column definition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid column '%{fld1}' is specified in a constraint or computed-column definition." }
				id => "message-001527"
				add_field => {
					"[event][id]" => "001527"
					"[rsa][message][id1]" => "001527"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001528
		# line in RSA:  <fld30> <fld31> <event_source> Invalid column list after object name in GRANT/REVOKE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid column list after object name in GRANT/REVOKE statement." }
				id => "message-001528"
				add_field => {
					"[event][id]" => "001528"
					"[rsa][message][id1]" => "001528"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001529
		# line in RSA:  <fld30> <fld31> <event_source> Invalid column name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid column name '%{fld1}'." }
				id => "message-001529"
				add_field => {
					"[event][id]" => "001529"
					"[rsa][message][id1]" => "001529"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001531
		# line in RSA:  <fld30> <fld31> <event_source> Invalid column prefix '<fld1>': No table name specified 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid column prefix '%{fld1}': No table name specified" }
				id => "message-001531"
				add_field => {
					"[event][id]" => "001531"
					"[rsa][message][id1]" => "001531"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001532
		# line in RSA:  <fld30> <fld31> <event_source> Invalid command option <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid command option %{fld1}." }
				id => "message-001532"
				add_field => {
					"[event][id]" => "001532"
					"[rsa][message][id1]" => "001532"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001533
		# line in RSA:  <fld30> <fld31> <event_source> Invalid data type for column '<fld1>'. Data type cannot be text, ntext, image, or binary. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid data type for column '%{fld1}'. Data type cannot be text, ntext, image, or binary." }
				id => "message-001533"
				add_field => {
					"[event][id]" => "001533"
					"[rsa][message][id1]" => "001533"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001534
		# line in RSA:  <fld30> <fld31> <event_source> Invalid data type for the column indicated by the parameter '<fld1>'. Valid data types are int, bigint, smallint, and tinyint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid data type for the column indicated by the parameter '%{fld1}'. Valid data types are int, bigint, smallint, and tinyint." }
				id => "message-001534"
				add_field => {
					"[event][id]" => "001534"
					"[rsa][message][id1]" => "001534"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001535
		# line in RSA:  <fld30> <fld31> <event_source> Invalid data type is specified for column '<fld1>'. Valid data types are int, bigint, smallint, and tinyint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid data type is specified for column '%{fld1}'. Valid data types are int, bigint, smallint, and tinyint." }
				id => "message-001535"
				add_field => {
					"[event][id]" => "001535"
					"[rsa][message][id1]" => "001535"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001536
		# line in RSA:  <fld30> <fld31> <event_source> Invalid data type parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid data type parameter." }
				id => "message-001536"
				add_field => {
					"[event][id]" => "001536"
					"[rsa][message][id1]" => "001536"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001537
		# line in RSA:  <fld30> <fld31> <event_source> Invalid database name '<fld1>' specified for backup or restore operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid database name '%{fld1}' specified for backup or restore operation." }
				id => "message-001537"
				add_field => {
					"[event][id]" => "001537"
					"[rsa][message][id1]" => "001537"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001538
		# line in RSA:  <fld30> <fld31> <event_source> Invalid destination path <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid destination path %{fld1}." }
				id => "message-001538"
				add_field => {
					"[event][id]" => "001538"
					"[rsa][message][id1]" => "001538"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001539
		# line in RSA:  <fld30> <fld31> <event_source> Invalid escape character '<fld1>' was specified in a LIKE predicate. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid escape character '%{fld1}' was specified in a LIKE predicate." }
				id => "message-001539"
				add_field => {
					"[event][id]" => "001539"
					"[rsa][message][id1]" => "001539"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001540
		# line in RSA:  <fld30> <fld31> <event_source> Invalid escape character '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid escape character '%{fld1}'." }
				id => "message-001540"
				add_field => {
					"[event][id]" => "001540"
					"[rsa][message][id1]" => "001540"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001541
		# line in RSA:  <fld30> <fld31> <event_source> Invalid event '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid event '%{fld1}'." }
				id => "message-001541"
				add_field => {
					"[event][id]" => "001541"
					"[rsa][message][id1]" => "001541"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001542
		# line in RSA:  <fld30> <fld31> <event_source> Invalid file size entered. All files must be at least 1 MB. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid file size entered. All files must be at least 1 MB." }
				id => "message-001542"
				add_field => {
					"[event][id]" => "001542"
					"[rsa][message][id1]" => "001542"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001543
		# line in RSA:  <fld30> <fld31> <event_source> Invalid filegroup '<fld1>' specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid filegroup '%{fld1}' specified." }
				id => "message-001543"
				add_field => {
					"[event][id]" => "001543"
					"[rsa][message][id1]" => "001543"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001544
		# line in RSA:  <fld30> <fld31> <event_source> Invalid function parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid function parameter." }
				id => "message-001544"
				add_field => {
					"[event][id]" => "001544"
					"[rsa][message][id1]" => "001544"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001545
		# line in RSA:  <fld30> <fld31> <event_source> Invalid index ID (<fld1>) specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid index ID (%{fld1}) specified." }
				id => "message-001545"
				add_field => {
					"[event][id]" => "001545"
					"[rsa][message][id1]" => "001545"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001546
		# line in RSA:  <fld30> <fld31> <event_source> Invalid length parameter passed to the substring function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid length parameter passed to the substring function." }
				id => "message-001546"
				add_field => {
					"[event][id]" => "001546"
					"[rsa][message][id1]" => "001546"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001547
		# line in RSA:  <fld30> <fld31> <event_source> Invalid length specified. Length must be between 1 and 8000 bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid length specified. Length must be between 1 and 8000 bytes." }
				id => "message-001547"
				add_field => {
					"[event][id]" => "001547"
					"[rsa][message][id1]" => "001547"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001548
		# line in RSA:  <fld30> <fld31> <event_source> Invalid locator de-referenced. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid locator de-referenced." }
				id => "message-001548"
				add_field => {
					"[event][id]" => "001548"
					"[rsa][message][id1]" => "001548"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001549
		# line in RSA:  <fld30> <fld31> <event_source> Invalid lock class for release call. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid lock class for release call." }
				id => "message-001549"
				add_field => {
					"[event][id]" => "001549"
					"[rsa][message][id1]" => "001549"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001550
		# line in RSA:  <fld30> <fld31> <event_source> Invalid log record found in the transaction log (logop <fld1>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid log record found in the transaction log (logop %{fld1})." }
				id => "message-001550"
				add_field => {
					"[event][id]" => "001550"
					"[rsa][message][id1]" => "001550"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001551
		# line in RSA:  <fld30> <fld31> <event_source> Invalid number of parameters. Rowset '<fld1>' expects <fld2> parameter(s). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid number of parameters. Rowset '%{fld1}' expects %{fld2} parameter(s)." }
				id => "message-001551"
				add_field => {
					"[event][id]" => "001551"
					"[rsa][message][id1]" => "001551"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001552
		# line in RSA:  <fld30> <fld31> <event_source> Invalid object name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid object name '%{fld1}'." }
				id => "message-001552"
				add_field => {
					"[event][id]" => "001552"
					"[rsa][message][id1]" => "001552"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001554
		# line in RSA:  <fld30> <fld31> <event_source> Invalid operator for data type. Operator equals <fld1>, type equals <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid operator for data type. Operator equals %{fld1}, type equals %{fld2}." }
				id => "message-001554"
				add_field => {
					"[event][id]" => "001554"
					"[rsa][message][id1]" => "001554"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001555
		# line in RSA:  <fld30> <fld31> <event_source> Invalid option name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid option name '%{fld1}'." }
				id => "message-001555"
				add_field => {
					"[event][id]" => "001555"
					"[rsa][message][id1]" => "001555"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001556
		# line in RSA:  <fld30> <fld31> <event_source> Invalid parameter <fld1> specified for <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid parameter %{fld1} specified for %{fld2}." }
				id => "message-001556"
				add_field => {
					"[event][id]" => "001556"
					"[rsa][message][id1]" => "001556"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001558
		# line in RSA:  <fld30> <fld31> <event_source> Invalid precision specified. Precision must be between 1 and 38. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid precision specified. Precision must be between 1 and 38." }
				id => "message-001558"
				add_field => {
					"[event][id]" => "001558"
					"[rsa][message][id1]" => "001558"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001559
		# line in RSA:  <fld30> <fld31> <event_source> Invalid property '<fld1>' for article '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid property '%{fld1}' for article '%{fld2}'." }
				id => "message-001559"
				add_field => {
					"[event][id]" => "001559"
					"[rsa][message][id1]" => "001559"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001560
		# line in RSA:  <fld30> <fld31> <event_source> Invalid property name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid property name '%{fld1}'." }
				id => "message-001560"
				add_field => {
					"[event][id]" => "001560"
					"[rsa][message][id1]" => "001560"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001562
		# line in RSA:  <fld30> <fld31> <event_source> Invalid property value '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid property value '%{fld1}'." }
				id => "message-001562"
				add_field => {
					"[event][id]" => "001562"
					"[rsa][message][id1]" => "001562"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001563
		# line in RSA:  <fld30> <fld31> <event_source> Invalid Protocol specified for a <fld1> instance: <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid Protocol specified for a %{fld1} instance: %{fld2}." }
				id => "message-001563"
				add_field => {
					"[event][id]" => "001563"
					"[rsa][message][id1]" => "001563"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001564
		# line in RSA:  <fld30> <fld31> <event_source> Invalid publication name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid publication name '%{fld1}'." }
				id => "message-001564"
				add_field => {
					"[event][id]" => "001564"
					"[rsa][message][id1]" => "001564"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001565
		# line in RSA:  <fld30> <fld31> <event_source> Invalid publication type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid publication type." }
				id => "message-001565"
				add_field => {
					"[event][id]" => "001565"
					"[rsa][message][id1]" => "001565"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001566
		# line in RSA:  <fld30> <fld31> <event_source> Invalid Query: CUBE and ROLLUP cannot compute distinct aggregates. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid Query: CUBE and ROLLUP cannot compute distinct aggregates." }
				id => "message-001566"
				add_field => {
					"[event][id]" => "001566"
					"[rsa][message][id1]" => "001566"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001567
		# line in RSA:  <fld30> <fld31> <event_source> Invalid Remote Server Option: '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid Remote Server Option: '%{fld1}'." }
				id => "message-001567"
				add_field => {
					"[event][id]" => "001567"
					"[rsa][message][id1]" => "001567"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001568
		# line in RSA:  <fld30> <fld31> <event_source> Invalid resync type. No validation has been performed for this subscription. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid resync type. No validation has been performed for this subscription." }
				id => "message-001568"
				add_field => {
					"[event][id]" => "001568"
					"[rsa][message][id1]" => "001568"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001569
		# line in RSA:  <fld30> <fld31> <event_source> Invalid scale specified. Scale must be less than precision and positive. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid scale specified. Scale must be less than precision and positive." }
				id => "message-001569"
				add_field => {
					"[event][id]" => "001569"
					"[rsa][message][id1]" => "001569"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001570
		# line in RSA:  <fld30> <fld31> <event_source> Invalid schema option specified for Queued updating publication. Need to set the schema option to include DRI constraints. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid schema option specified for Queued updating publication. Need to set the schema option to include DRI constraints." }
				id => "message-001570"
				add_field => {
					"[event][id]" => "001570"
					"[rsa][message][id1]" => "001570"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001571
		# line in RSA:  <fld30> <fld31> <event_source> Invalid schema or catalog specified for provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid schema or catalog specified for provider '%{fld1}'." }
				id => "message-001571"
				add_field => {
					"[event][id]" => "001571"
					"[rsa][message][id1]" => "001571"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001572
		# line in RSA:  <fld30> <fld31> <event_source> Invalid server data type (<fld1>) specified in repl type lookup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid server data type (%{fld1}) specified in repl type lookup." }
				id => "message-001572"
				add_field => {
					"[event][id]" => "001572"
					"[rsa][message][id1]" => "001572"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001573
		# line in RSA:  <fld30> <fld31> <event_source> Invalid SPID <fld1> specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid SPID %{fld1} specified." }
				id => "message-001573"
				add_field => {
					"[event][id]" => "001573"
					"[rsa][message][id1]" => "001573"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001574
		# line in RSA:  <fld30> <fld31> <event_source> Invalid starting position specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid starting position specified." }
				id => "message-001574"
				add_field => {
					"[event][id]" => "001574"
					"[rsa][message][id1]" => "001574"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001575
		# line in RSA:  <fld30> <fld31> <event_source> Invalid storage type <fld1> specified writing variant of type <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid storage type %{fld1} specified writing variant of type %{fld2}." }
				id => "message-001575"
				add_field => {
					"[event][id]" => "001575"
					"[rsa][message][id1]" => "001575"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001576
		# line in RSA:  <fld30> <fld31> <event_source> Invalid subcommand value <fld1>. Legal range from <fld2> to <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid subcommand value %{fld1}. Legal range from %{fld2} to %{fld3}." }
				id => "message-001576"
				add_field => {
					"[event][id]" => "001576"
					"[rsa][message][id1]" => "001576"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001577
		# line in RSA:  <fld30> <fld31> <event_source> Invalid Subscriber partition validation expression '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid Subscriber partition validation expression '%{fld1}'." }
				id => "message-001577"
				add_field => {
					"[event][id]" => "001577"
					"[rsa][message][id1]" => "001577"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001578
		# line in RSA:  <fld30> <fld31> <event_source> Invalid subscription type is specified. A subscription to publication '<fld1>' already exists in the database with a different subscription type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid subscription type is specified. A subscription to publication '%{fld1}' already exists in the database with a different subscription type." }
				id => "message-001578"
				add_field => {
					"[event][id]" => "001578"
					"[rsa][message][id1]" => "001578"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001579
		# line in RSA:  <fld30> <fld31> <event_source> Invalid text, ntext, or image pointer type. Must be binary(16). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid text, ntext, or image pointer type. Must be binary(16)." }
				id => "message-001579"
				add_field => {
					"[event][id]" => "001579"
					"[rsa][message][id1]" => "001579"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001580
		# line in RSA:  <fld30> <fld31> <event_source> Invalid text, ntext, or image pointer value <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid text, ntext, or image pointer value %{fld1}." }
				id => "message-001580"
				add_field => {
					"[event][id]" => "001580"
					"[rsa][message][id1]" => "001580"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001581
		# line in RSA:  <fld30> <fld31> <event_source> Invalid transaction import buffer. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid transaction import buffer." }
				id => "message-001581"
				add_field => {
					"[event][id]" => "001581"
					"[rsa][message][id1]" => "001581"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001582
		# line in RSA:  <fld30> <fld31> <event_source> Invalid transaction mark name. The 'LSN:' prefix is reserved. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid transaction mark name. The 'LSN:' prefix is reserved." }
				id => "message-001582"
				add_field => {
					"[event][id]" => "001582"
					"[rsa][message][id1]" => "001582"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001583
		# line in RSA:  <fld30> <fld31> <event_source> Invalid transaction state change requested from <fld1> to <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid transaction state change requested from %{fld1} to %{fld2}." }
				id => "message-001583"
				add_field => {
					"[event][id]" => "001583"
					"[rsa][message][id1]" => "001583"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001584
		# line in RSA:  <fld30> <fld31> <event_source> Invalid type '<fld1>' for WAITFOR. Supported data types are CHAR/VARCHAR, NCHAR/NVARCHAR, and DATETIME. WAITFOR DELAY supports the INT and SMALLINT data types. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid type '%{fld1}' for WAITFOR. Supported data types are CHAR/VARCHAR, NCHAR/NVARCHAR, and DATETIME. WAITFOR DELAY supports the INT and SMALLINT data types." }
				id => "message-001584"
				add_field => {
					"[event][id]" => "001584"
					"[rsa][message][id1]" => "001584"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001585
		# line in RSA:  <fld30> <fld31> <event_source> Invalid usage of the option <fld1> in the <fld2> statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid usage of the option %{fld1} in the %{fld2} statement." }
				id => "message-001585"
				add_field => {
					"[event][id]" => "001585"
					"[rsa][message][id1]" => "001585"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001586
		# line in RSA:  <fld30> <fld31> <event_source> Invalid use of '<fld1>' within a function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid use of '%{fld1}' within a function." }
				id => "message-001586"
				add_field => {
					"[event][id]" => "001586"
					"[rsa][message][id1]" => "001586"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001587
		# line in RSA:  <fld30> <fld31> <event_source> Invalid use of full-text predicate in the HAVING clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid use of full-text predicate in the HAVING clause." }
				id => "message-001587"
				add_field => {
					"[event][id]" => "001587"
					"[rsa][message][id1]" => "001587"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001588
		# line in RSA:  <fld30> <fld31> <event_source> Invalid use of schema and/or catalog for OLE DB provider '<fld1>'. A four-part name was supplied, but the provider does not expose the necessary interfaces to use a catalog and/or schema. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid use of schema and/or catalog for OLE DB provider '%{fld1}'. A four-part name was supplied, but the provider does not expose the necessary interfaces to use a catalog and/or schema." }
				id => "message-001588"
				add_field => {
					"[event][id]" => "001588"
					"[rsa][message][id1]" => "001588"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001589
		# line in RSA:  <fld30> <fld31> <event_source> Invalid value <fld1> for state. Valid range is from <fld2> to <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid value %{fld1} for state. Valid range is from %{fld2} to %{fld3}." }
				id => "message-001589"
				add_field => {
					"[event][id]" => "001589"
					"[rsa][message][id1]" => "001589"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001590
		# line in RSA:  <fld30> <fld31> <event_source> Invalid value for queue type was specified. Valid values = (<fld1>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid value for queue type was specified. Valid values = (%{fld1})." }
				id => "message-001590"
				add_field => {
					"[event][id]" => "001590"
					"[rsa][message][id1]" => "001590"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001591
		# line in RSA:  <fld30> <fld31> <event_source> Invalid value specified for <fld1> parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid value specified for %{fld1} parameter." }
				id => "message-001591"
				add_field => {
					"[event][id]" => "001591"
					"[rsa][message][id1]" => "001591"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001593
		# line in RSA:  <fld30> <fld31> <event_source> Invalid value specified for agent parameter 'SkipErrors'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid value specified for agent parameter 'SkipErrors'." }
				id => "message-001593"
				add_field => {
					"[event][id]" => "001593"
					"[rsa][message][id1]" => "001593"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001594
		# line in RSA:  <fld30> <fld31> <event_source> Invalid working directory '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalid working directory '%{fld1}'." }
				id => "message-001594"
				add_field => {
					"[event][id]" => "001594"
					"[rsa][message][id1]" => "001594"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1676
	# line in RSA:  <fld30> <fld31> <event_source> Invalidated the existing snapshot of the publication. Run the Snapshot Agent again to generate a new snapshot. 
	else if [logstash][msgparser][id] == "msgParserId1676" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Invalidated the existing snapshot of the publication. Run the Snapshot Agent again to generate a new snapshot." }
			id => "msgParserId1676"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "It" {
		# MESSAGE 001596
		# line in RSA:  <fld30> <fld31> <event_source> It is invalid for any TSQL step of a multiserver job to have a non-null <fld1> value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} It is invalid for any TSQL step of a multiserver job to have a non-null %{fld1} value." }
				id => "message-001596"
				add_field => {
					"[event][id]" => "001596"
					"[rsa][message][id1]" => "001596"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001597
		# line in RSA:  <fld30> <fld31> <event_source> It is invalid to exclude the rowguid column for the table from the partition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} It is invalid to exclude the rowguid column for the table from the partition." }
				id => "message-001597"
				add_field => {
					"[event][id]" => "001597"
					"[rsa][message][id1]" => "001597"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001598
		# line in RSA:  <fld30> <fld31> <event_source> It is invalid to remove the default Publisher '<fld1>', publication database '<fld2>', and publication '<fld3>' from the list of synchronization partners 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} It is invalid to remove the default Publisher '%{fld1}', publication database '%{fld2}', and publication '%{fld3}' from the list of synchronization partners" }
				id => "message-001598"
				add_field => {
					"[event][id]" => "001598"
					"[rsa][message][id1]" => "001598"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001599
		# line in RSA:  <fld30> <fld31> <event_source> It is not possible to add column '<fld1>' to article '<fld2>' because the snapshot for publication '<fld3>' has been run. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} It is not possible to add column '%{fld1}' to article '%{fld2}' because the snapshot for publication '%{fld3}' has been run." }
				id => "message-001599"
				add_field => {
					"[event][id]" => "001599"
					"[rsa][message][id1]" => "001599"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001600
		# line in RSA:  <fld30> <fld31> <event_source> It is not possible to drop column '<fld1>' to article '<fld2>' because the snapshot for publication '<fld3>' has already been run. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} It is not possible to drop column '%{fld1}' to article '%{fld2}' because the snapshot for publication '%{fld3}' has already been run." }
				id => "message-001600"
				add_field => {
					"[event][id]" => "001600"
					"[rsa][message][id1]" => "001600"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Job" {
		# MESSAGE 001601
		# line in RSA:  <fld30> <fld31> <event_source> Job '<fld1>' is already targeted at server '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job '%{fld1}' is already targeted at server '%{fld2}'." }
				id => "message-001601"
				add_field => {
					"[event][id]" => "001601"
					"[rsa][message][id1]" => "001601"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001602
		# line in RSA:  <fld30> <fld31> <event_source> Job '<fld1>' is not currently targeted at server '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job '%{fld1}' is not currently targeted at server '%{fld2}'." }
				id => "message-001602"
				add_field => {
					"[event][id]" => "001602"
					"[rsa][message][id1]" => "001602"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001603
		# line in RSA:  <fld30> <fld31> <event_source> Job '<fld1>' started successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job '%{fld1}' started successfully." }
				id => "message-001603"
				add_field => {
					"[event][id]" => "001603"
					"[rsa][message][id1]" => "001603"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001604
		# line in RSA:  <fld30> <fld31> <event_source> Job '<fld1>' stopped successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job '%{fld1}' stopped successfully." }
				id => "message-001604"
				add_field => {
					"[event][id]" => "001604"
					"[rsa][message][id1]" => "001604"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001605
		# line in RSA:  <fld30> <fld31> <event_source> Job applied to <fld1> new servers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job applied to %{fld1} new servers." }
				id => "message-001605"
				add_field => {
					"[event][id]" => "001605"
					"[rsa][message][id1]" => "001605"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001606
		# line in RSA:  <fld30> <fld31> <event_source> Job removed from <fld1> servers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job removed from %{fld1} servers." }
				id => "message-001606"
				add_field => {
					"[event][id]" => "001606"
					"[rsa][message][id1]" => "001606"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001607
		# line in RSA:  <fld30> <fld31> <event_source> Job Schedules: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job Schedules:" }
				id => "message-001607"
				add_field => {
					"[event][id]" => "001607"
					"[rsa][message][id1]" => "001607"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001608
		# line in RSA:  <fld30> <fld31> <event_source> Job Steps: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job Steps:" }
				id => "message-001608"
				add_field => {
					"[event][id]" => "001608"
					"[rsa][message][id1]" => "001608"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001609
		# line in RSA:  <fld30> <fld31> <event_source> Job Target Servers: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Job Target Servers:" }
				id => "message-001609"
				add_field => {
					"[event][id]" => "001609"
					"[rsa][message][id1]" => "001609"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1691
	# line in RSA:  <fld30> <fld31> <event_source> Joined tables cannot be specified in a query containing outer join operators. View or function '<fld1>' contains joined tables. 
	else if [logstash][msgparser][id] == "msgParserId1691" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Joined tables cannot be specified in a query containing outer join operators. View or function '%{fld1}' contains joined tables." }
			id => "msgParserId1691"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "KILL" {
		# MESSAGE 001611
		# line in RSA:  <fld30> <fld31> <event_source> KILL command cannot be used inside user transactions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} KILL command cannot be used inside user transactions." }
				id => "message-001611"
				add_field => {
					"[event][id]" => "001611"
					"[rsa][message][id1]" => "001611"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001612
		# line in RSA:  <fld30> <fld31> <event_source> KILL command failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} KILL command failed." }
				id => "message-001612"
				add_field => {
					"[event][id]" => "001612"
					"[rsa][message][id1]" => "001612"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001613
		# line in RSA:  <fld30> <fld31> <event_source> KILL SPID WITH COMMIT/ABORT is not supported by Microsoft SQL Server 2000. Use Microsoft Distributed Transaction Coordinator to resolve distributed transactions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} KILL SPID WITH COMMIT/ABORT is not supported by Microsoft SQL Server 2000. Use Microsoft Distributed Transaction Coordinator to resolve distributed transactions." }
				id => "message-001613"
				add_field => {
					"[event][id]" => "001613"
					"[rsa][message][id1]" => "001613"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "ksconsole" {
		# MESSAGE 001614
		# line in RSA:  <fld30> <fld31> <event_source> ksconsole: Cannot create <fld1> : <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ksconsole: Cannot create %{fld1} : %{fld2}." }
				id => "message-001614"
				add_field => {
					"[event][id]" => "001614"
					"[rsa][message][id1]" => "001614"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001616
		# line in RSA:  <fld30> <fld31> <event_source> ksconsole: Console input request for type 0x<fld1>, ID 0x<fld2> failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ksconsole: Console input request for type 0x%{fld1}, ID 0x%{fld2} failed." }
				id => "message-001616"
				add_field => {
					"[event][id]" => "001616"
					"[rsa][message][id1]" => "001616"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001617
		# line in RSA:  <fld30> <fld31> <event_source> ksconsole: Could not close console connection. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ksconsole: Could not close console connection." }
				id => "message-001617"
				add_field => {
					"[event][id]" => "001617"
					"[rsa][message][id1]" => "001617"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001618
		# line in RSA:  <fld30> <fld31> <event_source> ksconsole: Could not receive request from console client. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ksconsole: Could not receive request from console client." }
				id => "message-001618"
				add_field => {
					"[event][id]" => "001618"
					"[rsa][message][id1]" => "001618"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001619
		# line in RSA:  <fld30> <fld31> <event_source> ksconsole: Could not send request to console client. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ksconsole: Could not send request to console client." }
				id => "message-001619"
				add_field => {
					"[event][id]" => "001619"
					"[rsa][message][id1]" => "001619"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001620
		# line in RSA:  <fld30> <fld31> <event_source> ksconsole: Reinitializing the console. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ksconsole: Reinitializing the console." }
				id => "message-001620"
				add_field => {
					"[event][id]" => "001620"
					"[rsa][message][id1]" => "001620"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Language" {
		# MESSAGE 001621
		# line in RSA:  <fld30> <fld31> <event_source> Language deleted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Language deleted." }
				id => "message-001621"
				add_field => {
					"[event][id]" => "001621"
					"[rsa][message][id1]" => "001621"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001622
		# line in RSA:  <fld30> <fld31> <event_source> Language requested in 'login <fld1>' is not an official name on this SQL Server. Using user default <fld2> instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Language requested in 'login %{fld1}' is not an official name on this SQL Server. Using user default %{fld2} instead." }
				id => "message-001622"
				add_field => {
					"[event][id]" => "001622"
					"[rsa][message][id1]" => "001622"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001623
		# line in RSA:  <fld30> <fld31> <event_source> Language requested in login '<username>' is not an official language name on this SQL Server. Login fails. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Language requested in login '%{username}' is not an official language name on this SQL Server. Login fails." }
				id => "message-001623"
				add_field => {
				"result" => "Login Failed"
					"[event][id]" => "001623"
					"[rsa][message][id1]" => "001623"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001624
		# line in RSA:  <fld30> <fld31> <event_source> Language requested in login '<fld1>' is not an official name on this SQL Server. Using server-wide default <fld2> instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Language requested in login '%{fld1}' is not an official name on this SQL Server. Using server-wide default %{fld2} instead." }
				id => "message-001624"
				add_field => {
					"[event][id]" => "001624"
					"[rsa][message][id1]" => "001624"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1705
	# line in RSA:  <fld30> <fld31> <event_source> Launched startup procedure '<fld1>'
	else if [logstash][msgparser][id] == "msgParserId1705" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Launched startup procedure '%{fld1}'" }
			id => "msgParserId1705"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1706
	# line in RSA:  <fld30> <fld31> <event_source> Lazy schema validation error. Linked server schema version has changed. Re-run the query. 
	else if [logstash][msgparser][id] == "msgParserId1706" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Lazy schema validation error. Linked server schema version has changed. Re-run the query." }
			id => "msgParserId1706"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1707
	# line in RSA:  <fld30> <fld31> <event_source> leaf page 
	else if [logstash][msgparser][id] == "msgParserId1707" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} leaf page" }
			id => "msgParserId1707"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1708
	# line in RSA:  <fld30> <fld31> <event_source> Length of text, ntext, or image data (<fld1>) to be replicated exceeds configured maximum <fld2>. 
	else if [logstash][msgparser][id] == "msgParserId1708" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Length of text, ntext, or image data (%{fld1}) to be replicated exceeds configured maximum %{fld2}." }
			id => "msgParserId1708"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1709
	# line in RSA:  <fld30> <fld31> <event_source> Limit exceeded for number of servers. 
	else if [logstash][msgparser][id] == "msgParserId1709" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Limit exceeded for number of servers." }
			id => "msgParserId1709"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Line" {
		# MESSAGE 001629
		# line in RSA:  <fld30> <fld31> <event_source> Line <fld1>: <fld2> clause allowed only for <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Line %{fld1}: %{fld2} clause allowed only for %{fld3}." }
				id => "message-001629"
				add_field => {
					"[event][id]" => "001629"
					"[rsa][message][id1]" => "001629"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001630
		# line in RSA:  <fld30> <fld31> <event_source> Line <fld1>: Incorrect syntax near '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Line %{fld1}: Incorrect syntax near '%{fld2}'." }
				id => "message-001630"
				add_field => {
					"[event][id]" => "001630"
					"[rsa][message][id1]" => "001630"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001631
		# line in RSA:  <fld30> <fld31> <event_source> Line <fld1>: Invalid procedure number (<fld2>). Must be between 1 and 32767. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Line %{fld1}: Invalid procedure number (%{fld2}). Must be between 1 and 32767." }
				id => "message-001631"
				add_field => {
					"[event][id]" => "001631"
					"[rsa][message][id1]" => "001631"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001632
		# line in RSA:  <fld30> <fld31> <event_source> Line <fld1>: Length or precision specification <fld2> is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Line %{fld1}: Length or precision specification %{fld2} is invalid." }
				id => "message-001632"
				add_field => {
					"[event][id]" => "001632"
					"[rsa][message][id1]" => "001632"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001633
		# line in RSA:  <fld30> <fld31> <event_source> Line <fld1>: Specified scale <fld2> is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Line %{fld1}: Specified scale %{fld2} is invalid." }
				id => "message-001633"
				add_field => {
					"[event][id]" => "001633"
					"[rsa][message][id1]" => "001633"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "List" {
		# MESSAGE 001634
		# line in RSA:  <fld30> <fld31> <event_source> List of <fld1> has too few names. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} List of %{fld1} has too few names." }
				id => "message-001634"
				add_field => {
					"[event][id]" => "001634"
					"[rsa][message][id1]" => "001634"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001635
		# line in RSA:  <fld30> <fld31> <event_source> List of <fld1> has too many names. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} List of %{fld1} has too many names." }
				id => "message-001635"
				add_field => {
					"[event][id]" => "001635"
					"[rsa][message][id1]" => "001635"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001636
		# line in RSA:  <fld30> <fld31> <event_source> List of <fld1> name contains spaces, which are not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} List of %{fld1} name contains spaces, which are not allowed." }
				id => "message-001636"
				add_field => {
					"[event][id]" => "001636"
					"[rsa][message][id1]" => "001636"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001637
		# line in RSA:  <fld30> <fld31> <event_source> List of <fld1> names contains name(s) which have '<fld2>' non-alphabetic characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} List of %{fld1} names contains name(s) which have '%{fld2}' non-alphabetic characters." }
				id => "message-001637"
				add_field => {
					"[event][id]" => "001637"
					"[rsa][message][id1]" => "001637"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1719
	# line in RSA:  <fld30> <fld31> <event_source> Lock request time out period exceeded. 
	else if [logstash][msgparser][id] == "msgParserId1719" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Lock request time out period exceeded." }
			id => "msgParserId1719"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Log" {
		# MESSAGE 001639
		# line in RSA:  <fld30> <fld31> <event_source> Log backed up: Database: <fld1>, creation date(time): <fld2>( <fld3>), first LSN:  <fld4>, last LSN:  <fld5>, number of dump devices: <fld6>, device information: ( <fld7>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Log backed up: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), first LSN:  %{fld4}, last LSN:  %{fld5}, number of dump devices: %{fld6}, device information: ( %{fld7})." }
				id => "message-001639"
				add_field => {
					"[event][id]" => "001639"
					"[rsa][message][id1]" => "001639"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001640
		# line in RSA:  <fld30> <fld31> <event_source> Log file '<fld1>' does not match the primary file.  It may be from a different database or the log may have been rebuilt previously. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Log file '%{fld1}' does not match the primary file.  It may be from a different database or the log may have been rebuilt previously." }
				id => "message-001640"
				add_field => {
					"[event][id]" => "001640"
					"[rsa][message][id1]" => "001640"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001641
		# line in RSA:  <fld30> <fld31> <event_source> Log file '<fld1>' for this database is already active. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Log file '%{fld1}' for this database is already active." }
				id => "message-001641"
				add_field => {
					"[event][id]" => "001641"
					"[rsa][message][id1]" => "001641"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001642
		# line in RSA:  <fld30> <fld31> <event_source> Log file name cannot be generated from a raw device. The log file name and path must be specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Log file name cannot be generated from a raw device. The log file name and path must be specified." }
				id => "message-001642"
				add_field => {
					"[event][id]" => "001642"
					"[rsa][message][id1]" => "001642"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001643
		# line in RSA:  <fld30> <fld31> <event_source> Log Reader Agent startup message. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Log Reader Agent startup message." }
				id => "message-001643"
				add_field => {
					"[event][id]" => "001643"
					"[rsa][message][id1]" => "001643"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001644
		# line in RSA:  <fld30> <fld31> <event_source> Log restored: Database: <fld1>, creation date(time): <fld2>( <fld3>), first LSN:  <fld4>, last LSN:  <fld5>, number of dump devices: <fld6>, device information: ( <fld7>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Log restored: Database: %{fld1}, creation date(time): %{fld2}( %{fld3}), first LSN:  %{fld4}, last LSN:  %{fld5}, number of dump devices: %{fld6}, device information: ( %{fld7})." }
				id => "message-001644"
				add_field => {
					"[event][id]" => "001644"
					"[rsa][message][id1]" => "001644"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1726
	# line in RSA:  <fld30> <fld31> <event_source> LogEvent: Failed to report the current event. Operating system error = <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId1726" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} LogEvent: Failed to report the current event. Operating system error = %{fld1}." }
			id => "msgParserId1726"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1727
	# line in RSA:  <fld30> <fld31> <event_source> Logging SQL Server messages in file '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1727" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Logging SQL Server messages in file '%{fld1}'." }
			id => "msgParserId1727"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Logical" {
		# MESSAGE 001647
		# line in RSA:  <fld30> <fld31> <event_source> Logical data device '<fld1>' not created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Logical data device '%{fld1}' not created." }
				id => "message-001647"
				add_field => {
					"[event][id]" => "001647"
					"[rsa][message][id1]" => "001647"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001648
		# line in RSA:  <fld30> <fld31> <event_source> Logical device '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Logical device '%{fld1}' already exists." }
				id => "message-001648"
				add_field => {
					"[event][id]" => "001648"
					"[rsa][message][id1]" => "001648"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001649
		# line in RSA:  <fld30> <fld31> <event_source> Logical file '<fld1>' is not part of database '<fld2>'. Use RESTORE FILELISTONLY to list the logical file names. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Logical file '%{fld1}' is not part of database '%{fld2}'. Use RESTORE FILELISTONLY to list the logical file names." }
				id => "message-001649"
				add_field => {
					"[event][id]" => "001649"
					"[rsa][message][id1]" => "001649"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001650
		# line in RSA:  <fld30> <fld31> <event_source> Logical page <fld1> in database ID <fld2> is already hashed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Logical page %{fld1} in database ID %{fld2} is already hashed." }
				id => "message-001650"
				add_field => {
					"[event][id]" => "001650"
					"[rsa][message][id1]" => "001650"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Login" {
		# MESSAGE 001651
		# line in RSA:  <fld30> <fld31> <event_source> Login '<fld1>' is aliased or mapped to a user in one or more database(s). Drop the user or alias before dropping the login. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login '%{fld1}' is aliased or mapped to a user in one or more database(s). Drop the user or alias before dropping the login." }
				id => "message-001651"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_outcome" => "Failure"
					"[event][id]" => "001651"
					"[rsa][message][id1]" => "001651"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001652
		# line in RSA:  <fld30> <fld31> <event_source> Login '<fld1>' is already mapped to user '<username>' in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login '%{fld1}' is already mapped to user '%{username}' in database '%{fld2}'." }
				id => "message-001652"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Failure"
					"[event][id]" => "001652"
					"[rsa][message][id1]" => "001652"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001653
		# line in RSA:  <fld30> <fld31> <event_source> Login '<fld1>' owns one or more database(s). Change the owner of the following database(s) before dropping login: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login '%{fld1}' owns one or more database(s). Change the owner of the following database(s) before dropping login:" }
				id => "message-001653"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_outcome" => "Failure"
					"[event][id]" => "001653"
					"[rsa][message][id1]" => "001653"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001654
		# line in RSA:  <fld30> <fld31> <event_source> Login '<username>' owns one or more multiserver jobs. Ownership of these jobs can only be assigned to members of the <fld2> role. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login '%{username}' owns one or more multiserver jobs. Ownership of these jobs can only be assigned to members of the %{fld2} role." }
				id => "message-001654"
				add_field => {
				"result" => "Login owns one or more multiserver jobs"
					"[event][id]" => "001654"
					"[rsa][message][id1]" => "001654"
					"[event][categoryid]" => "1402000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001655
		# line in RSA:   <fld30> <fld31> <event_source> Login dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login dropped." }
				id => "message-001655"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_outcome" => "Success"
				"result" => "Login dropped"
					"[event][id]" => "001655"
					"[rsa][message][id1]" => "001655"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001656
		# line in RSA:  <fld30> <fld31> <event_source> Login failed for user '<username>'. Only administrators may connect at this time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed for user '%{username}'. Only administrators may connect at this time." }
				id => "message-001656"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login failure - Only administrators may connect at this time"
					"[event][id]" => "001656"
					"[rsa][message][id1]" => "001656"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001657
		# line in RSA:   <fld30> <fld31> <event_source> Login failed for user '<username>'. Reason: Not associated with a trusted SQL Server connection. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed for user '%{username}'. Reason: Not associated with a trusted SQL Server connection." }
				id => "message-001657"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login failure - user not associated with trusted SQL Sewrver"
					"[event][id]" => "001657"
					"[rsa][message][id1]" => "001657"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001658
		# line in RSA:  <fld30> <fld31> <event_source> Login failed for user '<username>'. Reason: Not defined as a valid user of a trusted SQL Server connection. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed for user '%{username}'. Reason: Not defined as a valid user of a trusted SQL Server connection." }
				id => "message-001658"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login failure - user not trusted "
					"[event][id]" => "001658"
					"[rsa][message][id1]" => "001658"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001659
		# line in RSA:  <fld30> <fld31> <event_source> Login failed for user '<username>'. Reason: Server is in single user mode. Only one administrator can connect at this time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed for user '%{username}'. Reason: Server is in single user mode. Only one administrator can connect at this time." }
				id => "message-001659"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login failure - Server is in single user mode"
					"[event][id]" => "001659"
					"[rsa][message][id1]" => "001659"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001660
		# line in RSA:  <fld30> <fld31> <event_source> Login failed for user '<username>'. Reason: User name contains a mapping character or is longer than 30 characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed for user '%{username}'. Reason: User name contains a mapping character or is longer than 30 characters." }
				id => "message-001660"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login failure - User name contains a mapping character or is longer than 30 characters"
					"[event][id]" => "001660"
					"[rsa][message][id1]" => "001660"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001661
		# line in RSA: <fld30> <fld31> <event_source> Login failed for user '<username>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed for user '%{username}'." }
				id => "message-001661"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login failure"
					"[event][id]" => "001661"
					"[rsa][message][id1]" => "001661"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001662
		# line in RSA:   <fld30> <fld31> <event_source> Login failed. The maximum simultaneous user count of <fld1> licenses for this '<fld2>' server has been exceeded. Additional licenses should be obtained and installed or you should upgrade to a full version. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed. The maximum simultaneous user count of %{fld1} licenses for this '%{fld2}' server has been exceeded. Additional licenses should be obtained and installed or you should upgrade to a full version." }
				id => "message-001662"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login failure maximum simultaneous user count exceeded"
					"[event][id]" => "001662"
					"[rsa][message][id1]" => "001662"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001663
		# line in RSA:   <fld30> <fld31> <event_source> Login failed. The maximum simultaneous user count of <fld1> licenses for this server has been exceeded. Additional licenses should be obtained and registered through the Licensing application in the Windows NT Control Panel. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed. The maximum simultaneous user count of %{fld1} licenses for this server has been exceeded. Additional licenses should be obtained and registered through the Licensing application in the Windows NT Control Panel." }
				id => "message-001663"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login failure - maximum simultaneous user count exceeded"
					"[event][id]" => "001663"
					"[rsa][message][id1]" => "001663"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001664
		# line in RSA:  <fld30> <fld31> <event_source> Login failed. The maximum workstation licensing limit for SQL Server access has been exceeded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login failed. The maximum workstation licensing limit for SQL Server access has been exceeded." }
				id => "message-001664"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"result" => "Login Failure - maximum workstation licensing limit exceeded"
					"[event][id]" => "001664"
					"[rsa][message][id1]" => "001664"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001666
		# line in RSA:  <fld30> <fld31> <event_source> Login succeeded for user '<username>'. Connection: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login succeeded for user '%{username}'. Connection: %{fld1}." }
				id => "message-001666"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"result" => "Login Success"
					"[event][id]" => "001666"
					"[rsa][message][id1]" => "001666"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001665
		# line in RSA: <fld30> <fld31> <event_source> Login succeeded for user '<username>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login succeeded for user '%{username}'." }
				id => "message-001665"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"result" => "Login Success"
					"[event][id]" => "001665"
					"[rsa][message][id1]" => "001665"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001668
		# line in RSA:   <fld30> <fld31> <event_source> Login: <username>, server process ID (SPID): <fld1>, kernel process ID (KPID): <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Login: %{username}, server process ID (SPID): %{fld1}, kernel process ID (KPID): %{fld2}" }
				id => "message-001668"
				add_field => {
				"result" => "Login"
					"[event][id]" => "001668"
					"[rsa][message][id1]" => "001668"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1749
	# line in RSA:  <fld30> <fld31> <event_source> Logins other than the current user can only be seen by members of the sysadmin role. 
	else if [logstash][msgparser][id] == "msgParserId1749" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Logins other than the current user can only be seen by members of the sysadmin role." }
			id => "msgParserId1749"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1750
	# line in RSA:  <fld30> <fld31> <event_source> Looking for non 7-bit ASCII characters in the system tables of database '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1750" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Looking for non 7-bit ASCII characters in the system tables of database '%{fld1}'." }
			id => "msgParserId1750"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1751
	# line in RSA:  <fld30> <fld31> <event_source> LSN           : (<fld1>:<fld2>:<fld3>) 
	else if [logstash][msgparser][id] == "msgParserId1751" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} LSN           : (%{fld1}:%{fld2}:%{fld3})" }
			id => "msgParserId1751"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1752
	# line in RSA:  <fld30> <fld31> <event_source> Master device sector size is <fld1>. SQL Server cannot use the NO_BUFFERING option during I/O. 
	else if [logstash][msgparser][id] == "msgParserId1752" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Master device sector size is %{fld1}. SQL Server cannot use the NO_BUFFERING option during I/O." }
			id => "msgParserId1752"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1753
	# line in RSA:  <fld30> <fld31> <event_source> Materialized view articles cannot be created for publications with the properties allow_sync_tran, allow_queued_tran, or allow_dts. 
	else if [logstash][msgparser][id] == "msgParserId1753" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Materialized view articles cannot be created for publications with the properties allow_sync_tran, allow_queued_tran, or allow_dts." }
			id => "msgParserId1753"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Maximum" {
		# MESSAGE 001674
		# line in RSA:  <fld30> <fld31> <event_source> Maximum number of databases used for each query has been exceeded. The maximum allowed is <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Maximum number of databases used for each query has been exceeded. The maximum allowed is %{fld1}." }
				id => "message-001674"
				add_field => {
					"[event][id]" => "001674"
					"[rsa][message][id1]" => "001674"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001675
		# line in RSA:  <fld30> <fld31> <event_source> Maximum number of pages in batch I/O is limited to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Maximum number of pages in batch I/O is limited to %{fld1}." }
				id => "message-001675"
				add_field => {
					"[event][id]" => "001675"
					"[rsa][message][id1]" => "001675"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001676
		# line in RSA:  <fld30> <fld31> <event_source> Maximum number of processors supported is '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Maximum number of processors supported is '%{fld1}'." }
				id => "message-001676"
				add_field => {
					"[event][id]" => "001676"
					"[rsa][message][id1]" => "001676"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001677
		# line in RSA:  <fld30> <fld31> <event_source> Maximum stored procedure, function, trigger, or view nesting level exceeded (limit <fld1>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Maximum stored procedure, function, trigger, or view nesting level exceeded (limit %{fld1})." }
				id => "message-001677"
				add_field => {
					"[event][id]" => "001677"
					"[rsa][message][id1]" => "001677"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001678
		# line in RSA:  <fld30> <fld31> <event_source> Maximum system-generated unique value for a duplicate group exceeded for table ID <fld1>, index ID <fld2>. Dropping and re-creating the index may fix the problem; otherwise use another clustering key. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Maximum system-generated unique value for a duplicate group exceeded for table ID %{fld1}, index ID %{fld2}. Dropping and re-creating the index may fix the problem; otherwise use another clustering key." }
				id => "message-001678"
				add_field => {
					"[event][id]" => "001678"
					"[rsa][message][id1]" => "001678"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1759
	# line in RSA:  <fld30> <fld31> <event_source> MAXSIZE cannot be less than SIZE for file '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1759" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} MAXSIZE cannot be less than SIZE for file '%{fld1}'." }
			id => "msgParserId1759"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1760
	# line in RSA:  <fld30> <fld31> <event_source> Media recovery for ALTER DATABASE is not yet implemented. The database cannot be rolled forward. 
	else if [logstash][msgparser][id] == "msgParserId1760" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Media recovery for ALTER DATABASE is not yet implemented. The database cannot be rolled forward." }
			id => "msgParserId1760"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1761
	# line in RSA:  <fld30> <fld31> <event_source> Membership of the public role cannot be changed. 
	else if [logstash][msgparser][id] == "msgParserId1761" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Membership of the public role cannot be changed." }
			id => "msgParserId1761"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1762
	# line in RSA:  <fld30> <fld31> <event_source> Memory allocation error during DBCC processing. 
	else if [logstash][msgparser][id] == "msgParserId1762" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Memory allocation error during DBCC processing." }
			id => "msgParserId1762"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Merge" {
		# MESSAGE 001683
		# line in RSA:  <fld30> <fld31> <event_source> Merge agent profile optimized for the high volume server-to-server synchronization scenario. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Merge agent profile optimized for the high volume server-to-server synchronization scenario." }
				id => "message-001683"
				add_field => {
					"[event][id]" => "001683"
					"[rsa][message][id1]" => "001683"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001684
		# line in RSA:  <fld30> <fld31> <event_source> Merge Agent startup message. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Merge Agent startup message." }
				id => "message-001684"
				add_field => {
					"[event][id]" => "001684"
					"[rsa][message][id1]" => "001684"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001685
		# line in RSA:  <fld30> <fld31> <event_source> Merge filter '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Merge filter '%{fld1}' does not exist." }
				id => "message-001685"
				add_field => {
					"[event][id]" => "001685"
					"[rsa][message][id1]" => "001685"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Message" {
		# MESSAGE 001686
		# line in RSA:  <fld30> <fld31> <event_source> Message number  <fld1> does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Message number  %{fld1} does not exist." }
				id => "message-001686"
				add_field => {
					"[event][id]" => "001686"
					"[rsa][message][id1]" => "001686"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001687
		# line in RSA:  <fld30> <fld31> <event_source> Message passed to <fld1> must be of type char, varchar, nchar, or nvarchar. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Message passed to %{fld1} must be of type char, varchar, nchar, or nvarchar." }
				id => "message-001687"
				add_field => {
					"[event][id]" => "001687"
					"[rsa][message][id1]" => "001687"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1768
	# line in RSA:  <fld30> <fld31> <event_source> Microsoft SQL Server <version> 
	else if [logstash][msgparser][id] == "msgParserId1768" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Microsoft SQL Server %{version}" }
			id => "msgParserId1768"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Minimally" {
		# MESSAGE 001689
		# line in RSA:  <fld30> <fld31> <event_source> Minimally logged extents were found in GAM interval starting at page <fld1> but the minimally logged flag is not set in the database table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Minimally logged extents were found in GAM interval starting at page %{fld1} but the minimally logged flag is not set in the database table." }
				id => "message-001689"
				add_field => {
					"[event][id]" => "001689"
					"[rsa][message][id1]" => "001689"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001690
		# line in RSA:  <fld30> <fld31> <event_source> Minimally logged operations cannot be backed up when the database is unavailable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Minimally logged operations cannot be backed up when the database is unavailable." }
				id => "message-001690"
				add_field => {
					"[event][id]" => "001690"
					"[rsa][message][id1]" => "001690"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001691
		# line in RSA:  <fld30> <fld31> <event_source> Minimally logged operations have occurred prior to this WITH RESTART command. Reissue the BACKUP statement without WITH RESTART. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Minimally logged operations have occurred prior to this WITH RESTART command. Reissue the BACKUP statement without WITH RESTART." }
				id => "message-001691"
				add_field => {
					"[event][id]" => "001691"
					"[rsa][message][id1]" => "001691"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1770
	# line in RSA:  <fld30> <fld31> <event_source> Mini-master Load step <fld1> failed - delete of archive loan payment.
	else if [logstash][msgparser][id] == "msgParserId1770" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Mini-master Load step %{fld1} failed - delete of archive loan payment." }
			id => "msgParserId1770"
			add_field => {
				"result" => "Mini-master Load step failed"
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1773
	# line in RSA:  <fld30> <fld31> <event_source> Minimum server memory value (<fld1>) must be less than or equal to the maximum value (<fld2>). 
	else if [logstash][msgparser][id] == "msgParserId1773" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Minimum server memory value (%{fld1}) must be less than or equal to the maximum value (%{fld2})." }
			id => "msgParserId1773"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Missing" {
		# MESSAGE 001693
		# line in RSA:  <fld30> <fld31> <event_source> Missing database name. Reissue the statement specifying a valid database name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Missing database name. Reissue the statement specifying a valid database name." }
				id => "message-001693"
				add_field => {
					"[event][id]" => "001693"
					"[rsa][message][id1]" => "001693"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001694
		# line in RSA:  <fld30> <fld31> <event_source> Missing end comment mark '*/'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Missing end comment mark '*/'." }
				id => "message-001694"
				add_field => {
					"[event][id]" => "001694"
					"[rsa][message][id1]" => "001694"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Mixing" {
		# MESSAGE 001695
		# line in RSA:  <fld30> <fld31> <event_source> Mixing old and new syntax in CREATE/ALTER DATABASE statement is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Mixing old and new syntax in CREATE/ALTER DATABASE statement is not allowed." }
				id => "message-001695"
				add_field => {
					"[event][id]" => "001695"
					"[rsa][message][id1]" => "001695"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001696
		# line in RSA:  <fld30> <fld31> <event_source> Mixing old and new syntax to specify cursor options is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Mixing old and new syntax to specify cursor options is not allowed." }
				id => "message-001696"
				add_field => {
					"[event][id]" => "001696"
					"[rsa][message][id1]" => "001696"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "MODIFY" {
		# MESSAGE 001697
		# line in RSA:  <fld30> <fld31> <event_source> MODIFY FILE encountered operating system error <fld1> while attempting to expand the physical file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MODIFY FILE encountered operating system error %{fld1} while attempting to expand the physical file." }
				id => "message-001697"
				add_field => {
					"[event][id]" => "001697"
					"[rsa][message][id1]" => "001697"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001698
		# line in RSA:  <fld30> <fld31> <event_source> MODIFY FILE failed for file "<fld1>". At least one property per file must be specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MODIFY FILE failed for file \"%{fld1}\". At least one property per file must be specified." }
				id => "message-001698"
				add_field => {
					"[event][id]" => "001698"
					"[rsa][message][id1]" => "001698"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001699
		# line in RSA:  <fld30> <fld31> <event_source> MODIFY FILE failed. Do not specify physical name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MODIFY FILE failed. Do not specify physical name." }
				id => "message-001699"
				add_field => {
					"[event][id]" => "001699"
					"[rsa][message][id1]" => "001699"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001700
		# line in RSA:  <fld30> <fld31> <event_source> MODIFY FILE failed. File '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MODIFY FILE failed. File '%{fld1}' does not exist." }
				id => "message-001700"
				add_field => {
					"[event][id]" => "001700"
					"[rsa][message][id1]" => "001700"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001701
		# line in RSA:  <fld30> <fld31> <event_source> MODIFY FILE failed. Size is greater than MAXSIZE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MODIFY FILE failed. Size is greater than MAXSIZE." }
				id => "message-001701"
				add_field => {
					"[event][id]" => "001701"
					"[rsa][message][id1]" => "001701"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001702
		# line in RSA:  <fld30> <fld31> <event_source> MODIFY FILE failed. Specified size is less than current size. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MODIFY FILE failed. Specified size is less than current size." }
				id => "message-001702"
				add_field => {
					"[event][id]" => "001702"
					"[rsa][message][id1]" => "001702"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001703
		# line in RSA:  <fld30> <fld31> <event_source> MODIFY FILE failed. Specify logical name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MODIFY FILE failed. Specify logical name." }
				id => "message-001703"
				add_field => {
					"[event][id]" => "001703"
					"[rsa][message][id1]" => "001703"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1785
	# line in RSA:  <fld30> <fld31> <event_source> money data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId1785" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} money data type %{fld1}" }
			id => "msgParserId1785"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "More" {
		# MESSAGE 001706
		# line in RSA:  <fld30> <fld31> <event_source> More than 16 columns specified in foreign key column list, table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} More than 16 columns specified in foreign key column list, table '%{fld1}'." }
				id => "message-001706"
				add_field => {
					"[event][id]" => "001706"
					"[rsa][message][id1]" => "001706"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001707
		# line in RSA:  <fld30> <fld31> <event_source> More than one column <fld1> constraint specified for column '<fld2>', table '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} More than one column %{fld1} constraint specified for column '%{fld2}', table '%{fld3}'." }
				id => "message-001707"
				add_field => {
					"[event][id]" => "001707"
					"[rsa][message][id1]" => "001707"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001708
		# line in RSA:  <fld30> <fld31> <event_source> More than one key specified in column level <fld1> constraint, table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} More than one key specified in column level %{fld1} constraint, table '%{fld2}'." }
				id => "message-001708"
				add_field => {
					"[event][id]" => "001708"
					"[rsa][message][id1]" => "001708"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1789
	# line in RSA:  <fld30> <fld31> <event_source> Mount tape for <fld1> of database '<fld2>'. 
	else if [logstash][msgparser][id] == "msgParserId1789" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Mount tape for %{fld1} of database '%{fld2}'." }
			id => "msgParserId1789"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "MS" {
		# MESSAGE 001710
		# line in RSA:  <fld30> <fld31> <event_source> MS SQL SNMP Extension Agent reconnecting. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MS SQL SNMP Extension Agent reconnecting." }
				id => "message-001710"
				add_field => {
					"[event][id]" => "001710"
					"[rsa][message][id1]" => "001710"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001711
		# line in RSA:  <fld30> <fld31> <event_source> MS SQL SNMP Extension Agent starting, <fld1>, version <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MS SQL SNMP Extension Agent starting, %{fld1}, version %{fld2}." }
				id => "message-001711"
				add_field => {
					"[event][id]" => "001711"
					"[rsa][message][id1]" => "001711"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001712
		# line in RSA:  <fld30> <fld31> <event_source> MS SQL SNMP Extension Agent stopping. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MS SQL SNMP Extension Agent stopping." }
				id => "message-001712"
				add_field => {
					"[event][id]" => "001712"
					"[rsa][message][id1]" => "001712"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "MSDTC" {
		# MESSAGE 001713
		# line in RSA:  <fld30> <fld31> <event_source> MSDTC Abort acknowledgement failed: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MSDTC Abort acknowledgement failed: %{fld1}." }
				id => "message-001713"
				add_field => {
					"[event][id]" => "001713"
					"[rsa][message][id1]" => "001713"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001714
		# line in RSA:  <fld30> <fld31> <event_source> MSDTC BEGIN TRANSACTION failed: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MSDTC BEGIN TRANSACTION failed: %{fld1}." }
				id => "message-001714"
				add_field => {
					"[event][id]" => "001714"
					"[rsa][message][id1]" => "001714"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001715
		# line in RSA:  <fld30> <fld31> <event_source> MSDTC Commit acknowledgement failed: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MSDTC Commit acknowledgement failed: %{fld1}." }
				id => "message-001715"
				add_field => {
					"[event][id]" => "001715"
					"[rsa][message][id1]" => "001715"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001716
		# line in RSA:  <fld30> <fld31> <event_source> MSDTC Global state is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MSDTC Global state is invalid." }
				id => "message-001716"
				add_field => {
					"[event][id]" => "001716"
					"[rsa][message][id1]" => "001716"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001717
		# line in RSA:  <fld30> <fld31> <event_source> MSDTC on server '<fld1>' is unavailable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MSDTC on server '%{fld1}' is unavailable." }
				id => "message-001717"
				add_field => {
					"[event][id]" => "001717"
					"[rsa][message][id1]" => "001717"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001718
		# line in RSA:  <fld30> <fld31> <event_source> MSDTC PREPARE acknowledgement failed: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} MSDTC PREPARE acknowledgement failed: %{fld1}." }
				id => "message-001718"
				add_field => {
					"[event][id]" => "001718"
					"[rsa][message][id1]" => "001718"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1799
	# line in RSA:  <fld30> <fld31> <event_source> MSrepl_tran_version column is a predefined column used for replication and can be only of data type uniqueidentifier 
	else if [logstash][msgparser][id] == "msgParserId1799" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} MSrepl_tran_version column is a predefined column used for replication and can be only of data type uniqueidentifier" }
			id => "msgParserId1799"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1800
	# line in RSA:  <fld30> <fld31> <event_source> MSX server does not support mixed security mode 
	else if [logstash][msgparser][id] == "msgParserId1800" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} MSX server does not support mixed security mode" }
			id => "msgParserId1800"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Multiple" {
		# MESSAGE 001721
		# line in RSA:  <fld30> <fld31> <event_source> Multiple columns are specified in an aggregated expression containing an outer reference. If an expression being aggregated contains an outer reference, then that outer reference must be the only column referenced in the expression. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Multiple columns are specified in an aggregated expression containing an outer reference. If an expression being aggregated contains an outer reference, then that outer reference must be the only column referenced in the expression." }
				id => "message-001721"
				add_field => {
					"[event][id]" => "001721"
					"[rsa][message][id1]" => "001721"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001722
		# line in RSA:  <fld30> <fld31> <event_source> Multiple identity columns specified for table '<fld1>'. Only one identity column per table is allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Multiple identity columns specified for table '%{fld1}'. Only one identity column per table is allowed." }
				id => "message-001722"
				add_field => {
					"[event][id]" => "001722"
					"[rsa][message][id1]" => "001722"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001723
		# line in RSA:  <fld30> <fld31> <event_source> Multiple NULL constraints were specified for column '<fld1>', table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Multiple NULL constraints were specified for column '%{fld1}', table '%{fld2}'." }
				id => "message-001723"
				add_field => {
					"[event][id]" => "001723"
					"[rsa][message][id1]" => "001723"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Must" {
		# MESSAGE 001724
		# line in RSA:  <fld30> <fld31> <event_source> Must be a System Administrator to perform LOAD with CONVERT65. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Must be a System Administrator to perform LOAD with CONVERT65." }
				id => "message-001724"
				add_field => {
					"[event][id]" => "001724"
					"[rsa][message][id1]" => "001724"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001725
		# line in RSA:  <fld30> <fld31> <event_source> Must create orphaned text inside a user transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Must create orphaned text inside a user transaction." }
				id => "message-001725"
				add_field => {
					"[event][id]" => "001725"
					"[rsa][message][id1]" => "001725"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001726
		# line in RSA:  <fld30> <fld31> <event_source> Must declare the variable '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Must declare the variable '%{fld1}'." }
				id => "message-001726"
				add_field => {
					"[event][id]" => "001726"
					"[rsa][message][id1]" => "001726"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001727
		# line in RSA:  <fld30> <fld31> <event_source> Must drop orphaned text before committing the transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Must drop orphaned text before committing the transaction." }
				id => "message-001727"
				add_field => {
					"[event][id]" => "001727"
					"[rsa][message][id1]" => "001727"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001728
		# line in RSA:  <fld30> <fld31> <event_source> Must pass parameter number <fld1> and subsequent parameters as '@name = value'. After the form '@name = value' has been used, all subsequent parameters must be passed in the form '@name = value'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Must pass parameter number %{fld1} and subsequent parameters as '@name = value'. After the form '@name = value' has been used, all subsequent parameters must be passed in the form '@name = value'." }
				id => "message-001728"
				add_field => {
					"[event][id]" => "001728"
					"[rsa][message][id1]" => "001728"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001729
		# line in RSA:  <fld30> <fld31> <event_source> Must specify table to select from. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Must specify table to select from." }
				id => "message-001729"
				add_field => {
					"[event][id]" => "001729"
					"[rsa][message][id1]" => "001729"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Name" {
		# MESSAGE 001730
		# line in RSA:  <fld30> <fld31> <event_source> Name          : <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Name          : %{fld1}" }
				id => "message-001730"
				add_field => {
					"[event][id]" => "001730"
					"[rsa][message][id1]" => "001730"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001731
		# line in RSA:  <fld30> <fld31> <event_source> Name cannot be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Name cannot be NULL." }
				id => "message-001731"
				add_field => {
					"[event][id]" => "001731"
					"[rsa][message][id1]" => "001731"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001732
		# line in RSA:  <fld30> <fld31> <event_source> Name is truncated to '<fld1>'. The maximum name length is <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Name is truncated to '%{fld1}'. The maximum name length is %{fld2}." }
				id => "message-001732"
				add_field => {
					"[event][id]" => "001732"
					"[rsa][message][id1]" => "001732"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1813
	# line in RSA:  <fld30> <fld31> <event_source> Names of SQL Server replication agents cannot be changed. 
	else if [logstash][msgparser][id] == "msgParserId1813" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Names of SQL Server replication agents cannot be changed." }
			id => "msgParserId1813"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1814
	# line in RSA:  <fld30> <fld31> <event_source> names that contain non 7-bit ASCII characters. 
	else if [logstash][msgparser][id] == "msgParserId1814" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} names that contain non 7-bit ASCII characters." }
			id => "msgParserId1814"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Neither" {
		# MESSAGE 001735
		# line in RSA:  <fld30> <fld31> <event_source> Neither MSmerge_contents nor MSmerge_tombstone contain meta data for this row. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Neither MSmerge_contents nor MSmerge_tombstone contain meta data for this row." }
				id => "message-001735"
				add_field => {
					"[event][id]" => "001735"
					"[rsa][message][id1]" => "001735"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001736
		# line in RSA:  <fld30> <fld31> <event_source> Neither the language requested in 'login <fld1>' nor user default language <fld2> is an official language name on this SQL Server. Using server-wide default <fld3> instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Neither the language requested in 'login %{fld1}' nor user default language %{fld2} is an official language name on this SQL Server. Using server-wide default %{fld3} instead." }
				id => "message-001736"
				add_field => {
					"[event][id]" => "001736"
					"[rsa][message][id1]" => "001736"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1817
	# line in RSA:  <fld30> <fld31> <event_source> Net-Library <fld1>' is already in use. 
	else if [logstash][msgparser][id] == "msgParserId1817" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Net-Library %{fld1}' is already in use." }
			id => "msgParserId1817"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "New" {
		# MESSAGE 001738
		# line in RSA:  <fld30> <fld31> <event_source> New application role added. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} New application role added." }
				id => "message-001738"
				add_field => {
					"[event][id]" => "001738"
					"[rsa][message][id1]" => "001738"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001739
		# line in RSA:  <fld30> <fld31> <event_source> New language inserted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} New language inserted." }
				id => "message-001739"
				add_field => {
					"[event][id]" => "001739"
					"[rsa][message][id1]" => "001739"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001740
		# line in RSA:  <fld30> <fld31> <event_source> New log file '<fld1>' was created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} New log file '%{fld1}' was created." }
				id => "message-001740"
				add_field => {
					"[event][id]" => "001740"
					"[rsa][message][id1]" => "001740"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001741
		# line in RSA:  <fld30> <fld31> <event_source> New login created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} New login created." }
				id => "message-001741"
				add_field => {
					"[event][id]" => "001741"
					"[rsa][message][id1]" => "001741"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001742
		# line in RSA:  <fld30> <fld31> <event_source> New role added. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} New role added." }
				id => "message-001742"
				add_field => {
					"[event][id]" => "001742"
					"[rsa][message][id1]" => "001742"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001743
		# line in RSA:  <fld30> <fld31> <event_source> New sort run starting on page <fld1> found extent not marked as shared. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} New sort run starting on page %{fld1} found extent not marked as shared." }
				id => "message-001743"
				add_field => {
					"[event][id]" => "001743"
					"[rsa][message][id1]" => "001743"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "No" {
		# MESSAGE 001744
		# line in RSA:  <fld30> <fld31> <event_source> No active open transactions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No active open transactions." }
				id => "message-001744"
				add_field => {
					"[event][id]" => "001744"
					"[rsa][message][id1]" => "001744"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001745
		# line in RSA:  <fld30> <fld31> <event_source> No alias exists for the specified user. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No alias exists for the specified user." }
				id => "message-001745"
				add_field => {
					"[event][id]" => "001745"
					"[rsa][message][id1]" => "001745"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001746
		# line in RSA:  <fld30> <fld31> <event_source> No alternate languages are available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No alternate languages are available." }
				id => "message-001746"
				add_field => {
					"[event][id]" => "001746"
					"[rsa][message][id1]" => "001746"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001747
		# line in RSA:  <fld30> <fld31> <event_source> No column was specified for column <fld1> of '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No column was specified for column %{fld1} of '%{fld2}'." }
				id => "message-001747"
				add_field => {
					"[event][id]" => "001747"
					"[rsa][message][id1]" => "001747"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001748
		# line in RSA:  <fld30> <fld31> <event_source> No command text was set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No command text was set." }
				id => "message-001748"
				add_field => {
					"[event][id]" => "001748"
					"[rsa][message][id1]" => "001748"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001749
		# line in RSA:  <fld30> <fld31> <event_source> No constraints have been defined for this object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No constraints have been defined for this object." }
				id => "message-001749"
				add_field => {
					"[event][id]" => "001749"
					"[rsa][message][id1]" => "001749"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001750
		# line in RSA:  <fld30> <fld31> <event_source> No description available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No description available." }
				id => "message-001750"
				add_field => {
					"[event][id]" => "001750"
					"[rsa][message][id1]" => "001750"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001751
		# line in RSA:  <fld30> <fld31> <event_source> No distributed or bound transaction is allowed in single user database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No distributed or bound transaction is allowed in single user database." }
				id => "message-001751"
				add_field => {
					"[event][id]" => "001751"
					"[rsa][message][id1]" => "001751"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001752
		# line in RSA:  <fld30> <fld31> <event_source> No entries were found in msdb..sysreplicationalerts. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No entries were found in msdb..sysreplicationalerts." }
				id => "message-001752"
				add_field => {
					"[event][id]" => "001752"
					"[rsa][message][id1]" => "001752"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001753
		# line in RSA:  <fld30> <fld31> <event_source> No entry found for the primary log file in sysfiles1.  Could not rebuild the log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No entry found for the primary log file in sysfiles1.  Could not rebuild the log." }
				id => "message-001753"
				add_field => {
					"[event][id]" => "001753"
					"[rsa][message][id1]" => "001753"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001754
		# line in RSA:  <fld30> <fld31> <event_source> No entry in sysdevices for backup device '<fld1>'. Update sysdevices and rerun statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No entry in sysdevices for backup device '%{fld1}'. Update sysdevices and rerun statement." }
				id => "message-001754"
				add_field => {
					"[event][id]" => "001754"
					"[rsa][message][id1]" => "001754"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001755
		# line in RSA:  <fld30> <fld31> <event_source> No extended stored procedures exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No extended stored procedures exist." }
				id => "message-001755"
				add_field => {
					"[event][id]" => "001755"
					"[rsa][message][id1]" => "001755"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001756
		# line in RSA:  <fld30> <fld31> <event_source> No files were selected to be processed. You may have selected one or more filegroups that have no members. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No files were selected to be processed. You may have selected one or more filegroups that have no members." }
				id => "message-001756"
				add_field => {
					"[event][id]" => "001756"
					"[rsa][message][id1]" => "001756"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001757
		# line in RSA:  <fld30> <fld31> <event_source> No foreign keys reference this table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No foreign keys reference this table." }
				id => "message-001757"
				add_field => {
					"[event][id]" => "001757"
					"[rsa][message][id1]" => "001757"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001758
		# line in RSA:  <fld30> <fld31> <event_source> No help available for DBCC statement '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No help available for DBCC statement '%{fld1}'." }
				id => "message-001758"
				add_field => {
					"[event][id]" => "001758"
					"[rsa][message][id1]" => "001758"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001759
		# line in RSA:  <fld30> <fld31> <event_source> No item by the name of '<fld1>' could be found in the current database '<fld2>', given that @itemtype was input as '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No item by the name of '%{fld1}' could be found in the current database '%{fld2}', given that @itemtype was input as '%{fld3}'." }
				id => "message-001759"
				add_field => {
					"[event][id]" => "001759"
					"[rsa][message][id1]" => "001759"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001760
		# line in RSA:  <fld30> <fld31> <event_source> No longer belongs in this partial. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No longer belongs in this partial." }
				id => "message-001760"
				add_field => {
					"[event][id]" => "001760"
					"[rsa][message][id1]" => "001760"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001761
		# line in RSA:  <fld30> <fld31> <event_source> No longer waiting for client connections using Net-Library'<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No longer waiting for client connections using Net-Library'%{fld1}'." }
				id => "message-001761"
				add_field => {
					"[event][id]" => "001761"
					"[rsa][message][id1]" => "001761"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001762
		# line in RSA:  <fld30> <fld31> <event_source> No more buffers can be stolen. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No more buffers can be stolen." }
				id => "message-001762"
				add_field => {
					"[event][id]" => "001762"
					"[rsa][message][id1]" => "001762"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001763
		# line in RSA:  <fld30> <fld31> <event_source> No more lock classes available from transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No more lock classes available from transaction." }
				id => "message-001763"
				add_field => {
					"[event][id]" => "001763"
					"[rsa][message][id1]" => "001763"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001764
		# line in RSA:  <fld30> <fld31> <event_source> No more room in the transaction table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No more room in the transaction table." }
				id => "message-001764"
				add_field => {
					"[event][id]" => "001764"
					"[rsa][message][id1]" => "001764"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001765
		# line in RSA:  <fld30> <fld31> <event_source> No parameter values were specified for the sp_cursor-<fld1> statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No parameter values were specified for the sp_cursor-%{fld1} statement." }
				id => "message-001765"
				add_field => {
					"[event][id]" => "001765"
					"[rsa][message][id1]" => "001765"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001766
		# line in RSA:  <fld30> <fld31> <event_source> No permission to access database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No permission to access database '%{fld1}'." }
				id => "message-001766"
				add_field => {
					"[event][id]" => "001766"
					"[rsa][message][id1]" => "001766"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001767
		# line in RSA:  <fld30> <fld31> <event_source> No recognized letter is contained in the parameter value for General Permission Type (<fld1>). Valid letters are in this set: <fld2> . 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No recognized letter is contained in the parameter value for General Permission Type (%{fld1}). Valid letters are in this set: %{fld2} ." }
				id => "message-001767"
				add_field => {
					"[event][id]" => "001767"
					"[rsa][message][id1]" => "001767"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001768
		# line in RSA:  <fld30> <fld31> <event_source> No row in sysdatabases was updated because mode and status are already correctly reset. No error and no changes made. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No row in sysdatabases was updated because mode and status are already correctly reset. No error and no changes made." }
				id => "message-001768"
				add_field => {
					"[event][id]" => "001768"
					"[rsa][message][id1]" => "001768"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001769
		# line in RSA:  <fld30> <fld31> <event_source> No rows were updated or deleted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No rows were updated or deleted." }
				id => "message-001769"
				add_field => {
					"[event][id]" => "001769"
					"[rsa][message][id1]" => "001769"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001770
		# line in RSA:  <fld30> <fld31> <event_source> No slots are free to keep buffers for table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No slots are free to keep buffers for table '%{fld1}'." }
				id => "message-001770"
				add_field => {
					"[event][id]" => "001770"
					"[rsa][message][id1]" => "001770"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001771
		# line in RSA:  <fld30> <fld31> <event_source> No space left on logical page <fld1> of index ID <fld2> for object '<fld3>' when inserting row on an index page. This situation should have been handled while traversing the index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No space left on logical page %{fld1} of index ID %{fld2} for object '%{fld3}' when inserting row on an index page. This situation should have been handled while traversing the index." }
				id => "message-001771"
				add_field => {
					"[event][id]" => "001771"
					"[rsa][message][id1]" => "001771"
					"[event][categoryid]" => "1603090000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001772
		# line in RSA:  <fld30> <fld31> <event_source> No subscription is on this publication or article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No subscription is on this publication or article." }
				id => "message-001772"
				add_field => {
					"[event][id]" => "001772"
					"[rsa][message][id1]" => "001772"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001773
		# line in RSA:  <fld30> <fld31> <event_source> No such default. ID = <fld1>, database ID = <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No such default. ID = %{fld1}, database ID = %{fld2}." }
				id => "message-001773"
				add_field => {
					"[event][id]" => "001773"
					"[rsa][message][id1]" => "001773"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001774
		# line in RSA:  <fld30> <fld31> <event_source> No such parameter '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No such parameter '%{fld1}'." }
				id => "message-001774"
				add_field => {
					"[event][id]" => "001774"
					"[rsa][message][id1]" => "001774"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001775
		# line in RSA:  <fld30> <fld31> <event_source> No such statement DISK <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No such statement DISK %{fld1}." }
				id => "message-001775"
				add_field => {
					"[event][id]" => "001775"
					"[rsa][message][id1]" => "001775"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001776
		# line in RSA:  <fld30> <fld31> <event_source> No value was given for one or more of the required parameters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No value was given for one or more of the required parameters." }
				id => "message-001776"
				add_field => {
					"[event][id]" => "001776"
					"[rsa][message][id1]" => "001776"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001777
		# line in RSA:  <fld30> <fld31> <event_source> No views with schema binding reference this table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} No views with schema binding reference this table." }
				id => "message-001777"
				add_field => {
					"[event][id]" => "001777"
					"[rsa][message][id1]" => "001777"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "non" {
		# MESSAGE 001778
		# line in RSA:  <fld30> <fld31> <event_source> non 7-bit ASCII characters. If you wish to change these names use 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} non 7-bit ASCII characters. If you wish to change these names use" }
				id => "message-001778"
				add_field => {
					"[event][id]" => "001778"
					"[rsa][message][id1]" => "001778"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001779
		# line in RSA:  <fld30> <fld31> <event_source> non 7-bit ASCII characters. If you wish to change these names, 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} non 7-bit ASCII characters. If you wish to change these names," }
				id => "message-001779"
				add_field => {
					"[event][id]" => "001779"
					"[rsa][message][id1]" => "001779"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "None" {
		# MESSAGE 001780
		# line in RSA:  <fld30> <fld31> <event_source> None of the newly-restored files had been modified after the backup was taken, so no further recovery actions are required. The database is now available for use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} None of the newly-restored files had been modified after the backup was taken, so no further recovery actions are required. The database is now available for use." }
				id => "message-001780"
				add_field => {
					"[event][id]" => "001780"
					"[rsa][message][id1]" => "001780"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001781
		# line in RSA:  <fld30> <fld31> <event_source> None of the result expressions in a CASE specification can be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} None of the result expressions in a CASE specification can be NULL." }
				id => "message-001781"
				add_field => {
					"[event][id]" => "001781"
					"[rsa][message][id1]" => "001781"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1862
	# line in RSA:  <fld30> <fld31> <event_source> Non-NULL value successfully returned. 
	else if [logstash][msgparser][id] == "msgParserId1862" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Non-NULL value successfully returned." }
			id => "msgParserId1862"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1863
	# line in RSA:  <fld30> <fld31> <event_source> Nonqualified transactions are being rolled back. Estimated rollback completion: <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId1863" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Nonqualified transactions are being rolled back. Estimated rollback completion: %{fld1}." }
			id => "msgParserId1863"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1864
	# line in RSA:  <fld30> <fld31> <event_source> Nonrecoverable I/O error occurred on file '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1864" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Nonrecoverable I/O error occurred on file '%{fld1}'." }
			id => "msgParserId1864"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1865
	# line in RSA:  <fld30> <fld31> <event_source> Non-SQL Server Subscribers cannot subscribe to publications that allow DTS without using a DTS package. 
	else if [logstash][msgparser][id] == "msgParserId1865" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Non-SQL Server Subscribers cannot subscribe to publications that allow DTS without using a DTS package." }
			id => "msgParserId1865"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1866
	# line in RSA:  <fld30> <fld31> <event_source> Nonunique clustered index cannot be created on view '<fld1>' because only unique clustered indexes are allowed. 
	else if [logstash][msgparser][id] == "msgParserId1866" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Nonunique clustered index cannot be created on view '%{fld1}' because only unique clustered indexes are allowed." }
			id => "msgParserId1866"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1867
	# line in RSA:  <fld30> <fld31> <event_source> Normalization error in node <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId1867" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Normalization error in node %{fld1}." }
			id => "msgParserId1867"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1868
	# line in RSA:  <fld30> <fld31> <event_source> Not enough memory for process status structure (PSS) allocation. 
	else if [logstash][msgparser][id] == "msgParserId1868" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Not enough memory for process status structure (PSS) allocation." }
			id => "msgParserId1868"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1869
	# line in RSA:  <fld30> <fld31> <event_source> Note: Bulk Insert through a view may result in base table default values being ignored for NULL columns in the data file. 
	else if [logstash][msgparser][id] == "msgParserId1869" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Note: Bulk Insert through a view may result in base table default values being ignored for NULL columns in the data file." }
			id => "msgParserId1869"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "NULL" {
		# MESSAGE 001790
		# line in RSA:  <fld30> <fld31> <event_source> NULL is not an acceptable parameter value for this procedure. Use a percent sign instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} NULL is not an acceptable parameter value for this procedure. Use a percent sign instead." }
				id => "message-001790"
				add_field => {
					"[event][id]" => "001790"
					"[rsa][message][id1]" => "001790"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001791
		# line in RSA:  <fld30> <fld31> <event_source> NULL textptr (text, ntext, or image pointer) passed to <fld1> function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} NULL textptr (text, ntext, or image pointer) passed to %{fld1} function." }
				id => "message-001791"
				add_field => {
					"[event][id]" => "001791"
					"[rsa][message][id1]" => "001791"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1872
	# line in RSA:  <fld30> <fld31> <event_source> Number of referencing columns in foreign key differs from number of referenced columns, table '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId1872" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Number of referencing columns in foreign key differs from number of referenced columns, table '%{fld1}'." }
			id => "msgParserId1872"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1873
	# line in RSA:  <fld30> <fld31> <event_source> numeric data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId1873" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} numeric data type %{fld1}" }
			id => "msgParserId1873"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Object" {
		# MESSAGE 001795
		# line in RSA:  <fld30> <fld31> <event_source> Object '<fld1>' cannot be found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object '%{fld1}' cannot be found." }
				id => "message-001795"
				add_field => {
					"[event][id]" => "001795"
					"[rsa][message][id1]" => "001795"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001796
		# line in RSA:  <fld30> <fld31> <event_source> Object '<fld1>' cannot be modified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object '%{fld1}' cannot be modified." }
				id => "message-001796"
				add_field => {
					"[event][id]" => "001796"
					"[rsa][message][id1]" => "001796"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001797
		# line in RSA:  <fld30> <fld31> <event_source> Object '<fld1>' does not exist or is not a valid object for this operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object '%{fld1}' does not exist or is not a valid object for this operation." }
				id => "message-001797"
				add_field => {
					"[event][id]" => "001797"
					"[rsa][message][id1]" => "001797"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001798
		# line in RSA:  <fld30> <fld31> <event_source> Object '<fld1>' cannot be published twice in the same publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object '%{fld1}' cannot be published twice in the same publication." }
				id => "message-001798"
				add_field => {
					"[event][id]" => "001798"
					"[rsa][message][id1]" => "001798"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001799
		# line in RSA:  <fld30> <fld31> <event_source> Object '<fld1>' cannot be renamed because the object participates in enforced dependencies. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object '%{fld1}' cannot be renamed because the object participates in enforced dependencies." }
				id => "message-001799"
				add_field => {
					"[event][id]" => "001799"
					"[rsa][message][id1]" => "001799"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001800
		# line in RSA:  <fld30> <fld31> <event_source> Object '<fld1>' is not a table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object '%{fld1}' is not a table." }
				id => "message-001800"
				add_field => {
					"[event][id]" => "001800"
					"[rsa][message][id1]" => "001800"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001801
		# line in RSA:  <fld30> <fld31> <event_source> Object '<fld1>' was successfully marked for recompilation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object '%{fld1}' was successfully marked for recompilation." }
				id => "message-001801"
				add_field => {
					"[event][id]" => "001801"
					"[rsa][message][id1]" => "001801"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001802
		# line in RSA:  <fld30> <fld31> <event_source> Object does not reference any object, and no objects reference it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object does not reference any object, and no objects reference it." }
				id => "message-001802"
				add_field => {
					"[event][id]" => "001802"
					"[rsa][message][id1]" => "001802"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001803
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, forwarded row page <fld2>, slot <fld3> should be pointed to by forwarding row page <fld4>, slot <fld5>. Did not encounter forwarding row. Possible allocation error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, forwarded row page %{fld2}, slot %{fld3} should be pointed to by forwarding row page %{fld4}, slot %{fld5}. Did not encounter forwarding row. Possible allocation error." }
				id => "message-001803"
				add_field => {
					"[event][id]" => "001803"
					"[rsa][message][id1]" => "001803"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001804
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, forwarding row page <fld2>, slot <fld3> points to page <fld4>, slot <fld5>. Did not encounter forwarded row. Possible allocation error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, forwarding row page %{fld2}, slot %{fld3} points to page %{fld4}, slot %{fld5}. Did not encounter forwarded row. Possible allocation error." }
				id => "message-001804"
				add_field => {
					"[event][id]" => "001804"
					"[rsa][message][id1]" => "001804"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001805
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, index ID <fld2>, page ID <fld3>, row ID <fld4>. Column '<fld5>' is a var column with a NULL value and non-zero data length. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, index ID %{fld2}, page ID %{fld3}, row ID %{fld4}. Column '%{fld5}' is a var column with a NULL value and non-zero data length." }
				id => "message-001805"
				add_field => {
					"[event][id]" => "001805"
					"[rsa][message][id1]" => "001805"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001806
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, index ID <fld2>. Allocations for <fld3>. IAM <fld4>, extents <fld5>, used pages <fld6>, mixed pages <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, index ID %{fld2}. Allocations for %{fld3}. IAM %{fld4}, extents %{fld5}, used pages %{fld6}, mixed pages %{fld7}." }
				id => "message-001806"
				add_field => {
					"[event][id]" => "001806"
					"[rsa][message][id1]" => "001806"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001807
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, index ID <fld2>: FirstIAM field in sysindexes is <fld3>. FirstIAM for statistics only and dummy index entries should be (0:0). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, index ID %{fld2}: FirstIAM field in sysindexes is %{fld3}. FirstIAM for statistics only and dummy index entries should be (0:0)." }
				id => "message-001807"
				add_field => {
					"[event][id]" => "001807"
					"[rsa][message][id1]" => "001807"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001808
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, index ID <fld2>: Page <fld3> could not be processed. See other errors for details. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, index ID %{fld2}: Page %{fld3} could not be processed. See other errors for details." }
				id => "message-001808"
				add_field => {
					"[event][id]" => "001808"
					"[rsa][message][id1]" => "001808"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001809
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, index ID <fld2>: Page <fld3> is empty. This is not permitted at level <fld4> of the B-tree. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, index ID %{fld2}: Page %{fld3} is empty. This is not permitted at level %{fld4} of the B-tree." }
				id => "message-001809"
				add_field => {
					"[event][id]" => "001809"
					"[rsa][message][id1]" => "001809"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001810
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, index ID <fld2>: The ghosted record count (<fld3>) in the header does not match the number of ghosted records (<fld4>) found on page <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, index ID %{fld2}: The ghosted record count (%{fld3}) in the header does not match the number of ghosted records (%{fld4}) found on page %{fld5}." }
				id => "message-001810"
				add_field => {
					"[event][id]" => "001810"
					"[rsa][message][id1]" => "001810"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001811
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>: Errors found in text ID  <fld2> owned by data record identified by <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}: Errors found in text ID  %{fld2} owned by data record identified by %{fld3}." }
				id => "message-001811"
				add_field => {
					"[event][id]" => "001811"
					"[rsa][message][id1]" => "001811"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001812
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1> specified as a default for table ID <fld2>, column ID <fld3> is missing or not of type default. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1} specified as a default for table ID %{fld2}, column ID %{fld3} is missing or not of type default." }
				id => "message-001812"
				add_field => {
					"[event][id]" => "001812"
					"[rsa][message][id1]" => "001812"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001813
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1> specified as a rule for table ID <fld2>, column ID <fld3> is missing or not of type default. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1} specified as a rule for table ID %{fld2}, column ID %{fld3} is missing or not of type default." }
				id => "message-001813"
				add_field => {
					"[event][id]" => "001813"
					"[rsa][message][id1]" => "001813"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001814
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, Index ID <fld2>, data extents <fld3>, pages <fld4>, mixed extent pages <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, Index ID %{fld2}, data extents %{fld3}, pages %{fld4}, mixed extent pages %{fld5}." }
				id => "message-001814"
				add_field => {
					"[event][id]" => "001814"
					"[rsa][message][id1]" => "001814"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001815
		# line in RSA:  <fld30> <fld31> <event_source> Object ID <fld1>, Index ID <fld2>, index extents <fld3>, pages <fld4>, mixed extent pages <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object ID %{fld1}, Index ID %{fld2}, index extents %{fld3}, pages %{fld4}, mixed extent pages %{fld5}." }
				id => "message-001815"
				add_field => {
					"[event][id]" => "001815"
					"[rsa][message][id1]" => "001815"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001816
		# line in RSA:  <fld30> <fld31> <event_source> Object is invalid. Extended properties are not permitted on '<fld1>', or the object does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object is invalid. Extended properties are not permitted on '%{fld1}', or the object does not exist." }
				id => "message-001816"
				add_field => {
					"[event][id]" => "001816"
					"[rsa][message][id1]" => "001816"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001817
		# line in RSA:  <fld30> <fld31> <event_source> Object is stored in sysprocedures and has no space allocated directly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object is stored in sysprocedures and has no space allocated directly." }
				id => "message-001817"
				add_field => {
					"[event][id]" => "001817"
					"[rsa][message][id1]" => "001817"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1897
	# line in RSA:  <fld30> <fld31> <event_source> Objects exist which are not owned by the database owner. 
	else if [logstash][msgparser][id] == "msgParserId1897" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Objects exist which are not owned by the database owner." }
			id => "msgParserId1897"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1898
	# line in RSA:  <fld30> <fld31> <event_source> Object-type and object-name must be supplied as a pair. 
	else if [logstash][msgparser][id] == "msgParserId1898" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Object-type and object-name must be supplied as a pair." }
			id => "msgParserId1898"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1899
	# line in RSA:  <fld30> <fld31> <event_source> ODBC error encountered, State = <fld1>, native error = <fld2>, error message =  <fld3>. 
	else if [logstash][msgparser][id] == "msgParserId1899" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} ODBC error encountered, State = %{fld1}, native error = %{fld2}, error message =  %{fld3}." }
			id => "msgParserId1899"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1900
	# line in RSA:  <fld30> <fld31> <event_source> ODS error. Server is terminating this connection. 
	else if [logstash][msgparser][id] == "msgParserId1900" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} ODS error. Server is terminating this connection." }
			id => "msgParserId1900"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Offset" {
		# MESSAGE 001822
		# line in RSA:  <fld30> <fld31> <event_source> Offset <fld1> is not in the range of available text, ntext, or image data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Offset %{fld1} is not in the range of available text, ntext, or image data." }
				id => "message-001822"
				add_field => {
					"[event][id]" => "001822"
					"[rsa][message][id1]" => "001822"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001824
		# line in RSA:  <fld30> <fld31> <event_source> Offset or size type is invalid. Must be int or smallint data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Offset or size type is invalid. Must be int or smallint data type." }
				id => "message-001824"
				add_field => {
					"[event][id]" => "001824"
					"[rsa][message][id1]" => "001824"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1902
	# line in RSA:  <fld30> <fld31> <event_source> offset option 
	else if [logstash][msgparser][id] == "msgParserId1902" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} offset option" }
			id => "msgParserId1902"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1904
	# line in RSA:  <fld30> <fld31> <event_source> Old (current) password incorrect for user. The password was not changed. 
	else if [logstash][msgparser][id] == "msgParserId1904" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Old (current) password incorrect for user. The password was not changed." }
			id => "msgParserId1904"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Oldest" {
		# MESSAGE 001826
		# line in RSA:  <fld30> <fld31> <event_source> Oldest distributed LSN     : (<fld1>:<fld2>:<fld3>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Oldest distributed LSN     : (%{fld1}:%{fld2}:%{fld3})" }
				id => "message-001826"
				add_field => {
					"[event][id]" => "001826"
					"[rsa][message][id1]" => "001826"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001827
		# line in RSA:  <fld30> <fld31> <event_source> Oldest non-distributed LSN : (<fld1>:<fld2>:<fld3>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Oldest non-distributed LSN : (%{fld1}:%{fld2}:%{fld3})" }
				id => "message-001827"
				add_field => {
					"[event][id]" => "001827"
					"[rsa][message][id1]" => "001827"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "OLE" {
		# MESSAGE 001828
		# line in RSA:  <fld30> <fld31> <event_source> OLE Automation objects are not supported in fiber mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE Automation objects are not supported in fiber mode." }
				id => "message-001828"
				add_field => {
					"[event][id]" => "001828"
					"[rsa][message][id1]" => "001828"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001829
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB error trace [<fld1>]. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB error trace [%{fld1}]." }
				id => "message-001829"
				add_field => {
					"[event][id]" => "001829"
					"[rsa][message][id1]" => "001829"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001830
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB or ODBC Subscribers cannot subscribe to article '<fld1>' in publication '<fld2>' because the article has a timestamp column and the publication is 'allow_queued_tran' (allows queued updating subscriptions). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB or ODBC Subscribers cannot subscribe to article '%{fld1}' in publication '%{fld2}' because the article has a timestamp column and the publication is 'allow_queued_tran' (allows queued updating subscriptions)." }
				id => "message-001830"
				add_field => {
					"[event][id]" => "001830"
					"[rsa][message][id1]" => "001830"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001831
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' contains multiple tables that match the name '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' contains multiple tables that match the name '%{fld2}'." }
				id => "message-001831"
				add_field => {
					"[event][id]" => "001831"
					"[rsa][message][id1]" => "001831"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001832
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' could not <fld2> table '<fld3>' because of column '<fld4>'. <fld5> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' could not %{fld2} table '%{fld3}' because of column '%{fld4}'. %{fld5}" }
				id => "message-001832"
				add_field => {
					"[event][id]" => "001832"
					"[rsa][message][id1]" => "001832"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001833
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' could not delete from table '<fld2>'. <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' could not delete from table '%{fld2}'. %{fld3}" }
				id => "message-001833"
				add_field => {
					"[event][id]" => "001833"
					"[rsa][message][id1]" => "001833"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001834
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' could not map ordinals for one or more columns of object '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' could not map ordinals for one or more columns of object '%{fld2}'." }
				id => "message-001834"
				add_field => {
					"[event][id]" => "001834"
					"[rsa][message][id1]" => "001834"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001836
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' could not set range for table '<fld2>'.<fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' could not set range for table '%{fld2}'.%{fld3}" }
				id => "message-001836"
				add_field => {
					"[event][id]" => "001836"
					"[rsa][message][id1]" => "001836"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001837
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' could not <fld2> table '<fld3>'. <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' could not %{fld2} table '%{fld3}'. %{fld4}" }
				id => "message-001837"
				add_field => {
					"[event][id]" => "001837"
					"[rsa][message][id1]" => "001837"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001838
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' does not contain table '<fld2>'.  The table either does not exist or the current user does not have permissions on that table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' does not contain table '%{fld2}'.  The table either does not exist or the current user does not have permissions on that table." }
				id => "message-001838"
				add_field => {
					"[event][id]" => "001838"
					"[rsa][message][id1]" => "001838"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001839
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' reported an error aborting the current transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' reported an error aborting the current transaction." }
				id => "message-001839"
				add_field => {
					"[event][id]" => "001839"
					"[rsa][message][id1]" => "001839"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001840
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' reported an error committing the current transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' reported an error committing the current transaction." }
				id => "message-001840"
				add_field => {
					"[event][id]" => "001840"
					"[rsa][message][id1]" => "001840"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001841
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' reported an error. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' reported an error. %{fld2}" }
				id => "message-001841"
				add_field => {
					"[event][id]" => "001841"
					"[rsa][message][id1]" => "001841"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001842
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' returned a '<fld2>' index '<fld3>' with incorrect bookmark ordinal <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' returned a '%{fld2}' index '%{fld3}' with incorrect bookmark ordinal %{fld4}." }
				id => "message-001842"
				add_field => {
					"[event][id]" => "001842"
					"[rsa][message][id1]" => "001842"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001843
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' returned an invalid column definition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' returned an invalid column definition." }
				id => "message-001843"
				add_field => {
					"[event][id]" => "001843"
					"[rsa][message][id1]" => "001843"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001844
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' returned an invalid schema definition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' returned an invalid schema definition." }
				id => "message-001844"
				add_field => {
					"[event][id]" => "001844"
					"[rsa][message][id1]" => "001844"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001845
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' returned an unexpected '<fld2>' for the decimal/numeric column '<fld3>.<fld4>'. The expected data length is '<fld5>', while the returned data length is '<fld6>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' returned an unexpected '%{fld2}' for the decimal/numeric column '%{fld3}.%{fld4}'. The expected data length is '%{fld5}', while the returned data length is '%{fld6}'." }
				id => "message-001845"
				add_field => {
					"[event][id]" => "001845"
					"[rsa][message][id1]" => "001845"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001846
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' returned an unexpected data length for the fixed-length column '<fld2>.<fld3>'. The expected data length is <fld4>, while the returned data length is <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' returned an unexpected data length for the fixed-length column '%{fld2}.%{fld3}'. The expected data length is %{fld4}, while the returned data length is %{fld5}." }
				id => "message-001846"
				add_field => {
					"[event][id]" => "001846"
					"[rsa][message][id1]" => "001846"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001847
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' supplied inconsistent metadata for a column. Metadata information was changed at execution time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' supplied inconsistent metadata for a column. Metadata information was changed at execution time." }
				id => "message-001847"
				add_field => {
					"[event][id]" => "001847"
					"[rsa][message][id1]" => "001847"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001848
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' supplied inconsistent metadata for a column. The name was changed at execution time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' supplied inconsistent metadata for a column. The name was changed at execution time." }
				id => "message-001848"
				add_field => {
					"[event][id]" => "001848"
					"[rsa][message][id1]" => "001848"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001849
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' supplied inconsistent metadata. An extra column was supplied during execution that was not found at compile time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' supplied inconsistent metadata. An extra column was supplied during execution that was not found at compile time." }
				id => "message-001849"
				add_field => {
					"[event][id]" => "001849"
					"[rsa][message][id1]" => "001849"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001850
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' supplied inconsistent metadata. The object '<fld2>' was missing expected column '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' supplied inconsistent metadata. The object '%{fld2}' was missing expected column '%{fld3}'." }
				id => "message-001850"
				add_field => {
					"[event][id]" => "001850"
					"[rsa][message][id1]" => "001850"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001851
		# line in RSA:  <fld30> <fld31> <event_source> OLE DB provider '<fld1>' supplied invalid metadata for column '<fld2>'. <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OLE DB provider '%{fld1}' supplied invalid metadata for column '%{fld2}'. %{fld3}" }
				id => "message-001851"
				add_field => {
					"[event][id]" => "001851"
					"[rsa][message][id1]" => "001851"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1930
	# line in RSA:  <fld30> <fld31> <event_source> On Demand user script cannot be applied to the snapshot publication. 
	else if [logstash][msgparser][id] == "msgParserId1930" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} On Demand user script cannot be applied to the snapshot publication." }
			id => "msgParserId1930"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "One" {
		# MESSAGE 001853
		# line in RSA:  <fld30> <fld31> <event_source> One or more arguments were reported invalid by the provider. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} One or more arguments were reported invalid by the provider." }
				id => "message-001853"
				add_field => {
					"[event][id]" => "001853"
					"[rsa][message][id1]" => "001853"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001854
		# line in RSA:  <fld30> <fld31> <event_source> One or more files in the backup set are no longer part of database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} One or more files in the backup set are no longer part of database '%{fld1}'." }
				id => "message-001854"
				add_field => {
					"[event][id]" => "001854"
					"[rsa][message][id1]" => "001854"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001855
		# line in RSA:  <fld30> <fld31> <event_source> One or more FOR UPDATE columns have been adjusted to the first instance of their table in the query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} One or more FOR UPDATE columns have been adjusted to the first instance of their table in the query." }
				id => "message-001855"
				add_field => {
					"[event][id]" => "001855"
					"[rsa][message][id1]" => "001855"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001856
		# line in RSA:  <fld30> <fld31> <event_source> One or more indexes contain errors. They will be rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} One or more indexes contain errors. They will be rebuilt." }
				id => "message-001856"
				add_field => {
					"[event][id]" => "001856"
					"[rsa][message][id1]" => "001856"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001857
		# line in RSA:  <fld30> <fld31> <event_source> One or more of the options (<fld1>) are not supported for this statement. Review the documentation for supported options. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} One or more of the options (%{fld1}) are not supported for this statement. Review the documentation for supported options." }
				id => "message-001857"
				add_field => {
					"[event][id]" => "001857"
					"[rsa][message][id1]" => "001857"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001858
		# line in RSA:  <fld30> <fld31> <event_source> One or more properties could not be set on the query for OLE DB provider '<fld1>'. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} One or more properties could not be set on the query for OLE DB provider '%{fld1}'. %{fld2}" }
				id => "message-001858"
				add_field => {
					"[event][id]" => "001858"
					"[rsa][message][id1]" => "001858"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001859
		# line in RSA:  <fld30> <fld31> <event_source> One or more properties could not be set on the table for OLE DB provider '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} One or more properties could not be set on the table for OLE DB provider '%{fld1}'." }
				id => "message-001859"
				add_field => {
					"[event][id]" => "001859"
					"[rsa][message][id1]" => "001859"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001860
		# line in RSA:  <fld30> <fld31> <event_source> One or more users are using the database. The requested operation cannot be completed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} One or more users are using the database. The requested operation cannot be completed." }
				id => "message-001860"
				add_field => {
					"[event][id]" => "001860"
					"[rsa][message][id1]" => "001860"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Only" {
		# MESSAGE 001861
		# line in RSA:  <fld30> <fld31> <event_source> Only '<fld1>' or members of db_owner can drop the anonymous agent. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only '%{fld1}' or members of db_owner can drop the anonymous agent." }
				id => "message-001861"
				add_field => {
					"[event][id]" => "001861"
					"[rsa][message][id1]" => "001861"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001862
		# line in RSA:  <fld30> <fld31> <event_source> Only 'DTS horizontal partitions' and 'no DTS horizontal partitions' are valid 'status' values because the publication allows data transformations. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only 'DTS horizontal partitions' and 'no DTS horizontal partitions' are valid 'status' values because the publication allows data transformations." }
				id => "message-001862"
				add_field => {
					"[event][id]" => "001862"
					"[rsa][message][id1]" => "001862"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001863
		# line in RSA:  <fld30> <fld31> <event_source> Only a SQL Server 2000 or OLE DB Subscriber can use DTS. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only a SQL Server 2000 or OLE DB Subscriber can use DTS." }
				id => "message-001863"
				add_field => {
					"[event][id]" => "001863"
					"[rsa][message][id1]" => "001863"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001864
		# line in RSA:  <fld30> <fld31> <event_source> Only a SQL Server running on Microsoft Windows NT can be enlisted into an MSX. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only a SQL Server running on Microsoft Windows NT can be enlisted into an MSX." }
				id => "message-001864"
				add_field => {
					"[event][id]" => "001864"
					"[rsa][message][id1]" => "001864"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001865
		# line in RSA:  <fld30> <fld31> <event_source> Only a Standard or Enterprise edition of SQL Server can be enlisted into an MSX. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only a Standard or Enterprise edition of SQL Server can be enlisted into an MSX." }
				id => "message-001865"
				add_field => {
					"[event][id]" => "001865"
					"[rsa][message][id1]" => "001865"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001866
		# line in RSA:  <fld30> <fld31> <event_source> Only a system administrator can reassign ownership of a job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only a system administrator can reassign ownership of a job." }
				id => "message-001866"
				add_field => {
					"[event][id]" => "001866"
					"[rsa][message][id1]" => "001866"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001867
		# line in RSA:  <fld30> <fld31> <event_source> Only a system administrator can reassign tasks. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only a system administrator can reassign tasks." }
				id => "message-001867"
				add_field => {
					"[event][id]" => "001867"
					"[rsa][message][id1]" => "001867"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001868
		# line in RSA:  <fld30> <fld31> <event_source> Only a system administrator can view tasks owned by others. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only a system administrator can view tasks owned by others." }
				id => "message-001868"
				add_field => {
					"[event][id]" => "001868"
					"[rsa][message][id1]" => "001868"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001869
		# line in RSA:  <fld30> <fld31> <event_source> Only a table object can be published as a "table" article for merge replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only a table object can be published as a \"table\" article for merge replication." }
				id => "message-001869"
				add_field => {
					"[event][id]" => "001869"
					"[rsa][message][id1]" => "001869"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001870
		# line in RSA:  <fld30> <fld31> <event_source> Only assign priorities that are greater than or equal to 0 and less than 100. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only assign priorities that are greater than or equal to 0 and less than 100." }
				id => "message-001870"
				add_field => {
					"[event][id]" => "001870"
					"[rsa][message][id1]" => "001870"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001871
		# line in RSA:  <fld30> <fld31> <event_source> Only functions and extended stored procedures can be executed from within a function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only functions and extended stored procedures can be executed from within a function." }
				id => "message-001871"
				add_field => {
					"[event][id]" => "001871"
					"[rsa][message][id1]" => "001871"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001872
		# line in RSA:  <fld30> <fld31> <event_source> Only global merge subscriptions can be added to database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only global merge subscriptions can be added to database '%{fld1}'." }
				id => "message-001872"
				add_field => {
					"[event][id]" => "001872"
					"[rsa][message][id1]" => "001872"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001873
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the <fld1> role can execute this stored procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the %{fld1} role can execute this stored procedure." }
				id => "message-001873"
				add_field => {
					"[event][id]" => "001873"
					"[rsa][message][id1]" => "001873"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001874
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the dbcreator and sysadmin roles can execute the <fld1> statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the dbcreator and sysadmin roles can execute the %{fld1} statement." }
				id => "message-001874"
				add_field => {
					"[event][id]" => "001874"
					"[rsa][message][id1]" => "001874"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001875
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin fixed server role and '<fld1>' can drop the pull subscription to the publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin fixed server role and '%{fld1}' can drop the pull subscription to the publication '%{fld2}'." }
				id => "message-001875"
				add_field => {
					"[event][id]" => "001875"
					"[rsa][message][id1]" => "001875"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001876
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin fixed server role and db_owner fixed database role can drop subscription '<fld1>' to publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin fixed server role and db_owner fixed database role can drop subscription '%{fld1}' to publication '%{fld2}'." }
				id => "message-001876"
				add_field => {
					"[event][id]" => "001876"
					"[rsa][message][id1]" => "001876"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001877
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin fixed server role, db_owner fixed database role, or the creator of the subscription can change the subscription properties. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin fixed server role, db_owner fixed database role, or the creator of the subscription can change the subscription properties." }
				id => "message-001877"
				add_field => {
					"[event][id]" => "001877"
					"[rsa][message][id1]" => "001877"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001878
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin fixed server role, members of the db_owner fixed database role, and owners of subscriptions served by the specified replication agent job can modify the agent offload settings. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin fixed server role, members of the db_owner fixed database role, and owners of subscriptions served by the specified replication agent job can modify the agent offload settings." }
				id => "message-001878"
				add_field => {
					"[event][id]" => "001878"
					"[rsa][message][id1]" => "001878"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001879
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin or db_owner roles can perform this operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin or db_owner roles can perform this operation." }
				id => "message-001879"
				add_field => {
					"[event][id]" => "001879"
					"[rsa][message][id1]" => "001879"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001880
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin role can create the system table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin role can create the system table '%{fld1}'." }
				id => "message-001880"
				add_field => {
					"[event][id]" => "001880"
					"[rsa][message][id1]" => "001880"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001881
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin role can grant or revoke the CREATE DATABASE permission. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin role can grant or revoke the CREATE DATABASE permission." }
				id => "message-001881"
				add_field => {
					"[event][id]" => "001881"
					"[rsa][message][id1]" => "001881"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001882
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin role can specify the <fld1> option for the <fld2> statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin role can specify the %{fld1} option for the %{fld2} statement." }
				id => "message-001882"
				add_field => {
					"[event][id]" => "001882"
					"[rsa][message][id1]" => "001882"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001883
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin role can use the loginame option. The password was not changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin role can use the loginame option. The password was not changed." }
				id => "message-001883"
				add_field => {
					"[event][id]" => "001883"
					"[rsa][message][id1]" => "001883"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001884
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin role or the database owner may set database options. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin role or the database owner may set database options." }
				id => "message-001884"
				add_field => {
					"[event][id]" => "001884"
					"[rsa][message][id1]" => "001884"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001885
		# line in RSA:  <fld30> <fld31> <event_source> Only members of the sysadmin role or the database owner may set the database compatibility level. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only members of the sysadmin role or the database owner may set the database compatibility level." }
				id => "message-001885"
				add_field => {
					"[event][id]" => "001885"
					"[rsa][message][id1]" => "001885"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001886
		# line in RSA:  <fld30> <fld31> <event_source> Only objects in the master database owned by dbo can have the startup setting changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only objects in the master database owned by dbo can have the startup setting changed." }
				id => "message-001886"
				add_field => {
					"[event][id]" => "001886"
					"[rsa][message][id1]" => "001886"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001887
		# line in RSA:  <fld30> <fld31> <event_source> Only one expression can be specified in the select list when the subquery is not introduced with EXISTS. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only one expression can be specified in the select list when the subquery is not introduced with EXISTS." }
				id => "message-001887"
				add_field => {
					"[event][id]" => "001887"
					"[rsa][message][id1]" => "001887"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001888
		# line in RSA:  <fld30> <fld31> <event_source> Only one list of index hints per table is allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only one list of index hints per table is allowed." }
				id => "message-001888"
				add_field => {
					"[event][id]" => "001888"
					"[rsa][message][id1]" => "001888"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001889
		# line in RSA:  <fld30> <fld31> <event_source> Only one of the parameters, @dynamic_snapshot_jobid or @dynamic_snapshot_jobname, can be specified with a nondefault value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only one of the parameters, @dynamic_snapshot_jobid or @dynamic_snapshot_jobname, can be specified with a nondefault value." }
				id => "message-001889"
				add_field => {
					"[event][id]" => "001889"
					"[rsa][message][id1]" => "001889"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001890
		# line in RSA:  <fld30> <fld31> <event_source> Only one OPENXML column can be of type <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only one OPENXML column can be of type %{fld1}." }
				id => "message-001890"
				add_field => {
					"[event][id]" => "001890"
					"[rsa][message][id1]" => "001890"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001891
		# line in RSA:  <fld30> <fld31> <event_source> Only table or indexed view to table articles are allowed in publications that allow DTS. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only table or indexed view to table articles are allowed in publications that allow DTS." }
				id => "message-001891"
				add_field => {
					"[event][id]" => "001891"
					"[rsa][message][id1]" => "001891"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001892
		# line in RSA:  <fld30> <fld31> <event_source> Only text pointers are allowed in work tables, never text, ntext, or image columns. The query processor produced a query plan that required a text, ntext, or image column in a work table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only text pointers are allowed in work tables, never text, ntext, or image columns. The query processor produced a query plan that required a text, ntext, or image column in a work table." }
				id => "message-001892"
				add_field => {
					"[event][id]" => "001892"
					"[rsa][message][id1]" => "001892"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001893
		# line in RSA:  <fld30> <fld31> <event_source> Only text, ntext, and image columns are valid with the TEXTPTR function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only text, ntext, and image columns are valid with the TEXTPTR function." }
				id => "message-001893"
				add_field => {
					"[event][id]" => "001893"
					"[rsa][message][id1]" => "001893"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001894
		# line in RSA:  <fld30> <fld31> <event_source> Only the first query in a UNION statement can have a SELECT with an assignment. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only the first query in a UNION statement can have a SELECT with an assignment." }
				id => "message-001894"
				add_field => {
					"[event][id]" => "001894"
					"[rsa][message][id1]" => "001894"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001895
		# line in RSA:  <fld30> <fld31> <event_source> Only the owner of database '<fld1>' can run the CHECKPOINT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only the owner of database '%{fld1}' can run the CHECKPOINT statement." }
				id => "message-001895"
				add_field => {
					"[event][id]" => "001895"
					"[rsa][message][id1]" => "001895"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001896
		# line in RSA:  <fld30> <fld31> <event_source> Only the owner of DTS Package '<fld1>' or a member of the sysadmin role may create new versions of it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only the owner of DTS Package '%{fld1}' or a member of the sysadmin role may create new versions of it." }
				id => "message-001896"
				add_field => {
					"[event][id]" => "001896"
					"[rsa][message][id1]" => "001896"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001897
		# line in RSA:  <fld30> <fld31> <event_source> Only the owner of DTS Package '<fld1>' or a member of the sysadmin role may drop it or any of its versions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only the owner of DTS Package '%{fld1}' or a member of the sysadmin role may drop it or any of its versions." }
				id => "message-001897"
				add_field => {
					"[event][id]" => "001897"
					"[rsa][message][id1]" => "001897"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001898
		# line in RSA:  <fld30> <fld31> <event_source> Only the owner of DTS Package '<fld1>' or a member of the sysadmin role may reassign its ownership. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only the owner of DTS Package '%{fld1}' or a member of the sysadmin role may reassign its ownership." }
				id => "message-001898"
				add_field => {
					"[event][id]" => "001898"
					"[rsa][message][id1]" => "001898"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001899
		# line in RSA:  <fld30> <fld31> <event_source> Only the owner or members of the sysadmin role can alter table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only the owner or members of the sysadmin role can alter table '%{fld1}'." }
				id => "message-001899"
				add_field => {
					"[event][id]" => "001899"
					"[rsa][message][id1]" => "001899"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001900
		# line in RSA:  <fld30> <fld31> <event_source> Only UNIQUE or PRIMARY KEY constraints are allowed on computed columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only UNIQUE or PRIMARY KEY constraints are allowed on computed columns." }
				id => "message-001900"
				add_field => {
					"[event][id]" => "001900"
					"[rsa][message][id1]" => "001900"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001901
		# line in RSA:  <fld30> <fld31> <event_source> Only user processes can be killed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only user processes can be killed." }
				id => "message-001901"
				add_field => {
					"[event][id]" => "001901"
					"[rsa][message][id1]" => "001901"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001902
		# line in RSA:  <fld30> <fld31> <event_source> Only user tables, materialized views, and stored procedures can be published as 'logbased' articles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Only user tables, materialized views, and stored procedures can be published as 'logbased' articles." }
				id => "message-001902"
				add_field => {
					"[event][id]" => "001902"
					"[rsa][message][id1]" => "001902"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "OPENXML" {
		# MESSAGE 001903
		# line in RSA:  <fld30> <fld31> <event_source> OPENXML allows only one metaproperty namespace prefix declaration in sp_xml_preparedocument. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OPENXML allows only one metaproperty namespace prefix declaration in sp_xml_preparedocument." }
				id => "message-001903"
				add_field => {
					"[event][id]" => "001903"
					"[rsa][message][id1]" => "001903"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001904
		# line in RSA:  <fld30> <fld31> <event_source> OPENXML document handle parameter must be of data type int. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OPENXML document handle parameter must be of data type int." }
				id => "message-001904"
				add_field => {
					"[event][id]" => "001904"
					"[rsa][message][id1]" => "001904"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001905
		# line in RSA:  <fld30> <fld31> <event_source> OPENXML does not support retrieving schema from remote tables, as in '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OPENXML does not support retrieving schema from remote tables, as in '%{fld1}'." }
				id => "message-001905"
				add_field => {
					"[event][id]" => "001905"
					"[rsa][message][id1]" => "001905"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001906
		# line in RSA:  <fld30> <fld31> <event_source> OPENXML encountered a problem identifying the metaproperty namespace prefix. Consider removing the namespace parameter from the corresponding sp_xml_preparedocument statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OPENXML encountered a problem identifying the metaproperty namespace prefix. Consider removing the namespace parameter from the corresponding sp_xml_preparedocument statement." }
				id => "message-001906"
				add_field => {
					"[event][id]" => "001906"
					"[rsa][message][id1]" => "001906"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001907
		# line in RSA:  <fld30> <fld31> <event_source> OPENXML encountered unknown metaproperty '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OPENXML encountered unknown metaproperty '%{fld1}'." }
				id => "message-001907"
				add_field => {
					"[event][id]" => "001907"
					"[rsa][message][id1]" => "001907"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001908
		# line in RSA:  <fld30> <fld31> <event_source> OPENXML flags parameter must be of data type int. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OPENXML flags parameter must be of data type int." }
				id => "message-001908"
				add_field => {
					"[event][id]" => "001908"
					"[rsa][message][id1]" => "001908"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001909
		# line in RSA:  <fld30> <fld31> <event_source> OPENXML requires a metaproperty namespace to be declared if 'mp' is used for another namespace in sp_xml_preparedocument. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OPENXML requires a metaproperty namespace to be declared if 'mp' is used for another namespace in sp_xml_preparedocument." }
				id => "message-001909"
				add_field => {
					"[event][id]" => "001909"
					"[rsa][message][id1]" => "001909"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001910
		# line in RSA:  <fld30> <fld31> <event_source> OPENXML XPath must be of a string data type, such as nvarchar. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} OPENXML XPath must be of a string data type, such as nvarchar." }
				id => "message-001910"
				add_field => {
					"[event][id]" => "001910"
					"[rsa][message][id1]" => "001910"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Operand" {
		# MESSAGE 001911
		# line in RSA:  <fld30> <fld31> <event_source> Operand data type <fld1> is invalid for <fld2> operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Operand data type %{fld1} is invalid for %{fld2} operator." }
				id => "message-001911"
				add_field => {
					"[event][id]" => "001911"
					"[rsa][message][id1]" => "001911"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001912
		# line in RSA:  <fld30> <fld31> <event_source> Operand type clash: <fld1> is incompatible with <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Operand type clash: %{fld1} is incompatible with %{fld2}" }
				id => "message-001912"
				add_field => {
					"[event][id]" => "001912"
					"[rsa][message][id1]" => "001912"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Operating" {
		# MESSAGE 001913
		# line in RSA:  <fld30> <fld31> <event_source> Operating system error <fld1> on device '<fld2>' during <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Operating system error %{fld1} on device '%{fld2}' during %{fld3}." }
				id => "message-001913"
				add_field => {
					"[event][id]" => "001913"
					"[rsa][message][id1]" => "001913"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003606
		# line in RSA:   <fld30> <fld31> <event_source> <fld1> Operating system error <fld2>(<fld3>) encountered. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} %{fld1} Operating system error %{fld2}(%{fld3}) encountered." }
				id => "message-003606"
				add_field => {
				"result" => "Operating system error"
					"[event][id]" => "003606"
					"[rsa][message][id1]" => "003606"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001914
		# line in RSA:  <fld30> <fld31> <event_source> Operating system error <fld1>: <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Operating system error %{fld1}: %{fld2}." }
				id => "message-001914"
				add_field => {
					"[event][id]" => "001914"
					"[rsa][message][id1]" => "001914"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Operation" {
		# MESSAGE 001915
		# line in RSA:  <fld30> <fld31> <event_source> Operation checkpoint file is invalid. Could not restart operation. Reissue the statement without the RESTART option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Operation checkpoint file is invalid. Could not restart operation. Reissue the statement without the RESTART option." }
				id => "message-001915"
				add_field => {
					"[event][id]" => "001915"
					"[rsa][message][id1]" => "001915"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001916
		# line in RSA:  <fld30> <fld31> <event_source> Operation failed. The index entry of length <fld1> bytes for the index '<fld2>' exceeds the maximum length of <fld3> bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Operation failed. The index entry of length %{fld1} bytes for the index '%{fld2}' exceeds the maximum length of %{fld3} bytes." }
				id => "message-001916"
				add_field => {
					"[event][id]" => "001916"
					"[rsa][message][id1]" => "001916"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001917
		# line in RSA:  <fld30> <fld31> <event_source> Operation on device '<fld1>' exceeded retry count. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Operation on device '%{fld1}' exceeded retry count." }
				id => "message-001917"
				add_field => {
					"[event][id]" => "001917"
					"[rsa][message][id1]" => "001917"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId1997
	# line in RSA:  <fld30> <fld31> <event_source> Operator aborted backup or restore. See the error messages returned to the console for more details. 
	else if [logstash][msgparser][id] == "msgParserId1997" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Operator aborted backup or restore. See the error messages returned to the console for more details." }
			id => "msgParserId1997"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId1998
	# line in RSA:  <fld30> <fld31> <event_source> Optimistic concurrency check failed. The row was modified outside of this cursor. 
	else if [logstash][msgparser][id] == "msgParserId1998" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Optimistic concurrency check failed. The row was modified outside of this cursor." }
			id => "msgParserId1998"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Option" {
		# MESSAGE 001920
		# line in RSA:  <fld30> <fld31> <event_source> Option <fld1> is not allowed for a LOG file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Option %{fld1} is not allowed for a LOG file." }
				id => "message-001920"
				add_field => {
					"[event][id]" => "001920"
					"[rsa][message][id1]" => "001920"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001921
		# line in RSA:  <fld30> <fld31> <event_source> Option '<fld1>' cannot be set at the same time as another option setting. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Option '%{fld1}' cannot be set at the same time as another option setting." }
				id => "message-001921"
				add_field => {
					"[event][id]" => "001921"
					"[rsa][message][id1]" => "001921"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001922
		# line in RSA:  <fld30> <fld31> <event_source> Option '<fld1>' cannot be set in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Option '%{fld1}' cannot be set in database '%{fld2}'." }
				id => "message-001922"
				add_field => {
					"[event][id]" => "001922"
					"[rsa][message][id1]" => "001922"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001923
		# line in RSA:  <fld30> <fld31> <event_source> Option '<fld1>' is specified more than once. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Option '%{fld1}' is specified more than once." }
				id => "message-001923"
				add_field => {
					"[event][id]" => "001923"
					"[rsa][message][id1]" => "001923"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001924
		# line in RSA:  <fld30> <fld31> <event_source> Option '<fld1>' conflicts with option(s) '<fld2>'. Remove the conflicting option and reissue the statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Option '%{fld1}' conflicts with option(s) '%{fld2}'. Remove the conflicting option and reissue the statement." }
				id => "message-001924"
				add_field => {
					"[event][id]" => "001924"
					"[rsa][message][id1]" => "001924"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001925
		# line in RSA:  <fld30> <fld31> <event_source> Option '<fld1>' not recognized for '<fld2>' parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Option '%{fld1}' not recognized for '%{fld2}' parameter." }
				id => "message-001925"
				add_field => {
					"[event][id]" => "001925"
					"[rsa][message][id1]" => "001925"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001926
		# line in RSA:  <fld30> <fld31> <event_source> Option not supported for Named Pipe-based backup sets. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Option not supported for Named Pipe-based backup sets." }
				id => "message-001926"
				add_field => {
					"[event][id]" => "001926"
					"[rsa][message][id1]" => "001926"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "ORDER" {
		# MESSAGE 001927
		# line in RSA:  <fld30> <fld31> <event_source> ORDER BY items must appear in the select list if SELECT DISTINCT is specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ORDER BY items must appear in the select list if SELECT DISTINCT is specified." }
				id => "message-001927"
				add_field => {
					"[event][id]" => "001927"
					"[rsa][message][id1]" => "001927"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001928
		# line in RSA:  <fld30> <fld31> <event_source> ORDER BY items must appear in the select list if the statement contains a UNION operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} ORDER BY items must appear in the select list if the statement contains a UNION operator." }
				id => "message-001928"
				add_field => {
					"[event][id]" => "001928"
					"[rsa][message][id1]" => "001928"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2008
	# line in RSA:  <fld30> <fld31> <event_source> Other databases are enlisted on this plan and must be removed before the plan can be deleted. 
	else if [logstash][msgparser][id] == "msgParserId2008" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Other databases are enlisted on this plan and must be removed before the plan can be deleted." }
			id => "msgParserId2008"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2009
	# line in RSA:  <fld30> <fld31> <event_source> Outer join operators cannot be specified in a query containing joined tables. 
	else if [logstash][msgparser][id] == "msgParserId2009" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Outer join operators cannot be specified in a query containing joined tables." }
			id => "msgParserId2009"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2010
	# line in RSA:  <fld30> <fld31> <event_source> Overriding queue check for setting mode from [<fld1>] to [<fld2>]. 
	else if [logstash][msgparser][id] == "msgParserId2010" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Overriding queue check for setting mode from [%{fld1}] to [%{fld2}]." }
			id => "msgParserId2010"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2011
	# line in RSA:  <fld30> <fld31> <event_source> Owner name specified is a group name. Objects cannot be owned by groups. 
	else if [logstash][msgparser][id] == "msgParserId2011" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Owner name specified is a group name. Objects cannot be owned by groups." }
			id => "msgParserId2011"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Page" {
		# MESSAGE 001933
		# line in RSA:  <fld30> <fld31> <event_source> Page #<fld1> from sysindexes in database ID #<fld2> not in cache after reading it into cache. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page #%{fld1} from sysindexes in database ID #%{fld2} not in cache after reading it into cache." }
				id => "message-001933"
				add_field => {
					"[event][id]" => "001933"
					"[rsa][message][id1]" => "001933"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001934
		# line in RSA:  <fld30> <fld31> <event_source> Page #<fld1> from table ID #<fld2>, database ID #<fld3>, not found in cache. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page #%{fld1} from table ID #%{fld2}, database ID #%{fld3}, not found in cache." }
				id => "message-001934"
				add_field => {
					"[event][id]" => "001934"
					"[rsa][message][id1]" => "001934"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001935
		# line in RSA:  <fld30> <fld31> <event_source> Page <fld1> in database ID <fld2> is allocated in the SGAM <fld3> and PFS <fld4>, but was not allocated in any IAM. PFS flags '<fld5>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page %{fld1} in database ID %{fld2} is allocated in the SGAM %{fld3} and PFS %{fld4}, but was not allocated in any IAM. PFS flags '%{fld5}'." }
				id => "message-001935"
				add_field => {
					"[event][id]" => "001935"
					"[rsa][message][id1]" => "001935"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001936
		# line in RSA:  <fld30> <fld31> <event_source> Page <fld1> in database ID <fld2> is allocated to both object ID <fld3>, index ID <fld4>, and object ID <fld5>, index ID <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page %{fld1} in database ID %{fld2} is allocated to both object ID %{fld3}, index ID %{fld4}, and object ID %{fld5}, index ID %{fld6}." }
				id => "message-001936"
				add_field => {
					"[event][id]" => "001936"
					"[rsa][message][id1]" => "001936"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001937
		# line in RSA:  <fld30> <fld31> <event_source> Page <fld1> is out of range for this database or is in a log file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page %{fld1} is out of range for this database or is in a log file." }
				id => "message-001937"
				add_field => {
					"[event][id]" => "001937"
					"[rsa][message][id1]" => "001937"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001938
		# line in RSA:  <fld30> <fld31> <event_source> Page <fld1> was expected to be the first page of a text, ntext, or image value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page %{fld1} was expected to be the first page of a text, ntext, or image value." }
				id => "message-001938"
				add_field => {
					"[event][id]" => "001938"
					"[rsa][message][id1]" => "001938"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001939
		# line in RSA:  <fld30> <fld31> <event_source> Page <fld1>, object ID <fld2>, index ID <fld3> has been modified but is not marked modified in the differential backup bitmap. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page %{fld1}, object ID %{fld2}, index ID %{fld3} has been modified but is not marked modified in the differential backup bitmap." }
				id => "message-001939"
				add_field => {
					"[event][id]" => "001939"
					"[rsa][message][id1]" => "001939"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001940
		# line in RSA:  <fld30> <fld31> <event_source> Page <fld1>, slot <fld2> for text, ntext, or image node does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page %{fld1}, slot %{fld2} for text, ntext, or image node does not exist." }
				id => "message-001940"
				add_field => {
					"[event][id]" => "001940"
					"[rsa][message][id1]" => "001940"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001941
		# line in RSA:  <fld30> <fld31> <event_source> Page errors on the GAM, SGAM, or PFS pages do not allow CHECKALLOC to verify database ID <fld1> pages from <fld2> to <fld3>. See other errors for cause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Page errors on the GAM, SGAM, or PFS pages do not allow CHECKALLOC to verify database ID %{fld1} pages from %{fld2} to %{fld3}. See other errors for cause." }
				id => "message-001941"
				add_field => {
					"[event][id]" => "001941"
					"[rsa][message][id1]" => "001941"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Parameter" {
		# MESSAGE 001942
		# line in RSA:  <fld30> <fld31> <event_source> Parameter <fld1> is incorrect for this DBCC statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parameter %{fld1} is incorrect for this DBCC statement." }
				id => "message-001942"
				add_field => {
					"[event][id]" => "001942"
					"[rsa][message][id1]" => "001942"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001943
		# line in RSA:  <fld30> <fld31> <event_source> Parameter '<fld1>' has an invalid data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parameter '%{fld1}' has an invalid data type." }
				id => "message-001943"
				add_field => {
					"[event][id]" => "001943"
					"[rsa][message][id1]" => "001943"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001944
		# line in RSA:  <fld30> <fld31> <event_source> Parameter '<fld1>' was supplied multiple times. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parameter '%{fld1}' was supplied multiple times." }
				id => "message-001944"
				add_field => {
					"[event][id]" => "001944"
					"[rsa][message][id1]" => "001944"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001945
		# line in RSA:  <fld30> <fld31> <event_source> Parameter '<fld1>' requires value of data type '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parameter '%{fld1}' requires value of data type '%{fld2}'." }
				id => "message-001945"
				add_field => {
					"[event][id]" => "001945"
					"[rsa][message][id1]" => "001945"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001946
		# line in RSA:  <fld30> <fld31> <event_source> Parameter '<fld1>' is required when the parent of the element to be added is missing and must be inserted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parameter '%{fld1}' is required when the parent of the element to be added is missing and must be inserted." }
				id => "message-001946"
				add_field => {
					"[event][id]" => "001946"
					"[rsa][message][id1]" => "001946"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001947
		# line in RSA:  <fld30> <fld31> <event_source> Parameter '<fld1>' cannot be NULL or an empty string. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parameter '%{fld1}' cannot be NULL or an empty string." }
				id => "message-001947"
				add_field => {
					"[event][id]" => "001947"
					"[rsa][message][id1]" => "001947"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001948
		# line in RSA:  <fld30> <fld31> <event_source> Parameter '@add_to_active_directory' cannot be set to TRUE because Active Directory client package is not installed properly on the machine where SQL Server is running. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parameter '@add_to_active_directory' cannot be set to TRUE because Active Directory client package is not installed properly on the machine where SQL Server is running." }
				id => "message-001948"
				add_field => {
					"[event][id]" => "001948"
					"[rsa][message][id1]" => "001948"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001949
		# line in RSA:  <fld30> <fld31> <event_source> Parameter @resync_type must be either 0, 1, 2. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parameter @resync_type must be either 0, 1, 2." }
				id => "message-001949"
				add_field => {
					"[event][id]" => "001949"
					"[rsa][message][id1]" => "001949"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2029
	# line in RSA:  <fld30> <fld31> <event_source> parameter option 
	else if [logstash][msgparser][id] == "msgParserId2029" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} parameter option" }
			id => "msgParserId2029"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2030
	# line in RSA:  <fld30> <fld31> <event_source> Parent tag ID <fld1> is not among the open tags. FOR XML EXPLICIT requires parent tags to be opened first. Check the ordering of the result set. 
	else if [logstash][msgparser][id] == "msgParserId2030" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Parent tag ID %{fld1} is not among the open tags. FOR XML EXPLICIT requires parent tags to be opened first. Check the ordering of the result set." }
			id => "msgParserId2030"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Partitioned" {
		# MESSAGE 001952
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable as the target of a bulk operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable as the target of a bulk operation." }
				id => "message-001952"
				add_field => {
					"[event][id]" => "001952"
					"[rsa][message][id1]" => "001952"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001953
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable because a value was not specified for partitioning column '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable because a value was not specified for partitioning column '%{fld2}'." }
				id => "message-001953"
				add_field => {
					"[event][id]" => "001953"
					"[rsa][message][id1]" => "001953"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001954
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable because it does not deliver all columns from its member tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable because it does not deliver all columns from its member tables." }
				id => "message-001954"
				add_field => {
					"[event][id]" => "001954"
					"[rsa][message][id1]" => "001954"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001955
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable because table '<fld2>' has a DEFAULT constraint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable because table '%{fld2}' has a DEFAULT constraint." }
				id => "message-001955"
				add_field => {
					"[event][id]" => "001955"
					"[rsa][message][id1]" => "001955"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001956
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable because table '<fld2>' has a timestamp column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable because table '%{fld2}' has a timestamp column." }
				id => "message-001956"
				add_field => {
					"[event][id]" => "001956"
					"[rsa][message][id1]" => "001956"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001957
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable because table '<fld2>' has an IDENTITY constraint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable because table '%{fld2}' has an IDENTITY constraint." }
				id => "message-001957"
				add_field => {
					"[event][id]" => "001957"
					"[rsa][message][id1]" => "001957"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001958
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable because table '<fld2>' has an INSTEAD OF trigger. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable because table '%{fld2}' has an INSTEAD OF trigger." }
				id => "message-001958"
				add_field => {
					"[event][id]" => "001958"
					"[rsa][message][id1]" => "001958"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001959
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable because the source query contains references to partition table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable because the source query contains references to partition table '%{fld2}'." }
				id => "message-001959"
				add_field => {
					"[event][id]" => "001959"
					"[rsa][message][id1]" => "001959"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001960
		# line in RSA:  <fld30> <fld31> <event_source> Partitioned view '<fld1>' is not updatable because the table '<fld2>' has an index on a computed column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Partitioned view '%{fld1}' is not updatable because the table '%{fld2}' has an index on a computed column." }
				id => "message-001960"
				add_field => {
					"[event][id]" => "001960"
					"[rsa][message][id1]" => "001960"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2040
	# line in RSA:  <fld30> <fld31> <event_source> Password changed. 
	else if [logstash][msgparser][id] == "msgParserId2040" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Password changed." }
			id => "msgParserId2040"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2041
	# line in RSA:  <fld30> <fld31> <event_source> Percent values must be between 0 and 100. 
	else if [logstash][msgparser][id] == "msgParserId2041" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Percent values must be between 0 and 100." }
			id => "msgParserId2041"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2042
	# line in RSA:  <fld30> <fld31> <event_source> Performing second pass of index checks. 
	else if [logstash][msgparser][id] == "msgParserId2042" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Performing second pass of index checks." }
			id => "msgParserId2042"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2043
	# line in RSA:  <fld30> <fld31> <event_source> <space> Performance monitor shared memory setup failed: <fld1> 
	else if [logstash][msgparser][id] == "msgParserId2043" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} %{space} Performance monitor shared memory setup failed: %{fld1}" }
			id => "msgParserId2043"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2044
	# line in RSA:  <fld30> <fld31> <event_source> Permission to execute DBCC <fld1> denied. 
	else if [logstash][msgparser][id] == "msgParserId2044" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Permission to execute DBCC %{fld1} denied." }
			id => "msgParserId2044"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2045
	# line in RSA:  <fld30> <fld31> <event_source> Physical data type '<fld1>' does not accept a collation 
	else if [logstash][msgparser][id] == "msgParserId2045" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Physical data type '%{fld1}' does not accept a collation" }
			id => "msgParserId2045"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2046
	# line in RSA:  <fld30> <fld31> <event_source> Possible schema corruption. Run DBCC CHECKCATALOG. 
	else if [logstash][msgparser][id] == "msgParserId2046" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Possible schema corruption. Run DBCC CHECKCATALOG." }
			id => "msgParserId2046"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2047
	# line in RSA:  <fld30> <fld31> <event_source> Potential deadlocks exist on all the schedulers 
	else if [logstash][msgparser][id] == "msgParserId2047" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Potential deadlocks exist on all the schedulers" }
			id => "msgParserId2047"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2048
	# line in RSA:  <fld30> <fld31> <event_source> Pre- and post-snapshot commands are not supported for a publication that may support non-SQL Server Subscribers by using the character-mode bcp as the synchronization method. 
	else if [logstash][msgparser][id] == "msgParserId2048" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Pre- and post-snapshot commands are not supported for a publication that may support non-SQL Server Subscribers by using the character-mode bcp as the synchronization method." }
			id => "msgParserId2048"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2049
	# line in RSA:  <fld30> <fld31> <event_source> Premature end-of-message while reading current row from host. Host program may have terminated. 
	else if [logstash][msgparser][id] == "msgParserId2049" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Premature end-of-message while reading current row from host. Host program may have terminated." }
			id => "msgParserId2049"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2050
	# line in RSA:  <fld30> <fld31> <event_source> PREPARE TRAN statement not allowed on MSDTC transaction. 
	else if [logstash][msgparser][id] == "msgParserId2050" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} PREPARE TRAN statement not allowed on MSDTC transaction." }
			id => "msgParserId2050"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2051
	# line in RSA:  <fld30> <fld31> <event_source> Prepared statement '<fld1>' expects parameter <fld2>, which was not supplied. 
	else if [logstash][msgparser][id] == "msgParserId2051" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Prepared statement '%{fld1}' expects parameter %{fld2}, which was not supplied." }
			id => "msgParserId2051"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2052
	# line in RSA:  <fld30> <fld31> <event_source> PRIMARY KEY and UNIQUE KEY constraints do not have space allocated. 
	else if [logstash][msgparser][id] == "msgParserId2052" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} PRIMARY KEY and UNIQUE KEY constraints do not have space allocated." }
			id => "msgParserId2052"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Primary" {
		# MESSAGE 001973
		# line in RSA:  <fld30> <fld31> <event_source> Primary key column '<fld1>' cannot be excluded from a vertical partition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Primary key column '%{fld1}' cannot be excluded from a vertical partition." }
				id => "message-001973"
				add_field => {
					"[event][id]" => "001973"
					"[rsa][message][id1]" => "001973"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001974
		# line in RSA:  <fld30> <fld31> <event_source> Primary log file '<fld1>' is missing and the database was not cleanly shut down so it cannot be rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Primary log file '%{fld1}' is missing and the database was not cleanly shut down so it cannot be rebuilt." }
				id => "message-001974"
				add_field => {
					"[event][id]" => "001974"
					"[rsa][message][id1]" => "001974"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001975
		# line in RSA:  <fld30> <fld31> <event_source> Primary log file is not available for database '<fld1>'.  The log cannot be backed up. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Primary log file is not available for database '%{fld1}'.  The log cannot be backed up." }
				id => "message-001975"
				add_field => {
					"[event][id]" => "001975"
					"[rsa][message][id1]" => "001975"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2056
	# line in RSA:  <fld30> <fld31> <event_source> PrintStack Request 
	else if [logstash][msgparser][id] == "msgParserId2056" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} PrintStack Request" }
			id => "msgParserId2056"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2057
	# line in RSA:  <fld30> <fld31> <event_source> Prior to updating sysdatabases entry for database '<fld1>', mode = <fld2> and status = <fld3> (status suspect_bit = <fld4>). 
	else if [logstash][msgparser][id] == "msgParserId2057" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Prior to updating sysdatabases entry for database '%{fld1}', mode = %{fld2} and status = %{fld3} (status suspect_bit = %{fld4})." }
			id => "msgParserId2057"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2058
	# line in RSA:  <fld30> <fld31> <event_source> Privilege <fld1> may not be granted or revoked. 
	else if [logstash][msgparser][id] == "msgParserId2058" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Privilege %{fld1} may not be granted or revoked." }
			id => "msgParserId2058"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2059
	# line in RSA:  <fld30> <fld31> <event_source> Problem encountered generating replica nickname. 
	else if [logstash][msgparser][id] == "msgParserId2059" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Problem encountered generating replica nickname." }
			id => "msgParserId2059"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Procedure" {
		# MESSAGE 001980
		# line in RSA:  <fld30> <fld31> <event_source> Procedure <fld1> has no parameters and arguments were supplied. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Procedure %{fld1} has no parameters and arguments were supplied." }
				id => "message-001980"
				add_field => {
					"[event][id]" => "001980"
					"[rsa][message][id1]" => "001980"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001981
		# line in RSA:  <fld30> <fld31> <event_source> Procedure '<fld1>' expects parameter '<fld2>', which was not supplied. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Procedure '%{fld1}' expects parameter '%{fld2}', which was not supplied." }
				id => "message-001981"
				add_field => {
					"[event][id]" => "001981"
					"[rsa][message][id1]" => "001981"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001982
		# line in RSA:  <fld30> <fld31> <event_source> Procedure '<fld1>' has already been created with group number <fld2>. Create procedure with an unused group number. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Procedure '%{fld1}' has already been created with group number %{fld2}. Create procedure with an unused group number." }
				id => "message-001982"
				add_field => {
					"[event][id]" => "001982"
					"[rsa][message][id1]" => "001982"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001983
		# line in RSA:  <fld30> <fld31> <event_source> Procedure '<fld1>' was created despite delayed name resolution warnings (if any). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Procedure '%{fld1}' was created despite delayed name resolution warnings (if any)." }
				id => "message-001983"
				add_field => {
					"[event][id]" => "001983"
					"[rsa][message][id1]" => "001983"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001984
		# line in RSA:  <fld30> <fld31> <event_source> Procedure expects parameter '<fld1>' of type '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Procedure expects parameter '%{fld1}' of type '%{fld2}'." }
				id => "message-001984"
				add_field => {
					"[event][id]" => "001984"
					"[rsa][message][id1]" => "001984"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001985
		# line in RSA:  <fld30> <fld31> <event_source> Procedure or function <fld1> has too many arguments specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Procedure or function %{fld1} has too many arguments specified." }
				id => "message-001985"
				add_field => {
					"[event][id]" => "001985"
					"[rsa][message][id1]" => "001985"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Process" {
		# MESSAGE 001986
		# line in RSA:  <fld30> <fld31> <event_source> Process <fld1> tried to remove DES resource lock <fld2>_DES, which it does not hold. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process %{fld1} tried to remove DES resource lock %{fld2}_DES, which it does not hold." }
				id => "message-001986"
				add_field => {
					"[event][id]" => "001986"
					"[rsa][message][id1]" => "001986"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001987
		# line in RSA:  <fld30> <fld31> <event_source> Process ID <fld1> attempting to unlock unowned resource <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process ID %{fld1} attempting to unlock unowned resource %{fld2}." }
				id => "message-001987"
				add_field => {
					"[event][id]" => "001987"
					"[rsa][message][id1]" => "001987"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001988
		# line in RSA:  <fld30> <fld31> <event_source> Process ID <fld1> has raised user error <fld2>, severity <fld3>. SQL Server is terminating this process. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process ID %{fld1} has raised user error %{fld2}, severity %{fld3}. SQL Server is terminating this process." }
				id => "message-001988"
				add_field => {
					"[event][id]" => "001988"
					"[rsa][message][id1]" => "001988"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001989
		# line in RSA:  <fld30> <fld31> <event_source> Process ID <fld1> is not a valid process ID. Choose a number between 1 and <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process ID %{fld1} is not a valid process ID. Choose a number between 1 and %{fld2}." }
				id => "message-001989"
				add_field => {
					"[event][id]" => "001989"
					"[rsa][message][id1]" => "001989"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001990
		# line in RSA:  <fld30> <fld31> <event_source> Process ID <fld1> is not an active process ID. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process ID %{fld1} is not an active process ID." }
				id => "message-001990"
				add_field => {
					"[event][id]" => "001990"
					"[rsa][message][id1]" => "001990"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001991
		# line in RSA:  <fld30> <fld31> <event_source> Process ID <fld1> killed by hostname <fld2>, host process ID <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process ID %{fld1} killed by hostname %{fld2}, host process ID %{fld3}." }
				id => "message-001991"
				add_field => {
				"result" => "Process ID killed by hostname"
					"[event][id]" => "001991"
					"[rsa][message][id1]" => "001991"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001992
		# line in RSA:  <fld30> <fld31> <event_source> Process ID <fld1> tried to remove a buffer resource lock <fld2>_BUF that it does not hold in SDES <fld3>_SDES. Contact Technical Support. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process ID %{fld1} tried to remove a buffer resource lock %{fld2}_BUF that it does not hold in SDES %{fld3}_SDES. Contact Technical Support." }
				id => "message-001992"
				add_field => {
					"[event][id]" => "001992"
					"[rsa][message][id1]" => "001992"
					"[event][categoryid]" => "1603020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001993
		# line in RSA:  <fld30> <fld31> <event_source> Process ID <fld1> was chosen as the deadlock victim with P_BACKOUT bit set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process ID %{fld1} was chosen as the deadlock victim with P_BACKOUT bit set." }
				id => "message-001993"
				add_field => {
					"[event][id]" => "001993"
					"[rsa][message][id1]" => "001993"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001994
		# line in RSA:  <fld30> <fld31> <event_source> Process ID <fld1>:<fld2> owns resources that are blocking processes on Scheduler <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process ID %{fld1}:%{fld2} owns resources that are blocking processes on Scheduler %{fld3}." }
				id => "message-001994"
				add_field => {
					"[event][id]" => "001994"
					"[rsa][message][id1]" => "001994"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003599
		# line in RSA:  <fld30> <fld31> <event_source> Process <fld1> appears to be non-yielding on Scheduler 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Process %{fld1} appears to be non-yielding on Scheduler" }
				id => "message-003599"
				add_field => {
				"result" => "Process appears to be non-yielding on Scheduler"
					"[event][id]" => "003599"
					"[rsa][message][id1]" => "003599"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Processed" {
		# MESSAGE 001995
		# line in RSA:  <fld30> <fld31> <event_source> Processed <fld1> pages for database '<fld2>', file '<fld3>' on file <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Processed %{fld1} pages for database '%{fld2}', file '%{fld3}' on file %{fld4}." }
				id => "message-001995"
				add_field => {
					"[event][id]" => "001995"
					"[rsa][message][id1]" => "001995"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001996
		# line in RSA:  <fld30> <fld31> <event_source> Processed <fld1> entries in sysindexes for database ID <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Processed %{fld1} entries in sysindexes for database ID %{fld2}." }
				id => "message-001996"
				add_field => {
					"[event][id]" => "001996"
					"[rsa][message][id1]" => "001996"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2078
	# line in RSA:  <fld30> <fld31> <event_source> Processor affinity turned ON, processor mask <fld1> 
	else if [logstash][msgparser][id] == "msgParserId2078" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Processor affinity turned ON, processor mask %{fld1}" }
			id => "msgParserId2078"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Profile" {
		# MESSAGE 001997
		# line in RSA:  <fld30> <fld31> <event_source> Profile not defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Profile not defined." }
				id => "message-001997"
				add_field => {
					"[event][id]" => "001997"
					"[rsa][message][id1]" => "001997"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001998
		# line in RSA:  <fld30> <fld31> <event_source> Profile used by the Merge Agent to perform rowcount and checksum validation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Profile used by the Merge Agent to perform rowcount and checksum validation." }
				id => "message-001998"
				add_field => {
					"[event][id]" => "001998"
					"[rsa][message][id1]" => "001998"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 001999
		# line in RSA:  <fld30> <fld31> <event_source> Profile used by the Merge Agent to perform rowcount validation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Profile used by the Merge Agent to perform rowcount validation." }
				id => "message-001999"
				add_field => {
					"[event][id]" => "001999"
					"[rsa][message][id1]" => "001999"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002000
		# line in RSA:  <fld30> <fld31> <event_source> Profile used by the Windows Synchronization Manager. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Profile used by the Windows Synchronization Manager." }
				id => "message-002000"
				add_field => {
					"[event][id]" => "002000"
					"[rsa][message][id1]" => "002000"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Property" {
		# MESSAGE 002001
		# line in RSA:  <fld30> <fld31> <event_source> Property '<fld1>' of article '<fld2>' cannot be changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Property '%{fld1}' of article '%{fld2}' cannot be changed." }
				id => "message-002001"
				add_field => {
					"[event][id]" => "002001"
					"[rsa][message][id1]" => "002001"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002002
		# line in RSA:  <fld30> <fld31> <event_source> Property cannot be added. Property '<fld1>' already exists for '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Property cannot be added. Property '%{fld1}' already exists for '%{fld2}'." }
				id => "message-002002"
				add_field => {
					"[event][id]" => "002002"
					"[rsa][message][id1]" => "002002"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002003
		# line in RSA:  <fld30> <fld31> <event_source> Property cannot be updated or deleted. Property '<fld1>' does not exist for '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Property cannot be updated or deleted. Property '%{fld1}' does not exist for '%{fld2}'." }
				id => "message-002003"
				add_field => {
					"[event][id]" => "002003"
					"[rsa][message][id1]" => "002003"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2086
	# line in RSA:  <fld30> <fld31> <event_source> Protocol error. Message indicates a generation has disappeared. 
	else if [logstash][msgparser][id] == "msgParserId2086" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Protocol error. Message indicates a generation has disappeared." }
			id => "msgParserId2086"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2087
	# line in RSA:  <fld30> <fld31> <event_source> Provider caused a server fault in an external process. 
	else if [logstash][msgparser][id] == "msgParserId2087" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Provider caused a server fault in an external process." }
			id => "msgParserId2087"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Publication" {
		# MESSAGE 002006
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' cannot be subscribed to by Subscriber database '<fld2>' because it contains one or more articles that have been subscribed to by the same Subscriber database at merge level. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' cannot be subscribed to by Subscriber database '%{fld2}' because it contains one or more articles that have been subscribed to by the same Subscriber database at merge level." }
				id => "message-002006"
				add_field => {
					"[event][id]" => "002006"
					"[rsa][message][id1]" => "002006"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002007
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' cannot be subscribed to by Subscriber database '<fld2>' because it contains one or more articles that have been subscribed to by the same Subscriber database at transaction level. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' cannot be subscribed to by Subscriber database '%{fld2}' because it contains one or more articles that have been subscribed to by the same Subscriber database at transaction level." }
				id => "message-002007"
				add_field => {
					"[event][id]" => "002007"
					"[rsa][message][id1]" => "002007"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002008
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' cannot be subscribed to by Subscriber database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' cannot be subscribed to by Subscriber database '%{fld2}'." }
				id => "message-002008"
				add_field => {
					"[event][id]" => "002008"
					"[rsa][message][id1]" => "002008"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002009
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' does not allow anonymous subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' does not allow anonymous subscriptions." }
				id => "message-002009"
				add_field => {
					"[event][id]" => "002009"
					"[rsa][message][id1]" => "002009"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002010
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' does not contain any article that uses automatic identity range management. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' does not contain any article that uses automatic identity range management." }
				id => "message-002010"
				add_field => {
					"[event][id]" => "002010"
					"[rsa][message][id1]" => "002010"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002011
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' does not exist." }
				id => "message-002011"
				add_field => {
					"[event][id]" => "002011"
					"[rsa][message][id1]" => "002011"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002013
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' does not support '<fld2>' subscriptions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' does not support '%{fld2}' subscriptions." }
				id => "message-002013"
				add_field => {
					"[event][id]" => "002013"
					"[rsa][message][id1]" => "002013"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002014
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' does not support the nosync type because it contains a table that does not have a rowguidcol column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' does not support the nosync type because it contains a table that does not have a rowguidcol column." }
				id => "message-002014"
				add_field => {
					"[event][id]" => "002014"
					"[rsa][message][id1]" => "002014"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002015
		# line in RSA:  <fld30> <fld31> <event_source> Publication '<fld1>' is not enabled to use an independent agent. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication '%{fld1}' is not enabled to use an independent agent." }
				id => "message-002015"
				add_field => {
					"[event][id]" => "002015"
					"[rsa][message][id1]" => "002015"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002016
		# line in RSA:  <fld30> <fld31> <event_source> Publication of '<fld1>' data from Publisher '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication of '%{fld1}' data from Publisher '%{fld2}'." }
				id => "message-002016"
				add_field => {
					"[event][id]" => "002016"
					"[rsa][message][id1]" => "002016"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002017
		# line in RSA:  <fld30> <fld31> <event_source> Publication property '<fld1>' cannot be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publication property '%{fld1}' cannot be NULL." }
				id => "message-002017"
				add_field => {
					"[event][id]" => "002017"
					"[rsa][message][id1]" => "002017"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Publisher" {
		# MESSAGE 002018
		# line in RSA:  <fld30> <fld31> <event_source> Publisher '<fld1>', publication database '<fld2>', and publication '<fld3>' could not be added to the list of synchronization partners. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publisher '%{fld1}', publication database '%{fld2}', and publication '%{fld3}' could not be added to the list of synchronization partners." }
				id => "message-002018"
				add_field => {
					"[event][id]" => "002018"
					"[rsa][message][id1]" => "002018"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002019
		# line in RSA:  <fld30> <fld31> <event_source> Publisher '<fld1>', publisher database '<fld2>', and publication '<fld3>' are not valid synchronization partners. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publisher '%{fld1}', publisher database '%{fld2}', and publication '%{fld3}' are not valid synchronization partners." }
				id => "message-002019"
				add_field => {
					"[event][id]" => "002019"
					"[rsa][message][id1]" => "002019"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002020
		# line in RSA:  <fld30> <fld31> <event_source> Publisher '<fld1>', publisher database '<fld2>', publication '<fld3>' could not be removed from the list of synchronization partners. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Publisher '%{fld1}', publisher database '%{fld2}', publication '%{fld3}' could not be removed from the list of synchronization partners." }
				id => "message-002020"
				add_field => {
					"[event][id]" => "002020"
					"[rsa][message][id1]" => "002020"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2102
	# line in RSA:  <fld30> <fld31> <event_source> Pull subscriptions cannot be created in the same database as the publication. 
	else if [logstash][msgparser][id] == "msgParserId2102" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Pull subscriptions cannot be created in the same database as the publication." }
			id => "msgParserId2102"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2103
	# line in RSA:  <fld30> <fld31> <event_source> Queries processed: <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId2103" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Queries processed: %{fld1}." }
			id => "msgParserId2103"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Query" {
		# MESSAGE 002023
		# line in RSA:  <fld30> <fld31> <event_source> Query contains an outer-join request that is not permitted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Query contains an outer-join request that is not permitted." }
				id => "message-002023"
				add_field => {
					"[event][id]" => "002023"
					"[rsa][message][id1]" => "002023"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002024
		# line in RSA:  <fld30> <fld31> <event_source> Query does not reference the full-text indexed table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Query does not reference the full-text indexed table." }
				id => "message-002024"
				add_field => {
					"[event][id]" => "002024"
					"[rsa][message][id1]" => "002024"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002025
		# line in RSA:  <fld30> <fld31> <event_source> Query processor could not produce a query plan because of the hints defined in this query. Resubmit the query without specifying any hints and without using SET FORCEPLAN. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Query processor could not produce a query plan because of the hints defined in this query. Resubmit the query without specifying any hints and without using SET FORCEPLAN." }
				id => "message-002025"
				add_field => {
					"[event][id]" => "002025"
					"[rsa][message][id1]" => "002025"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Query:01
		# line in RSA:  <fld30> <fld31> Server <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} Server %{info}" }
				id => "message-Query:01"
				add_field => {
					"[event][id]" => "Query:01"
					"[rsa][message][id1]" => "Query:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2107
	# line in RSA:  <fld30> <fld31> <event_source> QueryInterface failed for '<fld1>': <fld2>. 
	else if [logstash][msgparser][id] == "msgParserId2107" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} QueryInterface failed for '%{fld1}': %{fld2}." }
			id => "msgParserId2107"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2108
	# line in RSA:  <fld30> <fld31> <event_source> Queue Reader Agent startup message. 
	else if [logstash][msgparser][id] == "msgParserId2108" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Queue Reader Agent startup message." }
			id => "msgParserId2108"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Queued" {
		# MESSAGE 002028
		# line in RSA:  <fld30> <fld31> <event_source> Queued snapshot publication property '<fld1>' cannot have the value '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Queued snapshot publication property '%{fld1}' cannot have the value '%{fld2}'." }
				id => "message-002028"
				add_field => {
					"[event][id]" => "002028"
					"[rsa][message][id1]" => "002028"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002029
		# line in RSA:  <fld30> <fld31> <event_source> Queued Updating Subscriptions: write to message queue failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Queued Updating Subscriptions: write to message queue failed." }
				id => "message-002029"
				add_field => {
					"[event][id]" => "002029"
					"[rsa][message][id1]" => "002029"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2111
	# line in RSA:  <fld30> <fld31> <event_source> RAISERROR failed due to invalid parameter substitution(s) for error <fld1>, severity <fld2>, state <fld3>. 
	else if [logstash][msgparser][id] == "msgParserId2111" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} RAISERROR failed due to invalid parameter substitution(s) for error %{fld1}, severity %{fld2}, state %{fld3}." }
			id => "msgParserId2111"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2112
	# line in RSA:  <fld30> <fld31> <event_source> read from 
	else if [logstash][msgparser][id] == "msgParserId2112" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} read from" }
			id => "msgParserId2112"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2113
	# line in RSA:  <fld30> <fld31> <event_source> Read on '<fld1>' failed, status = <fld2>. See the SQL Server error log for more details. 
	else if [logstash][msgparser][id] == "msgParserId2113" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Read on '%{fld1}' failed, status = %{fld2}. See the SQL Server error log for more details." }
			id => "msgParserId2113"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2114
	# line in RSA:  <fld30> <fld31> <event_source> READTEXT cannot be used on inserted or deleted tables within an INSTEAD OF trigger. 
	else if [logstash][msgparser][id] == "msgParserId2114" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} READTEXT cannot be used on inserted or deleted tables within an INSTEAD OF trigger." }
			id => "msgParserId2114"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2115
	# line in RSA:  SQL Server is ready for client connections 
	else if [logstash][msgparser][id] == "msgParserId2115" {
		dissect {
			mapping => { "message" => "SQL Server is ready for client connections" }
			id => "msgParserId2115"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2116
	# line in RSA:  <fld30> <fld31> <event_source> Rec_complete: Could not open controlling database (ID <fld3>) of controlling database in multi-database transaction 
	else if [logstash][msgparser][id] == "msgParserId2116" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rec_complete: Could not open controlling database (ID %{fld3}) of controlling database in multi-database transaction" }
			id => "msgParserId2116"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2117
	# line in RSA:  <fld30> <fld31> <event_source> Rec_finish: getnext SCAN_NOINDEX on sysdatabases.dbid=<fld1> failed. 
	else if [logstash][msgparser][id] == "msgParserId2117" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rec_finish: getnext SCAN_NOINDEX on sysdatabases.dbid=%{fld1} failed." }
			id => "msgParserId2117"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Received" {
		# MESSAGE 002036
		# line in RSA:  <fld30> <fld31> <event_source> Received invalid column length from bcp client. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Received invalid column length from bcp client." }
				id => "message-002036"
				add_field => {
					"[event][id]" => "002036"
					"[rsa][message][id1]" => "002036"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002037
		# line in RSA:  <fld30> <fld31> <event_source> Received invalid row length <fld1> from bcp client. Maximum row size is <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Received invalid row length %{fld1} from bcp client. Maximum row size is %{fld2}." }
				id => "message-002037"
				add_field => {
					"[event][id]" => "002037"
					"[rsa][message][id1]" => "002037"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002038
		# line in RSA:  <fld30> <fld31> <event_source> Received invalid row length <fld1> from bcp client. Minimum row size is <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Received invalid row length %{fld1} from bcp client. Minimum row size is %{fld2}." }
				id => "message-002038"
				add_field => {
					"[event][id]" => "002038"
					"[rsa][message][id1]" => "002038"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2121
	# line in RSA:  <fld30> <fld31> <event_source> Recover Scoring Override - The format of the Override file is invalid.
	else if [logstash][msgparser][id] == "msgParserId2121" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recover Scoring Override - The format of the Override file is invalid." }
			id => "msgParserId2121"
			add_field => {
				"result" => "Recover - The format of the Override file is invalid"
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Recovering" {
		# MESSAGE 002039
		# line in RSA:  <fld30> <fld31> <event_source> Recovering all databases but not clearing tempdb. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovering all databases but not clearing tempdb." }
				id => "message-002039"
				add_field => {
					"[event][id]" => "002039"
					"[rsa][message][id1]" => "002039"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002040
		# line in RSA:  <fld30> <fld31> <event_source> Recovering database '<username>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovering database '%{username}'." }
				id => "message-002040"
				add_field => {
					"[event][id]" => "002040"
					"[rsa][message][id1]" => "002040"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Recovery" {
		# MESSAGE 002042
		# line in RSA:  <fld30> <fld31> <event_source> Recovery complete. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovery complete." }
				id => "message-002042"
				add_field => {
					"[event][id]" => "002042"
					"[rsa][message][id1]" => "002042"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002043
		# line in RSA:  <fld30> <fld31> <event_source> Recovery has failed because reexecution of CREATE INDEX found inconsistencies between target filegroup '<fld1>' (<fld2>) and source filegroup '<fld3>' (<fld4>). Restore both filegroups before attempting further RESTORE LOG operations. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovery has failed because reexecution of CREATE INDEX found inconsistencies between target filegroup '%{fld1}' (%{fld2}) and source filegroup '%{fld3}' (%{fld4}). Restore both filegroups before attempting further RESTORE LOG operations." }
				id => "message-002043"
				add_field => {
					"[event][id]" => "002043"
					"[rsa][message][id1]" => "002043"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002044
		# line in RSA:  <fld30> <fld31> <event_source> Recovery intervals above <fld1> minutes not recommended. Use the RECONFIGURE WITH OVERRIDE statement to force this configuration. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovery intervals above %{fld1} minutes not recommended. Use the RECONFIGURE WITH OVERRIDE statement to force this configuration." }
				id => "message-002044"
				add_field => {
					"[event][id]" => "002044"
					"[rsa][message][id1]" => "002044"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002045
		# line in RSA:  <fld30> <fld31> <event_source> Recovery is checkpointing database '<fld1>' (<fld2>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovery is checkpointing database '%{fld1}' (%{fld2})" }
				id => "message-002045"
				add_field => {
					"[event][id]" => "002045"
					"[rsa][message][id1]" => "002045"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002046
		# line in RSA:  <fld30> <fld31> <event_source> Recovery of database '<fld1>' (<fld2>) detected possible identity value inconsistency in table ID <fld3>. Run DBCC CHECKIDENT ('<fld4>'). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovery of database '%{fld1}' (%{fld2}) detected possible identity value inconsistency in table ID %{fld3}. Run DBCC CHECKIDENT ('%{fld4}')." }
				id => "message-002046"
				add_field => {
					"[event][id]" => "002046"
					"[rsa][message][id1]" => "002046"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002047
		# line in RSA:  <fld30> <fld31> <event_source> Recovery of database '<fld1>' (<fld2>) is <fld3> complete (approximately <fld4> more seconds) (Phase <fld5> of 3). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovery of database '%{fld1}' (%{fld2}) is %{fld3} complete (approximately %{fld4} more seconds) (Phase %{fld5} of 3)." }
				id => "message-002047"
				add_field => {
					"[event][id]" => "002047"
					"[rsa][message][id1]" => "002047"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Recovery:02
		# line in RSA:  <fld30> <fld31> <event_source> Recovery <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Recovery %{fld1}" }
				id => "message-Recovery:02"
				add_field => {
					"[event][id]" => "Recovery:02"
					"[rsa][message][id1]" => "Recovery:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2130
	# line in RSA:  <fld30> <fld31> <event_source> REINDEX received an exception. Statement terminated. 
	else if [logstash][msgparser][id] == "msgParserId2130" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} REINDEX received an exception. Statement terminated." }
			id => "msgParserId2130"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2131
	# line in RSA:  <fld30> <fld31> <event_source> Reinitialize subscriptions having data validation failures 
	else if [logstash][msgparser][id] == "msgParserId2131" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Reinitialize subscriptions having data validation failures" }
			id => "msgParserId2131"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2132
	# line in RSA:  <fld30> <fld31> <event_source> Reinitialized subscription(s). 
	else if [logstash][msgparser][id] == "msgParserId2132" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Reinitialized subscription(s)." }
			id => "msgParserId2132"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2133
	# line in RSA:  <fld30> <fld31> <event_source> Reinitializes all subscriptions that have data validation failures. 
	else if [logstash][msgparser][id] == "msgParserId2133" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Reinitializes all subscriptions that have data validation failures." }
			id => "msgParserId2133"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2134
	# line in RSA:  <fld30> <fld31> <event_source> Released and initiated rewind on '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId2134" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Released and initiated rewind on '%{fld1}'." }
			id => "msgParserId2134"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Remote" {
		# MESSAGE 002053
		# line in RSA:  <fld30> <fld31> <event_source> Remote access not allowed for Windows NT user activated by SETUSER. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Remote access not allowed for Windows NT user activated by SETUSER." }
				id => "message-002053"
				add_field => {
					"[event][id]" => "002053"
					"[rsa][message][id1]" => "002053"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002054
		# line in RSA:  <fld30> <fld31> <event_source> Remote function calls are not allowed within a function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Remote function calls are not allowed within a function." }
				id => "message-002054"
				add_field => {
					"[event][id]" => "002054"
					"[rsa][message][id1]" => "002054"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002055
		# line in RSA:  <fld30> <fld31> <event_source> Remote login option '<fld1>' is not unique. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Remote login option '%{fld1}' is not unique." }
				id => "message-002055"
				add_field => {
					"[event][id]" => "002055"
					"[rsa][message][id1]" => "002055"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002056
		# line in RSA:  <fld30> <fld31> <event_source> Remote login option does not exist or cannot be set by user. Run sp_remoteoption with no parameters to see options. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Remote login option does not exist or cannot be set by user. Run sp_remoteoption with no parameters to see options." }
				id => "message-002056"
				add_field => {
					"[event][id]" => "002056"
					"[rsa][message][id1]" => "002056"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002057
		# line in RSA:  <fld30> <fld31> <event_source> Remote procedure time out of <fld1> seconds exceeded. Remote procedure '<fld2>' is canceled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Remote procedure time out of %{fld1} seconds exceeded. Remote procedure '%{fld2}' is canceled." }
				id => "message-002057"
				add_field => {
					"[event][id]" => "002057"
					"[rsa][message][id1]" => "002057"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002058
		# line in RSA:  <fld30> <fld31> <event_source> Remote tables are not updatable. Updatable keyset-driven cursors on remote tables require a transaction with the REPEATABLE_READ or SERIALIZABLE isolation level spanning the cursor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Remote tables are not updatable. Updatable keyset-driven cursors on remote tables require a transaction with the REPEATABLE_READ or SERIALIZABLE isolation level spanning the cursor." }
				id => "message-002058"
				add_field => {
					"[event][id]" => "002058"
					"[rsa][message][id1]" => "002058"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Removed" {
		# MESSAGE 002059
		# line in RSA:  <fld30> <fld31> <event_source> Removed <fld1> history records from <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Removed %{fld1} history records from %{fld2}." }
				id => "message-002059"
				add_field => {
					"[event][id]" => "002059"
					"[rsa][message][id1]" => "002059"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002060
		# line in RSA:  <fld30> <fld31> <event_source> Removed <fld1> replicated transactions consisting of <fld2> statements in <fld3> seconds (<fld4> rows/sec). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Removed %{fld1} replicated transactions consisting of %{fld2} statements in %{fld3} seconds (%{fld4} rows/sec)." }
				id => "message-002060"
				add_field => {
					"[event][id]" => "002060"
					"[rsa][message][id1]" => "002060"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002061
		# line in RSA:  <fld30> <fld31> <event_source> Removed <fld1> replication history records in <fld2> seconds (<fld3> row/secs). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Removed %{fld1} replication history records in %{fld2} seconds (%{fld3} row/secs)." }
				id => "message-002061"
				add_field => {
					"[event][id]" => "002061"
					"[rsa][message][id1]" => "002061"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Removes" {
		# MESSAGE 002062
		# line in RSA:  <fld30> <fld31> <event_source> Removes replicated transactions from the distribution database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Removes replicated transactions from the distribution database." }
				id => "message-002062"
				add_field => {
					"[event][id]" => "002062"
					"[rsa][message][id1]" => "002062"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002063
		# line in RSA:  <fld30> <fld31> <event_source> Removes replication agent history from the distribution database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Removes replication agent history from the distribution database." }
				id => "message-002063"
				add_field => {
					"[event][id]" => "002063"
					"[rsa][message][id1]" => "002063"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Repair" {
		# MESSAGE 002064
		# line in RSA:  <fld30> <fld31> <event_source> Repair statement not processed. Database needs to be in single user mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair statement not processed. Database needs to be in single user mode." }
				id => "message-002064"
				add_field => {
					"[event][id]" => "002064"
					"[rsa][message][id1]" => "002064"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002065
		# line in RSA:  <fld30> <fld31> <event_source> Repair: <fld1> page at <fld2> has been rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: %{fld1} page at %{fld2} has been rebuilt." }
				id => "message-002065"
				add_field => {
					"[event][id]" => "002065"
					"[rsa][message][id1]" => "002065"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002066
		# line in RSA:  <fld30> <fld31> <event_source> Repair: Converted forwarded record for object ID <fld1>, index ID <fld2>, at page <fld3>, slot <fld4> to a data row. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: Converted forwarded record for object ID %{fld1}, index ID %{fld2}, at page %{fld3}, slot %{fld4} to a data row." }
				id => "message-002066"
				add_field => {
					"[event][id]" => "002066"
					"[rsa][message][id1]" => "002066"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002067
		# line in RSA:  <fld30> <fld31> <event_source> Repair: Deleted record for object ID <fld1>, index ID <fld2>, on page <fld3>, slot <fld4>. Indexes will be rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: Deleted record for object ID %{fld1}, index ID %{fld2}, on page %{fld3}, slot %{fld4}. Indexes will be rebuilt." }
				id => "message-002067"
				add_field => {
					"[event][id]" => "002067"
					"[rsa][message][id1]" => "002067"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002068
		# line in RSA:  <fld30> <fld31> <event_source> Repair: Deleted text column, text ID  <fld1>, for object ID <fld2> on page <fld3>, slot <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: Deleted text column, text ID  %{fld1}, for object ID %{fld2} on page %{fld3}, slot %{fld4}." }
				id => "message-002068"
				add_field => {
					"[event][id]" => "002068"
					"[rsa][message][id1]" => "002068"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002069
		# line in RSA:  <fld30> <fld31> <event_source> Repair: Extent <fld1> has been allocated to object ID <fld2>, index ID <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: Extent %{fld1} has been allocated to object ID %{fld2}, index ID %{fld3}." }
				id => "message-002069"
				add_field => {
					"[event][id]" => "002069"
					"[rsa][message][id1]" => "002069"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002070
		# line in RSA:  <fld30> <fld31> <event_source> Repair: Extent <fld1> has been deallocated from object ID <fld2>, index ID <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: Extent %{fld1} has been deallocated from object ID %{fld2}, index ID %{fld3}." }
				id => "message-002070"
				add_field => {
					"[event][id]" => "002070"
					"[rsa][message][id1]" => "002070"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002071
		# line in RSA:  <fld30> <fld31> <event_source> Repair: IAM chain for object ID <fld1>, index ID <fld2>, has been truncated before page <fld3> and will be rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: IAM chain for object ID %{fld1}, index ID %{fld2}, has been truncated before page %{fld3} and will be rebuilt." }
				id => "message-002071"
				add_field => {
					"[event][id]" => "002071"
					"[rsa][message][id1]" => "002071"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002072
		# line in RSA:  <fld30> <fld31> <event_source> Repair: Page <fld1> has been allocated to object ID <fld2>, index ID <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: Page %{fld1} has been allocated to object ID %{fld2}, index ID %{fld3}." }
				id => "message-002072"
				add_field => {
					"[event][id]" => "002072"
					"[rsa][message][id1]" => "002072"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002073
		# line in RSA:  <fld30> <fld31> <event_source> Repair: Page <fld1> has been deallocated from object ID <fld2>, index ID <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: Page %{fld1} has been deallocated from object ID %{fld2}, index ID %{fld3}." }
				id => "message-002073"
				add_field => {
					"[event][id]" => "002073"
					"[rsa][message][id1]" => "002073"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002074
		# line in RSA:  <fld30> <fld31> <event_source> Repair: Page <fld1> next and <fld2> previous pointers have been set to match each other in object ID <fld3>, index ID <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repair: Page %{fld1} next and %{fld2} previous pointers have been set to match each other in object ID %{fld3}, index ID %{fld4}." }
				id => "message-002074"
				add_field => {
					"[event][id]" => "002074"
					"[rsa][message][id1]" => "002074"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2157
	# line in RSA:  <fld30> <fld31> <event_source> Repairing this error requires other errors to be corrected first. 
	else if [logstash][msgparser][id] == "msgParserId2157" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Repairing this error requires other errors to be corrected first." }
			id => "msgParserId2157"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2158
	# line in RSA:  <fld30> <fld31> <event_source> replication filter 
	else if [logstash][msgparser][id] == "msgParserId2158" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} replication filter" }
			id => "msgParserId2158"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Replication" {
		# MESSAGE 002077
		# line in RSA:  <fld30> <fld31> <event_source> Replication agent schedule. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication agent schedule." }
				id => "message-002077"
				add_field => {
					"[event][id]" => "002077"
					"[rsa][message][id1]" => "002077"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002078
		# line in RSA:  <fld30> <fld31> <event_source> Replication agents checkup 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication agents checkup" }
				id => "message-002078"
				add_field => {
					"[event][id]" => "002078"
					"[rsa][message][id1]" => "002078"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002079
		# line in RSA:  <fld30> <fld31> <event_source> Replication components are not installed on this server. Run SQL Server Setup again and select the option to install replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication components are not installed on this server. Run SQL Server Setup again and select the option to install replication." }
				id => "message-002079"
				add_field => {
					"[event][id]" => "002079"
					"[rsa][message][id1]" => "002079"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002080
		# line in RSA:  <fld30> <fld31> <event_source> Replication custom procedures for article '<fld1>': 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication custom procedures for article '%{fld1}':" }
				id => "message-002080"
				add_field => {
					"[event][id]" => "002080"
					"[rsa][message][id1]" => "002080"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002081
		# line in RSA:  <fld30> <fld31> <event_source> Replication custom procedures will not be scripted because the specified publication '<fld1>' is a snapshot publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication custom procedures will not be scripted because the specified publication '%{fld1}' is a snapshot publication." }
				id => "message-002081"
				add_field => {
					"[event][id]" => "002081"
					"[rsa][message][id1]" => "002081"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002082
		# line in RSA:  <fld30> <fld31> <event_source> Replication custom procedures will not be scripted for article '<fld1>' because the auto-generate custom procedures schema option is not enabled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication custom procedures will not be scripted for article '%{fld1}' because the auto-generate custom procedures schema option is not enabled." }
				id => "message-002082"
				add_field => {
					"[event][id]" => "002082"
					"[rsa][message][id1]" => "002082"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002083
		# line in RSA:  <fld30> <fld31> <event_source> Replication database option '<fld1>' cannot be set unless the database is a publishing database or a distribution database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication database option '%{fld1}' cannot be set unless the database is a publishing database or a distribution database." }
				id => "message-002083"
				add_field => {
					"[event][id]" => "002083"
					"[rsa][message][id1]" => "002083"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002084
		# line in RSA:  <fld30> <fld31> <event_source> Replication database option 'sync with backup' cannot be set on the publishing database because the database is in Simple Recovery mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication database option 'sync with backup' cannot be set on the publishing database because the database is in Simple Recovery mode." }
				id => "message-002084"
				add_field => {
					"[event][id]" => "002084"
					"[rsa][message][id1]" => "002084"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002085
		# line in RSA:  <fld30> <fld31> <event_source> Replication Distribution Subsystem 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication Distribution Subsystem" }
				id => "message-002085"
				add_field => {
					"[event][id]" => "002085"
					"[rsa][message][id1]" => "002085"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002086
		# line in RSA:  <fld30> <fld31> <event_source> Replication failure. File '<fld1>', line <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication failure. File '%{fld1}', line %{fld2}." }
				id => "message-002086"
				add_field => {
					"[event][id]" => "002086"
					"[rsa][message][id1]" => "002086"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002087
		# line in RSA:  <fld30> <fld31> <event_source> Replication filter procedures can only contain SELECT, GOTO, IF, WHILE, RETURN, and DECLARE statements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication filter procedures can only contain SELECT, GOTO, IF, WHILE, RETURN, and DECLARE statements." }
				id => "message-002087"
				add_field => {
					"[event][id]" => "002087"
					"[rsa][message][id1]" => "002087"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002088
		# line in RSA:  <fld30> <fld31> <event_source> Replication filter procedures cannot have parameters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication filter procedures cannot have parameters." }
				id => "message-002088"
				add_field => {
					"[event][id]" => "002088"
					"[rsa][message][id1]" => "002088"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002089
		# line in RSA:  <fld30> <fld31> <event_source> Replication Merge Subsystem 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication Merge Subsystem" }
				id => "message-002089"
				add_field => {
					"[event][id]" => "002089"
					"[rsa][message][id1]" => "002089"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002090
		# line in RSA:  <fld30> <fld31> <event_source> Replication Snapshot Subsystem 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication Snapshot Subsystem" }
				id => "message-002090"
				add_field => {
					"[event][id]" => "002090"
					"[rsa][message][id1]" => "002090"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002091
		# line in RSA:  <fld30> <fld31> <event_source> Replication Transaction Queue Reader Subsystem 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication Transaction Queue Reader Subsystem" }
				id => "message-002091"
				add_field => {
					"[event][id]" => "002091"
					"[rsa][message][id1]" => "002091"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002092
		# line in RSA:  <fld30> <fld31> <event_source> Replication Transaction-Log Reader Subsystem 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication Transaction-Log Reader Subsystem" }
				id => "message-002092"
				add_field => {
					"[event][id]" => "002092"
					"[rsa][message][id1]" => "002092"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002093
		# line in RSA:  <fld30> <fld31> <event_source> Replication: agent custom shutdown 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication: agent custom shutdown" }
				id => "message-002093"
				add_field => {
					"[event][id]" => "002093"
					"[rsa][message][id1]" => "002093"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002094
		# line in RSA:  <fld30> <fld31> <event_source> Replication: agent failure 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication: agent failure" }
				id => "message-002094"
				add_field => {
					"[event][id]" => "002094"
					"[rsa][message][id1]" => "002094"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002095
		# line in RSA:  <fld30> <fld31> <event_source> Replication: agent retry 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication: agent retry" }
				id => "message-002095"
				add_field => {
					"[event][id]" => "002095"
					"[rsa][message][id1]" => "002095"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002096
		# line in RSA:  <fld30> <fld31> <event_source> Replication: agent success 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication: agent success" }
				id => "message-002096"
				add_field => {
					"[event][id]" => "002096"
					"[rsa][message][id1]" => "002096"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002097
		# line in RSA:  <fld30> <fld31> <event_source> Replication: expired subscription dropped 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication: expired subscription dropped" }
				id => "message-002097"
				add_field => {
					"[event][id]" => "002097"
					"[rsa][message][id1]" => "002097"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002098
		# line in RSA:  <fld30> <fld31> <event_source> Replication: Subscriber has failed data validation 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication: Subscriber has failed data validation" }
				id => "message-002098"
				add_field => {
					"[event][id]" => "002098"
					"[rsa][message][id1]" => "002098"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002099
		# line in RSA:  <fld30> <fld31> <event_source> Replication: Subscriber has passed data validation 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication: Subscriber has passed data validation" }
				id => "message-002099"
				add_field => {
					"[event][id]" => "002099"
					"[rsa][message][id1]" => "002099"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002100
		# line in RSA:  <fld30> <fld31> <event_source> Replication: Subscription reinitialized after validation failure 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Replication: Subscription reinitialized after validation failure" }
				id => "message-002100"
				add_field => {
					"[event][id]" => "002100"
					"[rsa][message][id1]" => "002100"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2183
	# line in RSA:  <fld30> <fld31> <event_source> Request for device '<fld1>' timed out. 
	else if [logstash][msgparser][id] == "msgParserId2183" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Request for device '%{fld1}' timed out." }
			id => "msgParserId2183"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2184
	# line in RSA:  <fld30> <fld31> <event_source> RestartPosition on the table was canceled during notification. 
	else if [logstash][msgparser][id] == "msgParserId2184" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} RestartPosition on the table was canceled during notification." }
			id => "msgParserId2184"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "RESTORE" {
		# MESSAGE 002103
		# line in RSA:  <fld30> <fld31> <event_source> RESTORE could not start database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} RESTORE could not start database '%{fld1}'." }
				id => "message-002103"
				add_field => {
					"[event][id]" => "002103"
					"[rsa][message][id1]" => "002103"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002104
		# line in RSA:  <fld30> <fld31> <event_source> RESTORE DATABASE could not drop database '<fld1>'. Drop the database and then reissue the RESTORE DATABASE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} RESTORE DATABASE could not drop database '%{fld1}'. Drop the database and then reissue the RESTORE DATABASE statement." }
				id => "message-002104"
				add_field => {
					"[event][id]" => "002104"
					"[rsa][message][id1]" => "002104"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002105
		# line in RSA:  <fld30> <fld31> <event_source> RESTORE DATABASE must be used in single user mode when trying to restore the master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} RESTORE DATABASE must be used in single user mode when trying to restore the master database." }
				id => "message-002105"
				add_field => {
					"[event][id]" => "002105"
					"[rsa][message][id1]" => "002105"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002106
		# line in RSA:  <fld30> <fld31> <event_source> RESTORE LOG has been halted. To use the database in its current state, run RESTORE DATABASE <fld1> WITH RECOVERY. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} RESTORE LOG has been halted. To use the database in its current state, run RESTORE DATABASE %{fld1} WITH RECOVERY." }
				id => "message-002106"
				add_field => {
					"[event][id]" => "002106"
					"[rsa][message][id1]" => "002106"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2189
	# line in RSA:  <fld30> <fld31> <event_source> Restricted publications are no longer supported. 
	else if [logstash][msgparser][id] == "msgParserId2189" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Restricted publications are no longer supported." }
			id => "msgParserId2189"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2190
	# line in RSA:  <fld30> <fld31> <event_source> Resuming after waiting on external debug process for <fld1> seconds.
	else if [logstash][msgparser][id] == "msgParserId2190" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Resuming after waiting on external debug process for %{fld1} seconds." }
			id => "msgParserId2190"
			add_field => {
				"result" => "Resuming after waiting on external debug process"
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2191
	# line in RSA:  <fld30> <fld31> <event_source> Resync procedure expects value of key '<fld1>', which was not supplied. 
	else if [logstash][msgparser][id] == "msgParserId2191" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Resync procedure expects value of key '%{fld1}', which was not supplied." }
			id => "msgParserId2191"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2192
	# line in RSA:  <fld30> <fld31> <event_source> RETURN statements in scalar valued functions must include an argument. 
	else if [logstash][msgparser][id] == "msgParserId2192" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} RETURN statements in scalar valued functions must include an argument." }
			id => "msgParserId2192"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2193
	# line in RSA:  <fld30> <fld31> <event_source> <fld1> Return Address <fld2>
	else if [logstash][msgparser][id] == "msgParserId2193" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} %{fld1} Return Address %{fld2}" }
			id => "msgParserId2193"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2194
	# line in RSA:  <fld30> <fld31> <event_source> Revoked login access from '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId2194" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Revoked login access from '%{fld1}'." }
			id => "msgParserId2194"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Role" {
		# MESSAGE 002111
		# line in RSA:  <fld30> <fld31> <event_source> Role change failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Role change failed." }
				id => "message-002111"
				add_field => {
					"[event][id]" => "002111"
					"[rsa][message][id1]" => "002111"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002112
		# line in RSA:  <fld30> <fld31> <event_source> Role change succeeded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Role change succeeded." }
				id => "message-002112"
				add_field => {
					"[event][id]" => "002112"
					"[rsa][message][id1]" => "002112"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002113
		# line in RSA:  <fld30> <fld31> <event_source> Role dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Role dropped." }
				id => "message-002113"
				add_field => {
					"[event][id]" => "002113"
					"[rsa][message][id1]" => "002113"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Row" {
		# MESSAGE 002114
		# line in RSA:  <fld30> <fld31> <event_source> Row compare failure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Row compare failure." }
				id => "message-002114"
				add_field => {
					"[event][id]" => "002114"
					"[rsa][message][id1]" => "002114"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002115
		# line in RSA:  <fld30> <fld31> <event_source> Row error: Object ID <fld1>, index ID <fld2>, page ID <fld3>, row ID <fld4>. Column '<fld5>' was created NOT NULL, but is NULL in the row. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Row error: Object ID %{fld1}, index ID %{fld2}, page ID %{fld3}, row ID %{fld4}. Column '%{fld5}' was created NOT NULL, but is NULL in the row." }
				id => "message-002115"
				add_field => {
					"[event][id]" => "002115"
					"[rsa][message][id1]" => "002115"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002116
		# line in RSA:  <fld30> <fld31> <event_source> Row filter(<fld1>) is invalid for column partition(<fld2>) for article '<fld3>' in publication '<fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Row filter(%{fld1}) is invalid for column partition(%{fld2}) for article '%{fld3}' in publication '%{fld4}'." }
				id => "message-002116"
				add_field => {
					"[event][id]" => "002116"
					"[rsa][message][id1]" => "002116"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Rowcount" {
		# MESSAGE 002117
		# line in RSA:  <fld30> <fld31> <event_source> Rowcount and checksum validation profile. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rowcount and checksum validation profile." }
				id => "message-002117"
				add_field => {
					"[event][id]" => "002117"
					"[rsa][message][id1]" => "002117"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002118
		# line in RSA:  <fld30> <fld31> <event_source> Rowcount validation profile. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rowcount validation profile." }
				id => "message-002118"
				add_field => {
					"[event][id]" => "002118"
					"[rsa][message][id1]" => "002118"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2203
	# line in RSA:  <fld30> <fld31> <event_source> ROWS count: Changed from ( <fld1>) to ( <fld2>) rows. 
	else if [logstash][msgparser][id] == "msgParserId2203" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} ROWS count: Changed from ( %{fld1}) to ( %{fld2}) rows." }
			id => "msgParserId2203"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Rows" {
		# MESSAGE 002120
		# line in RSA:  <fld30> <fld31> <event_source> Rows from OLE DB provider '<fld1>' cannot be released. <fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rows from OLE DB provider '%{fld1}' cannot be released. %{fld2}" }
				id => "message-002120"
				add_field => {
					"[event][id]" => "002120"
					"[rsa][message][id1]" => "002120"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002121
		# line in RSA:  <fld30> <fld31> <event_source> Rows inserted or updated at the Subscriber cannot be outside the article partition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rows inserted or updated at the Subscriber cannot be outside the article partition." }
				id => "message-002121"
				add_field => {
					"[event][id]" => "002121"
					"[rsa][message][id1]" => "002121"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2206
	# line in RSA:  <fld30> <fld31> <event_source> RPC Net-Library listening on: <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId2206" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} RPC Net-Library listening on: %{fld1}." }
			id => "msgParserId2206"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2207
	# line in RSA:  <fld30> <fld31> <event_source> RSVD pages: Changed from (<fld1>) to (<fld2>) pages. 
	else if [logstash][msgparser][id] == "msgParserId2207" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} RSVD pages: Changed from (%{fld1}) to (%{fld2}) pages." }
			id => "msgParserId2207"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Rule" {
		# MESSAGE 002124
		# line in RSA:  <fld30> <fld31> <event_source> Rule bound to data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rule bound to data type." }
				id => "message-002124"
				add_field => {
					"[event][id]" => "002124"
					"[rsa][message][id1]" => "002124"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002125
		# line in RSA:  <fld30> <fld31> <event_source> Rule bound to table column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rule bound to table column." }
				id => "message-002125"
				add_field => {
					"[event][id]" => "002125"
					"[rsa][message][id1]" => "002125"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002126
		# line in RSA:  <fld30> <fld31> <event_source> Rule contains more than one variable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rule contains more than one variable." }
				id => "message-002126"
				add_field => {
					"[event][id]" => "002126"
					"[rsa][message][id1]" => "002126"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002127
		# line in RSA:  <fld30> <fld31> <event_source> Rule does not contain a variable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rule does not contain a variable." }
				id => "message-002127"
				add_field => {
					"[event][id]" => "002127"
					"[rsa][message][id1]" => "002127"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002128
		# line in RSA:  <fld30> <fld31> <event_source> Rule unbound from data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rule unbound from data type." }
				id => "message-002128"
				add_field => {
					"[event][id]" => "002128"
					"[rsa][message][id1]" => "002128"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002129
		# line in RSA:  <fld30> <fld31> <event_source> Rule unbound from table column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rule unbound from table column." }
				id => "message-002129"
				add_field => {
					"[event][id]" => "002129"
					"[rsa][message][id1]" => "002129"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002130
		# line in RSA:  <fld30> <fld31> <event_source> Rule, table, and user data type must be in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rule, table, and user data type must be in the current database." }
				id => "message-002130"
				add_field => {
					"[event][id]" => "002130"
					"[rsa][message][id1]" => "002130"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2215
	# line in RSA:  <fld30> <fld31> <event_source> Rules cannot be bound to text, ntext, or image data types. 
	else if [logstash][msgparser][id] == "msgParserId2215" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Rules cannot be bound to text, ntext, or image data types." }
			id => "msgParserId2215"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Run" {
		# MESSAGE 002132
		# line in RSA:  <fld30> <fld31> <event_source> Run agent. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Run agent." }
				id => "message-002132"
				add_field => {
					"[event][id]" => "002132"
					"[rsa][message][id1]" => "002132"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002133
		# line in RSA:  <fld30> <fld31> <event_source> Run sp_configure to increase the parameter value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Run sp_configure to increase the parameter value." }
				id => "message-002133"
				add_field => {
					"[event][id]" => "002133"
					"[rsa][message][id1]" => "002133"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2218
	# line in RSA:  <fld30> <fld31> <event_source> Scan on sysindexes for database ID <fld1>, object ID <fld2>, returned a duplicate index ID <fld3>. Run DBCC CHECKTABLE on sysindexes. 
	else if [logstash][msgparser][id] == "msgParserId2218" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Scan on sysindexes for database ID %{fld1}, object ID %{fld2}, returned a duplicate index ID %{fld3}. Run DBCC CHECKTABLE on sysindexes." }
			id => "msgParserId2218"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Schema" {
		# MESSAGE 002135
		# line in RSA:  <fld30> <fld31> <event_source> Schema change failed on publication '<fld1>'. Possibly due to active snapshot or other schema change activity. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Schema change failed on publication '%{fld1}'. Possibly due to active snapshot or other schema change activity." }
				id => "message-002135"
				add_field => {
					"[event][id]" => "002135"
					"[rsa][message][id1]" => "002135"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002136
		# line in RSA:  <fld30> <fld31> <event_source> Schema replication failed because database '<fld1>' on server '<fld2>' is not the original Publisher of table '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Schema replication failed because database '%{fld1}' on server '%{fld2}' is not the original Publisher of table '%{fld3}'." }
				id => "message-002136"
				add_field => {
					"[event][id]" => "002136"
					"[rsa][message][id1]" => "002136"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002137
		# line in RSA:  <fld30> <fld31> <event_source> Schema replication failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Schema replication failed." }
				id => "message-002137"
				add_field => {
					"[event][id]" => "002137"
					"[rsa][message][id1]" => "002137"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2222
	# line in RSA:  <fld30> <fld31> <event_source> Search on full-text catalog '<fld1>' for database ID <fld2>, table ID <fld3> with search condition '<fld4>' failed with unknown result (<fld5>). 
	else if [logstash][msgparser][id] == "msgParserId2222" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Search on full-text catalog '%{fld1}' for database ID %{fld2}, table ID %{fld3} with search condition '%{fld4}' failed with unknown result (%{fld5})." }
			id => "msgParserId2222"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2223
	# line in RSA:  <fld30> <fld31> <event_source> Secondary index entries were missing or did not match the data in the table.  Use the WITH TABLOCK option and run the command again to display the failing records. 
	else if [logstash][msgparser][id] == "msgParserId2223" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Secondary index entries were missing or did not match the data in the table.  Use the WITH TABLOCK option and run the command again to display the failing records." }
			id => "msgParserId2223"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2224
	# line in RSA:  <fld30> <fld31> <event_source> SELECT INTO must be the first query in an SQL statement containing a UNION operator. 
	else if [logstash][msgparser][id] == "msgParserId2224" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} SELECT INTO must be the first query in an SQL statement containing a UNION operator." }
			id => "msgParserId2224"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2225
	# line in RSA:  <fld30> <fld31> <event_source> Select statements included within a function cannot return data to a client. 
	else if [logstash][msgparser][id] == "msgParserId2225" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Select statements included within a function cannot return data to a client." }
			id => "msgParserId2225"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Server" {
		# MESSAGE 002142
		# line in RSA:  <fld30> <fld31> <event_source> Server '<fld1>' is not configured for <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server '%{fld1}' is not configured for %{fld2}." }
				id => "message-002142"
				add_field => {
					"[event][id]" => "002142"
					"[rsa][message][id1]" => "002142"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002143
		# line in RSA:  <fld30> <fld31> <event_source> Server '<fld1>' is an MSX. Cannot enlist one MSX into another MSX. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server '%{fld1}' is an MSX. Cannot enlist one MSX into another MSX." }
				id => "message-002143"
				add_field => {
					"[event][id]" => "002143"
					"[rsa][message][id1]" => "002143"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002144
		# line in RSA:  <fld30> <fld31> <event_source> Server defected from MSX '<fld1>'. <fld2> job(s) deleted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server defected from MSX '%{fld1}'. %{fld2} job(s) deleted." }
				id => "message-002144"
				add_field => {
					"[event][id]" => "002144"
					"[rsa][message][id1]" => "002144"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002145
		# line in RSA:  <fld30> <fld31> <event_source> Server encountered an error '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server encountered an error '%{fld1}'." }
				id => "message-002145"
				add_field => {
					"[event][id]" => "002145"
					"[rsa][message][id1]" => "002145"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002146
		# line in RSA:  <fld30> <fld31> <event_source> Server enlisted into MSX '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server enlisted into MSX '%{fld1}'." }
				id => "message-002146"
				add_field => {
					"[event][id]" => "002146"
					"[rsa][message][id1]" => "002146"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002147
		# line in RSA:  <fld30> <fld31> <event_source> Server MSX enlistment changed from '<fld1>' to '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server MSX enlistment changed from '%{fld1}' to '%{fld2}'." }
				id => "message-002147"
				add_field => {
					"[event][id]" => "002147"
					"[rsa][message][id1]" => "002147"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002148
		# line in RSA:  <fld30> <fld31> <event_source> Server Process ID is <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server Process ID is %{fld1}." }
				id => "message-002148"
				add_field => {
					"[event][id]" => "002148"
					"[rsa][message][id1]" => "002148"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002149
		# line in RSA:  <fld30> <fld31> <event_source> Server setting 'Allow triggers to be fired which fire other triggers (nested triggers)' must exist on updatable Subscribers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server setting 'Allow triggers to be fired which fire other triggers (nested triggers)' must exist on updatable Subscribers." }
				id => "message-002149"
				add_field => {
					"[event][id]" => "002149"
					"[rsa][message][id1]" => "002149"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002150
		# line in RSA:  <fld30> <fld31> <event_source> Server shut down by request. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server shut down by request." }
				id => "message-002150"
				add_field => {
					"[event][id]" => "002150"
					"[rsa][message][id1]" => "002150"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002151
		# line in RSA:  <fld30> <fld31> <event_source> Server started with '-f'. Auditing will not be started. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server started with '-f'. Auditing will not be started." }
				id => "message-002151"
				add_field => {
					"[event][id]" => "002151"
					"[rsa][message][id1]" => "002151"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002152
		# line in RSA:  <fld30> <fld31> <event_source> Server user '<username>' is not a valid user in database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server user '%{username}' is not a valid user in database '%{fld1}'." }
				id => "message-002152"
				add_field => {
					"[event][id]" => "002152"
					"[rsa][message][id1]" => "002152"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002155
		# line in RSA:  <fld30> <fld31> <event_source> Server name is '<username>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server name is '%{username}'." }
				id => "message-002155"
				add_field => {
					"[event][id]" => "002155"
					"[rsa][message][id1]" => "002155"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Server:02
		# line in RSA:  <fld30> <fld31> <event_source> Server is listening on [ <saddr> <fld2> <sport>].
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server is listening on [ %{saddr} %{fld2} %{sport}]." }
				id => "message-Server:02"
				add_field => {
					"[event][id]" => "Server:02"
					"[rsa][message][id1]" => "Server:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Server:03
		# line in RSA:  <fld30> <fld31> <event_source> Server <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Server %{fld1}" }
				id => "message-Server:03"
				add_field => {
					"[event][id]" => "Server:03"
					"[rsa][message][id1]" => "Server:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Service" {
		# MESSAGE 002156
		# line in RSA:  <fld30> <fld31> <event_source> Service Control Handler received an invalid control code = <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Service Control Handler received an invalid control code = %{fld1}." }
				id => "message-002156"
				add_field => {
					"[event][id]" => "002156"
					"[rsa][message][id1]" => "002156"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Service:02
		# line in RSA:  <fld30> <fld31> <event_source> Service <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Service %{fld1}" }
				id => "message-Service:02"
				add_field => {
					"[event][id]" => "Service:02"
					"[rsa][message][id1]" => "Service:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Session" {
		# MESSAGE 002157
		# line in RSA:  <fld30> <fld31> <event_source> Session binding token is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Session binding token is invalid." }
				id => "message-002157"
				add_field => {
					"[event][id]" => "002157"
					"[rsa][message][id1]" => "002157"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002158
		# line in RSA:  <fld30> <fld31> <event_source> Session is bound to a transaction context that is in use. Other statements in the batch were ignored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Session is bound to a transaction context that is in use. Other statements in the batch were ignored." }
				id => "message-002158"
				add_field => {
					"[event][id]" => "002158"
					"[rsa][message][id1]" => "002158"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SET" {
		# MESSAGE 002159
		# line in RSA:  <fld30> <fld31> <event_source> SET DATEFIRST <fld1> is out of range. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SET DATEFIRST %{fld1} is out of range." }
				id => "message-002159"
				add_field => {
					"[event][id]" => "002159"
					"[rsa][message][id1]" => "002159"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002160
		# line in RSA:  <fld30> <fld31> <event_source> SET DATEFORMAT date order '<fld1>' is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SET DATEFORMAT date order '%{fld1}' is invalid." }
				id => "message-002160"
				add_field => {
					"[event][id]" => "002160"
					"[rsa][message][id1]" => "002160"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002161
		# line in RSA:  <fld30> <fld31> <event_source> SET DEADLOCK_PRIORITY option '<fld1>' is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SET DEADLOCK_PRIORITY option '%{fld1}' is invalid." }
				id => "message-002161"
				add_field => {
					"[event][id]" => "002161"
					"[rsa][message][id1]" => "002161"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002162
		# line in RSA:  <fld30> <fld31> <event_source> SET LANGUAGE failed because '<fld1>' is not an official language name or a language alias on this SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SET LANGUAGE failed because '%{fld1}' is not an official language name or a language alias on this SQL Server." }
				id => "message-002162"
				add_field => {
					"[event][id]" => "002162"
					"[rsa][message][id1]" => "002162"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002163
		# line in RSA:  <fld30> <fld31> <event_source> SET statement 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SET statement" }
				id => "message-002163"
				add_field => {
					"[event][id]" => "002163"
					"[rsa][message][id1]" => "002163"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2246
	# line in RSA:  <fld30> <fld31> <event_source> Settable remote login options. 
	else if [logstash][msgparser][id] == "msgParserId2246" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Settable remote login options." }
			id => "msgParserId2246"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Setting" {
		# MESSAGE 002165
		# line in RSA:  <fld30> <fld31> <event_source> Setting database owner to SA. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Setting database owner to SA." }
				id => "message-002165"
				add_field => {
					"[event][id]" => "002165"
					"[rsa][message][id1]" => "002165"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002165:01
		# line in RSA:  <fld30> <fld31> <event_source> Setting database option <fld22> to <fld23> for database <db_name>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Setting database option %{fld22} to %{fld23} for database %{db_name}." }
				id => "message-002165:01"
				add_field => {
				"event_description" => "Setting database option"
					"[event][id]" => "002165:01"
					"[rsa][message][id1]" => "002165:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SHUTDOWN" {
		# MESSAGE 002166
		# line in RSA:  <fld30> <fld31> <event_source> SHUTDOWN is in progress. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SHUTDOWN is in progress." }
				id => "message-002166"
				add_field => {
					"[event][id]" => "002166"
					"[rsa][message][id1]" => "002166"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002168
		# line in RSA:  <fld30> <fld31> <event_source> SHUTDOWN is waiting for <fld1> process(es) to complete. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SHUTDOWN is waiting for %{fld1} process(es) to complete." }
				id => "message-002168"
				add_field => {
					"[event][id]" => "002168"
					"[rsa][message][id1]" => "002168"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Single" {
		# MESSAGE 002169
		# line in RSA:  <fld30> <fld31> <event_source> Single page allocation <fld1> for object ID <fld2>, index ID <fld3> is in filegroup <fld4>; it should be in filegroup <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Single page allocation %{fld1} for object ID %{fld2}, index ID %{fld3} is in filegroup %{fld4}; it should be in filegroup %{fld5}." }
				id => "message-002169"
				add_field => {
					"[event][id]" => "002169"
					"[rsa][message][id1]" => "002169"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002170
		# line in RSA:  <fld30> <fld31> <event_source> Single page allocation <fld1> in table <fld2>, object ID <fld3>, index ID <fld4> is not allocated in PFS page ID <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Single page allocation %{fld1} in table %{fld2}, object ID %{fld3}, index ID %{fld4} is not allocated in PFS page ID %{fld5}." }
				id => "message-002170"
				add_field => {
					"[event][id]" => "002170"
					"[rsa][message][id1]" => "002170"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Skipping" {
		# MESSAGE 002171
		# line in RSA:  <fld30> <fld31> <event_source> Skipping error signaled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Skipping error signaled." }
				id => "message-002171"
				add_field => {
					"[event][id]" => "002171"
					"[rsa][message][id1]" => "002171"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002172
		# line in RSA:  <fld30> <fld31> <event_source> Skipping FOREIGN KEY constraint '<fld1>' definition for temporary table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Skipping FOREIGN KEY constraint '%{fld1}' definition for temporary table." }
				id => "message-002172"
				add_field => {
					"[event][id]" => "002172"
					"[rsa][message][id1]" => "002172"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002173
		# line in RSA:  <fld30> <fld31> <event_source> Skipping rebuild of index ID <fld1>, which is on a read-only filegroup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Skipping rebuild of index ID %{fld1}, which is on a read-only filegroup." }
				id => "message-002173"
				add_field => {
					"[event][id]" => "002173"
					"[rsa][message][id1]" => "002173"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002174
		# line in RSA:  <fld30> <fld31> <event_source> Skipping startup of clean database id <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Skipping startup of clean database id %{fld1}" }
				id => "message-002174"
				add_field => {
					"[event][id]" => "002174"
					"[rsa][message][id1]" => "002174"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2257
	# line in RSA:  <fld30> <fld31> <event_source> Sleeping until external dump process completes.
	else if [logstash][msgparser][id] == "msgParserId2257" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Sleeping until external dump process completes." }
			id => "msgParserId2257"
			add_field => {
				"result" => "Sleeping until external dump process completes"
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2258
	# line in RSA:  <fld30> <fld31> <event_source> Slow link agent profile. 
	else if [logstash][msgparser][id] == "msgParserId2258" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Slow link agent profile." }
			id => "msgParserId2258"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Snapshot" {
		# MESSAGE 002176
		# line in RSA:  <fld30> <fld31> <event_source> Snapshot Agent startup message. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Snapshot Agent startup message." }
				id => "message-002176"
				add_field => {
					"[event][id]" => "002176"
					"[rsa][message][id1]" => "002176"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002177
		# line in RSA:  <fld30> <fld31> <event_source> Snapshot failed to process publication '<fld1>'. Possibly due to active schema change activity. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Snapshot failed to process publication '%{fld1}'. Possibly due to active schema change activity." }
				id => "message-002177"
				add_field => {
					"[event][id]" => "002177"
					"[rsa][message][id1]" => "002177"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2261
	# line in RSA:  <fld30> <fld31> <event_source> Some part of your SQL statement is nested too deeply. Rewrite the query or break it up into smaller queries. 
	else if [logstash][msgparser][id] == "msgParserId2261" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Some part of your SQL statement is nested too deeply. Rewrite the query or break it up into smaller queries." }
			id => "msgParserId2261"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Sort" {
		# MESSAGE 002179
		# line in RSA:  <fld30> <fld31> <event_source> Sort cannot be reconciled with transaction log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Sort cannot be reconciled with transaction log." }
				id => "message-002179"
				add_field => {
					"[event][id]" => "002179"
					"[rsa][message][id1]" => "002179"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002180
		# line in RSA:  <fld30> <fld31> <event_source> Sort failed. Out of space or locks in database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Sort failed. Out of space or locks in database '%{fld1}'." }
				id => "message-002180"
				add_field => {
					"[event][id]" => "002180"
					"[rsa][message][id1]" => "002180"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002181
		# line in RSA:  <fld30> <fld31> <event_source> Sort failure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Sort failure." }
				id => "message-002181"
				add_field => {
					"[event][id]" => "002181"
					"[rsa][message][id1]" => "002181"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002184
		# line in RSA:  <fld30> <fld31> <event_source> Sort order ID <fld1> is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Sort order ID %{fld1} is invalid." }
				id => "message-002184"
				add_field => {
					"[event][id]" => "002184"
					"[rsa][message][id1]" => "002184"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002185
		# line in RSA:  <fld30> <fld31> <event_source> Sort order or locale cannot be changed because user objects or user databases exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Sort order or locale cannot be changed because user objects or user databases exist." }
				id => "message-002185"
				add_field => {
					"[event][id]" => "002185"
					"[rsa][message][id1]" => "002185"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2267
	# line in RSA:  <fld30> <fld31> <event_source> Source table '<fld1>' not found in '<fld2>'. 
	else if [logstash][msgparser][id] == "msgParserId2267" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Source table '%{fld1}' not found in '%{fld2}'." }
			id => "msgParserId2267"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2268
	# line in RSA:  <fld30> <fld31> <event_source> sp_checknames is used to search for non 7-bit ASCII characters. 
	else if [logstash][msgparser][id] == "msgParserId2268" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_checknames is used to search for non 7-bit ASCII characters." }
			id => "msgParserId2268"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "sp_cursor" {
		# MESSAGE 002188
		# line in RSA:  <fld30> <fld31> <event_source> sp_cursor: One or more values parameters were invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_cursor: One or more values parameters were invalid." }
				id => "message-002188"
				add_field => {
					"[event][id]" => "002188"
					"[rsa][message][id1]" => "002188"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002189
		# line in RSA:  <fld30> <fld31> <event_source> sp_cursor: optype: You can only specify ABSOLUTE in conjunction with DELETE or UPDATE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_cursor: optype: You can only specify ABSOLUTE in conjunction with DELETE or UPDATE." }
				id => "message-002189"
				add_field => {
					"[event][id]" => "002189"
					"[rsa][message][id1]" => "002189"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2271
	# line in RSA:  <fld30> <fld31> <event_source> sp_cursoropen/sp_cursorprepare: The statement parameter can only be a single select or a single stored procedure. 
	else if [logstash][msgparser][id] == "msgParserId2271" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_cursoropen/sp_cursorprepare: The statement parameter can only be a single select or a single stored procedure." }
			id => "msgParserId2271"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2272
	# line in RSA:  <fld30> <fld31> <event_source> sp_cursoroption: The column ID (<fld1>) does not correspond to a text, ntext, or image column. 
	else if [logstash][msgparser][id] == "msgParserId2272" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_cursoroption: The column ID (%{fld1}) does not correspond to a text, ntext, or image column." }
			id => "msgParserId2272"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2273
	# line in RSA:  <fld30> <fld31> <event_source> sp_dboption command failed. 
	else if [logstash][msgparser][id] == "msgParserId2273" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_dboption command failed." }
			id => "msgParserId2273"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "sp_dropwebtask" {
		# MESSAGE 002193
		# line in RSA:  <fld30> <fld31> <event_source> sp_dropwebtask cannot find the specified task. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_dropwebtask cannot find the specified task." }
				id => "message-002193"
				add_field => {
					"[event][id]" => "002193"
					"[rsa][message][id1]" => "002193"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002194
		# line in RSA:  <fld30> <fld31> <event_source> sp_dropwebtask requires at least one defined parameter @outputfile or @procname. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_dropwebtask requires at least one defined parameter @outputfile or @procname." }
				id => "message-002194"
				add_field => {
					"[event][id]" => "002194"
					"[rsa][message][id1]" => "002194"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2276
	# line in RSA:  <fld30> <fld31> <event_source> sp_fulltext_table 'start_full' must be executed on table '<fld1>'. Columns affecting the index have been added or dropped since the last index full population. 
	else if [logstash][msgparser][id] == "msgParserId2276" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_fulltext_table 'start_full' must be executed on table '%{fld1}'. Columns affecting the index have been added or dropped since the last index full population." }
			id => "msgParserId2276"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2277
	# line in RSA:  <fld30> <fld31> <event_source> sp_helplogins [excluding Windows NT groups] 
	else if [logstash][msgparser][id] == "msgParserId2277" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_helplogins [excluding Windows NT groups]" }
			id => "msgParserId2277"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2278
	# line in RSA:  <fld30> <fld31> <event_source> sp_mergecompletecleanup cannot be executed before sp_mergepreparecleanup is executed. Use sp_mergepreparecleanup to initiate the first phase of merge meta data cleanup. 
	else if [logstash][msgparser][id] == "msgParserId2278" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_mergecompletecleanup cannot be executed before sp_mergepreparecleanup is executed. Use sp_mergepreparecleanup to initiate the first phase of merge meta data cleanup." }
			id => "msgParserId2278"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2279
	# line in RSA:  <fld30> <fld31> <event_source> sp_mergesubscription_cleanup is used to clean up push subscriptions. Use sp_dropmergepullsubscription to clean up pull or anonymous subscriptions. 
	else if [logstash][msgparser][id] == "msgParserId2279" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_mergesubscription_cleanup is used to clean up push subscriptions. Use sp_dropmergepullsubscription to clean up pull or anonymous subscriptions." }
			id => "msgParserId2279"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "sp_MSmark_proc_norepl" {
		# MESSAGE 002199
		# line in RSA:  <fld30> <fld31> <event_source> sp_MSmark_proc_norepl: invalid object name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_MSmark_proc_norepl: invalid object name '%{fld1}'." }
				id => "message-002199"
				add_field => {
					"[event][id]" => "002199"
					"[rsa][message][id1]" => "002199"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002200
		# line in RSA:  <fld30> <fld31> <event_source> sp_MSmark_proc_norepl: must be a member of the db_owner or sysadmin roles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_MSmark_proc_norepl: must be a member of the db_owner or sysadmin roles." }
				id => "message-002200"
				add_field => {
					"[event][id]" => "002200"
					"[rsa][message][id1]" => "002200"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SP_POST_MSX_OPERATION" {
		# MESSAGE 002201
		# line in RSA:  <fld30> <fld31> <event_source> SP_POST_MSX_OPERATION Warning: The specified <fld1> ('<fld2>') is not involved in a multiserver job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SP_POST_MSX_OPERATION Warning: The specified %{fld1} ('%{fld2}') is not involved in a multiserver job." }
				id => "message-002201"
				add_field => {
					"[event][id]" => "002201"
					"[rsa][message][id1]" => "002201"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002202
		# line in RSA:  <fld30> <fld31> <event_source> SP_POST_MSX_OPERATION: <fld1> <fld2> download instruction(s) posted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SP_POST_MSX_OPERATION: %{fld1} %{fld2} download instruction(s) posted." }
				id => "message-002202"
				add_field => {
					"[event][id]" => "002202"
					"[rsa][message][id1]" => "002202"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2284
	# line in RSA:  <fld30> <fld31> <event_source> sp_runwebtask requires at least one defined parameter @outputfile or @procname. 
	else if [logstash][msgparser][id] == "msgParserId2284" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_runwebtask requires at least one defined parameter @outputfile or @procname." }
			id => "msgParserId2284"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2285
	# line in RSA:  <fld30> <fld31> <event_source> sp_setapprole was not invoked correctly. Refer to the documentation for more information. 
	else if [logstash][msgparser][id] == "msgParserId2285" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} sp_setapprole was not invoked correctly. Refer to the documentation for more information." }
			id => "msgParserId2285"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Specified" {
		# MESSAGE 002205
		# line in RSA:  <fld30> <fld31> <event_source> Specified owner name '<fld1>' either does not exist or you do not have permission to use it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specified owner name '%{fld1}' either does not exist or you do not have permission to use it." }
				id => "message-002205"
				add_field => {
					"[event][id]" => "002205"
					"[rsa][message][id1]" => "002205"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002206
		# line in RSA:  <fld30> <fld31> <event_source> Specified value '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specified value '%{fld1}' already exists." }
				id => "message-002206"
				add_field => {
					"[event][id]" => "002206"
					"[rsa][message][id1]" => "002206"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Specify" {
		# MESSAGE 002207
		# line in RSA:  <fld30> <fld31> <event_source> Specify a null <fld1> when supplying a performance condition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specify a null %{fld1} when supplying a performance condition." }
				id => "message-002207"
				add_field => {
					"[event][id]" => "002207"
					"[rsa][message][id1]" => "002207"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002208
		# line in RSA:  <fld30> <fld31> <event_source> Specify a valid job_id (or 0x00 for all jobs). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specify a valid job_id (or 0x00 for all jobs)." }
				id => "message-002208"
				add_field => {
					"[event][id]" => "002208"
					"[rsa][message][id1]" => "002208"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002209
		# line in RSA:  <fld30> <fld31> <event_source> Specify all articles when subscribing to a publication using concurrent snapshot processing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specify all articles when subscribing to a publication using concurrent snapshot processing." }
				id => "message-002209"
				add_field => {
					"[event][id]" => "002209"
					"[rsa][message][id1]" => "002209"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002210
		# line in RSA:  <fld30> <fld31> <event_source> Specify all articles when unsubscribing from a publication using concurrent snapshot processing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specify all articles when unsubscribing from a publication using concurrent snapshot processing." }
				id => "message-002210"
				add_field => {
					"[event][id]" => "002210"
					"[rsa][message][id1]" => "002210"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002211
		# line in RSA:  <fld30> <fld31> <event_source> Specify either @taskname or @oldloginname when reassigning a task. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specify either @taskname or @oldloginname when reassigning a task." }
				id => "message-002211"
				add_field => {
					"[event][id]" => "002211"
					"[rsa][message][id1]" => "002211"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002212
		# line in RSA:  <fld30> <fld31> <event_source> Specify either a job_name, job_id, or an originating_server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specify either a job_name, job_id, or an originating_server." }
				id => "message-002212"
				add_field => {
					"[event][id]" => "002212"
					"[rsa][message][id1]" => "002212"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002213
		# line in RSA:  <fld30> <fld31> <event_source> Specify either the @currentname or @id of the task to be updated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specify either the @currentname or @id of the task to be updated." }
				id => "message-002213"
				add_field => {
					"[event][id]" => "002213"
					"[rsa][message][id1]" => "002213"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002214
		# line in RSA:  <fld30> <fld31> <event_source> Specify either the @name, @id, or @loginname of the task(s) to be deleted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Specify either the @name, @id, or @loginname of the task(s) to be deleted." }
				id => "message-002214"
				add_field => {
					"[event][id]" => "002214"
					"[rsa][message][id1]" => "002214"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SPID" {
		# MESSAGE 002215
		# line in RSA:  <fld30> <fld31> <event_source> SPID <fld1>: transaction rollback in progress. Estimated rollback completion: <fld2>. Estimated time remaining: <fld3> seconds. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SPID %{fld1}: transaction rollback in progress. Estimated rollback completion: %{fld2}. Estimated time remaining: %{fld3} seconds." }
				id => "message-002215"
				add_field => {
					"[event][id]" => "002215"
					"[rsa][message][id1]" => "002215"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002216
		# line in RSA:  <fld30> <fld31> <event_source> SPID (server process ID) : <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SPID (server process ID) : %{fld1}" }
				id => "message-002216"
				add_field => {
					"[event][id]" => "002216"
					"[rsa][message][id1]" => "002216"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SQL" {
		# MESSAGE 002217
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server Assertion: File: <fld1>, line<space>=<fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server Assertion: File: %{fld1}, line%{space}=%{fld2}." }
				id => "message-002217"
				add_field => {
					"[event][id]" => "002217"
					"[rsa][message][id1]" => "002217"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002220
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server cannot use the virtual device configuration. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server cannot use the virtual device configuration." }
				id => "message-002220"
				add_field => {
					"[event][id]" => "002220"
					"[rsa][message][id1]" => "002220"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002221
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server configured for <fld1> mode processing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server configured for %{fld1} mode processing." }
				id => "message-002221"
				add_field => {
					"[event][id]" => "002221"
					"[rsa][message][id1]" => "002221"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002222
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server could not spawn <fld1> thread. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server could not spawn %{fld1} thread." }
				id => "message-002222"
				add_field => {
					"[event][id]" => "002222"
					"[rsa][message][id1]" => "002222"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002223
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server has been paused. No new connections will be allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server has been paused. No new connections will be allowed." }
				id => "message-002223"
				add_field => {
					"[event][id]" => "002223"
					"[rsa][message][id1]" => "002223"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002224
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server Internal Error. Text manager cannot continue with current statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server Internal Error. Text manager cannot continue with current statement." }
				id => "message-002224"
				add_field => {
					"[event][id]" => "002224"
					"[rsa][message][id1]" => "002224"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002225
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server is aborting. Fatal exception <fld1> caught. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server is aborting. Fatal exception %{fld1} caught." }
				id => "message-002225"
				add_field => {
					"[event][id]" => "002225"
					"[rsa][message][id1]" => "002225"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002226
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server is allowing new connections due to 'continue' request from Service Control Manager. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server is allowing new connections due to 'continue' request from Service Control Manager." }
				id => "message-002226"
				add_field => {
					"[event][id]" => "002226"
					"[rsa][message][id1]" => "002226"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002227
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server is disallowing new connections due to 'pause' request from Service Control Manager. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server is disallowing new connections due to 'pause' request from Service Control Manager." }
				id => "message-002227"
				add_field => {
					"[event][id]" => "002227"
					"[rsa][message][id1]" => "002227"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002228
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server is ready for client connections 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server is ready for client connections" }
				id => "message-002228"
				add_field => {
					"[event][id]" => "002228"
					"[rsa][message][id1]" => "002228"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002229
		# line in RSA:  <fld30> <fld31> <event_source> <space> SQL Server is starting at priority class '<fld1>'(<fld2> { CPUs | CPU } detected). 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+(?<space>[^\s]*)[\s]+SQL[\s]+Server[\s]+is[\s]+starting[\s]+at[\s]+priority[\s]+class[\s]+'(?<fld1>[^']*)'\((?<fld2>[^\s]*)[\s]+([\s]*CPUs[\s]+|[\s]*CPU[\s]+)[\s]+detected\)\.[\s]+$" }
				id => "message-002229"
				add_field => {
					"[event][id]" => "002229"
					"[rsa][message][id1]" => "002229"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002230
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server is terminating due to 'stop' request from Service Control Manager. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server is terminating due to 'stop' request from Service Control Manager." }
				id => "message-002230"
				add_field => {
					"[event][id]" => "002230"
					"[rsa][message][id1]" => "002230"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002231
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server is terminating this process. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server is terminating this process." }
				id => "message-002231"
				add_field => {
					"[event][id]" => "002231"
					"[rsa][message][id1]" => "002231"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002232
		# line in RSA:  <fld30> <fld31> <event_source> SQL server listening on <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL server listening on %{fld1}." }
				id => "message-002232"
				add_field => {
					"[event][id]" => "002232"
					"[rsa][message][id1]" => "002232"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002233
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server no longer supports version <fld1> of the SQL Debugging Interface (SDI). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server no longer supports version %{fld1} of the SQL Debugging Interface (SDI)." }
				id => "message-002233"
				add_field => {
					"[event][id]" => "002233"
					"[rsa][message][id1]" => "002233"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002234
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server parse and compile time: <fld1>   CPU time =  <fld2> ms, elapsed time =  <fld3> ms. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server parse and compile time: %{fld1}   CPU time =  %{fld2} ms, elapsed time =  %{fld3} ms." }
				id => "message-002234"
				add_field => {
					"[event][id]" => "002234"
					"[rsa][message][id1]" => "002234"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002235
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server shut down because configured codepage <fld1> is not supported by the 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server shut down because configured codepage %{fld1} is not supported by the" }
				id => "message-002235"
				add_field => {
					"[event][id]" => "002235"
					"[rsa][message][id1]" => "002235"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002236
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server shutdown after verifying system indexes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server shutdown after verifying system indexes." }
				id => "message-002236"
				add_field => {
					"[event][id]" => "002236"
					"[rsa][message][id1]" => "002236"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002237
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server shutdown due to Ctrl-C or Ctrl-Break signal. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server shutdown due to Ctrl-C or Ctrl-Break signal." }
				id => "message-002237"
				add_field => {
					"[event][id]" => "002237"
					"[rsa][message][id1]" => "002237"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002238
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server started in single user mode. Updates allowed to system catalogs. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server started in single user mode. Updates allowed to system catalogs." }
				id => "message-002238"
				add_field => {
					"[event][id]" => "002238"
					"[rsa][message][id1]" => "002238"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002239
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server terminating because of system shutdown. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server terminating because of system shutdown." }
				id => "message-002239"
				add_field => {
					"[event][id]" => "002239"
					"[rsa][message][id1]" => "002239"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002240
		# line in RSA:  <fld30> <fld31> <event_source> SQL Server Warning: '<fld1>' has performed a forced defection of TSX server '<fld2>'. Run sp_delete_targetserver at the MSX in order to complete the defection. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server Warning: '%{fld1}' has performed a forced defection of TSX server '%{fld2}'. Run sp_delete_targetserver at the MSX in order to complete the defection." }
				id => "message-002240"
				add_field => {
					"[event][id]" => "002240"
					"[rsa][message][id1]" => "002240"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002241
		# line in RSA:  <fld30> <fld31> <event_source> SQL Trace started. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Trace started." }
				id => "message-002241"
				add_field => {
					"[event][id]" => "002241"
					"[rsa][message][id1]" => "002241"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002242
		# line in RSA:  <fld30> <fld31> <event_source> SQL Trace stopped due to server shutdown. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Trace stopped due to server shutdown." }
				id => "message-002242"
				add_field => {
					"[event][id]" => "002242"
					"[rsa][message][id1]" => "002242"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002243
		# line in RSA:  <fld30> <fld31> <event_source> SQL Trace stopped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Trace stopped." }
				id => "message-002243"
				add_field => {
					"[event][id]" => "002243"
					"[rsa][message][id1]" => "002243"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002244
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant failed because the state of the Web task in msdb..MSwebtasks is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant failed because the state of the Web task in msdb..MSwebtasks is invalid." }
				id => "message-002244"
				add_field => {
					"[event][id]" => "002244"
					"[rsa][message][id1]" => "002244"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002245
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant failed on the call to SQLColAttribute. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant failed on the call to SQLColAttribute." }
				id => "message-002245"
				add_field => {
					"[event][id]" => "002245"
					"[rsa][message][id1]" => "002245"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002246
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant failed on the call to SQLFetch. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant failed on the call to SQLFetch." }
				id => "message-002246"
				add_field => {
					"[event][id]" => "002246"
					"[rsa][message][id1]" => "002246"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002247
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant failed on the call to SQLGetData. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant failed on the call to SQLGetData." }
				id => "message-002247"
				add_field => {
					"[event][id]" => "002247"
					"[rsa][message][id1]" => "002247"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002248
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant failed to bind a results column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant failed to bind a results column." }
				id => "message-002248"
				add_field => {
					"[event][id]" => "002248"
					"[rsa][message][id1]" => "002248"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002249
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @blobfmt is invalid. The file must include the full path to the output_file location. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @blobfmt is invalid. The file must include the full path to the output_file location." }
				id => "message-002249"
				add_field => {
					"[event][id]" => "002249"
					"[rsa][message][id1]" => "002249"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002250
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @bold must be 0 or 1. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @bold must be 0 or 1." }
				id => "message-002250"
				add_field => {
					"[event][id]" => "002250"
					"[rsa][message][id1]" => "002250"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002251
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @colheaders must be 0 or 1. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @colheaders must be 0 or 1." }
				id => "message-002251"
				add_field => {
					"[event][id]" => "002251"
					"[rsa][message][id1]" => "002251"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002252
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @datachg must be specified for the given @whentype option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @datachg must be specified for the given @whentype option." }
				id => "message-002252"
				add_field => {
					"[event][id]" => "002252"
					"[rsa][message][id1]" => "002252"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002253
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @dayflags must be 1, 2, 4, 8, 16, 32, or 64. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @dayflags must be 1, 2, 4, 8, 16, 32, or 64." }
				id => "message-002253"
				add_field => {
					"[event][id]" => "002253"
					"[rsa][message][id1]" => "002253"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002254
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @dayflags must be specified for the given @whentype option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @dayflags must be specified for the given @whentype option." }
				id => "message-002254"
				add_field => {
					"[event][id]" => "002254"
					"[rsa][message][id1]" => "002254"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002255
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @dbname is not valid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @dbname is not valid." }
				id => "message-002255"
				add_field => {
					"[event][id]" => "002255"
					"[rsa][message][id1]" => "002255"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002256
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @fixedfont must be 0 or 1. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @fixedfont must be 0 or 1." }
				id => "message-002256"
				add_field => {
					"[event][id]" => "002256"
					"[rsa][message][id1]" => "002256"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002257
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @HTMLheader must be in the range 1 to 6. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @HTMLheader must be in the range 1 to 6." }
				id => "message-002257"
				add_field => {
					"[event][id]" => "002257"
					"[rsa][message][id1]" => "002257"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002258
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @italic must be 0 or 1. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @italic must be 0 or 1." }
				id => "message-002258"
				add_field => {
					"[event][id]" => "002258"
					"[rsa][message][id1]" => "002258"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002259
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @lastupdated must be 0 or 1. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @lastupdated must be 0 or 1." }
				id => "message-002259"
				add_field => {
					"[event][id]" => "002259"
					"[rsa][message][id1]" => "002259"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002260
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @nrowsperpage must be a positive number and it cannot be used with @singlerow. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @nrowsperpage must be a positive number and it cannot be used with @singlerow." }
				id => "message-002260"
				add_field => {
					"[event][id]" => "002260"
					"[rsa][message][id1]" => "002260"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002261
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @numunits must be greater than 0. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @numunits must be greater than 0." }
				id => "message-002261"
				add_field => {
					"[event][id]" => "002261"
					"[rsa][message][id1]" => "002261"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002262
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @outputfile is not valid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @outputfile is not valid." }
				id => "message-002262"
				add_field => {
					"[event][id]" => "002262"
					"[rsa][message][id1]" => "002262"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002263
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @procname is not valid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @procname is not valid." }
				id => "message-002263"
				add_field => {
					"[event][id]" => "002263"
					"[rsa][message][id1]" => "002263"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002264
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @procname parameter is missing. The parameter is required to upgrade a Web task to 7.0. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @procname parameter is missing. The parameter is required to upgrade a Web task to 7.0." }
				id => "message-002264"
				add_field => {
					"[event][id]" => "002264"
					"[rsa][message][id1]" => "002264"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002265
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @singlerow must be 0 or 1. Cannot specify this parameter with @nrowsperpage. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @singlerow must be 0 or 1. Cannot specify this parameter with @nrowsperpage." }
				id => "message-002265"
				add_field => {
					"[event][id]" => "002265"
					"[rsa][message][id1]" => "002265"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002266
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @tabborder must be tinyint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @tabborder must be tinyint." }
				id => "message-002266"
				add_field => {
					"[event][id]" => "002266"
					"[rsa][message][id1]" => "002266"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002267
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @targetdate is invalid. It must be a valid date after 1900-01-01. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @targetdate is invalid. It must be a valid date after 1900-01-01." }
				id => "message-002267"
				add_field => {
					"[event][id]" => "002267"
					"[rsa][message][id1]" => "002267"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002268
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @targetdate must be specified for the given @whentype option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @targetdate must be specified for the given @whentype option." }
				id => "message-002268"
				add_field => {
					"[event][id]" => "002268"
					"[rsa][message][id1]" => "002268"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002269
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @unittype and/or @numunits must be specified for the given @whentype option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @unittype and/or @numunits must be specified for the given @whentype option." }
				id => "message-002269"
				add_field => {
					"[event][id]" => "002269"
					"[rsa][message][id1]" => "002269"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002270
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @unittype must be in the range 1 to 4. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @unittype must be in the range 1 to 4." }
				id => "message-002270"
				add_field => {
					"[event][id]" => "002270"
					"[rsa][message][id1]" => "002270"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002271
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @username is not valid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @username is not valid." }
				id => "message-002271"
				add_field => {
					"[event][id]" => "002271"
					"[rsa][message][id1]" => "002271"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002272
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: @whentype must be in the range 1 to 9. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: @whentype must be in the range 1 to 9." }
				id => "message-002272"
				add_field => {
					"[event][id]" => "002272"
					"[rsa][message][id1]" => "002272"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002273
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Columns of data type image cannot have a template. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Columns of data type image cannot have a template." }
				id => "message-002273"
				add_field => {
					"[event][id]" => "002273"
					"[rsa][message][id1]" => "002273"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002274
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not add the necessary trigger for the @datachg parameter. There could be an existing trigger on the table with missing or encrypted text. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not add the necessary trigger for the @datachg parameter. There could be an existing trigger on the table with missing or encrypted text." }
				id => "message-002274"
				add_field => {
					"[event][id]" => "002274"
					"[rsa][message][id1]" => "002274"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002275
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not allocate enough memory to satisfy this request. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not allocate enough memory to satisfy this request." }
				id => "message-002275"
				add_field => {
					"[event][id]" => "002275"
					"[rsa][message][id1]" => "002275"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002276
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not bind the parameter to the SQL statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not bind the parameter to the SQL statement." }
				id => "message-002276"
				add_field => {
					"[event][id]" => "002276"
					"[rsa][message][id1]" => "002276"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002277
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not establish a local connection to SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not establish a local connection to SQL Server." }
				id => "message-002277"
				add_field => {
					"[event][id]" => "002277"
					"[rsa][message][id1]" => "002277"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002278
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not execute the SQL statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not execute the SQL statement." }
				id => "message-002278"
				add_field => {
					"[event][id]" => "002278"
					"[rsa][message][id1]" => "002278"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002279
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not find and drop the necessary trigger for updating the Web page. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not find and drop the necessary trigger for updating the Web page." }
				id => "message-002279"
				add_field => {
					"[event][id]" => "002279"
					"[rsa][message][id1]" => "002279"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002280
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not find the existing trigger. This could be due to encryption. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not find the existing trigger. This could be due to encryption." }
				id => "message-002280"
				add_field => {
					"[event][id]" => "002280"
					"[rsa][message][id1]" => "002280"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002281
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not find the matching end table tag in the HTML file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not find the matching end table tag in the HTML file." }
				id => "message-002281"
				add_field => {
					"[event][id]" => "002281"
					"[rsa][message][id1]" => "002281"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002282
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not find the specified marker for data insertion in the template file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not find the specified marker for data insertion in the template file." }
				id => "message-002282"
				add_field => {
					"[event][id]" => "002282"
					"[rsa][message][id1]" => "002282"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002283
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not find the table in the HTML file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not find the table in the HTML file." }
				id => "message-002283"
				add_field => {
					"[event][id]" => "002283"
					"[rsa][message][id1]" => "002283"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002284
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not list Web task parameters. xp_readwebtask requires @procname. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not list Web task parameters. xp_readwebtask requires @procname." }
				id => "message-002284"
				add_field => {
					"[event][id]" => "002284"
					"[rsa][message][id1]" => "002284"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002285
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not obtain a bind token. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not obtain a bind token." }
				id => "message-002285"
				add_field => {
					"[event][id]" => "002285"
					"[rsa][message][id1]" => "002285"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002286
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not obtain the number of columns in @query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not obtain the number of columns in @query." }
				id => "message-002286"
				add_field => {
					"[event][id]" => "002286"
					"[rsa][message][id1]" => "002286"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002287
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not open the output file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not open the output file." }
				id => "message-002287"
				add_field => {
					"[event][id]" => "002287"
					"[rsa][message][id1]" => "002287"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002288
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not open the template file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not open the template file." }
				id => "message-002288"
				add_field => {
					"[event][id]" => "002288"
					"[rsa][message][id1]" => "002288"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002289
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not read the given file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not read the given file." }
				id => "message-002289"
				add_field => {
					"[event][id]" => "002289"
					"[rsa][message][id1]" => "002289"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002290
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not read the template file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not read the template file." }
				id => "message-002290"
				add_field => {
					"[event][id]" => "002290"
					"[rsa][message][id1]" => "002290"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002291
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not send Web task row to the client. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not send Web task row to the client." }
				id => "message-002291"
				add_field => {
					"[event][id]" => "002291"
					"[rsa][message][id1]" => "002291"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002292
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not update Web tasks system table. The Web task remains in 6.5 format. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not update Web tasks system table. The Web task remains in 6.5 format." }
				id => "message-002292"
				add_field => {
					"[event][id]" => "002292"
					"[rsa][message][id1]" => "002292"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002293
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not upgrade the Web task to 7.0. The Web task will remain in 6.5 format and will need to be re-created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not upgrade the Web task to 7.0. The Web task will remain in 6.5 format and will need to be re-created." }
				id => "message-002293"
				add_field => {
					"[event][id]" => "002293"
					"[rsa][message][id1]" => "002293"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002294
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Could not write to the output file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Could not write to the output file." }
				id => "message-002294"
				add_field => {
					"[event][id]" => "002294"
					"[rsa][message][id1]" => "002294"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002295
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Incorrect syntax for the @datachg parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Incorrect syntax for the @datachg parameter." }
				id => "message-002295"
				add_field => {
					"[event][id]" => "002295"
					"[rsa][message][id1]" => "002295"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002296
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Internal error. Cannot translate to the specified code page. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Internal error. Cannot translate to the specified code page." }
				id => "message-002296"
				add_field => {
					"[event][id]" => "002296"
					"[rsa][message][id1]" => "002296"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002297
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Internal error. Could not create translation object. Make sure that the file MLang.dll is in your system directory. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Internal error. Could not create translation object. Make sure that the file MLang.dll is in your system directory." }
				id => "message-002297"
				add_field => {
					"[event][id]" => "002297"
					"[rsa][message][id1]" => "002297"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002298
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Internal error. Could not initialize COM library. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Internal error. Could not initialize COM library." }
				id => "message-002298"
				add_field => {
					"[event][id]" => "002298"
					"[rsa][message][id1]" => "002298"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002299
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Internal error. Could not obtain COM interface ID. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Internal error. Could not obtain COM interface ID." }
				id => "message-002299"
				add_field => {
					"[event][id]" => "002299"
					"[rsa][message][id1]" => "002299"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002300
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Internal error. Could not obtain COM language ID. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Internal error. Could not obtain COM language ID." }
				id => "message-002300"
				add_field => {
					"[event][id]" => "002300"
					"[rsa][message][id1]" => "002300"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002301
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Internal error. Could not read @ parameters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Internal error. Could not read @ parameters." }
				id => "message-002301"
				add_field => {
					"[event][id]" => "002301"
					"[rsa][message][id1]" => "002301"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002302
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Internal error. Could not translate from Unicode to the specified code page. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Internal error. Could not translate from Unicode to the specified code page." }
				id => "message-002302"
				add_field => {
					"[event][id]" => "002302"
					"[rsa][message][id1]" => "002302"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002303
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Invalid @charset. Execute sp_enumcodepages for a list of character sets. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Invalid @charset. Execute sp_enumcodepages for a list of character sets." }
				id => "message-002303"
				add_field => {
					"[event][id]" => "002303"
					"[rsa][message][id1]" => "002303"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002304
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Invalid @codepage. Execute sp_enumcodepages for a list of code pages. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Invalid @codepage. Execute sp_enumcodepages for a list of code pages." }
				id => "message-002304"
				add_field => {
					"[event][id]" => "002304"
					"[rsa][message][id1]" => "002304"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002305
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Invalid parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Invalid parameter." }
				id => "message-002305"
				add_field => {
					"[event][id]" => "002305"
					"[rsa][message][id1]" => "002305"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002306
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: ODS error occurred. Could not send Web task parameters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: ODS error occurred. Could not send Web task parameters." }
				id => "message-002306"
				add_field => {
					"[event][id]" => "002306"
					"[rsa][message][id1]" => "002306"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002307
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Parameters can be passed either by name or position. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Parameters can be passed either by name or position." }
				id => "message-002307"
				add_field => {
					"[event][id]" => "002307"
					"[rsa][message][id1]" => "002307"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002308
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Procedure called with too many parameters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Procedure called with too many parameters." }
				id => "message-002308"
				add_field => {
					"[event][id]" => "002308"
					"[rsa][message][id1]" => "002308"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002309
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Procedure name is required to convert Web tasks. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Procedure name is required to convert Web tasks." }
				id => "message-002309"
				add_field => {
					"[event][id]" => "002309"
					"[rsa][message][id1]" => "002309"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002310
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Read/write operation on text, ntext, or image column failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Read/write operation on text, ntext, or image column failed." }
				id => "message-002310"
				add_field => {
					"[event][id]" => "002310"
					"[rsa][message][id1]" => "002310"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002311
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Source code page is not supported on the system.  Ensure @charset and @codepage language files are installed on your system. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Source code page is not supported on the system.  Ensure @charset and @codepage language files are installed on your system." }
				id => "message-002311"
				add_field => {
					"[event][id]" => "002311"
					"[rsa][message][id1]" => "002311"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002312
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: The @blobfmt parameter specification is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: The @blobfmt parameter specification is invalid." }
				id => "message-002312"
				add_field => {
					"[event][id]" => "002312"
					"[rsa][message][id1]" => "002312"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002313
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: The @datachg parameter cannot be specified with the given @whentype value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: The @datachg parameter cannot be specified with the given @whentype value." }
				id => "message-002313"
				add_field => {
					"[event][id]" => "002313"
					"[rsa][message][id1]" => "002313"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002314
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: The @query parameter must be specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: The @query parameter must be specified." }
				id => "message-002314"
				add_field => {
					"[event][id]" => "002314"
					"[rsa][message][id1]" => "002314"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002315
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: The @targettime parameter must be between 0 and 240000. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: The @targettime parameter must be between 0 and 240000." }
				id => "message-002315"
				add_field => {
					"[event][id]" => "002315"
					"[rsa][message][id1]" => "002315"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002316
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: The output file name is mandatory for every column specified in the @blobfmt parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: The output file name is mandatory for every column specified in the @blobfmt parameter." }
				id => "message-002316"
				add_field => {
					"[event][id]" => "002316"
					"[rsa][message][id1]" => "002316"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002317
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: The template file specified in the Web task has a bad size. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: The template file specified in the Web task has a bad size." }
				id => "message-002317"
				add_field => {
					"[event][id]" => "002317"
					"[rsa][message][id1]" => "002317"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002318
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: This version is not supported on Win32s of Windows 3.1. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: This version is not supported on Win32s of Windows 3.1." }
				id => "message-002318"
				add_field => {
					"[event][id]" => "002318"
					"[rsa][message][id1]" => "002318"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002319
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Translation to the desired code page is unavailable on this system. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Translation to the desired code page is unavailable on this system." }
				id => "message-002319"
				add_field => {
					"[event][id]" => "002319"
					"[rsa][message][id1]" => "002319"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002320
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: URL hyperlink text column is missing in @query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: URL hyperlink text column is missing in @query." }
				id => "message-002320"
				add_field => {
					"[event][id]" => "002320"
					"[rsa][message][id1]" => "002320"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002321
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: URL hyperlink text column must not be of the image data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: URL hyperlink text column must not be of the image data type." }
				id => "message-002321"
				add_field => {
					"[event][id]" => "002321"
					"[rsa][message][id1]" => "002321"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002322
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: URL specification is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: URL specification is invalid." }
				id => "message-002322"
				add_field => {
					"[event][id]" => "002322"
					"[rsa][message][id1]" => "002322"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002323
		# line in RSA:  <fld30> <fld31> <event_source> SQL Web Assistant: Web task not found. Verify the name of the task for possible errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Web Assistant: Web task not found. Verify the name of the task for possible errors." }
				id => "message-002323"
				add_field => {
					"[event][id]" => "002323"
					"[rsa][message][id1]" => "002323"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002324
		# line in RSA:  <fld30> <fld31> <event_source>  SQL global counter collection task is created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source}  SQL global counter collection task is created." }
				id => "message-002324"
				add_field => {
					"[event][id]" => "002324"
					"[rsa][message][id1]" => "002324"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003587
		# line in RSA:  <fld30> <fld31> <event_source> SQL Mail session started.. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Mail session started.." }
				id => "message-003587"
				add_field => {
				"action" => "Mail session started"
					"[event][id]" => "003587"
					"[rsa][message][id1]" => "003587"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003597
		# line in RSA:   <fld30> <fld31> <event_source> SQL Server has encountered <fld1> occurrence(s) of IO requests taking longer than 15 seconds to complete on file [<result>] in database [<fld2>] (<fld3>).  The OS file handle is <fld4>.  The offset of the latest long IO is: <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL Server has encountered %{fld1} occurrence(s) of IO requests taking longer than 15 seconds to complete on file [%{result}] in database [%{fld2}] (%{fld3}).  The OS file handle is %{fld4}.  The offset of the latest long IO is: %{fld5}" }
				id => "message-003597"
				add_field => {
					"[event][id]" => "003597"
					"[rsa][message][id1]" => "003597"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003605
		# line in RSA:  <fld30> <fld31> <event_source> <fld1> SQL <fld2>: Operating system error <fld3>(<fld4>) encountered.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} %{fld1} SQL %{fld2}: Operating system error %{fld3}(%{fld4}) encountered." }
				id => "message-003605"
				add_field => {
				"result" => "Operating system error"
					"[event][id]" => "003605"
					"[rsa][message][id1]" => "003605"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SQL:01
		# line in RSA:  <fld30> <fld31> <event_source> SQL <fld1> by login "<username>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL %{fld1} by login \"%{username}\"" }
				id => "message-SQL:01"
				add_field => {
					"[event][id]" => "SQL:01"
					"[rsa][message][id1]" => "SQL:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE SQL:02
		# line in RSA:  <fld30> <fld31> <event_source> SQL <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SQL %{fld1}" }
				id => "message-SQL:02"
				add_field => {
					"[event][id]" => "SQL:02"
					"[rsa][message][id1]" => "SQL:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Stack" {
		# MESSAGE 002325
		# line in RSA:  <fld30> <fld31> <event_source> Stack overflow occurred in parsing search condition '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Stack overflow occurred in parsing search condition '%{fld1}'." }
				id => "message-002325"
				add_field => {
					"[event][id]" => "002325"
					"[rsa][message][id1]" => "002325"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003590
		# line in RSA:  <fld30> <fld31> <event_source> <fld1> Stack Overflow Dump not possible - Exception <fld2> at <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} %{fld1} Stack Overflow Dump not possible - Exception %{fld2} at %{fld3}" }
				id => "message-003590"
				add_field => {
					"[event][id]" => "003590"
					"[rsa][message][id1]" => "003590"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003614
		# line in RSA:  <fld30> <fld31> <event_description> is 0x<fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_description} is 0x%{fld1}" }
				id => "message-003614"
				add_field => {
					"[event][id]" => "003614"
					"[rsa][message][id1]" => "003614"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2410
	# line in RSA:  <fld30> <fld31> <event_source> Start time    : <fld1> 
	else if [logstash][msgparser][id] == "msgParserId2410" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Start time    : %{fld1}" }
			id => "msgParserId2410"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Starting" {
		# MESSAGE 002327
		# line in RSA:  <fld30> <fld31> <event_source> Starting agent. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Starting agent." }
				id => "message-002327"
				add_field => {
					"[event][id]" => "002327"
					"[rsa][message][id1]" => "002327"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002328
		# line in RSA:  <fld30> <fld31> <event_source> Starting without recovery. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Starting without recovery." }
				id => "message-002328"
				add_field => {
					"[event][id]" => "002328"
					"[rsa][message][id1]" => "002328"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002329
		# line in RSA:  <fld30> <fld31> <event_source> Starting up database '<db_name>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Starting up database '%{db_name}'." }
				id => "message-002329"
				add_field => {
					"[event][id]" => "002329"
					"[rsa][message][id1]" => "002329"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003586
		# line in RSA:  <fld30> <fld31> <event_source> Starting SQL Mail session.... 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Starting SQL Mail session...." }
				id => "message-003586"
				add_field => {
				"action" => "Starting SQL Mail session"
					"[event][id]" => "003586"
					"[rsa][message][id1]" => "003586"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2415
	# line in RSA:  <fld30> <fld31> <event_source> Starts whenever the CPU usage has remained below <fld1> percent for <fld2> seconds. 
	else if [logstash][msgparser][id] == "msgParserId2415" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Starts whenever the CPU usage has remained below %{fld1} percent for %{fld2} seconds." }
			id => "msgParserId2415"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2416
	# line in RSA:  <fld30> <fld31> <event_source> Statement must be executed in the context of a user transaction. 
	else if [logstash][msgparser][id] == "msgParserId2416" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Statement must be executed in the context of a user transaction." }
			id => "msgParserId2416"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2417
	# line in RSA:  <fld30> <fld31> <event_source> Statement(s) could not be prepared. 
	else if [logstash][msgparser][id] == "msgParserId2417" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Statement(s) could not be prepared." }
			id => "msgParserId2417"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Statistics" {
		# MESSAGE 002333
		# line in RSA:  <fld30> <fld31> <event_source> Statistics cannot be created on object '<fld1>' because the object is not a user table or view. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Statistics cannot be created on object '%{fld1}' because the object is not a user table or view." }
				id => "message-002333"
				add_field => {
					"[event][id]" => "002333"
					"[rsa][message][id1]" => "002333"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002334
		# line in RSA:  <fld30> <fld31> <event_source> Statistics for <fld1> '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Statistics for %{fld1} '%{fld2}'." }
				id => "message-002334"
				add_field => {
					"[event][id]" => "002334"
					"[rsa][message][id1]" => "002334"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002335
		# line in RSA:  <fld30> <fld31> <event_source> Statistics for all tables have been updated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Statistics for all tables have been updated." }
				id => "message-002335"
				add_field => {
					"[event][id]" => "002335"
					"[rsa][message][id1]" => "002335"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002336
		# line in RSA:  <fld30> <fld31> <event_source> Statistics have been created for the <fld1> listed columns of the above tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Statistics have been created for the %{fld1} listed columns of the above tables." }
				id => "message-002336"
				add_field => {
					"[event][id]" => "002336"
					"[rsa][message][id1]" => "002336"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2422
	# line in RSA:  <fld30> <fld31> <event_source> statistics option 
	else if [logstash][msgparser][id] == "msgParserId2422" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} statistics option" }
			id => "msgParserId2422"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Status" {
		# MESSAGE 002338
		# line in RSA:  <fld30> <fld31> <event_source> Status report cannot be obtained. Rollback operation for Process ID <fld1> is not in progress. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Status report cannot be obtained. Rollback operation for Process ID %{fld1} is not in progress." }
				id => "message-002338"
				add_field => {
					"[event][id]" => "002338"
					"[rsa][message][id1]" => "002338"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002339
		# line in RSA:  <fld30> <fld31> <event_source> Status report cannot be obtained. Rollback operation for UOW <fld1> is not in progress. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Status report cannot be obtained. Rollback operation for UOW %{fld1} is not in progress." }
				id => "message-002339"
				add_field => {
					"[event][id]" => "002339"
					"[rsa][message][id1]" => "002339"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Stored" {
		# MESSAGE 002340
		# line in RSA:  <fld30> <fld31> <event_source> Stored function '<fld1>' in the library '<fld2>' generated an access violation. SQL Server is terminating process <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Stored function '%{fld1}' in the library '%{fld2}' generated an access violation. SQL Server is terminating process %{fld3}." }
				id => "message-002340"
				add_field => {
					"[event][id]" => "002340"
					"[rsa][message][id1]" => "002340"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002341
		# line in RSA:  <fld30> <fld31> <event_source> Stored procedure '<fld1>' can only be executed at the ad hoc level. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Stored procedure '%{fld1}' can only be executed at the ad hoc level." }
				id => "message-002341"
				add_field => {
					"[event][id]" => "002341"
					"[rsa][message][id1]" => "002341"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002342
		# line in RSA:  <fld30> <fld31> <event_source> Stored procedure '<fld1>' can run only on Windows 2000 servers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Stored procedure '%{fld1}' can run only on Windows 2000 servers." }
				id => "message-002342"
				add_field => {
					"[event][id]" => "002342"
					"[rsa][message][id1]" => "002342"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002343
		# line in RSA:  <fld30> <fld31> <event_source> Stored procedure '<fld1>' failed to access registry key. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Stored procedure '%{fld1}' failed to access registry key." }
				id => "message-002343"
				add_field => {
					"[event][id]" => "002343"
					"[rsa][message][id1]" => "002343"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002344
		# line in RSA:  <fld30> <fld31> <event_source> Stored procedures for replication are the only objects that can be used as a filter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Stored procedures for replication are the only objects that can be used as a filter." }
				id => "message-002344"
				add_field => {
					"[event][id]" => "002344"
					"[rsa][message][id1]" => "002344"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2430
	# line in RSA:  <fld30> <fld31> <event_source> String or binary data would be truncated. 
	else if [logstash][msgparser][id] == "msgParserId2430" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} String or binary data would be truncated." }
			id => "msgParserId2430"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Subqueries" {
		# MESSAGE 002346
		# line in RSA:  <fld30> <fld31> <event_source> Subqueries are not allowed in this context. Only scalar expressions are allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subqueries are not allowed in this context. Only scalar expressions are allowed." }
				id => "message-002346"
				add_field => {
					"[event][id]" => "002346"
					"[rsa][message][id1]" => "002346"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002347
		# line in RSA:  <fld30> <fld31> <event_source> Subqueries are not supported in <fld1> constraints, table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subqueries are not supported in %{fld1} constraints, table '%{fld2}'." }
				id => "message-002347"
				add_field => {
					"[event][id]" => "002347"
					"[rsa][message][id1]" => "002347"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2433
	# line in RSA:  <fld30> <fld31> <event_source> Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, <<, <<= , >, >= or when the subquery is used as an expression. 
	else if [logstash][msgparser][id] == "msgParserId2433" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, <, <= , >, >= or when the subquery is used as an expression." }
			id => "msgParserId2433"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Subscriber" {
		# MESSAGE 002349
		# line in RSA:  <fld30> <fld31> <event_source> Subscriber '<fld1>' subscription to article '<fld2>' in publication '<fld3>' failed data validation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subscriber '%{fld1}' subscription to article '%{fld2}' in publication '%{fld3}' failed data validation." }
				id => "message-002349"
				add_field => {
					"[event][id]" => "002349"
					"[rsa][message][id1]" => "002349"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002350
		# line in RSA:  <fld30> <fld31> <event_source> Subscriber '<fld1>' subscription to article '<fld2>' in publication '<fld3>' has been reinitialized after a synchronization failure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subscriber '%{fld1}' subscription to article '%{fld2}' in publication '%{fld3}' has been reinitialized after a synchronization failure." }
				id => "message-002350"
				add_field => {
					"[event][id]" => "002350"
					"[rsa][message][id1]" => "002350"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002351
		# line in RSA:  <fld30> <fld31> <event_source> Subscriber '<fld1>' subscription to article '<fld2>' in publication '<fld3>' has been reinitialized after a validation failure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subscriber '%{fld1}' subscription to article '%{fld2}' in publication '%{fld3}' has been reinitialized after a validation failure." }
				id => "message-002351"
				add_field => {
					"[event][id]" => "002351"
					"[rsa][message][id1]" => "002351"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002352
		# line in RSA:  <fld30> <fld31> <event_source> Subscriber '<fld1>' subscription to article '<fld2>' in publication '<fld3>' passed data validation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subscriber '%{fld1}' subscription to article '%{fld2}' in publication '%{fld3}' passed data validation." }
				id => "message-002352"
				add_field => {
					"[event][id]" => "002352"
					"[rsa][message][id1]" => "002352"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002353
		# line in RSA:  <fld30> <fld31> <event_source> Subscriber partition validation expression must be NULL for static publications. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subscriber partition validation expression must be NULL for static publications." }
				id => "message-002353"
				add_field => {
					"[event][id]" => "002353"
					"[rsa][message][id1]" => "002353"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Subscription" {
		# MESSAGE 002354
		# line in RSA:  <fld30> <fld31> <event_source> Subscription for Publisher '<fld1>' does not have a valid queue_id. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subscription for Publisher '%{fld1}' does not have a valid queue_id." }
				id => "message-002354"
				add_field => {
					"[event][id]" => "002354"
					"[rsa][message][id1]" => "002354"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002355
		# line in RSA:  <fld30> <fld31> <event_source> Subscription property '<fld1>' cannot be changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Subscription property '%{fld1}' cannot be changed." }
				id => "message-002355"
				add_field => {
					"[event][id]" => "002355"
					"[rsa][message][id1]" => "002355"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Successfully" {
		# MESSAGE 002356
		# line in RSA:  <fld30> <fld31> <event_source> Successfully deleted the physical file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Successfully deleted the physical file '%{fld1}'." }
				id => "message-002356"
				add_field => {
					"[event][id]" => "002356"
					"[rsa][message][id1]" => "002356"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002357
		# line in RSA:  <fld30> <fld31> <event_source> Successfully returned a NULL value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Successfully returned a NULL value." }
				id => "message-002357"
				add_field => {
					"[event][id]" => "002357"
					"[rsa][message][id1]" => "002357"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002358
		# line in RSA:  <fld30> <fld31> <event_source> Successfully returned a truncated value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Successfully returned a truncated value." }
				id => "message-002358"
				add_field => {
					"[event][id]" => "002358"
					"[rsa][message][id1]" => "002358"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SuperSocket" {
		# MESSAGE 002359
		# line in RSA:  <fld30> <fld31> <event_source> SuperSocket info: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SuperSocket info: %{fld1}." }
				id => "message-002359"
				add_field => {
					"[event][id]" => "002359"
					"[rsa][message][id1]" => "002359"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002360
		# line in RSA:  <fld30> <fld31> <event_source> SuperSocket Info: Bind failed on TCP port <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} SuperSocket Info: Bind failed on TCP port %{fld1}." }
				id => "message-002360"
				add_field => {
					"[event][id]" => "002360"
					"[rsa][message][id1]" => "002360"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Supplied" {
		# MESSAGE 002361
		# line in RSA:  <fld30> <fld31> <event_source> Supplied parameter @sid is in use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supplied parameter @sid is in use." }
				id => "message-002361"
				add_field => {
					"[event][id]" => "002361"
					"[rsa][message][id1]" => "002361"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002362
		# line in RSA:  <fld30> <fld31> <event_source> Supplied parameter @sid should be binary(16). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supplied parameter @sid should be binary(16)." }
				id => "message-002362"
				add_field => {
					"[event][id]" => "002362"
					"[rsa][message][id1]" => "002362"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Supply" {
		# MESSAGE 002363
		# line in RSA:  <fld30> <fld31> <event_source> Supply @target_server_groups or @target_servers, or both. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supply @target_server_groups or @target_servers, or both." }
				id => "message-002363"
				add_field => {
					"[event][id]" => "002363"
					"[rsa][message][id1]" => "002363"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002364
		# line in RSA:  <fld30> <fld31> <event_source> Supply either <fld1> or <fld2> to identify the job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supply either %{fld1} or %{fld2} to identify the job." }
				id => "message-002364"
				add_field => {
					"[event][id]" => "002364"
					"[rsa][message][id1]" => "002364"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002365
		# line in RSA:  <fld30> <fld31> <event_source> Supply either @job_name or @originating_server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supply either @job_name or @originating_server." }
				id => "message-002365"
				add_field => {
					"[event][id]" => "002365"
					"[rsa][message][id1]" => "002365"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002366
		# line in RSA:  <fld30> <fld31> <event_source> Supply either @plan_id or @plan_name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supply either @plan_id or @plan_name." }
				id => "message-002366"
				add_field => {
					"[event][id]" => "002366"
					"[rsa][message][id1]" => "002366"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002367
		# line in RSA:  <fld30> <fld31> <event_source> Supply either a date (created or last modified) and a data comparator, or no date parameters at all. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supply either a date (created or last modified) and a data comparator, or no date parameters at all." }
				id => "message-002367"
				add_field => {
					"[event][id]" => "002367"
					"[rsa][message][id1]" => "002367"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002368
		# line in RSA:  <fld30> <fld31> <event_source> Supply either a job name (and job aspect), or one or more job filter parameters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supply either a job name (and job aspect), or one or more job filter parameters." }
				id => "message-002368"
				add_field => {
					"[event][id]" => "002368"
					"[rsa][message][id1]" => "002368"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002369
		# line in RSA:  <fld30> <fld31> <event_source> Supply either a non-zero message ID, non-zero severity, or non-null performance condition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Supply either a non-zero message ID, non-zero severity, or non-null performance condition." }
				id => "message-002369"
				add_field => {
					"[event][id]" => "002369"
					"[rsa][message][id1]" => "002369"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Syntax" {
		# MESSAGE 002370
		# line in RSA:  <fld30> <fld31> <event_source> Syntax '<fld1>' is not allowed in schema-bound objects. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax '%{fld1}' is not allowed in schema-bound objects." }
				id => "message-002370"
				add_field => {
					"[event][id]" => "002370"
					"[rsa][message][id1]" => "002370"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002371
		# line in RSA:  <fld30> <fld31> <event_source> Syntax error converting character string to smalldatetime data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax error converting character string to smalldatetime data type." }
				id => "message-002371"
				add_field => {
					"[event][id]" => "002371"
					"[rsa][message][id1]" => "002371"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002372
		# line in RSA:  <fld30> <fld31> <event_source> Syntax error converting datetime from binary/varbinary string. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax error converting datetime from binary/varbinary string." }
				id => "message-002372"
				add_field => {
					"[event][id]" => "002372"
					"[rsa][message][id1]" => "002372"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002373
		# line in RSA:  <fld30> <fld31> <event_source> Syntax error converting datetime from character string. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax error converting datetime from character string." }
				id => "message-002373"
				add_field => {
					"[event][id]" => "002373"
					"[rsa][message][id1]" => "002373"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002374
		# line in RSA:  <fld30> <fld31> <event_source> Syntax error converting from a character string to uniqueidentifier. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax error converting from a character string to uniqueidentifier." }
				id => "message-002374"
				add_field => {
					"[event][id]" => "002374"
					"[rsa][message][id1]" => "002374"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002375
		# line in RSA:  <fld30> <fld31> <event_source> Syntax error converting the <fld1> value '<fld2>' to a column of data type <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax error converting the %{fld1} value '%{fld2}' to a column of data type %{fld3}." }
				id => "message-002375"
				add_field => {
					"[event][id]" => "002375"
					"[rsa][message][id1]" => "002375"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002376
		# line in RSA:  <fld30> <fld31> <event_source> Syntax error in search condition, or empty or null search condition '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax error in search condition, or empty or null search condition '%{fld1}'." }
				id => "message-002376"
				add_field => {
					"[event][id]" => "002376"
					"[rsa][message][id1]" => "002376"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002377
		# line in RSA:  <fld30> <fld31> <event_source> Syntax error occurred near '<fld1>' in search condition '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax error occurred near '%{fld1}' in search condition '%{fld2}'." }
				id => "message-002377"
				add_field => {
					"[event][id]" => "002377"
					"[rsa][message][id1]" => "002377"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002379
		# line in RSA:  <fld30> <fld31> <event_source> Syntax error parsing SQL identifier '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Syntax error parsing SQL identifier '%{fld1}'." }
				id => "message-002379"
				add_field => {
					"[event][id]" => "002379"
					"[rsa][message][id1]" => "002379"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2464
	# line in RSA:  <fld30> <fld31> <event_source> system table 
	else if [logstash][msgparser][id] == "msgParserId2464" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} system table" }
			id => "msgParserId2464"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "System" {
		# MESSAGE 002381
		# line in RSA:  <fld30> <fld31> <event_source> System databases master, model, and tempdb cannot have their logs rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System databases master, model, and tempdb cannot have their logs rebuilt." }
				id => "message-002381"
				add_field => {
					"[event][id]" => "002381"
					"[rsa][message][id1]" => "002381"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002382
		# line in RSA:  <fld30> <fld31> <event_source> System databases master, model, and tempdb cannot have their names changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System databases master, model, and tempdb cannot have their names changed." }
				id => "message-002382"
				add_field => {
					"[event][id]" => "002382"
					"[rsa][message][id1]" => "002382"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002383
		# line in RSA:  <fld30> <fld31> <event_source> System databases master, model, msdb, and tempdb cannot be detached. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System databases master, model, msdb, and tempdb cannot be detached." }
				id => "message-002383"
				add_field => {
					"[event][id]" => "002383"
					"[rsa][message][id1]" => "002383"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002384
		# line in RSA:  <fld30> <fld31> <event_source> System delete. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System delete." }
				id => "message-002384"
				add_field => {
					"[event][id]" => "002384"
					"[rsa][message][id1]" => "002384"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002385
		# line in RSA:  <fld30> <fld31> <event_source> System error detected during attempt to use the 'upsleep' system function. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System error detected during attempt to use the 'upsleep' system function." }
				id => "message-002385"
				add_field => {
					"[event][id]" => "002385"
					"[rsa][message][id1]" => "002385"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002386
		# line in RSA:  <fld30> <fld31> <event_source> System table '<fld1>' (object ID <fld2>, index ID <fld3>) is in filegroup <fld4>. All system tables must be in filegroup <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System table '%{fld1}' (object ID %{fld2}, index ID %{fld3}) is in filegroup %{fld4}. All system tables must be in filegroup %{fld5}." }
				id => "message-002386"
				add_field => {
					"[event][id]" => "002386"
					"[rsa][message][id1]" => "002386"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002387
		# line in RSA:  <fld30> <fld31> <event_source> System table '<fld1>' was not created, because ad hoc updates to system catalogs are not enabled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System table '%{fld1}' was not created, because ad hoc updates to system catalogs are not enabled." }
				id => "message-002387"
				add_field => {
					"[event][id]" => "002387"
					"[rsa][message][id1]" => "002387"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002388
		# line in RSA:  <fld30> <fld31> <event_source> System table mismatch: Table '<fld1>', object ID <fld2> has index ID 1 in sysindexes but the status in sysobjects does not have the clustered bit set. The table will be checked as a heap. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System table mismatch: Table '%{fld1}', object ID %{fld2} has index ID 1 in sysindexes but the status in sysobjects does not have the clustered bit set. The table will be checked as a heap." }
				id => "message-002388"
				add_field => {
					"[event][id]" => "002388"
					"[rsa][message][id1]" => "002388"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002388:01
		# line in RSA:  <fld30> <fld31> <event_source> System Manufacturer: '<fld22>', System Model: '<fld23>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} System Manufacturer: '%{fld22}', System Model: '%{fld23}'." }
				id => "message-002388:01"
				add_field => {
					"[event][id]" => "002388:01"
					"[rsa][message][id1]" => "002388:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Table" {
		# MESSAGE 002389
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' already has a primary key defined on it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' already has a primary key defined on it." }
				id => "message-002389"
				add_field => {
					"[event][id]" => "002389"
					"[rsa][message][id1]" => "002389"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002390
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' does not exist or cannot be opened for SET operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' does not exist or cannot be opened for SET operation." }
				id => "message-002390"
				add_field => {
					"[event][id]" => "002390"
					"[rsa][message][id1]" => "002390"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002391
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' does not exist." }
				id => "message-002391"
				add_field => {
					"[event][id]" => "002391"
					"[rsa][message][id1]" => "002391"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002392
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' does not have the identity property. Cannot perform SET operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' does not have the identity property. Cannot perform SET operation." }
				id => "message-002392"
				add_field => {
					"[event][id]" => "002392"
					"[rsa][message][id1]" => "002392"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002393
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' is either a system or temporary table. DBCC CLEANTABLE cannot be applied to a system or temporary table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' is either a system or temporary table. DBCC CLEANTABLE cannot be applied to a system or temporary table." }
				id => "message-002393"
				add_field => {
					"[event][id]" => "002393"
					"[rsa][message][id1]" => "002393"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002394
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>'. Scan count <fld2>, logical reads <fld3>, physical reads <fld4>, read-ahead reads <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}'. Scan count %{fld2}, logical reads %{fld3}, physical reads %{fld4}, read-ahead reads %{fld5}." }
				id => "message-002394"
				add_field => {
					"[event][id]" => "002394"
					"[rsa][message][id1]" => "002394"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002395
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' already has a '<fld2>' trigger for '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' already has a '%{fld2}' trigger for '%{fld3}'." }
				id => "message-002395"
				add_field => {
					"[event][id]" => "002395"
					"[rsa][message][id1]" => "002395"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002396
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' cannot be republished. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' cannot be republished." }
				id => "message-002396"
				add_field => {
					"[event][id]" => "002396"
					"[rsa][message][id1]" => "002396"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002397
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' cannot participate in updatable subscriptions because it is published for merge replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' cannot participate in updatable subscriptions because it is published for merge replication." }
				id => "message-002397"
				add_field => {
					"[event][id]" => "002397"
					"[rsa][message][id1]" => "002397"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002398
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' does not exist in the Subscriber database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' does not exist in the Subscriber database." }
				id => "message-002398"
				add_field => {
					"[event][id]" => "002398"
					"[rsa][message][id1]" => "002398"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002399
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' is not part of publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' is not part of publication '%{fld2}'." }
				id => "message-002399"
				add_field => {
					"[event][id]" => "002399"
					"[rsa][message][id1]" => "002399"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002400
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' may be out of synchronization. Rowcounts (actual: <fld2>, expected: <fld3>). Rowcount method <fld4> used (0 = Full, 1 = Fast). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' may be out of synchronization. Rowcounts (actual: %{fld2}, expected: %{fld3}). Rowcount method %{fld4} used (0 = Full, 1 = Fast)." }
				id => "message-002400"
				add_field => {
					"[event][id]" => "002400"
					"[rsa][message][id1]" => "002400"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002401
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' might be out of synchronization. Rowcounts (actual: <fld2>, expected <fld3>). Checksum values (actual: <fld4>, expected: <fld5>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' might be out of synchronization. Rowcounts (actual: %{fld2}, expected %{fld3}). Checksum values (actual: %{fld4}, expected: %{fld5})." }
				id => "message-002401"
				add_field => {
					"[event][id]" => "002401"
					"[rsa][message][id1]" => "002401"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002402
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' must have at least one column that is included in the vertical partition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' must have at least one column that is included in the vertical partition." }
				id => "message-002402"
				add_field => {
					"[event][id]" => "002402"
					"[rsa][message][id1]" => "002402"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002403
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' not found in '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' not found in '%{fld2}'." }
				id => "message-002403"
				add_field => {
					"[event][id]" => "002403"
					"[rsa][message][id1]" => "002403"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002404
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' passed full rowcount validation after failing the fast check. DBCC UPDATEUSAGE will be initiated automatically. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' passed full rowcount validation after failing the fast check. DBCC UPDATEUSAGE will be initiated automatically." }
				id => "message-002404"
				add_field => {
					"[event][id]" => "002404"
					"[rsa][message][id1]" => "002404"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002405
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' passed rowcount (<fld2>) and checksum validation. Checksum is not compared for any text or image columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' passed rowcount (%{fld2}) and checksum validation. Checksum is not compared for any text or image columns." }
				id => "message-002405"
				add_field => {
					"[event][id]" => "002405"
					"[rsa][message][id1]" => "002405"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002406
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>' passed rowcount (<fld2>) validation. Rowcount method <fld3> used (0 = Full, 1 = Fast). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}' passed rowcount (%{fld2}) validation. Rowcount method %{fld3} used (0 = Full, 1 = Fast)." }
				id => "message-002406"
				add_field => {
					"[event][id]" => "002406"
					"[rsa][message][id1]" => "002406"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002407
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>': Creating statistics for the following columns: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}': Creating statistics for the following columns:" }
				id => "message-002407"
				add_field => {
					"[event][id]" => "002407"
					"[rsa][message][id1]" => "002407"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002408
		# line in RSA:  <fld30> <fld31> <event_source> Table '<fld1>': No columns without statistics found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table '%{fld1}': No columns without statistics found." }
				id => "message-002408"
				add_field => {
					"[event][id]" => "002408"
					"[rsa][message][id1]" => "002408"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002409
		# line in RSA:  <fld30> <fld31> <event_source> Table and column names must be supplied for the READTEXT or WRITETEXT utility. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table and column names must be supplied for the READTEXT or WRITETEXT utility." }
				id => "message-002409"
				add_field => {
					"[event][id]" => "002409"
					"[rsa][message][id1]" => "002409"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002410
		# line in RSA:  <fld30> <fld31> <event_source> Table error: <fld1> page <fld2> (object ID <fld3>, index ID <fld4>) is out of the range of this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: %{fld1} page %{fld2} (object ID %{fld3}, index ID %{fld4}) is out of the range of this database." }
				id => "message-002410"
				add_field => {
					"[event][id]" => "002410"
					"[rsa][message][id1]" => "002410"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002411
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Allocation page <fld1> has invalid <fld2> page header values. Type is <fld3>. Check type, object ID and page ID on the page. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Allocation page %{fld1} has invalid %{fld2} page header values. Type is %{fld3}. Check type, object ID and page ID on the page." }
				id => "message-002411"
				add_field => {
					"[event][id]" => "002411"
					"[rsa][message][id1]" => "002411"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002412
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Could not check object ID <fld1>, index ID <fld2> due to invalid allocation (IAM) page(s). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Could not check object ID %{fld1}, index ID %{fld2} due to invalid allocation (IAM) page(s)." }
				id => "message-002412"
				add_field => {
					"[event][id]" => "002412"
					"[rsa][message][id1]" => "002412"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002413
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Cross object linkage. Page <fld1>->next in object ID <fld2>, index ID <fld3> refers to page <fld4> in object ID <fld5>, index ID <fld6> but is not in the same index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Cross object linkage. Page %{fld1}->next in object ID %{fld2}, index ID %{fld3} refers to page %{fld4} in object ID %{fld5}, index ID %{fld6} but is not in the same index." }
				id => "message-002413"
				add_field => {
					"[event][id]" => "002413"
					"[rsa][message][id1]" => "002413"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002414
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Cross object linkage: Page <fld1>, slot <fld2>, in object ID <fld3>, index ID <fld4>, refers to page <fld5>, slot <fld6>, in object ID <fld7>, index ID <fld8>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Cross object linkage: Page %{fld1}, slot %{fld2}, in object ID %{fld3}, index ID %{fld4}, refers to page %{fld5}, slot %{fld6}, in object ID %{fld7}, index ID %{fld8}." }
				id => "message-002414"
				add_field => {
					"[event][id]" => "002414"
					"[rsa][message][id1]" => "002414"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002415
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Cross object linkage: Parent page <fld1>, slot <fld2>, in object ID <fld3>, index ID <fld4>, and page <fld5>, slot <fld6>, in object ID <fld7>, index ID <fld8>, next refer to page <fld9> but are not in the same object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Cross object linkage: Parent page %{fld1}, slot %{fld2}, in object ID %{fld3}, index ID %{fld4}, and page %{fld5}, slot %{fld6}, in object ID %{fld7}, index ID %{fld8}, next refer to page %{fld9} but are not in the same object." }
				id => "message-002415"
				add_field => {
					"[event][id]" => "002415"
					"[rsa][message][id1]" => "002415"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002416
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Data type <fld1> (type '<fld2>') does not match between '<fld3>' and '<fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Data type %{fld1} (type '%{fld2}') does not match between '%{fld3}' and '%{fld4}'." }
				id => "message-002416"
				add_field => {
					"[event][id]" => "002416"
					"[rsa][message][id1]" => "002416"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002417
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Database '<fld1>', index '<fld2>.<fld3>' (ID <fld4>) (index ID <fld5>). Extra or invalid key for the keys: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Database '%{fld1}', index '%{fld2}.%{fld3}' (ID %{fld4}) (index ID %{fld5}). Extra or invalid key for the keys:" }
				id => "message-002417"
				add_field => {
					"[event][id]" => "002417"
					"[rsa][message][id1]" => "002417"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002418
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Database ID <fld1>, object ID <fld2>, index ID <fld3>. Chain linkage mismatch. <fld4>->next = <fld5>, but <fld6>->prev = <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Database ID %{fld1}, object ID %{fld2}, index ID %{fld3}. Chain linkage mismatch. %{fld4}->next = %{fld5}, but %{fld6}->prev = %{fld7}." }
				id => "message-002418"
				add_field => {
					"[event][id]" => "002418"
					"[rsa][message][id1]" => "002418"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002419
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Extent <fld1> object ID <fld2>, index ID <fld3> is beyond the range of this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Extent %{fld1} object ID %{fld2}, index ID %{fld3} is beyond the range of this database." }
				id => "message-002419"
				add_field => {
					"[event][id]" => "002419"
					"[rsa][message][id1]" => "002419"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002420
		# line in RSA:  <fld30> <fld31> <event_source> Table error: IAM chain linkage error: Object ID <fld1>, index ID <fld2>. The next page for IAM page <fld3> is <fld4>, but the previous link for page <fld5> is <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: IAM chain linkage error: Object ID %{fld1}, index ID %{fld2}. The next page for IAM page %{fld3} is %{fld4}, but the previous link for page %{fld5} is %{fld6}." }
				id => "message-002420"
				add_field => {
					"[event][id]" => "002420"
					"[rsa][message][id1]" => "002420"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002421
		# line in RSA:  <fld30> <fld31> <event_source> Table error: IAM page <fld1> for object ID <fld2>, index ID <fld3> is linked in the IAM chain for object ID <fld4>, index ID <fld5> by page <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: IAM page %{fld1} for object ID %{fld2}, index ID %{fld3} is linked in the IAM chain for object ID %{fld4}, index ID %{fld5} by page %{fld6}." }
				id => "message-002421"
				add_field => {
					"[event][id]" => "002421"
					"[rsa][message][id1]" => "002421"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002422
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Invalid value detected in <fld1> for Object ID <fld2>, index ID <fld3>. Row skipped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Invalid value detected in %{fld1} for Object ID %{fld2}, index ID %{fld3}. Row skipped." }
				id => "message-002422"
				add_field => {
					"[event][id]" => "002422"
					"[rsa][message][id1]" => "002422"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002423
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Multiple IAM pages for object ID <fld1>, index ID <fld2> contain allocations for the same interval. IAM pages <fld3> and <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Multiple IAM pages for object ID %{fld1}, index ID %{fld2} contain allocations for the same interval. IAM pages %{fld3} and %{fld4}." }
				id => "message-002423"
				add_field => {
					"[event][id]" => "002423"
					"[rsa][message][id1]" => "002423"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002424
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2> B-tree level mismatch, page <fld3>. Level <fld4> does not match level <fld5> from parent <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2} B-tree level mismatch, page %{fld3}. Level %{fld4} does not match level %{fld5} from parent %{fld6}." }
				id => "message-002424"
				add_field => {
					"[event][id]" => "002424"
					"[rsa][message][id1]" => "002424"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002425
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2> B-tree level mismatch, page <fld3>. Level <fld4> does not match level <fld5> from previous <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2} B-tree level mismatch, page %{fld3}. Level %{fld4} does not match level %{fld5} from previous %{fld6}." }
				id => "message-002425"
				add_field => {
					"[event][id]" => "002425"
					"[rsa][message][id1]" => "002425"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002426
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2> cross-object chain linkage. Page <fld3> points to <fld4> in object ID <fld5>, index ID <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2} cross-object chain linkage. Page %{fld3} points to %{fld4} in object ID %{fld5}, index ID %{fld6}." }
				id => "message-002426"
				add_field => {
					"[event][id]" => "002426"
					"[rsa][message][id1]" => "002426"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002427
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2> will be rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2} will be rebuilt." }
				id => "message-002427"
				add_field => {
					"[event][id]" => "002427"
					"[rsa][message][id1]" => "002427"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002428
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, column '<fld3>'. The column ID <fld4> is not valid for this table. The valid range is from 1 to <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, column '%{fld3}'. The column ID %{fld4} is not valid for this table. The valid range is from 1 to %{fld5}." }
				id => "message-002428"
				add_field => {
					"[event][id]" => "002428"
					"[rsa][message][id1]" => "002428"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002429
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, page <fld3>, row <fld4>. Record check (<fld5>) failed. Values are <fld6> and <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, page %{fld3}, row %{fld4}. Record check (%{fld5}) failed. Values are %{fld6} and %{fld7}." }
				id => "message-002429"
				add_field => {
					"[event][id]" => "002429"
					"[rsa][message][id1]" => "002429"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002430
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, page <fld3>, row <fld4>. Test (<fld5>) failed. Values are <fld6> and <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, page %{fld3}, row %{fld4}. Test (%{fld5}) failed. Values are %{fld6} and %{fld7}." }
				id => "message-002430"
				add_field => {
					"[event][id]" => "002430"
					"[rsa][message][id1]" => "002430"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002431
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, page <fld3>. Test (<fld4>) failed. Address <fld32> is not aligned. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, page %{fld3}. Test (%{fld4}) failed. Address %{fld32} is not aligned." }
				id => "message-002431"
				add_field => {
					"[event][id]" => "002431"
					"[rsa][message][id1]" => "002431"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002432
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, page <fld3>. Test (<fld4>) failed. Slot <fld5>, offset <fld32> is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, page %{fld3}. Test (%{fld4}) failed. Slot %{fld5}, offset %{fld32} is invalid." }
				id => "message-002432"
				add_field => {
					"[event][id]" => "002432"
					"[rsa][message][id1]" => "002432"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002433
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, page <fld3>. Test (<fld4>) failed. Slot <fld5>, offset <fld32> overlaps with the prior row. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, page %{fld3}. Test (%{fld4}) failed. Slot %{fld5}, offset %{fld32} overlaps with the prior row." }
				id => "message-002433"
				add_field => {
					"[event][id]" => "002433"
					"[rsa][message][id1]" => "002433"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002434
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, page <fld3>. Test (<fld4>) failed. Slot <fld5>, row extends into free space at <fld32>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, page %{fld3}. Test (%{fld4}) failed. Slot %{fld5}, row extends into free space at %{fld32}." }
				id => "message-002434"
				add_field => {
					"[event][id]" => "002434"
					"[rsa][message][id1]" => "002434"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002435
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, page <fld3>. Test (<fld4>) failed. Values are <fld5> and <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, page %{fld3}. Test (%{fld4}) failed. Values are %{fld5} and %{fld6}." }
				id => "message-002435"
				add_field => {
					"[event][id]" => "002435"
					"[rsa][message][id1]" => "002435"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002436
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>, page ID <fld3>. The PageId in the page header = <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}, page ID %{fld3}. The PageId in the page header = %{fld4}." }
				id => "message-002436"
				add_field => {
					"[event][id]" => "002436"
					"[rsa][message][id1]" => "002436"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002437
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>.  The child page pointer <fld3> on PageId <fld4>, slot <fld5> is not a valid page for this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}.  The child page pointer %{fld3} on PageId %{fld4}, slot %{fld5} is not a valid page for this database." }
				id => "message-002437"
				add_field => {
					"[event][id]" => "002437"
					"[rsa][message][id1]" => "002437"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002438
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. B-tree chain linkage mismatch. <fld3>->next = <fld4>, but <fld5>->Prev = <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. B-tree chain linkage mismatch. %{fld3}->next = %{fld4}, but %{fld5}->Prev = %{fld6}." }
				id => "message-002438"
				add_field => {
					"[event][id]" => "002438"
					"[rsa][message][id1]" => "002438"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002439
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. B-tree page <fld3> has two parent nodes <fld4>, slot <fld5> and <fld6>, slot <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. B-tree page %{fld3} has two parent nodes %{fld4}, slot %{fld5} and %{fld6}, slot %{fld7}." }
				id => "message-002439"
				add_field => {
					"[event][id]" => "002439"
					"[rsa][message][id1]" => "002439"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002440
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, Index ID <fld2>. Duplicate keys on page <fld3> slot <fld4> and page <fld5> slot <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, Index ID %{fld2}. Duplicate keys on page %{fld3} slot %{fld4} and page %{fld5} slot %{fld6}." }
				id => "message-002440"
				add_field => {
					"[event][id]" => "002440"
					"[rsa][message][id1]" => "002440"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002441
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. Index node page <fld3>, slot <fld4> refers to child page <fld5> and previous child <fld6>, but they were not encountered. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. Index node page %{fld3}, slot %{fld4} refers to child page %{fld5} and previous child %{fld6}, but they were not encountered." }
				id => "message-002441"
				add_field => {
					"[event][id]" => "002441"
					"[rsa][message][id1]" => "002441"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002442
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, Index ID <fld2>. Keys out of order on page <fld3>, slots <fld4> and <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, Index ID %{fld2}. Keys out of order on page %{fld3}, slots %{fld4} and %{fld5}." }
				id => "message-002442"
				add_field => {
					"[event][id]" => "002442"
					"[rsa][message][id1]" => "002442"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002443
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. Page <fld3> is missing a reference from previous page <fld4>. Possible chain linkage problem. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. Page %{fld3} is missing a reference from previous page %{fld4}. Possible chain linkage problem." }
				id => "message-002443"
				add_field => {
					"[event][id]" => "002443"
					"[rsa][message][id1]" => "002443"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002444
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. Page <fld3> is missing references from parent (unknown) and previous (page <fld4>) nodes. Possible bad root entry in sysindexes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. Page %{fld3} is missing references from parent (unknown) and previous (page %{fld4}) nodes. Possible bad root entry in sysindexes." }
				id => "message-002444"
				add_field => {
					"[event][id]" => "002444"
					"[rsa][message][id1]" => "002444"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002445
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. Page <fld3> was not seen in the scan although its parent <fld4> and previous <fld5> refer to it. Check any previous errors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. Page %{fld3} was not seen in the scan although its parent %{fld4} and previous %{fld5} refer to it. Check any previous errors." }
				id => "message-002445"
				add_field => {
					"[event][id]" => "002445"
					"[rsa][message][id1]" => "002445"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002446
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. Parent node for page <fld3> was not encountered. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. Parent node for page %{fld3} was not encountered." }
				id => "message-002446"
				add_field => {
					"[event][id]" => "002446"
					"[rsa][message][id1]" => "002446"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002447
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. The high key value on page <fld3> (level <fld4>) is not less than the low key value in the parent <fld5>, slot <fld6> of the next page <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. The high key value on page %{fld3} (level %{fld4}) is not less than the low key value in the parent %{fld5}, slot %{fld6} of the next page %{fld7}." }
				id => "message-002447"
				add_field => {
					"[event][id]" => "002447"
					"[rsa][message][id1]" => "002447"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002448
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. The low key value on page <fld3> (level <fld4>) is not <fld5> the key value in the parent <fld6> slot <fld7>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. The low key value on page %{fld3} (level %{fld4}) is not %{fld5} the key value in the parent %{fld6} slot %{fld7}." }
				id => "message-002448"
				add_field => {
					"[event][id]" => "002448"
					"[rsa][message][id1]" => "002448"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002449
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. The next pointer of <fld3> refers to page <fld4>. Neither <fld5> nor its parent were encountered. Possible bad chain linkage. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. The next pointer of %{fld3} refers to page %{fld4}. Neither %{fld5} nor its parent were encountered. Possible bad chain linkage." }
				id => "message-002449"
				add_field => {
					"[event][id]" => "002449"
					"[rsa][message][id1]" => "002449"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002450
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>, index ID <fld2>. The previous link <fld3> on page <fld4> does not match the previous page <fld5> that the parent <fld6>, slot <fld7> expects for this page. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}, index ID %{fld2}. The previous link %{fld3} on page %{fld4} does not match the previous page %{fld5} that the parent %{fld6}, slot %{fld7} expects for this page." }
				id => "message-002450"
				add_field => {
					"[event][id]" => "002450"
					"[rsa][message][id1]" => "002450"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002451
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>. The text, ntext, or image node at page <fld2>, slot <fld3>, text ID  <fld4> does not match its reference from page <fld5>, slot <fld6>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}. The text, ntext, or image node at page %{fld2}, slot %{fld3}, text ID  %{fld4} does not match its reference from page %{fld5}, slot %{fld6}." }
				id => "message-002451"
				add_field => {
					"[event][id]" => "002451"
					"[rsa][message][id1]" => "002451"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002452
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>. The text, ntext, or image node at page <fld2>, slot <fld3>, text ID  <fld4> is not referenced. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}. The text, ntext, or image node at page %{fld2}, slot %{fld3}, text ID  %{fld4} is not referenced." }
				id => "message-002452"
				add_field => {
					"[event][id]" => "002452"
					"[rsa][message][id1]" => "002452"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002453
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1>. The text, ntext, or image node at page <fld2>, slot <fld3>, text ID  <fld4> is referenced by page <fld5>, slot <fld6>, but was not seen in the scan. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1}. The text, ntext, or image node at page %{fld2}, slot %{fld3}, text ID  %{fld4} is referenced by page %{fld5}, slot %{fld6}, but was not seen in the scan." }
				id => "message-002453"
				add_field => {
					"[event][id]" => "002453"
					"[rsa][message][id1]" => "002453"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002454
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Object ID <fld1> (object '<fld2>') does not match between '<fld3>' and '<fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Object ID %{fld1} (object '%{fld2}') does not match between '%{fld3}' and '%{fld4}'." }
				id => "message-002454"
				add_field => {
					"[event][id]" => "002454"
					"[rsa][message][id1]" => "002454"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002455
		# line in RSA:  <fld30> <fld31> <event_source> Table <fld1> Object ID <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table %{fld1} Object ID %{fld2}." }
				id => "message-002455"
				add_field => {
					"[event][id]" => "002455"
					"[rsa][message][id1]" => "002455"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002456
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Page <fld1> allocated to object ID <fld2>, index ID <fld3> was not seen.  Page may be invalid or have incorrect object ID information in its header. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Page %{fld1} allocated to object ID %{fld2}, index ID %{fld3} was not seen.  Page may be invalid or have incorrect object ID information in its header." }
				id => "message-002456"
				add_field => {
					"[event][id]" => "002456"
					"[rsa][message][id1]" => "002456"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002457
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Page <fld1> is allocated to object ID <fld2>, index ID <fld3>, not to object ID <fld4>, index ID <fld5> found in page header. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Page %{fld1} is allocated to object ID %{fld2}, index ID %{fld3}, not to object ID %{fld4}, index ID %{fld5} found in page header." }
				id => "message-002457"
				add_field => {
					"[event][id]" => "002457"
					"[rsa][message][id1]" => "002457"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002458
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Page <fld1> with object ID <fld2>, index ID <fld3> in its header is allocated by another object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Page %{fld1} with object ID %{fld2}, index ID %{fld3} in its header is allocated by another object." }
				id => "message-002458"
				add_field => {
					"[event][id]" => "002458"
					"[rsa][message][id1]" => "002458"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002460
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Page <fld1>, slot <fld2>, column <fld3> is not a valid complex column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Page %{fld1}, slot %{fld2}, column %{fld3} is not a valid complex column." }
				id => "message-002460"
				add_field => {
					"[event][id]" => "002460"
					"[rsa][message][id1]" => "002460"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002461
		# line in RSA:  <fld30> <fld31> <event_source> Table error: Table '<fld1>' (ID <fld2>). Missing or invalid key in index '<fld3>' (ID <fld4>) for the row: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: Table '%{fld1}' (ID %{fld2}). Missing or invalid key in index '%{fld3}' (ID %{fld4}) for the row:" }
				id => "message-002461"
				add_field => {
					"[event][id]" => "002461"
					"[rsa][message][id1]" => "002461"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002462
		# line in RSA:  <fld30> <fld31> <event_source> Table error: The text, ntext, or image node at page <fld1>, slot <fld2>, text ID  <fld3> has incorrect node type <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: The text, ntext, or image node at page %{fld1}, slot %{fld2}, text ID  %{fld3} has incorrect node type %{fld4}." }
				id => "message-002462"
				add_field => {
					"[event][id]" => "002462"
					"[rsa][message][id1]" => "002462"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002463
		# line in RSA:  <fld30> <fld31> <event_source> Table error: The text, ntext, or image node at page <fld1>, slot <fld2>, text ID  <fld3> has type <fld4>. It cannot be placed on a page of type <fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table error: The text, ntext, or image node at page %{fld1}, slot %{fld2}, text ID  %{fld3} has type %{fld4}. It cannot be placed on a page of type %{fld5}." }
				id => "message-002463"
				add_field => {
					"[event][id]" => "002463"
					"[rsa][message][id1]" => "002463"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002464
		# line in RSA:  <fld30> <fld31> <event_source> Table level constraint does not specify column list, table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table level constraint does not specify column list, table '%{fld1}'." }
				id => "message-002464"
				add_field => {
					"[event][id]" => "002464"
					"[rsa][message][id1]" => "002464"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002465
		# line in RSA:  <fld30> <fld31> <event_source> Table still open. Database ID <fld1>, table ID <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table still open. Database ID %{fld1}, table ID %{fld2}." }
				id => "message-002465"
				add_field => {
					"[event][id]" => "002465"
					"[rsa][message][id1]" => "002465"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002467
		# line in RSA:  <fld30> <fld31> <event_source> Table: '<fld1>' (<fld2>); index ID: <fld3>, database ID: <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table: '%{fld1}' (%{fld2}); index ID: %{fld3}, database ID: %{fld4}" }
				id => "message-002467"
				add_field => {
					"[event][id]" => "002467"
					"[rsa][message][id1]" => "002467"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2550
	# line in RSA:  <fld30> <fld31> <event_source> Table.column '<fld1>' 
	else if [logstash][msgparser][id] == "msgParserId2550" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Table.column '%{fld1}'" }
			id => "msgParserId2550"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId2552
	# line in RSA:  <fld30> <fld31> <event_source> Tables or functions '<fld1>' and '<fld2>' have the same exposed names. Use correlation names to distinguish them. 
	else if [logstash][msgparser][id] == "msgParserId2552" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Tables or functions '%{fld1}' and '%{fld2}' have the same exposed names. Use correlation names to distinguish them." }
			id => "msgParserId2552"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Tape" {
		# MESSAGE 002469
		# line in RSA:  <fld30> <fld31> <event_source> Tape '<fld1>' (Family ID: <fld2>, sequence  <fld3>) dismounted from tape drive ' <fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Tape '%{fld1}' (Family ID: %{fld2}, sequence  %{fld3}) dismounted from tape drive ' %{fld4}'." }
				id => "message-002469"
				add_field => {
					"[event][id]" => "002469"
					"[rsa][message][id1]" => "002469"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002470
		# line in RSA:  <fld30> <fld31> <event_source> Tape '<fld1>' (Family ID: <fld2>, sequence  <fld3>) mounted on tape drive ' <fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Tape '%{fld1}' (Family ID: %{fld2}, sequence  %{fld3}) mounted on tape drive ' %{fld4}'." }
				id => "message-002470"
				add_field => {
					"[event][id]" => "002470"
					"[rsa][message][id1]" => "002470"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Target" {
		# MESSAGE 002471
		# line in RSA:  <fld30> <fld31> <event_source> Target server '<fld1>' does not have any jobs assigned to it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Target server '%{fld1}' does not have any jobs assigned to it." }
				id => "message-002471"
				add_field => {
					"[event][id]" => "002471"
					"[rsa][message][id1]" => "002471"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002472
		# line in RSA:  <fld30> <fld31> <event_source> Target server '<fld1>' is already a member of group '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Target server '%{fld1}' is already a member of group '%{fld2}'." }
				id => "message-002472"
				add_field => {
					"[event][id]" => "002472"
					"[rsa][message][id1]" => "002472"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002473
		# line in RSA:  <fld30> <fld31> <event_source> Target server '<fld1>' is not a member of group '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Target server '%{fld1}' is not a member of group '%{fld2}'." }
				id => "message-002473"
				add_field => {
					"[event][id]" => "002473"
					"[rsa][message][id1]" => "002473"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2558
	# line in RSA:  <fld30> <fld31> <event_source> tempdb is skipped. You cannot run a query that requires tempdb 
	else if [logstash][msgparser][id] == "msgParserId2558" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} tempdb is skipped. You cannot run a query that requires tempdb" }
			id => "msgParserId2558"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Temporary" {
		# MESSAGE 002475
		# line in RSA:  <fld30> <fld31> <event_source> Temporary Message: File '<fld1>' has changed size from <fld2> to <fld3> bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Temporary Message: File '%{fld1}' has changed size from %{fld2} to %{fld3} bytes." }
				id => "message-002475"
				add_field => {
					"[event][id]" => "002475"
					"[rsa][message][id1]" => "002475"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002476
		# line in RSA:  <fld30> <fld31> <event_source> Temporary Message: The backup set does not contain pages for file '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Temporary Message: The backup set does not contain pages for file '%{fld1}'." }
				id => "message-002476"
				add_field => {
					"[event][id]" => "002476"
					"[rsa][message][id1]" => "002476"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Terminating" {
		# MESSAGE 002477
		# line in RSA:  <fld30> <fld31> <event_source> Terminating  immediate updating or queued updating UPDATE trigger because it is not the first trigger to fire.  Use sp_settriggerorder procedure to set the  firing order for trigger '<fld1>' to first. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Terminating  immediate updating or queued updating UPDATE trigger because it is not the first trigger to fire.  Use sp_settriggerorder procedure to set the  firing order for trigger '%{fld1}' to first." }
				id => "message-002477"
				add_field => {
					"[event][id]" => "002477"
					"[rsa][message][id1]" => "002477"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002478
		# line in RSA:  <fld30> <fld31> <event_source> Terminating immediate updating or queued updating DELETE trigger  because it is not the first trigger to fire. Use sp_settriggerorder procedure to set the  firing order for trigger '<fld1>' to first. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Terminating immediate updating or queued updating DELETE trigger  because it is not the first trigger to fire. Use sp_settriggerorder procedure to set the  firing order for trigger '%{fld1}' to first." }
				id => "message-002478"
				add_field => {
					"[event][id]" => "002478"
					"[rsa][message][id1]" => "002478"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002479
		# line in RSA:  <fld30> <fld31> <event_source> Terminating immediate updating or queued updating INSERT trigger because it is not the first trigger to fire. Use sp_settriggerorder procedure to set the firing order for trigger '<fld1>' to first. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Terminating immediate updating or queued updating INSERT trigger because it is not the first trigger to fire. Use sp_settriggerorder procedure to set the firing order for trigger '%{fld1}' to first." }
				id => "message-002479"
				add_field => {
					"[event][id]" => "002479"
					"[rsa][message][id1]" => "002479"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002480
		# line in RSA:  <fld30> <fld31> <event_source> Terminating this procedure. '<fld1>' is a forbidden value for the login name parameter in this procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Terminating this procedure. '%{fld1}' is a forbidden value for the login name parameter in this procedure." }
				id => "message-002480"
				add_field => {
					"[event][id]" => "002480"
					"[rsa][message][id1]" => "002480"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002481
		# line in RSA:  <fld30> <fld31> <event_source> Terminating this procedure. Cannot have an open transaction when this is run. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Terminating this procedure. Cannot have an open transaction when this is run." }
				id => "message-002481"
				add_field => {
					"[event][id]" => "002481"
					"[rsa][message][id1]" => "002481"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002482
		# line in RSA:  <fld30> <fld31> <event_source> Terminating this procedure. The <fld1> name '<fld2>' is absent or invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Terminating this procedure. The %{fld1} name '%{fld2}' is absent or invalid." }
				id => "message-002482"
				add_field => {
					"[event][id]" => "002482"
					"[rsa][message][id1]" => "002482"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002483
		# line in RSA:  <fld30> <fld31> <event_source> Terminating this procedure. The @action '<fld1>' is unrecognized. Try 'REPORT', 'UPDATE_ONE', or 'AUTO_FIX'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Terminating this procedure. The @action '%{fld1}' is unrecognized. Try 'REPORT', 'UPDATE_ONE', or 'AUTO_FIX'." }
				id => "message-002483"
				add_field => {
					"[event][id]" => "002483"
					"[rsa][message][id1]" => "002483"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002484
		# line in RSA:  <fld30> <fld31> <event_source> Terminating this procedure. The Action '<fld1>' is incompatible with the other parameter values ('<fld2>', '<fld3>'). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Terminating this procedure. The Action '%{fld1}' is incompatible with the other parameter values ('%{fld2}', '%{fld3}')." }
				id => "message-002484"
				add_field => {
					"[event][id]" => "002484"
					"[rsa][message][id1]" => "002484"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2569
	# line in RSA:  <fld30> <fld31> <event_source> text data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId2569" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} text data type %{fld1}" }
			id => "msgParserId2569"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Text" {
		# MESSAGE 002486
		# line in RSA:  <fld30> <fld31> <event_source> Text for '<fld1>' is missing from syscomments. The object must be dropped and re-created before it can be used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Text for '%{fld1}' is missing from syscomments. The object must be dropped and re-created before it can be used." }
				id => "message-002486"
				add_field => {
					"[event][id]" => "002486"
					"[rsa][message][id1]" => "002486"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002487
		# line in RSA:  <fld30> <fld31> <event_source> Text node referenced by more than one node. Object ID <fld1>, text, ntext, or image node page <fld2>, slot <fld3>, text ID  <fld4> is pointed to by page <fld5>, slot <fld6> and by page <fld7>, slot <fld8>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Text node referenced by more than one node. Object ID %{fld1}, text, ntext, or image node page %{fld2}, slot %{fld3}, text ID  %{fld4} is pointed to by page %{fld5}, slot %{fld6} and by page %{fld7}, slot %{fld8}." }
				id => "message-002487"
				add_field => {
					"[event][id]" => "002487"
					"[rsa][message][id1]" => "002487"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002488
		# line in RSA:  <fld30> <fld31> <event_source> Text, image, or ntext column was too large to send to the remote data source due to the storage interface used by the provider. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Text, image, or ntext column was too large to send to the remote data source due to the storage interface used by the provider." }
				id => "message-002488"
				add_field => {
					"[event][id]" => "002488"
					"[rsa][message][id1]" => "002488"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "The" {
		# MESSAGE 002489
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> of <fld2> is out of range. It must be between <fld3> and <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} of %{fld2} is out of range. It must be between %{fld3} and %{fld4}." }
				id => "message-002489"
				add_field => {
					"[event][id]" => "002489"
					"[rsa][message][id1]" => "002489"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002490
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> statement is obsolete and no longer supported. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} statement is obsolete and no longer supported." }
				id => "message-002490"
				add_field => {
					"[event][id]" => "002490"
					"[rsa][message][id1]" => "002490"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002491
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> function requires <fld2> arguments. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} function requires %{fld2} arguments." }
				id => "message-002491"
				add_field => {
					"[event][id]" => "002491"
					"[rsa][message][id1]" => "002491"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002493
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> operation cannot take a <fld2> data type as an argument. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} operation cannot take a %{fld2} data type as an argument." }
				id => "message-002493"
				add_field => {
					"[event][id]" => "002493"
					"[rsa][message][id1]" => "002493"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002494
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> option is allowed only with <fld2> syntax. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} option is allowed only with %{fld2} syntax." }
				id => "message-002494"
				add_field => {
					"[event][id]" => "002494"
					"[rsa][message][id1]" => "002494"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002495
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> statement is not allowed within a trigger. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} statement is not allowed within a trigger." }
				id => "message-002495"
				add_field => {
					"[event][id]" => "002495"
					"[rsa][message][id1]" => "002495"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002496
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> parameter is not supported on Windows 95/98 platforms. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} parameter is not supported on Windows 95/98 platforms." }
				id => "message-002496"
				add_field => {
					"[event][id]" => "002496"
					"[rsa][message][id1]" => "002496"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002497
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> parameter is not valid for a job step of type '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} parameter is not valid for a job step of type '%{fld2}'." }
				id => "message-002497"
				add_field => {
					"[event][id]" => "002497"
					"[rsa][message][id1]" => "002497"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002498
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1> was renamed to '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1} was renamed to '%{fld2}'." }
				id => "message-002498"
				add_field => {
					"[event][id]" => "002498"
					"[rsa][message][id1]" => "002498"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002499
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' cannot be dropped because it is bound to one or more <fld3>_MSG. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' cannot be dropped because it is bound to one or more %{fld3}_MSG." }
				id => "message-002499"
				add_field => {
					"[event][id]" => "002499"
					"[rsa][message][id1]" => "002499"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002500
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' cannot be found in <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' cannot be found in %{fld3}." }
				id => "message-002500"
				add_field => {
					"[event][id]" => "002500"
					"[rsa][message][id1]" => "002500"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002501
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' cannot be removed because it is not empty. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' cannot be removed because it is not empty." }
				id => "message-002501"
				add_field => {
					"[event][id]" => "002501"
					"[rsa][message][id1]" => "002501"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002502
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' does not exist in database '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' does not exist in database '%{fld3}'." }
				id => "message-002502"
				add_field => {
					"[event][id]" => "002502"
					"[rsa][message][id1]" => "002502"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002503
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' has been removed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' has been removed." }
				id => "message-002503"
				add_field => {
					"[event][id]" => "002503"
					"[rsa][message][id1]" => "002503"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002504
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' is dependent on <fld3>_MSG '<fld4>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' is dependent on %{fld3}_MSG '%{fld4}'." }
				id => "message-002504"
				add_field => {
					"[event][id]" => "002504"
					"[rsa][message][id1]" => "002504"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002505
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' is dependent on <fld3>_MSG. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' is dependent on %{fld3}_MSG." }
				id => "message-002505"
				add_field => {
					"[event][id]" => "002505"
					"[rsa][message][id1]" => "002505"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002506
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' is out of the range for numeric representation (maximum precision 38). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' is out of the range for numeric representation (maximum precision 38)." }
				id => "message-002506"
				add_field => {
					"[event][id]" => "002506"
					"[rsa][message][id1]" => "002506"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002507
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG '<fld2>' is out of the range of computer representation (<fld3> bytes). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG '%{fld2}' is out of the range of computer representation (%{fld3} bytes)." }
				id => "message-002507"
				add_field => {
					"[event][id]" => "002507"
					"[rsa][message][id1]" => "002507"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002508
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG already has the '<fld2>' property set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG already has the '%{fld2}' property set." }
				id => "message-002508"
				add_field => {
					"[event][id]" => "002508"
					"[rsa][message][id1]" => "002508"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002509
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG name '<fld2>' contains more than the maximum number of prefixes. The maximum is <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG name '%{fld2}' contains more than the maximum number of prefixes. The maximum is %{fld3}." }
				id => "message-002509"
				add_field => {
					"[event][id]" => "002509"
					"[rsa][message][id1]" => "002509"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002510
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG name '<fld2>' has been set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG name '%{fld2}' has been set." }
				id => "message-002510"
				add_field => {
					"[event][id]" => "002510"
					"[rsa][message][id1]" => "002510"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002511
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG property '<fld2>' has been set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG property '%{fld2}' has been set." }
				id => "message-002511"
				add_field => {
					"[event][id]" => "002511"
					"[rsa][message][id1]" => "002511"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002512
		# line in RSA:  <fld30> <fld31> <event_source> The <fld1>_MSG that starts with '<fld2>' is too long. Maximum length is <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{fld1}_MSG that starts with '%{fld2}' is too long. Maximum length is %{fld3}." }
				id => "message-002512"
				add_field => {
					"[event][id]" => "002512"
					"[rsa][message][id1]" => "002512"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002513
		# line in RSA:  <fld30> <fld31> <event_source> The '<fld1>' procedure attempted to return a status of NULL, which is not allowed. A status of 0 will be returned instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The '%{fld1}' procedure attempted to return a status of NULL, which is not allowed. A status of 0 will be returned instead." }
				id => "message-002513"
				add_field => {
					"[event][id]" => "002513"
					"[rsa][message][id1]" => "002513"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002514
		# line in RSA:  <fld30> <fld31> <event_source> The '<fld1>' and '<fld2>' options are not allowed on the same statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The '%{fld1}' and '%{fld2}' options are not allowed on the same statement." }
				id => "message-002514"
				add_field => {
					"[event][id]" => "002514"
					"[rsa][message][id1]" => "002514"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002515
		# line in RSA:  <fld30> <fld31> <event_source> The '<fld1>' device has a hardware sector size of <fld2>, but the block size parameter specifies an incompatible override value of <fld3>. Reissue the statement using a compatible block size. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The '%{fld1}' device has a hardware sector size of %{fld2}, but the block size parameter specifies an incompatible override value of %{fld3}. Reissue the statement using a compatible block size." }
				id => "message-002515"
				add_field => {
					"[event][id]" => "002515"
					"[rsa][message][id1]" => "002515"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002516
		# line in RSA:  <fld30> <fld31> <event_source> The '<fld1>' option is ignored in this edition of SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The '%{fld1}' option is ignored in this edition of SQL Server." }
				id => "message-002516"
				add_field => {
					"[event][id]" => "002516"
					"[rsa][message][id1]" => "002516"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002517
		# line in RSA:  <fld30> <fld31> <event_source> The '<fld1>' database is not published for merge replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The '%{fld1}' database is not published for merge replication." }
				id => "message-002517"
				add_field => {
					"[event][id]" => "002517"
					"[rsa][message][id1]" => "002517"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002518
		# line in RSA:  <fld30> <fld31> <event_source> The '<fld1>' database is not published for transactional or snapshot replication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The '%{fld1}' database is not published for transactional or snapshot replication." }
				id => "message-002518"
				add_field => {
					"[event][id]" => "002518"
					"[rsa][message][id1]" => "002518"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002519
		# line in RSA:  <fld30> <fld31> <event_source> The '<fld1>' supplied has an invalid <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The '%{fld1}' supplied has an invalid %{fld2}." }
				id => "message-002519"
				add_field => {
					"[event][id]" => "002519"
					"[rsa][message][id1]" => "002519"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002520
		# line in RSA:  <fld30> <fld31> <event_source> The 'max_concurrent_dynamic_snapshots' publication property must be greater than or equal to zero. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The 'max_concurrent_dynamic_snapshots' publication property must be greater than or equal to zero." }
				id => "message-002520"
				add_field => {
					"[event][id]" => "002520"
					"[rsa][message][id1]" => "002520"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002521
		# line in RSA:  <fld30> <fld31> <event_source> The 'msrepl_tran_version' column must be in the vertical partition of the article that is enabled for updatable subscriptions; it cannot be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The 'msrepl_tran_version' column must be in the vertical partition of the article that is enabled for updatable subscriptions; it cannot be dropped." }
				id => "message-002521"
				add_field => {
					"[event][id]" => "002521"
					"[rsa][message][id1]" => "002521"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002522
		# line in RSA:  <fld30> <fld31> <event_source> The 'offload_server' property cannot be NULL or empty if the pull subscription agent is to be enabled for remote activation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The 'offload_server' property cannot be NULL or empty if the pull subscription agent is to be enabled for remote activation." }
				id => "message-002522"
				add_field => {
					"[event][id]" => "002522"
					"[rsa][message][id1]" => "002522"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002523
		# line in RSA:  <fld30> <fld31> <event_source> The 'offload_server' property cannot be the same as the Distributor name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The 'offload_server' property cannot be the same as the Distributor name." }
				id => "message-002523"
				add_field => {
					"[event][id]" => "002523"
					"[rsa][message][id1]" => "002523"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002524
		# line in RSA:  <fld30> <fld31> <event_source> The 'offload_server' property cannot be the same as the Subscriber server name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The 'offload_server' property cannot be the same as the Subscriber server name." }
				id => "message-002524"
				add_field => {
					"[event][id]" => "002524"
					"[rsa][message][id1]" => "002524"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002525
		# line in RSA:  <fld30> <fld31> <event_source> The 'schema_option' property for a merge article cannot be changed after a snapshot is generated for the publication. To change the 'schema_option' property of this article the corresponding merge publication must be dropped and re-created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The 'schema_option' property for a merge article cannot be changed after a snapshot is generated for the publication. To change the 'schema_option' property of this article the corresponding merge publication must be dropped and re-created." }
				id => "message-002525"
				add_field => {
					"[event][id]" => "002525"
					"[rsa][message][id1]" => "002525"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002526
		# line in RSA:  <fld30> <fld31> <event_source> The 'status' parameter value must be either 'active' or 'unsynced'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The 'status' parameter value must be either 'active' or 'unsynced'." }
				id => "message-002526"
				add_field => {
					"[event][id]" => "002526"
					"[rsa][message][id1]" => "002526"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002527
		# line in RSA:  <fld30> <fld31> <event_source> The 'status' value must be 'no column names', 'include column names', 'string literals', 'parameters', 'DTS horizontal partitions' or 'no DTS horizontal partitions'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The 'status' value must be 'no column names', 'include column names', 'string literals', 'parameters', 'DTS horizontal partitions' or 'no DTS horizontal partitions'." }
				id => "message-002527"
				add_field => {
					"[event][id]" => "002527"
					"[rsa][message][id1]" => "002527"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002528
		# line in RSA:  <fld30> <fld31> <event_source> The "user options" config value (<fld1>) was rejected because it would set incompatible options. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The \"user options\" config value (%{fld1}) was rejected because it would set incompatible options." }
				id => "message-002528"
				add_field => {
					"[event][id]" => "002528"
					"[rsa][message][id1]" => "002528"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002529
		# line in RSA:  <fld30> <fld31> <event_source> The @agent_type must be 1 (Snapshot), 2 (Logreader), 3 (Distribution), or 4 (Merge) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @agent_type must be 1 (Snapshot), 2 (Logreader), 3 (Distribution), or 4 (Merge)" }
				id => "message-002529"
				add_field => {
					"[event][id]" => "002529"
					"[rsa][message][id1]" => "002529"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002530
		# line in RSA:  <fld30> <fld31> <event_source> The @agent_type parameter must be one of 'distribution', 'merge', or NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @agent_type parameter must be one of 'distribution', 'merge', or NULL." }
				id => "message-002530"
				add_field => {
					"[event][id]" => "002530"
					"[rsa][message][id1]" => "002530"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002531
		# line in RSA:  <fld30> <fld31> <event_source> The @article parameter value must be 'all' for immediate_sync publications. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @article parameter value must be 'all' for immediate_sync publications." }
				id => "message-002531"
				add_field => {
					"[event][id]" => "002531"
					"[rsa][message][id1]" => "002531"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002532
		# line in RSA:  <fld30> <fld31> <event_source> The @change_active flag may not be specified for articles with manual filters or views. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @change_active flag may not be specified for articles with manual filters or views." }
				id => "message-002532"
				add_field => {
					"[event][id]" => "002532"
					"[rsa][message][id1]" => "002532"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002533
		# line in RSA:  <fld30> <fld31> <event_source> The @ftp_port parameter cannot be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @ftp_port parameter cannot be NULL." }
				id => "message-002533"
				add_field => {
					"[event][id]" => "002533"
					"[rsa][message][id1]" => "002533"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002534
		# line in RSA:  <fld30> <fld31> <event_source> The @max_distretention value must be larger than the @min_distretention value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @max_distretention value must be larger than the @min_distretention value." }
				id => "message-002534"
				add_field => {
					"[event][id]" => "002534"
					"[rsa][message][id1]" => "002534"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002535
		# line in RSA:  <fld30> <fld31> <event_source> The @operation parameter value must be either 'add' or 'drop'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @operation parameter value must be either 'add' or 'drop'." }
				id => "message-002535"
				add_field => {
					"[event][id]" => "002535"
					"[rsa][message][id1]" => "002535"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002536
		# line in RSA:  <fld30> <fld31> <event_source> The @optional_command_line is too long. Use an agent definition file.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @optional_command_line is too long. Use an agent definition file." }
				id => "message-002536"
				add_field => {
					"[event][id]" => "002536"
					"[rsa][message][id1]" => "002536"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002537
		# line in RSA:  <fld30> <fld31> <event_source> The @optname parameter value must be 'transactional' or 'merge'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @optname parameter value must be 'transactional' or 'merge'." }
				id => "message-002537"
				add_field => {
					"[event][id]" => "002537"
					"[rsa][message][id1]" => "002537"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002538
		# line in RSA:  <fld30> <fld31> <event_source> The @pre_creation_cmd parameter value must be 'none' or 'drop'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @pre_creation_cmd parameter value must be 'none' or 'drop'." }
				id => "message-002538"
				add_field => {
					"[event][id]" => "002538"
					"[rsa][message][id1]" => "002538"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002539
		# line in RSA:  <fld30> <fld31> <event_source> The @pre_creation_cmd parameter value must be 'none', 'drop', 'delete', or 'truncate'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @pre_creation_cmd parameter value must be 'none', 'drop', 'delete', or 'truncate'." }
				id => "message-002539"
				add_field => {
					"[event][id]" => "002539"
					"[rsa][message][id1]" => "002539"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002540
		# line in RSA:  <fld30> <fld31> <event_source> The @pre_creation_command parameter for a schema only article must be either 'none' or 'drop'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @pre_creation_command parameter for a schema only article must be either 'none' or 'drop'." }
				id => "message-002540"
				add_field => {
					"[event][id]" => "002540"
					"[rsa][message][id1]" => "002540"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002541
		# line in RSA:  <fld30> <fld31> <event_source> The @profile_type must be 0 (System) or 1 (Custom) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @profile_type must be 0 (System) or 1 (Custom)" }
				id => "message-002541"
				add_field => {
					"[event][id]" => "002541"
					"[rsa][message][id1]" => "002541"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002542
		# line in RSA:  <fld30> <fld31> <event_source> The @property parameter value must be 'sync_type', 'priority', or 'description'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @property parameter value must be 'sync_type', 'priority', or 'description'." }
				id => "message-002542"
				add_field => {
					"[event][id]" => "002542"
					"[rsa][message][id1]" => "002542"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002543
		# line in RSA:  <fld30> <fld31> <event_source> The @property parameter value must be either  'description', 'sync_object', 'type', 'ins_cmd', 'del_cmd', 'upd_cmd', 'filter', 'dest_table', 'dest_object', 'creation_script', 'pre_creation_cmd', 'status', 'schema_option', or 'destination_owner'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @property parameter value must be either  'description', 'sync_object', 'type', 'ins_cmd', 'del_cmd', 'upd_cmd', 'filter', 'dest_table', 'dest_object', 'creation_script', 'pre_creation_cmd', 'status', 'schema_option', or 'destination_owner'." }
				id => "message-002543"
				add_field => {
					"[event][id]" => "002543"
					"[rsa][message][id1]" => "002543"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002544
		# line in RSA:  <fld30> <fld31> <event_source> The @schema_option parameter for a procedure or function schema article can include only the options 0x0000000000000001 or 0x0000000000002000. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @schema_option parameter for a procedure or function schema article can include only the options 0x0000000000000001 or 0x0000000000002000." }
				id => "message-002544"
				add_field => {
					"[event][id]" => "002544"
					"[rsa][message][id1]" => "002544"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002545
		# line in RSA:  <fld30> <fld31> <event_source> The @security_mode parameter value must be 0 (SQL Server Authentication) or 1 (Windows Authentication). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @security_mode parameter value must be 0 (SQL Server Authentication) or 1 (Windows Authentication)." }
				id => "message-002545"
				add_field => {
					"[event][id]" => "002545"
					"[rsa][message][id1]" => "002545"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002546
		# line in RSA:  <fld30> <fld31> <event_source> The @status  parameter value must be 'initiated' or 'active'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @status  parameter value must be 'initiated' or 'active'." }
				id => "message-002546"
				add_field => {
					"[event][id]" => "002546"
					"[rsa][message][id1]" => "002546"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002547
		# line in RSA:  <fld30> <fld31> <event_source> The @status parameter value must be 'initiated', 'active', 'inactive', or 'subscribed'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @status parameter value must be 'initiated', 'active', 'inactive', or 'subscribed'." }
				id => "message-002547"
				add_field => {
					"[event][id]" => "002547"
					"[rsa][message][id1]" => "002547"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002548
		# line in RSA:  <fld30> <fld31> <event_source> The @status parameter value must be either 'active' or 'inactive'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @status parameter value must be either 'active' or 'inactive'." }
				id => "message-002548"
				add_field => {
					"[event][id]" => "002548"
					"[rsa][message][id1]" => "002548"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002549
		# line in RSA:  <fld30> <fld31> <event_source> The @status parameter value must be NULL for 'automatic' sync_type when you add subscriptions to an immediate_sync publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @status parameter value must be NULL for 'automatic' sync_type when you add subscriptions to an immediate_sync publication." }
				id => "message-002549"
				add_field => {
					"[event][id]" => "002549"
					"[rsa][message][id1]" => "002549"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002550
		# line in RSA:  <fld30> <fld31> <event_source> The @sync_mode parameter value must be 'native' or 'character'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @sync_mode parameter value must be 'native' or 'character'." }
				id => "message-002550"
				add_field => {
					"[event][id]" => "002550"
					"[rsa][message][id1]" => "002550"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002551
		# line in RSA:  <fld30> <fld31> <event_source> The @sync_type parameter value must be 'automatic' or 'none'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @sync_type parameter value must be 'automatic' or 'none'." }
				id => "message-002551"
				add_field => {
					"[event][id]" => "002551"
					"[rsa][message][id1]" => "002551"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002552
		# line in RSA:  <fld30> <fld31> <event_source> The @target_name parameter must be supplied when specifying an @enum_type of 'TARGET'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @target_name parameter must be supplied when specifying an @enum_type of 'TARGET'." }
				id => "message-002552"
				add_field => {
					"[event][id]" => "002552"
					"[rsa][message][id1]" => "002552"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002553
		# line in RSA:  <fld30> <fld31> <event_source> The @target_name parameter should not be supplied when specifying an @enum_type of 'ALL' or 'ACTUAL'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @target_name parameter should not be supplied when specifying an @enum_type of 'ALL' or 'ACTUAL'." }
				id => "message-002553"
				add_field => {
					"[event][id]" => "002553"
					"[rsa][message][id1]" => "002553"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002554
		# line in RSA:  <fld30> <fld31> <event_source> The @TriggerType parameter value must be 'insert', 'update', or 'delete'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @TriggerType parameter value must be 'insert', 'update', or 'delete'." }
				id => "message-002554"
				add_field => {
					"[event][id]" => "002554"
					"[rsa][message][id1]" => "002554"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002555
		# line in RSA:  <fld30> <fld31> <event_source> The @type parameter passed to sp_helpreplicationdb must be either 'pub' or 'sub'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @type parameter passed to sp_helpreplicationdb must be either 'pub' or 'sub'." }
				id => "message-002555"
				add_field => {
					"[event][id]" => "002555"
					"[rsa][message][id1]" => "002555"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002556
		# line in RSA:  <fld30> <fld31> <event_source> The @value parameter value must be either 'true' or 'false'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The @value parameter value must be either 'true' or 'false'." }
				id => "message-002556"
				add_field => {
					"[event][id]" => "002556"
					"[rsa][message][id1]" => "002556"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002557
		# line in RSA:  <fld30> <fld31> <event_source> The Active Directory operation on publication '<fld1>' could not be completed bacause Active Directory client package is not installed properly on the machine where SQL Server is running. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Active Directory operation on publication '%{fld1}' could not be completed bacause Active Directory client package is not installed properly on the machine where SQL Server is running." }
				id => "message-002557"
				add_field => {
					"[event][id]" => "002557"
					"[rsa][message][id1]" => "002557"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002558
		# line in RSA:  <fld30> <fld31> <event_source> The agent is suspect. No response within last <fld1> minutes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The agent is suspect. No response within last %{fld1} minutes." }
				id => "message-002558"
				add_field => {
					"[event][id]" => "002558"
					"[rsa][message][id1]" => "002558"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002559
		# line in RSA:  <fld30> <fld31> <event_source> The agent profile '<fld1>' could not be found at the Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The agent profile '%{fld1}' could not be found at the Distributor." }
				id => "message-002559"
				add_field => {
					"[event][id]" => "002559"
					"[rsa][message][id1]" => "002559"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002560
		# line in RSA:  <fld30> <fld31> <event_source> The agent profile cannot be used by heterogeneous Subscribers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The agent profile cannot be used by heterogeneous Subscribers." }
				id => "message-002560"
				add_field => {
					"[event][id]" => "002560"
					"[rsa][message][id1]" => "002560"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002561
		# line in RSA:  <fld30> <fld31> <event_source> The application role '<fld1>' is now active. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The application role '%{fld1}' is now active." }
				id => "message-002561"
				add_field => {
					"[event][id]" => "002561"
					"[rsa][message][id1]" => "002561"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002562
		# line in RSA:  <fld30> <fld31> <event_source> The application role password must not be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The application role password must not be NULL." }
				id => "message-002562"
				add_field => {
					"[event][id]" => "002562"
					"[rsa][message][id1]" => "002562"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002563
		# line in RSA:  <fld30> <fld31> <event_source> The article '<fld1>' already exists in another publication with a different article resolver. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article '%{fld1}' already exists in another publication with a different article resolver." }
				id => "message-002563"
				add_field => {
					"[event][id]" => "002563"
					"[rsa][message][id1]" => "002563"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002564
		# line in RSA:  <fld30> <fld31> <event_source> The article '<fld1>' already exists on another publication with a different column tracking option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article '%{fld1}' already exists on another publication with a different column tracking option." }
				id => "message-002564"
				add_field => {
					"[event][id]" => "002564"
					"[rsa][message][id1]" => "002564"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002565
		# line in RSA:  <fld30> <fld31> <event_source> The article '<fld1>' could not be added to the publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article '%{fld1}' could not be added to the publication '%{fld2}'." }
				id => "message-002565"
				add_field => {
					"[event][id]" => "002565"
					"[rsa][message][id1]" => "002565"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002566
		# line in RSA:  <fld30> <fld31> <event_source> The article '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article '%{fld1}' does not exist." }
				id => "message-002566"
				add_field => {
					"[event][id]" => "002566"
					"[rsa][message][id1]" => "002566"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002567
		# line in RSA:  <fld30> <fld31> <event_source> The article '<fld1>' exists in publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article '%{fld1}' exists in publication '%{fld2}'." }
				id => "message-002567"
				add_field => {
					"[event][id]" => "002567"
					"[rsa][message][id1]" => "002567"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002568
		# line in RSA:  <fld30> <fld31> <event_source> The article '<fld1>' should enable column tracking to use the '<fld2>' resolver. The default resolver will be used to resolve conflicts on this article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article '%{fld1}' should enable column tracking to use the '%{fld2}' resolver. The default resolver will be used to resolve conflicts on this article." }
				id => "message-002568"
				add_field => {
					"[event][id]" => "002568"
					"[rsa][message][id1]" => "002568"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002569
		# line in RSA:  <fld30> <fld31> <event_source> The article cannot be created on table '<fld1>' because it has more than <fld2> columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article cannot be created on table '%{fld1}' because it has more than %{fld2} columns." }
				id => "message-002569"
				add_field => {
					"[event][id]" => "002569"
					"[rsa][message][id1]" => "002569"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002570
		# line in RSA:  <fld30> <fld31> <event_source> The article does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article does not exist." }
				id => "message-002570"
				add_field => {
					"[event][id]" => "002570"
					"[rsa][message][id1]" => "002570"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002571
		# line in RSA:  <fld30> <fld31> <event_source> The article filter could not be added to the article '<fld1>' in the publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article filter could not be added to the article '%{fld1}' in the publication '%{fld2}'." }
				id => "message-002571"
				add_field => {
					"[event][id]" => "002571"
					"[rsa][message][id1]" => "002571"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002572
		# line in RSA:  <fld30> <fld31> <event_source> The article filter could not be dropped from the article '<fld1>' in the publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article filter could not be dropped from the article '%{fld1}' in the publication '%{fld2}'." }
				id => "message-002572"
				add_field => {
					"[event][id]" => "002572"
					"[rsa][message][id1]" => "002572"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002573
		# line in RSA:  <fld30> <fld31> <event_source> The article parameter '@schema_option' cannot be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article parameter '@schema_option' cannot be NULL." }
				id => "message-002573"
				add_field => {
					"[event][id]" => "002573"
					"[rsa][message][id1]" => "002573"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002574
		# line in RSA:  <fld30> <fld31> <event_source> The article property 'status' cannot include bit 64, 'DTS horizontal partitions' because the publication does not allow data transformations. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article property 'status' cannot include bit 64, 'DTS horizontal partitions' because the publication does not allow data transformations." }
				id => "message-002574"
				add_field => {
					"[event][id]" => "002574"
					"[rsa][message][id1]" => "002574"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002575
		# line in RSA:  <fld30> <fld31> <event_source> The article resolver supplied is either invalid or nonexistent. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The article resolver supplied is either invalid or nonexistent." }
				id => "message-002575"
				add_field => {
					"[event][id]" => "002575"
					"[rsa][message][id1]" => "002575"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002576
		# line in RSA:  <fld30> <fld31> <event_source> The attempted insert or update failed because the target view either specifies WITH CHECK OPTION or spans a view that specifies WITH CHECK OPTION and one or more rows resulting from the operation did not qualify under the CHECK OPTION constraint. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The attempted insert or update failed because the target view either specifies WITH CHECK OPTION or spans a view that specifies WITH CHECK OPTION and one or more rows resulting from the operation did not qualify under the CHECK OPTION constraint." }
				id => "message-002576"
				add_field => {
					"[event][id]" => "002576"
					"[rsa][message][id1]" => "002576"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002577
		# line in RSA:  <fld30> <fld31> <event_source> The backed-up database has on-disk structure version <fld1>. The server supports version <fld2> and cannot restore or upgrade this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backed-up database has on-disk structure version %{fld1}. The server supports version %{fld2} and cannot restore or upgrade this database." }
				id => "message-002577"
				add_field => {
					"[event][id]" => "002577"
					"[rsa][message][id1]" => "002577"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002578
		# line in RSA:  <fld30> <fld31> <event_source> The backup data in '<fld1>' is incorrectly formatted. Backups cannot be appended, but existing backup sets may still be usable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backup data in '%{fld1}' is incorrectly formatted. Backups cannot be appended, but existing backup sets may still be usable." }
				id => "message-002578"
				add_field => {
					"[event][id]" => "002578"
					"[rsa][message][id1]" => "002578"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002579
		# line in RSA:  <fld30> <fld31> <event_source> The backup of the system database on device <fld1> cannot be restored because it was created by a different version of the server ( <fld2>) than this server ( <fld3>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backup of the system database on device %{fld1} cannot be restored because it was created by a different version of the server ( %{fld2}) than this server ( %{fld3})." }
				id => "message-002579"
				add_field => {
					"[event][id]" => "002579"
					"[rsa][message][id1]" => "002579"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002580
		# line in RSA:  <fld30> <fld31> <event_source> The backup operation cannot be restarted as the log has been truncated. Reissue the statement without the RESTART clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backup operation cannot be restarted as the log has been truncated. Reissue the statement without the RESTART clause." }
				id => "message-002580"
				add_field => {
					"[event][id]" => "002580"
					"[rsa][message][id1]" => "002580"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002581
		# line in RSA:  <fld30> <fld31> <event_source> The backup set holds a backup of a database other than the existing '<fld1>' database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backup set holds a backup of a database other than the existing '%{fld1}' database." }
				id => "message-002581"
				add_field => {
					"[event][id]" => "002581"
					"[rsa][message][id1]" => "002581"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002582
		# line in RSA:  <fld30> <fld31> <event_source> The backup set in file '<fld1>' was created by <fld2> and cannot be used for this restore operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backup set in file '%{fld1}' was created by %{fld2} and cannot be used for this restore operation." }
				id => "message-002582"
				add_field => {
					"[event][id]" => "002582"
					"[rsa][message][id1]" => "002582"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002583
		# line in RSA:  <fld30> <fld31> <event_source> The backup set is valid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backup set is valid." }
				id => "message-002583"
				add_field => {
					"[event][id]" => "002583"
					"[rsa][message][id1]" => "002583"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002584
		# line in RSA:  <fld30> <fld31> <event_source> The backup set on device '<fld1>' uses a feature of the Microsoft Tape Format not supported by SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backup set on device '%{fld1}' uses a feature of the Microsoft Tape Format not supported by SQL Server." }
				id => "message-002584"
				add_field => {
					"[event][id]" => "002584"
					"[rsa][message][id1]" => "002584"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002585
		# line in RSA:  <fld30> <fld31> <event_source> The backup set on device '<fld1>' was terminated while it was being created and is incomplete. RESTORE sequence is terminated abnormally. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The backup set on device '%{fld1}' was terminated while it was being created and is incomplete. RESTORE sequence is terminated abnormally." }
				id => "message-002585"
				add_field => {
					"[event][id]" => "002585"
					"[rsa][message][id1]" => "002585"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002586
		# line in RSA:  <fld30> <fld31> <event_source> The block size parameter must supply a value that is a power of 2. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The block size parameter must supply a value that is a power of 2." }
				id => "message-002586"
				add_field => {
					"[event][id]" => "002586"
					"[rsa][message][id1]" => "002586"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002587
		# line in RSA:  <fld30> <fld31> <event_source> The bufclean system function was called on dirty buffer (page <fld1>, stat  <fld2>, objid  <fld3>, sstat <fld4>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The bufclean system function was called on dirty buffer (page %{fld1}, stat  %{fld2}, objid  %{fld3}, sstat %{fld4})." }
				id => "message-002587"
				add_field => {
					"[event][id]" => "002587"
					"[rsa][message][id1]" => "002587"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002588
		# line in RSA:  <fld30> <fld31> <event_source> The BUFFERCOUNT parameter must supply a value that allows at least one buffer per backup device. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The BUFFERCOUNT parameter must supply a value that allows at least one buffer per backup device." }
				id => "message-002588"
				add_field => {
					"[event][id]" => "002588"
					"[rsa][message][id1]" => "002588"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002589
		# line in RSA:  <fld30> <fld31> <event_source> The bulk data provider failed to allocate memory. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The bulk data provider failed to allocate memory." }
				id => "message-002589"
				add_field => {
					"[event][id]" => "002589"
					"[rsa][message][id1]" => "002589"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002590
		# line in RSA:  <fld30> <fld31> <event_source> The bulk data source does not support the SQLNUMERIC or SQLDECIMAL data types. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The bulk data source does not support the SQLNUMERIC or SQLDECIMAL data types." }
				id => "message-002590"
				add_field => {
					"[event][id]" => "002590"
					"[rsa][message][id1]" => "002590"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002591
		# line in RSA:  <fld30> <fld31> <event_source> The bulk data source provider string has a syntax error (' <fld1>') near character position <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The bulk data source provider string has a syntax error (' %{fld1}') near character position %{fld2}." }
				id => "message-002591"
				add_field => {
					"[event][id]" => "002591"
					"[rsa][message][id1]" => "002591"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002592
		# line in RSA:  <fld30> <fld31> <event_source> The bulk data source provider string has a syntax error near character position <fld1>. Expected ' <fld2>', but found ' <fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The bulk data source provider string has a syntax error near character position %{fld1}. Expected ' %{fld2}', but found ' %{fld3}'." }
				id => "message-002592"
				add_field => {
					"[event][id]" => "002592"
					"[rsa][message][id1]" => "002592"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002593
		# line in RSA:  <fld30> <fld31> <event_source> The bulk data source provider string has an invalid <fld1> property value <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The bulk data source provider string has an invalid %{fld1} property value %{fld2}." }
				id => "message-002593"
				add_field => {
					"[event][id]" => "002593"
					"[rsa][message][id1]" => "002593"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002594
		# line in RSA:  <fld30> <fld31> <event_source> The bulk data source provider string has an unsupported property name (<fld1>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The bulk data source provider string has an unsupported property name (%{fld1})." }
				id => "message-002594"
				add_field => {
					"[event][id]" => "002594"
					"[rsa][message][id1]" => "002594"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002595
		# line in RSA:  <fld30> <fld31> <event_source> The CASCADE, WITH GRANT or AS options cannot be specified with statement permissions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The CASCADE, WITH GRANT or AS options cannot be specified with statement permissions." }
				id => "message-002595"
				add_field => {
					"[event][id]" => "002595"
					"[rsa][message][id1]" => "002595"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002596
		# line in RSA:  <fld30> <fld31> <event_source> The change was canceled by the provider during notification. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The change was canceled by the provider during notification." }
				id => "message-002596"
				add_field => {
					"[event][id]" => "002596"
					"[rsa][message][id1]" => "002596"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002597
		# line in RSA:  <fld30> <fld31> <event_source> The checkpoint file was for a different backup or restore operation. Reissue the statement without the RESTART clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The checkpoint file was for a different backup or restore operation. Reissue the statement without the RESTART clause." }
				id => "message-002597"
				add_field => {
					"[event][id]" => "002597"
					"[rsa][message][id1]" => "002597"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002598
		# line in RSA:  <fld30> <fld31> <event_source> The checksum has changed to <fld1>. This shows that the row has been updated by another user. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The checksum has changed to %{fld1}. This shows that the row has been updated by another user." }
				id => "message-002598"
				add_field => {
					"[event][id]" => "002598"
					"[rsa][message][id1]" => "002598"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002599
		# line in RSA:  <fld30> <fld31> <event_source> The clustered index has been dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The clustered index has been dropped." }
				id => "message-002599"
				add_field => {
					"[event][id]" => "002599"
					"[rsa][message][id1]" => "002599"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002600
		# line in RSA:  <fld30> <fld31> <event_source> The clustered index on materialized view '<fld1>' may not contain nullable columns if it is to be published using the transaction-based method. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The clustered index on materialized view '%{fld1}' may not contain nullable columns if it is to be published using the transaction-based method." }
				id => "message-002600"
				add_field => {
					"[event][id]" => "002600"
					"[rsa][message][id1]" => "002600"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002601
		# line in RSA:  <fld30> <fld31> <event_source> The column '<fld1>' in table '<fld2>' cannot be null. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The column '%{fld1}' in table '%{fld2}' cannot be null." }
				id => "message-002601"
				add_field => {
					"[event][id]" => "002601"
					"[rsa][message][id1]" => "002601"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002602
		# line in RSA:  <fld30> <fld31> <event_source> The column '<fld1>' was specified multiple times for '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The column '%{fld1}' was specified multiple times for '%{fld2}'." }
				id => "message-002602"
				add_field => {
					"[event][id]" => "002602"
					"[rsa][message][id1]" => "002602"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002603
		# line in RSA:  <fld30> <fld31> <event_source> The column had a bad status. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The column had a bad status." }
				id => "message-002603"
				add_field => {
					"[event][id]" => "002603"
					"[rsa][message][id1]" => "002603"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002604
		# line in RSA:  <fld30> <fld31> <event_source> The column or user data type must be in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The column or user data type must be in the current database." }
				id => "message-002604"
				add_field => {
					"[event][id]" => "002604"
					"[rsa][message][id1]" => "002604"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002605
		# line in RSA:  <fld30> <fld31> <event_source> The column prefix '<fld1>' does not match with a table name or alias name used in the query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The column prefix '%{fld1}' does not match with a table name or alias name used in the query." }
				id => "message-002605"
				add_field => {
					"[event][id]" => "002605"
					"[rsa][message][id1]" => "002605"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002606
		# line in RSA:  <fld30> <fld31> <event_source> The column used the default value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The column used the default value." }
				id => "message-002606"
				add_field => {
					"[event][id]" => "002606"
					"[rsa][message][id1]" => "002606"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002607
		# line in RSA:  <fld30> <fld31> <event_source> The column was not added correctly to the article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The column was not added correctly to the article." }
				id => "message-002607"
				add_field => {
					"[event][id]" => "002607"
					"[rsa][message][id1]" => "002607"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002608
		# line in RSA:  <fld30> <fld31> <event_source> The column was skipped when setting data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The column was skipped when setting data." }
				id => "message-002608"
				add_field => {
					"[event][id]" => "002608"
					"[rsa][message][id1]" => "002608"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002609
		# line in RSA:  <fld30> <fld31> <event_source> The command script does not destroy all the objects that it creates. Revise the command script. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The command script does not destroy all the objects that it creates. Revise the command script." }
				id => "message-002609"
				add_field => {
					"[event][id]" => "002609"
					"[rsa][message][id1]" => "002609"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002610
		# line in RSA:  <fld30> <fld31> <event_source> The COMMIT TRANSACTION request has no corresponding BEGIN TRANSACTION. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The COMMIT TRANSACTION request has no corresponding BEGIN TRANSACTION." }
				id => "message-002610"
				add_field => {
					"[event][id]" => "002610"
					"[rsa][message][id1]" => "002610"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002611
		# line in RSA:  <fld30> <fld31> <event_source> The compatibility level of this database must be set to 70 or higher to be enabled for merge publishing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The compatibility level of this database must be set to 70 or higher to be enabled for merge publishing." }
				id => "message-002611"
				add_field => {
					"[event][id]" => "002611"
					"[rsa][message][id1]" => "002611"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002612
		# line in RSA:  <fld30> <fld31> <event_source> The compute by list does not match the order by list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The compute by list does not match the order by list." }
				id => "message-002612"
				add_field => {
					"[event][id]" => "002612"
					"[rsa][message][id1]" => "002612"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002613
		# line in RSA:  <fld30> <fld31> <event_source> The concurrent snapshot for publication '<fld1>' has not been activated by the Log Reader Agent. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The concurrent snapshot for publication '%{fld1}' has not been activated by the Log Reader Agent." }
				id => "message-002613"
				add_field => {
					"[event][id]" => "002613"
					"[rsa][message][id1]" => "002613"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002614
		# line in RSA:  <fld30> <fld31> <event_source> The configuration option '<fld1>' does not exist, or it may be an advanced option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The configuration option '%{fld1}' does not exist, or it may be an advanced option." }
				id => "message-002614"
				add_field => {
					"[event][id]" => "002614"
					"[rsa][message][id1]" => "002614"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002615
		# line in RSA:  <fld30> <fld31> <event_source> The configuration option '<fld1>' is not unique. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The configuration option '%{fld1}' is not unique." }
				id => "message-002615"
				add_field => {
					"[event][id]" => "002615"
					"[rsa][message][id1]" => "002615"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002616
		# line in RSA:  <fld30> <fld31> <event_source> The constraint '<fld1>' is being referenced by table '<fld2>', foreign key constraint '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The constraint '%{fld1}' is being referenced by table '%{fld2}', foreign key constraint '%{fld3}'." }
				id => "message-002616"
				add_field => {
					"[event][id]" => "002616"
					"[rsa][message][id1]" => "002616"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002617
		# line in RSA:  <fld30> <fld31> <event_source> The consumer cannot insert a new row before releasing previously-retrieved row handles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The consumer cannot insert a new row before releasing previously-retrieved row handles." }
				id => "message-002617"
				add_field => {
					"[event][id]" => "002617"
					"[rsa][message][id1]" => "002617"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002618
		# line in RSA:  <fld30> <fld31> <event_source> The consumer could not delete the row. A deletion is pending or has already been transmitted to the data source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The consumer could not delete the row. A deletion is pending or has already been transmitted to the data source." }
				id => "message-002618"
				add_field => {
					"[event][id]" => "002618"
					"[rsa][message][id1]" => "002618"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002619
		# line in RSA:  <fld30> <fld31> <event_source> The consumer could not delete the row. The insertion has been transmitted to the data source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The consumer could not delete the row. The insertion has been transmitted to the data source." }
				id => "message-002619"
				add_field => {
					"[event][id]" => "002619"
					"[rsa][message][id1]" => "002619"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002620
		# line in RSA:  <fld30> <fld31> <event_source> The conversion from char data type to money resulted in a money overflow error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The conversion from char data type to money resulted in a money overflow error." }
				id => "message-002620"
				add_field => {
					"[event][id]" => "002620"
					"[rsa][message][id1]" => "002620"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002621
		# line in RSA:  <fld30> <fld31> <event_source> The conversion from char data type to smallmoney data type resulted in a smallmoney overflow error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The conversion from char data type to smallmoney data type resulted in a smallmoney overflow error." }
				id => "message-002621"
				add_field => {
					"[event][id]" => "002621"
					"[rsa][message][id1]" => "002621"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002622
		# line in RSA:  <fld30> <fld31> <event_source> The conversion from datetime data type to smalldatetime data type resulted in a smalldatetime overflow error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The conversion from datetime data type to smalldatetime data type resulted in a smalldatetime overflow error." }
				id => "message-002622"
				add_field => {
					"[event][id]" => "002622"
					"[rsa][message][id1]" => "002622"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002623
		# line in RSA:  <fld30> <fld31> <event_source> The conversion of a char data type to a datetime data type resulted in an out-of-range datetime value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The conversion of a char data type to a datetime data type resulted in an out-of-range datetime value." }
				id => "message-002623"
				add_field => {
					"[event][id]" => "002623"
					"[rsa][message][id1]" => "002623"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002624
		# line in RSA:  <fld30> <fld31> <event_source> The conversion of char data type to smalldatetime data type resulted in an out-of-range smalldatetime value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The conversion of char data type to smalldatetime data type resulted in an out-of-range smalldatetime value." }
				id => "message-002624"
				add_field => {
					"[event][id]" => "002624"
					"[rsa][message][id1]" => "002624"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002625
		# line in RSA:  <fld30> <fld31> <event_source> The conversion of the <fld1> value '<fld2>' overflowed an <fld3> column. Use a larger integer column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The conversion of the %{fld1} value '%{fld2}' overflowed an %{fld3} column. Use a larger integer column." }
				id => "message-002625"
				add_field => {
					"[event][id]" => "002625"
					"[rsa][message][id1]" => "002625"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002626
		# line in RSA:  <fld30> <fld31> <event_source> The conversion of the <fld1> value '<fld2>' overflowed an int column. Maximum integer value exceeded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The conversion of the %{fld1} value '%{fld2}' overflowed an int column. Maximum integer value exceeded." }
				id => "message-002626"
				add_field => {
					"[event][id]" => "002626"
					"[rsa][message][id1]" => "002626"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002627
		# line in RSA:  <fld30> <fld31> <event_source> The copy of the subscription could not be made because the subscription to publication '<fld1>' has expired. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The copy of the subscription could not be made because the subscription to publication '%{fld1}' has expired." }
				id => "message-002627"
				add_field => {
					"[event][id]" => "002627"
					"[rsa][message][id1]" => "002627"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002628
		# line in RSA:  <fld30> <fld31> <event_source> The correlation name '<fld1>' has the same exposed name as table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The correlation name '%{fld1}' has the same exposed name as table '%{fld2}'." }
				id => "message-002628"
				add_field => {
					"[event][id]" => "002628"
					"[rsa][message][id1]" => "002628"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002629
		# line in RSA:  <fld30> <fld31> <event_source> The correlation name '<fld1>' is specified multiple times in a FROM clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The correlation name '%{fld1}' is specified multiple times in a FROM clause." }
				id => "message-002629"
				add_field => {
					"[event][id]" => "002629"
					"[rsa][message][id1]" => "002629"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002630
		# line in RSA:  <fld30> <fld31> <event_source> The CREATE DATABASE process is allocating  <fld1> MB on disk '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The CREATE DATABASE process is allocating  %{fld1} MB on disk '%{fld2}'." }
				id => "message-002630"
				add_field => {
					"[event][id]" => "002630"
					"[rsa][message][id1]" => "002630"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002631
		# line in RSA:  <fld30> <fld31> <event_source> The creation_script property cannot be NULL if a schema option of 0x0000000000000000 is specified for the article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The creation_script property cannot be NULL if a schema option of 0x0000000000000000 is specified for the article." }
				id => "message-002631"
				add_field => {
					"[event][id]" => "002631"
					"[rsa][message][id1]" => "002631"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002632
		# line in RSA:  <fld30> <fld31> <event_source> The Cross Database Chaining option cannot be set to the specified value on the specified database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Cross Database Chaining option cannot be set to the specified value on the specified database." }
				id => "message-002632"
				add_field => {
					"[event][id]" => "002632"
					"[rsa][message][id1]" => "002632"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002633
		# line in RSA:  <fld30> <fld31> <event_source> The CUBE and ROLLUP options are not allowed in a GROUP BY ALL clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The CUBE and ROLLUP options are not allowed in a GROUP BY ALL clause." }
				id => "message-002633"
				add_field => {
					"[event][id]" => "002633"
					"[rsa][message][id1]" => "002633"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002634
		# line in RSA:  <fld30> <fld31> <event_source> The current compatibility level is <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The current compatibility level is %{fld1}." }
				id => "message-002634"
				add_field => {
					"[event][id]" => "002634"
					"[rsa][message][id1]" => "002634"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002635
		# line in RSA:  <fld30> <fld31> <event_source> The current contents of process' input buffer are '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The current contents of process' input buffer are '%{fld1}'." }
				id => "message-002635"
				add_field => {
					"[event][id]" => "002635"
					"[rsa][message][id1]" => "002635"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002636
		# line in RSA:  <fld30> <fld31> <event_source> The current database does not contain a <fld1> named '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The current database does not contain a %{fld1} named '%{fld2}'." }
				id => "message-002636"
				add_field => {
					"[event][id]" => "002636"
					"[rsa][message][id1]" => "002636"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002637
		# line in RSA:  <fld30> <fld31> <event_source> The current mode is the same as the requested mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The current mode is the same as the requested mode." }
				id => "message-002637"
				add_field => {
					"[event][id]" => "002637"
					"[rsa][message][id1]" => "002637"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002638
		# line in RSA:  <fld30> <fld31> <event_source> The current transaction could not be exported to the remote provider. It has been rolled back. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The current transaction could not be exported to the remote provider. It has been rolled back." }
				id => "message-002638"
				add_field => {
					"[event][id]" => "002638"
					"[rsa][message][id1]" => "002638"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002639
		# line in RSA:  <fld30> <fld31> <event_source> The current user is not the database or object owner of table '<fld1>'. Cannot perform SET operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The current user is not the database or object owner of table '%{fld1}'. Cannot perform SET operation." }
				id => "message-002639"
				add_field => {
					"[event][id]" => "002639"
					"[rsa][message][id1]" => "002639"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002640
		# line in RSA:  <fld30> <fld31> <event_source> The cursor does not include the table being modified or the table is not updatable through the cursor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The cursor does not include the table being modified or the table is not updatable through the cursor." }
				id => "message-002640"
				add_field => {
					"[event][id]" => "002640"
					"[rsa][message][id1]" => "002640"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002641
		# line in RSA:  <fld30> <fld31> <event_source> The cursor has a FOR UPDATE list and the requested column to be updated is not in this list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The cursor has a FOR UPDATE list and the requested column to be updated is not in this list." }
				id => "message-002641"
				add_field => {
					"[event][id]" => "002641"
					"[rsa][message][id1]" => "002641"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002642
		# line in RSA:  <fld30> <fld31> <event_source> The cursor is already open. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The cursor is already open." }
				id => "message-002642"
				add_field => {
					"[event][id]" => "002642"
					"[rsa][message][id1]" => "002642"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002643
		# line in RSA:  <fld30> <fld31> <event_source> The cursor is READ ONLY. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The cursor is READ ONLY." }
				id => "message-002643"
				add_field => {
					"[event][id]" => "002643"
					"[rsa][message][id1]" => "002643"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002644
		# line in RSA:  <fld30> <fld31> <event_source> The cursor was not declared. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The cursor was not declared." }
				id => "message-002644"
				add_field => {
					"[event][id]" => "002644"
					"[rsa][message][id1]" => "002644"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002645
		# line in RSA:  <fld30> <fld31> <event_source> The custom stored procedure schema option is invalid for a snapshot publication article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The custom stored procedure schema option is invalid for a snapshot publication article." }
				id => "message-002645"
				add_field => {
					"[event][id]" => "002645"
					"[rsa][message][id1]" => "002645"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002646
		# line in RSA:  <fld30> <fld31> <event_source> The custom stored procedure was not specified in the article definition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The custom stored procedure was not specified in the article definition." }
				id => "message-002646"
				add_field => {
					"[event][id]" => "002646"
					"[rsa][message][id1]" => "002646"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002647
		# line in RSA:  <fld30> <fld31> <event_source> The data in table '<fld1>' is possibly inconsistent. REINDEX terminated. Run DBCC CHECKTABLE and report errors to your system administrator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data in table '%{fld1}' is possibly inconsistent. REINDEX terminated. Run DBCC CHECKTABLE and report errors to your system administrator." }
				id => "message-002647"
				add_field => {
					"[event][id]" => "002647"
					"[rsa][message][id1]" => "002647"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002648
		# line in RSA:  <fld30> <fld31> <event_source> The data necessary to complete this operation was not yet available to the provider. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data necessary to complete this operation was not yet available to the provider." }
				id => "message-002648"
				add_field => {
					"[event][id]" => "002648"
					"[rsa][message][id1]" => "002648"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002649
		# line in RSA:  <fld30> <fld31> <event_source> The data set on device '<fld1>' is a SQL Server backup set not compatible with this version of SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data set on device '%{fld1}' is a SQL Server backup set not compatible with this version of SQL Server." }
				id => "message-002649"
				add_field => {
					"[event][id]" => "002649"
					"[rsa][message][id1]" => "002649"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002650
		# line in RSA:  <fld30> <fld31> <event_source> The data set on device '<fld1>' is not a SQL Server backup set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data set on device '%{fld1}' is not a SQL Server backup set." }
				id => "message-002650"
				add_field => {
					"[event][id]" => "002650"
					"[rsa][message][id1]" => "002650"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002651
		# line in RSA:  <fld30> <fld31> <event_source> The data source name is not a simple object name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data source name is not a simple object name." }
				id => "message-002651"
				add_field => {
					"[event][id]" => "002651"
					"[rsa][message][id1]" => "002651"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002652
		# line in RSA:  <fld30> <fld31> <event_source> The data type <fld1> is invalid for the <fld2> function. Allowed types are: char/varchar, nchar/nvarchar, and binary/varbinary. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data type %{fld1} is invalid for the %{fld2} function. Allowed types are: char/varchar, nchar/nvarchar, and binary/varbinary." }
				id => "message-002652"
				add_field => {
					"[event][id]" => "002652"
					"[rsa][message][id1]" => "002652"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002653
		# line in RSA:  <fld30> <fld31> <event_source> The data type '<fld1>' already exists in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data type '%{fld1}' already exists in the current database." }
				id => "message-002653"
				add_field => {
					"[event][id]" => "002653"
					"[rsa][message][id1]" => "002653"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002654
		# line in RSA:  <fld30> <fld31> <event_source> The data type '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data type '%{fld1}' does not exist." }
				id => "message-002654"
				add_field => {
					"[event][id]" => "002654"
					"[rsa][message][id1]" => "002654"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002655
		# line in RSA:  <fld30> <fld31> <event_source> The data type '<fld1>' is invalid for transaction names or savepoint names. Allowed data types are char, varchar, nchar, or nvarchar. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data type '%{fld1}' is invalid for transaction names or savepoint names. Allowed data types are char, varchar, nchar, or nvarchar." }
				id => "message-002655"
				add_field => {
					"[event][id]" => "002655"
					"[rsa][message][id1]" => "002655"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002656
		# line in RSA:  <fld30> <fld31> <event_source> The data type '<fld1>' is reserved for future use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data type '%{fld1}' is reserved for future use." }
				id => "message-002656"
				add_field => {
					"[event][id]" => "002656"
					"[rsa][message][id1]" => "002656"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002658
		# line in RSA:  <fld30> <fld31> <event_source> The data value for one or more columns overflowed the type used by the provider. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data value for one or more columns overflowed the type used by the provider." }
				id => "message-002658"
				add_field => {
					"[event][id]" => "002658"
					"[rsa][message][id1]" => "002658"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002659
		# line in RSA:  <fld30> <fld31> <event_source> The data value violated the integrity constraints for the column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data value violated the integrity constraints for the column." }
				id => "message-002659"
				add_field => {
					"[event][id]" => "002659"
					"[rsa][message][id1]" => "002659"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002660
		# line in RSA:  <fld30> <fld31> <event_source> The data value violated the schema for the column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data value violated the schema for the column." }
				id => "message-002660"
				add_field => {
					"[event][id]" => "002660"
					"[rsa][message][id1]" => "002660"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002661
		# line in RSA:  <fld30> <fld31> <event_source> The data violated the integrity constraints for one or more columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The data violated the integrity constraints for one or more columns." }
				id => "message-002661"
				add_field => {
					"[event][id]" => "002661"
					"[rsa][message][id1]" => "002661"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002663
		# line in RSA:  <fld30> <fld31> <event_source> The database '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database '%{fld1}' already exists." }
				id => "message-002663"
				add_field => {
					"[event][id]" => "002663"
					"[rsa][message][id1]" => "002663"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002664
		# line in RSA:  <fld30> <fld31> <event_source> The database '<fld1>' cannot be renamed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database '%{fld1}' cannot be renamed." }
				id => "message-002664"
				add_field => {
					"[event][id]" => "002664"
					"[rsa][message][id1]" => "002664"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002665
		# line in RSA:  <fld30> <fld31> <event_source> The database '<fld1>' does not exist. Use sp_helpdb to show available databases. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database '%{fld1}' does not exist. Use sp_helpdb to show available databases." }
				id => "message-002665"
				add_field => {
					"[event][id]" => "002665"
					"[rsa][message][id1]" => "002665"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002666
		# line in RSA:  <fld30> <fld31> <event_source> The database '<fld1>' does not have a pull subscription to the specified publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database '%{fld1}' does not have a pull subscription to the specified publication." }
				id => "message-002666"
				add_field => {
					"[event][id]" => "002666"
					"[rsa][message][id1]" => "002666"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002667
		# line in RSA:  <fld30> <fld31> <event_source> The database '<fld1>' does not seem to be involved in log shipping. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database '%{fld1}' does not seem to be involved in log shipping." }
				id => "message-002667"
				add_field => {
					"[event][id]" => "002667"
					"[rsa][message][id1]" => "002667"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002668
		# line in RSA:  <fld30> <fld31> <event_source> The database '<fld1>' is already involved in log shipping. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database '%{fld1}' is already involved in log shipping." }
				id => "message-002668"
				add_field => {
					"[event][id]" => "002668"
					"[rsa][message][id1]" => "002668"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002669
		# line in RSA:  <fld30> <fld31> <event_source> The database already is multiuser. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database already is multiuser." }
				id => "message-002669"
				add_field => {
					"[event][id]" => "002669"
					"[rsa][message][id1]" => "002669"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002670
		# line in RSA:  <fld30> <fld31> <event_source> The database already is read/write. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database already is read/write." }
				id => "message-002670"
				add_field => {
					"[event][id]" => "002670"
					"[rsa][message][id1]" => "002670"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002671
		# line in RSA:  <fld30> <fld31> <event_source> The database already is read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database already is read-only." }
				id => "message-002671"
				add_field => {
					"[event][id]" => "002671"
					"[rsa][message][id1]" => "002671"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002672
		# line in RSA:  <fld30> <fld31> <event_source> The database already is single user. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database already is single user." }
				id => "message-002672"
				add_field => {
					"[event][id]" => "002672"
					"[rsa][message][id1]" => "002672"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002673
		# line in RSA:  <fld30> <fld31> <event_source> The database cannot be recovered because the files have been restored to inconsistent points in time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database cannot be recovered because the files have been restored to inconsistent points in time." }
				id => "message-002673"
				add_field => {
					"[event][id]" => "002673"
					"[rsa][message][id1]" => "002673"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002674
		# line in RSA:  <fld30> <fld31> <event_source> The database cannot be recovered because the log was not restored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database cannot be recovered because the log was not restored." }
				id => "message-002674"
				add_field => {
					"[event][id]" => "002674"
					"[rsa][message][id1]" => "002674"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002675
		# line in RSA:  <fld30> <fld31> <event_source> The database could not be exclusively locked to perform the operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database could not be exclusively locked to perform the operation." }
				id => "message-002675"
				add_field => {
					"[event][id]" => "002675"
					"[rsa][message][id1]" => "002675"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002676
		# line in RSA:  <fld30> <fld31> <event_source> The database has on-disk structure version <fld1>. The server supports version <fld2> and can only restore such a database that was inactive when it was backed up. This database was not inactive. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database has on-disk structure version %{fld1}. The server supports version %{fld2} and can only restore such a database that was inactive when it was backed up. This database was not inactive." }
				id => "message-002676"
				add_field => {
					"[event][id]" => "002676"
					"[rsa][message][id1]" => "002676"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002677
		# line in RSA:  <fld30> <fld31> <event_source> The database is already fully recovered. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is already fully recovered." }
				id => "message-002677"
				add_field => {
					"[event][id]" => "002677"
					"[rsa][message][id1]" => "002677"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002678
		# line in RSA:  <fld30> <fld31> <event_source> The database is attached from a subscription copy file without using sp_attach_subscription. Drop the database and reattach it using sp_attach_subscription. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is attached from a subscription copy file without using sp_attach_subscription. Drop the database and reattach it using sp_attach_subscription." }
				id => "message-002678"
				add_field => {
					"[event][id]" => "002678"
					"[rsa][message][id1]" => "002678"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002679
		# line in RSA:  <fld30> <fld31> <event_source> The database is marked suspect. Transaction logs cannot be restored. Use RESTORE DATABASE to recover the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is marked suspect. Transaction logs cannot be restored. Use RESTORE DATABASE to recover the database." }
				id => "message-002679"
				add_field => {
					"[event][id]" => "002679"
					"[rsa][message][id1]" => "002679"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002680
		# line in RSA:  <fld30> <fld31> <event_source> The database is not open. Execute a 'USE <fld1>' statement and rerun the DBCC statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is not open. Execute a 'USE %{fld1}' statement and rerun the DBCC statement." }
				id => "message-002680"
				add_field => {
					"[event][id]" => "002680"
					"[rsa][message][id1]" => "002680"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002681
		# line in RSA:  <fld30> <fld31> <event_source> The database is not published. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is not published." }
				id => "message-002681"
				add_field => {
					"[event][id]" => "002681"
					"[rsa][message][id1]" => "002681"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002682
		# line in RSA:  <fld30> <fld31> <event_source> The database is now multiuser. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is now multiuser." }
				id => "message-002682"
				add_field => {
					"[event][id]" => "002682"
					"[rsa][message][id1]" => "002682"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002683
		# line in RSA:  <fld30> <fld31> <event_source> The database is now offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is now offline." }
				id => "message-002683"
				add_field => {
					"[event][id]" => "002683"
					"[rsa][message][id1]" => "002683"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002684
		# line in RSA:  <fld30> <fld31> <event_source> The database is now read/write. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is now read/write." }
				id => "message-002684"
				add_field => {
					"[event][id]" => "002684"
					"[rsa][message][id1]" => "002684"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002685
		# line in RSA:  <fld30> <fld31> <event_source> The database is now read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is now read-only." }
				id => "message-002685"
				add_field => {
					"[event][id]" => "002685"
					"[rsa][message][id1]" => "002685"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002686
		# line in RSA:  <fld30> <fld31> <event_source> The database is now single user. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is now single user." }
				id => "message-002686"
				add_field => {
					"[event][id]" => "002686"
					"[rsa][message][id1]" => "002686"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002687
		# line in RSA:  <fld30> <fld31> <event_source> The database is offline already. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is offline already." }
				id => "message-002687"
				add_field => {
					"[event][id]" => "002687"
					"[rsa][message][id1]" => "002687"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002688
		# line in RSA:  <fld30> <fld31> <event_source> The database is renamed and in single user mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database is renamed and in single user mode." }
				id => "message-002688"
				add_field => {
					"[event][id]" => "002688"
					"[rsa][message][id1]" => "002688"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002689
		# line in RSA:  <fld30> <fld31> <event_source> The database must be owned by a member of the sysadmin role before it can be removed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database must be owned by a member of the sysadmin role before it can be removed." }
				id => "message-002689"
				add_field => {
					"[event][id]" => "002689"
					"[rsa][message][id1]" => "002689"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002690
		# line in RSA:  <fld30> <fld31> <event_source> The database name component of the object qualifier must be the name of the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database name component of the object qualifier must be the name of the current database." }
				id => "message-002690"
				add_field => {
					"[event][id]" => "002690"
					"[rsa][message][id1]" => "002690"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002691
		# line in RSA:  <fld30> <fld31> <event_source> The database name provided '<fld1>' must be the current database when executing this stored procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database name provided '%{fld1}' must be the current database when executing this stored procedure." }
				id => "message-002691"
				add_field => {
					"[event][id]" => "002691"
					"[rsa][message][id1]" => "002691"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002692
		# line in RSA:  <fld30> <fld31> <event_source> The database owner (DBO) does not have an entry in sysusers in database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database owner (DBO) does not have an entry in sysusers in database '%{fld1}'." }
				id => "message-002692"
				add_field => {
					"[event][id]" => "002692"
					"[rsa][message][id1]" => "002692"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002693
		# line in RSA:  <fld30> <fld31> <event_source> The database that you are attempting to certify cannot be in use at the same time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database that you are attempting to certify cannot be in use at the same time." }
				id => "message-002693"
				add_field => {
					"[event][id]" => "002693"
					"[rsa][message][id1]" => "002693"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002694
		# line in RSA:  <fld30> <fld31> <event_source> The database to be restored was named '<fld1>'. Reissue the statement using the WITH REPLACE option to overwrite the '<fld2>' database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The database to be restored was named '%{fld1}'. Reissue the statement using the WITH REPLACE option to overwrite the '%{fld2}' database." }
				id => "message-002694"
				add_field => {
					"[event][id]" => "002694"
					"[rsa][message][id1]" => "002694"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002695
		# line in RSA:  <fld30> <fld31> <event_source> The DATEADD function was called with bad type <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The DATEADD function was called with bad type %{fld1}." }
				id => "message-002695"
				add_field => {
					"[event][id]" => "002695"
					"[rsa][message][id1]" => "002695"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002696
		# line in RSA:  <fld30> <fld31> <event_source> The DBCC statement is not supported in this release. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The DBCC statement is not supported in this release." }
				id => "message-002696"
				add_field => {
					"[event][id]" => "002696"
					"[rsa][message][id1]" => "002696"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002697
		# line in RSA:  <fld30> <fld31> <event_source> The default '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The default '%{fld1}' does not exist." }
				id => "message-002697"
				add_field => {
					"[event][id]" => "002697"
					"[rsa][message][id1]" => "002697"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002698
		# line in RSA:  <fld30> <fld31> <event_source> The default collation for SQL Server has been reconfigured. Restart SQL Server to rebuild the table indexes on columns of character data types. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The default collation for SQL Server has been reconfigured. Restart SQL Server to rebuild the table indexes on columns of character data types." }
				id => "message-002698"
				add_field => {
					"[event][id]" => "002698"
					"[rsa][message][id1]" => "002698"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002699
		# line in RSA:  <fld30> <fld31> <event_source> The definition for column '<fld1>' must include a data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The definition for column '%{fld1}' must include a data type." }
				id => "message-002699"
				add_field => {
					"[event][id]" => "002699"
					"[rsa][message][id1]" => "002699"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002700
		# line in RSA:  <fld30> <fld31> <event_source> The definition for user-defined data type '<fld1>' has changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The definition for user-defined data type '%{fld1}' has changed." }
				id => "message-002700"
				add_field => {
					"[event][id]" => "002700"
					"[rsa][message][id1]" => "002700"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002701
		# line in RSA:  <fld30> <fld31> <event_source> The definition of object '<fld1>' has changed since it was compiled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The definition of object '%{fld1}' has changed since it was compiled." }
				id => "message-002701"
				add_field => {
					"[event][id]" => "002701"
					"[rsa][message][id1]" => "002701"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002702
		# line in RSA:  <fld30> <fld31> <event_source> The dependent aliases were also dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The dependent aliases were also dropped." }
				id => "message-002702"
				add_field => {
					"[event][id]" => "002702"
					"[rsa][message][id1]" => "002702"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002703
		# line in RSA:  <fld30> <fld31> <event_source> The dependent aliases were dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The dependent aliases were dropped." }
				id => "message-002703"
				add_field => {
					"[event][id]" => "002703"
					"[rsa][message][id1]" => "002703"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002704
		# line in RSA:  <fld30> <fld31> <event_source> The dependent aliases were mapped to the new database owner. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The dependent aliases were mapped to the new database owner." }
				id => "message-002704"
				add_field => {
					"[event][id]" => "002704"
					"[rsa][message][id1]" => "002704"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002705
		# line in RSA:  <fld30> <fld31> <event_source> The derived table '<fld1>' is not updatable because the definition contains the TOP clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The derived table '%{fld1}' is not updatable because the definition contains the TOP clause." }
				id => "message-002705"
				add_field => {
					"[event][id]" => "002705"
					"[rsa][message][id1]" => "002705"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002706
		# line in RSA:  <fld30> <fld31> <event_source> The destination database is already part of a log shipping plan. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The destination database is already part of a log shipping plan." }
				id => "message-002706"
				add_field => {
					"[event][id]" => "002706"
					"[rsa][message][id1]" => "002706"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002707
		# line in RSA:  <fld30> <fld31> <event_source> The destination owner name is not supported for publications that can have heterogeneous Subscribers. Use native mode bcp for this functionality. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The destination owner name is not supported for publications that can have heterogeneous Subscribers. Use native mode bcp for this functionality." }
				id => "message-002707"
				add_field => {
					"[event][id]" => "002707"
					"[rsa][message][id1]" => "002707"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002708
		# line in RSA:  <fld30> <fld31> <event_source> The device '<username>' does not exist. Use sp_helpdevice to show available devices. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The device '%{username}' does not exist. Use sp_helpdevice to show available devices." }
				id => "message-002708"
				add_field => {
					"[event][id]" => "002708"
					"[rsa][message][id1]" => "002708"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002710
		# line in RSA:  <fld30> <fld31> <event_source> The device is a RAM disk and cannot be used as a default device. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The device is a RAM disk and cannot be used as a default device." }
				id => "message-002710"
				add_field => {
					"[event][id]" => "002710"
					"[rsa][message][id1]" => "002710"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002711
		# line in RSA:  <fld30> <fld31> <event_source> The device is not a database device. Only database devices can be expanded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The device is not a database device. Only database devices can be expanded." }
				id => "message-002711"
				add_field => {
					"[event][id]" => "002711"
					"[rsa][message][id1]" => "002711"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002712
		# line in RSA:  <fld30> <fld31> <event_source> The differential bitmap was invalidated for database <fld1>. A full database backup is required before a differential backup can be performed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The differential bitmap was invalidated for database %{fld1}. A full database backup is required before a differential backup can be performed." }
				id => "message-002712"
				add_field => {
					"[event][id]" => "002712"
					"[rsa][message][id1]" => "002712"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002713
		# line in RSA:  <fld30> <fld31> <event_source> The distributed transaction associated with UOW <fld1> is in PREPARE state. Use KILL UOW WITH COMMIT/ABORT syntax to kill the transaction instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The distributed transaction associated with UOW %{fld1} is in PREPARE state. Use KILL UOW WITH COMMIT/ABORT syntax to kill the transaction instead." }
				id => "message-002713"
				add_field => {
					"[event][id]" => "002713"
					"[rsa][message][id1]" => "002713"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002714
		# line in RSA:  <fld30> <fld31> <event_source> The distributed transaction associated with UOW <fld1> is not in PREPARED state. Use KILL UOW to kill the transaction instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The distributed transaction associated with UOW %{fld1} is not in PREPARED state. Use KILL UOW to kill the transaction instead." }
				id => "message-002714"
				add_field => {
					"[event][id]" => "002714"
					"[rsa][message][id1]" => "002714"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002715
		# line in RSA:  <fld30> <fld31> <event_source> The distributed transaction with UOW <fld1> does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The distributed transaction with UOW %{fld1} does not exist." }
				id => "message-002715"
				add_field => {
					"[event][id]" => "002715"
					"[rsa][message][id1]" => "002715"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002716
		# line in RSA:  <fld30> <fld31> <event_source> The Distribution Agent for this subscription already exists (<fld1>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Distribution Agent for this subscription already exists (%{fld1})." }
				id => "message-002716"
				add_field => {
					"[event][id]" => "002716"
					"[rsa][message][id1]" => "002716"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002717
		# line in RSA:  <fld30> <fld31> <event_source> The distribution Publisher property, 'distributor_password', has no usage and is not supported for a Distributor running on Windows NT 4.0. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The distribution Publisher property, 'distributor_password', has no usage and is not supported for a Distributor running on Windows NT 4.0." }
				id => "message-002717"
				add_field => {
					"[event][id]" => "002717"
					"[rsa][message][id1]" => "002717"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002718
		# line in RSA:  <fld30> <fld31> <event_source> The Distributor has not been installed correctly.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Distributor has not been installed correctly." }
				id => "message-002718"
				add_field => {
					"[event][id]" => "002718"
					"[rsa][message][id1]" => "002718"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002721
		# line in RSA:  <fld30> <fld31> <event_source> The Distributor is not installed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Distributor is not installed." }
				id => "message-002721"
				add_field => {
					"[event][id]" => "002721"
					"[rsa][message][id1]" => "002721"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002722
		# line in RSA:  <fld30> <fld31> <event_source> The Distributor parameter must be '@heartbeat_interval'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Distributor parameter must be '@heartbeat_interval'." }
				id => "message-002722"
				add_field => {
					"[event][id]" => "002722"
					"[rsa][message][id1]" => "002722"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002723
		# line in RSA:  <fld30> <fld31> <event_source> The error description is '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The error description is '%{fld1}'." }
				id => "message-002723"
				add_field => {
					"[event][id]" => "002723"
					"[rsa][message][id1]" => "002723"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002724
		# line in RSA:  <fld30> <fld31> <event_source> The error has been repaired. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The error has been repaired." }
				id => "message-002724"
				add_field => {
					"[event][id]" => "002724"
					"[rsa][message][id1]" => "002724"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002725
		# line in RSA:  <fld30> <fld31> <event_source> The expanded dynamic snapshot view definition of one of the articles exceeds the system limit of 3499 characters. Consider using the default mechanism instead of the dynamic snapshot for initializing the specified subscription. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The expanded dynamic snapshot view definition of one of the articles exceeds the system limit of 3499 characters. Consider using the default mechanism instead of the dynamic snapshot for initializing the specified subscription." }
				id => "message-002725"
				add_field => {
					"[event][id]" => "002725"
					"[rsa][message][id1]" => "002725"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002726
		# line in RSA:  <fld30> <fld31> <event_source> The extended stored procedure '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The extended stored procedure '%{fld1}' does not exist." }
				id => "message-002726"
				add_field => {
					"[event][id]" => "002726"
					"[rsa][message][id1]" => "002726"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002727
		# line in RSA:  <fld30> <fld31> <event_source> The fetch type <fld1> cannot be used with dynamic cursors. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The fetch type %{fld1} cannot be used with dynamic cursors." }
				id => "message-002727"
				add_field => {
					"[event][id]" => "002727"
					"[rsa][message][id1]" => "002727"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002728
		# line in RSA:  <fld30> <fld31> <event_source> The file '<fld1>' has been expanded beyond its maximum size to prevent recovery from failing. Contact the system administrator for further assistance. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file '%{fld1}' has been expanded beyond its maximum size to prevent recovery from failing. Contact the system administrator for further assistance." }
				id => "message-002728"
				add_field => {
					"[event][id]" => "002728"
					"[rsa][message][id1]" => "002728"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002729
		# line in RSA:  <fld30> <fld31> <event_source> The file '<fld1>' has been expanded to prevent recovery from failing. Contact the system administrator for further assistance. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file '%{fld1}' has been expanded to prevent recovery from failing. Contact the system administrator for further assistance." }
				id => "message-002729"
				add_field => {
					"[event][id]" => "002729"
					"[rsa][message][id1]" => "002729"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002730
		# line in RSA:  <fld30> <fld31> <event_source> The file '<fld1>' already exists. It should be renamed or deleted so that a new log file can be created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file '%{fld1}' already exists. It should be renamed or deleted so that a new log file can be created." }
				id => "message-002730"
				add_field => {
					"[event][id]" => "002730"
					"[rsa][message][id1]" => "002730"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002731
		# line in RSA:  <fld30> <fld31> <event_source> The file '<fld1>' cannot be moved by this RESTORE operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file '%{fld1}' cannot be moved by this RESTORE operation." }
				id => "message-002731"
				add_field => {
					"[event][id]" => "002731"
					"[rsa][message][id1]" => "002731"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002732
		# line in RSA:  <fld30> <fld31> <event_source> The file '<fld1>' cannot be overwritten.  It is being used by database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file '%{fld1}' cannot be overwritten.  It is being used by database '%{fld2}'." }
				id => "message-002732"
				add_field => {
					"[event][id]" => "002732"
					"[rsa][message][id1]" => "002732"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002733
		# line in RSA:  <fld30> <fld31> <event_source> The file cannot be shrunk below page  <fld1>d until the log is backed up because it contains bulk logged pages. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file cannot be shrunk below page  %{fld1}d until the log is backed up because it contains bulk logged pages." }
				id => "message-002733"
				add_field => {
					"[event][id]" => "002733"
					"[rsa][message][id1]" => "002733"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002734
		# line in RSA:  <fld30> <fld31> <event_source> The file named '<fld1>' is already in use. Choose another name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file named '%{fld1}' is already in use. Choose another name." }
				id => "message-002734"
				add_field => {
					"[event][id]" => "002734"
					"[rsa][message][id1]" => "002734"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002735
		# line in RSA:  <fld30> <fld31> <event_source> The file named '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file named '%{fld1}' does not exist." }
				id => "message-002735"
				add_field => {
					"[event][id]" => "002735"
					"[rsa][message][id1]" => "002735"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002736
		# line in RSA:  <fld30> <fld31> <event_source> The file named '<fld1>' is a primary file and cannot be removed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file named '%{fld1}' is a primary file and cannot be removed." }
				id => "message-002736"
				add_field => {
					"[event][id]" => "002736"
					"[rsa][message][id1]" => "002736"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002737
		# line in RSA:  <fld30> <fld31> <event_source> The file on device '<fld1>' is not a valid Microsoft Tape Format backup set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The file on device '%{fld1}' is not a valid Microsoft Tape Format backup set." }
				id => "message-002737"
				add_field => {
					"[event][id]" => "002737"
					"[rsa][message][id1]" => "002737"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002738
		# line in RSA:  <fld30> <fld31> <event_source> The filegroup '<fld1>' cannot be restored because all of the files are not present in the backup set. File '<fld2>' is missing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The filegroup '%{fld1}' cannot be restored because all of the files are not present in the backup set. File '%{fld2}' is missing." }
				id => "message-002738"
				add_field => {
					"[event][id]" => "002738"
					"[rsa][message][id1]" => "002738"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002739
		# line in RSA:  <fld30> <fld31> <event_source> The filename '<fld1>' is invalid as a backup device name.  Reissue the BACKUP statement with a valid filename. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The filename '%{fld1}' is invalid as a backup device name.  Reissue the BACKUP statement with a valid filename." }
				id => "message-002739"
				add_field => {
					"[event][id]" => "002739"
					"[rsa][message][id1]" => "002739"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002740
		# line in RSA:  <fld30> <fld31> <event_source> The files '<fld1>' and '<fld2>' are both primary files. A database can only have one primary file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The files '%{fld1}' and '%{fld2}' are both primary files. A database can only have one primary file." }
				id => "message-002740"
				add_field => {
					"[event][id]" => "002740"
					"[rsa][message][id1]" => "002740"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002741
		# line in RSA:  <fld30> <fld31> <event_source> The filter '<fld1>' already exists for article '<fld2>' in publication '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The filter '%{fld1}' already exists for article '%{fld2}' in publication '%{fld3}'." }
				id => "message-002741"
				add_field => {
					"[event][id]" => "002741"
					"[rsa][message][id1]" => "002741"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002742
		# line in RSA:  <fld30> <fld31> <event_source> The following column and parameter names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following column and parameter names contain non 7-bit ASCII characters." }
				id => "message-002742"
				add_field => {
					"[event][id]" => "002742"
					"[rsa][message][id1]" => "002742"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002743
		# line in RSA:  <fld30> <fld31> <event_source> The following data type names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following data type names contain non 7-bit ASCII characters." }
				id => "message-002743"
				add_field => {
					"[event][id]" => "002743"
					"[rsa][message][id1]" => "002743"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002744
		# line in RSA:  <fld30> <fld31> <event_source> The following database names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following database names contain non 7-bit ASCII characters." }
				id => "message-002744"
				add_field => {
					"[event][id]" => "002744"
					"[rsa][message][id1]" => "002744"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002745
		# line in RSA:  <fld30> <fld31> <event_source> The following device names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following device names contain non 7-bit ASCII characters." }
				id => "message-002745"
				add_field => {
					"[event][id]" => "002745"
					"[rsa][message][id1]" => "002745"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002746
		# line in RSA:  <fld30> <fld31> <event_source> The following index names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following index names contain non 7-bit ASCII characters." }
				id => "message-002746"
				add_field => {
					"[event][id]" => "002746"
					"[rsa][message][id1]" => "002746"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002747
		# line in RSA:  <fld30> <fld31> <event_source> The following login names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following login names contain non 7-bit ASCII characters." }
				id => "message-002747"
				add_field => {
					"[event][id]" => "002747"
					"[rsa][message][id1]" => "002747"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002748
		# line in RSA:  <fld30> <fld31> <event_source> The following logins have default database names that contain 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following logins have default database names that contain" }
				id => "message-002748"
				add_field => {
					"[event][id]" => "002748"
					"[rsa][message][id1]" => "002748"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002749
		# line in RSA:  <fld30> <fld31> <event_source> The following object names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following object names contain non 7-bit ASCII characters." }
				id => "message-002749"
				add_field => {
					"[event][id]" => "002749"
					"[rsa][message][id1]" => "002749"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002750
		# line in RSA:  <fld30> <fld31> <event_source> The following remote login names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following remote login names contain non 7-bit ASCII characters." }
				id => "message-002750"
				add_field => {
					"[event][id]" => "002750"
					"[rsa][message][id1]" => "002750"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002751
		# line in RSA:  <fld30> <fld31> <event_source> The following segment names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following segment names contain non 7-bit ASCII characters." }
				id => "message-002751"
				add_field => {
					"[event][id]" => "002751"
					"[rsa][message][id1]" => "002751"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002752
		# line in RSA:  <fld30> <fld31> <event_source> The following server names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following server names contain non 7-bit ASCII characters." }
				id => "message-002752"
				add_field => {
					"[event][id]" => "002752"
					"[rsa][message][id1]" => "002752"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002753
		# line in RSA:  <fld30> <fld31> <event_source> The following servers have 'initialization file' names that contain 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following servers have 'initialization file' names that contain" }
				id => "message-002753"
				add_field => {
					"[event][id]" => "002753"
					"[rsa][message][id1]" => "002753"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002754
		# line in RSA:  <fld30> <fld31> <event_source> The following user or role names contain non 7-bit ASCII characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The following user or role names contain non 7-bit ASCII characters." }
				id => "message-002754"
				add_field => {
					"[event][id]" => "002754"
					"[rsa][message][id1]" => "002754"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002755
		# line in RSA:  <fld30> <fld31> <event_source> The FOR ATTACH option requires that at least the primary file be specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The FOR ATTACH option requires that at least the primary file be specified." }
				id => "message-002755"
				add_field => {
					"[event][id]" => "002755"
					"[rsa][message][id1]" => "002755"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002756
		# line in RSA:  <fld30> <fld31> <event_source> The FOR XML clause is not allowed in a <fld1> statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The FOR XML clause is not allowed in a %{fld1} statement." }
				id => "message-002756"
				add_field => {
					"[event][id]" => "002756"
					"[rsa][message][id1]" => "002756"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002757
		# line in RSA:  <fld30> <fld31> <event_source> The front-end tool you are using does not support the feature of bulk insert from host. Use the proper tools for this command. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The front-end tool you are using does not support the feature of bulk insert from host. Use the proper tools for this command." }
				id => "message-002757"
				add_field => {
					"[event][id]" => "002757"
					"[rsa][message][id1]" => "002757"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002758
		# line in RSA:  <fld30> <fld31> <event_source> The Full-Text Service (Microsoft Search) is not available. The system administrator must start this service. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Full-Text Service (Microsoft Search) is not available. The system administrator must start this service." }
				id => "message-002758"
				add_field => {
					"[event][id]" => "002758"
					"[rsa][message][id1]" => "002758"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002759
		# line in RSA:  <fld30> <fld31> <event_source> The group '<fld1>' already exists in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The group '%{fld1}' already exists in the current database." }
				id => "message-002759"
				add_field => {
					"[event][id]" => "002759"
					"[rsa][message][id1]" => "002759"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002760
		# line in RSA:  <fld30> <fld31> <event_source> The group '<fld1>' does not exist in this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The group '%{fld1}' does not exist in this database." }
				id => "message-002760"
				add_field => {
					"[event][id]" => "002760"
					"[rsa][message][id1]" => "002760"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002761
		# line in RSA:  <fld30> <fld31> <event_source> The guest user cannot be mapped to a login name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The guest user cannot be mapped to a login name." }
				id => "message-002761"
				add_field => {
					"[event][id]" => "002761"
					"[rsa][message][id1]" => "002761"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002762
		# line in RSA:  <fld30> <fld31> <event_source> The handle passed to fn_get_sql was invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The handle passed to fn_get_sql was invalid." }
				id => "message-002762"
				add_field => {
					"[event][id]" => "002762"
					"[rsa][message][id1]" => "002762"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002763
		# line in RSA:  <fld30> <fld31> <event_source> The header for file '<fld1>' is not a valid database file header. The <fld2> property is incorrect. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The header for file '%{fld1}' is not a valid database file header. The %{fld2} property is incorrect." }
				id => "message-002763"
				add_field => {
					"[event][id]" => "002763"
					"[rsa][message][id1]" => "002763"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002764
		# line in RSA:  <fld30> <fld31> <event_source> The IDENTITY function can only be used when the SELECT statement has an INTO clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The IDENTITY function can only be used when the SELECT statement has an INTO clause." }
				id => "message-002764"
				add_field => {
					"[event][id]" => "002764"
					"[rsa][message][id1]" => "002764"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002765
		# line in RSA:  <fld30> <fld31> <event_source> The IDENTITY function cannot be used with a SELECT INTO statement containing a UNION operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The IDENTITY function cannot be used with a SELECT INTO statement containing a UNION operator." }
				id => "message-002765"
				add_field => {
					"[event][id]" => "002765"
					"[rsa][message][id1]" => "002765"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002766
		# line in RSA:  <fld30> <fld31> <event_source> The identity range managed by replication is full and must be updated by a replication agent. The <fld1> conflict occurred in database '<fld2>', table '<fld3>'<fld4>. Sp_adjustpublisheridentityrange can be called to get a new identity range. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The identity range managed by replication is full and must be updated by a replication agent. The %{fld1} conflict occurred in database '%{fld2}', table '%{fld3}'%{fld4}. Sp_adjustpublisheridentityrange can be called to get a new identity range." }
				id => "message-002766"
				add_field => {
					"[event][id]" => "002766"
					"[rsa][message][id1]" => "002766"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002767
		# line in RSA:  <fld30> <fld31> <event_source> The index hints for table '<fld1>' were ignored because the table was considered a fact table in the star join. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The index hints for table '%{fld1}' were ignored because the table was considered a fact table in the star join." }
				id => "message-002767"
				add_field => {
					"[event][id]" => "002767"
					"[rsa][message][id1]" => "002767"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002768
		# line in RSA:  <fld30> <fld31> <event_source> The indexed view '<fld1>' is not updatable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The indexed view '%{fld1}' is not updatable." }
				id => "message-002768"
				add_field => {
					"[event][id]" => "002768"
					"[rsa][message][id1]" => "002768"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002769
		# line in RSA:  <fld30> <fld31> <event_source> The indexes for '<fld1>' are already correct. They will not be rebuilt. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The indexes for '%{fld1}' are already correct. They will not be rebuilt." }
				id => "message-002769"
				add_field => {
					"[event][id]" => "002769"
					"[rsa][message][id1]" => "002769"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002770
		# line in RSA:  <fld30> <fld31> <event_source> The initial snapshot for article '<fld1>' is not yet available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The initial snapshot for article '%{fld1}' is not yet available." }
				id => "message-002770"
				add_field => {
					"[event][id]" => "002770"
					"[rsa][message][id1]" => "002770"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002771
		# line in RSA:  <fld30> <fld31> <event_source> The initial snapshot for publication '<fld1>' is not yet available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The initial snapshot for publication '%{fld1}' is not yet available." }
				id => "message-002771"
				add_field => {
					"[event][id]" => "002771"
					"[rsa][message][id1]" => "002771"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002772
		# line in RSA:  <fld30> <fld31> <event_source> The initial snapshot for the publication is not yet available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The initial snapshot for the publication is not yet available." }
				id => "message-002772"
				add_field => {
					"[event][id]" => "002772"
					"[rsa][message][id1]" => "002772"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002773
		# line in RSA:  <fld30> <fld31> <event_source> The insertion was canceled by the provider during notification. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The insertion was canceled by the provider during notification." }
				id => "message-002773"
				add_field => {
					"[event][id]" => "002773"
					"[rsa][message][id1]" => "002773"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002774
		# line in RSA:  <fld30> <fld31> <event_source> The job name '<fld1>' was not generated for this replication agent, delete the job manually when it is no longer in use. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The job name '%{fld1}' was not generated for this replication agent, delete the job manually when it is no longer in use." }
				id => "message-002774"
				add_field => {
					"[event][id]" => "002774"
					"[rsa][message][id1]" => "002774"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002775
		# line in RSA:  <fld30> <fld31> <event_source> The keyword 'all' is reserved by replication stored procedures. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The keyword 'all' is reserved by replication stored procedures." }
				id => "message-002775"
				add_field => {
					"[event][id]" => "002775"
					"[rsa][message][id1]" => "002775"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002776
		# line in RSA:  <fld30> <fld31> <event_source> The label '<fld1>' has already been declared. Label names must be unique within a query batch or stored procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The label '%{fld1}' has already been declared. Label names must be unique within a query batch or stored procedure." }
				id => "message-002776"
				add_field => {
					"[event][id]" => "002776"
					"[rsa][message][id1]" => "002776"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002777
		# line in RSA:  <fld30> <fld31> <event_source> The language <fld1> already exists in syslanguages. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The language %{fld1} already exists in syslanguages." }
				id => "message-002777"
				add_field => {
					"[event][id]" => "002777"
					"[rsa][message][id1]" => "002777"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002778
		# line in RSA:  <fld30> <fld31> <event_source> The last statement included within a function must be a return statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The last statement included within a function must be a return statement." }
				id => "message-002778"
				add_field => {
					"[event][id]" => "002778"
					"[rsa][message][id1]" => "002778"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002779
		# line in RSA:  <fld30> <fld31> <event_source> The length <fld1> of the receiving variable is less than the length <fld2> of the column '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The length %{fld1} of the receiving variable is less than the length %{fld2} of the column '%{fld3}'." }
				id => "message-002779"
				add_field => {
					"[event][id]" => "002779"
					"[rsa][message][id1]" => "002779"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002780
		# line in RSA:  <fld30> <fld31> <event_source> The license agreement has been violated for this '<fld1>' version of SQL Server. Cannot start. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The license agreement has been violated for this '%{fld1}' version of SQL Server. Cannot start." }
				id => "message-002780"
				add_field => {
					"[event][id]" => "002780"
					"[rsa][message][id1]" => "002780"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002781
		# line in RSA:  <fld30> <fld31> <event_source> The log file for database '<fld1>' is full. Back up the transaction log for the database to free up some log space. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log file for database '%{fld1}' is full. Back up the transaction log for the database to free up some log space." }
				id => "message-002781"
				add_field => {
					"[event][id]" => "002781"
					"[rsa][message][id1]" => "002781"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002782
		# line in RSA:  <fld30> <fld31> <event_source> The log for database '<fld1>' is not available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log for database '%{fld1}' is not available." }
				id => "message-002782"
				add_field => {
					"[event][id]" => "002782"
					"[rsa][message][id1]" => "002782"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002783
		# line in RSA:  <fld30> <fld31> <event_source> The log in this backup set begins at LSN <fld1>, which is too late to apply to the database. An earlier log backup that includes LSN <fld2> can be restored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log in this backup set begins at LSN %{fld1}, which is too late to apply to the database. An earlier log backup that includes LSN %{fld2} can be restored." }
				id => "message-002783"
				add_field => {
					"[event][id]" => "002783"
					"[rsa][message][id1]" => "002783"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002784
		# line in RSA:  <fld30> <fld31> <event_source> The log in this backup set cannot be applied because it is on a recovery path inconsistent with the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log in this backup set cannot be applied because it is on a recovery path inconsistent with the database." }
				id => "message-002784"
				add_field => {
					"[event][id]" => "002784"
					"[rsa][message][id1]" => "002784"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002785
		# line in RSA:  <fld30> <fld31> <event_source> The log in this backup set contains minimally logged changes. Point-in-time recovery is inhibited. RESTORE will roll forward to end of logs without recovering the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log in this backup set contains minimally logged changes. Point-in-time recovery is inhibited. RESTORE will roll forward to end of logs without recovering the database." }
				id => "message-002785"
				add_field => {
					"[event][id]" => "002785"
					"[rsa][message][id1]" => "002785"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002786
		# line in RSA:  <fld30> <fld31> <event_source> The log in this backup set terminates at LSN <fld1>, which is too early to apply to the database. A more recent log backup that includes LSN <fld2> can be restored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log in this backup set terminates at LSN %{fld1}, which is too early to apply to the database. A more recent log backup that includes LSN %{fld2} can be restored." }
				id => "message-002786"
				add_field => {
					"[event][id]" => "002786"
					"[rsa][message][id1]" => "002786"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002787
		# line in RSA:  <fld30> <fld31> <event_source> The Log Reader Agent encountered an unexpected log record of type  <fld1> encountered while processing DML operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Log Reader Agent encountered an unexpected log record of type  %{fld1} encountered while processing DML operation." }
				id => "message-002787"
				add_field => {
					"[event][id]" => "002787"
					"[rsa][message][id1]" => "002787"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002788
		# line in RSA:  <fld30> <fld31> <event_source> The log shipping destination <fld1>.<fld2> is out of sync by <fld3> minutes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log shipping destination %{fld1}.%{fld2} is out of sync by %{fld3} minutes." }
				id => "message-002788"
				add_field => {
					"[event][id]" => "002788"
					"[rsa][message][id1]" => "002788"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002789
		# line in RSA:  <fld30> <fld31> <event_source> The log shipping source <fld1>.<fld2> has not backed up for <fld3> minutes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log shipping source %{fld1}.%{fld2} has not backed up for %{fld3} minutes." }
				id => "message-002789"
				add_field => {
					"[event][id]" => "002789"
					"[rsa][message][id1]" => "002789"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002790
		# line in RSA:  <fld30> <fld31> <event_source> The log was not truncated because records at the beginning of the log are pending replication. Ensure the Log Reader Agent is running or use sp_repldone to mark transactions as distributed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The log was not truncated because records at the beginning of the log are pending replication. Ensure the Log Reader Agent is running or use sp_repldone to mark transactions as distributed." }
				id => "message-002790"
				add_field => {
					"[event][id]" => "002790"
					"[rsa][message][id1]" => "002790"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002791
		# line in RSA:  <fld30> <fld31> <event_source> The logical device '<fld1>' does not exist in sysdevices. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The logical device '%{fld1}' does not exist in sysdevices." }
				id => "message-002791"
				add_field => {
					"[event][id]" => "002791"
					"[rsa][message][id1]" => "002791"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002792
		# line in RSA:  <fld30> <fld31> <event_source> The logical file (<fld1>) is named '<fld2>'. RESTORE will not overwrite it from '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The logical file (%{fld1}) is named '%{fld2}'. RESTORE will not overwrite it from '%{fld3}'." }
				id => "message-002792"
				add_field => {
					"[event][id]" => "002792"
					"[rsa][message][id1]" => "002792"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002793
		# line in RSA:  <fld30> <fld31> <event_source> The logical name cannot be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The logical name cannot be NULL." }
				id => "message-002793"
				add_field => {
					"[event][id]" => "002793"
					"[rsa][message][id1]" => "002793"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002794
		# line in RSA:  <fld30> <fld31> <event_source> The logical tables INSERTED and DELETED cannot be updated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The logical tables INSERTED and DELETED cannot be updated." }
				id => "message-002794"
				add_field => {
					"[event][id]" => "002794"
					"[rsa][message][id1]" => "002794"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002795
		# line in RSA:  <fld30> <fld31> <event_source> The login '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The login '%{fld1}' already exists." }
				id => "message-002795"
				add_field => {
					"[event][id]" => "002795"
					"[rsa][message][id1]" => "002795"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002796
		# line in RSA:  <fld30> <fld31> <event_source> The login '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The login '%{fld1}' does not exist." }
				id => "message-002796"
				add_field => {
					"[event][id]" => "002796"
					"[rsa][message][id1]" => "002796"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002797
		# line in RSA:  <fld30> <fld31> <event_source> The login '<fld1>' does not have access permission on publication '<fld2>' because it is not in the publication access list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The login '%{fld1}' does not have access permission on publication '%{fld2}' because it is not in the publication access list." }
				id => "message-002797"
				add_field => {
					"[event][id]" => "002797"
					"[rsa][message][id1]" => "002797"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002798
		# line in RSA:  <fld30> <fld31> <event_source> The login already has an account under a different user name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The login already has an account under a different user name." }
				id => "message-002798"
				add_field => {
					"[event][id]" => "002798"
					"[rsa][message][id1]" => "002798"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002799
		# line in RSA:  <fld30> <fld31> <event_source> The login has insufficient authority. Membership of the sysadmin role is required to use VIRTUAL_DEVICE with BACKUP or RESTORE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The login has insufficient authority. Membership of the sysadmin role is required to use VIRTUAL_DEVICE with BACKUP or RESTORE." }
				id => "message-002799"
				add_field => {
					"[event][id]" => "002799"
					"[rsa][message][id1]" => "002799"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002800
		# line in RSA:  <fld30> <fld31> <event_source> The LSN <fld1>_LSN passed to log scan in database '<fld2>' is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The LSN %{fld1}_LSN passed to log scan in database '%{fld2}' is invalid." }
				id => "message-002800"
				add_field => {
					"[event][id]" => "002800"
					"[rsa][message][id1]" => "002800"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002801
		# line in RSA:  <fld30> <fld31> <event_source> The marked transaction '<fld1>' failed. A Deadlock was encountered while attempting to place the mark in the log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The marked transaction '%{fld1}' failed. A Deadlock was encountered while attempting to place the mark in the log." }
				id => "message-002801"
				add_field => {
					"[event][id]" => "002801"
					"[rsa][message][id1]" => "002801"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002802
		# line in RSA:  <fld30> <fld31> <event_source> The master and model databases cannot have files added to them. ALTER DATABASE was aborted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The master and model databases cannot have files added to them. ALTER DATABASE was aborted." }
				id => "message-002802"
				add_field => {
					"[event][id]" => "002802"
					"[rsa][message][id1]" => "002802"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002803
		# line in RSA:  <fld30> <fld31> <event_source> The master database failed to restore. Use the rebuildm utility to rebuild the master database. Shutting down SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The master database failed to restore. Use the rebuildm utility to rebuild the master database. Shutting down SQL Server." }
				id => "message-002803"
				add_field => {
					"[event][id]" => "002803"
					"[rsa][message][id1]" => "002803"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002804
		# line in RSA:  <fld30> <fld31> <event_source> The master database has been successfully restored. Shutting down SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The master database has been successfully restored. Shutting down SQL Server." }
				id => "message-002804"
				add_field => {
					"[event][id]" => "002804"
					"[rsa][message][id1]" => "002804"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002805
		# line in RSA:  <fld30> <fld31> <event_source> The maximum limit for connections has been reached. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The maximum limit for connections has been reached." }
				id => "message-002805"
				add_field => {
					"[event][id]" => "002805"
					"[rsa][message][id1]" => "002805"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002806
		# line in RSA:  <fld30> <fld31> <event_source> The maximum number of elements in the select list is <fld1> and you have supplied <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The maximum number of elements in the select list is %{fld1} and you have supplied %{fld2}." }
				id => "message-002806"
				add_field => {
					"[event][id]" => "002806"
					"[rsa][message][id1]" => "002806"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002807
		# line in RSA:  <fld30> <fld31> <event_source> The maximum of <fld1> filegroups per database has been exceeded. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The maximum of %{fld1} filegroups per database has been exceeded." }
				id => "message-002807"
				add_field => {
					"[event][id]" => "002807"
					"[rsa][message][id1]" => "002807"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002808
		# line in RSA:  <fld30> <fld31> <event_source> The media family on device '<fld1>' is complete. The device is now being reused for one of the remaining families. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The media family on device '%{fld1}' is complete. The device is now being reused for one of the remaining families." }
				id => "message-002808"
				add_field => {
					"[event][id]" => "002808"
					"[rsa][message][id1]" => "002808"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002809
		# line in RSA:  <fld30> <fld31> <event_source> The media family on device '<fld1>' is incorrectly formed. SQL Server cannot process this media family. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The media family on device '%{fld1}' is incorrectly formed. SQL Server cannot process this media family." }
				id => "message-002809"
				add_field => {
					"[event][id]" => "002809"
					"[rsa][message][id1]" => "002809"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002810
		# line in RSA:  <fld30> <fld31> <event_source> The media family on device '<fld1>' is marked as nonappendable. Reissue the statement using the INIT option to overwrite the media. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The media family on device '%{fld1}' is marked as nonappendable. Reissue the statement using the INIT option to overwrite the media." }
				id => "message-002810"
				add_field => {
					"[event][id]" => "002810"
					"[rsa][message][id1]" => "002810"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002811
		# line in RSA:  <fld30> <fld31> <event_source> The media family on device '<fld1>' was created using Microsoft Tape Format version <fld2>.<fld3>. SQL Server supports version <fld4>.<fld5>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The media family on device '%{fld1}' was created using Microsoft Tape Format version %{fld2}.%{fld3}. SQL Server supports version %{fld4}.%{fld5}." }
				id => "message-002811"
				add_field => {
					"[event][id]" => "002811"
					"[rsa][message][id1]" => "002811"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002812
		# line in RSA:  <fld30> <fld31> <event_source> The media set for database '<fld1>' has <fld2> family members but only <fld3> are provided.  All members must be provided. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The media set for database '%{fld1}' has %{fld2} family members but only %{fld3} are provided.  All members must be provided." }
				id => "message-002812"
				add_field => {
					"[event][id]" => "002812"
					"[rsa][message][id1]" => "002812"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002813
		# line in RSA:  <fld30> <fld31> <event_source> The medium on device '<fld1>' expires on <fld2> and cannot be overwritten. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The medium on device '%{fld1}' expires on %{fld2} and cannot be overwritten." }
				id => "message-002813"
				add_field => {
					"[event][id]" => "002813"
					"[rsa][message][id1]" => "002813"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002814
		# line in RSA:  <fld30> <fld31> <event_source> The merge triggers could not be created on the table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The merge triggers could not be created on the table '%{fld1}'." }
				id => "message-002814"
				add_field => {
					"[event][id]" => "002814"
					"[rsa][message][id1]" => "002814"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002815
		# line in RSA:  <fld30> <fld31> <event_source> The Microsoft Search service cannot be administered under the present user account 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Microsoft Search service cannot be administered under the present user account" }
				id => "message-002815"
				add_field => {
					"[event][id]" => "002815"
					"[rsa][message][id1]" => "002815"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002816
		# line in RSA:  <fld30> <fld31> <event_source> The minimally logged operation status has been turned on for database <fld1>. Rerun backup log operations to ensure that all data has been secured. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The minimally logged operation status has been turned on for database %{fld1}. Rerun backup log operations to ensure that all data has been secured." }
				id => "message-002816"
				add_field => {
					"[event][id]" => "002816"
					"[rsa][message][id1]" => "002816"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002817
		# line in RSA:  <fld30> <fld31> <event_source> The MSSQLServer service terminated unexpectedly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The MSSQLServer service terminated unexpectedly." }
				id => "message-002817"
				add_field => {
					"[event][id]" => "002817"
					"[rsa][message][id1]" => "002817"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002818
		# line in RSA:  <fld30> <fld31> <event_source> The MSSQLServerADHelper service is busy. Retry this operation later. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The MSSQLServerADHelper service is busy. Retry this operation later." }
				id => "message-002818"
				add_field => {
					"[event][id]" => "002818"
					"[rsa][message][id1]" => "002818"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002819
		# line in RSA:  <fld30> <fld31> <event_source> The MSX server is not prepared for enlistments [there must be an operator named 'MSXOperator' defined at the MSX] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The MSX server is not prepared for enlistments [there must be an operator named 'MSXOperator' defined at the MSX]" }
				id => "message-002819"
				add_field => {
					"[event][id]" => "002819"
					"[rsa][message][id1]" => "002819"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002820
		# line in RSA:  <fld30> <fld31> <event_source> The MSX server must be running the Standard or Enterprise edition of SQL Server 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The MSX server must be running the Standard or Enterprise edition of SQL Server" }
				id => "message-002820"
				add_field => {
					"[event][id]" => "002820"
					"[rsa][message][id1]" => "002820"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002821
		# line in RSA:  <fld30> <fld31> <event_source> The name '<fld1>' is not a valid identifier. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The name '%{fld1}' is not a valid identifier." }
				id => "message-002821"
				add_field => {
					"[event][id]" => "002821"
					"[rsa][message][id1]" => "002821"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002822
		# line in RSA:  <fld30> <fld31> <event_source> The name '<fld1>' is not permitted in this context. Only constants, expressions, or variables allowed here. Column names are not permitted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The name '%{fld1}' is not permitted in this context. Only constants, expressions, or variables allowed here. Column names are not permitted." }
				id => "message-002822"
				add_field => {
					"[event][id]" => "002822"
					"[rsa][message][id1]" => "002822"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002823
		# line in RSA:  <fld30> <fld31> <event_source> The name '<fld1>' contains too many characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The name '%{fld1}' contains too many characters." }
				id => "message-002823"
				add_field => {
					"[event][id]" => "002823"
					"[rsa][message][id1]" => "002823"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002824
		# line in RSA:  <fld30> <fld31> <event_source> The name of the primary filegroup cannot be changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The name of the primary filegroup cannot be changed." }
				id => "message-002824"
				add_field => {
					"[event][id]" => "002824"
					"[rsa][message][id1]" => "002824"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002825
		# line in RSA:  <fld30> <fld31> <event_source> The name supplied (<fld1>) is not a user, role, or aliased login. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The name supplied (%{fld1}) is not a user, role, or aliased login." }
				id => "message-002825"
				add_field => {
					"[event][id]" => "002825"
					"[rsa][message][id1]" => "002825"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002826
		# line in RSA:  <fld30> <fld31> <event_source> The named mark does not identify a valid LSN. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The named mark does not identify a valid LSN." }
				id => "message-002826"
				add_field => {
					"[event][id]" => "002826"
					"[rsa][message][id1]" => "002826"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002827
		# line in RSA:  <fld30> <fld31> <event_source> The new default has been bound to columns(s) of the specified user data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The new default has been bound to columns(s) of the specified user data type." }
				id => "message-002827"
				add_field => {
					"[event][id]" => "002827"
					"[rsa][message][id1]" => "002827"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002828
		# line in RSA:  <fld30> <fld31> <event_source> The new disk size must be greater than <fld1>. Consider using DBCC SHRINKDB. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The new disk size must be greater than %{fld1}. Consider using DBCC SHRINKDB." }
				id => "message-002828"
				add_field => {
					"[event][id]" => "002828"
					"[rsa][message][id1]" => "002828"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002829
		# line in RSA:  <fld30> <fld31> <event_source> The new rule has been bound to column(s) of the specified user data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The new rule has been bound to column(s) of the specified user data type." }
				id => "message-002829"
				add_field => {
					"[event][id]" => "002829"
					"[rsa][message][id1]" => "002829"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002830
		# line in RSA:  <fld30> <fld31> <event_source> The NOLOCK, READUNCOMMITTED, and READPAST lock hints are only allowed in a SELECT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The NOLOCK, READUNCOMMITTED, and READPAST lock hints are only allowed in a SELECT statement." }
				id => "message-002830"
				add_field => {
					"[event][id]" => "002830"
					"[rsa][message][id1]" => "002830"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002831
		# line in RSA:  <fld30> <fld31> <event_source> The number of columns in the referencing column list for foreign key '<fld1>' does not match those of the primary key in the referenced table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The number of columns in the referencing column list for foreign key '%{fld1}' does not match those of the primary key in the referenced table '%{fld2}'." }
				id => "message-002831"
				add_field => {
					"[event][id]" => "002831"
					"[rsa][message][id1]" => "002831"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002832
		# line in RSA:  <fld30> <fld31> <event_source> The number of orphaned users fixed by adding new logins and then updating users was <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The number of orphaned users fixed by adding new logins and then updating users was %{fld1}." }
				id => "message-002832"
				add_field => {
					"[event][id]" => "002832"
					"[rsa][message][id1]" => "002832"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002833
		# line in RSA:  <fld30> <fld31> <event_source> The number of orphaned users fixed by updating users was <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The number of orphaned users fixed by updating users was %{fld1}." }
				id => "message-002833"
				add_field => {
					"[event][id]" => "002833"
					"[rsa][message][id1]" => "002833"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002834
		# line in RSA:  <fld30> <fld31> <event_source> The number of rows in the TOP clause must be an integer. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The number of rows in the TOP clause must be an integer." }
				id => "message-002834"
				add_field => {
					"[event][id]" => "002834"
					"[rsa][message][id1]" => "002834"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002835
		# line in RSA:  <fld30> <fld31> <event_source> The number of rows that have pending changes has exceeded the limit specified by the DBPROP_MAXPENDINGROWS property. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The number of rows that have pending changes has exceeded the limit specified by the DBPROP_MAXPENDINGROWS property." }
				id => "message-002835"
				add_field => {
					"[event][id]" => "002835"
					"[rsa][message][id1]" => "002835"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002837
		# line in RSA:  <fld30> <fld31> <event_source> The object '<fld1>' is not a procedure so you cannot create another procedure under that group name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The object '%{fld1}' is not a procedure so you cannot create another procedure under that group name." }
				id => "message-002837"
				add_field => {
					"[event][id]" => "002837"
					"[rsa][message][id1]" => "002837"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002838
		# line in RSA:  <fld30> <fld31> <event_source> The object '<fld1>' does not exist in database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The object '%{fld1}' does not exist in database '%{fld2}'." }
				id => "message-002838"
				add_field => {
					"[event][id]" => "002838"
					"[rsa][message][id1]" => "002838"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002839
		# line in RSA:  <fld30> <fld31> <event_source> The object comments have been encrypted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The object comments have been encrypted." }
				id => "message-002839"
				add_field => {
					"[event][id]" => "002839"
					"[rsa][message][id1]" => "002839"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002840
		# line in RSA:  <fld30> <fld31> <event_source> The object does not have any indexes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The object does not have any indexes." }
				id => "message-002840"
				add_field => {
					"[event][id]" => "002840"
					"[rsa][message][id1]" => "002840"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002841
		# line in RSA:  <fld30> <fld31> <event_source> The object name '<fld1>' contains more than the maximum number of prefixes. The maximum is <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The object name '%{fld1}' contains more than the maximum number of prefixes. The maximum is %{fld2}." }
				id => "message-002841"
				add_field => {
					"[event][id]" => "002841"
					"[rsa][message][id1]" => "002841"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002842
		# line in RSA:  <fld30> <fld31> <event_source> The object or column name starting with '<fld1>' is too long. The maximum length is <fld2> characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The object or column name starting with '%{fld1}' is too long. The maximum length is %{fld2} characters." }
				id => "message-002842"
				add_field => {
					"[event][id]" => "002842"
					"[rsa][message][id1]" => "002842"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002843
		# line in RSA:  <fld30> <fld31> <event_source> The object specified is neither a table nor a constraint 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The object specified is neither a table nor a constraint" }
				id => "message-002843"
				add_field => {
					"[event][id]" => "002843"
					"[rsa][message][id1]" => "002843"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002844
		# line in RSA:  <fld30> <fld31> <event_source> The offload server must be specified if the agent for this subscription is to be offloaded for remote execution. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The offload server must be specified if the agent for this subscription is to be offloaded for remote execution." }
				id => "message-002844"
				add_field => {
					"[event][id]" => "002844"
					"[rsa][message][id1]" => "002844"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002845
		# line in RSA:  <fld30> <fld31> <event_source> The offset and length specified in the READTEXT statement is greater than the actual data length of <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The offset and length specified in the READTEXT statement is greater than the actual data length of %{fld1}." }
				id => "message-002845"
				add_field => {
					"[event][id]" => "002845"
					"[rsa][message][id1]" => "002845"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002846
		# line in RSA:  <fld30> <fld31> <event_source> The OLE DB provider '<fld1>' provided invalid collation. <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The OLE DB provider '%{fld1}' provided invalid collation. %{fld2}." }
				id => "message-002846"
				add_field => {
					"[event][id]" => "002846"
					"[rsa][message][id1]" => "002846"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002847
		# line in RSA:  <fld30> <fld31> <event_source> The OLE DB provider '<fld1>' reported a schema version for table '<fld2>' that changed between compilation and execution. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The OLE DB provider '%{fld1}' reported a schema version for table '%{fld2}' that changed between compilation and execution." }
				id => "message-002847"
				add_field => {
					"[event][id]" => "002847"
					"[rsa][message][id1]" => "002847"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002848
		# line in RSA:  <fld30> <fld31> <event_source> The OLE DB provider '<fld1>' reported different meta data at run time for table '<fld2>' column '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The OLE DB provider '%{fld1}' reported different meta data at run time for table '%{fld2}' column '%{fld3}'." }
				id => "message-002848"
				add_field => {
					"[event][id]" => "002848"
					"[rsa][message][id1]" => "002848"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002849
		# line in RSA:  <fld30> <fld31> <event_source> The OLE DB provider '<fld1>' supports column-level collation, but failed to provide collation data for column '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The OLE DB provider '%{fld1}' supports column-level collation, but failed to provide collation data for column '%{fld2}'." }
				id => "message-002849"
				add_field => {
					"[event][id]" => "002849"
					"[rsa][message][id1]" => "002849"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002850
		# line in RSA:  <fld30> <fld31> <event_source> The OLE DB provider '<fld1>' supports column-level collation, but failed to provide metadata column '<fld2>' at run time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The OLE DB provider '%{fld1}' supports column-level collation, but failed to provide metadata column '%{fld2}' at run time." }
				id => "message-002850"
				add_field => {
					"[event][id]" => "002850"
					"[rsa][message][id1]" => "002850"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002851
		# line in RSA:  <fld30> <fld31> <event_source> The ongoing population is necessary to ensure an up-to-date index. If needed, stop change tracking, and then deactivate the full-text index population. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The ongoing population is necessary to ensure an up-to-date index. If needed, stop change tracking, and then deactivate the full-text index population." }
				id => "message-002851"
				add_field => {
					"[event][id]" => "002851"
					"[rsa][message][id1]" => "002851"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002852
		# line in RSA:  <fld30> <fld31> <event_source> The only permitted options for a tape device are 'skip' and 'noskip'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The only permitted options for a tape device are 'skip' and 'noskip'." }
				id => "message-002852"
				add_field => {
					"[event][id]" => "002852"
					"[rsa][message][id1]" => "002852"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002853
		# line in RSA:  <fld30> <fld31> <event_source> The only schema options available for a view schema article are: 0x0000000000000001, 0x0000000000000010, 0x0000000000000040, 0x0000000000000100, and 0x0000000000002000. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The only schema options available for a view schema article are: 0x0000000000000001, 0x0000000000000010, 0x0000000000000040, 0x0000000000000100, and 0x0000000000002000." }
				id => "message-002853"
				add_field => {
					"[event][id]" => "002853"
					"[rsa][message][id1]" => "002853"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002854
		# line in RSA:  <fld30> <fld31> <event_source> The only valid @parameter value is 'WITH_LOG'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The only valid @parameter value is 'WITH_LOG'." }
				id => "message-002854"
				add_field => {
					"[event][id]" => "002854"
					"[rsa][message][id1]" => "002854"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002855
		# line in RSA:  <fld30> <fld31> <event_source> The only valid @parameter_value values are 'true' or 'false'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The only valid @parameter_value values are 'true' or 'false'." }
				id => "message-002855"
				add_field => {
					"[event][id]" => "002855"
					"[rsa][message][id1]" => "002855"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002856
		# line in RSA:  <fld30> <fld31> <event_source> The OPENXML EDGETABLE is incompatible with the XMLTEXT OVERFLOW flag. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The OPENXML EDGETABLE is incompatible with the XMLTEXT OVERFLOW flag." }
				id => "message-002856"
				add_field => {
					"[event][id]" => "002856"
					"[rsa][message][id1]" => "002856"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002857
		# line in RSA:  <fld30> <fld31> <event_source> The operation could not be performed because the OLE DB provider '<fld1>' was unable to begin a distributed transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The operation could not be performed because the OLE DB provider '%{fld1}' was unable to begin a distributed transaction." }
				id => "message-002857"
				add_field => {
					"[event][id]" => "002857"
					"[rsa][message][id1]" => "002857"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002858
		# line in RSA:  <fld30> <fld31> <event_source> The operation did not proceed far enough to allow RESTART. Reissue the statement without the RESTART qualifier. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The operation did not proceed far enough to allow RESTART. Reissue the statement without the RESTART qualifier." }
				id => "message-002858"
				add_field => {
					"[event][id]" => "002858"
					"[rsa][message][id1]" => "002858"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002859
		# line in RSA:  <fld30> <fld31> <event_source> The option <fld1> cannot be changed for the '<fld2>' database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The option %{fld1} cannot be changed for the '%{fld2}' database." }
				id => "message-002859"
				add_field => {
					"[event][id]" => "002859"
					"[rsa][message][id1]" => "002859"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002860
		# line in RSA:  <fld30> <fld31> <event_source> The option '<fld1>' cannot be changed for the master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The option '%{fld1}' cannot be changed for the master database." }
				id => "message-002860"
				add_field => {
					"[event][id]" => "002860"
					"[rsa][message][id1]" => "002860"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002861
		# line in RSA:  <fld30> <fld31> <event_source> The ORDER BY clause is invalid in views, inline functions, derived tables, and subqueries, unless TOP is also specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The ORDER BY clause is invalid in views, inline functions, derived tables, and subqueries, unless TOP is also specified." }
				id => "message-002861"
				add_field => {
					"[event][id]" => "002861"
					"[rsa][message][id1]" => "002861"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002862
		# line in RSA:  <fld30> <fld31> <event_source> The ORDER BY position number <fld1> is out of range of the number of items in the select list. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The ORDER BY position number %{fld1} is out of range of the number of items in the select list." }
				id => "message-002862"
				add_field => {
					"[event][id]" => "002862"
					"[rsa][message][id1]" => "002862"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002863
		# line in RSA:  <fld30> <fld31> <event_source> The order of the columns was not specified in the object that created the rowset. The provider had to reexecute the command to reposition the next fetch position to its initial position, and the order of the columns changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The order of the columns was not specified in the object that created the rowset. The provider had to reexecute the command to reposition the next fetch position to its initial position, and the order of the columns changed." }
				id => "message-002863"
				add_field => {
					"[event][id]" => "002863"
					"[rsa][message][id1]" => "002863"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002864
		# line in RSA:  <fld30> <fld31> <event_source> The originating server must be either '(local)' or '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The originating server must be either '(local)' or '%{fld1}'." }
				id => "message-002864"
				add_field => {
					"[event][id]" => "002864"
					"[rsa][message][id1]" => "002864"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002865
		# line in RSA:  <fld30> <fld31> <event_source> The owner ('<fld1>') of this job is either an invalid login, or is not a valid user of database '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The owner ('%{fld1}') of this job is either an invalid login, or is not a valid user of database '%{fld2}'." }
				id => "message-002865"
				add_field => {
					"[event][id]" => "002865"
					"[rsa][message][id1]" => "002865"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002866
		# line in RSA:  <fld30> <fld31> <event_source> The page_lock system function was called with a mode <fld1> that is not permitted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The page_lock system function was called with a mode %{fld1} that is not permitted." }
				id => "message-002866"
				add_field => {
					"[event][id]" => "002866"
					"[rsa][message][id1]" => "002866"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002867
		# line in RSA:  <fld30> <fld31> <event_source> The parameter <fld1> cannot be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The parameter %{fld1} cannot be NULL." }
				id => "message-002867"
				add_field => {
					"[event][id]" => "002867"
					"[rsa][message][id1]" => "002867"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002868
		# line in RSA:  <fld30> <fld31> <event_source> The parameter @dynamic_snapshot_location cannot be an empty string. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The parameter @dynamic_snapshot_location cannot be an empty string." }
				id => "message-002868"
				add_field => {
					"[event][id]" => "002868"
					"[rsa][message][id1]" => "002868"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002869
		# line in RSA:  <fld30> <fld31> <event_source> The parameter must be 'description', 'taskid', 'sync_method', 'status', 'repl_freq', 'restricted', 'retention', 'immediate_sync', 'enabled_for_internet', 'allow_push', 'allow_pull', 'allow_anonymous', or 'retention'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The parameter must be 'description', 'taskid', 'sync_method', 'status', 'repl_freq', 'restricted', 'retention', 'immediate_sync', 'enabled_for_internet', 'allow_push', 'allow_pull', 'allow_anonymous', or 'retention'." }
				id => "message-002869"
				add_field => {
					"[event][id]" => "002869"
					"[rsa][message][id1]" => "002869"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002870
		# line in RSA:  <fld30> <fld31> <event_source> The parameter must be one of the following: 'description', 'status', 'retention', 'sync_mode', 'allow_push', 'allow_pull', 'allow_anonymous', 'enabled_for_internet', 'centralized_conflicts', 'conflict_retention', or 'snapshot_ready'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The parameter must be one of the following: 'description', 'status', 'retention', 'sync_mode', 'allow_push', 'allow_pull', 'allow_anonymous', 'enabled_for_internet', 'centralized_conflicts', 'conflict_retention', or 'snapshot_ready'." }
				id => "message-002870"
				add_field => {
					"[event][id]" => "002870"
					"[rsa][message][id1]" => "002870"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002871
		# line in RSA:  <fld30> <fld31> <event_source> The parameter name '<fld1>' already exists for the specified profile. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The parameter name '%{fld1}' already exists for the specified profile." }
				id => "message-002871"
				add_field => {
					"[event][id]" => "002871"
					"[rsa][message][id1]" => "002871"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002872
		# line in RSA:  <fld30> <fld31> <event_source> The parameter value must be 'sync_type' or 'dest_db'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The parameter value must be 'sync_type' or 'dest_db'." }
				id => "message-002872"
				add_field => {
					"[event][id]" => "002872"
					"[rsa][message][id1]" => "002872"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002873
		# line in RSA:  <fld30> <fld31> <event_source> The parameters @xact_seqno_start and @xact_seqno_end must be identical if @command_id is specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The parameters @xact_seqno_start and @xact_seqno_end must be identical if @command_id is specified." }
				id => "message-002873"
				add_field => {
					"[event][id]" => "002873"
					"[rsa][message][id1]" => "002873"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002874
		# line in RSA:  <fld30> <fld31> <event_source> The password for application role '<fld1>' has been changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The password for application role '%{fld1}' has been changed." }
				id => "message-002874"
				add_field => {
					"[event][id]" => "002874"
					"[rsa][message][id1]" => "002874"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002875
		# line in RSA:  <fld30> <fld31> <event_source> The path and name of the table creation script must be specified if the @pre_creation_cmd parameter value is 'drop'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The path and name of the table creation script must be specified if the @pre_creation_cmd parameter value is 'drop'." }
				id => "message-002875"
				add_field => {
					"[event][id]" => "002875"
					"[rsa][message][id1]" => "002875"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002876
		# line in RSA:  <fld30> <fld31> <event_source> The PATINDEX function operates on char, nchar, varchar, nvarchar, text, and ntext data types only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The PATINDEX function operates on char, nchar, varchar, nvarchar, text, and ntext data types only." }
				id => "message-002876"
				add_field => {
					"[event][id]" => "002876"
					"[rsa][message][id1]" => "002876"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002877
		# line in RSA:  <fld30> <fld31> <event_source> The physical data type '<fld1>' does not allow nulls. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The physical data type '%{fld1}' does not allow nulls." }
				id => "message-002877"
				add_field => {
					"[event][id]" => "002877"
					"[rsa][message][id1]" => "002877"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002878
		# line in RSA:  <fld30> <fld31> <event_source> The physical data type is fixed length. You cannot specify the length. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The physical data type is fixed length. You cannot specify the length." }
				id => "message-002878"
				add_field => {
					"[event][id]" => "002878"
					"[rsa][message][id1]" => "002878"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002879
		# line in RSA:  <fld30> <fld31> <event_source> The physical name cannot be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The physical name cannot be NULL." }
				id => "message-002879"
				add_field => {
					"[event][id]" => "002879"
					"[rsa][message][id1]" => "002879"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002880
		# line in RSA:  <fld30> <fld31> <event_source> The preceding restore operation did not specify WITH NORECOVERY or WITH STANDBY. Restart the restore sequence, specifying WITH NORECOVERY or WITH STANDBY for all but the final step. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The preceding restore operation did not specify WITH NORECOVERY or WITH STANDBY. Restart the restore sequence, specifying WITH NORECOVERY or WITH STANDBY for all but the final step." }
				id => "message-002880"
				add_field => {
					"[event][id]" => "002880"
					"[rsa][message][id1]" => "002880"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002881
		# line in RSA:  <fld30> <fld31> <event_source> The previous status must be 'active', 'inactive', or 'subscribed'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The previous status must be 'active', 'inactive', or 'subscribed'." }
				id => "message-002881"
				add_field => {
					"[event][id]" => "002881"
					"[rsa][message][id1]" => "002881"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002882
		# line in RSA:  <fld30> <fld31> <event_source> The primary data or log file cannot be removed from a database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The primary data or log file cannot be removed from a database." }
				id => "message-002882"
				add_field => {
					"[event][id]" => "002882"
					"[rsa][message][id1]" => "002882"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002883
		# line in RSA:  <fld30> <fld31> <event_source> The primary file is unavailable. It must be restored or otherwise made available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The primary file is unavailable. It must be restored or otherwise made available." }
				id => "message-002883"
				add_field => {
					"[event][id]" => "002883"
					"[rsa][message][id1]" => "002883"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002884
		# line in RSA:  <fld30> <fld31> <event_source> The primary or foreign key table name must be given. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The primary or foreign key table name must be given." }
				id => "message-002884"
				add_field => {
					"[event][id]" => "002884"
					"[rsa][message][id1]" => "002884"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002885
		# line in RSA:  <fld30> <fld31> <event_source> The priority property is invalid for local subscribers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The priority property is invalid for local subscribers." }
				id => "message-002885"
				add_field => {
					"[event][id]" => "002885"
					"[rsa][message][id1]" => "002885"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002886
		# line in RSA:  <fld30> <fld31> <event_source> The priority value should not be larger than 100.0. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The priority value should not be larger than 100.0." }
				id => "message-002886"
				add_field => {
					"[event][id]" => "002886"
					"[rsa][message][id1]" => "002886"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002887
		# line in RSA:  <fld30> <fld31> <event_source> The procedure '<fld1>' cannot be executed within a transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The procedure '%{fld1}' cannot be executed within a transaction." }
				id => "message-002887"
				add_field => {
					"[event][id]" => "002887"
					"[rsa][message][id1]" => "002887"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002888
		# line in RSA:  <fld30> <fld31> <event_source> The profile name '<fld1>' already exists for the specified agent type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The profile name '%{fld1}' already exists for the specified agent type." }
				id => "message-002888"
				add_field => {
					"[event][id]" => "002888"
					"[rsa][message][id1]" => "002888"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002889
		# line in RSA:  <fld30> <fld31> <event_source> The property parameter value must be <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The property parameter value must be %{fld1}." }
				id => "message-002889"
				add_field => {
					"[event][id]" => "002889"
					"[rsa][message][id1]" => "002889"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002890
		# line in RSA:  <fld30> <fld31> <event_source> The proposed new database owner is already a user in the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The proposed new database owner is already a user in the database." }
				id => "message-002890"
				add_field => {
					"[event][id]" => "002890"
					"[rsa][message][id1]" => "002890"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002891
		# line in RSA:  <fld30> <fld31> <event_source> The proposed new database owner is already aliased in the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The proposed new database owner is already aliased in the database." }
				id => "message-002891"
				add_field => {
					"[event][id]" => "002891"
					"[rsa][message][id1]" => "002891"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002892
		# line in RSA:  <fld30> <fld31> <event_source> The provider called a method from IRowsetNotify in the consumer, and the method has not yet returned. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider called a method from IRowsetNotify in the consumer, and the method has not yet returned." }
				id => "message-002892"
				add_field => {
					"[event][id]" => "002892"
					"[rsa][message][id1]" => "002892"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002893
		# line in RSA:  <fld30> <fld31> <event_source> The provider cannot allocate memory or open another storage object on this column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider cannot allocate memory or open another storage object on this column." }
				id => "message-002893"
				add_field => {
					"[event][id]" => "002893"
					"[rsa][message][id1]" => "002893"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002894
		# line in RSA:  <fld30> <fld31> <event_source> The provider cannot determine the value for this column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider cannot determine the value for this column." }
				id => "message-002894"
				add_field => {
					"[event][id]" => "002894"
					"[rsa][message][id1]" => "002894"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002895
		# line in RSA:  <fld30> <fld31> <event_source> The provider could not support a required property. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider could not support a required property." }
				id => "message-002895"
				add_field => {
					"[event][id]" => "002895"
					"[rsa][message][id1]" => "002895"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002896
		# line in RSA:  <fld30> <fld31> <event_source> The provider could not support a required row lookup interface. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider could not support a required row lookup interface." }
				id => "message-002896"
				add_field => {
					"[event][id]" => "002896"
					"[rsa][message][id1]" => "002896"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002897
		# line in RSA:  <fld30> <fld31> <event_source> The provider could not support a row lookup position. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider could not support a row lookup position." }
				id => "message-002897"
				add_field => {
					"[event][id]" => "002897"
					"[rsa][message][id1]" => "002897"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002898
		# line in RSA:  <fld30> <fld31> <event_source> The provider could not support an interface required for the UPDATE/DELETE/INSERT statements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider could not support an interface required for the UPDATE/DELETE/INSERT statements." }
				id => "message-002898"
				add_field => {
					"[event][id]" => "002898"
					"[rsa][message][id1]" => "002898"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002899
		# line in RSA:  <fld30> <fld31> <event_source> The provider could not support deletion on this table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider could not support deletion on this table." }
				id => "message-002899"
				add_field => {
					"[event][id]" => "002899"
					"[rsa][message][id1]" => "002899"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002900
		# line in RSA:  <fld30> <fld31> <event_source> The provider could not support insertion on this table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider could not support insertion on this table." }
				id => "message-002900"
				add_field => {
					"[event][id]" => "002900"
					"[rsa][message][id1]" => "002900"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002901
		# line in RSA:  <fld30> <fld31> <event_source> The provider could not support updates on this table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider could not support updates on this table." }
				id => "message-002901"
				add_field => {
					"[event][id]" => "002901"
					"[rsa][message][id1]" => "002901"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002902
		# line in RSA:  <fld30> <fld31> <event_source> The provider did not give any information about the error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider did not give any information about the error." }
				id => "message-002902"
				add_field => {
					"[event][id]" => "002902"
					"[rsa][message][id1]" => "002902"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002903
		# line in RSA:  <fld30> <fld31> <event_source> The provider did not implement the functionality. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider did not implement the functionality." }
				id => "message-002903"
				add_field => {
					"[event][id]" => "002903"
					"[rsa][message][id1]" => "002903"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002904
		# line in RSA:  <fld30> <fld31> <event_source> The provider did not release some of the existing rows. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider did not release some of the existing rows." }
				id => "message-002904"
				add_field => {
					"[event][id]" => "002904"
					"[rsa][message][id1]" => "002904"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002905
		# line in RSA:  <fld30> <fld31> <event_source> The provider did not support an interface. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider did not support an interface." }
				id => "message-002905"
				add_field => {
					"[event][id]" => "002905"
					"[rsa][message][id1]" => "002905"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002906
		# line in RSA:  <fld30> <fld31> <event_source> The provider does not support an index scan on this data source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider does not support an index scan on this data source." }
				id => "message-002906"
				add_field => {
					"[event][id]" => "002906"
					"[rsa][message][id1]" => "002906"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002907
		# line in RSA:  <fld30> <fld31> <event_source> The provider does not support the necessary method. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider does not support the necessary method." }
				id => "message-002907"
				add_field => {
					"[event][id]" => "002907"
					"[rsa][message][id1]" => "002907"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002908
		# line in RSA:  <fld30> <fld31> <event_source> The provider indicated an invalid handle was used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider indicated an invalid handle was used." }
				id => "message-002908"
				add_field => {
					"[event][id]" => "002908"
					"[rsa][message][id1]" => "002908"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002909
		# line in RSA:  <fld30> <fld31> <event_source> The provider indicated an invalid pointer was used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider indicated an invalid pointer was used." }
				id => "message-002909"
				add_field => {
					"[event][id]" => "002909"
					"[rsa][message][id1]" => "002909"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002910
		# line in RSA:  <fld30> <fld31> <event_source> The provider indicates that conflicts occurred with other properties or requirements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider indicates that conflicts occurred with other properties or requirements." }
				id => "message-002910"
				add_field => {
					"[event][id]" => "002910"
					"[rsa][message][id1]" => "002910"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002911
		# line in RSA:  <fld30> <fld31> <event_source> The provider indicates that the user did not have the permission to perform the operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider indicates that the user did not have the permission to perform the operation." }
				id => "message-002911"
				add_field => {
					"[event][id]" => "002911"
					"[rsa][message][id1]" => "002911"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002912
		# line in RSA:  <fld30> <fld31> <event_source> The provider ran out of memory and could not fetch the row. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider ran out of memory and could not fetch the row." }
				id => "message-002912"
				add_field => {
					"[event][id]" => "002912"
					"[rsa][message][id1]" => "002912"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002913
		# line in RSA:  <fld30> <fld31> <event_source> The provider ran out of memory. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider ran out of memory." }
				id => "message-002913"
				add_field => {
					"[event][id]" => "002913"
					"[rsa][message][id1]" => "002913"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002914
		# line in RSA:  <fld30> <fld31> <event_source> The provider reported an unexpected catastrophic failure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider reported an unexpected catastrophic failure." }
				id => "message-002914"
				add_field => {
					"[event][id]" => "002914"
					"[rsa][message][id1]" => "002914"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002915
		# line in RSA:  <fld30> <fld31> <event_source> The provider terminated the operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The provider terminated the operation." }
				id => "message-002915"
				add_field => {
					"[event][id]" => "002915"
					"[rsa][message][id1]" => "002915"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002916
		# line in RSA:  <fld30> <fld31> <event_source> The publication '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication '%{fld1}' already exists." }
				id => "message-002916"
				add_field => {
					"[event][id]" => "002916"
					"[rsa][message][id1]" => "002916"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002917
		# line in RSA:  <fld30> <fld31> <event_source> The publication '<fld1>' already has a Snapshot Agent defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication '%{fld1}' already has a Snapshot Agent defined." }
				id => "message-002917"
				add_field => {
					"[event][id]" => "002917"
					"[rsa][message][id1]" => "002917"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002918
		# line in RSA:  <fld30> <fld31> <event_source> The publication '<fld1>' does not allow subscription copy or its subscription has not been synchronized. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication '%{fld1}' does not allow subscription copy or its subscription has not been synchronized." }
				id => "message-002918"
				add_field => {
					"[event][id]" => "002918"
					"[rsa][message][id1]" => "002918"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002919
		# line in RSA:  <fld30> <fld31> <event_source> The publication '<fld1>' does not allow the subscription to synchronize to an alternate synchronization partner. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication '%{fld1}' does not allow the subscription to synchronize to an alternate synchronization partner." }
				id => "message-002919"
				add_field => {
					"[event][id]" => "002919"
					"[rsa][message][id1]" => "002919"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002920
		# line in RSA:  <fld30> <fld31> <event_source> The publication '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication '%{fld1}' does not exist." }
				id => "message-002920"
				add_field => {
					"[event][id]" => "002920"
					"[rsa][message][id1]" => "002920"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002921
		# line in RSA:  <fld30> <fld31> <event_source> The publication has to be 'independent_agent type' to allow DTS. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication has to be 'independent_agent type' to allow DTS." }
				id => "message-002921"
				add_field => {
					"[event][id]" => "002921"
					"[rsa][message][id1]" => "002921"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002922
		# line in RSA:  <fld30> <fld31> <event_source> The publication has to be in 'character' or 'concurrent_c' bcp mode to allow DTS. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication has to be in 'character' or 'concurrent_c' bcp mode to allow DTS." }
				id => "message-002922"
				add_field => {
					"[event][id]" => "002922"
					"[rsa][message][id1]" => "002922"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002923
		# line in RSA:  <fld30> <fld31> <event_source> The publication must be immediate_sync type to allow subscription copy. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication must be immediate_sync type to allow subscription copy." }
				id => "message-002923"
				add_field => {
					"[event][id]" => "002923"
					"[rsa][message][id1]" => "002923"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002924
		# line in RSA:  <fld30> <fld31> <event_source> The publication name (@publication) cannot be the keyword 'all'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication name (@publication) cannot be the keyword 'all'." }
				id => "message-002924"
				add_field => {
					"[event][id]" => "002924"
					"[rsa][message][id1]" => "002924"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002925
		# line in RSA:  <fld30> <fld31> <event_source> The publication name must be unique. The specified publication name '<fld1>' has already been used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication name must be unique. The specified publication name '%{fld1}' has already been used." }
				id => "message-002925"
				add_field => {
					"[event][id]" => "002925"
					"[rsa][message][id1]" => "002925"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002926
		# line in RSA:  <fld30> <fld31> <event_source> The publication property '<fld1>' cannot be changed when there are subscriptions on it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication property '%{fld1}' cannot be changed when there are subscriptions on it." }
				id => "message-002926"
				add_field => {
					"[event][id]" => "002926"
					"[rsa][message][id1]" => "002926"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002927
		# line in RSA:  <fld30> <fld31> <event_source> The publication specified does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication specified does not exist." }
				id => "message-002927"
				add_field => {
					"[event][id]" => "002927"
					"[rsa][message][id1]" => "002927"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002928
		# line in RSA:  <fld30> <fld31> <event_source> The publication was updated successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The publication was updated successfully." }
				id => "message-002928"
				add_field => {
					"[event][id]" => "002928"
					"[rsa][message][id1]" => "002928"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002929
		# line in RSA:  <fld30> <fld31> <event_source> The Publisher could not be created at this time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Publisher could not be created at this time." }
				id => "message-002929"
				add_field => {
					"[event][id]" => "002929"
					"[rsa][message][id1]" => "002929"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002930
		# line in RSA:  <fld30> <fld31> <event_source> The qualified old name could not be found for item type '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The qualified old name could not be found for item type '%{fld1}'." }
				id => "message-002930"
				add_field => {
					"[event][id]" => "002930"
					"[rsa][message][id1]" => "002930"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002931
		# line in RSA:  <fld30> <fld31> <event_source> The query and the views or functions in it exceed the limit of <fld1> tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The query and the views or functions in it exceed the limit of %{fld1} tables." }
				id => "message-002931"
				add_field => {
					"[event][id]" => "002931"
					"[rsa][message][id1]" => "002931"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002932
		# line in RSA:  <fld30> <fld31> <event_source> The query has been canceled because the estimated cost of this query (<fld1>) exceeds the configured threshold of <fld2>. Contact the system administrator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The query has been canceled because the estimated cost of this query (%{fld1}) exceeds the configured threshold of %{fld2}. Contact the system administrator." }
				id => "message-002932"
				add_field => {
					"[event][id]" => "002932"
					"[rsa][message][id1]" => "002932"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002933
		# line in RSA:  <fld30> <fld31> <event_source> The query processor could not produce a query plan because of the combination of hints and text, ntext, or image data passing through operators using work tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The query processor could not produce a query plan because of the combination of hints and text, ntext, or image data passing through operators using work tables." }
				id => "message-002933"
				add_field => {
					"[event][id]" => "002933"
					"[rsa][message][id1]" => "002933"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002934
		# line in RSA:  <fld30> <fld31> <event_source> The query processor could not produce a query plan from the optimizer because a query cannot update a text, ntext, or image column and a clustering key at the same time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The query processor could not produce a query plan from the optimizer because a query cannot update a text, ntext, or image column and a clustering key at the same time." }
				id => "message-002934"
				add_field => {
					"[event][id]" => "002934"
					"[rsa][message][id1]" => "002934"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002935
		# line in RSA:  <fld30> <fld31> <event_source> The query processor could not start the necessary thread resources for parallel query execution. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The query processor could not start the necessary thread resources for parallel query execution." }
				id => "message-002935"
				add_field => {
					"[event][id]" => "002935"
					"[rsa][message][id1]" => "002935"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002936
		# line in RSA:  <fld30> <fld31> <event_source> The queue for this subscription with queue_id = '<fld1>' is not empty. Run the Queue Reader Agent to make sure the queue is empty before setting mode from [queued] to [immediate]. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The queue for this subscription with queue_id = '%{fld1}' is not empty. Run the Queue Reader Agent to make sure the queue is empty before setting mode from [queued] to [immediate]." }
				id => "message-002936"
				add_field => {
					"[event][id]" => "002936"
					"[rsa][message][id1]" => "002936"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002937
		# line in RSA:  <fld30> <fld31> <event_source> The ReadFileEx system function executed on file '<fld1>' only read <fld2> bytes, expected <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The ReadFileEx system function executed on file '%{fld1}' only read %{fld2} bytes, expected %{fld3}." }
				id => "message-002937"
				add_field => {
					"[event][id]" => "002937"
					"[rsa][message][id1]" => "002937"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002938
		# line in RSA:  <fld30> <fld31> <event_source> The read-only bit cannot be turned off because the database is in standby mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The read-only bit cannot be turned off because the database is in standby mode." }
				id => "message-002938"
				add_field => {
					"[event][id]" => "002938"
					"[rsa][message][id1]" => "002938"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002939
		# line in RSA:  <fld30> <fld31> <event_source> The READTEXT, WRITETEXT, and UPDATETEXT statements cannot be used with views or functions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The READTEXT, WRITETEXT, and UPDATETEXT statements cannot be used with views or functions." }
				id => "message-002939"
				add_field => {
					"[event][id]" => "002939"
					"[rsa][message][id1]" => "002939"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002940
		# line in RSA:  <fld30> <fld31> <event_source> The remote server does not exist or has not been designated as a valid Publisher. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The remote server does not exist or has not been designated as a valid Publisher." }
				id => "message-002940"
				add_field => {
					"[event][id]" => "002940"
					"[rsa][message][id1]" => "002940"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002941
		# line in RSA:  <fld30> <fld31> <event_source> The remote server does not exist or has not been designated as a valid Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The remote server does not exist or has not been designated as a valid Subscriber." }
				id => "message-002941"
				add_field => {
					"[event][id]" => "002941"
					"[rsa][message][id1]" => "002941"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002942
		# line in RSA:  <fld30> <fld31> <event_source> The remote server is not defined as a subscription server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The remote server is not defined as a subscription server." }
				id => "message-002942"
				add_field => {
					"[event][id]" => "002942"
					"[rsa][message][id1]" => "002942"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002943
		# line in RSA:  <fld30> <fld31> <event_source> The repair level on the DBCC statement caused this repair to be bypassed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The repair level on the DBCC statement caused this repair to be bypassed." }
				id => "message-002943"
				add_field => {
					"[event][id]" => "002943"
					"[rsa][message][id1]" => "002943"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002944
		# line in RSA:  <fld30> <fld31> <event_source> The replbeginlsn field in the DBTABLE is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The replbeginlsn field in the DBTABLE is invalid." }
				id => "message-002944"
				add_field => {
					"[event][id]" => "002944"
					"[rsa][message][id1]" => "002944"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002945
		# line in RSA:  <fld30> <fld31> <event_source> The replication frequency (@repl_freq) must be either 'continuous' or 'snapshot'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The replication frequency (@repl_freq) must be either 'continuous' or 'snapshot'." }
				id => "message-002945"
				add_field => {
					"[event][id]" => "002945"
					"[rsa][message][id1]" => "002945"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002946
		# line in RSA:  <fld30> <fld31> <event_source> The replication option '<fld1>' has been set to FALSE already. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The replication option '%{fld1}' has been set to FALSE already." }
				id => "message-002946"
				add_field => {
					"[event][id]" => "002946"
					"[rsa][message][id1]" => "002946"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002947
		# line in RSA:  <fld30> <fld31> <event_source> The replication option '<fld1>' has been set to TRUE already. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The replication option '%{fld1}' has been set to TRUE already." }
				id => "message-002947"
				add_field => {
					"[event][id]" => "002947"
					"[rsa][message][id1]" => "002947"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002948
		# line in RSA:  <fld30> <fld31> <event_source> The replication option '<fld1>' of database '<fld2>' has already been set to true. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The replication option '%{fld1}' of database '%{fld2}' has already been set to true." }
				id => "message-002948"
				add_field => {
					"[event][id]" => "002948"
					"[rsa][message][id1]" => "002948"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002949
		# line in RSA:  <fld30> <fld31> <event_source> The replication option '<fld1>' of database '<fld2>' has been set to false. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The replication option '%{fld1}' of database '%{fld2}' has been set to false." }
				id => "message-002949"
				add_field => {
					"[event][id]" => "002949"
					"[rsa][message][id1]" => "002949"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002950
		# line in RSA:  <fld30> <fld31> <event_source> The replication system table '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The replication system table '%{fld1}' already exists." }
				id => "message-002950"
				add_field => {
					"[event][id]" => "002950"
					"[rsa][message][id1]" => "002950"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002951
		# line in RSA:  <fld30> <fld31> <event_source> The request for <fld1>_MSG '<fld2>' failed because '<fld3>' is a <fld4>_MSG object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The request for %{fld1}_MSG '%{fld2}' failed because '%{fld3}' is a %{fld4}_MSG object." }
				id => "message-002951"
				add_field => {
					"[event][id]" => "002951"
					"[rsa][message][id1]" => "002951"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002952
		# line in RSA:  <fld30> <fld31> <event_source> The requested operation could not be performed because the OLE DB provider '<fld1>' does not support the required transaction interface. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The requested operation could not be performed because the OLE DB provider '%{fld1}' does not support the required transaction interface." }
				id => "message-002952"
				add_field => {
					"[event][id]" => "002952"
					"[rsa][message][id1]" => "002952"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002953
		# line in RSA:  <fld30> <fld31> <event_source> The requested row is not in the fetch buffer. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The requested row is not in the fetch buffer." }
				id => "message-002953"
				add_field => {
					"[event][id]" => "002953"
					"[rsa][message][id1]" => "002953"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002954
		# line in RSA:  <fld30> <fld31> <event_source> The required FormatFile property is missing from the provider string of the server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The required FormatFile property is missing from the provider string of the server." }
				id => "message-002954"
				add_field => {
					"[event][id]" => "002954"
					"[rsa][message][id1]" => "002954"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002955
		# line in RSA:  <fld30> <fld31> <event_source> The resolver information should be specified while using the '<fld1>' resolver. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The resolver information should be specified while using the '%{fld1}' resolver." }
				id => "message-002955"
				add_field => {
					"[event][id]" => "002955"
					"[rsa][message][id1]" => "002955"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002956
		# line in RSA:  <fld30> <fld31> <event_source> The resolver information should specify a column with data type, datetime, or smalldatetime while using the '<fld1>' resolver. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The resolver information should specify a column with data type, datetime, or smalldatetime while using the '%{fld1}' resolver." }
				id => "message-002956"
				add_field => {
					"[event][id]" => "002956"
					"[rsa][message][id1]" => "002956"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002957
		# line in RSA:  <fld30> <fld31> <event_source> The resolver information was specified without specifying the resolver to be used for article '<fld1>'. The default resolver will be used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The resolver information was specified without specifying the resolver to be used for article '%{fld1}'. The default resolver will be used." }
				id => "message-002957"
				add_field => {
					"[event][id]" => "002957"
					"[rsa][message][id1]" => "002957"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002958
		# line in RSA:  <fld30> <fld31> <event_source> The RESTORE operation cannot proceed because one or more files have been added or dropped from the database since the backup set was created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The RESTORE operation cannot proceed because one or more files have been added or dropped from the database since the backup set was created." }
				id => "message-002958"
				add_field => {
					"[event][id]" => "002958"
					"[rsa][message][id1]" => "002958"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002959
		# line in RSA:  <fld30> <fld31> <event_source> The resync date specified '<fld1>' is not a valid date. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The resync date specified '%{fld1}' is not a valid date." }
				id => "message-002959"
				add_field => {
					"[event][id]" => "002959"
					"[rsa][message][id1]" => "002959"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002960
		# line in RSA:  <fld30> <fld31> <event_source> The retention period for the distribution database must be greater than the retention period of any existing non-merge publications.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The retention period for the distribution database must be greater than the retention period of any existing non-merge publications." }
				id => "message-002960"
				add_field => {
					"[event][id]" => "002960"
					"[rsa][message][id1]" => "002960"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002961
		# line in RSA:  <fld30> <fld31> <event_source> The retention period must be greater than or equal to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The retention period must be greater than or equal to %{fld1}." }
				id => "message-002961"
				add_field => {
					"[event][id]" => "002961"
					"[rsa][message][id1]" => "002961"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002962
		# line in RSA:  <fld30> <fld31> <event_source> The retention period must be less than the retention period for the distribution database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The retention period must be less than the retention period for the distribution database." }
				id => "message-002962"
				add_field => {
					"[event][id]" => "002962"
					"[rsa][message][id1]" => "002962"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002963
		# line in RSA:  <fld30> <fld31> <event_source> The role '<fld1>' already exists in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The role '%{fld1}' already exists in the current database." }
				id => "message-002963"
				add_field => {
					"[event][id]" => "002963"
					"[rsa][message][id1]" => "002963"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002964
		# line in RSA:  <fld30> <fld31> <event_source> The role '<fld1>' does not exist in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The role '%{fld1}' does not exist in the current database." }
				id => "message-002964"
				add_field => {
					"[event][id]" => "002964"
					"[rsa][message][id1]" => "002964"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002965
		# line in RSA:  <fld30> <fld31> <event_source> The role has members. It must be empty before it can be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The role has members. It must be empty before it can be dropped." }
				id => "message-002965"
				add_field => {
					"[event][id]" => "002965"
					"[rsa][message][id1]" => "002965"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002966
		# line in RSA:  <fld30> <fld31> <event_source> The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION." }
				id => "message-002966"
				add_field => {
					"[event][id]" => "002966"
					"[rsa][message][id1]" => "002966"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002967
		# line in RSA:  <fld30> <fld31> <event_source> The row for user '<fld1>' will be fixed by updating its login link to a login already in existence. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row for user '%{fld1}' will be fixed by updating its login link to a login already in existence." }
				id => "message-002967"
				add_field => {
					"[event][id]" => "002967"
					"[rsa][message][id1]" => "002967"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002968
		# line in RSA:  <fld30> <fld31> <event_source> The row handle was invalid or was a row handle to which the current thread does not have access rights. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row handle was invalid or was a row handle to which the current thread does not have access rights." }
				id => "message-002968"
				add_field => {
					"[event][id]" => "002968"
					"[rsa][message][id1]" => "002968"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002969
		# line in RSA:  <fld30> <fld31> <event_source> The row has a pending delete or the deletion had been transmitted to the data source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row has a pending delete or the deletion had been transmitted to the data source." }
				id => "message-002969"
				add_field => {
					"[event][id]" => "002969"
					"[rsa][message][id1]" => "002969"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002970
		# line in RSA:  <fld30> <fld31> <event_source> The row has a storage object open. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row has a storage object open." }
				id => "message-002970"
				add_field => {
					"[event][id]" => "002970"
					"[rsa][message][id1]" => "002970"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002971
		# line in RSA:  <fld30> <fld31> <event_source> The row is a pending insert row. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row is a pending insert row." }
				id => "message-002971"
				add_field => {
					"[event][id]" => "002971"
					"[rsa][message][id1]" => "002971"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002972
		# line in RSA:  <fld30> <fld31> <event_source> The row size of table '<fld1>' exceeds the replication limit of 6,000 bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row size of table '%{fld1}' exceeds the replication limit of 6,000 bytes." }
				id => "message-002972"
				add_field => {
					"[event][id]" => "002972"
					"[rsa][message][id1]" => "002972"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002973
		# line in RSA:  <fld30> <fld31> <event_source> The row was not found at the Subscriber when applying the replicated command. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row was not found at the Subscriber when applying the replicated command." }
				id => "message-002973"
				add_field => {
					"[event][id]" => "002973"
					"[rsa][message][id1]" => "002973"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002974
		# line in RSA:  <fld30> <fld31> <event_source> The row was released even though it had a pending change. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row was released even though it had a pending change." }
				id => "message-002974"
				add_field => {
					"[event][id]" => "002974"
					"[rsa][message][id1]" => "002974"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002975
		# line in RSA:  <fld30> <fld31> <event_source> The row was successfully deleted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The row was successfully deleted." }
				id => "message-002975"
				add_field => {
					"[event][id]" => "002975"
					"[rsa][message][id1]" => "002975"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002976
		# line in RSA:  <fld30> <fld31> <event_source> The ROWGUIDCOL property can only be specified on the uniqueidentifier data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The ROWGUIDCOL property can only be specified on the uniqueidentifier data type." }
				id => "message-002976"
				add_field => {
					"[event][id]" => "002976"
					"[rsa][message][id1]" => "002976"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002977
		# line in RSA:  <fld30> <fld31> <event_source> The rowset uses integrated indexes and there is no current index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The rowset uses integrated indexes and there is no current index." }
				id => "message-002977"
				add_field => {
					"[event][id]" => "002977"
					"[rsa][message][id1]" => "002977"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002978
		# line in RSA:  <fld30> <fld31> <event_source> The rowset was using optimistic concurrency and the value of a column has been changed after the containing row was last fetched or resynchronized. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The rowset was using optimistic concurrency and the value of a column has been changed after the containing row was last fetched or resynchronized." }
				id => "message-002978"
				add_field => {
					"[event][id]" => "002978"
					"[rsa][message][id1]" => "002978"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002980
		# line in RSA:  <fld30> <fld31> <event_source> The RPC security information for the Publisher is missing or invalid. Use sp_link_publication to specify it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The RPC security information for the Publisher is missing or invalid. Use sp_link_publication to specify it." }
				id => "message-002980"
				add_field => {
					"[event][id]" => "002980"
					"[rsa][message][id1]" => "002980"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002981
		# line in RSA:  <fld30> <fld31> <event_source> The rule '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The rule '%{fld1}' does not exist." }
				id => "message-002981"
				add_field => {
					"[event][id]" => "002981"
					"[rsa][message][id1]" => "002981"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002982
		# line in RSA:  <fld30> <fld31> <event_source> The scale (<fld1>) for column '<fld2>' must be within the range <fld3> to <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The scale (%{fld1}) for column '%{fld2}' must be within the range %{fld3} to %{fld4}." }
				id => "message-002982"
				add_field => {
					"[event][id]" => "002982"
					"[rsa][message][id1]" => "002982"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002983
		# line in RSA:  <fld30> <fld31> <event_source> The scale must be less than or equal to the precision. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The scale must be less than or equal to the precision." }
				id => "message-002983"
				add_field => {
					"[event][id]" => "002983"
					"[rsa][message][id1]" => "002983"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002984
		# line in RSA:  <fld30> <fld31> <event_source> The schedule for this job is invalid (reason: <fld1>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The schedule for this job is invalid (reason: %{fld1})." }
				id => "message-002984"
				add_field => {
					"[event][id]" => "002984"
					"[rsa][message][id1]" => "002984"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002985
		# line in RSA:  <fld30> <fld31> <event_source> The Scheduler <fld1> appears to be hung. SPID <fld2>, ECID  <fld3> UMS Context 0x <fld4> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Scheduler %{fld1} appears to be hung. SPID %{fld2}, ECID  %{fld3} UMS Context 0x %{fld4}" }
				id => "message-002985"
				add_field => {
					"[event][id]" => "002985"
					"[rsa][message][id1]" => "002985"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002986
		# line in RSA:  <fld30> <fld31> <event_source> The schema change information could not be updated at the subscription database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The schema change information could not be updated at the subscription database." }
				id => "message-002986"
				add_field => {
					"[event][id]" => "002986"
					"[rsa][message][id1]" => "002986"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002987
		# line in RSA:  <fld30> <fld31> <event_source> The schema for database '<fld1>' is changing. May find spurious allocation problems due to schema changes in progress. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The schema for database '%{fld1}' is changing. May find spurious allocation problems due to schema changes in progress." }
				id => "message-002987"
				add_field => {
					"[event][id]" => "002987"
					"[rsa][message][id1]" => "002987"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002988
		# line in RSA:  <fld30> <fld31> <event_source> The schema-bound view '<fld1>'  can be published only as 'indexed view schema only'  or a log-based indexed view (transactional only) article.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The schema-bound view '%{fld1}'  can be published only as 'indexed view schema only'  or a log-based indexed view (transactional only) article." }
				id => "message-002988"
				add_field => {
					"[event][id]" => "002988"
					"[rsa][message][id1]" => "002988"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002989
		# line in RSA:  <fld30> <fld31> <event_source> The sector size for device <fld1> is <fld2>. SQL Server cannot use the NO_BUFFERING option during I/O on this device. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The sector size for device %{fld1} is %{fld2}. SQL Server cannot use the NO_BUFFERING option during I/O on this device." }
				id => "message-002989"
				add_field => {
					"[event][id]" => "002989"
					"[rsa][message][id1]" => "002989"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002990
		# line in RSA:  <fld30> <fld31> <event_source> The security mode specified requires the server '<fld1>' in sysservers. Use sp_addlinkedserver to add the server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The security mode specified requires the server '%{fld1}' in sysservers. Use sp_addlinkedserver to add the server." }
				id => "message-002990"
				add_field => {
					"[event][id]" => "002990"
					"[rsa][message][id1]" => "002990"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002991
		# line in RSA:  <fld30> <fld31> <event_source> The SELECT INTO statement cannot have same source and destination tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The SELECT INTO statement cannot have same source and destination tables." }
				id => "message-002991"
				add_field => {
					"[event][id]" => "002991"
					"[rsa][message][id1]" => "002991"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002992
		# line in RSA:  <fld30> <fld31> <event_source> The SELECT item identified by the ORDER BY number <fld1> contains a variable as part of the expression identifying a column position. Variables are only allowed when ordering by an expression referencing a column name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The SELECT item identified by the ORDER BY number %{fld1} contains a variable as part of the expression identifying a column position. Variables are only allowed when ordering by an expression referencing a column name." }
				id => "message-002992"
				add_field => {
					"[event][id]" => "002992"
					"[rsa][message][id1]" => "002992"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002993
		# line in RSA:  <fld30> <fld31> <event_source> The select list for the INSERT statement contains fewer items than the insert list. The number of SELECT values must match the number of INSERT columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The select list for the INSERT statement contains fewer items than the insert list. The number of SELECT values must match the number of INSERT columns." }
				id => "message-002993"
				add_field => {
					"[event][id]" => "002993"
					"[rsa][message][id1]" => "002993"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002994
		# line in RSA:  <fld30> <fld31> <event_source> The select list for the INSERT statement contains more items than the insert list. The number of SELECT values must match the number of INSERT columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The select list for the INSERT statement contains more items than the insert list. The number of SELECT values must match the number of INSERT columns." }
				id => "message-002994"
				add_field => {
					"[event][id]" => "002994"
					"[rsa][message][id1]" => "002994"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002995
		# line in RSA:  <fld30> <fld31> <event_source> The selected index does not exist on table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The selected index does not exist on table '%{fld1}'." }
				id => "message-002995"
				add_field => {
					"[event][id]" => "002995"
					"[rsa][message][id1]" => "002995"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002996
		# line in RSA:  <fld30> <fld31> <event_source> The server '<fld1>' already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server '%{fld1}' already exists." }
				id => "message-002996"
				add_field => {
					"[event][id]" => "002996"
					"[rsa][message][id1]" => "002996"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002997
		# line in RSA:  <fld30> <fld31> <event_source> The server '<fld1>' does not exist. Use sp_helpserver to show available servers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server '%{fld1}' does not exist. Use sp_helpserver to show available servers." }
				id => "message-002997"
				add_field => {
					"[event][id]" => "002997"
					"[rsa][message][id1]" => "002997"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002998
		# line in RSA:  <fld30> <fld31> <event_source> The server '<fld1>' is already a Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server '%{fld1}' is already a Subscriber." }
				id => "message-002998"
				add_field => {
					"[event][id]" => "002998"
					"[rsa][message][id1]" => "002998"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 002999
		# line in RSA:  <fld30> <fld31> <event_source> The server '<fld1>' is already defined as a Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server '%{fld1}' is already defined as a Distributor." }
				id => "message-002999"
				add_field => {
					"[event][id]" => "002999"
					"[rsa][message][id1]" => "002999"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003000
		# line in RSA:  <fld30> <fld31> <event_source> The server '<fld1>' is already listed as a Publisher. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server '%{fld1}' is already listed as a Publisher." }
				id => "message-003000"
				add_field => {
					"[event][id]" => "003000"
					"[rsa][message][id1]" => "003000"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003001
		# line in RSA:  <fld30> <fld31> <event_source> The server '<fld1>' is not a Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server '%{fld1}' is not a Subscriber." }
				id => "message-003001"
				add_field => {
					"[event][id]" => "003001"
					"[rsa][message][id1]" => "003001"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003002
		# line in RSA:  <fld30> <fld31> <event_source> The server could not load DCOM. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server could not load DCOM." }
				id => "message-003002"
				add_field => {
					"[event][id]" => "003002"
					"[rsa][message][id1]" => "003002"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003003
		# line in RSA:  <fld30> <fld31> <event_source> The server encountered a stack overflow during compile time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server encountered a stack overflow during compile time." }
				id => "message-003003"
				add_field => {
					"[event][id]" => "003003"
					"[rsa][message][id1]" => "003003"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003004
		# line in RSA:  <fld30> <fld31> <event_source> The server option value '<fld1>' supplied is unrecognized. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The server option value '%{fld1}' supplied is unrecognized." }
				id => "message-003004"
				add_field => {
					"[event][id]" => "003004"
					"[rsa][message][id1]" => "003004"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003005
		# line in RSA:  <fld30> <fld31> <event_source> The session had an active transaction when it tried to enlist in a Distributed Transaction Coordinator transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The session had an active transaction when it tried to enlist in a Distributed Transaction Coordinator transaction." }
				id => "message-003005"
				add_field => {
					"[event][id]" => "003005"
					"[rsa][message][id1]" => "003005"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003006
		# line in RSA:  <fld30> <fld31> <event_source> The session was enlisted in an active user transaction while trying to bind to a new transaction. The session has defected from the previous user transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The session was enlisted in an active user transaction while trying to bind to a new transaction. The session has defected from the previous user transaction." }
				id => "message-003006"
				add_field => {
					"[event][id]" => "003006"
					"[rsa][message][id1]" => "003006"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003007
		# line in RSA:  <fld30> <fld31> <event_source> The SET SHOWPLAN statements must be the only statements in the batch. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The SET SHOWPLAN statements must be the only statements in the batch." }
				id => "message-003007"
				add_field => {
					"[event][id]" => "003007"
					"[rsa][message][id1]" => "003007"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003008
		# line in RSA:  <fld30> <fld31> <event_source> The severity level of the '<fld1>' version of this message must be the same as the severity level (<fld2>) of the us_english version. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The severity level of the '%{fld1}' version of this message must be the same as the severity level (%{fld2}) of the us_english version." }
				id => "message-003008"
				add_field => {
					"[event][id]" => "003008"
					"[rsa][message][id1]" => "003008"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003009
		# line in RSA:  <fld30> <fld31> <event_source> The SHUTDOWN statement cannot be executed within a transaction or by a stored procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The SHUTDOWN statement cannot be executed within a transaction or by a stored procedure." }
				id => "message-003009"
				add_field => {
					"[event][id]" => "003009"
					"[rsa][message][id1]" => "003009"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003010
		# line in RSA:  <fld30> <fld31> <event_source> The size (<fld1>) given to the <fld2>_MSG '<fld3>' exceeds the maximum allowed (<fld4>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The size (%{fld1}) given to the %{fld2}_MSG '%{fld3}' exceeds the maximum allowed (%{fld4})." }
				id => "message-003010"
				add_field => {
					"[event][id]" => "003010"
					"[rsa][message][id1]" => "003010"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003011
		# line in RSA:  <fld30> <fld31> <event_source> The size (<fld1>) given to the <fld2>_MSG '<fld3>' exceeds the maximum allowed for any data type (<fld4>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The size (%{fld1}) given to the %{fld2}_MSG '%{fld3}' exceeds the maximum allowed for any data type (%{fld4})." }
				id => "message-003011"
				add_field => {
					"[event][id]" => "003011"
					"[rsa][message][id1]" => "003011"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003012
		# line in RSA:  <fld30> <fld31> <event_source> The size associated with an extended property cannot be more than 7,500 bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The size associated with an extended property cannot be more than 7,500 bytes." }
				id => "message-003012"
				add_field => {
					"[event][id]" => "003012"
					"[rsa][message][id1]" => "003012"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003013
		# line in RSA:  <fld30> <fld31> <event_source> The size of a single log file must not be greater than 2 TB. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The size of a single log file must not be greater than 2 TB." }
				id => "message-003013"
				add_field => {
					"[event][id]" => "003013"
					"[rsa][message][id1]" => "003013"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003014
		# line in RSA:  <fld30> <fld31> <event_source> The Snapshot Agent corresponding to the publication '<fld1>' could not be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Snapshot Agent corresponding to the publication '%{fld1}' could not be dropped." }
				id => "message-003014"
				add_field => {
					"[event][id]" => "003014"
					"[rsa][message][id1]" => "003014"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003015
		# line in RSA:  <fld30> <fld31> <event_source> The snapshot compression option can be enabled only for a publication having an alternate snapshot generation folder defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The snapshot compression option can be enabled only for a publication having an alternate snapshot generation folder defined." }
				id => "message-003015"
				add_field => {
					"[event][id]" => "003015"
					"[rsa][message][id1]" => "003015"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003016
		# line in RSA:  <fld30> <fld31> <event_source> The SORTED_DATA_REORG option cannot be used for a nonclustered index if the keys are not unique within the table. CREATE INDEX was aborted because of duplicate keys. Primary key is '<fld1>_KEY'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The SORTED_DATA_REORG option cannot be used for a nonclustered index if the keys are not unique within the table. CREATE INDEX was aborted because of duplicate keys. Primary key is '%{fld1}_KEY'." }
				id => "message-003016"
				add_field => {
					"[event][id]" => "003016"
					"[rsa][message][id1]" => "003016"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003017
		# line in RSA:  <fld30> <fld31> <event_source> The source object '<fld1>' must be a schema-bound view to be published as 'indexed view schema only' or a log-based indexed view article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The source object '%{fld1}' must be a schema-bound view to be published as 'indexed view schema only' or a log-based indexed view article." }
				id => "message-003017"
				add_field => {
					"[event][id]" => "003017"
					"[rsa][message][id1]" => "003017"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003018
		# line in RSA:  <fld30> <fld31> <event_source> The source object '<fld1>' must be a schema-bound view with at least a clustered index to be published as a log-based indexed view article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The source object '%{fld1}' must be a schema-bound view with at least a clustered index to be published as a log-based indexed view article." }
				id => "message-003018"
				add_field => {
					"[event][id]" => "003018"
					"[rsa][message][id1]" => "003018"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003019
		# line in RSA:  <fld30> <fld31> <event_source> The special word '<fld1>' cannot be used for a logical device name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The special word '%{fld1}' cannot be used for a logical device name." }
				id => "message-003019"
				add_field => {
					"[event][id]" => "003019"
					"[rsa][message][id1]" => "003019"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003020
		# line in RSA:  <fld30> <fld31> <event_source> The specified <fld1> ('<fld2>') already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified %{fld1} ('%{fld2}') already exists." }
				id => "message-003020"
				add_field => {
					"[event][id]" => "003020"
					"[rsa][message][id1]" => "003020"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003021
		# line in RSA:  <fld30> <fld31> <event_source> The specified <fld1> ('<fld2>') does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified %{fld1} ('%{fld2}') does not exist." }
				id => "message-003021"
				add_field => {
					"[event][id]" => "003021"
					"[rsa][message][id1]" => "003021"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003022
		# line in RSA:  <fld30> <fld31> <event_source> The specified <fld1> is too long. It must contain no more than <fld2> characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified %{fld1} is too long. It must contain no more than %{fld2} characters." }
				id => "message-003022"
				add_field => {
					"[event][id]" => "003022"
					"[rsa][message][id1]" => "003022"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003023
		# line in RSA:  <fld30> <fld31> <event_source> The specified '<fld1>' is invalid (valid values are greater than 0 but excluding <fld2>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified '%{fld1}' is invalid (valid values are greater than 0 but excluding %{fld2})." }
				id => "message-003023"
				add_field => {
					"[event][id]" => "003023"
					"[rsa][message][id1]" => "003023"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003024
		# line in RSA:  <fld30> <fld31> <event_source> The specified '<fld1>' is invalid (valid values are returned by <fld2>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified '%{fld1}' is invalid (valid values are returned by %{fld2})." }
				id => "message-003024"
				add_field => {
					"[event][id]" => "003024"
					"[rsa][message][id1]" => "003024"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003025
		# line in RSA:  <fld30> <fld31> <event_source> The specified '<fld1>' is invalid (valid values are: <fld2>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified '%{fld1}' is invalid (valid values are: %{fld2})." }
				id => "message-003025"
				add_field => {
					"[event][id]" => "003025"
					"[rsa][message][id1]" => "003025"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003026
		# line in RSA:  <fld30> <fld31> <event_source> The specified '<fld1>' is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified '%{fld1}' is invalid." }
				id => "message-003026"
				add_field => {
					"[event][id]" => "003026"
					"[rsa][message][id1]" => "003026"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003027
		# line in RSA:  <fld30> <fld31> <event_source> The specified @agent_jobid is not a valid job id for a '<fld1>' agent job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified @agent_jobid is not a valid job id for a '%{fld1}' agent job." }
				id => "message-003027"
				add_field => {
					"[event][id]" => "003027"
					"[rsa][message][id1]" => "003027"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003028
		# line in RSA:  <fld30> <fld31> <event_source> The specified @backup_file_name is not a database backup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified @backup_file_name is not a database backup." }
				id => "message-003028"
				add_field => {
					"[event][id]" => "003028"
					"[rsa][message][id1]" => "003028"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003030
		# line in RSA:  <fld30> <fld31> <event_source> The specified @backup_file_name was not created from database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified @backup_file_name was not created from database '%{fld1}'." }
				id => "message-003030"
				add_field => {
					"[event][id]" => "003030"
					"[rsa][message][id1]" => "003030"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003031
		# line in RSA:  <fld30> <fld31> <event_source> The specified @backup_file_name was not taken from database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified @backup_file_name was not taken from database '%{fld1}'." }
				id => "message-003031"
				add_field => {
					"[event][id]" => "003031"
					"[rsa][message][id1]" => "003031"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003032
		# line in RSA:  <fld30> <fld31> <event_source> The specified @destination_folder is not a valid path of an existing folder. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified @destination_folder is not a valid path of an existing folder." }
				id => "message-003032"
				add_field => {
					"[event][id]" => "003032"
					"[rsa][message][id1]" => "003032"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003033
		# line in RSA:  <fld30> <fld31> <event_source> The specified automatic identity support parameters conflict with the settings in another article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified automatic identity support parameters conflict with the settings in another article." }
				id => "message-003033"
				add_field => {
					"[event][id]" => "003033"
					"[rsa][message][id1]" => "003033"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003034
		# line in RSA:  <fld30> <fld31> <event_source> The specified begin LSN (<fld1>) for replication log scan occurs before replbeginlsn (<fld2>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified begin LSN (%{fld1}) for replication log scan occurs before replbeginlsn (%{fld2})." }
				id => "message-003034"
				add_field => {
					"[event][id]" => "003034"
					"[rsa][message][id1]" => "003034"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003035
		# line in RSA:  <fld30> <fld31> <event_source> The specified dynamic snapshot job name '<fld1>' is already in use. Try the operation again with a different job name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified dynamic snapshot job name '%{fld1}' is already in use. Try the operation again with a different job name." }
				id => "message-003035"
				add_field => {
					"[event][id]" => "003035"
					"[rsa][message][id1]" => "003035"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003036
		# line in RSA:  <fld30> <fld31> <event_source> The specified edge table has an invalid format. Column '<fld1>' is missing or has an invalid data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified edge table has an invalid format. Column '%{fld1}' is missing or has an invalid data type." }
				id => "message-003036"
				add_field => {
					"[event][id]" => "003036"
					"[rsa][message][id1]" => "003036"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003037
		# line in RSA:  <fld30> <fld31> <event_source> The specified filter procedure is already associated with a table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified filter procedure is already associated with a table." }
				id => "message-003037"
				add_field => {
					"[event][id]" => "003037"
					"[rsa][message][id1]" => "003037"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003038
		# line in RSA:  <fld30> <fld31> <event_source> The specified index does not exist or the provider does not support an index scan on this data source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified index does not exist or the provider does not support an index scan on this data source." }
				id => "message-003038"
				add_field => {
					"[event][id]" => "003038"
					"[rsa][message][id1]" => "003038"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003039
		# line in RSA:  <fld30> <fld31> <event_source> The specified job "<fld1>" is not created for maintenance plans. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified job \"%{fld1}\" is not created for maintenance plans." }
				id => "message-003039"
				add_field => {
					"[event][id]" => "003039"
					"[rsa][message][id1]" => "003039"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003040
		# line in RSA:  <fld30> <fld31> <event_source> The specified job ID does not represent a <fld1> agent job for any push subscription in this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified job ID does not represent a %{fld1} agent job for any push subscription in this database." }
				id => "message-003040"
				add_field => {
					"[event][id]" => "003040"
					"[rsa][message][id1]" => "003040"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003041
		# line in RSA:  <fld30> <fld31> <event_source> The specified job ID must identify a Distribution Agent or a Merge Agent job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified job ID must identify a Distribution Agent or a Merge Agent job." }
				id => "message-003041"
				add_field => {
					"[event][id]" => "003041"
					"[rsa][message][id1]" => "003041"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003042
		# line in RSA:  <fld30> <fld31> <event_source> The specified LSN (<fld1>) for repldone log scan is not a replicated commit record. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified LSN (%{fld1}) for repldone log scan is not a replicated commit record." }
				id => "message-003042"
				add_field => {
					"[event][id]" => "003042"
					"[rsa][message][id1]" => "003042"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003043
		# line in RSA:  <fld30> <fld31> <event_source> The specified LSN (<fld1>) for repldone log scan is not present in the transaction log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified LSN (%{fld1}) for repldone log scan is not present in the transaction log." }
				id => "message-003043"
				add_field => {
					"[event][id]" => "003043"
					"[rsa][message][id1]" => "003043"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003044
		# line in RSA:  <fld30> <fld31> <event_source> The specified LSN (<fld1>) for repldone log scan occurs before the current start of replication in the log (<fld2>). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified LSN (%{fld1}) for repldone log scan occurs before the current start of replication in the log (%{fld2})." }
				id => "message-003044"
				add_field => {
					"[event][id]" => "003044"
					"[rsa][message][id1]" => "003044"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003045
		# line in RSA:  <fld30> <fld31> <event_source> The specified offload server name contains the invalid character '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified offload server name contains the invalid character '%{fld1}'." }
				id => "message-003045"
				add_field => {
					"[event][id]" => "003045"
					"[rsa][message][id1]" => "003045"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003046
		# line in RSA:  <fld30> <fld31> <event_source> The specified source object must be a stored procedure object if it is published as a 'proc schema only' type article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified source object must be a stored procedure object if it is published as a 'proc schema only' type article." }
				id => "message-003046"
				add_field => {
					"[event][id]" => "003046"
					"[rsa][message][id1]" => "003046"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003047
		# line in RSA:  <fld30> <fld31> <event_source> The specified source object must be a user-defined function object if it is going to be published as a 'func schema only' type article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified source object must be a user-defined function object if it is going to be published as a 'func schema only' type article." }
				id => "message-003047"
				add_field => {
					"[event][id]" => "003047"
					"[rsa][message][id1]" => "003047"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003048
		# line in RSA:  <fld30> <fld31> <event_source> The specified source object must be a view object if it is going to be as a 'view schema only' type article. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified source object must be a view object if it is going to be as a 'view schema only' type article." }
				id => "message-003048"
				add_field => {
					"[event][id]" => "003048"
					"[rsa][message][id1]" => "003048"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003049
		# line in RSA:  <fld30> <fld31> <event_source> The specified SPID does not process input/output data streams. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified SPID does not process input/output data streams." }
				id => "message-003049"
				add_field => {
					"[event][id]" => "003049"
					"[rsa][message][id1]" => "003049"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003050
		# line in RSA:  <fld30> <fld31> <event_source> The specified subscription does not exist or has not been synchronized yet. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified subscription does not exist or has not been synchronized yet." }
				id => "message-003050"
				add_field => {
					"[event][id]" => "003050"
					"[rsa][message][id1]" => "003050"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003051
		# line in RSA:  <fld30> <fld31> <event_source> The specified table does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified table does not exist." }
				id => "message-003051"
				add_field => {
					"[event][id]" => "003051"
					"[rsa][message][id1]" => "003051"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003052
		# line in RSA:  <fld30> <fld31> <event_source> The specified user name is already aliased. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified user name is already aliased." }
				id => "message-003052"
				add_field => {
					"[event][id]" => "003052"
					"[rsa][message][id1]" => "003052"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003053
		# line in RSA:  <fld30> <fld31> <event_source> The specified user options value is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The specified user options value is invalid." }
				id => "message-003053"
				add_field => {
					"[event][id]" => "003053"
					"[rsa][message][id1]" => "003053"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003054
		# line in RSA:  <fld30> <fld31> <event_source> The SQL Debugging Interface (SDI) requires that SQL Server, when started as a service, must not log on as System Account. Reset to log on as user account using Control Panel. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The SQL Debugging Interface (SDI) requires that SQL Server, when started as a service, must not log on as System Account. Reset to log on as user account using Control Panel." }
				id => "message-003054"
				add_field => {
					"[event][id]" => "003054"
					"[rsa][message][id1]" => "003054"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003055
		# line in RSA:  <fld30> <fld31> <event_source> The SQL Server '<fld1>' could not obtain Windows group membership information for login '<fld2>'. Verify that the Windows account has access to the domain of the login. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The SQL Server '%{fld1}' could not obtain Windows group membership information for login '%{fld2}'. Verify that the Windows account has access to the domain of the login." }
				id => "message-003055"
				add_field => {
					"[event][id]" => "003055"
					"[rsa][message][id1]" => "003055"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003056
		# line in RSA:  <fld30> <fld31> <event_source> The SQL Server cannot obtain a LOCK resource at this time. Rerun your statement when there are fewer active users or ask the system administrator to check the SQL Server lock and memory configuration. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The SQL Server cannot obtain a LOCK resource at this time. Rerun your statement when there are fewer active users or ask the system administrator to check the SQL Server lock and memory configuration." }
				id => "message-003056"
				add_field => {
					"[event][id]" => "003056"
					"[rsa][message][id1]" => "003056"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003057
		# line in RSA:  <fld30> <fld31> <event_source> The srchindex system function failed for index ID = <fld1>, sridoff = <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The srchindex system function failed for index ID = %{fld1}, sridoff = %{fld2}." }
				id => "message-003057"
				add_field => {
					"[event][id]" => "003057"
					"[rsa][message][id1]" => "003057"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003058
		# line in RSA:  <fld30> <fld31> <event_source> The STANDBY filename is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The STANDBY filename is invalid." }
				id => "message-003058"
				add_field => {
					"[event][id]" => "003058"
					"[rsa][message][id1]" => "003058"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003059
		# line in RSA:  <fld30> <fld31> <event_source> The statement <fld1> is not allowed while the recovery model is SIMPLE. Use BACKUP DATABASE or change the recovery model using ALTER DATABASE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The statement %{fld1} is not allowed while the recovery model is SIMPLE. Use BACKUP DATABASE or change the recovery model using ALTER DATABASE." }
				id => "message-003059"
				add_field => {
					"[event][id]" => "003059"
					"[rsa][message][id1]" => "003059"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003060
		# line in RSA:  <fld30> <fld31> <event_source> The statement has been terminated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The statement has been terminated." }
				id => "message-003060"
				add_field => {
					"[event][id]" => "003060"
					"[rsa][message][id1]" => "003060"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003061
		# line in RSA:  <fld30> <fld31> <event_source> The status value is the same as the previous status value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The status value is the same as the previous status value." }
				id => "message-003061"
				add_field => {
					"[event][id]" => "003061"
					"[rsa][message][id1]" => "003061"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003062
		# line in RSA:  <fld30> <fld31> <event_source> The STOPAT option is not supported for RESTORE DATABASE. You can use the STOPAT option with RESTORE LOG. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The STOPAT option is not supported for RESTORE DATABASE. You can use the STOPAT option with RESTORE LOG." }
				id => "message-003062"
				add_field => {
					"[event][id]" => "003062"
					"[rsa][message][id1]" => "003062"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003063
		# line in RSA:  <fld30> <fld31> <event_source> The stored procedure '<fld1>' is already published as an incompatible type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The stored procedure '%{fld1}' is already published as an incompatible type." }
				id => "message-003063"
				add_field => {
					"[event][id]" => "003063"
					"[rsa][message][id1]" => "003063"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003064
		# line in RSA:  <fld30> <fld31> <event_source> The stored procedure sp_replsetoriginator must be executed within a transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The stored procedure sp_replsetoriginator must be executed within a transaction." }
				id => "message-003064"
				add_field => {
					"[event][id]" => "003064"
					"[rsa][message][id1]" => "003064"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003065
		# line in RSA:  <fld30> <fld31> <event_source> The string being encrypted cannot have null characters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The string being encrypted cannot have null characters." }
				id => "message-003065"
				add_field => {
					"[event][id]" => "003065"
					"[rsa][message][id1]" => "003065"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003066
		# line in RSA:  <fld30> <fld31> <event_source> The Subscriber information could not be obtained from the Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Subscriber information could not be obtained from the Distributor." }
				id => "message-003066"
				add_field => {
					"[event][id]" => "003066"
					"[rsa][message][id1]" => "003066"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003067
		# line in RSA:  <fld30> <fld31> <event_source> The Subscriber is not registered. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Subscriber is not registered." }
				id => "message-003067"
				add_field => {
					"[event][id]" => "003067"
					"[rsa][message][id1]" => "003067"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003068
		# line in RSA:  <fld30> <fld31> <event_source> The Subscriber was dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Subscriber was dropped." }
				id => "message-003068"
				add_field => {
					"[event][id]" => "003068"
					"[rsa][message][id1]" => "003068"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003069
		# line in RSA:  <fld30> <fld31> <event_source> The subscription @sync_type parameter value 'manual' is no longer supported. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription @sync_type parameter value 'manual' is no longer supported." }
				id => "message-003069"
				add_field => {
					"[event][id]" => "003069"
					"[rsa][message][id1]" => "003069"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003070
		# line in RSA:  <fld30> <fld31> <event_source> The subscription already exists. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription already exists." }
				id => "message-003070"
				add_field => {
					"[event][id]" => "003070"
					"[rsa][message][id1]" => "003070"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003071
		# line in RSA:  <fld30> <fld31> <event_source> The subscription cannot be attached because the publication does not allow subscription copies to synchronize changes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription cannot be attached because the publication does not allow subscription copies to synchronize changes." }
				id => "message-003071"
				add_field => {
					"[event][id]" => "003071"
					"[rsa][message][id1]" => "003071"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003072
		# line in RSA:  <fld30> <fld31> <event_source> The subscription could not be attached because the subscription to publication '<fld1>' has expired. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription could not be attached because the subscription to publication '%{fld1}' has expired." }
				id => "message-003072"
				add_field => {
					"[event][id]" => "003072"
					"[rsa][message][id1]" => "003072"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003073
		# line in RSA:  <fld30> <fld31> <event_source> The subscription could not be created. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription could not be created." }
				id => "message-003073"
				add_field => {
					"[event][id]" => "003073"
					"[rsa][message][id1]" => "003073"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003074
		# line in RSA:  <fld30> <fld31> <event_source> The subscription could not be dropped at this time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription could not be dropped at this time." }
				id => "message-003074"
				add_field => {
					"[event][id]" => "003074"
					"[rsa][message][id1]" => "003074"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003075
		# line in RSA:  <fld30> <fld31> <event_source> The subscription could not be found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription could not be found." }
				id => "message-003075"
				add_field => {
					"[event][id]" => "003075"
					"[rsa][message][id1]" => "003075"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003076
		# line in RSA:  <fld30> <fld31> <event_source> The subscription could not be updated at this time. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription could not be updated at this time." }
				id => "message-003076"
				add_field => {
					"[event][id]" => "003076"
					"[rsa][message][id1]" => "003076"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003077
		# line in RSA:  <fld30> <fld31> <event_source> The subscription created by Subscriber '<fld1>' to publication '<fld2>' has expired and has been dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription created by Subscriber '%{fld1}' to publication '%{fld2}' has expired and has been dropped." }
				id => "message-003077"
				add_field => {
					"[event][id]" => "003077"
					"[rsa][message][id1]" => "003077"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003078
		# line in RSA:  <fld30> <fld31> <event_source> The subscription does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription does not exist." }
				id => "message-003078"
				add_field => {
					"[event][id]" => "003078"
					"[rsa][message][id1]" => "003078"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003079
		# line in RSA:  <fld30> <fld31> <event_source> The subscription has not been synchronized within the maximum retention period or it has been dropped at the Publisher. You must reinitialize the subscription to receive data. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription has not been synchronized within the maximum retention period or it has been dropped at the Publisher. You must reinitialize the subscription to receive data." }
				id => "message-003079"
				add_field => {
					"[event][id]" => "003079"
					"[rsa][message][id1]" => "003079"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003080
		# line in RSA:  <fld30> <fld31> <event_source> The subscription is not initialized or not created for failover mode operations. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription is not initialized or not created for failover mode operations." }
				id => "message-003080"
				add_field => {
					"[event][id]" => "003080"
					"[rsa][message][id1]" => "003080"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003081
		# line in RSA:  <fld30> <fld31> <event_source> The subscription is not initialized. Run the Distribution Agent first. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription is not initialized. Run the Distribution Agent first." }
				id => "message-003081"
				add_field => {
					"[event][id]" => "003081"
					"[rsa][message][id1]" => "003081"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003082
		# line in RSA:  <fld30> <fld31> <event_source> The subscription is uninitialized or unavailable for immediate updating as it is marked for reinitialization. If using queued failover option, run Queue Reader Agent for subscription initialization. Try again after the (re)initialization completes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription is uninitialized or unavailable for immediate updating as it is marked for reinitialization. If using queued failover option, run Queue Reader Agent for subscription initialization. Try again after the (re)initialization completes." }
				id => "message-003082"
				add_field => {
					"[event][id]" => "003082"
					"[rsa][message][id1]" => "003082"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003083
		# line in RSA:  <fld30> <fld31> <event_source> The subscription on the Subscriber does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription on the Subscriber does not exist." }
				id => "message-003083"
				add_field => {
					"[event][id]" => "003083"
					"[rsa][message][id1]" => "003083"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003084
		# line in RSA:  <fld30> <fld31> <event_source> The subscription to publication '<fld1>' has expired and does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription to publication '%{fld1}' has expired and does not exist." }
				id => "message-003084"
				add_field => {
					"[event][id]" => "003084"
					"[rsa][message][id1]" => "003084"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003085
		# line in RSA:  <fld30> <fld31> <event_source> The subscription type '<fld1>' is not allowed on publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription type '%{fld1}' is not allowed on publication '%{fld2}'." }
				id => "message-003085"
				add_field => {
					"[event][id]" => "003085"
					"[rsa][message][id1]" => "003085"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003086
		# line in RSA:  <fld30> <fld31> <event_source> The subscription was updated successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription was updated successfully." }
				id => "message-003086"
				add_field => {
					"[event][id]" => "003086"
					"[rsa][message][id1]" => "003086"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003087
		# line in RSA:  <fld30> <fld31> <event_source> The subscription(s) have been marked inactive and must be reinitialized. NoSync subscriptions will need to be dropped and recreated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription(s) have been marked inactive and must be reinitialized. NoSync subscriptions will need to be dropped and recreated." }
				id => "message-003087"
				add_field => {
					"[event][id]" => "003087"
					"[rsa][message][id1]" => "003087"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003088
		# line in RSA:  <fld30> <fld31> <event_source> The subscription(s) to Publisher '<fld1>' does not allow subscription copy or it has not been synchronized. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The subscription(s) to Publisher '%{fld1}' does not allow subscription copy or it has not been synchronized." }
				id => "message-003088"
				add_field => {
					"[event][id]" => "003088"
					"[rsa][message][id1]" => "003088"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003089
		# line in RSA:  <fld30> <fld31> <event_source> The supplied resolver information does not specify a valid column name to be used for conflict resolution by '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The supplied resolver information does not specify a valid column name to be used for conflict resolution by '%{fld1}'." }
				id => "message-003089"
				add_field => {
					"[event][id]" => "003089"
					"[rsa][message][id1]" => "003089"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003090
		# line in RSA:  <fld30> <fld31> <event_source> The synchronization method (@sync_method) must be '[bcp] native', '[bcp] character', 'concurrent' or 'concurrent_c'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The synchronization method (@sync_method) must be '[bcp] native', '[bcp] character', 'concurrent' or 'concurrent_c'." }
				id => "message-003090"
				add_field => {
					"[event][id]" => "003090"
					"[rsa][message][id1]" => "003090"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003091
		# line in RSA:  <fld30> <fld31> <event_source> The syntax <fld1> OR NOT <fld2> is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The syntax %{fld1} OR NOT %{fld2} is not allowed." }
				id => "message-003091"
				add_field => {
					"[event][id]" => "003091"
					"[rsa][message][id1]" => "003091"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003092
		# line in RSA:  <fld30> <fld31> <event_source> The system cannot self repair this error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The system cannot self repair this error." }
				id => "message-003092"
				add_field => {
					"[event][id]" => "003092"
					"[rsa][message][id1]" => "003092"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003093
		# line in RSA:  <fld30> <fld31> <event_source> The system could not activate enough of the database to rebuild the log. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The system could not activate enough of the database to rebuild the log." }
				id => "message-003093"
				add_field => {
					"[event][id]" => "003093"
					"[rsa][message][id1]" => "003093"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003094
		# line in RSA:  <fld30> <fld31> <event_source> The system database cannot be moved by RESTORE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The system database cannot be moved by RESTORE." }
				id => "message-003094"
				add_field => {
					"[event][id]" => "003094"
					"[rsa][message][id1]" => "003094"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003095
		# line in RSA:  <fld30> <fld31> <event_source> The system tables for merge replication could not be created successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The system tables for merge replication could not be created successfully." }
				id => "message-003095"
				add_field => {
					"[event][id]" => "003095"
					"[rsa][message][id1]" => "003095"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003096
		# line in RSA:  <fld30> <fld31> <event_source> The system tables for merge replication could not be dropped successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The system tables for merge replication could not be dropped successfully." }
				id => "message-003096"
				add_field => {
					"[event][id]" => "003096"
					"[rsa][message][id1]" => "003096"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003097
		# line in RSA:  <fld30> <fld31> <event_source> The table '<fld1>' has no indexes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table '%{fld1}' has no indexes." }
				id => "message-003097"
				add_field => {
					"[event][id]" => "003097"
					"[rsa][message][id1]" => "003097"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003098
		# line in RSA:  <fld30> <fld31> <event_source> The table '<fld1>' is ambiguous. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table '%{fld1}' is ambiguous." }
				id => "message-003098"
				add_field => {
					"[event][id]" => "003098"
					"[rsa][message][id1]" => "003098"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003099
		# line in RSA:  <fld30> <fld31> <event_source> The table '<fld1>' is an inner member of an outer-join clause. This is not allowed if the table also participates in a regular join clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table '%{fld1}' is an inner member of an outer-join clause. This is not allowed if the table also participates in a regular join clause." }
				id => "message-003099"
				add_field => {
					"[event][id]" => "003099"
					"[rsa][message][id1]" => "003099"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003100
		# line in RSA:  <fld30> <fld31> <event_source> The table '<fld1>' was created with the NO_LOG option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table '%{fld1}' was created with the NO_LOG option." }
				id => "message-003100"
				add_field => {
					"[event][id]" => "003100"
					"[rsa][message][id1]" => "003100"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003101
		# line in RSA:  <fld30> <fld31> <event_source> The table '<fld1>' is already published as another article with a different automatic identity support option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table '%{fld1}' is already published as another article with a different automatic identity support option." }
				id => "message-003101"
				add_field => {
					"[event][id]" => "003101"
					"[rsa][message][id1]" => "003101"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003102
		# line in RSA:  <fld30> <fld31> <event_source> The table '<fld1>' must have a primary key to be published using the transaction-based method. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table '%{fld1}' must have a primary key to be published using the transaction-based method." }
				id => "message-003102"
				add_field => {
					"[event][id]" => "003102"
					"[rsa][message][id1]" => "003102"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003103
		# line in RSA:  <fld30> <fld31> <event_source> The table or view must be in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table or view must be in the current database." }
				id => "message-003103"
				add_field => {
					"[event][id]" => "003103"
					"[rsa][message][id1]" => "003103"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003104
		# line in RSA:  <fld30> <fld31> <event_source> The table was built over a live data stream and the position cannot be restarted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table was built over a live data stream and the position cannot be restarted." }
				id => "message-003104"
				add_field => {
					"[event][id]" => "003104"
					"[rsa][message][id1]" => "003104"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003105
		# line in RSA:  <fld30> <fld31> <event_source> The table was in immediate-update mode and the row was not deleted due to reaching a limit on the server, such as query execution timing out. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table was in immediate-update mode and the row was not deleted due to reaching a limit on the server, such as query execution timing out." }
				id => "message-003105"
				add_field => {
					"[event][id]" => "003105"
					"[rsa][message][id1]" => "003105"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003106
		# line in RSA:  <fld30> <fld31> <event_source> The table was in immediate-update mode, and deleting a single row caused more than one row to be deleted in the data source. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The table was in immediate-update mode, and deleting a single row caused more than one row to be deleted in the data source." }
				id => "message-003106"
				add_field => {
					"[event][id]" => "003106"
					"[rsa][message][id1]" => "003106"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003107
		# line in RSA:  <fld30> <fld31> <event_source> The tail of the log for database '<fld1>' has not been backed up. Back up the log and rerun the RESTORE statement specifying the FILE clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The tail of the log for database '%{fld1}' has not been backed up. Back up the log and rerun the RESTORE statement specifying the FILE clause." }
				id => "message-003107"
				add_field => {
					"[event][id]" => "003107"
					"[rsa][message][id1]" => "003107"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003108
		# line in RSA:  <fld30> <fld31> <event_source> The target object type is not updatable through a cursor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The target object type is not updatable through a cursor." }
				id => "message-003108"
				add_field => {
					"[event][id]" => "003108"
					"[rsa][message][id1]" => "003108"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003109
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, and image data types are invalid for local variables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, and image data types are invalid for local variables." }
				id => "message-003109"
				add_field => {
					"[event][id]" => "003109"
					"[rsa][message][id1]" => "003109"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003110
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, and image data types are invalid in this subquery or aggregate expression. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, and image data types are invalid in this subquery or aggregate expression." }
				id => "message-003110"
				add_field => {
					"[event][id]" => "003110"
					"[rsa][message][id1]" => "003110"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003111
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, and image data types cannot be compared or sorted, except when using IS NULL or LIKE operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, and image data types cannot be compared or sorted, except when using IS NULL or LIKE operator." }
				id => "message-003111"
				add_field => {
					"[event][id]" => "003111"
					"[rsa][message][id1]" => "003111"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003112
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, and image data types cannot be used in a GROUP BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, and image data types cannot be used in a GROUP BY clause." }
				id => "message-003112"
				add_field => {
					"[event][id]" => "003112"
					"[rsa][message][id1]" => "003112"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003113
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, and image data types cannot be used in an ORDER BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, and image data types cannot be used in an ORDER BY clause." }
				id => "message-003113"
				add_field => {
					"[event][id]" => "003113"
					"[rsa][message][id1]" => "003113"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003114
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, or image data type cannot be selected as DISTINCT. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, or image data type cannot be selected as DISTINCT." }
				id => "message-003114"
				add_field => {
					"[event][id]" => "003114"
					"[rsa][message][id1]" => "003114"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003115
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, or image pointer value conflicts with the column name specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, or image pointer value conflicts with the column name specified." }
				id => "message-003115"
				add_field => {
					"[event][id]" => "003115"
					"[rsa][message][id1]" => "003115"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003116
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, or image pointer value references a data page that is no longer allocated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, or image pointer value references a data page that is no longer allocated." }
				id => "message-003116"
				add_field => {
					"[event][id]" => "003116"
					"[rsa][message][id1]" => "003116"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003117
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, or image pointer value references a data page with an invalid text, ntext, or image status. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, or image pointer value references a data page with an invalid text, ntext, or image status." }
				id => "message-003117"
				add_field => {
					"[event][id]" => "003117"
					"[rsa][message][id1]" => "003117"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003118
		# line in RSA:  <fld30> <fld31> <event_source> The text, ntext, or image pointer value references a data page with an invalid timestamp. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text, ntext, or image pointer value references a data page with an invalid timestamp." }
				id => "message-003118"
				add_field => {
					"[event][id]" => "003118"
					"[rsa][message][id1]" => "003118"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003119
		# line in RSA:  <fld30> <fld31> <event_source> The text/ntext/image constants are not yet implemented. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The text/ntext/image constants are not yet implemented." }
				id => "message-003119"
				add_field => {
					"[event][id]" => "003119"
					"[rsa][message][id1]" => "003119"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003120
		# line in RSA:  <fld30> <fld31> <event_source> The third parameter for table option 'text in row' is invalid. It should be 'on', 'off', '0', or a number from 24 through 7000. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The third parameter for table option 'text in row' is invalid. It should be 'on', 'off', '0', or a number from 24 through 7000." }
				id => "message-003120"
				add_field => {
					"[event][id]" => "003120"
					"[rsa][message][id1]" => "003120"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003121
		# line in RSA:  <fld30> <fld31> <event_source> The threshold value should be from 0 through 99. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The threshold value should be from 0 through 99." }
				id => "message-003121"
				add_field => {
					"[event][id]" => "003121"
					"[rsa][message][id1]" => "003121"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003122
		# line in RSA:  <fld30> <fld31> <event_source> The timestamp (changed to <fld1>_TS) shows that the row has been updated by another user. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The timestamp (changed to %{fld1}_TS) shows that the row has been updated by another user." }
				id => "message-003122"
				add_field => {
					"[event][id]" => "003122"
					"[rsa][message][id1]" => "003122"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003123
		# line in RSA:  <fld30> <fld31> <event_source> The TOP N WITH TIES clause is not allowed without a corresponding ORDER BY clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The TOP N WITH TIES clause is not allowed without a corresponding ORDER BY clause." }
				id => "message-003123"
				add_field => {
					"[event][id]" => "003123"
					"[rsa][message][id1]" => "003123"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003124
		# line in RSA:  <fld30> <fld31> <event_source> The top_n_by_rank argument ('<fld1>') must be greater than zero. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The top_n_by_rank argument ('%{fld1}') must be greater than zero." }
				id => "message-003124"
				add_field => {
					"[event][id]" => "003124"
					"[rsa][message][id1]" => "003124"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003125
		# line in RSA:  <fld30> <fld31> <event_source> The transaction active in this session has been committed or aborted by another session. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The transaction active in this session has been committed or aborted by another session." }
				id => "message-003125"
				add_field => {
					"[event][id]" => "003125"
					"[rsa][message][id1]" => "003125"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003126
		# line in RSA:  <fld30> <fld31> <event_source> The transaction for the INSERT EXEC statement has been rolled back. The INSERT EXEC operation will be terminated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The transaction for the INSERT EXEC statement has been rolled back. The INSERT EXEC operation will be terminated." }
				id => "message-003126"
				add_field => {
					"[event][id]" => "003126"
					"[rsa][message][id1]" => "003126"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003127
		# line in RSA:  <fld30> <fld31> <event_source> The transaction has been terminated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The transaction has been terminated." }
				id => "message-003127"
				add_field => {
					"[event][id]" => "003127"
					"[rsa][message][id1]" => "003127"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003128
		# line in RSA:  <fld30> <fld31> <event_source> The transaction log was damaged. All data files must be restored before RESTORE LOG can be attempted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The transaction log was damaged. All data files must be restored before RESTORE LOG can be attempted." }
				id => "message-003128"
				add_field => {
					"[event][id]" => "003128"
					"[rsa][message][id1]" => "003128"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003129
		# line in RSA:  <fld30> <fld31> <event_source> The TSX server is not currently enlisted 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The TSX server is not currently enlisted" }
				id => "message-003129"
				add_field => {
					"[event][id]" => "003129"
					"[rsa][message][id1]" => "003129"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003130
		# line in RSA:  <fld30> <fld31> <event_source> The type must be '[indexed view] logbased', '[indexed view] logbased manualfilter', '[indexed view] logbased manualview', '[indexed view] logbased manualboth',  or '( view | indexed view | proc | func ) schema only'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The type must be '[indexed view] logbased', '[indexed view] logbased manualfilter', '[indexed view] logbased manualview', '[indexed view] logbased manualboth',  or '( view | indexed view | proc | func ) schema only'." }
				id => "message-003130"
				add_field => {
					"[event][id]" => "003130"
					"[rsa][message][id1]" => "003130"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003131
		# line in RSA:  <fld30> <fld31> <event_source> The type must be 'table' or '( view | indexed view | proc | func ) schema only'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The type must be 'table' or '( view | indexed view | proc | func ) schema only'." }
				id => "message-003131"
				add_field => {
					"[event][id]" => "003131"
					"[rsa][message][id1]" => "003131"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003132
		# line in RSA:  <fld30> <fld31> <event_source> The updatable Subscriber stored procedure '<fld1>' does not exist in sysobjects. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The updatable Subscriber stored procedure '%{fld1}' does not exist in sysobjects." }
				id => "message-003132"
				add_field => {
					"[event][id]" => "003132"
					"[rsa][message][id1]" => "003132"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003133
		# line in RSA:  <fld30> <fld31> <event_source> The update/delete operation requires a unique key or a clustered index on the remote table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The update/delete operation requires a unique key or a clustered index on the remote table." }
				id => "message-003133"
				add_field => {
					"[event][id]" => "003133"
					"[rsa][message][id1]" => "003133"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003134
		# line in RSA:  <fld30> <fld31> <event_source> The user '<fld1>' cannot take the action auto_fix due to duplicate SID. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The user '%{fld1}' cannot take the action auto_fix due to duplicate SID." }
				id => "message-003134"
				add_field => {
					"[event][id]" => "003134"
					"[rsa][message][id1]" => "003134"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003135
		# line in RSA:  <fld30> <fld31> <event_source> The user did not have permission to write to the column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The user did not have permission to write to the column." }
				id => "message-003135"
				add_field => {
					"[event][id]" => "003135"
					"[rsa][message][id1]" => "003135"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003136
		# line in RSA:  <fld30> <fld31> <event_source> The user has granted or revoked privileges to the following in the database and cannot be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The user has granted or revoked privileges to the following in the database and cannot be dropped." }
				id => "message-003136"
				add_field => {
					"[event][id]" => "003136"
					"[rsa][message][id1]" => "003136"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003137
		# line in RSA:  <fld30> <fld31> <event_source> The user name '<fld1>' does not exist in sysusers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The user name '%{fld1}' does not exist in sysusers." }
				id => "message-003137"
				add_field => {
					"[event][id]" => "003137"
					"[rsa][message][id1]" => "003137"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003138
		# line in RSA:  <fld30> <fld31> <event_source> The user name cannot be null when using SQL Server authentication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The user name cannot be null when using SQL Server authentication." }
				id => "message-003138"
				add_field => {
					"[event][id]" => "003138"
					"[rsa][message][id1]" => "003138"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003139
		# line in RSA:  <fld30> <fld31> <event_source> The user owns data types in the database and cannot be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The user owns data types in the database and cannot be dropped." }
				id => "message-003139"
				add_field => {
					"[event][id]" => "003139"
					"[rsa][message][id1]" => "003139"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003140
		# line in RSA:  <fld30> <fld31> <event_source> The user owns objects in the database and cannot be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The user owns objects in the database and cannot be dropped." }
				id => "message-003140"
				add_field => {
					"[event][id]" => "003140"
					"[rsa][message][id1]" => "003140"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003141
		# line in RSA:  <fld30> <fld31> <event_source> The user owns role(s) in the database and cannot be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The user owns role(s) in the database and cannot be dropped." }
				id => "message-003141"
				add_field => {
					"[event][id]" => "003141"
					"[rsa][message][id1]" => "003141"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003142
		# line in RSA:  <fld30> <fld31> <event_source> The value '<fld1>' is not within range for the <fld2> parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The value '%{fld1}' is not within range for the %{fld2} parameter." }
				id => "message-003142"
				add_field => {
					"[event][id]" => "003142"
					"[rsa][message][id1]" => "003142"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003143
		# line in RSA:  <fld30> <fld31> <event_source> The value of parameter <fld1> cannot be 'all'. It is reserved by replication stored procedures. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The value of parameter %{fld1} cannot be 'all'. It is reserved by replication stored procedures." }
				id => "message-003143"
				add_field => {
					"[event][id]" => "003143"
					"[rsa][message][id1]" => "003143"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003144
		# line in RSA:  <fld30> <fld31> <event_source> The value of the Weight argument must be between 0.0 and 1.0. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The value of the Weight argument must be between 0.0 and 1.0." }
				id => "message-003144"
				add_field => {
					"[event][id]" => "003144"
					"[rsa][message][id1]" => "003144"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003145
		# line in RSA:  <fld30> <fld31> <event_source> The value specified for agent parameter 'SkipErrors' is too long. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The value specified for agent parameter 'SkipErrors' is too long." }
				id => "message-003145"
				add_field => {
					"[event][id]" => "003145"
					"[rsa][message][id1]" => "003145"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003146
		# line in RSA:  <fld30> <fld31> <event_source> The variable '<fld1>' cannot be used as a parameter because a CURSOR OUTPUT parameter must not have a cursor allocated to it before execution of the procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The variable '%{fld1}' cannot be used as a parameter because a CURSOR OUTPUT parameter must not have a cursor allocated to it before execution of the procedure." }
				id => "message-003146"
				add_field => {
					"[event][id]" => "003146"
					"[rsa][message][id1]" => "003146"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003147
		# line in RSA:  <fld30> <fld31> <event_source> The variable '<fld1>' does not currently have a cursor allocated to it. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The variable '%{fld1}' does not currently have a cursor allocated to it." }
				id => "message-003147"
				add_field => {
					"[event][id]" => "003147"
					"[rsa][message][id1]" => "003147"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003148
		# line in RSA:  <fld30> <fld31> <event_source> The variable '<fld1>' is a cursor variable, but it is used in a place where a cursor variable is not valid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The variable '%{fld1}' is a cursor variable, but it is used in a place where a cursor variable is not valid." }
				id => "message-003148"
				add_field => {
					"[event][id]" => "003148"
					"[rsa][message][id1]" => "003148"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003149
		# line in RSA:  <fld30> <fld31> <event_source> The variable '<fld1>' is not a cursor variable, but it is used in a place where a cursor variable is expected. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The variable '%{fld1}' is not a cursor variable, but it is used in a place where a cursor variable is expected." }
				id => "message-003149"
				add_field => {
					"[event][id]" => "003149"
					"[rsa][message][id1]" => "003149"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003150
		# line in RSA:  <fld30> <fld31> <event_source> The variable name '<fld1>' has already been declared. Variable names must be unique within a query batch or stored procedure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The variable name '%{fld1}' has already been declared. Variable names must be unique within a query batch or stored procedure." }
				id => "message-003150"
				add_field => {
					"[event][id]" => "003150"
					"[rsa][message][id1]" => "003150"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003151
		# line in RSA:  <fld30> <fld31> <event_source> The version of the MSX (<fld1>) is not recent enough to support this TSX.  Version <fld2> or later is required at the MSX. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The version of the MSX (%{fld1}) is not recent enough to support this TSX.  Version %{fld2} or later is required at the MSX." }
				id => "message-003151"
				add_field => {
					"[event][id]" => "003151"
					"[rsa][message][id1]" => "003151"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003152
		# line in RSA:  <fld30> <fld31> <event_source> The vertical partition switch must be either 'true' or 'false'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The vertical partition switch must be either 'true' or 'false'." }
				id => "message-003152"
				add_field => {
					"[event][id]" => "003152"
					"[rsa][message][id1]" => "003152"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003153
		# line in RSA:  <fld30> <fld31> <event_source> The view or function '<fld1>' is not updatable because the definition contains the TOP clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The view or function '%{fld1}' is not updatable because the definition contains the TOP clause." }
				id => "message-003153"
				add_field => {
					"[event][id]" => "003153"
					"[rsa][message][id1]" => "003153"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003154
		# line in RSA:  <fld30> <fld31> <event_source> The volume on device '<fld1>' belongs to a different media set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The volume on device '%{fld1}' belongs to a different media set." }
				id => "message-003154"
				add_field => {
					"[event][id]" => "003154"
					"[rsa][message][id1]" => "003154"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003155
		# line in RSA:  <fld30> <fld31> <event_source> The volume on device '<fld1>' has the wrong media sequence number (<fld2>). Remove it and insert volume <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The volume on device '%{fld1}' has the wrong media sequence number (%{fld2}). Remove it and insert volume %{fld3}." }
				id => "message-003155"
				add_field => {
					"[event][id]" => "003155"
					"[rsa][message][id1]" => "003155"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003156
		# line in RSA:  <fld30> <fld31> <event_source> The volume on device '<fld1>' is a continuation volume for the backup set. Remove it and insert the volume holding the start of the backup set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The volume on device '%{fld1}' is a continuation volume for the backup set. Remove it and insert the volume holding the start of the backup set." }
				id => "message-003156"
				add_field => {
					"[event][id]" => "003156"
					"[rsa][message][id1]" => "003156"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003157
		# line in RSA:  <fld30> <fld31> <event_source> The volume on device '<fld1>' is a duplicate of stripe set member <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The volume on device '%{fld1}' is a duplicate of stripe set member %{fld2}." }
				id => "message-003157"
				add_field => {
					"[event][id]" => "003157"
					"[rsa][message][id1]" => "003157"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003158
		# line in RSA:  <fld30> <fld31> <event_source> The volume on device '<fld1>' is empty. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The volume on device '%{fld1}' is empty." }
				id => "message-003158"
				add_field => {
					"[event][id]" => "003158"
					"[rsa][message][id1]" => "003158"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003159
		# line in RSA:  <fld30> <fld31> <event_source> The volume on device '<fld1>' is not a member of the media family. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The volume on device '%{fld1}' is not a member of the media family." }
				id => "message-003159"
				add_field => {
					"[event][id]" => "003159"
					"[rsa][message][id1]" => "003159"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003160
		# line in RSA:  <fld30> <fld31> <event_source> The volume on device '<fld1>' is not part of a multiple family media set. BACKUP WITH FORMAT can be used to form a new media set. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The volume on device '%{fld1}' is not part of a multiple family media set. BACKUP WITH FORMAT can be used to form a new media set." }
				id => "message-003160"
				add_field => {
					"[event][id]" => "003160"
					"[rsa][message][id1]" => "003160"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003161
		# line in RSA:  <fld30> <fld31> <event_source> The Windows Active Directory client is not installed properly on the computer where this SQL Server instance is running. LoadLibrary failed to load ACTIVEDS.DLL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The Windows Active Directory client is not installed properly on the computer where this SQL Server instance is running. LoadLibrary failed to load ACTIVEDS.DLL." }
				id => "message-003161"
				add_field => {
					"[event][id]" => "003161"
					"[rsa][message][id1]" => "003161"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003162
		# line in RSA:  <fld30> <fld31> <event_source> The WITH MARK option only applies to the first BEGIN TRAN WITH MARK statement. The option is ignored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The WITH MARK option only applies to the first BEGIN TRAN WITH MARK statement. The option is ignored." }
				id => "message-003162"
				add_field => {
					"[event][id]" => "003162"
					"[rsa][message][id1]" => "003162"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003163
		# line in RSA:  <fld30> <fld31> <event_source> The WriteFileEx system function executed on file '<fld1>' only wrote <fld2> bytes, expected <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The WriteFileEx system function executed on file '%{fld1}' only wrote %{fld2} bytes, expected %{fld3}." }
				id => "message-003163"
				add_field => {
					"[event][id]" => "003163"
					"[rsa][message][id1]" => "003163"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003164
		# line in RSA:  <fld30> <fld31> <event_source> The WRITETEXT statement is not allowed because the column is being replicated with Data Transformation Services (DTS). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The WRITETEXT statement is not allowed because the column is being replicated with Data Transformation Services (DTS)." }
				id => "message-003164"
				add_field => {
					"[event][id]" => "003164"
					"[rsa][message][id1]" => "003164"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003165
		# line in RSA:  <fld30> <fld31> <event_source> The XMLTEXT document attribute that starts with '<fld1>' is too long. Maximum length is <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The XMLTEXT document attribute that starts with '%{fld1}' is too long. Maximum length is %{fld2}." }
				id => "message-003165"
				add_field => {
					"[event][id]" => "003165"
					"[rsa][message][id1]" => "003165"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE The:01
		# line in RSA:  <fld30> <fld31> Server <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} Server %{info}" }
				id => "message-The:01"
				add_field => {
					"[event][id]" => "The:01"
					"[rsa][message][id1]" => "The:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE The:02
		# line in RSA:  <fld30> <fld31> <event_source> The <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} The %{info}" }
				id => "message-The:02"
				add_field => {
					"[event][id]" => "The:02"
					"[rsa][message][id1]" => "The:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "There" {
		# MESSAGE 003166
		# line in RSA:  <fld30> <fld31> <event_source> There are  <fld1> rows in <fld2> pages for object '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are  %{fld1} rows in %{fld2} pages for object '%{fld3}'." }
				id => "message-003166"
				add_field => {
					"[event][id]" => "003166"
					"[rsa][message][id1]" => "003166"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003167
		# line in RSA:  <fld30> <fld31> <event_source> There are already statistics on table '<fld1>' named '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are already statistics on table '%{fld1}' named '%{fld2}'." }
				id => "message-003167"
				add_field => {
					"[event][id]" => "003167"
					"[rsa][message][id1]" => "003167"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003168
		# line in RSA:  <fld30> <fld31> <event_source> There are existing subscriptions to heterogeneous publication '<fld1>'. To add new articles, first drop the existing subscriptions to the publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are existing subscriptions to heterogeneous publication '%{fld1}'. To add new articles, first drop the existing subscriptions to the publication." }
				id => "message-003168"
				add_field => {
					"[event][id]" => "003168"
					"[rsa][message][id1]" => "003168"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003169
		# line in RSA:  <fld30> <fld31> <event_source> There are fewer columns in the INSERT statement than values specified in the VALUES clause. The number of values in the VALUES clause must match the number of columns specified in the INSERT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are fewer columns in the INSERT statement than values specified in the VALUES clause. The number of values in the VALUES clause must match the number of columns specified in the INSERT statement." }
				id => "message-003169"
				add_field => {
					"[event][id]" => "003169"
					"[rsa][message][id1]" => "003169"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003170
		# line in RSA:  <fld30> <fld31> <event_source> There are more columns in the INSERT statement than values specified in the VALUES clause. The number of values in the VALUES clause must match the number of columns specified in the INSERT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are more columns in the INSERT statement than values specified in the VALUES clause. The number of values in the VALUES clause must match the number of columns specified in the INSERT statement." }
				id => "message-003170"
				add_field => {
					"[event][id]" => "003170"
					"[rsa][message][id1]" => "003170"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003171
		# line in RSA:  <fld30> <fld31> <event_source> There are no articles for publication '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no articles for publication '%{fld1}'." }
				id => "message-003171"
				add_field => {
					"[event][id]" => "003171"
					"[rsa][message][id1]" => "003171"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003172
		# line in RSA:  <fld30> <fld31> <event_source> There are no jobs at this server that originated from server '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no jobs at this server that originated from server '%{fld1}'." }
				id => "message-003172"
				add_field => {
					"[event][id]" => "003172"
					"[rsa][message][id1]" => "003172"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003173
		# line in RSA:  <fld30> <fld31> <event_source> There are no matching rows on which to report. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no matching rows on which to report." }
				id => "message-003173"
				add_field => {
					"[event][id]" => "003173"
					"[rsa][message][id1]" => "003173"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003174
		# line in RSA:  <fld30> <fld31> <event_source> There are no primary or candidate keys in the referenced table '<fld1>' that match the referencing column list in the foreign key '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no primary or candidate keys in the referenced table '%{fld1}' that match the referencing column list in the foreign key '%{fld2}'." }
				id => "message-003174"
				add_field => {
					"[event][id]" => "003174"
					"[rsa][message][id1]" => "003174"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003175
		# line in RSA:  <fld30> <fld31> <event_source> There are no publications. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no publications." }
				id => "message-003175"
				add_field => {
					"[event][id]" => "003175"
					"[rsa][message][id1]" => "003175"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003176
		# line in RSA:  <fld30> <fld31> <event_source> There are no remote logins defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no remote logins defined." }
				id => "message-003176"
				add_field => {
					"[event][id]" => "003176"
					"[rsa][message][id1]" => "003176"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003177
		# line in RSA:  <fld30> <fld31> <event_source> There are no remote logins for '<fld1>' on remote server '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no remote logins for '%{fld1}' on remote server '%{fld2}'." }
				id => "message-003177"
				add_field => {
					"[event][id]" => "003177"
					"[rsa][message][id1]" => "003177"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003178
		# line in RSA:  <fld30> <fld31> <event_source> There are no remote logins for '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no remote logins for '%{fld1}'." }
				id => "message-003178"
				add_field => {
					"[event][id]" => "003178"
					"[rsa][message][id1]" => "003178"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003179
		# line in RSA:  <fld30> <fld31> <event_source> There are no remote logins for the remote server '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no remote logins for the remote server '%{fld1}'." }
				id => "message-003179"
				add_field => {
					"[event][id]" => "003179"
					"[rsa][message][id1]" => "003179"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003180
		# line in RSA:  <fld30> <fld31> <event_source> There are no remote servers defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no remote servers defined." }
				id => "message-003180"
				add_field => {
					"[event][id]" => "003180"
					"[rsa][message][id1]" => "003180"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003181
		# line in RSA:  <fld30> <fld31> <event_source> There are no remote users mapped to any local user from remote server '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no remote users mapped to any local user from remote server '%{fld1}'." }
				id => "message-003181"
				add_field => {
					"[event][id]" => "003181"
					"[rsa][message][id1]" => "003181"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003182
		# line in RSA:  <fld30> <fld31> <event_source> There are no remote users mapped to local user '<fld1>' from remote server '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no remote users mapped to local user '%{fld1}' from remote server '%{fld2}'." }
				id => "message-003182"
				add_field => {
					"[event][id]" => "003182"
					"[rsa][message][id1]" => "003182"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003183
		# line in RSA:  <fld30> <fld31> <event_source> There are no rows in the current fetch buffer. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no rows in the current fetch buffer." }
				id => "message-003183"
				add_field => {
					"[event][id]" => "003183"
					"[rsa][message][id1]" => "003183"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003184
		# line in RSA:  <fld30> <fld31> <event_source> There are no servers defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are no servers defined." }
				id => "message-003184"
				add_field => {
					"[event][id]" => "003184"
					"[rsa][message][id1]" => "003184"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003185
		# line in RSA:  <fld30> <fld31> <event_source> There are still remote logins for the server '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are still remote logins for the server '%{fld1}'." }
				id => "message-003185"
				add_field => {
					"[event][id]" => "003185"
					"[rsa][message][id1]" => "003185"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003186
		# line in RSA:  <fld30> <fld31> <event_source> There are still secondary servers attached to this primary. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are still secondary servers attached to this primary." }
				id => "message-003186"
				add_field => {
					"[event][id]" => "003186"
					"[rsa][message][id1]" => "003186"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003188
		# line in RSA:  <fld30> <fld31> <event_source> There are too many parameters in this <fld1> statement. The maximum number is <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are too many parameters in this %{fld1} statement. The maximum number is %{fld2}." }
				id => "message-003188"
				add_field => {
					"[event][id]" => "003188"
					"[rsa][message][id1]" => "003188"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003189
		# line in RSA:  <fld30> <fld31> <event_source> There are two or more jobs named '<fld1>'. Specify <fld2> instead of <fld3> to uniquely identify the job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are two or more jobs named '%{fld1}'. Specify %{fld2} instead of %{fld3} to uniquely identify the job." }
				id => "message-003189"
				add_field => {
					"[event][id]" => "003189"
					"[rsa][message][id1]" => "003189"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003190
		# line in RSA:  <fld30> <fld31> <event_source> There are two or more tasks named '<fld1>'. Specify <fld2> instead of <fld3> to uniquely identify the task. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There are two or more tasks named '%{fld1}'. Specify %{fld2} instead of %{fld3} to uniquely identify the task." }
				id => "message-003190"
				add_field => {
					"[event][id]" => "003190"
					"[rsa][message][id1]" => "003190"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003191
		# line in RSA:  <fld30> <fld31> <event_source> There is a connection associated with the distributed transaction with UOW <fld1>. First, kill the connection using KILL SPID syntax. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is a connection associated with the distributed transaction with UOW %{fld1}. First, kill the connection using KILL SPID syntax." }
				id => "message-003191"
				add_field => {
					"[event][id]" => "003191"
					"[rsa][message][id1]" => "003191"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003192
		# line in RSA:  <fld30> <fld31> <event_source> There is a push subscription to publication '<fld1>'. Only pull and anonymous subscriptions can be copied. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is a push subscription to publication '%{fld1}'. Only pull and anonymous subscriptions can be copied." }
				id => "message-003192"
				add_field => {
					"[event][id]" => "003192"
					"[rsa][message][id1]" => "003192"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003193
		# line in RSA:  <fld30> <fld31> <event_source> There is a push subscription to Publisher '<fld1>'. Only pull and anonymous subscriptions can be copied. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is a push subscription to Publisher '%{fld1}'. Only pull and anonymous subscriptions can be copied." }
				id => "message-003193"
				add_field => {
					"[event][id]" => "003193"
					"[rsa][message][id1]" => "003193"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003194
		# line in RSA:  <fld30> <fld31> <event_source> There is already a local server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is already a local server." }
				id => "message-003194"
				add_field => {
					"[event][id]" => "003194"
					"[rsa][message][id1]" => "003194"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003195
		# line in RSA:  <fld30> <fld31> <event_source> There is already an index on table '<fld1>' named '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is already an index on table '%{fld1}' named '%{fld2}'." }
				id => "message-003195"
				add_field => {
					"[event][id]" => "003195"
					"[rsa][message][id1]" => "003195"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003196
		# line in RSA:  <fld30> <fld31> <event_source> There is already an object named '<fld1>' in the database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is already an object named '%{fld1}' in the database." }
				id => "message-003196"
				add_field => {
					"[event][id]" => "003196"
					"[rsa][message][id1]" => "003196"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003197
		# line in RSA:  <fld30> <fld31> <event_source> There is insufficient free space on disk volume '<fld1>' to create the database. The database requires  <fld2> additional free bytes, while only  <fld3> bytes are available. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is insufficient free space on disk volume '%{fld1}' to create the database. The database requires  %{fld2} additional free bytes, while only  %{fld3} bytes are available." }
				id => "message-003197"
				add_field => {
					"[event][id]" => "003197"
					"[rsa][message][id1]" => "003197"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003198
		# line in RSA:  <fld30> <fld31> <event_source> There is insufficient result space to convert a money value to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is insufficient result space to convert a money value to %{fld1}." }
				id => "message-003198"
				add_field => {
					"[event][id]" => "003198"
					"[rsa][message][id1]" => "003198"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003200
		# line in RSA:  <fld30> <fld31> <event_source> There is insufficient result space to convert a smallmoney value to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is insufficient result space to convert a smallmoney value to %{fld1}." }
				id => "message-003200"
				add_field => {
					"[event][id]" => "003200"
					"[rsa][message][id1]" => "003200"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003201
		# line in RSA:  <fld30> <fld31> <event_source> There is insufficient result space to convert the <fld1> value (= <fld2>) to the money data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is insufficient result space to convert the %{fld1} value (= %{fld2}) to the money data type." }
				id => "message-003201"
				add_field => {
					"[event][id]" => "003201"
					"[rsa][message][id1]" => "003201"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003202
		# line in RSA:  <fld30> <fld31> <event_source> There is insufficient system memory to run this query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is insufficient system memory to run this query." }
				id => "message-003202"
				add_field => {
					"[event][id]" => "003202"
					"[rsa][message][id1]" => "003202"
					"[event][categoryid]" => "1603020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003203
		# line in RSA:  <fld30> <fld31> <event_source> There is no current database backup. This log backup cannot be used to roll forward a preceding database backup. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no current database backup. This log backup cannot be used to roll forward a preceding database backup." }
				id => "message-003203"
				add_field => {
					"[event][id]" => "003203"
					"[rsa][message][id1]" => "003203"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003204
		# line in RSA:  <fld30> <fld31> <event_source> There is no disk named '<fld1>'. Checking other disk names. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no disk named '%{fld1}'. Checking other disk names." }
				id => "message-003204"
				add_field => {
					"[event][id]" => "003204"
					"[rsa][message][id1]" => "003204"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003205
		# line in RSA:  <fld30> <fld31> <event_source> There is no interrupted backup or restore operation to restart. Reissue the statement without the RESTART clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no interrupted backup or restore operation to restart. Reissue the statement without the RESTART clause." }
				id => "message-003205"
				add_field => {
					"[event][id]" => "003205"
					"[rsa][message][id1]" => "003205"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003206
		# line in RSA:  <fld30> <fld31> <event_source> There is no nickname for article '<fld1>' in publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no nickname for article '%{fld1}' in publication '%{fld2}'." }
				id => "message-003206"
				add_field => {
					"[event][id]" => "003206"
					"[rsa][message][id1]" => "003206"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003207
		# line in RSA:  <fld30> <fld31> <event_source> There is no remote user '<fld1>' mapped to local user '<fld2>' from the remote server '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no remote user '%{fld1}' mapped to local user '%{fld2}' from the remote server '%{fld3}'." }
				id => "message-003207"
				add_field => {
					"[event][id]" => "003207"
					"[rsa][message][id1]" => "003207"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003208
		# line in RSA:  <fld30> <fld31> <event_source> There is no room to hold the buffer resource lock <fld1>_BUF in SDES <fld2>_SDES. Contact Technical Support. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no room to hold the buffer resource lock %{fld1}_BUF in SDES %{fld2}_SDES. Contact Technical Support." }
				id => "message-003208"
				add_field => {
					"[event][id]" => "003208"
					"[rsa][message][id1]" => "003208"
					"[event][categoryid]" => "1603020000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003209
		# line in RSA:  <fld30> <fld31> <event_source> There is no subscription on Publisher '<fld1>', publisher database '<fld2>', publication '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no subscription on Publisher '%{fld1}', publisher database '%{fld2}', publication '%{fld3}'." }
				id => "message-003209"
				add_field => {
					"[event][id]" => "003209"
					"[rsa][message][id1]" => "003209"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003210
		# line in RSA:  <fld30> <fld31> <event_source> There is no such user or group '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no such user or group '%{fld1}'." }
				id => "message-003210"
				add_field => {
					"[event][id]" => "003210"
					"[rsa][message][id1]" => "003210"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003211
		# line in RSA:  <fld30> <fld31> <event_source> There is no text for object '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no text for object '%{fld1}'." }
				id => "message-003211"
				add_field => {
					"[event][id]" => "003211"
					"[rsa][message][id1]" => "003211"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003212
		# line in RSA:  <fld30> <fld31> <event_source> There is no user table matching the input name '<fld1>' in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There is no user table matching the input name '%{fld1}' in the current database." }
				id => "message-003212"
				add_field => {
					"[event][id]" => "003212"
					"[rsa][message][id1]" => "003212"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003213
		# line in RSA:  <fld30> <fld31> <event_source> There must be one and only one of '<fld1>' and '<fld2>' that is not NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There must be one and only one of '%{fld1}' and '%{fld2}' that is not NULL." }
				id => "message-003213"
				add_field => {
					"[event][id]" => "003213"
					"[rsa][message][id1]" => "003213"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003214
		# line in RSA:  <fld30> <fld31> <event_source> There was a recoverable, provider-specific error, such as an RPC failure. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There was a recoverable, provider-specific error, such as an RPC failure." }
				id => "message-003214"
				add_field => {
					"[event][id]" => "003214"
					"[rsa][message][id1]" => "003214"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003215
		# line in RSA:  <fld30> <fld31> <event_source> There was some problem removing '<fld1>' from sysaltfiles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} There was some problem removing '%{fld1}' from sysaltfiles." }
				id => "message-003215"
				add_field => {
					"[event][id]" => "003215"
					"[rsa][message][id1]" => "003215"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "This" {
		# MESSAGE 003216
		# line in RSA:  <fld30> <fld31> <event_source> This ALTER DATABASE statement is not supported. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This ALTER DATABASE statement is not supported." }
				id => "message-003216"
				add_field => {
					"[event][id]" => "003216"
					"[rsa][message][id1]" => "003216"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003217
		# line in RSA:  <fld30> <fld31> <event_source> This backup cannot be restored  using WITH STANDBY because a database upgrade is needed. Reissue the RESTORE without WITH STANDBY. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This backup cannot be restored  using WITH STANDBY because a database upgrade is needed. Reissue the RESTORE without WITH STANDBY." }
				id => "message-003217"
				add_field => {
					"[event][id]" => "003217"
					"[rsa][message][id1]" => "003217"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003218
		# line in RSA:  <fld30> <fld31> <event_source> This change cannot take effect until you run the snapshot again. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This change cannot take effect until you run the snapshot again." }
				id => "message-003218"
				add_field => {
					"[event][id]" => "003218"
					"[rsa][message][id1]" => "003218"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003219
		# line in RSA:  <fld30> <fld31> <event_source> This column cannot be included in a transactional publication because the column ID is greater than 255. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This column cannot be included in a transactional publication because the column ID is greater than 255." }
				id => "message-003219"
				add_field => {
					"[event][id]" => "003219"
					"[rsa][message][id1]" => "003219"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003220
		# line in RSA:  <fld30> <fld31> <event_source> This database is already log shipping. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This database is already log shipping." }
				id => "message-003220"
				add_field => {
					"[event][id]" => "003220"
					"[rsa][message][id1]" => "003220"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003221
		# line in RSA:  <fld30> <fld31> <event_source> This database is not enabled for publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This database is not enabled for publication." }
				id => "message-003221"
				add_field => {
					"[event][id]" => "003221"
					"[rsa][message][id1]" => "003221"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003222
		# line in RSA:  <fld30> <fld31> <event_source> This edition of SQL Server does not support indexed views. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This edition of SQL Server does not support indexed views." }
				id => "message-003222"
				add_field => {
					"[event][id]" => "003222"
					"[rsa][message][id1]" => "003222"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003223
		# line in RSA:  <fld30> <fld31> <event_source> This edition of SQL Server does not support transactional publications.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This edition of SQL Server does not support transactional publications." }
				id => "message-003223"
				add_field => {
					"[event][id]" => "003223"
					"[rsa][message][id1]" => "003223"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003224
		# line in RSA:  <fld30> <fld31> <event_source> This instance of SQL Server has been using a process id of <fld1> since <fld2> (local)  <fld3> (UTC). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This instance of SQL Server has been using a process id of %{fld1} since %{fld2} (local)  %{fld3} (UTC)." }
				id => "message-003224"
				add_field => {
					"[event][id]" => "003224"
					"[rsa][message][id1]" => "003224"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003225
		# line in RSA:  <fld30> <fld31> <event_source> This instance of SQL Server last reported using a process id of <fld1> at <fld2> (local)  <fld3> (UTC). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This instance of SQL Server last reported using a process id of %{fld1} at %{fld2} (local)  %{fld3} (UTC)." }
				id => "message-003225"
				add_field => {
					"[event][id]" => "003225"
					"[rsa][message][id1]" => "003225"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003226
		# line in RSA:  <fld30> <fld31> <event_source> This job has one or more notifications to operators other than '<fld1>'. The job cannot be targeted at remote servers as currently defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This job has one or more notifications to operators other than '%{fld1}'. The job cannot be targeted at remote servers as currently defined." }
				id => "message-003226"
				add_field => {
					"[event][id]" => "003226"
					"[rsa][message][id1]" => "003226"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003227
		# line in RSA:  <fld30> <fld31> <event_source> This job is currently targeted at a remote server so cannot also be targeted at the local server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This job is currently targeted at a remote server so cannot also be targeted at the local server." }
				id => "message-003227"
				add_field => {
					"[event][id]" => "003227"
					"[rsa][message][id1]" => "003227"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003228
		# line in RSA:  <fld30> <fld31> <event_source> This job is currently targeted at the local server so cannot also be targeted at a remote server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This job is currently targeted at the local server so cannot also be targeted at a remote server." }
				id => "message-003228"
				add_field => {
					"[event][id]" => "003228"
					"[rsa][message][id1]" => "003228"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003229
		# line in RSA:  <fld30> <fld31> <event_source> This job is owned by '<fld1>'. Only a job owned by a member of the <fld2> role can be a multiserver job. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This job is owned by '%{fld1}'. Only a job owned by a member of the %{fld2} role can be a multiserver job." }
				id => "message-003229"
				add_field => {
					"[event][id]" => "003229"
					"[rsa][message][id1]" => "003229"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003230
		# line in RSA:  <fld30> <fld31> <event_source> This log file contains records logged before the designated mark. The database is being left in load state so you can apply another log file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This log file contains records logged before the designated mark. The database is being left in load state so you can apply another log file." }
				id => "message-003230"
				add_field => {
					"[event][id]" => "003230"
					"[rsa][message][id1]" => "003230"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003231
		# line in RSA:  <fld30> <fld31> <event_source> This log file contains records logged before the designated point-in-time. The database is being left in load state so you can apply another log file. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This log file contains records logged before the designated point-in-time. The database is being left in load state so you can apply another log file." }
				id => "message-003231"
				add_field => {
					"[event][id]" => "003231"
					"[rsa][message][id1]" => "003231"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003232
		# line in RSA:  <fld30> <fld31> <event_source> This login is the owner of <fld1> job(s). You must delete or reassign these jobs before the login can be dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This login is the owner of %{fld1} job(s). You must delete or reassign these jobs before the login can be dropped." }
				id => "message-003232"
				add_field => {
					"[event][id]" => "003232"
					"[rsa][message][id1]" => "003232"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003233
		# line in RSA:  <fld30> <fld31> <event_source> This object does not have any statistics or indexes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This object does not have any statistics or indexes." }
				id => "message-003233"
				add_field => {
					"[event][id]" => "003233"
					"[rsa][message][id1]" => "003233"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003234
		# line in RSA:  <fld30> <fld31> <event_source> This object does not have any statistics. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This object does not have any statistics." }
				id => "message-003234"
				add_field => {
					"[event][id]" => "003234"
					"[rsa][message][id1]" => "003234"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003235
		# line in RSA:  <fld30> <fld31> <event_source> This procedure can be executed only against table-based articles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This procedure can be executed only against table-based articles." }
				id => "message-003235"
				add_field => {
					"[event][id]" => "003235"
					"[rsa][message][id1]" => "003235"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003236
		# line in RSA:  <fld30> <fld31> <event_source> This procedure can only be used on system tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This procedure can only be used on system tables." }
				id => "message-003236"
				add_field => {
					"[event][id]" => "003236"
					"[rsa][message][id1]" => "003236"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003237
		# line in RSA:  <fld30> <fld31> <event_source> This procedure supports only remote execution of push subscription agents. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This procedure supports only remote execution of push subscription agents." }
				id => "message-003237"
				add_field => {
					"[event][id]" => "003237"
					"[rsa][message][id1]" => "003237"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003238
		# line in RSA:  <fld30> <fld31> <event_source> This server is already enlisted into MSX '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This server is already enlisted into MSX '%{fld1}'." }
				id => "message-003238"
				add_field => {
					"[event][id]" => "003238"
					"[rsa][message][id1]" => "003238"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003239
		# line in RSA:  <fld30> <fld31> <event_source> This server is not currently enlisted into an MSX. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This server is not currently enlisted into an MSX." }
				id => "message-003239"
				add_field => {
					"[event][id]" => "003239"
					"[rsa][message][id1]" => "003239"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003240
		# line in RSA:  <fld30> <fld31> <event_source> This SQL Server has been optimized for <fld1> concurrent queries. This limit has been exceeded by <fld2> queries and performance may be adversely affected. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This SQL Server has been optimized for %{fld1} concurrent queries. This limit has been exceeded by %{fld2} queries and performance may be adversely affected." }
				id => "message-003240"
				add_field => {
					"[event][id]" => "003240"
					"[rsa][message][id1]" => "003240"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003241
		# line in RSA:  <fld30> <fld31> <event_source> This step failed because column '<fld1>' does not exist in the vertical partition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This step failed because column '%{fld1}' does not exist in the vertical partition." }
				id => "message-003241"
				add_field => {
					"[event][id]" => "003241"
					"[rsa][message][id1]" => "003241"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003242
		# line in RSA:  <fld30> <fld31> <event_source> This step failed because column '<fld1>' exists in the vertical partition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This step failed because column '%{fld1}' exists in the vertical partition." }
				id => "message-003242"
				add_field => {
					"[event][id]" => "003242"
					"[rsa][message][id1]" => "003242"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003243
		# line in RSA:  <fld30> <fld31> <event_source> This step failed because table '<fld1>' is not part of any publication. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This step failed because table '%{fld1}' is not part of any publication." }
				id => "message-003243"
				add_field => {
					"[event][id]" => "003243"
					"[rsa][message][id1]" => "003243"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003244
		# line in RSA:  <fld30> <fld31> <event_source> This stored procedure must be run in msdb. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This stored procedure must be run in msdb." }
				id => "message-003244"
				add_field => {
					"[event][id]" => "003244"
					"[rsa][message][id1]" => "003244"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003245
		# line in RSA:  <fld30> <fld31> <event_source> This subscription does not support automatic reinitialization (subscribed with the 'no sync' option). To reinitialize this subscription, you must drop and re-create the subscription. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This subscription does not support automatic reinitialization (subscribed with the 'no sync' option). To reinitialize this subscription, you must drop and re-create the subscription." }
				id => "message-003245"
				add_field => {
					"[event][id]" => "003245"
					"[rsa][message][id1]" => "003245"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003246
		# line in RSA:  <fld30> <fld31> <event_source> This syntax is only allowed within the stored procedure sp_executesql. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This syntax is only allowed within the stored procedure sp_executesql." }
				id => "message-003246"
				add_field => {
					"[event][id]" => "003246"
					"[rsa][message][id1]" => "003246"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003247
		# line in RSA:  <fld30> <fld31> <event_source> This version cannot redo any index creation or non-logged operation done by SQL Server 7.0.  Further roll forward is not possible. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This version cannot redo any index creation or non-logged operation done by SQL Server 7.0.  Further roll forward is not possible." }
				id => "message-003247"
				add_field => {
					"[event][id]" => "003247"
					"[rsa][message][id1]" => "003247"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003248
		# line in RSA:  <fld30> <fld31> <event_source> This version of the Publisher cannot use a SQL Server 7.0 Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This version of the Publisher cannot use a SQL Server 7.0 Distributor." }
				id => "message-003248"
				add_field => {
					"[event][id]" => "003248"
					"[rsa][message][id1]" => "003248"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE This:01
		# line in RSA:  <fld30> <fld31> <event_source> This <fld1> process ID of <process_id> <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} This %{fld1} process ID of %{process_id} %{fld2}" }
				id => "message-This:01"
				add_field => {
					"[event][id]" => "This:01"
					"[rsa][message][id1]" => "This:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3322
	# line in RSA:  <fld30> <fld31> <event_source> Threshold value must be from 1 through 100. 
	else if [logstash][msgparser][id] == "msgParserId3322" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Threshold value must be from 1 through 100." }
			id => "msgParserId3322"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Time" {
		# MESSAGE 003250
		# line in RSA:  <fld30> <fld31> <event_source> Time out occurred while waiting for buffer latch type <fld1>, bp  <fld2>, page <fld3>, stat  <fld4>, object ID <fld5>:<fld6>:<fld7>, waittime <fld8>. Continuing to wait. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Time out occurred while waiting for buffer latch type %{fld1}, bp  %{fld2}, page %{fld3}, stat  %{fld4}, object ID %{fld5}:%{fld6}:%{fld7}, waittime %{fld8}. Continuing to wait." }
				id => "message-003250"
				add_field => {
					"[event][id]" => "003250"
					"[rsa][message][id1]" => "003250"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003251
		# line in RSA:  <fld30> <fld31> <event_source> Time value '<fld1>' used with WAITFOR is not a valid value. Check date/time syntax. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Time value '%{fld1}' used with WAITFOR is not a valid value. Check date/time syntax." }
				id => "message-003251"
				add_field => {
					"[event][id]" => "003251"
					"[rsa][message][id1]" => "003251"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3325
	# line in RSA:  <fld30> <fld31> <event_source> Time-out occurred while waiting for buffer latch type <fld1> for page <fld2>, database ID <fld3>. 
	else if [logstash][msgparser][id] == "msgParserId3325" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Time-out occurred while waiting for buffer latch type %{fld1} for page %{fld2}, database ID %{fld3}." }
			id => "msgParserId3325"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "To" {
		# MESSAGE 003253
		# line in RSA:  <fld30> <fld31> <event_source> To achieve optimal performance, update all statistics on the '<fld1>' database by running sp_updatestats. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} To achieve optimal performance, update all statistics on the '%{fld1}' database by running sp_updatestats." }
				id => "message-003253"
				add_field => {
					"[event][id]" => "003253"
					"[rsa][message][id1]" => "003253"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003254
		# line in RSA:  <fld30> <fld31> <event_source> To change the <fld1>, the database must be in state in which a checkpoint can be executed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} To change the %{fld1}, the database must be in state in which a checkpoint can be executed." }
				id => "message-003254"
				add_field => {
					"[event][id]" => "003254"
					"[rsa][message][id1]" => "003254"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003255
		# line in RSA:  <fld30> <fld31> <event_source> To revoke grantable privileges, specify the CASCADE option with REVOKE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} To revoke grantable privileges, specify the CASCADE option with REVOKE." }
				id => "message-003255"
				add_field => {
					"[event][id]" => "003255"
					"[rsa][message][id1]" => "003255"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003256
		# line in RSA:  <fld30> <fld31> <event_source> To use ALTER DATABASE, the database must be in a writable state in which a checkpoint can be executed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} To use ALTER DATABASE, the database must be in a writable state in which a checkpoint can be executed." }
				id => "message-003256"
				add_field => {
					"[event][id]" => "003256"
					"[rsa][message][id1]" => "003256"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Too" {
		# MESSAGE 003257
		# line in RSA:  <fld30> <fld31> <event_source> Too few locks specified. Minimum <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Too few locks specified. Minimum %{fld1}." }
				id => "message-003257"
				add_field => {
					"[event][id]" => "003257"
					"[rsa][message][id1]" => "003257"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003258
		# line in RSA:  <fld30> <fld31> <event_source> Too many backup devices specified for backup or restore; only <fld1> are allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Too many backup devices specified for backup or restore; only %{fld1} are allowed." }
				id => "message-003258"
				add_field => {
					"[event][id]" => "003258"
					"[rsa][message][id1]" => "003258"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003259
		# line in RSA:  <fld30> <fld31> <event_source> Too many errors found (<fld1>) for object ID <fld2>. To see all error messages rerun the statement using "WITH ALL_ERRORMSGS". 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Too many errors found (%{fld1}) for object ID %{fld2}. To see all error messages rerun the statement using \"WITH ALL_ERRORMSGS\"." }
				id => "message-003259"
				add_field => {
					"[event][id]" => "003259"
					"[rsa][message][id1]" => "003259"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003260
		# line in RSA:  <fld30> <fld31> <event_source> Too many expressions are specified in the GROUP BY clause. The maximum number is <fld1> when either CUBE or ROLLUP is specified. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Too many expressions are specified in the GROUP BY clause. The maximum number is %{fld1} when either CUBE or ROLLUP is specified." }
				id => "message-003260"
				add_field => {
					"[event][id]" => "003260"
					"[rsa][message][id1]" => "003260"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003261
		# line in RSA:  <fld30> <fld31> <event_source> Too many substitution parameters for RAISERROR. Cannot exceed <fld1> substitution parameters. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Too many substitution parameters for RAISERROR. Cannot exceed %{fld1} substitution parameters." }
				id => "message-003261"
				add_field => {
					"[event][id]" => "003261"
					"[rsa][message][id1]" => "003261"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003262
		# line in RSA:  <fld30> <fld31> <event_source> Too many table names in the query. The maximum allowable is <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Too many table names in the query. The maximum allowable is %{fld1}." }
				id => "message-003262"
				add_field => {
					"[event][id]" => "003262"
					"[rsa][message][id1]" => "003262"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3336
	# line in RSA:  <fld30> <fld31> <event_source> TOP clause contains an invalid value. 
	else if [logstash][msgparser][id] == "msgParserId3336" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} TOP clause contains an invalid value." }
			id => "msgParserId3336"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Total" {
		# MESSAGE 003264
		# line in RSA:  <fld30> <fld31> <event_source> Total number of extents = <fld1>, used pages = <fld2>, reserved pages = <fld3> in this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Total number of extents = %{fld1}, used pages = %{fld2}, reserved pages = %{fld3} in this database." }
				id => "message-003264"
				add_field => {
					"[event][id]" => "003264"
					"[rsa][message][id1]" => "003264"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003265
		# line in RSA:  <fld30> <fld31> <event_source> Total number of extents is <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Total number of extents is %{fld1}." }
				id => "message-003265"
				add_field => {
					"[event][id]" => "003265"
					"[rsa][message][id1]" => "003265"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3339
	# line in RSA:  <fld30> <fld31> <event_source> TotalPhysicalMemory = <fld1>, AvailablePhysicalMemory = <fld2> 
	else if [logstash][msgparser][id] == "msgParserId3339" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} TotalPhysicalMemory = %{fld1}, AvailablePhysicalMemory = %{fld2}" }
			id => "msgParserId3339"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3340
	# line in RSA:  <fld30> <fld31> <event_source> Trace option(s) not enabled for this connection. Use 'DBCC TRACEON()'. 
	else if [logstash][msgparser][id] == "msgParserId3340" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Trace option(s) not enabled for this connection. Use 'DBCC TRACEON()'." }
			id => "msgParserId3340"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Transaction" {
		# MESSAGE 003267
		# line in RSA:  <fld30> <fld31> <event_source> Transaction (<fld1>, <fld2>) not found in the transaction table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transaction (%{fld1}, %{fld2}) not found in the transaction table." }
				id => "message-003267"
				add_field => {
					"[event][id]" => "003267"
					"[rsa][message][id1]" => "003267"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003268
		# line in RSA:  <fld30> <fld31> <event_source> Transaction (Process ID <fld1>) was deadlocked on <fld2> resources with another process and has been chosen as the deadlock victim. Rerun the transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transaction (Process ID %{fld1}) was deadlocked on %{fld2} resources with another process and has been chosen as the deadlock victim. Rerun the transaction." }
				id => "message-003268"
				add_field => {
					"[event][id]" => "003268"
					"[rsa][message][id1]" => "003268"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003269
		# line in RSA:  <fld30> <fld31> <event_source> Transaction context in use by another session. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transaction context in use by another session." }
				id => "message-003269"
				add_field => {
					"[event][id]" => "003269"
					"[rsa][message][id1]" => "003269"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003270
		# line in RSA:  <fld30> <fld31> <event_source> Transaction count after EXECUTE indicates that a COMMIT or ROLLBACK TRANSACTION statement is missing. Previous count = <fld1>, current count = <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transaction count after EXECUTE indicates that a COMMIT or ROLLBACK TRANSACTION statement is missing. Previous count = %{fld1}, current count = %{fld2}." }
				id => "message-003270"
				add_field => {
					"[event][id]" => "003270"
					"[rsa][message][id1]" => "003270"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003271
		# line in RSA:  <fld30> <fld31> <event_source> Transaction information for database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transaction information for database '%{fld1}'." }
				id => "message-003271"
				add_field => {
					"[event][id]" => "003271"
					"[rsa][message][id1]" => "003271"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003272
		# line in RSA:  <fld30> <fld31> <event_source> Transaction manager has canceled the distributed transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transaction manager has canceled the distributed transaction." }
				id => "message-003272"
				add_field => {
					"[event][id]" => "003272"
					"[rsa][message][id1]" => "003272"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003273
		# line in RSA:  <fld30> <fld31> <event_source> Transaction rolled back. Could not execute trigger. Retry your transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transaction rolled back. Could not execute trigger. Retry your transaction." }
				id => "message-003273"
				add_field => {
					"[event][id]" => "003273"
					"[rsa][message][id1]" => "003273"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3348
	# line in RSA:  <fld30> <fld31> <event_source> <fld1> transactions rolled { back | forward } in database '<fld2>' (<info>).
	else if [logstash][msgparser][id] == "msgParserId3348" {
		grok {
			match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+transactions[\s]+rolled[\s]+([\s]*back[\s]+|[\s]*forward[\s]+)[\s]+in[\s]+database[\s]+'(?<fld2>[^']*)'[\s]+\((?<info>[^\)]*)\)\.$" }
			id => "msgParserId3348"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3349
	# line in RSA:  <fld30> <fld31> <event_source> Transactional replication custom procedures for publication '<fld1>' from database '<fld2>': 
	else if [logstash][msgparser][id] == "msgParserId3349" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transactional replication custom procedures for publication '%{fld1}' from database '%{fld2}':" }
			id => "msgParserId3349"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3350
	# line in RSA:  <fld30> <fld31> <event_source> Transact-SQL Subsystem 
	else if [logstash][msgparser][id] == "msgParserId3350" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Transact-SQL Subsystem" }
			id => "msgParserId3350"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Trigger" {
		# MESSAGE 003276
		# line in RSA:  <fld30> <fld31> <event_source> Trigger '<fld1>' is not a trigger for '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Trigger '%{fld1}' is not a trigger for '%{fld2}'." }
				id => "message-003276"
				add_field => {
					"[event][id]" => "003276"
					"[rsa][message][id1]" => "003276"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003277
		# line in RSA:  <fld30> <fld31> <event_source> Trigger '<fld1>' was not found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Trigger '%{fld1}' was not found." }
				id => "message-003277"
				add_field => {
					"[event][id]" => "003277"
					"[rsa][message][id1]" => "003277"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3353
	# line in RSA:  <fld30> <fld31> <event_source> Two buffers are conflicting for the same keep slot in table '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId3353" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Two buffers are conflicting for the same keep slot in table '%{fld1}'." }
			id => "msgParserId3353"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Type" {
		# MESSAGE 003279
		# line in RSA:  <fld30> <fld31> <event_source> Type <fld1> is not a defined system type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Type %{fld1} is not a defined system type." }
				id => "message-003279"
				add_field => {
					"[event][id]" => "003279"
					"[rsa][message][id1]" => "003279"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003280
		# line in RSA:  <fld30> <fld31> <event_source> Type added. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Type added." }
				id => "message-003280"
				add_field => {
					"[event][id]" => "003280"
					"[rsa][message][id1]" => "003280"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003281
		# line in RSA:  <fld30> <fld31> <event_source> Type has been dropped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Type has been dropped." }
				id => "message-003281"
				add_field => {
					"[event][id]" => "003281"
					"[rsa][message][id1]" => "003281"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3357
	# line in RSA:  <fld30> <fld31> <event_source> UID (user ID) : <fld1> 
	else if [logstash][msgparser][id] == "msgParserId3357" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} UID (user ID) : %{fld1}" }
			id => "msgParserId3357"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Unable" {
		# MESSAGE 003283
		# line in RSA:  <fld30> <fld31> <event_source> Unable to add the article '<fld1>' because a snapshot has been generated for the publication '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to add the article '%{fld1}' because a snapshot has been generated for the publication '%{fld2}'." }
				id => "message-003283"
				add_field => {
					"[event][id]" => "003283"
					"[rsa][message][id1]" => "003283"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003284
		# line in RSA:  <fld30> <fld31> <event_source> Unable to communicate with debugger on <fld1> (Error = <fld2>). Debugging disabled for connection <fld3>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to communicate with debugger on %{fld1} (Error = %{fld2}). Debugging disabled for connection %{fld3}." }
				id => "message-003284"
				add_field => {
					"[event][id]" => "003284"
					"[rsa][message][id1]" => "003284"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003285
		# line in RSA:  <fld30> <fld31> <event_source> Unable to connect to debugger on <fld1> (Error = <fld2>). Ensure that client-side components, such as SQLDBREG.EXE, are installed and registered on <fld3>. Debugging disabled for connection <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to connect to debugger on %{fld1} (Error = %{fld2}). Ensure that client-side components, such as SQLDBREG.EXE, are installed and registered on %{fld3}. Debugging disabled for connection %{fld4}." }
				id => "message-003285"
				add_field => {
					"[event][id]" => "003285"
					"[rsa][message][id1]" => "003285"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003286
		# line in RSA:  <fld30> <fld31> <event_source> Unable to connect to debugger on <fld1> (Error = <fld2>). Ensure that client-side components, such as SQLLE.DLL, are installed and registered on <fld3>. Debugging disabled for connection <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to connect to debugger on %{fld1} (Error = %{fld2}). Ensure that client-side components, such as SQLLE.DLL, are installed and registered on %{fld3}. Debugging disabled for connection %{fld4}." }
				id => "message-003286"
				add_field => {
					"[event][id]" => "003286"
					"[rsa][message][id1]" => "003286"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003287
		# line in RSA:  <fld30> <fld31> <event_source> Unable to create/attach any new database because the number of existing databases has reached the maximum number allowed: <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to create/attach any new database because the number of existing databases has reached the maximum number allowed: %{fld1}." }
				id => "message-003287"
				add_field => {
					"[event][id]" => "003287"
					"[rsa][message][id1]" => "003287"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003288
		# line in RSA:  <fld30> <fld31> <event_source> Unable to determine the snapshot folder for the specified subscription because the specified Subscriber is not known to the Distributor. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to determine the snapshot folder for the specified subscription because the specified Subscriber is not known to the Distributor." }
				id => "message-003288"
				add_field => {
					"[event][id]" => "003288"
					"[rsa][message][id1]" => "003288"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003289
		# line in RSA:  <fld30> <fld31> <event_source> Unable to process index <fld1> of table <fld2> because filegroup <fld3> is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to process index %{fld1} of table %{fld2} because filegroup %{fld3} is invalid." }
				id => "message-003289"
				add_field => {
					"[event][id]" => "003289"
					"[rsa][message][id1]" => "003289"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003290
		# line in RSA:  <fld30> <fld31> <event_source> Unable to process index <fld1> of table <fld2> because filegroup <fld3> is offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to process index %{fld1} of table %{fld2} because filegroup %{fld3} is offline." }
				id => "message-003290"
				add_field => {
					"[event][id]" => "003290"
					"[rsa][message][id1]" => "003290"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003291
		# line in RSA:  <fld30> <fld31> <event_source> Unable to process table <fld1> because filegroup <fld2> is invalid. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to process table %{fld1} because filegroup %{fld2} is invalid." }
				id => "message-003291"
				add_field => {
					"[event][id]" => "003291"
					"[rsa][message][id1]" => "003291"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003292
		# line in RSA:  <fld30> <fld31> <event_source> Unable to process table <fld1> because filegroup <fld2> is offline. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to process table %{fld1} because filegroup %{fld2} is offline." }
				id => "message-003292"
				add_field => {
					"[event][id]" => "003292"
					"[rsa][message][id1]" => "003292"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003293
		# line in RSA:  <fld30> <fld31> <event_source> Unable to send symbol information to debugger on <fld1> for connection <fld2>. Debugging disabled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to send symbol information to debugger on %{fld1} for connection %{fld2}. Debugging disabled." }
				id => "message-003293"
				add_field => {
					"[event][id]" => "003293"
					"[rsa][message][id1]" => "003293"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003294
		# line in RSA:  <fld30> <fld31> <event_source> Unable to start a nested transaction for OLE DB provider '<fld1>'.  A nested transaction was required because the XACT_ABORT option was set to OFF. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unable to start a nested transaction for OLE DB provider '%{fld1}'.  A nested transaction was required because the XACT_ABORT option was set to OFF." }
				id => "message-003294"
				add_field => {
					"[event][id]" => "003294"
					"[rsa][message][id1]" => "003294"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3370
	# line in RSA:  <fld30> <fld31> <event_source> Unclosed quotation mark before the character string '<fld1>'. 
	else if [logstash][msgparser][id] == "msgParserId3370" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unclosed quotation mark before the character string '%{fld1}'." }
			id => "msgParserId3370"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Undeclared" {
		# MESSAGE 003296
		# line in RSA:  <fld30> <fld31> <event_source> Undeclared parent tag ID <fld1> is used in a FOR XML EXPLICIT query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Undeclared parent tag ID %{fld1} is used in a FOR XML EXPLICIT query." }
				id => "message-003296"
				add_field => {
					"[event][id]" => "003296"
					"[rsa][message][id1]" => "003296"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003297
		# line in RSA:  <fld30> <fld31> <event_source> Undeclared tag ID <fld1> is used in a FOR XML EXPLICIT query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Undeclared tag ID %{fld1} is used in a FOR XML EXPLICIT query." }
				id => "message-003297"
				add_field => {
					"[event][id]" => "003297"
					"[rsa][message][id1]" => "003297"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Unexpected" {
		# MESSAGE 003298
		# line in RSA:  <fld30> <fld31> <event_source> Unexpected end of file while reading beginning of backup set. Confirm that the media contains a valid SQL Server backup set, and see the console error log for more details. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unexpected end of file while reading beginning of backup set. Confirm that the media contains a valid SQL Server backup set, and see the console error log for more details." }
				id => "message-003298"
				add_field => {
					"[event][id]" => "003298"
					"[rsa][message][id1]" => "003298"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003299
		# line in RSA:  <fld30> <fld31> <event_source> Unexpected failure acquiring application lock. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unexpected failure acquiring application lock." }
				id => "message-003299"
				add_field => {
					"[event][id]" => "003299"
					"[rsa][message][id1]" => "003299"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003300
		# line in RSA:  <fld30> <fld31> <event_source> Unexpected failure releasing application lock. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unexpected failure releasing application lock." }
				id => "message-003300"
				add_field => {
					"[event][id]" => "003300"
					"[rsa][message][id1]" => "003300"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003301
		# line in RSA:  <fld30> <fld31> <event_source> Unexpected NULL value returned for column '<fld1>.<fld2>' from the OLE DB provider '<fld3>'. This column cannot be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unexpected NULL value returned for column '%{fld1}.%{fld2}' from the OLE DB provider '%{fld3}'. This column cannot be NULL." }
				id => "message-003301"
				add_field => {
					"[event][id]" => "003301"
					"[rsa][message][id1]" => "003301"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Unicode" {
		# MESSAGE 003302
		# line in RSA:  <fld30> <fld31> <event_source> Unicode data in a Unicode-only collation or ntext data cannot be sent to clients using DB-Library (such as ISQL) or ODBC version 3.7 or earlier. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unicode data in a Unicode-only collation or ntext data cannot be sent to clients using DB-Library (such as ISQL) or ODBC version 3.7 or earlier." }
				id => "message-003302"
				add_field => {
					"[event][id]" => "003302"
					"[rsa][message][id1]" => "003302"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003303
		# line in RSA:  <fld30> <fld31> <event_source> Unicode text data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unicode text data type %{fld1}" }
				id => "message-003303"
				add_field => {
					"[event][id]" => "003303"
					"[rsa][message][id1]" => "003303"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3379
	# line in RSA:  <fld30> <fld31> <event_source> Unimplemented statement or expression <fld1>. 
	else if [logstash][msgparser][id] == "msgParserId3379" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unimplemented statement or expression %{fld1}." }
			id => "msgParserId3379"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "UNION" {
		# MESSAGE 003305
		# line in RSA:  <fld30> <fld31> <event_source> UNION ALL view '<fld1>' is not updatable because a partitioning column was not found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} UNION ALL view '%{fld1}' is not updatable because a partitioning column was not found." }
				id => "message-003305"
				add_field => {
					"[event][id]" => "003305"
					"[rsa][message][id1]" => "003305"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003306
		# line in RSA:  <fld30> <fld31> <event_source> UNION ALL view '<fld1>' is not updatable because a primary key was not found on table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} UNION ALL view '%{fld1}' is not updatable because a primary key was not found on table '%{fld2}'." }
				id => "message-003306"
				add_field => {
					"[event][id]" => "003306"
					"[rsa][message][id1]" => "003306"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003307
		# line in RSA:  <fld30> <fld31> <event_source> UNION ALL view '<fld1>' is not updatable because base table '<fld2>' is used multiple times. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} UNION ALL view '%{fld1}' is not updatable because base table '%{fld2}' is used multiple times." }
				id => "message-003307"
				add_field => {
					"[event][id]" => "003307"
					"[rsa][message][id1]" => "003307"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003308
		# line in RSA:  <fld30> <fld31> <event_source> UNION ALL view '<fld1>' is not updatable because column '<fld2>' of base table '<fld3>' is used multiple times. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} UNION ALL view '%{fld1}' is not updatable because column '%{fld2}' of base table '%{fld3}' is used multiple times." }
				id => "message-003308"
				add_field => {
					"[event][id]" => "003308"
					"[rsa][message][id1]" => "003308"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003309
		# line in RSA:  <fld30> <fld31> <event_source> UNION ALL view '<fld1>' is not updatable because the definition contains a disallowed construct. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} UNION ALL view '%{fld1}' is not updatable because the definition contains a disallowed construct." }
				id => "message-003309"
				add_field => {
					"[event][id]" => "003309"
					"[rsa][message][id1]" => "003309"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003310
		# line in RSA:  <fld30> <fld31> <event_source> UNION ALL view '<fld1>' is not updatable because the definiton of column '<fld2>' of view '<fld3>' is used by another view column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} UNION ALL view '%{fld1}' is not updatable because the definiton of column '%{fld2}' of view '%{fld3}' is used by another view column." }
				id => "message-003310"
				add_field => {
					"[event][id]" => "003310"
					"[rsa][message][id1]" => "003310"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003311
		# line in RSA:  <fld30> <fld31> <event_source> UNION ALL view '<fld1>' is not updatable because the primary key of table '<fld2>' is not included in the union result. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} UNION ALL view '%{fld1}' is not updatable because the primary key of table '%{fld2}' is not included in the union result." }
				id => "message-003311"
				add_field => {
					"[event][id]" => "003311"
					"[rsa][message][id1]" => "003311"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003312
		# line in RSA:  <fld30> <fld31> <event_source> UNION ALL view '<fld1>' is not updatable because the primary key of table '<fld2>' is not unioned with primary keys of preceding tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} UNION ALL view '%{fld1}' is not updatable because the primary key of table '%{fld2}' is not unioned with primary keys of preceding tables." }
				id => "message-003312"
				add_field => {
					"[event][id]" => "003312"
					"[rsa][message][id1]" => "003312"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3388
	# line in RSA:  <fld30> <fld31> <event_source> Unique table computation failed. 
	else if [logstash][msgparser][id] == "msgParserId3388" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unique table computation failed." }
			id => "msgParserId3388"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3389
	# line in RSA:  <fld30> <fld31> <event_source> uniqueidentifier data type <fld1> 
	else if [logstash][msgparser][id] == "msgParserId3389" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} uniqueidentifier data type %{fld1}" }
			id => "msgParserId3389"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Unknown" {
		# MESSAGE 003315
		# line in RSA:  <fld30> <fld31> <event_source> Unknown config number (<fld1>) in sysconfigures. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unknown config number (%{fld1}) in sysconfigures." }
				id => "message-003315"
				add_field => {
					"[event][id]" => "003315"
					"[rsa][message][id1]" => "003315"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003316
		# line in RSA:  <fld30> <fld31> <event_source> Unknown internal error value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unknown internal error value." }
				id => "message-003316"
				add_field => {
					"[event][id]" => "003316"
					"[rsa][message][id1]" => "003316"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003317
		# line in RSA:  <fld30> <fld31> <event_source> Unknown isolation level <fld1> requested from MSDTC. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unknown isolation level %{fld1} requested from MSDTC." }
				id => "message-003317"
				add_field => {
					"[event][id]" => "003317"
					"[rsa][message][id1]" => "003317"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003318
		# line in RSA:  <fld30> <fld31> <event_source> Unknown MSDTC token '<fld32>' received. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unknown MSDTC token '%{fld32}' received." }
				id => "message-003318"
				add_field => {
					"[event][id]" => "003318"
					"[rsa][message][id1]" => "003318"
					"[event][categoryid]" => "1603050000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003319
		# line in RSA:  <fld30> <fld31> <event_source> Unknown provider error. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unknown provider error." }
				id => "message-003319"
				add_field => {
					"[event][id]" => "003319"
					"[rsa][message][id1]" => "003319"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003320
		# line in RSA:  <fld30> <fld31> <event_source> Unknown status code for this column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unknown status code for this column." }
				id => "message-003320"
				add_field => {
					"[event][id]" => "003320"
					"[rsa][message][id1]" => "003320"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3396
	# line in RSA:  <fld30> <fld31> <event_source> unknown type 
	else if [logstash][msgparser][id] == "msgParserId3396" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} unknown type" }
			id => "msgParserId3396"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Unnamed" {
		# MESSAGE 003322
		# line in RSA:  <fld30> <fld31> <event_source> Unnamed column or table names cannot be used as XML identifiers. Name unnamed columns using AS in the SELECT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unnamed column or table names cannot be used as XML identifiers. Name unnamed columns using AS in the SELECT statement." }
				id => "message-003322"
				add_field => {
					"[event][id]" => "003322"
					"[rsa][message][id1]" => "003322"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003323
		# line in RSA:  <fld30> <fld31> <event_source> Unnamed tape (Family ID: <fld1>, sequence <fld2>) dismounted from tape drive ' <fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unnamed tape (Family ID: %{fld1}, sequence %{fld2}) dismounted from tape drive ' %{fld3}'." }
				id => "message-003323"
				add_field => {
					"[event][id]" => "003323"
					"[rsa][message][id1]" => "003323"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003324
		# line in RSA:  <fld30> <fld31> <event_source> Unnamed tape (Family ID: <fld1>, sequence <fld2>) mounted on tape drive ' <fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Unnamed tape (Family ID: %{fld1}, sequence %{fld2}) mounted on tape drive ' %{fld3}'." }
				id => "message-003324"
				add_field => {
					"[event][id]" => "003324"
					"[rsa][message][id1]" => "003324"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Updatable" {
		# MESSAGE 003325
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscribers: RPC to Publisher failed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscribers: RPC to Publisher failed." }
				id => "message-003325"
				add_field => {
					"[event][id]" => "003325"
					"[rsa][message][id1]" => "003325"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003326
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: Cannot update identity columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: Cannot update identity columns." }
				id => "message-003326"
				add_field => {
					"[event][id]" => "003326"
					"[rsa][message][id1]" => "003326"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003327
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: Cannot update timestamp columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: Cannot update timestamp columns." }
				id => "message-003327"
				add_field => {
					"[event][id]" => "003327"
					"[rsa][message][id1]" => "003327"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003328
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: INSERT and DELETE operations are not supported unless published table has a timestamp column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: INSERT and DELETE operations are not supported unless published table has a timestamp column." }
				id => "message-003328"
				add_field => {
					"[event][id]" => "003328"
					"[rsa][message][id1]" => "003328"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003329
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: INSERT operations on tables with identity or timestamp columns are not allowed unless a primary key is defined at the Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: INSERT operations on tables with identity or timestamp columns are not allowed unless a primary key is defined at the Subscriber." }
				id => "message-003329"
				add_field => {
					"[event][id]" => "003329"
					"[rsa][message][id1]" => "003329"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003330
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: Replicated data is not updatable. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: Replicated data is not updatable." }
				id => "message-003330"
				add_field => {
					"[event][id]" => "003330"
					"[rsa][message][id1]" => "003330"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003331
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: Rolling back transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: Rolling back transaction." }
				id => "message-003331"
				add_field => {
					"[event][id]" => "003331"
					"[rsa][message][id1]" => "003331"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003332
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: Rows do not match between Publisher and Subscriber. Run the Distribution Agent to refresh rows at the Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: Rows do not match between Publisher and Subscriber. Run the Distribution Agent to refresh rows at the Subscriber." }
				id => "message-003332"
				add_field => {
					"[event][id]" => "003332"
					"[rsa][message][id1]" => "003332"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003333
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: The text/ntext/image values cannot be updated at Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: The text/ntext/image values cannot be updated at Subscriber." }
				id => "message-003333"
				add_field => {
					"[event][id]" => "003333"
					"[rsa][message][id1]" => "003333"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003334
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: The text/ntext/image values inserted at Subscriber will be NULL. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: The text/ntext/image values inserted at Subscriber will be NULL." }
				id => "message-003334"
				add_field => {
					"[event][id]" => "003334"
					"[rsa][message][id1]" => "003334"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003335
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: Update of replica's primary key is not allowed unless published table has a timestamp column. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: Update of replica's primary key is not allowed unless published table has a timestamp column." }
				id => "message-003335"
				add_field => {
					"[event][id]" => "003335"
					"[rsa][message][id1]" => "003335"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003336
		# line in RSA:  <fld30> <fld31> <event_source> Updatable Subscriptions: UPDATE operations on tables with identity or timestamp columns are not allowed unless a primary key is defined at the Subscriber. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updatable Subscriptions: UPDATE operations on tables with identity or timestamp columns are not allowed unless a primary key is defined at the Subscriber." }
				id => "message-003336"
				add_field => {
					"[event][id]" => "003336"
					"[rsa][message][id1]" => "003336"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Update" {
		# MESSAGE 003337
		# line in RSA:  <fld30> <fld31> <event_source> Update failed because the iResourceSignificantBit is already in use by another resource. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Update failed because the iResourceSignificantBit is already in use by another resource." }
				id => "message-003337"
				add_field => {
					"[event][id]" => "003337"
					"[rsa][message][id1]" => "003337"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003338
		# line in RSA:  <fld30> <fld31> <event_source> Update or insert of view or function '<fld1>' failed because it contains a derived or constant field. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Update or insert of view or function '%{fld1}' failed because it contains a derived or constant field." }
				id => "message-003338"
				add_field => {
					"[event][id]" => "003338"
					"[rsa][message][id1]" => "003338"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Updating" {
		# MESSAGE 003339
		# line in RSA:  <fld30> <fld31> <event_source> Updating columns with the rowguidcol property is not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updating columns with the rowguidcol property is not allowed." }
				id => "message-003339"
				add_field => {
					"[event][id]" => "003339"
					"[rsa][message][id1]" => "003339"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003340
		# line in RSA:  <fld30> <fld31> <event_source> Updating did not meet the schema requirements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Updating did not meet the schema requirements." }
				id => "message-003340"
				add_field => {
					"[event][id]" => "003340"
					"[rsa][message][id1]" => "003340"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Upgrade" {
		# MESSAGE 003341
		# line in RSA:  <fld30> <fld31> <event_source> Upgrade encountered a fatal error. See the SQL Server errorlog for more information. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Upgrade encountered a fatal error. See the SQL Server errorlog for more information." }
				id => "message-003341"
				add_field => {
					"[event][id]" => "003341"
					"[rsa][message][id1]" => "003341"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003342
		# line in RSA:  <fld30> <fld31> <event_source> Upgrade requires SQL Server to be started in single user mode. Restart SQL Server with the -m flag. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Upgrade requires SQL Server to be started in single user mode. Restart SQL Server with the -m flag." }
				id => "message-003342"
				add_field => {
					"[event][id]" => "003342"
					"[rsa][message][id1]" => "003342"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Upgrading" {
		# MESSAGE 003343
		# line in RSA:  <fld30> <fld31> <event_source> Upgrading distribution settings and system objects in database <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Upgrading distribution settings and system objects in database %{fld1}." }
				id => "message-003343"
				add_field => {
					"[event][id]" => "003343"
					"[rsa][message][id1]" => "003343"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003344
		# line in RSA:  <fld30> <fld31> <event_source> Upgrading publication settings and system objects in database <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Upgrading publication settings and system objects in database %{fld1}." }
				id => "message-003344"
				add_field => {
					"[event][id]" => "003344"
					"[rsa][message][id1]" => "003344"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003345
		# line in RSA:  <fld30> <fld31> <event_source> Upgrading subscription settings and system objects in database <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Upgrading subscription settings and system objects in database %{fld1}." }
				id => "message-003345"
				add_field => {
					"[event][id]" => "003345"
					"[rsa][message][id1]" => "003345"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3421
	# line in RSA:  <fld30> <fld31> <event_source> upinit: Warning: Could not raise priority of <fld1> thread. 
	else if [logstash][msgparser][id] == "msgParserId3421" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} upinit: Warning: Could not raise priority of %{fld1} thread." }
			id => "msgParserId3421"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3422
	# line in RSA:  <fld30> <fld31> <event_source> us_english is always available, even though it is not in syslanguages. 
	else if [logstash][msgparser][id] == "msgParserId3422" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} us_english is always available, even though it is not in syslanguages." }
			id => "msgParserId3422"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Usage" {
		# MESSAGE 003348
		# line in RSA:  <fld30> <fld31> <event_source> Usage: DBCC DBCONTROL(dbname,ONLINE|OFFLINE) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: DBCC DBCONTROL(dbname,ONLINE|OFFLINE)" }
				id => "message-003348"
				add_field => {
					"[event][id]" => "003348"
					"[rsa][message][id1]" => "003348"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003349
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_addmessage <fld1>,<fld2>,<fld3> [<fld4>] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_addmessage %{fld1},%{fld2},%{fld3} [%{fld4}]" }
				id => "message-003349"
				add_field => {
					"[event][id]" => "003349"
					"[rsa][message][id1]" => "003349"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003350
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_addremotelogin remoteserver [, loginame [,remotename]] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_addremotelogin remoteserver [, loginame [,remotename]]" }
				id => "message-003350"
				add_field => {
					"[event][id]" => "003350"
					"[rsa][message][id1]" => "003350"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003351
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_addtype name, 'data type' [,'NULL' | 'NOT NULL'] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_addtype name, 'data type' [,'NULL' | 'NOT NULL']" }
				id => "message-003351"
				add_field => {
					"[event][id]" => "003351"
					"[rsa][message][id1]" => "003351"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003352
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_autostats <fld1> [, {ON|OFF} [, <fld2>] ] 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Usage:[\s]+sp_autostats[\s]+(?<fld1>[^\s]*)[\s]+\[,[\s]+(ON|OFF)[\s]+\[,[\s]+(?<fld2>[^\]]*)\][\s]+\][\s]+$" }
				id => "message-003352"
				add_field => {
					"[event][id]" => "003352"
					"[rsa][message][id1]" => "003352"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003353
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_bindefault defaultname, objectname [, 'futureonly'] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_bindefault defaultname, objectname [, 'futureonly']" }
				id => "message-003353"
				add_field => {
					"[event][id]" => "003353"
					"[rsa][message][id1]" => "003353"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003354
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_bindrule rulename, objectname [, 'futureonly'] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_bindrule rulename, objectname [, 'futureonly']" }
				id => "message-003354"
				add_field => {
					"[event][id]" => "003354"
					"[rsa][message][id1]" => "003354"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003355
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_certify_removable <fld1> [,'auto'] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_certify_removable %{fld1} [,'auto']" }
				id => "message-003355"
				add_field => {
					"[event][id]" => "003355"
					"[rsa][message][id1]" => "003355"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003356
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_create_removable <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_create_removable %{fld1}" }
				id => "message-003356"
				add_field => {
					"[event][id]" => "003356"
					"[rsa][message][id1]" => "003356"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003357
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_dbcmptlevel [dbname [, compatibilitylevel]] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_dbcmptlevel [dbname [, compatibilitylevel]]" }
				id => "message-003357"
				add_field => {
					"[event][id]" => "003357"
					"[rsa][message][id1]" => "003357"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003358
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_dboption [dbname [,optname [,'true' | 'false']]] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_dboption [dbname [,optname [,'true' | 'false']]]" }
				id => "message-003358"
				add_field => {
					"[event][id]" => "003358"
					"[rsa][message][id1]" => "003358"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003359
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_dbremove <fld1> [,dropdev] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_dbremove %{fld1} [,dropdev]" }
				id => "message-003359"
				add_field => {
					"[event][id]" => "003359"
					"[rsa][message][id1]" => "003359"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003360
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_detach_db <fld1>, [TRUE|FALSE] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_detach_db %{fld1}, [TRUE|FALSE]" }
				id => "message-003360"
				add_field => {
					"[event][id]" => "003360"
					"[rsa][message][id1]" => "003360"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003361
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_diskdefault logicalname { defaulton | defaultoff } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Usage:[\s]+sp_diskdefault[\s]+logicalname[\s]+([\s]*defaulton[\s]+|[\s]*defaultoff[\s]+)[\s]+$" }
				id => "message-003361"
				add_field => {
					"[event][id]" => "003361"
					"[rsa][message][id1]" => "003361"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003362
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_dropmessage <fld1> [,<fld2> | 'ALL'] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_dropmessage %{fld1} [,%{fld2} | 'ALL']" }
				id => "message-003362"
				add_field => {
					"[event][id]" => "003362"
					"[rsa][message][id1]" => "003362"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003363
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_dropserver server [, droplogins] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Usage: sp_dropserver server [, droplogins]" }
				id => "message-003363"
				add_field => {
					"[event][id]" => "003363"
					"[rsa][message][id1]" => "003363"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003364
		# line in RSA:  <fld30> <fld31> <event_source> Usage: sp_remoteoption [remoteserver, loginame, remotename, optname, {true | false}] 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Usage:[\s]+sp_remoteoption[\s]+\[remoteserver,[\s]+loginame,[\s]+remotename,[\s]+optname,[\s]+(true[\s]+|[\s]*false)\][\s]+$" }
				id => "message-003364"
				add_field => {
					"[event][id]" => "003364"
					"[rsa][message][id1]" => "003364"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3440
	# line in RSA:  <fld30> <fld31> <event_source> use UPDATE. 
	else if [logstash][msgparser][id] == "msgParserId3440" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} use UPDATE." }
			id => "msgParserId3440"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3441
	# line in RSA:  <fld30> <fld31> <event_source> USED pages: Changed from (<fld1>) to (<fld2>) pages. 
	else if [logstash][msgparser][id] == "msgParserId3441" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} USED pages: Changed from (%{fld1}) to (%{fld2}) pages." }
			id => "msgParserId3441"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE 003367
		# line in RSA:  <fld30> <fld31> <event_source> User '<fld1>' does not have permission to run DBCC <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User '%{fld1}' does not have permission to run DBCC %{fld2}." }
				id => "message-003367"
				add_field => {
					"[event][id]" => "003367"
					"[rsa][message][id1]" => "003367"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003370
		# line in RSA:  <fld30> <fld31> <event_source> User '<fld1>' is modifying bytes <fld2> to <fld3> of page <fld4> in database '<fld5>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User '%{fld1}' is modifying bytes %{fld2} to %{fld3} of page %{fld4} in database '%{fld5}'." }
				id => "message-003370"
				add_field => {
					"[event][id]" => "003370"
					"[rsa][message][id1]" => "003370"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003371
		# line in RSA:  <fld30> <fld31> <event_source> User '<fld1>' does not exist in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User '%{fld1}' does not exist in the current database." }
				id => "message-003371"
				add_field => {
					"[event][id]" => "003371"
					"[rsa][message][id1]" => "003371"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003372
		# line in RSA:  <fld30> <fld31> <event_source> User connections are limited to <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User connections are limited to %{fld1}." }
				id => "message-003372"
				add_field => {
					"[event][id]" => "003372"
					"[rsa][message][id1]" => "003372"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003373
		# line in RSA:  <fld30> <fld31> <event_source> User data type '<fld1>' has no default. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User data type '%{fld1}' has no default." }
				id => "message-003373"
				add_field => {
					"[event][id]" => "003373"
					"[rsa][message][id1]" => "003373"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003374
		# line in RSA:  <fld30> <fld31> <event_source> User data type '<fld1>' has no rule. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User data type '%{fld1}' has no rule." }
				id => "message-003374"
				add_field => {
					"[event][id]" => "003374"
					"[rsa][message][id1]" => "003374"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003375
		# line in RSA:  <fld30> <fld31> <event_source> User default language <fld1> is not an official language name on this SQL Server. Using server-wide default <fld2> instead. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User default language %{fld1} is not an official language name on this SQL Server. Using server-wide default %{fld2} instead." }
				id => "message-003375"
				add_field => {
					"[event][id]" => "003375"
					"[rsa][message][id1]" => "003375"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003376
		# line in RSA:  <fld30> <fld31> <event_source> User delete. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User delete." }
				id => "message-003376"
				add_field => {
					"[event][id]" => "003376"
					"[rsa][message][id1]" => "003376"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003377
		# line in RSA:  <fld30> <fld31> <event_source> User did not have sufficient permission to delete the row. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User did not have sufficient permission to delete the row." }
				id => "message-003377"
				add_field => {
					"[event][id]" => "003377"
					"[rsa][message][id1]" => "003377"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003378
		# line in RSA:  <fld30> <fld31> <event_source> User does not have correct permissions on referenced table '<fld1>' to create foreign key '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User does not have correct permissions on referenced table '%{fld1}' to create foreign key '%{fld2}'." }
				id => "message-003378"
				add_field => {
					"[event][id]" => "003378"
					"[rsa][message][id1]" => "003378"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003379
		# line in RSA:  <fld30> <fld31> <event_source> User does not have permission to alter database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User does not have permission to alter database '%{fld1}'." }
				id => "message-003379"
				add_field => {
					"[event][id]" => "003379"
					"[rsa][message][id1]" => "003379"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003380
		# line in RSA:  <fld30> <fld31> <event_source> User does not have permission to perform this action. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User does not have permission to perform this action." }
				id => "message-003380"
				add_field => {
					"[event][id]" => "003380"
					"[rsa][message][id1]" => "003380"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003382
		# line in RSA:  <fld30> <fld31> <event_source> User does not have permission to perform this operation on <fld1>_MSG '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User does not have permission to perform this operation on %{fld1}_MSG '%{fld2}'." }
				id => "message-003382"
				add_field => {
					"[event][id]" => "003382"
					"[rsa][message][id1]" => "003382"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003383
		# line in RSA:  <fld30> <fld31> <event_source> User does not have permission to query the virtual table, DBLog. Only members of the sysadmin fixed server role and the db_owner fixed database role have this permission  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User does not have permission to query the virtual table, DBLog. Only members of the sysadmin fixed server role and the db_owner fixed database role have this permission" }
				id => "message-003383"
				add_field => {
					"[event][id]" => "003383"
					"[rsa][message][id1]" => "003383"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003384
		# line in RSA:  <fld30> <fld31> <event_source> User does not have permission to RESTORE database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User does not have permission to RESTORE database '%{fld1}'." }
				id => "message-003384"
				add_field => {
					"[event][id]" => "003384"
					"[rsa][message][id1]" => "003384"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003385
		# line in RSA:  <fld30> <fld31> <event_source> User does not have permission to use the KILL statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User does not have permission to use the KILL statement." }
				id => "message-003385"
				add_field => {
					"[event][id]" => "003385"
					"[rsa][message][id1]" => "003385"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003386
		# line in RSA:  <fld30> <fld31> <event_source> User has been dropped from current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User has been dropped from current database." }
				id => "message-003386"
				add_field => {
					"[event][id]" => "003386"
					"[rsa][message][id1]" => "003386"
					"[event][categoryid]" => "1501000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003387
		# line in RSA:  <fld30> <fld31> <event_source> User is a member of more than one group. sp_changegroup is set up for backward compatibility and expects membership in one group at most. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User is a member of more than one group. sp_changegroup is set up for backward compatibility and expects membership in one group at most." }
				id => "message-003387"
				add_field => {
					"[event][id]" => "003387"
					"[rsa][message][id1]" => "003387"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003388
		# line in RSA:  <fld30> <fld31> <event_source> User must be in the master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User must be in the master database." }
				id => "message-003388"
				add_field => {
					"[event][id]" => "003388"
					"[rsa][message][id1]" => "003388"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003389
		# line in RSA:  <fld30> <fld31> <event_source> User name '<fld1>' not found. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User name '%{fld1}' not found." }
				id => "message-003389"
				add_field => {
					"[event][id]" => "003389"
					"[rsa][message][id1]" => "003389"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003390
		# line in RSA:  <fld30> <fld31> <event_source> User or role '<fld1>' already exists in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User or role '%{fld1}' already exists in the current database." }
				id => "message-003390"
				add_field => {
					"[event][id]" => "003390"
					"[rsa][message][id1]" => "003390"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003391
		# line in RSA:  <fld30> <fld31> <event_source> User or role '<fld1>' does not exist in this database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User or role '%{fld1}' does not exist in this database." }
				id => "message-003391"
				add_field => {
					"[event][id]" => "003391"
					"[rsa][message][id1]" => "003391"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003392
		# line in RSA:  <fld30> <fld31> <event_source> User tables and views are the only valid synchronization objects. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User tables and views are the only valid synchronization objects." }
				id => "message-003392"
				add_field => {
					"[event][id]" => "003392"
					"[rsa][message][id1]" => "003392"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "User-defined" {
		# MESSAGE 003393
		# line in RSA:  <fld30> <fld31> <event_source> User-defined data types based on timestamp are not allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User-defined data types based on timestamp are not allowed." }
				id => "message-003393"
				add_field => {
					"[event][id]" => "003393"
					"[rsa][message][id1]" => "003393"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003394
		# line in RSA:  <fld30> <fld31> <event_source> User-defined error messages must have a severity level between 1 and 25. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User-defined error messages must have a severity level between 1 and 25." }
				id => "message-003394"
				add_field => {
					"[event][id]" => "003394"
					"[rsa][message][id1]" => "003394"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003395
		# line in RSA:  <fld30> <fld31> <event_source> User-defined error messages must have an ID greater than 50000. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User-defined error messages must have an ID greater than 50000." }
				id => "message-003395"
				add_field => {
					"[event][id]" => "003395"
					"[rsa][message][id1]" => "003395"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003396
		# line in RSA:  <fld30> <fld31> <event_source> User-defined filegroups are not allowed on '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User-defined filegroups are not allowed on '%{fld1}'." }
				id => "message-003396"
				add_field => {
					"[event][id]" => "003396"
					"[rsa][message][id1]" => "003396"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003397
		# line in RSA:  <fld30> <fld31> <event_source> User-defined filegroups should be made read-only. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User-defined filegroups should be made read-only." }
				id => "message-003397"
				add_field => {
					"[event][id]" => "003397"
					"[rsa][message][id1]" => "003397"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003398
		# line in RSA:  <fld30> <fld31> <event_source> User-defined functions are not yet enabled. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User-defined functions are not yet enabled." }
				id => "message-003398"
				add_field => {
					"[event][id]" => "003398"
					"[rsa][message][id1]" => "003398"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003399
		# line in RSA:  <fld30> <fld31> <event_source> User-defined variables cannot be declared within a schema-bound object. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} User-defined variables cannot be declared within a schema-bound object." }
				id => "message-003399"
				add_field => {
					"[event][id]" => "003399"
					"[rsa][message][id1]" => "003399"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3472
	# line in RSA:  <fld30> <fld31> <event_source> Users other than the database owner or guest exist in the database. Drop them before removing the database. 
	else if [logstash][msgparser][id] == "msgParserId3472" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Users other than the database owner or guest exist in the database. Drop them before removing the database." }
			id => "msgParserId3472"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3473
	# line in RSA:  <fld30> <fld31> <event_source> User-specified volume ID '<fld1>' does not match the volume ID '<fld2>' of the device '<fld3>'. 
	else if [logstash][msgparser][id] == "msgParserId3473" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} User-specified volume ID '%{fld1}' does not match the volume ID '%{fld2}' of the device '%{fld3}'." }
			id => "msgParserId3473"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Using" {
		# MESSAGE 003402
		# line in RSA:  <fld30> <fld31> <event_source> Using <fld1> lock allocation. [<fld2>] Lock Blocks, [<fld3>] Lock Owner Blocks. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Using %{fld1} lock allocation. [%{fld2}] Lock Blocks, [%{fld3}] Lock Owner Blocks." }
				id => "message-003402"
				add_field => {
					"[event][id]" => "003402"
					"[rsa][message][id1]" => "003402"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003403
		# line in RSA:  <fld30> <fld31> <event_source> Using '<fld1>' version '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Using '%{fld1}' version '%{fld2}'." }
				id => "message-003403"
				add_field => {
					"[event][id]" => "003403"
					"[rsa][message][id1]" => "003403"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003405
		# line in RSA:  <fld30> <fld31> <event_source> Using defaults is not allowed in views that contain a set operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Using defaults is not allowed in views that contain a set operator." }
				id => "message-003405"
				add_field => {
					"[event][id]" => "003405"
					"[rsa][message][id1]" => "003405"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Using:01
		# line in RSA:  <fld30> <fld31> Server <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} Server %{info}" }
				id => "message-Using:01"
				add_field => {
					"[event][id]" => "Using:01"
					"[rsa][message][id1]" => "Using:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Valid" {
		# MESSAGE 003406
		# line in RSA:  <fld30> <fld31> <event_source> Valid configuration options are: 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Valid configuration options are:" }
				id => "message-003406"
				add_field => {
					"[event][id]" => "003406"
					"[rsa][message][id1]" => "003406"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003407
		# line in RSA:  <fld30> <fld31> <event_source> Valid values for the fill factor are 0 to 100. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Valid values for the fill factor are 0 to 100." }
				id => "message-003407"
				add_field => {
					"[event][id]" => "003407"
					"[rsa][message][id1]" => "003407"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003408
		# line in RSA:  <fld30> <fld31> <event_source> Valid values of database compatibility level are <fld1>, <fld2>, <fld3>, or <fld4>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Valid values of database compatibility level are %{fld1}, %{fld2}, %{fld3}, or %{fld4}." }
				id => "message-003408"
				add_field => {
					"[event][id]" => "003408"
					"[rsa][message][id1]" => "003408"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Validation" {
		# MESSAGE 003409
		# line in RSA:  <fld30> <fld31> <event_source> Validation Failure. Object '<fld1>' does not exist. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Validation Failure. Object '%{fld1}' does not exist." }
				id => "message-003409"
				add_field => {
					"[event][id]" => "003409"
					"[rsa][message][id1]" => "003409"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003410
		# line in RSA:  <fld30> <fld31> <event_source> Validation is not supported for articles that are set up for DTS horizontal partitions. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Validation is not supported for articles that are set up for DTS horizontal partitions." }
				id => "message-003410"
				add_field => {
					"[event][id]" => "003410"
					"[rsa][message][id1]" => "003410"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003411
		# line in RSA:  <fld30> <fld31> <event_source> Validation is not supported for heterogeneous Subscribers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Validation is not supported for heterogeneous Subscribers." }
				id => "message-003411"
				add_field => {
					"[event][id]" => "003411"
					"[rsa][message][id1]" => "003411"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Value" {
		# MESSAGE 003412
		# line in RSA:  <fld30> <fld31> <event_source> Value <fld1> is not valid for full-text data time-out. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Value %{fld1} is not valid for full-text data time-out." }
				id => "message-003412"
				add_field => {
					"[event][id]" => "003412"
					"[rsa][message][id1]" => "003412"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003413
		# line in RSA:  <fld30> <fld31> <event_source> Value is wrong data type for parameter '<fld1>' (requires data type '<fld2>'). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Value is wrong data type for parameter '%{fld1}' (requires data type '%{fld2}')." }
				id => "message-003413"
				add_field => {
					"[event][id]" => "003413"
					"[rsa][message][id1]" => "003413"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003414
		# line in RSA:  <fld30> <fld31> <event_source> Value specified for column '<fld1>' is the same for column '<fld2>'. An element cannot be its own parent. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Value specified for column '%{fld1}' is the same for column '%{fld2}'. An element cannot be its own parent." }
				id => "message-003414"
				add_field => {
					"[event][id]" => "003414"
					"[rsa][message][id1]" => "003414"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3486
	# line in RSA:  <fld30> <fld31> <event_source> Values for @ins_cmd, @upd_cmd, and @del_cmd can be only [<fld1>], [<fld2>] and [<fld3>] respectively because the publication allows queued transactions. 
	else if [logstash][msgparser][id] == "msgParserId3486" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Values for @ins_cmd, @upd_cmd, and @del_cmd can be only [%{fld1}], [%{fld2}] and [%{fld3}] respectively because the publication allows queued transactions." }
			id => "msgParserId3486"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3487
	# line in RSA:  <fld30> <fld31> <event_source> varbinary (128) NOT NULL 
	else if [logstash][msgparser][id] == "msgParserId3487" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} varbinary (128) NOT NULL" }
			id => "msgParserId3487"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3488
	# line in RSA:  <fld30> <fld31> <event_source> variable assignment 
	else if [logstash][msgparser][id] == "msgParserId3488" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} variable assignment" }
			id => "msgParserId3488"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "variable-length" {
		# MESSAGE 003418
		# line in RSA:  <fld30> <fld31> <event_source> variable-length binary data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} variable-length binary data type %{fld1}" }
				id => "message-003418"
				add_field => {
					"[event][id]" => "003418"
					"[rsa][message][id1]" => "003418"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003419
		# line in RSA:  <fld30> <fld31> <event_source> variable-length char data type <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} variable-length char data type %{fld1}" }
				id => "message-003419"
				add_field => {
					"[event][id]" => "003419"
					"[rsa][message][id1]" => "003419"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3491
	# line in RSA:  <fld30> <fld31> <event_source> Variables are not allowed in the <fld1> statement. 
	else if [logstash][msgparser][id] == "msgParserId3491" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Variables are not allowed in the %{fld1} statement." }
			id => "msgParserId3491"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3492
	# line in RSA:  <fld30> <fld31> <event_source> Verbose history agent profile. 
	else if [logstash][msgparser][id] == "msgParserId3492" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Verbose history agent profile." }
			id => "msgParserId3492"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3493
	# line in RSA:  <fld30> <fld31> <event_source> Version date of last upgrade: 10/11/90. 
	else if [logstash][msgparser][id] == "msgParserId3493" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Version date of last upgrade: 10/11/90." }
			id => "msgParserId3493"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "View" {
		# MESSAGE 003423
		# line in RSA:  <fld30> <fld31> <event_source> View '<fld1>' has an INSTEAD OF DELETE trigger and cannot be a target of a DELETE FROM statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View '%{fld1}' has an INSTEAD OF DELETE trigger and cannot be a target of a DELETE FROM statement." }
				id => "message-003423"
				add_field => {
					"[event][id]" => "003423"
					"[rsa][message][id1]" => "003423"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003424
		# line in RSA:  <fld30> <fld31> <event_source> View '<fld1>' has an INSTEAD OF UPDATE trigger and cannot be a target of an UPDATE FROM statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View '%{fld1}' has an INSTEAD OF UPDATE trigger and cannot be a target of an UPDATE FROM statement." }
				id => "message-003424"
				add_field => {
					"[event][id]" => "003424"
					"[rsa][message][id1]" => "003424"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003425
		# line in RSA:  <fld30> <fld31> <event_source> View '<fld1>' is not updatable because either it was created WITH CHECK OPTION or it spans a view created WITH CHECK OPTION and the target table is referenced multiple times in the resulting query. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View '%{fld1}' is not updatable because either it was created WITH CHECK OPTION or it spans a view created WITH CHECK OPTION and the target table is referenced multiple times in the resulting query." }
				id => "message-003425"
				add_field => {
					"[event][id]" => "003425"
					"[rsa][message][id1]" => "003425"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003426
		# line in RSA:  <fld30> <fld31> <event_source> View '<fld1>' is not updatable because the <fld2> statement contains a GROUP BY ALL clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View '%{fld1}' is not updatable because the %{fld2} statement contains a GROUP BY ALL clause." }
				id => "message-003426"
				add_field => {
					"[event][id]" => "003426"
					"[rsa][message][id1]" => "003426"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003427
		# line in RSA:  <fld30> <fld31> <event_source> View '<fld1>' is not updatable because the definition contains a set operator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View '%{fld1}' is not updatable because the definition contains a set operator." }
				id => "message-003427"
				add_field => {
					"[event][id]" => "003427"
					"[rsa][message][id1]" => "003427"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003428
		# line in RSA:  <fld30> <fld31> <event_source> View or function '<fld1>' contains a self-reference. Views or functions cannot reference themselves directly or indirectly. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View or function '%{fld1}' contains a self-reference. Views or functions cannot reference themselves directly or indirectly." }
				id => "message-003428"
				add_field => {
					"[event][id]" => "003428"
					"[rsa][message][id1]" => "003428"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003429
		# line in RSA:  <fld30> <fld31> <event_source> View or function '<fld1>' has more column names specified than columns defined. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View or function '%{fld1}' has more column names specified than columns defined." }
				id => "message-003429"
				add_field => {
					"[event][id]" => "003429"
					"[rsa][message][id1]" => "003429"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003430
		# line in RSA:  <fld30> <fld31> <event_source> View or function '<fld1>' has more columns defined than column names given. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View or function '%{fld1}' has more columns defined than column names given." }
				id => "message-003430"
				add_field => {
					"[event][id]" => "003430"
					"[rsa][message][id1]" => "003430"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003431
		# line in RSA:  <fld30> <fld31> <event_source> View or function '<fld1>' is not updatable because it contains aggregates. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View or function '%{fld1}' is not updatable because it contains aggregates." }
				id => "message-003431"
				add_field => {
					"[event][id]" => "003431"
					"[rsa][message][id1]" => "003431"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003432
		# line in RSA:  <fld30> <fld31> <event_source> View or function '<fld1>' is not updatable because the definition contains the DISTINCT clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View or function '%{fld1}' is not updatable because the definition contains the DISTINCT clause." }
				id => "message-003432"
				add_field => {
					"[event][id]" => "003432"
					"[rsa][message][id1]" => "003432"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003433
		# line in RSA:  <fld30> <fld31> <event_source> View or function '<fld1>' is not updatable because the modification affects multiple base tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} View or function '%{fld1}' is not updatable because the modification affects multiple base tables." }
				id => "message-003433"
				add_field => {
					"[event][id]" => "003433"
					"[rsa][message][id1]" => "003433"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Views" {
		# MESSAGE 003434
		# line in RSA:  <fld30> <fld31> <event_source> Views do not have space allocated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Views do not have space allocated." }
				id => "message-003434"
				add_field => {
					"[event][id]" => "003434"
					"[rsa][message][id1]" => "003434"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003435
		# line in RSA:  <fld30> <fld31> <event_source> Views or functions are not allowed on temporary tables. Table names that begin with '#' denote temporary tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Views or functions are not allowed on temporary tables. Table names that begin with '#' denote temporary tables." }
				id => "message-003435"
				add_field => {
					"[event][id]" => "003435"
					"[rsa][message][id1]" => "003435"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003436
		# line in RSA:  <fld30> <fld31> <event_source> Views referencing tables on multiple servers are not updatable on this SKU of SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Views referencing tables on multiple servers are not updatable on this SKU of SQL Server." }
				id => "message-003436"
				add_field => {
					"[event][id]" => "003436"
					"[rsa][message][id1]" => "003436"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3508
	# line in RSA:  <fld30> <fld31> <event_source> Violation of <fld1> constraint '<fld2>'. Cannot insert duplicate key in object '<fld3>'. 
	else if [logstash][msgparser][id] == "msgParserId3508" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Violation of %{fld1} constraint '%{fld2}'. Cannot insert duplicate key in object '%{fld3}'." }
			id => "msgParserId3508"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3509
	# line in RSA:  <fld30> <fld31> <event_source> Waiting for type <fld1>, current count <fld2>, current owning EC <fld3>.
	else if [logstash][msgparser][id] == "msgParserId3509" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Waiting for type %{fld1}, current count %{fld2}, current owning EC %{fld3}." }
			id => "msgParserId3509"
			add_field => {
				"result" => "Waiting for type"
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3510
	# line in RSA:  <fld30> <fld31> <event_source> Warning! The maximum key length is <fld1> bytes. The index '<fld2>' has maximum length of <fld3> bytes. For some combination of large values, the insert/update operation will fail. 
	else if [logstash][msgparser][id] == "msgParserId3510" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning! The maximum key length is %{fld1} bytes. The index '%{fld2}' has maximum length of %{fld3} bytes. For some combination of large values, the insert/update operation will fail." }
			id => "msgParserId3510"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3511
	# line in RSA:  <fld30> <fld31> <event_source> Warning. Line <fld1>: The option '<fld2>' is obsolete and has no effect. 
	else if [logstash][msgparser][id] == "msgParserId3511" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning. Line %{fld1}: The option '%{fld2}' is obsolete and has no effect." }
			id => "msgParserId3511"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Warning" {
		# MESSAGE 003440
		# line in RSA:  <fld30> <fld31> <event_source> Warning: A linked server that refers to the originating server is not a supported scenario.  If you wish to use a four-part name to reference a local table, please use the actual server name rather than an alias. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: A linked server that refers to the originating server is not a supported scenario.  If you wish to use a four-part name to reference a local table, please use the actual server name rather than an alias." }
				id => "message-003440"
				add_field => {
					"[event][id]" => "003440"
					"[rsa][message][id1]" => "003440"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003441
		# line in RSA:  <fld30> <fld31> <event_source> Warning: adding updatable subscription for article '<fld1>' may cause data inconsistency as the source table is already subscribed to '<fld2>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: adding updatable subscription for article '%{fld1}' may cause data inconsistency as the source table is already subscribed to '%{fld2}'" }
				id => "message-003441"
				add_field => {
					"[event][id]" => "003441"
					"[rsa][message][id1]" => "003441"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003442
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Cannot use NO_BUFFERING option on '<fld1>'. Operating system error <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Cannot use NO_BUFFERING option on '%{fld1}'. Operating system error %{fld2}." }
				id => "message-003442"
				add_field => {
					"[event][id]" => "003442"
					"[rsa][message][id1]" => "003442"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003443
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Changing default collation for database '<fld1>', which is used in replication. It is recommend that all replication database have the same default collation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Changing default collation for database '%{fld1}', which is used in replication. It is recommend that all replication database have the same default collation." }
				id => "message-003443"
				add_field => {
					"[event][id]" => "003443"
					"[rsa][message][id1]" => "003443"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003444
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Clean_process system function called from another thread. Outstanding I/O may not complete. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Clean_process system function called from another thread. Outstanding I/O may not complete." }
				id => "message-003444"
				add_field => {
					"[event][id]" => "003444"
					"[rsa][message][id1]" => "003444"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003445
		# line in RSA:  <fld30> <fld31> <event_source> Warning: column '<fld1>' already exists in the vertical partition already. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: column '%{fld1}' already exists in the vertical partition already." }
				id => "message-003445"
				add_field => {
					"[event][id]" => "003445"
					"[rsa][message][id1]" => "003445"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003446
		# line in RSA:  <fld30> <fld31> <event_source> Warning: column '<fld1>' does not exist in the vertical partition. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: column '%{fld1}' does not exist in the vertical partition." }
				id => "message-003446"
				add_field => {
					"[event][id]" => "003446"
					"[rsa][message][id1]" => "003446"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003447
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Columns added to the replicated table <fld1>_MSG '<fld2>' will be ignored by existing articles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Columns added to the replicated table %{fld1}_MSG '%{fld2}' will be ignored by existing articles." }
				id => "message-003447"
				add_field => {
					"[event][id]" => "003447"
					"[rsa][message][id1]" => "003447"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003448
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Could not determine local machine name. This prevents MSX operations from being posted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Could not determine local machine name. This prevents MSX operations from being posted." }
				id => "message-003448"
				add_field => {
					"[event][id]" => "003448"
					"[rsa][message][id1]" => "003448"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003449
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Could not determine the outcome of transaction <fld1>_XID, named '<fld2>' in database '<fld3>' (with ID <fld4>) because the coordinating database (ID <fld5>) did not contain the outcome. The transaction was assumed to be committed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Could not determine the outcome of transaction %{fld1}_XID, named '%{fld2}' in database '%{fld3}' (with ID %{fld4}) because the coordinating database (ID %{fld5}) did not contain the outcome. The transaction was assumed to be committed." }
				id => "message-003449"
				add_field => {
					"[event][id]" => "003449"
					"[rsa][message][id1]" => "003449"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003450
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Deleted duplicate row. Primary key is '<fld1>_KEY'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Deleted duplicate row. Primary key is '%{fld1}_KEY'." }
				id => "message-003450"
				add_field => {
					"[event][id]" => "003450"
					"[rsa][message][id1]" => "003450"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003451
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Due to low virtual memory, special reserved memory used <fld1> times since startup. Increase virtual memory on server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Due to low virtual memory, special reserved memory used %{fld1} times since startup. Increase virtual memory on server." }
				id => "message-003451"
				add_field => {
					"[event][id]" => "003451"
					"[rsa][message][id1]" => "003451"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003452
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Fatal error <fld1> occurred at <fld2>_DATE. Note the error and time, and contact your system administrator. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Fatal error %{fld1} occurred at %{fld2}_DATE. Note the error and time, and contact your system administrator." }
				id => "message-003452"
				add_field => {
					"[event][id]" => "003452"
					"[rsa][message][id1]" => "003452"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003453
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Full-text index for table '<fld1>' cannot be populated because the database is in single-user access mode. Change tracking is stopped for this table. Use sp_fulltext_table to start change tracking. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Full-text index for table '%{fld1}' cannot be populated because the database is in single-user access mode. Change tracking is stopped for this table. Use sp_fulltext_table to start change tracking." }
				id => "message-003453"
				add_field => {
					"[event][id]" => "003453"
					"[rsa][message][id1]" => "003453"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003454
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Index '<fld1>' on '<fld2>' in database ' <fld3>' may be corrupt because of expression evaluation changes in this release. Drop and re-create the index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Index '%{fld1}' on '%{fld2}' in database ' %{fld3}' may be corrupt because of expression evaluation changes in this release. Drop and re-create the index." }
				id => "message-003454"
				add_field => {
					"[event][id]" => "003454"
					"[rsa][message][id1]" => "003454"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003456
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Index hints supplied for view '<fld1>' will be ignored. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Index hints supplied for view '%{fld1}' will be ignored." }
				id => "message-003456"
				add_field => {
					"[event][id]" => "003456"
					"[rsa][message][id1]" => "003456"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003457
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Media in device '<fld1>' may have been changed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Media in device '%{fld1}' may have been changed." }
				id => "message-003457"
				add_field => {
					"[event][id]" => "003457"
					"[rsa][message][id1]" => "003457"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003458
		# line in RSA:  <fld30> <fld31> <event_source> Warning: NO_INDEX option of <fld1> being used. Checks on non-system indexes will be skipped. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: NO_INDEX option of %{fld1} being used. Checks on non-system indexes will be skipped." }
				id => "message-003458"
				add_field => {
					"[event][id]" => "003458"
					"[rsa][message][id1]" => "003458"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003459
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Non-existent step referenced by <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Non-existent step referenced by %{fld1}." }
				id => "message-003459"
				add_field => {
					"[event][id]" => "003459"
					"[rsa][message][id1]" => "003459"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003460
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Null value is eliminated by an aggregate or other SET operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Null value is eliminated by an aggregate or other SET operation." }
				id => "message-003460"
				add_field => {
					"[event][id]" => "003460"
					"[rsa][message][id1]" => "003460"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003461
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because a compressed snapshot is used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because a compressed snapshot is used." }
				id => "message-003461"
				add_field => {
					"[event][id]" => "003461"
					"[rsa][message][id1]" => "003461"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003462
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because a new article has been added to the publication after its snapshot has been generated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because a new article has been added to the publication after its snapshot has been generated." }
				id => "message-003462"
				add_field => {
					"[event][id]" => "003462"
					"[rsa][message][id1]" => "003462"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003463
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because at least one timestamp column exists in one of its articles.. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because at least one timestamp column exists in one of its articles.." }
				id => "message-003463"
				add_field => {
					"[event][id]" => "003463"
					"[rsa][message][id1]" => "003463"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003464
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because automatic identity ranges are being used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because automatic identity ranges are being used." }
				id => "message-003464"
				add_field => {
					"[event][id]" => "003464"
					"[rsa][message][id1]" => "003464"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003465
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because column-level collation is scripted out with the article schema creation script. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because column-level collation is scripted out with the article schema creation script." }
				id => "message-003465"
				add_field => {
					"[event][id]" => "003465"
					"[rsa][message][id1]" => "003465"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003466
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because data types new in SQL Server 2000 exist in one of its articles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because data types new in SQL Server 2000 exist in one of its articles." }
				id => "message-003466"
				add_field => {
					"[event][id]" => "003466"
					"[rsa][message][id1]" => "003466"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003467
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because extended properties are scripted out with the article schema creation script. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because extended properties are scripted out with the article schema creation script." }
				id => "message-003467"
				add_field => {
					"[event][id]" => "003467"
					"[rsa][message][id1]" => "003467"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003468
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because it contains schema-only articles. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because it contains schema-only articles." }
				id => "message-003468"
				add_field => {
					"[event][id]" => "003468"
					"[rsa][message][id1]" => "003468"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003469
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because publication wide reinitialization is performed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because publication wide reinitialization is performed." }
				id => "message-003469"
				add_field => {
					"[event][id]" => "003469"
					"[rsa][message][id1]" => "003469"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003470
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because schema replication is performed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because schema replication is performed." }
				id => "message-003470"
				add_field => {
					"[event][id]" => "003470"
					"[rsa][message][id1]" => "003470"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003471
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 2000 can synchronize with publication '<fld1>' because vertical filters are being used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 2000 can synchronize with publication '%{fld1}' because vertical filters are being used." }
				id => "message-003471"
				add_field => {
					"[event][id]" => "003471"
					"[rsa][message][id1]" => "003471"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003472
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 7.0 Service Pack 2 or later can synchronize with publication '<fld1>' because decentralized conflict logging is designated. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 7.0 Service Pack 2 or later can synchronize with publication '%{fld1}' because decentralized conflict logging is designated." }
				id => "message-003472"
				add_field => {
					"[event][id]" => "003472"
					"[rsa][message][id1]" => "003472"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003473
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 7.0 Service Pack 2 or later can synchronize with publication '<fld1>' because merge metadata cleanup task is performed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 7.0 Service Pack 2 or later can synchronize with publication '%{fld1}' because merge metadata cleanup task is performed." }
				id => "message-003473"
				add_field => {
					"[event][id]" => "003473"
					"[rsa][message][id1]" => "003473"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003474
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 7.0 Service Pack 2 or later can synchronize with publication '<fld1>' because publication wide reinitialization is performed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 7.0 Service Pack 2 or later can synchronize with publication '%{fld1}' because publication wide reinitialization is performed." }
				id => "message-003474"
				add_field => {
					"[event][id]" => "003474"
					"[rsa][message][id1]" => "003474"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003475
		# line in RSA:  <fld30> <fld31> <event_source> Warning: only Subscribers running SQL Server 7.0 Service Pack 2 or later can synchronize with publication '<fld1>' because publication wide validation task is performed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: only Subscribers running SQL Server 7.0 Service Pack 2 or later can synchronize with publication '%{fld1}' because publication wide validation task is performed." }
				id => "message-003475"
				add_field => {
					"[event][id]" => "003475"
					"[rsa][message][id1]" => "003475"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003476
		# line in RSA:  <fld30> <fld31> <event_source> Warning: OPEN OBJECTS parameter may be too low. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: OPEN OBJECTS parameter may be too low." }
				id => "message-003476"
				add_field => {
					"[event][id]" => "003476"
					"[rsa][message][id1]" => "003476"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003477
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Page <fld1>, slot <fld2> in Object <fld3> Index <fld4> Column <fld5> value <fld6> is out of range for data type "<fld7>".  Update column to a legal value. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Page %{fld1}, slot %{fld2} in Object %{fld3} Index %{fld4} Column %{fld5} value %{fld6} is out of range for data type \"%{fld7}\".  Update column to a legal value." }
				id => "message-003477"
				add_field => {
					"[event][id]" => "003477"
					"[rsa][message][id1]" => "003477"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003478
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Pinning tables should be carefully considered. If a pinned table is larger, or grows larger, than the available data cache, the server may need to be restarted and the table unpinned. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Pinning tables should be carefully considered. If a pinned table is larger, or grows larger, than the available data cache, the server may need to be restarted and the table unpinned." }
				id => "message-003478"
				add_field => {
					"[event][id]" => "003478"
					"[rsa][message][id1]" => "003478"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003479
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Process status structure (PSS) found with open session descriptor (SDES). {SPID|PSPID} <fld1>, PSUID <fld2>, PCURDB <fld3>, range entry <fld4>, SDESP <fld5>, object ID  <fld6>. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld30>[^\s]*)[\s]+(?<fld31>[^\s]*)[\s]+(?<event_source>[^\s]*)[\s]+Warning:[\s]+Process[\s]+status[\s]+structure[\s]+\(PSS\)[\s]+found[\s]+with[\s]+open[\s]+session[\s]+descriptor[\s]+\(SDES\)\.[\s]+(SPID|PSPID)[\s]+(?<fld1>[^,]*),[\s]+PSUID[\s]+(?<fld2>[^,]*),[\s]+PCURDB[\s]+(?<fld3>[^,]*),[\s]+range[\s]+entry[\s]+(?<fld4>[^,]*),[\s]+SDESP[\s]+(?<fld5>[^,]*),[\s]+object[\s]+ID[\s]+(?<fld6>[^\.]*)\.[\s]+$" }
				id => "message-003479"
				add_field => {
					"[event][id]" => "003479"
					"[rsa][message][id1]" => "003479"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003480
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Request to start a full-text index population on table '<fld1>' is ignored because a population is currently active for this table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Request to start a full-text index population on table '%{fld1}' is ignored because a population is currently active for this table." }
				id => "message-003480"
				add_field => {
					"[event][id]" => "003480"
					"[rsa][message][id1]" => "003480"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003481
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Request to start a population in full-text catalog '<fld1>' ignored because a population is currently active for this full-text catalog. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Request to start a population in full-text catalog '%{fld1}' ignored because a population is currently active for this full-text catalog." }
				id => "message-003481"
				add_field => {
					"[event][id]" => "003481"
					"[rsa][message][id1]" => "003481"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003482
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Request to stop change tracking has deleted all changes tracked on table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Request to stop change tracking has deleted all changes tracked on table '%{fld1}'." }
				id => "message-003482"
				add_field => {
					"[event][id]" => "003482"
					"[rsa][message][id1]" => "003482"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003483
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Request to stop tracking changes on table '<fld1>' will not stop population currently in progress on the table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Request to stop tracking changes on table '%{fld1}' will not stop population currently in progress on the table." }
				id => "message-003483"
				add_field => {
					"[event][id]" => "003483"
					"[rsa][message][id1]" => "003483"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003484
		# line in RSA:  <fld30> <fld31> <event_source> Warning: syslanguages is missing. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: syslanguages is missing." }
				id => "message-003484"
				add_field => {
					"[event][id]" => "003484"
					"[rsa][message][id1]" => "003484"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003485
		# line in RSA:  <fld30> <fld31> <event_source> Warning: Table '<fld1>' does not have the option 'text in row' enabled and has full-text indexed columns that are of type image, text, or ntext. Full-text change tracking cannot track WRITETEXT or UPDATETEXT operations performed on these columns. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: Table '%{fld1}' does not have the option 'text in row' enabled and has full-text indexed columns that are of type image, text, or ntext. Full-text change tracking cannot track WRITETEXT or UPDATETEXT operations performed on these columns." }
				id => "message-003485"
				add_field => {
					"[event][id]" => "003485"
					"[rsa][message][id1]" => "003485"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003486
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The @new_owner_login_name parameter is not necessary when specifying a 'DELETE' action. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The @new_owner_login_name parameter is not necessary when specifying a 'DELETE' action." }
				id => "message-003486"
				add_field => {
					"[event][id]" => "003486"
					"[rsa][message][id1]" => "003486"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003487
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The join order has been enforced because a local join hint is used. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The join order has been enforced because a local join hint is used." }
				id => "message-003487"
				add_field => {
					"[event][id]" => "003487"
					"[rsa][message][id1]" => "003487"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003488
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The log for database '<fld1>' has been rebuilt. Transactional consistency has been lost. DBCC CHECKDB should be run to validate physical consistency. Database options will have to be reset, and extra log files may need to be deleted. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The log for database '%{fld1}' has been rebuilt. Transactional consistency has been lost. DBCC CHECKDB should be run to validate physical consistency. Database options will have to be reset, and extra log files may need to be deleted." }
				id => "message-003488"
				add_field => {
					"[event][id]" => "003488"
					"[rsa][message][id1]" => "003488"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003489
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The optimizer cannot use the index because the group-by list in the view forms a key and is redundant. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The optimizer cannot use the index because the group-by list in the view forms a key and is redundant." }
				id => "message-003489"
				add_field => {
					"[event][id]" => "003489"
					"[rsa][message][id1]" => "003489"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003490
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The optimizer cannot use the index because the select list of the view contains a non-aggregate expression. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The optimizer cannot use the index because the select list of the view contains a non-aggregate expression." }
				id => "message-003490"
				add_field => {
					"[event][id]" => "003490"
					"[rsa][message][id1]" => "003490"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003491
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The outcome of transaction <fld1>_XID, named '<fld2>' in database '<fld3>' (database ID <fld4>), could not be determined because the coordinating database (database ID <fld5>) could not be opened. The transaction was assumed to be committed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The outcome of transaction %{fld1}_XID, named '%{fld2}' in database '%{fld3}' (database ID %{fld4}), could not be determined because the coordinating database (database ID %{fld5}) could not be opened. The transaction was assumed to be committed." }
				id => "message-003491"
				add_field => {
					"[event][id]" => "003491"
					"[rsa][message][id1]" => "003491"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003492
		# line in RSA:  <fld30> <fld31> <event_source> Warning: the publication uses a feature that is only supported only by Ssubscribers running '<fld1>' or higher. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: the publication uses a feature that is only supported only by Ssubscribers running '%{fld1}' or higher." }
				id => "message-003492"
				add_field => {
					"[event][id]" => "003492"
					"[rsa][message][id1]" => "003492"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003493
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The query processor could not produce a query plan from the optimizer because the total length of all the columns in the GROUP BY or ORDER BY clause exceeds 8000 bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The query processor could not produce a query plan from the optimizer because the total length of all the columns in the GROUP BY or ORDER BY clause exceeds 8000 bytes." }
				id => "message-003493"
				add_field => {
					"[event][id]" => "003493"
					"[rsa][message][id1]" => "003493"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003495
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The query processor is unable to produce a plan because the table '<fld1>' is marked OFFLINE. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The query processor is unable to produce a plan because the table '%{fld1}' is marked OFFLINE." }
				id => "message-003495"
				add_field => {
					"[event][id]" => "003495"
					"[rsa][message][id1]" => "003495"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003496
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The server name given is not the current MSX server ('<fld1>'). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The server name given is not the current MSX server ('%{fld1}')." }
				id => "message-003496"
				add_field => {
					"[event][id]" => "003496"
					"[rsa][message][id1]" => "003496"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003497
		# line in RSA:  <fld30> <fld31> <event_source> Warning: The table '<fld1>' has been created but its maximum row size (<fld2>) exceeds the maximum number of bytes per row (<fld3>). INSERT or UPDATE of a row in this table will fail if the resulting row length exceeds <fld4> bytes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: The table '%{fld1}' has been created but its maximum row size (%{fld2}) exceeds the maximum number of bytes per row (%{fld3}). INSERT or UPDATE of a row in this table will fail if the resulting row length exceeds %{fld4} bytes." }
				id => "message-003497"
				add_field => {
					"[event][id]" => "003497"
					"[rsa][message][id1]" => "003497"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003498
		# line in RSA:  <fld30> <fld31> <event_source> Warning: This change will not be downloaded by the target server(s) until an <fld1> for the job is posted using <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: This change will not be downloaded by the target server(s) until an %{fld1} for the job is posted using %{fld2}." }
				id => "message-003498"
				add_field => {
					"[event][id]" => "003498"
					"[rsa][message][id1]" => "003498"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003499
		# line in RSA:  <fld30> <fld31> <event_source> Warning: This operation did not succeed on one or more tables. A table may be inactive, or a full-text index population may already be active. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: This operation did not succeed on one or more tables. A table may be inactive, or a full-text index population may already be active." }
				id => "message-003499"
				add_field => {
					"[event][id]" => "003499"
					"[rsa][message][id1]" => "003499"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003500
		# line in RSA:  <fld30> <fld31> <event_source> Warning: You must recover this database prior to access. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Warning: You must recover this database prior to access." }
				id => "message-003500"
				add_field => {
					"[event][id]" => "003500"
					"[rsa][message][id1]" => "003500"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3571
	# line in RSA:  <fld30> <fld31> <event_source> WARNING: EC <fld1>, <fld2>
	else if [logstash][msgparser][id] == "msgParserId3571" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} WARNING: EC %{fld1}, %{fld2}" }
			id => "msgParserId3571"
			add_field => {
				"result" => "WARNING"
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3572
	# line in RSA:  <fld30> <fld31> <event_source> When an action of 'REASSIGN' is specified, the New Login parameter must also be supplied. 
	else if [logstash][msgparser][id] == "msgParserId3572" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} When an action of 'REASSIGN' is specified, the New Login parameter must also be supplied." }
			id => "msgParserId3572"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Windows" {
		# MESSAGE 003502
		# line in RSA:  <fld30> <fld31> <event_source> Windows Authentication is not supported by the server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Windows Authentication is not supported by the server." }
				id => "message-003502"
				add_field => {
					"[event][id]" => "003502"
					"[rsa][message][id1]" => "003502"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003503
		# line in RSA:  <fld30> <fld31> <event_source> Windows NT Error encountered, <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Windows NT Error encountered, %{fld1}." }
				id => "message-003503"
				add_field => {
					"[event][id]" => "003503"
					"[rsa][message][id1]" => "003503"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003504
		# line in RSA:  <fld30> <fld31> <event_source> Windows NT user '<fld1>' does not have server access. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Windows NT user '%{fld1}' does not have server access." }
				id => "message-003504"
				add_field => {
					"[event][id]" => "003504"
					"[rsa][message][id1]" => "003504"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003505
		# line in RSA:  <fld30> <fld31> <event_source> Windows NT user or group '<fld1>' not found. Check the name again. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Windows NT user or group '%{fld1}' not found. Check the name again." }
				id => "message-003505"
				add_field => {
					"[event][id]" => "003505"
					"[rsa][message][id1]" => "003505"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003506
		# line in RSA:  <fld30> <fld31> <event_source> Windows Synchronization Manager profile 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} Windows Synchronization Manager profile" }
				id => "message-003506"
				add_field => {
					"[event][id]" => "003506"
					"[rsa][message][id1]" => "003506"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "WITH" {
		# MESSAGE 003507
		# line in RSA:  <fld30> <fld31> <event_source> WITH SNAPSHOT can be used only if the backup set was created WITH SNAPSHOT. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} WITH SNAPSHOT can be used only if the backup set was created WITH SNAPSHOT." }
				id => "message-003507"
				add_field => {
					"[event][id]" => "003507"
					"[rsa][message][id1]" => "003507"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003508
		# line in RSA:  <fld30> <fld31> <event_source> WITH SNAPSHOT must be used with only one virtual device. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} WITH SNAPSHOT must be used with only one virtual device." }
				id => "message-003508"
				add_field => {
					"[event][id]" => "003508"
					"[rsa][message][id1]" => "003508"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3580
	# line in RSA:  <fld30> <fld31> <event_source> Working Set size set to <fld1> kilobytes. 
	else if [logstash][msgparser][id] == "msgParserId3580" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Working Set size set to %{fld1} kilobytes." }
			id => "msgParserId3580"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3581
	# line in RSA:  <fld30> <fld31> <event_source> Write on '<fld1>' failed, status = <fld2>. See the SQL Server error log for more details. 
	else if [logstash][msgparser][id] == "msgParserId3581" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Write on '%{fld1}' failed, status = %{fld2}. See the SQL Server error log for more details." }
			id => "msgParserId3581"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "XML" {
		# MESSAGE 003510
		# line in RSA:  <fld30> <fld31> <event_source> XML attribute or element cannot be created for column '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML attribute or element cannot be created for column '%{fld1}'." }
				id => "message-003510"
				add_field => {
					"[event][id]" => "003510"
					"[rsa][message][id1]" => "003510"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003511
		# line in RSA:  <fld30> <fld31> <event_source> XML document could not be created because server memory is low. Use sp_xml_removedocument to release XML documents. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML document could not be created because server memory is low. Use sp_xml_removedocument to release XML documents." }
				id => "message-003511"
				add_field => {
					"[event][id]" => "003511"
					"[rsa][message][id1]" => "003511"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003512
		# line in RSA:  <fld30> <fld31> <event_source> XML encoding or decoding error occurred with object name '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML encoding or decoding error occurred with object name '%{fld1}'." }
				id => "message-003512"
				add_field => {
					"[event][id]" => "003512"
					"[rsa][message][id1]" => "003512"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003513
		# line in RSA:  <fld30> <fld31> <event_source> XML error: <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML error: %{fld1}" }
				id => "message-003513"
				add_field => {
					"[event][id]" => "003513"
					"[rsa][message][id1]" => "003513"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003514
		# line in RSA:  <fld30> <fld31> <event_source> XML node of type <fld1> named '<fld2>' cannot be created . 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML node of type %{fld1} named '%{fld2}' cannot be created ." }
				id => "message-003514"
				add_field => {
					"[event][id]" => "003514"
					"[rsa][message][id1]" => "003514"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003515
		# line in RSA:  <fld30> <fld31> <event_source> XML parser returned the error code <fld1> from line number <fld2>, source '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML parser returned the error code %{fld1} from line number %{fld2}, source '%{fld3}'." }
				id => "message-003515"
				add_field => {
					"[event][id]" => "003515"
					"[rsa][message][id1]" => "003515"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003516
		# line in RSA:  <fld30> <fld31> <event_source> XML parsing error: <fld1> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML parsing error: %{fld1}" }
				id => "message-003516"
				add_field => {
					"[event][id]" => "003516"
					"[rsa][message][id1]" => "003516"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003517
		# line in RSA:  <fld30> <fld31> <event_source> XML stored procedures are not supported in fibers mode. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML stored procedures are not supported in fibers mode." }
				id => "message-003517"
				add_field => {
					"[event][id]" => "003517"
					"[rsa][message][id1]" => "003517"
					"[event][categoryid]" => "1702030000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003518
		# line in RSA:  <fld30> <fld31> <event_source> XML tag ID <fld1> could not be added. The server memory resources may be low. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML tag ID %{fld1} could not be added. The server memory resources may be low." }
				id => "message-003518"
				add_field => {
					"[event][id]" => "003518"
					"[rsa][message][id1]" => "003518"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003519
		# line in RSA:  <fld30> <fld31> <event_source> XML tag ID <fld1> that was originally declared as '<fld2>' is being redeclared as '<fld3>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XML tag ID %{fld1} that was originally declared as '%{fld2}' is being redeclared as '%{fld3}'." }
				id => "message-003519"
				add_field => {
					"[event][id]" => "003519"
					"[rsa][message][id1]" => "003519"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3592
	# line in RSA:  <fld30> <fld31> <event_source> XMLDATA does not support namespace elements or attributes such as '<fld1>'. Run the SELECT FOR XML statement without XMLDATA or remove the namespace prefix declaration. 
	else if [logstash][msgparser][id] == "msgParserId3592" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} XMLDATA does not support namespace elements or attributes such as '%{fld1}'. Run the SELECT FOR XML statement without XMLDATA or remove the namespace prefix declaration." }
			id => "msgParserId3592"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "XMLTEXT" {
		# MESSAGE 003521
		# line in RSA:  <fld30> <fld31> <event_source> XMLTEXT column '<fld1>' must be of a string data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XMLTEXT column '%{fld1}' must be of a string data type." }
				id => "message-003521"
				add_field => {
					"[event][id]" => "003521"
					"[rsa][message][id1]" => "003521"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003522
		# line in RSA:  <fld30> <fld31> <event_source> XMLTEXT field '<fld1>' contains an invalid XML document. Check the root tag and its attributes. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} XMLTEXT field '%{fld1}' contains an invalid XML document. Check the root tag and its attributes." }
				id => "message-003522"
				add_field => {
					"[event][id]" => "003522"
					"[rsa][message][id1]" => "003522"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "You" {
		# MESSAGE 003523
		# line in RSA:  <fld30> <fld31> <event_source> You are not allowed to truncate the system table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You are not allowed to truncate the system table '%{fld1}'." }
				id => "message-003523"
				add_field => {
					"[event][id]" => "003523"
					"[rsa][message][id1]" => "003523"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003524
		# line in RSA:  <fld30> <fld31> <event_source> You are not authorized to perform this operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You are not authorized to perform this operation." }
				id => "message-003524"
				add_field => {
					"[event][id]" => "003524"
					"[rsa][message][id1]" => "003524"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003525
		# line in RSA:  <fld30> <fld31> <event_source> You are not the owner specified for the object '<fld1>' in this statement (CREATE, ALTER, TRUNCATE, UPDATE STATISTICS or BULK INSERT). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You are not the owner specified for the object '%{fld1}' in this statement (CREATE, ALTER, TRUNCATE, UPDATE STATISTICS or BULK INSERT)." }
				id => "message-003525"
				add_field => {
					"[event][id]" => "003525"
					"[rsa][message][id1]" => "003525"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003526
		# line in RSA:  <fld30> <fld31> <event_source> You attempted to acquire a transactional application lock without an active transaction. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You attempted to acquire a transactional application lock without an active transaction." }
				id => "message-003526"
				add_field => {
					"[event][id]" => "003526"
					"[rsa][message][id1]" => "003526"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003527
		# line in RSA:  <fld30> <fld31> <event_source> You can have only 1,024 in-row text pointers in one transaction 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You can have only 1,024 in-row text pointers in one transaction" }
				id => "message-003527"
				add_field => {
					"[event][id]" => "003527"
					"[rsa][message][id1]" => "003527"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003528
		# line in RSA:  <fld30> <fld31> <event_source> You can only grant or revoke permissions on objects in the current database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You can only grant or revoke permissions on objects in the current database." }
				id => "message-003528"
				add_field => {
					"[event][id]" => "003528"
					"[rsa][message][id1]" => "003528"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003529
		# line in RSA:  <fld30> <fld31> <event_source> You can only perform a full backup of the master database. Use BACKUP DATABASE to back up the entire master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You can only perform a full backup of the master database. Use BACKUP DATABASE to back up the entire master database." }
				id => "message-003529"
				add_field => {
					"[event][id]" => "003529"
					"[rsa][message][id1]" => "003529"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003530
		# line in RSA:  <fld30> <fld31> <event_source> You can only specify the READPAST lock in the READ COMMITTED or REPEATABLE READ isolation levels. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You can only specify the READPAST lock in the READ COMMITTED or REPEATABLE READ isolation levels." }
				id => "message-003530"
				add_field => {
					"[event][id]" => "003530"
					"[rsa][message][id1]" => "003530"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003531
		# line in RSA:  <fld30> <fld31> <event_source> You cannot change 'ins_cmd','upd_cmd', or 'del_cmd' article properties because the publication allows DTS or queued updating option. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot change 'ins_cmd','upd_cmd', or 'del_cmd' article properties because the publication allows DTS or queued updating option." }
				id => "message-003531"
				add_field => {
					"[event][id]" => "003531"
					"[rsa][message][id1]" => "003531"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003532
		# line in RSA:  <fld30> <fld31> <event_source> You cannot push an anonymous subscription. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot push an anonymous subscription." }
				id => "message-003532"
				add_field => {
					"[event][id]" => "003532"
					"[rsa][message][id1]" => "003532"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003533
		# line in RSA:  <fld30> <fld31> <event_source> You cannot set network name on server '<fld1>' because it is not a linked SQL Server. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot set network name on server '%{fld1}' because it is not a linked SQL Server." }
				id => "message-003533"
				add_field => {
					"[event][id]" => "003533"
					"[rsa][message][id1]" => "003533"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003534
		# line in RSA:  <fld30> <fld31> <event_source> You cannot set option 'text in row' for table <fld1>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot set option 'text in row' for table %{fld1}." }
				id => "message-003534"
				add_field => {
					"[event][id]" => "003534"
					"[rsa][message][id1]" => "003534"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003535
		# line in RSA:  <fld30> <fld31> <event_source> You cannot specify a length for user data types based on sysname. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot specify a length for user data types based on sysname." }
				id => "message-003535"
				add_field => {
					"[event][id]" => "003535"
					"[rsa][message][id1]" => "003535"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003536
		# line in RSA:  <fld30> <fld31> <event_source> You cannot specify a provider or any properties for product '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot specify a provider or any properties for product '%{fld1}'." }
				id => "message-003536"
				add_field => {
					"[event][id]" => "003536"
					"[rsa][message][id1]" => "003536"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003537
		# line in RSA:  <fld30> <fld31> <event_source> You cannot specify scroll locking on a cursor that contains a remote table. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot specify scroll locking on a cursor that contains a remote table." }
				id => "message-003537"
				add_field => {
					"[event][id]" => "003537"
					"[rsa][message][id1]" => "003537"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003538
		# line in RSA:  <fld30> <fld31> <event_source> You cannot update a blob with a read-only text pointer 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot update a blob with a read-only text pointer" }
				id => "message-003538"
				add_field => {
					"[event][id]" => "003538"
					"[rsa][message][id1]" => "003538"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003539
		# line in RSA:  <fld30> <fld31> <event_source> You cannot use a text pointer for a table with option 'text in row' set to ON. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot use a text pointer for a table with option 'text in row' set to ON." }
				id => "message-003539"
				add_field => {
					"[event][id]" => "003539"
					"[rsa][message][id1]" => "003539"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003540
		# line in RSA:  <fld30> <fld31> <event_source> You cannot validate article '<fld1>' unless you have 'SELECT ALL' permission on table '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You cannot validate article '%{fld1}' unless you have 'SELECT ALL' permission on table '%{fld2}'." }
				id => "message-003540"
				add_field => {
					"[event][id]" => "003540"
					"[rsa][message][id1]" => "003540"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003541
		# line in RSA:  <fld30> <fld31> <event_source> You do not have permission to run DISK statements. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not have permission to run DISK statements." }
				id => "message-003541"
				add_field => {
					"[event][id]" => "003541"
					"[rsa][message][id1]" => "003541"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003542
		# line in RSA:  <fld30> <fld31> <event_source> You do not have permission to run the RECONFIGURE statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not have permission to run the RECONFIGURE statement." }
				id => "message-003542"
				add_field => {
					"[event][id]" => "003542"
					"[rsa][message][id1]" => "003542"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003543
		# line in RSA:  <fld30> <fld31> <event_source> You do not have permission to use <fld1> in the AS clause. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not have permission to use %{fld1} in the AS clause." }
				id => "message-003543"
				add_field => {
					"[event][id]" => "003543"
					"[rsa][message][id1]" => "003543"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003544
		# line in RSA:  <fld30> <fld31> <event_source> You do not have permission to use the BULK INSERT statement. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not have permission to use the BULK INSERT statement." }
				id => "message-003544"
				add_field => {
					"[event][id]" => "003544"
					"[rsa][message][id1]" => "003544"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003545
		# line in RSA:  <fld30> <fld31> <event_source> You do not have permissions to run agents for push subscriptions. Make sure that you specify the agent parameter 'SubscriptionType'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not have permissions to run agents for push subscriptions. Make sure that you specify the agent parameter 'SubscriptionType'." }
				id => "message-003545"
				add_field => {
					"[event][id]" => "003545"
					"[rsa][message][id1]" => "003545"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003546
		# line in RSA:  <fld30> <fld31> <event_source> You do not have sufficient permission to run this command. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not have sufficient permission to run this command." }
				id => "message-003546"
				add_field => {
					"[event][id]" => "003546"
					"[rsa][message][id1]" => "003546"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003547
		# line in RSA:  <fld30> <fld31> <event_source> You do not have the required permissions to complete the operation. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not have the required permissions to complete the operation." }
				id => "message-003547"
				add_field => {
					"[event][id]" => "003547"
					"[rsa][message][id1]" => "003547"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003548
		# line in RSA:  <fld30> <fld31> <event_source> You do not own a data type with that name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not own a data type with that name." }
				id => "message-003548"
				add_field => {
					"[event][id]" => "003548"
					"[rsa][message][id1]" => "003548"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003549
		# line in RSA:  <fld30> <fld31> <event_source> You do not own a table named '<fld1>' that has a column named '<fld2>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You do not own a table named '%{fld1}' that has a column named '%{fld2}'." }
				id => "message-003549"
				add_field => {
					"[event][id]" => "003549"
					"[rsa][message][id1]" => "003549"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003550
		# line in RSA:  <fld30> <fld31> <event_source> You have reached the maximum number of cursors allowed. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You have reached the maximum number of cursors allowed." }
				id => "message-003550"
				add_field => {
					"[event][id]" => "003550"
					"[rsa][message][id1]" => "003550"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003551
		# line in RSA:  <fld30> <fld31> <event_source> You have updated the distribution database property '<fld1>' successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You have updated the distribution database property '%{fld1}' successfully." }
				id => "message-003551"
				add_field => {
					"[event][id]" => "003551"
					"[rsa][message][id1]" => "003551"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003552
		# line in RSA:  <fld30> <fld31> <event_source> You have updated the Publisher property '<fld1>' successfully. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You have updated the Publisher property '%{fld1}' successfully." }
				id => "message-003552"
				add_field => {
					"[event][id]" => "003552"
					"[rsa][message][id1]" => "003552"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003553
		# line in RSA:  <fld30> <fld31> <event_source> You must add the us_english version of this message before you can add the '<fld1>' version. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must add the us_english version of this message before you can add the '%{fld1}' version." }
				id => "message-003553"
				add_field => {
					"[event][id]" => "003553"
					"[rsa][message][id1]" => "003553"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003554
		# line in RSA:  <fld30> <fld31> <event_source> You must create system table '<fld1>' in the master database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must create system table '%{fld1}' in the master database." }
				id => "message-003554"
				add_field => {
					"[event][id]" => "003554"
					"[rsa][message][id1]" => "003554"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003555
		# line in RSA:  <fld30> <fld31> <event_source> You must deactivate full-text search on table '<fld1>' before adding columns to or removing columns from the full-text index. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must deactivate full-text search on table '%{fld1}' before adding columns to or removing columns from the full-text index." }
				id => "message-003555"
				add_field => {
					"[event][id]" => "003555"
					"[rsa][message][id1]" => "003555"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003556
		# line in RSA:  <fld30> <fld31> <event_source> You must first create a full-text index on table '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must first create a full-text index on table '%{fld1}'." }
				id => "message-003556"
				add_field => {
					"[event][id]" => "003556"
					"[rsa][message][id1]" => "003556"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003557
		# line in RSA:  <fld30> <fld31> <event_source> You must first drop all existing merge publications to add an anonymous or local subscription to database '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must first drop all existing merge publications to add an anonymous or local subscription to database '%{fld1}'." }
				id => "message-003557"
				add_field => {
					"[event][id]" => "003557"
					"[rsa][message][id1]" => "003557"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003558
		# line in RSA:  <fld30> <fld31> <event_source> You must have CREATE DATABASE permission to attach a subscription database. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must have CREATE DATABASE permission to attach a subscription database." }
				id => "message-003558"
				add_field => {
					"[event][id]" => "003558"
					"[rsa][message][id1]" => "003558"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003559
		# line in RSA:  <fld30> <fld31> <event_source> You must provide either @job_id or @job_name (and, optionally, @schedule_name), or @schedule_id. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must provide either @job_id or @job_name (and, optionally, @schedule_name), or @schedule_id." }
				id => "message-003559"
				add_field => {
					"[event][id]" => "003559"
					"[rsa][message][id1]" => "003559"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003560
		# line in RSA:  <fld30> <fld31> <event_source> You must set database '<fld1>' to single user mode with sp_dboption before fixing indexes on system tables. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must set database '%{fld1}' to single user mode with sp_dboption before fixing indexes on system tables." }
				id => "message-003560"
				add_field => {
					"[event][id]" => "003560"
					"[rsa][message][id1]" => "003560"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003561
		# line in RSA:  <fld30> <fld31> <event_source> You must specify 'REPLACE' to overwrite an existing message. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must specify 'REPLACE' to overwrite an existing message." }
				id => "message-003561"
				add_field => {
					"[event][id]" => "003561"
					"[rsa][message][id1]" => "003561"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003562
		# line in RSA:  <fld30> <fld31> <event_source> You must specify a length with this physical data type. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must specify a length with this physical data type." }
				id => "message-003562"
				add_field => {
					"[event][id]" => "003562"
					"[rsa][message][id1]" => "003562"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003563
		# line in RSA:  <fld30> <fld31> <event_source> You must specify a provider name for unknown product '<fld1>'. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must specify a provider name for unknown product '%{fld1}'." }
				id => "message-003563"
				add_field => {
					"[event][id]" => "003563"
					"[rsa][message][id1]" => "003563"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003564
		# line in RSA:  <fld30> <fld31> <event_source> You must specify a provider name with this set of properties. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must specify a provider name with this set of properties." }
				id => "message-003564"
				add_field => {
					"[event][id]" => "003564"
					"[rsa][message][id1]" => "003564"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003565
		# line in RSA:  <fld30> <fld31> <event_source> You must specify the @rolename parameter. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must specify the @rolename parameter." }
				id => "message-003565"
				add_field => {
					"[event][id]" => "003565"
					"[rsa][message][id1]" => "003565"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003566
		# line in RSA:  <fld30> <fld31> <event_source> You must supply a publication name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must supply a publication name." }
				id => "message-003566"
				add_field => {
					"[event][id]" => "003566"
					"[rsa][message][id1]" => "003566"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003567
		# line in RSA:  <fld30> <fld31> <event_source> You must supply an article name. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must supply an article name." }
				id => "message-003567"
				add_field => {
					"[event][id]" => "003567"
					"[rsa][message][id1]" => "003567"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003568
		# line in RSA:  <fld30> <fld31> <event_source> You must supply either a plan_name or a plan_id. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must supply either a plan_name or a plan_id." }
				id => "message-003568"
				add_field => {
					"[event][id]" => "003568"
					"[rsa][message][id1]" => "003568"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003569
		# line in RSA:  <fld30> <fld31> <event_source> You must supply parameters for the DISK <fld1> statement. Usage: <fld2>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must supply parameters for the DISK %{fld1} statement. Usage: %{fld2}." }
				id => "message-003569"
				add_field => {
					"[event][id]" => "003569"
					"[rsa][message][id1]" => "003569"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003570
		# line in RSA:  <fld30> <fld31> <event_source> You must upgrade the Subscriber to SQL Server 2000 to create updatable subscriptions to SQL Server 2000 Publishers. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must upgrade the Subscriber to SQL Server 2000 to create updatable subscriptions to SQL Server 2000 Publishers." }
				id => "message-003570"
				add_field => {
					"[event][id]" => "003570"
					"[rsa][message][id1]" => "003570"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003571
		# line in RSA:  <fld30> <fld31> <event_source> You must upgrade your client to version 6.5 of SQL-DMO and SQL Server Enterprise Manager to connect to this server. The upgraded versions will administer both SQL Server version 6.5 and 6.0 (if sqlole65.sql is run). 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must upgrade your client to version 6.5 of SQL-DMO and SQL Server Enterprise Manager to connect to this server. The upgraded versions will administer both SQL Server version 6.5 and 6.0 (if sqlole65.sql is run)." }
				id => "message-003571"
				add_field => {
					"[event][id]" => "003571"
					"[rsa][message][id1]" => "003571"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE 003572
		# line in RSA:  <fld30> <fld31> <event_source> You must use default values for @ins_cmd,  @upd_cmd,  and @del_cmd, and @status can be only 16 or 80 because the publication allows DTS. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld30} %{fld31} %{event_source} You must use default values for @ins_cmd,  @upd_cmd,  and @del_cmd, and @status can be only 16 or 80 because the publication allows DTS." }
				id => "message-003572"
				add_field => {
					"[event][id]" => "003572"
					"[rsa][message][id1]" => "003572"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3645
	# line in RSA:  <fld30> <fld31> <event_source> Your search generated too many results. Please perform a more specific search.  
	else if [logstash][msgparser][id] == "msgParserId3645" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Your search generated too many results. Please perform a more specific search." }
			id => "msgParserId3645"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3646
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId3646" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld1},%{event_description}" }
			id => "msgParserId3646"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3647
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld1>,{<event_description> [CLIENT: <saddr>]|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId3647" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld10>[^,]*),(?<fld11>[^\s]*)[\s]+(?<fld55>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld12>[^,]*),(?<fld1>[^,]*),((?<event_description>[^\s]*)[\s]+\[CLIENT:[\s]+(?<saddr>[^\]]*)\]|(?<event_description>.*))$" }
			id => "msgParserId3647"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3652
	# line in RSA:  <fld30> <fld31> Server <info>
	else if [logstash][msgparser][id] == "msgParserId3652" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} Server %{info}" }
			id => "msgParserId3652"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3654
	# line in RSA:  <fld30> <fld31> <event_source> Resource <info>
	else if [logstash][msgparser][id] == "msgParserId3654" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} Resource %{info}" }
			id => "msgParserId3654"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3663
	# line in RSA:  <fld30> <fld31> <event_source> AppDomain <fld1>
	else if [logstash][msgparser][id] == "msgParserId3663" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} AppDomain %{fld1}" }
			id => "msgParserId3663"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3664
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>$<fld1>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId3664" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source}$%{fld1},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},%{event_description}" }
			id => "msgParserId3664"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3665
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>$<fld1>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,Processed <fld16> pages for database '<fld13>', file '<filename>' on file <fld17>.
	else if [logstash][msgparser][id] == "msgParserId3665" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source}$%{fld1},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},Processed %{fld16} pages for database '%{fld13}', file '%{filename}' on file %{fld17}." }
			id => "msgParserId3665"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3666
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>$<fld1>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,Cannot open database "<fld13>" requested by the login. The login <fld15>.
	else if [logstash][msgparser][id] == "msgParserId3666" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source}$%{fld1},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},Cannot open database \"%{fld13}\" requested by the login. The login %{fld15}." }
			id => "msgParserId3666"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3667
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>$<fld1>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,<index> index(es)/statistic(s) have been updated, <fld14> did not require update.
	else if [logstash][msgparser][id] == "msgParserId3667" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source}$%{fld1},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},%{index} index(es)/statistic(s) have been updated, %{fld14} did not require update." }
			id => "msgParserId3667"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3668
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>$<fld1>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,<c_username>, <group>, or role '<domain>' already exists in the current database.
	else if [logstash][msgparser][id] == "msgParserId3668" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source}$%{fld1},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},%{c_username}, %{group}, or role '%{domain}' already exists in the current database." }
			id => "msgParserId3668"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3669
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>$<fld1>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,The server principal "<domain>" is not able to access the database "<fld13>" under the current security context.
	else if [logstash][msgparser][id] == "msgParserId3669" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source}$%{fld1},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},The server principal \"%{domain}\" is not able to access the database \"%{fld13}\" under the current security context." }
			id => "msgParserId3669"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3670
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>$<fld1>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,The target database, '<fld13>', is <event_description>
	else if [logstash][msgparser][id] == "msgParserId3670" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source}$%{fld1},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},The target database, '%{fld13}', is %{event_description}" }
			id => "msgParserId3670"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3671
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>$<fld1>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,No permission to access database '<fld13>'.
	else if [logstash][msgparser][id] == "msgParserId3671" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source}$%{fld1},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},No permission to access database '%{fld13}'." }
			id => "msgParserId3671"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3672
	# line in RSA: <event_log>,<fld10>,<fld11> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld12>,<fld22>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId3672" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld10},%{fld11} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld12},%{fld22},%{event_description}" }
			id => "msgParserId3672"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3673
	# line in RSA: <event_log>,<fld11>,<fld12> <fld55>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId3673" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{fld55},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId3673"
			add_field => {
				"vid" => "%{event_log}_%{id}_%{event_source}"
				"[logstash][fullDateTimeString]" => "%{fld55}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3674
	# line in RSA: <username> || <db_pid> ||{(null)|<fld50>}|| <obj_name> || <fld35> || <trans_id> || <domain> || <hostname> || <process_id> || <application> || <duration> ||{(null)|<fld51>}|| <lread> || <lwrite> || <cpu> || <permissions> || <severity> || <fld39> || <fld36> || <event_state> || <index> || <info> || <instance> || <obj_type> || <fld37> || <fld40> || <resultcode> || <fld41> || <fld42> ||<db_name> || <filename> || <owner> || <privilege> || <fld43> || <fld44> || <logon_id> || <fld45> || <fld46> || <statement> || {<binary> <fld>|<binary>} 
	else if [logstash][msgparser][id] == "msgParserId3674" {
		grok {
			match => { "message" => "^(?<username>[^\s]*)[\s]+\|\|[\s]+(?<db_pid>[^\s]*)[\s]+\|\|(\(null\)|(?<fld50>[^\|]*))\|\|[\s]+(?<obj_name>[^\s]*)[\s]+\|\|[\s]+(?<fld35>[^\s]*)[\s]+\|\|[\s]+(?<trans_id>[^\s]*)[\s]+\|\|[\s]+(?<domain>[^\s]*)[\s]+\|\|[\s]+(?<hostname>[^\s]*)[\s]+\|\|[\s]+(?<process_id>[^\s]*)[\s]+\|\|[\s]+(?<application>[^\s]*)[\s]+\|\|[\s]+(?<duration>[^\s]*)[\s]+\|\|(\(null\)|(?<fld51>[^\|]*))\|\|[\s]+(?<lread>[^\s]*)[\s]+\|\|[\s]+(?<lwrite>[^\s]*)[\s]+\|\|[\s]+(?<cpu>[^\s]*)[\s]+\|\|[\s]+(?<permissions>[^\s]*)[\s]+\|\|[\s]+(?<severity>[^\s]*)[\s]+\|\|[\s]+(?<fld39>[^\s]*)[\s]+\|\|[\s]+(?<fld36>[^\s]*)[\s]+\|\|[\s]+(?<event_state>[^\s]*)[\s]+\|\|[\s]+(?<index>[^\s]*)[\s]+\|\|[\s]+(?<info>[^\s]*)[\s]+\|\|[\s]+(?<instance>[^\s]*)[\s]+\|\|[\s]+(?<obj_type>[^\s]*)[\s]+\|\|[\s]+(?<fld37>[^\s]*)[\s]+\|\|[\s]+(?<fld40>[^\s]*)[\s]+\|\|[\s]+(?<resultcode>[^\s]*)[\s]+\|\|[\s]+(?<fld41>[^\s]*)[\s]+\|\|[\s]+(?<fld42>[^\s]*)[\s]+\|\|(?<db_name>[^\s]*)[\s]+\|\|[\s]+(?<filename>[^\s]*)[\s]+\|\|[\s]+(?<owner>[^\s]*)[\s]+\|\|[\s]+(?<privilege>[^\s]*)[\s]+\|\|[\s]+(?<fld43>[^\s]*)[\s]+\|\|[\s]+(?<fld44>[^\s]*)[\s]+\|\|[\s]+(?<logon_id>[^\s]*)[\s]+\|\|[\s]+(?<fld45>[^\s]*)[\s]+\|\|[\s]+(?<fld46>[^\s]*)[\s]+\|\|[\s]+(?<statement>[^\s]*)[\s]+\|\|[\s]+((?<binary>[^\s]*)[\s]+(?<fld>[^\s]*)|(?<binary>[^\s]*))[\s]+$" }
			id => "msgParserId3674"
			add_field => {
				"vid" => "%{p_msgid}"
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId3675
	# line in RSA: <fld30> <fld31> <event_source> <info>
	else if [logstash][msgparser][id] == "msgParserId3675" {
		dissect {
			mapping => { "message" => "%{fld30} %{fld31} %{event_source} %{info}" }
			id => "msgParserId3675"
			add_field => {
				"vid" => "%{p_msgid}"
				"[logstash][fullDateTimeString]" => "%{fld30} %{fld31}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId3676
	# line in RSA: <fld>
	else if [logstash][msgparser][id] == "msgParserId3676" {
		dissect {
			mapping => { "message" => "%{fld}" }
			id => "msgParserId3676"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[fld39]"
		destination => "[ec_activity]"
		dictionary => {
			"1" => "Create"
			"2" => "Modify"
			"3" => "Delete"
			"4" => "Dump"
			"5" => "Disable"
			"6" => "Enable"
			"11" => "Load"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[fld39]"
		destination => "[ec_activity]"
		dictionary => {
			"1" => "Add"
			"2" => "Delete"
			"3" => "Modify"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[fld39]"
		destination => "[ec_activity]"
		dictionary => {
			"1" => "Add"
			"2" => "Delete"
			"3" => "Disable"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[fld39]"
		destination => "[ec_activity]"
		dictionary => {
			"1" => "Stop"
			"2" => "Start"
			"3" => "Paused"
			"4" => "Continue"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[event_state]"
		destination => "[ec_outcome]"
		dictionary => {
			"0" => "Failure"
			"1" => "Success"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_mssqlmsg.json"
#			template_name => "mssql_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

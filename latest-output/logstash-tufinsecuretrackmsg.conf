# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "tufinsecuretrack"
			"[observer][name]" => "Tufin SecureTrack"
			"[observer][type]" => "Configuration Management"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <msgIdPart1> <msgIdPart2> <msgIdPart3>: revision <hfld4> on <hfld5>, last modified by <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<msgIdPart3>[^:]*):[\s]+revision[\s]+(?<hfld4>[^\s]*)[\s]+on[\s]+(?<hfld5>[^,]*),[\s]+last[\s]+modified[\s]+by[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <msgIdPart1> <msgIdPart2>: revision <hfld4> on <hfld5>, last modified by <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^:]*):[\s]+revision[\s]+(?<hfld4>[^\s]*)[\s]+on[\s]+(?<hfld5>[^,]*),[\s]+last[\s]+modified[\s]+by[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <msgIdPart1> <msgIdPart2>, Server <hfld1>(<hfld2>): <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^,]*),[\s]+Server[\s]+(?<message>(?<hfld1>[^\(]*)\((?<hfld2>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <msgIdPart1> <msgIdPart2> '<hfld1>' is violated by <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+'(?<message>(?<hfld1>[^']*)'[\s]+is[\s]+violated[\s]+by[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-tufinsecuretrackmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_description>: revision <id> on <hostname>, last modified by <username>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_description}: revision %{id} on %{hostname}, last modified by %{username}" }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Policy_Installed" {
		# MESSAGE Policy_Installed:01
		# line in RSA: <event_description>: revision <id> on <hostname>; revision ticket ids: <operation_id>, last modified by <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}: revision %{id} on %{hostname}; revision ticket ids: %{operation_id}, last modified by %{username}" }
				id => "message-Policy_Installed:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
					"[event][id]" => "Policy_Installed:01"
					"[rsa][message][id1]" => "Policy_Installed:01"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Policy_Installed:02
		# line in RSA: <event_description>: revision <id> on <hostname>, last modified by <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}: revision %{id} on %{hostname}, last modified by %{username}" }
				id => "message-Policy_Installed:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
					"[event][id]" => "Policy_Installed:02"
					"[rsa][message][id1]" => "Policy_Installed:02"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Tufin_SecureTrack" {
		# MESSAGE Tufin_SecureTrack:01
		# line in RSA: <fld1>(<fld4>): <hostname> <hostip> (<fld6>): <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}(%{fld4}): %{hostname} %{hostip} (%{fld6}): %{event_description}" }
				id => "message-Tufin_SecureTrack:01"
				add_field => {
					"[event][id]" => "Tufin_SecureTrack:01"
					"[rsa][message][id1]" => "Tufin_SecureTrack:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Tufin_SecureTrack:02
		# line in RSA: <fld1>(<fld4>): <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}(%{fld4}): %{event_description}" }
				id => "message-Tufin_SecureTrack:02"
				add_field => {
					"[event][id]" => "Tufin_SecureTrack:02"
					"[rsa][message][id1]" => "Tufin_SecureTrack:02"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: Basic Policy Checks' is violated by revision '<fld1>', for policy package '<policyname>', device '<fld3>'. Changed by '<username>'.
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "Basic Policy Checks' is violated by revision '%{fld1}', for policy package '%{policyname}', device '%{fld3}'. Changed by '%{username}'." }
			id => "msgParserId4"
			add_field => {
				"event_description" => "Basic Policy Checks violated"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-tufinsecuretrackmsg.json"
#			template_name => "tufinsecuretrack_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

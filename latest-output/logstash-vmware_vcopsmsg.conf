# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "vmware_vcops"
			"[observer][name]" => "VMware vRealize Operations Manager"
			"[observer][type]" => "Virtualization"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %VMWARE_VCOPS <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%VMWARE_VCOPS %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "VMWARE_VCOPS"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hdate> <htime>,<hfld1> - UserId : <hfld2>, UserName :<fld3>,<!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^,]*),(?<hfld1>[^\s]*)[\s]+\-[\s]+UserId[\s]+:[\s]+(?<hfld2>[^,]*),[\s]+UserName[\s]+:(?<fld3>[^,]*),(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "VMWARE_VCOPS_TAGVAL"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-vmware_vcopsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_source>^<vsys>^<obj_name>^<fld2>^<severity>^<id>^<info>^<fld3>^<fld6>^<event_type>^<obj_type>^<url>^<event_description>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_source}^%{vsys}^%{obj_name}^%{fld2}^%{severity}^%{id}^%{info}^%{fld3}^%{fld6}^%{event_type}^%{obj_type}^%{url}^%{event_description}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	else if [logstash][msgparser][id] == "VMWARE_VCOPS_TAGVAL" {
		# MESSAGE VMWARE_VCOPS:Login
		# line in RSA: <fld1> <fld2>,<fld3> - UserId : <uid>, UserName : <username>, AuthSource : <fld4>, Session : <sessionid>, UserAction : LOGIN,  - <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} - UserId : %{uid}, UserName : %{username}, AuthSource : %{fld4}, Session : %{sessionid}, UserAction : LOGIN,  - %{event_description}" }
				id => "message-VMWARE_VCOPS:Login"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
					"[event][id]" => "VMWARE_VCOPS:Login"
					"[rsa][message][id1]" => "VMWARE_VCOPS:Login"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd HH:mm:ss" ] }
			}
		}
		# MESSAGE VMWARE_VCOPS:Logout
		# line in RSA: <fld1> <fld2>,<fld3> - UserId : <uid>, UserName : <username>, AuthSource : <fld4>, Session : <sessionid>, UserAction : LOGOUT,  - <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} - UserId : %{uid}, UserName : %{username}, AuthSource : %{fld4}, Session : %{sessionid}, UserAction : LOGOUT,  - %{event_description}" }
				id => "message-VMWARE_VCOPS:Logout"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
					"[event][id]" => "VMWARE_VCOPS:Logout"
					"[rsa][message][id1]" => "VMWARE_VCOPS:Logout"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd HH:mm:ss" ] }
			}
		}
		# MESSAGE VMWARE_VCOPS:Syslog
		# line in RSA: <fld1> <fld2>,<fld3> - UserId : <uid>, UserName : <username>, AuthSource : <fld4>, Session : <sessionid>, UserAction : <service>,  - <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2},%{fld3} - UserId : %{uid}, UserName : %{username}, AuthSource : %{fld4}, Session : %{sessionid}, UserAction : %{service},  - %{event_description}" }
				id => "message-VMWARE_VCOPS:Syslog"
				add_field => {
					"[event][id]" => "VMWARE_VCOPS:Syslog"
					"[rsa][message][id1]" => "VMWARE_VCOPS:Syslog"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-MM-dd HH:mm:ss" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-vmware_vcopsmsg.json"
#			template_name => "vmware_vcops_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

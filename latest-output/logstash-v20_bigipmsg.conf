# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "bigip"
			"[observer][name]" => "F5 BigIP"
			"[observer][type]" => "Switch"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0010
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hfld1> <hfld2>[<pid>]: <hfld3>:<hfld4>: <msgIdPart1> <msgIdPart2>:<!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<hfld3>[^:]*):(?<hfld4>[^:]*):[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^:]*):(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0013
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hfld1> <hfld2>[<pid>]: <hfld3>:<hfld4>: <hfld5> <msgIdPart1> <msgIdPart2> <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<hfld3>[^:]*):(?<hfld4>[^:]*):[\s]+(?<hfld5>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0013"
			add_field => {
				"[rsa][header][id]" => "0013"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0014
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hlevel> <hfld2>[<pid>]: <messageid> <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hlevel>[^\s]*)[\s]+(?<hfld2>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0014"
			add_field => {
				"[rsa][header][id]" => "0014"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hfld1> <messageid>(<hsystem>)[<pid>]: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<messageid>[^\(]*)\((?<hsystem>[^\)]*)\)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <messageid>(<hsystem>)[<pid>]: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<messageid>[^\(]*)\((?<hsystem>[^\)]*)\)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0016
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hfld2> <hfld4>[<pid>]: Rule { <rulename> <<<hfld3>>: | <rulename>: } <messageid><!payload>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0008
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hfld1> /<hfld2>/<hfld3>/<messageid>[<pid>]: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+/(?<hfld2>[^/]*)/(?<hfld3>[^/]*)/(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0018
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hlevel> <hfld4>[<hfld7>]: <hfld5>:<hfld6>: ICSA: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hlevel>[^\s]*)[\s]+(?<hfld4>[^\[]*)\[(?<hfld7>[^\]]*)\]:[\s]+(?<hfld5>[^:]*):(?<hfld6>[^:]*):[\s]+ICSA:[\s]+(?<payload>.*))$" }
			id => "header-0018"
			add_field => {
				"[rsa][header][id]" => "0018"
				"[rsa][message][id2]" => "ICSA_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hfld1> <messageid>[<pid>]: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <messageid>[<pid>]: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hlevel> <messageid>: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hlevel>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <messageid>: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <messageid> <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <hmonth> <hdate> <htime> <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0015
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hfld2>[<pid>]: <messageid> <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hfld2>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0015"
			add_field => {
				"[rsa][header][id]" => "0015"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <hfld1>: <hfld2> <messageid> <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<hfld1>[^:]*):[\s]+(?<hfld2>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: <hmonth> <hdate> <htime> <hhost> <msgIdPart1> <hfld1> <msgIdPart2>: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<msgIdPart2>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0017
	# line in RSA: <hmonth> <hdate> <htime> <hhost> -<messageid>[<pid>]: <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+\-(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0017"
			add_field => {
				"[rsa][header][id]" => "0017"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_bigipmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: <event_description>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: %{event_description}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "anacron" {
		# MESSAGE 000004
		# line in RSA: <hostname> <agent>[<process_id>]: Updated timestamp for job `<application>' to <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Updated timestamp for job `%{application}' to %{info}" }
				id => "message-000004"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"disposition" => "Updated"
				"event_description" => "Updated timestamp for job"
					"[event][id]" => "000004"
					"[rsa][message][id1]" => "000004"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000295
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: Will run | <hostname> <agent>[<process_id>]: Will run } job <application> in <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Will[\s]+run[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Will[\s]+run[\s]+)[\s]+job[\s]+(?<application>[^\s]*)[\s]+in[\s]+(?<fld1>.*)$" }
				id => "message-000295"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "000295"
					"[rsa][message][id1]" => "000295"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000295_01
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]:| <hostname> <agent>[<process_id>]:} Job `<application>' started
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:)[\s]+Job[\s]+`(?<application>[^']*)'[\s]+started$" }
				id => "message-000295_01"
				add_field => {
					"[event][id]" => "000295_01"
					"[rsa][message][id1]" => "000295_01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000305
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000305"
				add_field => {
					"[event][id]" => "000305"
					"[rsa][message][id1]" => "000305"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000325
		# line in RSA:  { <hostname> <severity> <agent>: | <hostname> <agent>: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000325"
				add_field => {
					"[event][id]" => "000325"
					"[rsa][message][id1]" => "000325"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "apmd" {
		# MESSAGE apmd_03
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}<fld1>:<fld2>:<fld4>:<fld5>:<fld6>: Username '<username>'
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE apmd_02
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}<fld1>:<fld2>: Access profile:<event_description>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE 000349
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: **ERROR** | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: **ERROR** } <filename> func: "<action>" line: <fld3> Msg: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+\*\*ERROR\*\*[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+\*\*ERROR\*\*[\s]+)[\s]+(?<filename>[^\s]*)[\s]+func:[\s]+\"(?<action>[^\"]*)\"[\s]+line:[\s]+(?<fld3>[^\s]*)[\s]+Msg:[\s]+(?<event_description>.*)$" }
				id => "message-000349"
				add_field => {
				"result" => " Error while connecting to memcached"
					"[event][id]" => "000349"
					"[rsa][message][id1]" => "000349"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE apmd_01
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}<fld1>:<fld2>:<fld4>:<fld5>:<fld6>:<event_description>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	}
	else if [logstash][msgparser][id] == "apd" {
		# MESSAGE 000352
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: **ERROR** | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: **ERROR** } <filename> func: "<action>" line: <fld3> Msg: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+\*\*ERROR\*\*[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+\*\*ERROR\*\*[\s]+)[\s]+(?<filename>[^\s]*)[\s]+func:[\s]+\"(?<action>[^\"]*)\"[\s]+line:[\s]+(?<fld3>[^\s]*)[\s]+Msg:[\s]+(?<event_description>.*)$" }
				id => "message-000352"
				add_field => {
				"result" => " Error while connecting to memcached"
					"[event][id]" => "000352"
					"[rsa][message][id1]" => "000352"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000368
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: <fld3>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: %{fld3}: %{info}" }
				id => "message-000368"
				add_field => {
					"[event][id]" => "000368"
					"[rsa][message][id1]" => "000368"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "b" {
		# MESSAGE 000069
		# line in RSA:  <hostname> <agent>: Completed config sync all operation
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: Completed config sync all operation" }
				id => "message-000069"
				add_field => {
				"event_description" => "Completed config sync all operation"
					"[event][id]" => "000069"
					"[rsa][message][id1]" => "000069"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000350
		# line in RSA: { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT } - user <username> - <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+)[\s]+\-[\s]+user[\s]+(?<username>[^\s]*)[\s]+\-[\s]+(?<info>.*)$" }
				id => "message-000350"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Execute"
					"[event][id]" => "000350"
					"[rsa][message][id1]" => "000350"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "bcm56xxd" {
		# MESSAGE 000038
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: <action> timeout: <event_state>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: %{action} timeout: %{event_state}" }
				id => "message-000038"
				add_field => {
					"[event][id]" => "000038"
					"[rsa][message][id1]" => "000038"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000045
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Link: <interface> is <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Link: %{interface} is %{disposition}" }
				id => "message-000045"
				add_field => {
				"event_description" => " Link is down"
					"[event][id]" => "000045"
					"[rsa][message][id1]" => "000045"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000054
		# line in RSA:   <hostname> <agent>: <fld1>:<fld2>: BCM56xxd starting. debug=<fld3>, foreground=<fld4>, packet=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: %{fld1}:%{fld2}: BCM56xxd starting. debug=%{fld3}, foreground=%{fld4}, packet=%{fld5}" }
				id => "message-000054"
				add_field => {
				"event_description" => "BCM56xxd starting."
					"[event][id]" => "000054"
					"[rsa][message][id1]" => "000054"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "bigd" {
		# MESSAGE 000059
		# line in RSA: <hostname> <agent>: (<process>): Error: popen: (cmd_string=<fld1> <fld2> <fld3>) No child processes
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: (%{process}): Error: popen: (cmd_string=%{fld1} %{fld2} %{fld3}) No child processes" }
				id => "message-000059"
				add_field => {
				"event_description" => " Error - popen No child processes"
					"[event][id]" => "000059"
					"[rsa][message][id1]" => "000059"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000068
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Monitor to delete external does not exist.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Monitor to delete external does not exist." }
				id => "message-000068"
				add_field => {
				"event_description" => " Monitor to delete external does not exist."
					"[event][id]" => "000068"
					"[rsa][message][id1]" => "000068"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000377
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Open SSL error - error:<result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Open SSL error - error:%{result}." }
				id => "message-000377"
				add_field => {
				"event_description" => " Open SSL error - ssl handshake failure"
					"[event][id]" => "000377"
					"[rsa][message][id1]" => "000377"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: bigdbd is up.
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: bigdbd is up." }
			id => "msgParserId19"
			add_field => {
				"event_description" => " bigdbd is up"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "chmand" {
		# MESSAGE 000055
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: a PCI-PCI bridge.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: a PCI-PCI bridge." }
				id => "message-000055"
				add_field => {
				"event_description" => " a PCI-PCI bridge."
					"[event][id]" => "000055"
					"[rsa][message][id1]" => "000055"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000298
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000298"
				add_field => {
					"[event][id]" => "000298"
					"[rsa][message][id1]" => "000298"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "checkcert" {
		# MESSAGE 000001
		# line in RSA:  { <hostname> <severity> <agent>: f5km_shutdown | <hostname> <agent>: f5km_shutdown } (<fld1>, <fld2>): <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+f5km_shutdown[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+f5km_shutdown[\s]+)[\s]+\((?<fld1>[^,]*),[\s]+(?<fld2>[^\)]*)\):[\s]+(?<filename>.*)$" }
				id => "message-000001"
				add_field => {
				"event_description" => "f5km shutdown"
				"action" => "f5km_shutdown"
					"[event][id]" => "000001"
					"[rsa][message][id1]" => "000001"
					"[event][categoryid]" => "1611000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000002
		# line in RSA:  { <hostname> <agent>: f5km_initialize_context | <hostname> <severity> <agent>: f5km_initialize_context } (<fld2>): <fld6>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+f5km_initialize_context[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+f5km_initialize_context[\s]+)[\s]+\((?<fld2>[^\)]*)\):[\s]+(?<fld6>.*)$" }
				id => "message-000002"
				add_field => {
				"event_description" => "f5km_intialize_context"
				"action" => "f5km_initialize_context"
					"[event][id]" => "000002"
					"[rsa][message][id1]" => "000002"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000003
		# line in RSA: <hostname> <agent>: f5km_list_next DONE
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: f5km_list_next DONE" }
				id => "message-000003"
				add_field => {
				"action" => "f5km_list_next"
				"event_description" => "f5km_list_next DONE"
					"[event][id]" => "000003"
					"[rsa][message][id1]" => "000003"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000027
		# line in RSA: <hostname> <agent>: f5km_init(<filename>): <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: f5km_init(%{filename}): %{fld1}" }
				id => "message-000027"
				add_field => {
				"event_description" => "f5km_init"
				"action" => "f5km_init"
					"[event][id]" => "000027"
					"[rsa][message][id1]" => "000027"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000028
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Certificate '<cert_hostname>' in file <filename> { expired | will expire } on <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Certificate[\s]+'(?<cert_hostname>[^']*)'[\s]+in[\s]+file[\s]+(?<filename>[^\s]*)[\s]+([\s]*expired[\s]+|[\s]*will[\s]+expire[\s]+)[\s]+on[\s]+(?<info>.*)$" }
				id => "message-000028"
				add_field => {
					"[event][id]" => "000028"
					"[rsa][message][id1]" => "000028"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId27
	# line in RSA:  <hostname> <agent>: <fld1>:<fld2>: Notification attempt to consumer id <operation_id> FAILED with error <result>.
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}: %{fld1}:%{fld2}: Notification attempt to consumer id %{operation_id} FAILED with error %{result}." }
			id => "msgParserId27"
			add_field => {
				"disposition" => "FAILED"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "CROND" {
		# MESSAGE 000183_01
		# line in RSA: {<hostname> <severity> <agent>[<process_id>]:|<hostname> <agent>[<process_id>]:} (<service>) CMD (<param>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:)[\s]+\((?<service>[^\)]*)\)[\s]+CMD[\s]+\((?<param>[^\)]*)\)$" }
				id => "message-000183_01"
				add_field => {
					"[event][id]" => "000183_01"
					"[rsa][message][id1]" => "000183_01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000183_03
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: (<username>) MAIL (mailed <bytes> bytes of output but got status <resultcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: (%{username}) MAIL (mailed %{bytes} bytes of output but got status %{resultcode})" }
				id => "message-000183_03"
				add_field => {
					"[event][id]" => "000183_03"
					"[rsa][message][id1]" => "000183_03"
					"[event][categoryid]" => "1207000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "crond" {
		# MESSAGE 000183
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: (<service>) CMD (<filename> <fld1>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: (%{service}) CMD (%{filename} %{fld1})" }
				id => "message-000183"
				add_field => {
					"[event][id]" => "000183"
					"[rsa][message][id1]" => "000183"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000005
		# line in RSA: <hostname> <agent>[<process_id>]: (<username>) CMD (<param>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: (%{username}) CMD (%{param})" }
				id => "message-000005"
				add_field => {
					"[event][id]" => "000005"
					"[rsa][message][id1]" => "000005"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000182
		# line in RSA:   { <hostname> <agent>[<process_id>]: | <hostname> <severity> <agent>[<process_id>]: } (<service>) chdir(<fld1>) failed: (No such file or directory)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+\((?<service>[^\)]*)\)[\s]+chdir\((?<fld1>[^\)]*)\)[\s]+failed:[\s]+\(No[\s]+such[\s]+file[\s]+or[\s]+directory\)$" }
				id => "message-000182"
				add_field => {
				"action" => " chdir"
				"result" => " no such file or directory"
					"[event][id]" => "000182"
					"[rsa][message][id1]" => "000182"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000071
		# line in RSA:  <hostname> <agent>[<process_id>]: PAM [dlerror: <filename>: <result>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: PAM [dlerror: %{filename}: %{result}]" }
				id => "message-000071"
				add_field => {
					"[event][id]" => "000071"
					"[rsa][message][id1]" => "000071"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000186
		# line in RSA:  {<hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: } USER <username> pid <child_pid> cmd <param>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+USER[\s]+(?<username>[^\s]*)[\s]+pid[\s]+(?<child_pid>[^\s]*)[\s]+cmd[\s]+(?<param>.*)$" }
				id => "message-000186"
				add_field => {
					"[event][id]" => "000186"
					"[rsa][message][id1]" => "000186"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000194
		# line in RSA:  {<hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: } <service>(<fld1>): session opened for user <username> by (uid=<fld2>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<service>[^\(]*)\((?<fld1>[^\)]*)\):[\s]+session[\s]+opened[\s]+for[\s]+user[\s]+(?<username>[^\s]*)[\s]+by[\s]+\(uid=(?<fld2>[^\)]*)\)$" }
				id => "message-000194"
				add_field => {
					"[event][id]" => "000194"
					"[rsa][message][id1]" => "000194"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000193
		# line in RSA:  {<hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: } <service>(<fld1>): session closed for user <username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<service>[^\(]*)\((?<fld1>[^\)]*)\):[\s]+session[\s]+closed[\s]+for[\s]+user[\s]+(?<username>.*)$" }
				id => "message-000193"
				add_field => {
					"[event][id]" => "000193"
					"[rsa][message][id1]" => "000193"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000211
		# line in RSA:  {<hostname> <agent>[<process_id>]: PAM | <hostname> <severity> <agent>[<process_id>]: PAM } unable to dlopen(<filename>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+PAM[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+PAM[\s]+)[\s]+unable[\s]+to[\s]+dlopen\((?<filename>[^\)]*)\)$" }
				id => "message-000211"
				add_field => {
					"[event][id]" => "000211"
					"[rsa][message][id1]" => "000211"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000212
		# line in RSA:  {<hostname> <agent>[<process_id>]: PAM | <hostname> <severity> <agent>[<process_id>]: PAM } [error: <filename>: <result>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+PAM[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+PAM[\s]+)[\s]+\[error:[\s]+(?<filename>[^:]*):[\s]+(?<result>[^\]]*)\]$" }
				id => "message-000212"
				add_field => {
					"[event][id]" => "000212"
					"[rsa][message][id1]" => "000212"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000213
		# line in RSA:  {<hostname> <agent>[<process_id>]: PAM | <hostname> <severity> <agent>[<process_id>]: PAM } adding faulty module: <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+PAM[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+PAM[\s]+)[\s]+adding[\s]+faulty[\s]+module:[\s]+(?<filename>.*)$" }
				id => "message-000213"
				add_field => {
					"[event][id]" => "000213"
					"[rsa][message][id1]" => "000213"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000215
		# line in RSA:   { <hostname> <severity> crond[<process_id>]: | <hostname> crond[<process_id>]: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+crond\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+crond\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000215"
				add_field => {
				"agent" => "crond"
					"[event][id]" => "000215"
					"[rsa][message][id1]" => "000215"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "EXT3-fs" {
		# MESSAGE 000040
		# line in RSA: <hostname> <agent>: mounted filesystem with ordered data mode.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: mounted filesystem with ordered data mode." }
				id => "message-000040"
				add_field => {
				"event_description" => " mounted filesystem with ordered data mode."
					"[event][id]" => "000040"
					"[rsa][message][id1]" => "000040"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000144
		# line in RSA: <hostname> <agent>: error loading journal.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: error loading journal." }
				id => "message-000144"
				add_field => {
				"event_description" => " error loading journal."
					"[event][id]" => "000144"
					"[rsa][message][id1]" => "000144"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId42
	# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Cannot open HAL
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Cannot open HAL" }
			id => "msgParserId42"
			add_field => {
				"event_description" => " Cannot open HAL"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId43
	# line in RSA:  <hostname> <agent>: No remote users to delete...
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}: No remote users to delete..." }
			id => "msgParserId43"
			add_field => {
				"event_description" => " No remote users to delete..."
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "get_dossier" {
		# MESSAGE 000051
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: <event_source> returned error <resultcode>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: %{event_source} returned error %{resultcode}." }
				id => "message-000051"
				add_field => {
				"event_description" => " halGetDossier returned error"
					"[event][id]" => "000051"
					"[rsa][message][id1]" => "000051"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000052
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: <event_source>: <fld3> error = <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: %{event_source}: %{fld3} error = %{resultcode}" }
				id => "message-000052"
				add_field => {
					"[event][id]" => "000052"
					"[rsa][message][id1]" => "000052"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "httpd" {
		# MESSAGE 000006
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] [client <saddr>] File does not exist: <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] [client %{saddr}] File does not exist: %{filename}" }
				id => "message-000006"
				add_field => {
				"event_description" => " File does not exist"
					"[event][id]" => "000006"
					"[rsa][message][id1]" => "000006"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000007
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] [client <hostip>] { Invalid URI in request | Invalid method in request } <web_method> <fld1> <network_service>/<fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<severity>[^\]]*)\][\s]+\[client[\s]+(?<hostip>[^\]]*)\][\s]+([\s]*Invalid[\s]+URI[\s]+in[\s]+request[\s]+|[\s]*Invalid[\s]+method[\s]+in[\s]+request[\s]+)[\s]+(?<web_method>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<network_service>[^/]*)/(?<fld2>.*)$" }
				id => "message-000007"
				add_field => {
				"event_description" => " Invalid URI in request"
					"[event][id]" => "000007"
					"[rsa][message][id1]" => "000007"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000008
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] [client <saddr>] Directory index forbidden by rule: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] [client %{saddr}] Directory index forbidden by rule: %{fld1}" }
				id => "message-000008"
				add_field => {
				"event_description" => " Directory index forbidden by rule"
					"[event][id]" => "000008"
					"[rsa][message][id1]" => "000008"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000009
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] <action> uri must start with / 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] %{action} uri must start with /" }
				id => "message-000009"
				add_field => {
				"event_description" => " URI must start with /"
					"[event][id]" => "000009"
					"[rsa][message][id1]" => "000009"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000010
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] <action> Can't find child <fld1> in scoreboard
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] %{action} Can't find child %{fld1} in scoreboard" }
				id => "message-000010"
				add_field => {
				"event_description" => " Cannot find child in scoreboard"
					"[event][id]" => "000010"
					"[rsa][message][id1]" => "000010"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000011
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] <action> child init <fld1> <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] %{action} child init %{fld1} %{fld2}" }
				id => "message-000011"
				add_field => {
					"[event][id]" => "000011"
					"[rsa][message][id1]" => "000011"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000088
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] Error <action> - write failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] Error %{action} - write failed" }
				id => "message-000088"
				add_field => {
				"event_description" => " Write failed"
					"[event][id]" => "000088"
					"[rsa][message][id1]" => "000088"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000089
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] <action> Error connecting to tomcat <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] %{action} Error connecting to tomcat %{fld1}" }
				id => "message-000089"
				add_field => {
				"event_description" => " Error connecting to tomcat"
					"[event][id]" => "000089"
					"[rsa][message][id1]" => "000089"
					"[event][categoryid]" => "1204020400"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000090
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] <action> <fld1> recoverable error <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] %{action} %{fld1} recoverable error %{fld2}" }
				id => "message-000090"
				add_field => {
				"event_description" => " Recoverable Error"
					"[event][id]" => "000090"
					"[rsa][message][id1]" => "000090"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000091
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] <action> Error  forwarding ajp13:<fld1>:<fld2> <fld3> <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] %{action} Error  forwarding ajp13:%{fld1}:%{fld2} %{fld3} %{fld4}" }
				id => "message-000091"
				add_field => {
				"event_description" => "HTTPD Error - Error forwarding"
					"[event][id]" => "000091"
					"[rsa][message][id1]" => "000091"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000087
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] [client <saddr>] AUTHCACHE PAM: user '<username>' - not authenticated: Authentication failure
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] [client %{saddr}] AUTHCACHE PAM: user '%{username}' - not authenticated: Authentication failure" }
				id => "message-000087"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"event_description" => " user - not authenticated: Authentication failure"
					"[event][id]" => "000087"
					"[rsa][message][id1]" => "000087"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000092
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } pam_bigip_authz: <service> returning status SUCCESS
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+pam_bigip_authz:[\s]+(?<service>[^\s]*)[\s]+returning[\s]+status[\s]+SUCCESS$" }
				id => "message-000092"
				add_field => {
				"event_source" => "pam_bigip_authz"
				"result" => "SUCCESS"
					"[event][id]" => "000092"
					"[rsa][message][id1]" => "000092"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000093
		# line in RSA:  { <hostname> <agent>[<process_id>]: pam_bigip_authz: | <hostname> <severity> <agent>[<process_id>]: pam_bigip_authz: } <service> returning status <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_bigip_authz:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_bigip_authz:[\s]+)[\s]+(?<service>[^\s]*)[\s]+returning[\s]+status[\s]+(?<result>.*)$" }
				id => "message-000093"
				add_field => {
				"event_source" => "pam_bigip_authz"
					"[event][id]" => "000093"
					"[rsa][message][id1]" => "000093"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000127
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT } - user <fld3> - RAW: httpd(<service>): user={<username>(<fld16>)|<username>} partition=<fld4> level=<fld5> tty=<terminal> host=<saddr> attempts=<dclass_counter1> start="<fld6> <fld7> <fld8> <fld9> <fld10>" end="<fld11> <fld12>  <fld13> <fld14> <fld15>".
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+)[\s]+\-[\s]+user[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+RAW:[\s]+httpd\((?<service>[^\)]*)\):[\s]+user=((?<username>[^\(]*)\((?<fld16>[^\)]*)\)|(?<username>[^\s]*))[\s]+partition=(?<fld4>[^\s]*)[\s]+level=(?<fld5>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+attempts=(?<dclass_counter1>[^\s]*)[\s]+start=\"(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\"]*)\"[\s]+end=\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\"]*)\"\.$" }
				id => "message-000127"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
					"[event][id]" => "000127"
					"[rsa][message][id1]" => "000127"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000205
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT } - user <fld3> - RAW: httpd(<service>): user={<username>(<fld11>)|<username>} {partition=[<fld4>] | partition=<fld4>} level=<fld5> tty=<terminal> host=<saddr> attempts=<dclass_counter1> start="<fld6> <fld7> <fld8> <fld9> <fld10>".
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+)[\s]+\-[\s]+user[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+RAW:[\s]+httpd\((?<service>[^\)]*)\):[\s]+user=((?<username>[^\(]*)\((?<fld11>[^\)]*)\)|(?<username>[^\s]*))[\s]+(partition=\[(?<fld4>[^\]]*)\][\s]+|[\s]*partition=(?<fld4>[^\s]*))[\s]+level=(?<fld5>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+attempts=(?<dclass_counter1>[^\s]*)[\s]+start=\"(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\"]*)\"\.$" }
				id => "message-000205"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "000205"
					"[rsa][message][id1]" => "000205"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000133
		# line in RSA: <hostname> <agent>[<process_id>]: <service>: error trying to bind as user "<dn>" (<event_description>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{service}: error trying to bind as user \"%{dn}\" (%{event_description})" }
				id => "message-000133"
				add_field => {
				"result" => " error trying to bind as user (Invalid credentials)"
					"[event][id]" => "000133"
					"[rsa][message][id1]" => "000133"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000365
		# line in RSA: { <hostname> <severity> <agent>(<service>)[<process_id>]: <fld11>:<fld12>: AUDIT | <hostname> <agent>(<service>)[<process_id>]: <fld11>:<fld12>: AUDIT } - user <fld13> - <fld14>: <fld15>: User=<username> tty=<terminal> host=<saddr> failed to login after <dclass_counter1> attempts (start=<fld1> <fld2>  <fld3> <fld4> <fld5>" end=<fld6> <fld7>  <fld8> <fld9> <fld10>").
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld11>[^:]*):(?<fld12>[^:]*):[\s]+AUDIT[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld11>[^:]*):(?<fld12>[^:]*):[\s]+AUDIT[\s]+)[\s]+\-[\s]+user[\s]+(?<fld13>[^\s]*)[\s]+\-[\s]+(?<fld14>[^:]*):[\s]+(?<fld15>[^:]*):[\s]+User=(?<username>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+failed[\s]+to[\s]+login[\s]+after[\s]+(?<dclass_counter1>[^\s]*)[\s]+attempts[\s]+\(start=(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\"]*)\"[\s]+end=(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\"]*)\"\)\.$" }
				id => "message-000365"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "000365"
					"[rsa][message][id1]" => "000365"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000134
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: User=<username> tty=<terminal> host=<saddr> failed to login after <dclass_counter1> attempts (start={"<fld1>|<fld1>} <fld2>  <fld3> <fld4> {<fld5>"|<fld5>} end={"<fld6>|<fld6>} <fld7>  <fld8> <fld9> {<fld10>"|<fld10>}).
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+User=(?<username>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+failed[\s]+to[\s]+login[\s]+after[\s]+(?<dclass_counter1>[^\s]*)[\s]+attempts[\s]+\(start=(\"(?<fld1>[^\s]*)|(?<fld1>[^\s]*))[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+((?<fld5>[^\"]*)\"|(?<fld5>[^\s]*))[\s]+end=(\"(?<fld6>[^\s]*)|(?<fld6>[^\s]*))[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+((?<fld10>[^\"]*)\"|(?<fld10>[^\)]*))\)\.$" }
				id => "message-000134"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "000134"
					"[rsa][message][id1]" => "000134"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000367
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <service>(<fld3>): authentication failure; logname=<fld1> uid=<uid> euid=<fld2> tty=<terminal> ruser=<c_username> rhost=<saddr>  user=<username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<service>[^\(]*)\((?<fld3>[^\)]*)\):[\s]+authentication[\s]+failure;[\s]+logname=(?<fld1>[^\s]*)[\s]+uid=(?<uid>[^\s]*)[\s]+euid=(?<fld2>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+ruser=(?<c_username>[^\s]*)[\s]+rhost=(?<saddr>[^\s]*)[\s]+user=(?<username>.*)$" }
				id => "message-000367"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Authentication failure"
					"[event][id]" => "000367"
					"[rsa][message][id1]" => "000367"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000136
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: authentication failure; logname=<fld1> uid=<uid> euid=<fld2> tty=<terminal> ruser=<c_username> rhost=<saddr>  user=<username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: authentication failure; logname=%{fld1} uid=%{uid} euid=%{fld2} tty=%{terminal} ruser=%{c_username} rhost=%{saddr}  user=%{username}" }
				id => "message-000136"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Authentication failure"
					"[event][id]" => "000136"
					"[rsa][message][id1]" => "000136"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000328
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: authentication failure; logname=<fld1> uid=<uid> euid=<fld2> tty=<terminal> ruser=<c_username> rhost=<saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: authentication failure; logname=%{fld1} uid=%{uid} euid=%{fld2} tty=%{terminal} ruser=%{c_username} rhost=%{saddr}" }
				id => "message-000328"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Authentication failure"
					"[event][id]" => "000328"
					"[rsa][message][id1]" => "000328"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000137
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] <action> child <fld1> in error state <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] %{action} child %{fld1} in error state %{resultcode}" }
				id => "message-000137"
				add_field => {
				"event_description" => "Child in error state"
					"[event][id]" => "000137"
					"[rsa][message][id1]" => "000137"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000178
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] [client <saddr>] AUTHCACHE cookie eater cannot read directory <directory>, error <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] [client %{saddr}] AUTHCACHE cookie eater cannot read directory %{directory}, error %{resultcode}" }
				id => "message-000178"
				add_field => {
				"event_description" => "AUTHCACHE cookie eater cannot read directory"
					"[event][id]" => "000178"
					"[rsa][message][id1]" => "000178"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000233
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] server reached MaxClients setting, consider raising the MaxClients setting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] server reached MaxClients setting, consider raising the MaxClients setting" }
				id => "message-000233"
				add_field => {
				"event_description" => " server reached MaxClients setting, consider raising the MaxClients setting"
					"[event][id]" => "000233"
					"[rsa][message][id1]" => "000233"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000191
		# line in RSA: <hostname> <agent>[<process_id>]: [<severity>] [client <saddr>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: [%{severity}] [client %{saddr}] %{event_description}" }
				id => "message-000191"
				add_field => {
					"[event][id]" => "000191"
					"[rsa][message][id1]" => "000191"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000232
		# line in RSA:  { <hostname> <agent>[<process_id>]: pam_tacplus: | <hostname> <severity> <agent>[<process_id>]: pam_tacplus: } user not authenticated by TACACS+
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_tacplus:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_tacplus:[\s]+)[\s]+user[\s]+not[\s]+authenticated[\s]+by[\s]+TACACS\+$" }
				id => "message-000232"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "User not authenticated by TACACS+"
					"[event][id]" => "000232"
					"[rsa][message][id1]" => "000232"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000336
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <service>: RADIUS | <hostname> <agent>[<process_id>]: <service>: RADIUS } server <daddr> failed to respond
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<service>[^:]*):[\s]+RADIUS[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<service>[^:]*):[\s]+RADIUS[\s]+)[\s]+server[\s]+(?<daddr>[^\s]*)[\s]+failed[\s]+to[\s]+respond$" }
				id => "message-000336"
				add_field => {
				"action" => " Radius server failed to respond"
					"[event][id]" => "000336"
					"[rsa][message][id1]" => "000336"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000292
		# line in RSA:  { <hostname> <agent>[<process_id>]: [warn] | <hostname> <severity> <agent>[<process_id>]: [warn] } RSA server certificate CommonName (CN) <fld1> does NOT match server name!?
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[warn\][\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[warn\][\s]+)[\s]+RSA[\s]+server[\s]+certificate[\s]+CommonName[\s]+\(CN\)[\s]+(?<fld1>[^\s]*)[\s]+does[\s]+NOT[\s]+match[\s]+server[\s]+name!\?$" }
				id => "message-000292"
				add_field => {
				"event_description" => "RSA server certificate CommonName does not match server name"
					"[event][id]" => "000292"
					"[rsa][message][id1]" => "000292"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000293
		# line in RSA:  { <hostname> <severity> <agent>: httpd | <hostname> <agent>: httpd } startup succeeded
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+httpd[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+httpd[\s]+)[\s]+startup[\s]+succeeded$" }
				id => "message-000293"
				add_field => {
				"event_description" => " httpd startup succeeded"
					"[event][id]" => "000293"
					"[rsa][message][id1]" => "000293"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000351
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: pam_tacplus: | <hostname> <agent>[<process_id>]: pam_tacplus: } TACACS+ authorisation failed for [<username>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_tacplus:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_tacplus:[\s]+)[\s]+TACACS\+[\s]+authorisation[\s]+failed[\s]+for[\s]+\[(?<username>[^\]]*)\]$" }
				id => "message-000351"
				add_field => {
				"event_description" => " TACACS+ authorization failed for user"
				"service" => " pam_tacplus"
					"[event][id]" => "000351"
					"[rsa][message][id1]" => "000351"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000380
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: pam_tacplus: | <hostname> <agent>[<process_id>]: pam_tacplus: } pam_sm_acct_mgmt: user in deny list
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_tacplus:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_tacplus:[\s]+)[\s]+pam_sm_acct_mgmt:[\s]+user[\s]+in[\s]+deny[\s]+list$" }
				id => "message-000380"
				add_field => {
				"event_description" => "user in deny list"
				"service" => "pam_tacplus"
					"[event][id]" => "000380"
					"[rsa][message][id1]" => "000380"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000386
		# line in RSA: { <hostname> <severity> <agent>[<process_id>]: pam_tacplus: | <hostname> <agent>[<process_id>]: pam_tacplus: } auth failed: Login incorrect
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_tacplus:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+pam_tacplus:[\s]+)[\s]+auth[\s]+failed:[\s]+Login[\s]+incorrect$" }
				id => "message-000386"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Login incorrect"
				"service" => "pam_tacplus"
					"[event][id]" => "000386"
					"[rsa][message][id1]" => "000386"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000400
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: pam_bigip_authz: <service> user=<username> role=<fld1> console=<fld2> partition=<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: pam_bigip_authz: %{service} user=%{username} role=%{fld1} console=%{fld2} partition=%{fld3}" }
				id => "message-000400"
				add_field => {
				"event_source" => "pam_bigip_authz"
					"[event][id]" => "000400"
					"[rsa][message][id1]" => "000400"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000434
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+(?<event_description>.*)$" }
				id => "message-000434"
				add_field => {
					"[event][id]" => "000434"
					"[rsa][message][id1]" => "000434"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE httpd_01
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}<fld1>:<fld2>addr=<hostip>port=<network_port>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE httpd_02
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}<fld1>(<fld2>):<event_description>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	}
	# PARSER msgParserId60
	# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: ASM subsystem error (<fld3>,<fld4>): <result>
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: ASM subsystem error (%{fld3},%{fld4}): %{result}" }
			id => "msgParserId60"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId61
	# line in RSA: <hostname> <severity> <agent>: <fld1> <fld2>  <web_root> <disposition> <event_description>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}: %{fld1} %{fld2}  %{web_root} %{disposition} %{event_description}" }
			id => "msgParserId61"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId80
	# line in RSA: c-ip=<saddr>^^method=<web_method>^^uri=<web_root>^^host=<hostip>^^s-ip=<daddr>^^pool-name=<pool_name>^^s-port=<dport>^^status=<info>
	else if [logstash][msgparser][id] == "msgParserId80" {
		dissect {
			mapping => { "message" => "c-ip=%{saddr}^^method=%{web_method}^^uri=%{web_root}^^host=%{hostip}^^s-ip=%{daddr}^^pool-name=%{pool_name}^^s-port=%{dport}^^status=%{info}" }
			id => "msgParserId80"
			add_field => {
				"rulename" => "%{rulename}"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd HH:mm:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "iControlPortal.cgi" {
		# MESSAGE 000048
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_init(<filename>): <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_init(%{filename}): %{fld1}" }
				id => "message-000048"
				add_field => {
				"action" => "f5km_init"
					"[event][id]" => "000048"
					"[rsa][message][id1]" => "000048"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000049
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_shutdown(<fld1>, <fld2>): <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_shutdown(%{fld1}, %{fld2}): %{filename}" }
				id => "message-000049"
				add_field => {
				"action" => "f5km_shutdown"
					"[event][id]" => "000049"
					"[rsa][message][id1]" => "000049"
					"[event][categoryid]" => "1611000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000050
		# line in RSA: <hostname> <agent>[<process_id>]: <event_description> error <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{event_description} error %{resultcode}" }
				id => "message-000050"
				add_field => {
				"action" => "f5km_v_cavium"
					"[event][id]" => "000050"
					"[rsa][message][id1]" => "000050"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000094
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_key_export() called on key <cert_hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_key_export() called on key %{cert_hostname}" }
				id => "message-000094"
				add_field => {
				"action" => "f5km_key_export"
					"[event][id]" => "000094"
					"[rsa][message][id1]" => "000094"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000095
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_exchange: in = <fld1> <space> out = <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_exchange: in = %{fld1} %{space} out = %{fld2}" }
				id => "message-000095"
				add_field => {
				"action" => "f5km_exchange"
				"event_description" => "f5km_exchange"
					"[event][id]" => "000095"
					"[rsa][message][id1]" => "000095"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000096
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } f5km_v_cavium, <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+f5km_v_cavium,[\s]+(?<event_description>.*)$" }
				id => "message-000096"
				add_field => {
				"action" => "f5km_v_cavium"
					"[event][id]" => "000096"
					"[rsa][message][id1]" => "000096"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000097
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } f5km_initialize_context(<fld1> <fld2> <fld3> <filename> <fld5>): <fld6>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+f5km_initialize_context\((?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<filename>[^\s]*)[\s]+(?<fld5>[^\)]*)\):[\s]+(?<fld6>.*)$" }
				id => "message-000097"
				add_field => {
				"action" => "f5km_initialize_context"
					"[event][id]" => "000097"
					"[rsa][message][id1]" => "000097"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000098
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } f5km_list_next DONE
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+f5km_list_next[\s]+DONE$" }
				id => "message-000098"
				add_field => {
				"action" => "f5km_list_next"
				"event_description" => "f5km_list_next DONE"
					"[event][id]" => "000098"
					"[rsa][message][id1]" => "000098"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000099
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_exchange: <action> returns <resultcode> -- <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_exchange: %{action} returns %{resultcode} -- %{fld1}" }
				id => "message-000099"
				add_field => {
				"event_description" => "f5km_exchange Keys do not match"
					"[event][id]" => "000099"
					"[rsa][message][id1]" => "000099"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000100
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_cert_import(<cert_hostname>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_cert_import(%{cert_hostname})" }
				id => "message-000100"
				add_field => {
				"action" => "f5km_cert_import"
				"event_description" => "f5km_cert_import"
					"[event][id]" => "000100"
					"[rsa][message][id1]" => "000100"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000101
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_key_import returns <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_key_import returns %{resultcode}" }
				id => "message-000101"
				add_field => {
				"action" => "f5km_key_import"
					"[event][id]" => "000101"
					"[rsa][message][id1]" => "000101"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000201
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_cert_import returns <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_cert_import returns %{resultcode}" }
				id => "message-000201"
				add_field => {
				"action" => "f5km_cert_import"
					"[event][id]" => "000201"
					"[rsa][message][id1]" => "000201"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000102
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_key_import(<cert_hostname>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_key_import(%{cert_hostname})" }
				id => "message-000102"
				add_field => {
				"action" => "f5km_key_import"
				"event_description" => "f5km_key_import"
					"[event][id]" => "000102"
					"[rsa][message][id1]" => "000102"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000103
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_mcp_query_one(<cert_hostname>) returns NotFound
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_mcp_query_one(%{cert_hostname}) returns NotFound" }
				id => "message-000103"
				add_field => {
				"action" => "f5km_mcp_query_one"
				"event_description" => "f5km_mcp_query_one returns not found"
					"[event][id]" => "000103"
					"[rsa][message][id1]" => "000103"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000131
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_key_generate(<cert_hostname>) returns <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_key_generate(%{cert_hostname}) returns %{resultcode}" }
				id => "message-000131"
				add_field => {
				"action" => "f5km_key_generate"
				"event_description" => "f5km_key_generate returns 0"
					"[event][id]" => "000131"
					"[rsa][message][id1]" => "000131"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000135
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_key_generate(<cert_hostname>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_key_generate(%{cert_hostname})" }
				id => "message-000135"
				add_field => {
				"action" => "f5km_key_generate"
					"[event][id]" => "000135"
					"[rsa][message][id1]" => "000135"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000132
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_mcp_query_one(key:<cert_hostname>) called
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_mcp_query_one(key:%{cert_hostname}) called" }
				id => "message-000132"
				add_field => {
				"action" => "f5km_mcp_query_one"
				"event_description" => "f5km_mcp_query_one called"
					"[event][id]" => "000132"
					"[rsa][message][id1]" => "000132"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000222
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_mcp_query_one(certificate:<cert_hostname>) called
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_mcp_query_one(certificate:%{cert_hostname}) called" }
				id => "message-000222"
				add_field => {
				"action" => "f5km_mcp_query_one"
				"event_description" => "f5km_mcp_query_one called"
					"[event][id]" => "000222"
					"[rsa][message][id1]" => "000222"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000221
		# line in RSA: <hostname> <agent>[<process_id>]: f5km_import_file(<cert_hostname>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: f5km_import_file(%{cert_hostname})" }
				id => "message-000221"
				add_field => {
				"action" => "f5km_key_import"
				"event_description" => "f5km_import_file"
					"[event][id]" => "000221"
					"[rsa][message][id1]" => "000221"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000363
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: cv_present: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: cv_present: %{info}" }
				id => "message-000363"
				add_field => {
					"[event][id]" => "000363"
					"[rsa][message][id1]" => "000363"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "lacpd" {
		# MESSAGE 000046
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: warning: no receive on <interface> for <fld5>s (timeout=<dclass_counter2>s)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: warning: no receive on %{interface} for %{fld5}s (timeout=%{dclass_counter2}s)" }
				id => "message-000046"
				add_field => {
					"[event][id]" => "000046"
					"[rsa][message][id1]" => "000046"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000070
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Switchboard Failsafe enabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Switchboard Failsafe enabled" }
				id => "message-000070"
				add_field => {
				"event_description" => " Switchboard Failsafe enabled"
					"[event][id]" => "000070"
					"[rsa][message][id1]" => "000070"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "LOGIN" {
		# MESSAGE 000012
		# line in RSA: <hostname> <agent>: <fld1>: Unable to get peers local time
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: %{fld1}: Unable to get peers local time" }
				id => "message-000012"
				add_field => {
				"event_description" => " Unable to get peers local time"
					"[event][id]" => "000012"
					"[rsa][message][id1]" => "000012"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000104
		# line in RSA: <hostname> <agent>: Starting <service>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: Starting %{service}" }
				id => "message-000104"
				add_field => {
					"[event][id]" => "000104"
					"[rsa][message][id1]" => "000104"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000190
		# line in RSA: <hostname> <agent>: Re-starting <service>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: Re-starting %{service}" }
				id => "message-000190"
				add_field => {
					"[event][id]" => "000190"
					"[rsa][message][id1]" => "000190"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "login" {
		# MESSAGE 0000141
		# line in RSA: <agent>:[<process_id>]: [ID <id> <fld1>] <fld2>:<fld3>: <fld4>:<saddr>:<sport>{,<fld5>, user: <username>, domain: <c_domain>| <fld6>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<agent>[^:]*):\[(?<process_id>[^\]]*)\]:[\s]+\[ID[\s]+(?<id>[^\s]*)[\s]+(?<fld1>[^\]]*)\][\s]+(?<fld2>[^:]*):(?<fld3>[^:]*):[\s]+(?<fld4>[^:]*):(?<saddr>[^:]*):(?<sport>[^,\s]*)(,(?<fld5>[^,]*),[\s]+user:[\s]+(?<username>[^,]*),[\s]+domain:[\s]+(?<c_domain>.*)|[\s]*(?<fld6>.*))$" }
				id => "message-0000141"
				add_field => {
				"event_description" => " Successful login from IP"
					"[event][id]" => "0000141"
					"[rsa][message][id1]" => "0000141"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000360
		# line in RSA: <hostname> <severity> <agent>: <fld1>: <fld2> returning status SUCCESS
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}: %{fld1}: %{fld2} returning status SUCCESS" }
				id => "message-000360"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => " SUCCESSFUL LOGIN"
					"[event][id]" => "000360"
					"[rsa][message][id1]" => "000360"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000147
		# line in RSA: <hostname> <agent>[<process_id>]: FAILED LOGIN <fld1> FROM (<fld2>) FOR <username>, Authentication failure
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: FAILED LOGIN %{fld1} FROM (%{fld2}) FOR %{username}, Authentication failure" }
				id => "message-000147"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => " FAILED LOGIN, Authentication failure"
					"[event][id]" => "000147"
					"[rsa][message][id1]" => "000147"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000241
		# line in RSA:  { <hostname> <agent>: FAILED | <hostname> <severity> <agent>: FAILED } LOGIN <fld1> FROM (<fld2>) FOR <username>, Authentication failure
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+FAILED[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+FAILED[\s]+)[\s]+LOGIN[\s]+(?<fld1>[^\s]*)[\s]+FROM[\s]+\((?<fld2>[^\)]*)\)[\s]+FOR[\s]+(?<username>[^,]*),[\s]+Authentication[\s]+failure$" }
				id => "message-000241"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => " FAILED LOGIN, Authentication failure"
					"[event][id]" => "000241"
					"[rsa][message][id1]" => "000241"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000240
		# line in RSA:  { <hostname> <agent>: <service>(<fld1>): authentication | <hostname> <severity> <agent>: <service>(<fld1>): authentication } failure; logname=<fld2> uid=<uid> euid=<fld3> tty=<terminal> ruser=<fld4> rhost=<fld5>  user=<username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<service>[^\(]*)\((?<fld1>[^\)]*)\):[\s]+authentication[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<service>[^\(]*)\((?<fld1>[^\)]*)\):[\s]+authentication[\s]+)[\s]+failure;[\s]+logname=(?<fld2>[^\s]*)[\s]+uid=(?<uid>[^\s]*)[\s]+euid=(?<fld3>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+ruser=(?<fld4>[^\s]*)[\s]+rhost=(?<fld5>[^\s]*)[\s]+user=(?<username>.*)$" }
				id => "message-000240"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "000240"
					"[rsa][message][id1]" => "000240"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000333
		# line in RSA:  { <hostname> <severity> <agent>(<service>)[<process_id>]: authentication | <hostname> <agent>(<service>)[<process_id>]: authentication } failure; logname=<fld2> uid=<uid> euid=<fld3> tty=<terminal> ruser=<fld4> rhost=<fld5>  user=<username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+authentication[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+authentication[\s]+)[\s]+failure;[\s]+logname=(?<fld2>[^\s]*)[\s]+uid=(?<uid>[^\s]*)[\s]+euid=(?<fld3>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+ruser=(?<fld4>[^\s]*)[\s]+rhost=(?<fld5>[^\s]*)[\s]+user=(?<username>.*)$" }
				id => "message-000333"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "000333"
					"[rsa][message][id1]" => "000333"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000340
		# line in RSA:  { <hostname> <severity> <agent>(<service>)[<process_id>]: authentication | <hostname> <agent>(<service>)[<process_id>]: authentication } failure; logname=<fld2> uid=<uid> euid=<fld3> tty=<terminal> ruser=<fld4> rhost=<fld5>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+authentication[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+authentication[\s]+)[\s]+failure;[\s]+logname=(?<fld2>[^\s]*)[\s]+uid=(?<uid>[^\s]*)[\s]+euid=(?<fld3>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+ruser=(?<fld4>[^\s]*)[\s]+rhost=(?<fld5>.*)$" }
				id => "message-000340"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "000340"
					"[rsa][message][id1]" => "000340"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000334
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: check pass; user unknown
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: check pass; user unknown" }
				id => "message-000334"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => " check pass; user unknown"
					"[event][id]" => "000334"
					"[rsa][message][id1]" => "000334"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000335
		# line in RSA:  { <hostname> <severity> <agent>(<service>)[<process_id>]: session | <hostname> <agent>(<service>)[<process_id>]: session } opened for user <username> by <fld2>(uid=<uid>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+session[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+session[\s]+)[\s]+opened[\s]+for[\s]+user[\s]+(?<username>[^\s]*)[\s]+by[\s]+(?<fld2>[^\(]*)\(uid=(?<uid>[^\)]*)\)$" }
				id => "message-000335"
				add_field => {
					"[event][id]" => "000335"
					"[rsa][message][id1]" => "000335"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000244
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <service>(<fld1>): session | <hostname> <agent>[<process_id>]: <service>(<fld1>): session } opened for user <username> by <fld2>(uid=<uid>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<service>[^\(]*)\((?<fld1>[^\)]*)\):[\s]+session[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<service>[^\(]*)\((?<fld1>[^\)]*)\):[\s]+session[\s]+)[\s]+opened[\s]+for[\s]+user[\s]+(?<username>[^\s]*)[\s]+by[\s]+(?<fld2>[^\(]*)\(uid=(?<uid>[^\)]*)\)$" }
				id => "message-000244"
				add_field => {
					"[event][id]" => "000244"
					"[rsa][message][id1]" => "000244"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000242
		# line in RSA:  { <hostname> <severity> <agent>(<service>)[<process_id>]: user | <hostname> <agent>(<service>)[<process_id>]: user} {=<username>(<fld11>)|=<username>} partition=<fld6> level=<fld7> tty=<terminal> host=<saddr> attempts=<dclass_counter1> start="<fld1> <fld2>  <fld3> <fld4> <fld5>".
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+user[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+user)[\s]+(=(?<username>[^\(]*)\((?<fld11>[^\)]*)\)|=(?<username>[^\s]*))[\s]+partition=(?<fld6>[^\s]*)[\s]+level=(?<fld7>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+attempts=(?<dclass_counter1>[^\s]*)[\s]+start=\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\"]*)\"\.$" }
				id => "message-000242"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "000242"
					"[rsa][message][id1]" => "000242"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000243
		# line in RSA:  { <hostname> <severity> <agent>(<service>)[<process_id>]: <fld1>:<fld2>: AUDIT | <hostname> <agent>(<service>)[<process_id>]: <fld1>:<fld2>: AUDIT } - user <fld3> - RAW: login(<fld11>): user={<username>(<fld12>)|<username>} partition=[<fld4>] level=<fld5> tty=<terminal> host=<saddr> attempts=<dclass_counter1> start="<fld6> <fld7> <fld8> <fld9> <fld10>".
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+)[\s]+\-[\s]+user[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+RAW:[\s]+login\((?<fld11>[^\)]*)\):[\s]+user=((?<username>[^\(]*)\((?<fld12>[^\)]*)\)|(?<username>[^\s]*))[\s]+partition=\[(?<fld4>[^\]]*)\][\s]+level=(?<fld5>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+attempts=(?<dclass_counter1>[^\s]*)[\s]+start=\"(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\"]*)\"\.$" }
				id => "message-000243"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "000243"
					"[rsa][message][id1]" => "000243"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000307
		# line in RSA:  { <hostname> <severity> <agent>(<service>)[<process_id>]: user | <hostname> <agent>(<service>)[<process_id>]: user } {=<username>(<fld11>)|=<username>} tty=<terminal> host=<saddr> attempts=<dclass_counter1> start="<fld1> <fld2>  <fld3> <fld4> <fld5>" end="<fld6> <fld7>  <fld8> <fld9> <fld10>".
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+user[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+user[\s]+)[\s]+(=(?<username>[^\(]*)\((?<fld11>[^\)]*)\)|=(?<username>[^\s]*))[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+attempts=(?<dclass_counter1>[^\s]*)[\s]+start=\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\"]*)\"[\s]+end=\"(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\"]*)\"\.$" }
				id => "message-000307"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
					"[event][id]" => "000307"
					"[rsa][message][id1]" => "000307"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000309
		# line in RSA:  { <hostname> <severity> <agent>(<service>)[<process_id>]: session | <hostname> <agent>(<service>)[<process_id>]: session } closed for user <username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+session[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+session[\s]+)[\s]+closed[\s]+for[\s]+user[\s]+(?<username>.*)$" }
				id => "message-000309"
				add_field => {
					"[event][id]" => "000309"
					"[rsa][message][id1]" => "000309"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "logger" {
		# MESSAGE 000317
		# line in RSA: <hostname> {<severity> <agent>: [acc]|<agent>: [acc]} <saddr> <fld3> <username> [<fld2> <timezone>] "<web_method> <url> <network_service>/<fld1>" <resultcode> <bytes> "<web_referer>" "<user_agent>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+((?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+\[acc\]|(?<agent>[^:]*):[\s]+\[acc\])[\s]+(?<saddr>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\[(?<fld2>[^\s]*)[\s]+(?<timezone>[^\]]*)\][\s]+\"(?<web_method>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+(?<network_service>[^/]*)/(?<fld1>[^\"]*)\"[\s]+(?<resultcode>[^\s]*)[\s]+(?<bytes>[^\s]*)[\s]+\"(?<web_referer>[^\"]*)\"[\s]+\"(?<user_agent>[^\"]*)\"$" }
				id => "message-000317"
				add_field => {
					"[event][id]" => "000317"
					"[rsa][message][id1]" => "000317"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "dd/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE 000358
		# line in RSA:  <hostname> <severity> <agent>: [ssl_acc] <saddr> <fld3> <username> [<fld2> <timezone>] "<fld1>" <resultcode> <bytes>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}: [ssl_acc] %{saddr} %{fld3} %{username} [%{fld2} %{timezone}] \"%{fld1}\" %{resultcode} %{bytes}" }
				id => "message-000358"
				add_field => {
					"[event][id]" => "000358"
					"[rsa][message][id1]" => "000358"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "dd/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE 000013
		# line in RSA: { <hostname> <agent>: [ssl_acc] | <hostname> <severity> <agent>: [ssl_acc] | <hostname> <agent>: [acc] } <saddr> <fld3> <username> [<fld2> <timezone>] "<web_method> <url> <network_service>/<fld1>" <resultcode> <bytes>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+\[ssl_acc\][\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+\[ssl_acc\][\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+\[acc\][\s]+)[\s]+(?<saddr>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\[(?<fld2>[^\s]*)[\s]+(?<timezone>[^\]]*)\][\s]+\"(?<web_method>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+(?<network_service>[^/]*)/(?<fld1>[^\"]*)\"[\s]+(?<resultcode>[^\s]*)[\s]+(?<bytes>.*)$" }
				id => "message-000013"
				add_field => {
					"[event][id]" => "000013"
					"[rsa][message][id1]" => "000013"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "dd/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE 000359
		# line in RSA:  <hostname> <severity> <agent>: [ssl_req][<fld2> <timezone>] <saddr> <s_sslver> <s_cipher> "<fld1>" <bytes>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}: [ssl_req][%{fld2} %{timezone}] %{saddr} %{s_sslver} %{s_cipher} \"%{fld1}\" %{bytes}" }
				id => "message-000359"
				add_field => {
				"info" => "SSL Request"
					"[event][id]" => "000359"
					"[rsa][message][id1]" => "000359"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "dd/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE 000014
		# line in RSA:  { <hostname> <agent>: [ssl_req] | <hostname> <severity> <agent>: [ssl_req] } [<fld2> <timezone>] <saddr> <s_sslver> <s_cipher> "<web_method> <url> <network_service>/<fld1>" <bytes>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+\[ssl_req\][\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+\[ssl_req\][\s]+)[\s]+\[(?<fld2>[^\s]*)[\s]+(?<timezone>[^\]]*)\][\s]+(?<saddr>[^\s]*)[\s]+(?<s_sslver>[^\s]*)[\s]+(?<s_cipher>[^\s]*)[\s]+\"(?<web_method>[^\s]*)[\s]+(?<url>[^\s]*)[\s]+(?<network_service>[^/]*)/(?<fld1>[^\"]*)\"[\s]+(?<bytes>.*)$" }
				id => "message-000014"
				add_field => {
				"info" => "SSL Request"
					"[event][id]" => "000014"
					"[rsa][message][id1]" => "000014"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "dd/MMM/yyyy:H:m:s" ] }
			}
		}
		# MESSAGE 000060
		# line in RSA:  <hostname> <agent>: <fld1>: Error parsing df -k output
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: %{fld1}: Error parsing df -k output" }
				id => "message-000060"
				add_field => {
				"event_description" => " Error parsing df -k output"
					"[event][id]" => "000060"
					"[rsa][message][id1]" => "000060"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000072
		# line in RSA:   <hostname> <agent>: Starting tomcat4
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: Starting tomcat4" }
				id => "message-000072"
				add_field => {
				"event_description" => " Starting tomcat4"
					"[event][id]" => "000072"
					"[rsa][message][id1]" => "000072"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000440_2
		# line in RSA: <hostname><agent>: [ssl_req][<fld2><timezone>]<hostip><protocol><fld4>"<fld5>"<bytes>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}%{agent}: [ssl_req][%{fld2}%{timezone}]%{hostip}%{protocol}%{fld4}\"%{fld5}\"%{bytes}" }
				id => "message-000440_2"
				add_field => {
					"[event][id]" => "000440_2"
					"[rsa][message][id1]" => "000440_2"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000440_3
		# line in RSA: <hostname><agent>: [ssl_acc]<hostip>-<username>[<fld1><timezone>] "<fld8>"<resultcode><bytes>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}%{agent}: [ssl_acc]%{hostip}-%{username}[%{fld1}%{timezone}] \"%{fld8}\"%{resultcode}%{bytes}" }
				id => "message-000440_3"
				add_field => {
					"[event][id]" => "000440_3"
					"[rsa][message][id1]" => "000440_3"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000440
		# line in RSA:   <hostname> <severity> <agent>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}: %{event_description}" }
				id => "message-000440"
				add_field => {
					"[event][id]" => "000440"
					"[rsa][message][id1]" => "000440"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "mcpd" {
		# MESSAGE 000029
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <fld1>:<fld2>: Pool member <hostip>:<network_port> <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Pool[\s]+member[\s]+(?<hostip>[^:]*):(?<network_port>[^\s]*)[\s]+(?<result>.*)$" }
				id => "message-000029"
				add_field => {
					"[event][id]" => "000029"
					"[rsa][message][id1]" => "000029"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000043
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT - user <username> - transaction #<id1> - object <fld3> - modify {{ pool_member {{ pool_member_pool_name "<pool_name>" <info> } } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+\-[\s]+user[\s]+(?<username>[^\s]*)[\s]+\-[\s]+transaction[\s]+#(?<id1>[^\s]*)[\s]+\-[\s]+object[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+modify[\s]+\{[\s]+pool_member[\s]+\{[\s]+pool_member_pool_name[\s]+\"(?<pool_name>[^\"]*)\"[\s]+(?<info>[^\s]*)[\s]+\}[\s]+\}[\s]+$" }
				id => "message-000043"
				add_field => {
					"[event][id]" => "000043"
					"[rsa][message][id1]" => "000043"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000056
		# line in RSA: <hostname> <agent>[<process_id>]: <fld3>:<fld4>: Add a new Publication for publisherID <fld1> and filterType <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld3}:%{fld4}: Add a new Publication for publisherID %{fld1} and filterType %{fld2}" }
				id => "message-000056"
				add_field => {
				"event_description" => " Add a new Publication for publisherID and filtertype"
					"[event][id]" => "000056"
					"[rsa][message][id1]" => "000056"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000148
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } Setting ha number to <fld1> (from db variable)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Setting[\s]+ha[\s]+number[\s]+to[\s]+(?<fld1>[^\s]*)[\s]+\(from[\s]+db[\s]+variable\)$" }
				id => "message-000148"
				add_field => {
				"event_description" => " Setting ha number from db variable"
					"[event][id]" => "000148"
					"[rsa][message][id1]" => "000148"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000152
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <space>-- reading file <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<space>[^\-]*)\-\-[\s]+reading[\s]+file[\s]+(?<filename>.*)$" }
				id => "message-000152"
				add_field => {
				"event_description" => " reading file"
					"[event][id]" => "000152"
					"[rsa][message][id1]" => "000152"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000156
		# line in RSA: <hostname> <agent>[<process_id>]: <action> <disposition> -- attempting long read
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{action} %{disposition} -- attempting long read" }
				id => "message-000156"
				add_field => {
				"event_description" => " halOpen() SUCCEEDS -- attempting long read"
					"[event][id]" => "000156"
					"[rsa][message][id1]" => "000156"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000157
		# line in RSA: <hostname> <agent>[<process_id>]: halStorageRead() SUCCEEDS
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: halStorageRead() SUCCEEDS" }
				id => "message-000157"
				add_field => {
				"action" => " halStorageRead()"
				"disposition" => " SUCCEEDS"
					"[event][id]" => "000157"
					"[rsa][message][id1]" => "000157"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000158
		# line in RSA: <hostname> <agent>[<process_id>]: <action>: <rbytes> bytes read
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{action}: %{rbytes} bytes read" }
				id => "message-000158"
				add_field => {
					"[event][id]" => "000158"
					"[rsa][message][id1]" => "000158"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000160
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: }  <space>-- load from files, pub = <fld1>   peer = <fld2>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<space>[^\-]*)\-\-[\s]+load[\s]+from[\s]+files,[\s]+pub[\s]+=[\s]+(?<fld1>[^\s]*)[\s]+peer[\s]+=[\s]+(?<fld2>.*)$" }
				id => "message-000160"
				add_field => {
				"event_description" => " load from files"
					"[event][id]" => "000160"
					"[rsa][message][id1]" => "000160"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000171
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } Copying <change_old> to <change_new>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Copying[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>.*)$" }
				id => "message-000171"
				add_field => {
				"event_description" => " Copying files"
					"[event][id]" => "000171"
					"[rsa][message][id1]" => "000171"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000379
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <fld1>:<fld2>: AUDIT - user <username> - transaction <fld3> - object <fld4> - <action> <fld5> <obj_type> <fld6> <fld7> <obj_name> <info> [Status=<result>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+\-[\s]+user[\s]+(?<username>[^\s]*)[\s]+\-[\s]+transaction[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+object[\s]+(?<fld4>[^\s]*)[\s]+\-[\s]+(?<action>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<obj_type>[^\s]*)[\s]+(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<obj_name>[^\s]*)[\s]+(?<info>[^\s]*)[\s]+\[Status=(?<result>[^\]]*)\]$" }
				id => "message-000379"
				add_field => {
					"[event][id]" => "000379"
					"[rsa][message][id1]" => "000379"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000379_01
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <fld1>:<fld2>: AUDIT - {client <process>, tmsh-pid-<fld3>, user <username>|user <username>} - transaction <fld4> - object <fld5> - <action> {{ <obj_type> {{ devicegroup_name "<obj_name>" } } [Status=<result>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+\-[\s]+(client[\s]+(?<process>[^,]*),[\s]+tmsh\-pid\-(?<fld3>[^,]*),[\s]+user[\s]+(?<username>[^\s]*)|user[\s]+(?<username>[^\s]*))[\s]+\-[\s]+transaction[\s]+(?<fld4>[^\s]*)[\s]+\-[\s]+object[\s]+(?<fld5>[^\s]*)[\s]+\-[\s]+(?<action>[^\s]*)[\s]+\{[\s]+(?<obj_type>[^\s]*)[\s]+\{[\s]+devicegroup_name[\s]+\"(?<obj_name>[^\"]*)\"[\s]+\}[\s]+\}[\s]+\[Status=(?<result>[^\]]*)\]$" }
				id => "message-000379_01"
				add_field => {
					"[event][id]" => "000379_01"
					"[rsa][message][id1]" => "000379_01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000161_04
		# line in RSA: { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: }<fld1>:<fld2>: AUDIT - client<interface>, user <username>- transaction #<id1>- object <fld33> - <action> {{ <obj_type>{{ global_sync_status_sync_status {{ cmi_sync_status_sync_status <fld35> cmi_sync_status_status "<fld39>" cmi_sync_status_mode <fld36> cmi_sync_status_color <fld37> cmi_sync_status_summary "<info>" cmi_sync_status_details {{ <context> } } } } [Status=<result>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+\-[\s]+client(?<interface>[^,]*),[\s]+user[\s]+(?<username>[^\-]*)\-[\s]+transaction[\s]+#(?<id1>[^\-]*)\-[\s]+object[\s]+(?<fld33>[^\s]*)[\s]+\-[\s]+(?<action>[^\s]*)[\s]+\{[\s]+(?<obj_type>[^\{]*)\{[\s]+global_sync_status_sync_status[\s]+\{[\s]+cmi_sync_status_sync_status[\s]+(?<fld35>[^\s]*)[\s]+cmi_sync_status_status[\s]+\"(?<fld39>[^\"]*)\"[\s]+cmi_sync_status_mode[\s]+(?<fld36>[^\s]*)[\s]+cmi_sync_status_color[\s]+(?<fld37>[^\s]*)[\s]+cmi_sync_status_summary[\s]+\"(?<info>[^\"]*)\"[\s]+cmi_sync_status_details[\s]+\{[\s]+(?<context>[^\s]*)[\s]+\}[\s]+\}[\s]+\}[\s]+\}[\s]+\[Status=(?<result>[^\]]*)\]$" }
				id => "message-000161_04"
				add_field => {
					"[event][id]" => "000161_04"
					"[rsa][message][id1]" => "000161_04"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000161_01
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: }<fld7>:<fld8>: Master Key updated by user %<fld1>-<fld2>-<fld3>-<hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)(?<fld7>[^:]*):(?<fld8>[^:]*):[\s]+Master[\s]+Key[\s]+updated[\s]+by[\s]+user[\s]+%(?<fld1>[^\-]*)\-(?<fld2>[^\-]*)\-(?<fld3>[^\-]*)\-(?<hostip>.*)$" }
				id => "message-000161_01"
				add_field => {
				"event_description" => "Master key updated by user"
					"[event][id]" => "000161_01"
					"[rsa][message][id1]" => "000161_01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000161_02
		# line in RSA: <hostname><agent>[<process_id>]:<fld1>:<fld2>: AUDIT - client<interface>, user<username>- transaction #<id1>- object<fld33>- create {{<obj_name>{{ {node_address_name "<fld31>" node_address_description "<fld35>" node_address_addr<hostip><info>|<info>}} } [Status=<result>]
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE 000161_03
		# line in RSA: <hostname><agent>[<process_id>]:<fld1>:<fld2>: AUDIT - client<interface>, user<username>- transaction #<id1>- object<fld4>- obj_delete {{<obj_name>{{<info>} } [Status=<result>]
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE 000161_07
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Pool <pool_name> member <device> monitor status down. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Pool %{pool_name} member %{device} monitor status down. %{info}" }
				id => "message-000161_07"
				add_field => {
				"event_description" => "monitor status down"
					"[event][id]" => "000161_07"
					"[rsa][message][id1]" => "000161_07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000161_05
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Pool <pool_name> member <device> monitor status up. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Pool %{pool_name} member %{device} monitor status up. %{info}" }
				id => "message-000161_05"
				add_field => {
				"event_description" => "monitor status up"
					"[event][id]" => "000161_05"
					"[rsa][message][id1]" => "000161_05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000161_06
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Node <node> address <hostip> monitor status up.<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Node %{node} address %{hostip} monitor status up.%{info}" }
				id => "message-000161_06"
				add_field => {
				"event_description" => "monitor status up"
					"[event][id]" => "000161_06"
					"[rsa][message][id1]" => "000161_06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000161
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000161"
				add_field => {
					"[event][id]" => "000161"
					"[rsa][message][id1]" => "000161"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "modprobe" {
		# MESSAGE 000039
		# line in RSA: <hostname> <agent>: modprobe: Can't locate module <event_source>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: modprobe: Can't locate module %{event_source}" }
				id => "message-000039"
				add_field => {
				"event_description" => "MODPROBE Error - Cannot locate module"
					"[event][id]" => "000039"
					"[rsa][message][id1]" => "000039"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 001140
		# line in RSA: <hostname><fld1>:<agent>:<severity>:<action>'<event_source>':<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}%{fld1}:%{agent}:%{severity}:%{action}'%{event_source}':%{info}" }
				id => "message-001140"
				add_field => {
				"event_description" => "modprobe: ERROR: could not insert"
					"[event][id]" => "001140"
					"[rsa][message][id1]" => "001140"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "overdog" {
		# MESSAGE 000041
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Overdog daemon startup.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Overdog daemon startup." }
				id => "message-000041"
				add_field => {
				"event_description" => " Overdog daemon startup."
					"[event][id]" => "000041"
					"[rsa][message][id1]" => "000041"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000300
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000300"
				add_field => {
					"[event][id]" => "000300"
					"[rsa][message][id1]" => "000300"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId136
	# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Log level changed to: <severity>
	else if [logstash][msgparser][id] == "msgParserId136" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Log level changed to: %{severity}" }
			id => "msgParserId136"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "root" {
		# MESSAGE 000361
		# line in RSA: <hostname> <severity> <username>: -bash  <fld1> <fld2> restart <service>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{username}: -bash  %{fld1} %{fld2} restart %{service}" }
				id => "message-000361"
				add_field => {
				"event_description" => " restart syslog-ng services"
					"[event][id]" => "000361"
					"[rsa][message][id1]" => "000361"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000042
		# line in RSA: <hostname> <username>: Test from coposfrm01pr-ltm logs
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{username}: Test from coposfrm01pr-ltm logs" }
				id => "message-000042"
				add_field => {
				"event_description" => " Test from coposfrm01pr-ltm logs"
					"[event][id]" => "000042"
					"[rsa][message][id1]" => "000042"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000345
		# line in RSA: <hostname> root[<process_id>]: DIALUP AT <terminal> BY <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} root[%{process_id}]: DIALUP AT %{terminal} BY %{username}" }
				id => "message-000345"
				add_field => {
				"event_description" => "DIALUP BY user"
				"agent" => " root"
					"[event][id]" => "000345"
					"[rsa][message][id1]" => "000345"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000346
		# line in RSA: <hostname> root[<process_id>]: <fld1> LOGIN ON <terminal>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} root[%{process_id}]: %{fld1} LOGIN ON %{terminal}" }
				id => "message-000346"
				add_field => {
				"event_description" => "LOGIN on terminal"
				"agent" => " root"
					"[event][id]" => "000346"
					"[rsa][message][id1]" => "000346"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000247
		# line in RSA:  { <hostname> <agent>[<process_id>]: <service>(<fld1>): | <hostname> <severity> <agent>[<process_id>]: <service>(<fld1>): } session closed for user <username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<service>[^\(]*)\((?<fld1>[^\)]*)\):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<service>[^\(]*)\((?<fld1>[^\)]*)\):[\s]+)[\s]+session[\s]+closed[\s]+for[\s]+user[\s]+(?<username>.*)$" }
				id => "message-000247"
				add_field => {
					"[event][id]" => "000247"
					"[rsa][message][id1]" => "000247"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000319
		# line in RSA:  { <hostname> <severity> <agent>: <fld1>: Unable | <hostname> <agent>: <fld1>: Unable } to get peers local time
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<fld1>[^:]*):[\s]+Unable[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<fld1>[^:]*):[\s]+Unable[\s]+)[\s]+to[\s]+get[\s]+peers[\s]+local[\s]+time$" }
				id => "message-000319"
				add_field => {
					"[event][id]" => "000319"
					"[rsa][message][id1]" => "000319"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "sbmand" {
		# MESSAGE 000047
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Stopping sbmand
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Stopping sbmand" }
				id => "message-000047"
				add_field => {
				"event_description" => " Stopping sbmand"
					"[event][id]" => "000047"
					"[rsa][message][id1]" => "000047"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000299
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000299"
				add_field => {
					"[event][id]" => "000299"
					"[rsa][message][id1]" => "000299"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId143
	# line in RSA:  <hostname> <agent>[<process_id>]: <severity>: Host processor watchdog timer disabled
	else if [logstash][msgparser][id] == "msgParserId143" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{severity}: Host processor watchdog timer disabled" }
			id => "msgParserId143"
			add_field => {
				"event_description" => " Host processor watchdog timer disabled"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "snmpd" {
		# MESSAGE 000015
		# line in RSA: <hostname> <agent>[<process_id>]: Connection from { UDP/IPv6: [::<fld1>:<saddr>]:<sport> REFUSED | ::<fld1>:<saddr> REFUSED } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Connection[\s]+from[\s]+([\s]*UDP/IPv6:[\s]+\[::(?<fld1>[^:]*):(?<saddr>[^\]]*)\]:(?<sport>[^\s]*)[\s]+REFUSED[\s]+|[\s]*::(?<fld1>[^:]*):(?<saddr>[^\s]*)[\s]+REFUSED[\s]+)[\s]+$" }
				id => "message-000015"
				add_field => {
				"event_description" => " Connection refused"
					"[event][id]" => "000015"
					"[rsa][message][id1]" => "000015"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000016
		# line in RSA: <hostname> <agent>[<process_id>]: Received broken packet. Closing session.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Received broken packet. Closing session." }
				id => "message-000016"
				add_field => {
				"result" => " Received broken packet. Closing session."
					"[event][id]" => "000016"
					"[rsa][message][id1]" => "000016"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000184
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } {<fld1>:<fld2>: <event_description>|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+((?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+(?<event_description>.*)|(?<event_description>.*))$" }
				id => "message-000184"
				add_field => {
					"[event][id]" => "000184"
					"[rsa][message][id1]" => "000184"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId147
	# line in RSA: <hostname> <agent>[<process_id>]: <event_description>
	else if [logstash][msgparser][id] == "msgParserId147" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{event_description}" }
			id => "msgParserId147"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "sod" {
		# MESSAGE 000067
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Opening <terminal> for failover monitoring.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Opening %{terminal} for failover monitoring." }
				id => "message-000067"
				add_field => {
					"[event][id]" => "000067"
					"[rsa][message][id1]" => "000067"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000189
		# line in RSA:   { <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Command: | <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Command: } running disable zrd bigstart.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Command:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Command:[\s]+)[\s]+running[\s]+disable[\s]+zrd[\s]+bigstart\.$" }
				id => "message-000189"
				add_field => {
				"event_description" => " Command: running disable zrd bigstart."
					"[event][id]" => "000189"
					"[rsa][message][id1]" => "000189"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000239
		# line in RSA:   { <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Toggle | <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Toggle } from active to standby to active.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Toggle[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Toggle[\s]+)[\s]+from[\s]+active[\s]+to[\s]+standby[\s]+to[\s]+active\.$" }
				id => "message-000239"
				add_field => {
				"event_description" => " Toggle from active to standby to active."
					"[event][id]" => "000239"
					"[rsa][message][id1]" => "000239"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000231
		# line in RSA:   { <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Peer | <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Peer } management address is not set, using <hostip> as a default please set it.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Peer[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Peer[\s]+)[\s]+management[\s]+address[\s]+is[\s]+not[\s]+set,[\s]+using[\s]+(?<hostip>[^\s]*)[\s]+as[\s]+a[\s]+default[\s]+please[\s]+set[\s]+it\.$" }
				id => "message-000231"
				add_field => {
				"event_description" => " Peer management IP not set."
					"[event][id]" => "000231"
					"[rsa][message][id1]" => "000231"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000301
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000301"
				add_field => {
					"[event][id]" => "000301"
					"[rsa][message][id1]" => "000301"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "sshd" {
		# MESSAGE 000017
		# line in RSA: <hostname> <agent>[<process_id>]: Did not receive identification string from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Did not receive identification string from %{saddr}" }
				id => "message-000017"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"event_description" => " Did not receive identification string"
					"[event][id]" => "000017"
					"[rsa][message][id1]" => "000017"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000018
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: authentication failure; logname=<username> uid=<uid> euid=<fld2> tty=<terminal> ruser=<fld4> rhost=<hostip> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: authentication failure; logname=%{username} uid=%{uid} euid=%{fld2} tty=%{terminal} ruser=%{fld4} rhost=%{hostip}" }
				id => "message-000018"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => " Authentication Failure"
					"[event][id]" => "000018"
					"[rsa][message][id1]" => "000018"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000170
		# line in RSA: <hostname> <agent>[<process_id>]: <service>: RADIUS server <daddr> failed to respond
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{service}: RADIUS server %{daddr} failed to respond" }
				id => "message-000170"
				add_field => {
				"action" => " Radius server failed to respond"
					"[event][id]" => "000170"
					"[rsa][message][id1]" => "000170"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000019
		# line in RSA: <hostname> <agent>[<process_id>]: error: <service>: Authentication failure for <username> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: error: %{service}: Authentication failure for %{username} from %{saddr}" }
				id => "message-000019"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => " Authentication failure"
					"[event][id]" => "000019"
					"[rsa][message][id1]" => "000019"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000020
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: check pass; user unknown
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: check pass; user unknown" }
				id => "message-000020"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => " check pass; user unknown"
					"[event][id]" => "000020"
					"[rsa][message][id1]" => "000020"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000117
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: session opened for user <c_username> by <username>(uid=<uid>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: session opened for user %{c_username} by %{username}(uid=%{uid})" }
				id => "message-000117"
				add_field => {
					"[event][id]" => "000117"
					"[rsa][message][id1]" => "000117"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000021
		# line in RSA: <hostname> <agent>[<process_id>]: Bad protocol version identification '<web_method> <webpage> <network_service>/<fld1>' from <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Bad protocol version identification '%{web_method} %{webpage} %{network_service}/%{fld1}' from %{shost}" }
				id => "message-000021"
				add_field => {
				"event_description" => " Bad protocol version identification"
					"[event][id]" => "000021"
					"[rsa][message][id1]" => "000021"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000118
		# line in RSA: <hostname> <agent>[<process_id>]: Accepted publickey for <username> from <saddr> port <sport> <s_sslver>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Accepted publickey for %{username} from %{saddr} port %{sport} %{s_sslver}" }
				id => "message-000118"
				add_field => {
				"event_description" => " Accepted public key"
					"[event][id]" => "000118"
					"[rsa][message][id1]" => "000118"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000128
		# line in RSA: <hostname> <agent>[<process_id>]: Accepted keyboard-interactive/pam for <username> from <saddr> port <sport> <s_sslver>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Accepted keyboard-interactive/pam for %{username} from %{saddr} port %{sport} %{s_sslver}" }
				id => "message-000128"
				add_field => {
				"event_description" => " Accepted keyboard-interactive/pam"
					"[event][id]" => "000128"
					"[rsa][message][id1]" => "000128"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000162
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: user={<username>(<fld11>)|<username>} tty=<terminal> host=<saddr> attempts=<dclass_counter1> start="<fld1> <fld2>  <fld3> <fld4> <fld5>" end="<fld6> <fld7>  <fld8> <fld9> <fld10>".
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+user=((?<username>[^\(]*)\((?<fld11>[^\)]*)\)|(?<username>[^\s]*))[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+attempts=(?<dclass_counter1>[^\s]*)[\s]+start=\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\"]*)\"[\s]+end=\"(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^\"]*)\"\.$" }
				id => "message-000162"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
					"[event][id]" => "000162"
					"[rsa][message][id1]" => "000162"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000229
		# line in RSA:  { <hostname> <severity> <agent>(<service>)[<process_id>]: user| <hostname> <agent>(<service>)[<process_id>]: user } {=<username>(<fld11>)|=<username>} partition=<fld6> level=<fld7> tty=<terminal> host=<saddr> attempts=<dclass_counter1> start="<fld16> <fld17> <fld18> <fld19> {<fld20>" end="<fld21> <fld22> <fld23> <fld24> <fld25>".|<fld20>".}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+user|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+user[\s]+)[\s]+(=(?<username>[^\(]*)\((?<fld11>[^\)]*)\)|=(?<username>[^\s]*))[\s]+partition=(?<fld6>[^\s]*)[\s]+level=(?<fld7>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+attempts=(?<dclass_counter1>[^\s]*)[\s]+start=\"(?<fld16>[^\s]*)[\s]+(?<fld17>[^\s]*)[\s]+(?<fld18>[^\s]*)[\s]+(?<fld19>[^\s]*)[\s]+((?<fld20>[^\"]*)\"[\s]+end=\"(?<fld21>[^\s]*)[\s]+(?<fld22>[^\s]*)[\s]+(?<fld23>[^\s]*)[\s]+(?<fld24>[^\s]*)[\s]+(?<fld25>[^\"]*)\"\.|(?<fld20>[^\"]*)\"\.)$" }
				id => "message-000229"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "000229"
					"[rsa][message][id1]" => "000229"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000230
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT } - user <fld3> - RAW: sshd(<service>): user={<username>(<fld11>)|<username>} partition=[<fld4>] level=<fld5> tty=<terminal> host=<saddr> attempts=<dclass_counter1> start="<fld6> <fld7> <fld8> <fld9> {<fld10>" end="<fld11> <fld12> <fld13> <fld14> <fld15>".|<fld10>".}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+)[\s]+\-[\s]+user[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+RAW:[\s]+sshd\((?<service>[^\)]*)\):[\s]+user=((?<username>[^\(]*)\((?<fld11>[^\)]*)\)|(?<username>[^\s]*))[\s]+partition=\[(?<fld4>[^\]]*)\][\s]+level=(?<fld5>[^\s]*)[\s]+tty=(?<terminal>[^\s]*)[\s]+host=(?<saddr>[^\s]*)[\s]+attempts=(?<dclass_counter1>[^\s]*)[\s]+start=\"(?<fld6>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+((?<fld10>[^\"]*)\"[\s]+end=\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\"]*)\"\.|(?<fld10>[^\"]*)\"\.)$" }
				id => "message-000230"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "000230"
					"[rsa][message][id1]" => "000230"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000173
		# line in RSA: <hostname> <agent>[<process_id>]: Address <hostip> maps to <fqdn>, but this does not maps back to the address - POSSBILE BREAK-IN ATTEMPT!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Address %{hostip} maps to %{fqdn}, but this does not maps back to the address - POSSBILE BREAK-IN ATTEMPT!" }
				id => "message-000173"
				add_field => {
					"[event][id]" => "000173"
					"[rsa][message][id1]" => "000173"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000174
		# line in RSA: <hostname> <agent>[<process_id>]: error: <service>: User account has expired for <username> from <fqdn>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: error: %{service}: User account has expired for %{username} from %{fqdn}" }
				id => "message-000174"
				add_field => {
				"ec_activity" => "Disable"
				"ec_theme" => "UserGroup"
					"[event][id]" => "000174"
					"[rsa][message][id1]" => "000174"
					"[event][categoryid]" => "1402020400"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000175
		# line in RSA: <hostname> <agent>[<process_id>]: lastlog_filetype: Couldn't stat <filename>: No such file or directory
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: lastlog_filetype: Couldn't stat %{filename}: No such file or directory" }
				id => "message-000175"
				add_field => {
				"result" => " No such file or directory"
					"[event][id]" => "000175"
					"[rsa][message][id1]" => "000175"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000249
		# line in RSA:  { <hostname> /<fld1>/<fld2>/<agent>[<process_id>]: WARNING: | <hostname> <severity> /<fld1>/<fld2>/<agent>[<process_id>]: WARNING: } <filename> does not exist, using fixed modulus
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+/(?<fld1>[^/]*)/(?<fld2>[^/]*)/(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+WARNING:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+/(?<fld1>[^/]*)/(?<fld2>[^/]*)/(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+WARNING:[\s]+)[\s]+(?<filename>[^\s]*)[\s]+does[\s]+not[\s]+exist,[\s]+using[\s]+fixed[\s]+modulus$" }
				id => "message-000249"
				add_field => {
					"[event][id]" => "000249"
					"[rsa][message][id1]" => "000249"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000250
		# line in RSA:  { <hostname> /<fld1>/<fld2>/<agent>[<process_id>]: userauth_hostbased mismatch: | <hostname> <severity> /<fld1>/<fld2>/<agent>[<process_id>]: userauth_hostbased mismatch: } client sends <fld3>, but we resolve <fld4> to <fld5>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+/(?<fld1>[^/]*)/(?<fld2>[^/]*)/(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+userauth_hostbased[\s]+mismatch:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+/(?<fld1>[^/]*)/(?<fld2>[^/]*)/(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+userauth_hostbased[\s]+mismatch:[\s]+)[\s]+client[\s]+sends[\s]+(?<fld3>[^,]*),[\s]+but[\s]+we[\s]+resolve[\s]+(?<fld4>[^\s]*)[\s]+to[\s]+(?<fld5>.*)$" }
				id => "message-000250"
				add_field => {
					"[event][id]" => "000250"
					"[rsa][message][id1]" => "000250"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000251
		# line in RSA:  { <hostname> /<fld1>/<fld2>/<agent>[<process_id>]: Accepted | <hostname> <severity> /<fld1>/<fld2>/<agent>[<process_id>]: Accepted } hostbased for <username> from <saddr> port <sport> <network_service>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+/(?<fld1>[^/]*)/(?<fld2>[^/]*)/(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Accepted[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+/(?<fld1>[^/]*)/(?<fld2>[^/]*)/(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Accepted[\s]+)[\s]+hostbased[\s]+for[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+(?<network_service>.*)$" }
				id => "message-000251"
				add_field => {
					"[event][id]" => "000251"
					"[rsa][message][id1]" => "000251"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000176
		# line in RSA: <hostname> <agent>[<process_id>]: lastlog_openseek: <filename> is not a file or directory!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: lastlog_openseek: %{filename} is not a file or directory!" }
				id => "message-000176"
				add_field => {
					"[event][id]" => "000176"
					"[rsa][message][id1]" => "000176"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000192
		# line in RSA: <hostname> <agent>[<process_id>]: Received disconnect from <saddr>: <fld1>: The user disconnected the application
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Received disconnect from %{saddr}: %{fld1}: The user disconnected the application" }
				id => "message-000192"
				add_field => {
				"event_description" => " The user disconnected the application"
					"[event][id]" => "000192"
					"[rsa][message][id1]" => "000192"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000179
		# line in RSA: <hostname> <agent>(<service>)[<process_id>]: User=<username> tty=<terminal> host=<saddr> failed to login after <dclass_counter1> attempts (start="<fld1> <fld2>  <fld3> <fld4> <fld5>" end="<fld6> <fld7>  <fld8> <fld9> <fld10>").
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: User=%{username} tty=%{terminal} host=%{saddr} failed to login after %{dclass_counter1} attempts (start=\"%{fld1} %{fld2}  %{fld3} %{fld4} %{fld5}\" end=\"%{fld6} %{fld7}  %{fld8} %{fld9} %{fld10}\")." }
				id => "message-000179"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "000179"
					"[rsa][message][id1]" => "000179"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000177_01
		# line in RSA: {<hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: }refused connect from <saddr> (<fld2>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)refused[\s]+connect[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)$" }
				id => "message-000177_01"
				add_field => {
					"[event][id]" => "000177_01"
					"[rsa][message][id1]" => "000177_01"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000177
		# line in RSA: <hostname> <agent>[<process_id>]: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{event_description}" }
				id => "message-000177"
				add_field => {
					"[event][id]" => "000177"
					"[rsa][message][id1]" => "000177"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "su" {
		# MESSAGE 000073
		# line in RSA:  <hostname> <agent>(<service>)[<process_id>]: session opened for user <username> by { LOGIN(uid=<uid>) | (uid=<uid>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<service>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+session[\s]+opened[\s]+for[\s]+user[\s]+(?<username>[^\s]*)[\s]+by[\s]+([\s]*LOGIN\(uid=(?<uid>[^\)]*)\)[\s]+|[\s]*\(uid=(?<uid>[^\)]*)\)[\s]+)$" }
				id => "message-000073"
				add_field => {
					"[event][id]" => "000073"
					"[rsa][message][id1]" => "000073"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000219
		# line in RSA:  <hostname> <agent>(<service>)[<process_id>]: session closed for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: session closed for user %{username}" }
				id => "message-000219"
				add_field => {
					"[event][id]" => "000219"
					"[rsa][message][id1]" => "000219"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SubDomain" {
		# MESSAGE 000044
		# line in RSA: <hostname> <agent>: REJECTING x access to <service> (<fld4>(<fld1>) profile <fld2> active <fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: REJECTING x access to %{service} (%{fld4}(%{fld1}) profile %{fld2} active %{fld3})" }
				id => "message-000044"
				add_field => {
				"event_description" => " Rejecting x access"
					"[event][id]" => "000044"
					"[rsa][message][id1]" => "000044"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000202
		# line in RSA: <hostname> <agent>: REJECTING access to capability '<action>' (<fld1> profile <fld2> active <fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: REJECTING access to capability '%{action}' (%{fld1} profile %{fld2} active %{fld3})" }
				id => "message-000202"
				add_field => {
				"event_description" => " Rejecting access to capability"
					"[event][id]" => "000202"
					"[rsa][message][id1]" => "000202"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "syslog-ng" {
		# MESSAGE 000022
		# line in RSA: <hostname> <agent>[<process_id>]: SIGHUP received, restarting syslog-ng
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: SIGHUP received, restarting syslog-ng" }
				id => "message-000022"
				add_field => {
				"event_description" => " SIGHUP received, restarting syslog-ng"
					"[event][id]" => "000022"
					"[rsa][message][id1]" => "000022"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000120
		# line in RSA: <hostname> <agent>[<process_id>]: new configuration initialized
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: new configuration initialized" }
				id => "message-000120"
				add_field => {
				"event_description" => " new configuration initialized"
					"[event][id]" => "000120"
					"[rsa][message][id1]" => "000120"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000164
		# line in RSA: <hostname> <agent>[<process_id>]: <result>; fd='<fld1>', error=<disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{result}; fd='%{fld1}', error=%{disposition}" }
				id => "message-000164"
				add_field => {
					"[event][id]" => "000164"
					"[rsa][message][id1]" => "000164"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000122
		# line in RSA: <hostname> <agent>[<process_id>]: Macro escaping can only be specified for inline templates;
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Macro escaping can only be specified for inline templates;" }
				id => "message-000122"
				add_field => {
				"event_description" => " Macro escaping can only be specified for inline templates"
					"[event][id]" => "000122"
					"[rsa][message][id1]" => "000122"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000119
		# line in RSA: <hostname> <agent>[<process_id>]: SIGHUP received, reloading configuration;
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: SIGHUP received, reloading configuration;" }
				id => "message-000119"
				add_field => {
				"event_description" => " SIGHUP received, reloading configuration"
					"[event][id]" => "000119"
					"[rsa][message][id1]" => "000119"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000225
		# line in RSA: <hostname> <agent>[<process_id>]: SIGTERM received, terminating;
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: SIGTERM received, terminating;" }
				id => "message-000225"
				add_field => {
				"event_description" => " SIGTERM received, terminating"
					"[event][id]" => "000225"
					"[rsa][message][id1]" => "000225"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000226
		# line in RSA: <hostname> <agent>[<process_id>]: syslog-ng shutting down; version='<version>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: syslog-ng shutting down; version='%{version}'" }
				id => "message-000226"
				add_field => {
				"event_description" => " syslog-ng shutting down"
					"[event][id]" => "000226"
					"[rsa][message][id1]" => "000226"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000123
		# line in RSA: <hostname> <agent>[<process_id>]: Connection broken; time_reopen='<fld1>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Connection broken; time_reopen='%{fld1}'" }
				id => "message-000123"
				add_field => {
				"event_description" => " Connection broken"
					"[event][id]" => "000123"
					"[rsa][message][id1]" => "000123"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000203
		# line in RSA: <hostname> <agent>[<process_id>]: Connection broken to AF_INET(<hostip>:<network_port>), reopening in <fld1> seconds 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Connection broken to AF_INET(%{hostip}:%{network_port}), reopening in %{fld1} seconds" }
				id => "message-000203"
				add_field => {
				"event_description" => " Connection broken"
					"[event][id]" => "000203"
					"[rsa][message][id1]" => "000203"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000129
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } Internal error, duplicate configuration elements refer to the same persistent config; name='<event_source>(<filename>)'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Internal[\s]+error,[\s]+duplicate[\s]+configuration[\s]+elements[\s]+refer[\s]+to[\s]+the[\s]+same[\s]+persistent[\s]+config;[\s]+name='(?<event_source>[^\(]*)\((?<filename>[^\)]*)\)'$" }
				id => "message-000129"
				add_field => {
				"event_description" => " Internal error, duplicate configuration elements refer to the same persistent config"
					"[event][id]" => "000129"
					"[rsa][message][id1]" => "000129"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000163
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } Configuration reload request received, reloading configuration; 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Configuration[\s]+reload[\s]+request[\s]+received,[\s]+reloading[\s]+configuration;[\s]+$" }
				id => "message-000163"
				add_field => {
				"event_description" => " Configuration reload request received, reloading configuration;"
					"[event][id]" => "000163"
					"[rsa][message][id1]" => "000163"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000206:01
		# line in RSA: <hostname> <severity> syslog-ng[<process_id>]: Syslog connection established; fd='<fld1>', server='AF_INET(<saddr>:<sport>)', local='AF_INET(<daddr>:<dport>)'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} syslog-ng[%{process_id}]: Syslog connection established; fd='%{fld1}', server='AF_INET(%{saddr}:%{sport})', local='AF_INET(%{daddr}:%{dport})'" }
				id => "message-000206:01"
				add_field => {
				"agent" => "syslog-ng"
				"event_description" => "Syslog connection established"
					"[event][id]" => "000206:01"
					"[rsa][message][id1]" => "000206:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000206:02
		# line in RSA: <hostname> <severity> syslog-ng[<process_id>]: Syslog connection broken; fd='<fld1>', server='AF_INET(<hostip>:<network_port>)', time_reopen='<fld2>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} syslog-ng[%{process_id}]: Syslog connection broken; fd='%{fld1}', server='AF_INET(%{hostip}:%{network_port})', time_reopen='%{fld2}'" }
				id => "message-000206:02"
				add_field => {
				"agent" => "syslog-ng"
				"event_description" => "Syslog connection broken"
					"[event][id]" => "000206:02"
					"[rsa][message][id1]" => "000206:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000206:03
		# line in RSA: <hostname> <severity> syslog-ng[<process_id>]: Error binding socket; addr='AF_INET(<hostip>:<network_port>)', error='<disposition>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} syslog-ng[%{process_id}]: Error binding socket; addr='AF_INET(%{hostip}:%{network_port})', error='%{disposition}'" }
				id => "message-000206:03"
				add_field => {
				"agent" => "syslog-ng"
				"event_description" => "Error binding socket"
					"[event][id]" => "000206:03"
					"[rsa][message][id1]" => "000206:03"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000206:04
		# line in RSA: <hostname> <severity> syslog-ng[<process_id>]: Initiating connection failed, reconnecting; time_reopen='<fld2>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} syslog-ng[%{process_id}]: Initiating connection failed, reconnecting; time_reopen='%{fld2}'" }
				id => "message-000206:04"
				add_field => {
				"agent" => "syslog-ng"
				"event_description" => "Initiating connection failed, reconnecting"
					"[event][id]" => "000206:04"
					"[rsa][message][id1]" => "000206:04"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000206:05
		# line in RSA: <hostname> <severity> syslog-ng[<process_id>]: Suspending write operation because of an I/O error; fd='<fld1>', time_reopen='<fld2>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} syslog-ng[%{process_id}]: Suspending write operation because of an I/O error; fd='%{fld1}', time_reopen='%{fld2}'" }
				id => "message-000206:05"
				add_field => {
				"agent" => "syslog-ng"
				"event_description" => "Suspending write operation because of an I/O error"
					"[event][id]" => "000206:05"
					"[rsa][message][id1]" => "000206:05"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000206
		# line in RSA:  { <hostname> <severity> syslog-ng[<process_id>]: | <hostname> syslog-ng[<process_id>]: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+syslog\-ng\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+syslog\-ng\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000206"
				add_field => {
				"agent" => "syslog-ng"
					"[event][id]" => "000206"
					"[rsa][message][id1]" => "000206"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000329
		# line in RSA:  { <hostname> <severity> syslog-ng: | <hostname> syslog-ng: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+syslog\-ng:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+syslog\-ng:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000329"
				add_field => {
				"agent" => "syslog-ng"
					"[event][id]" => "000329"
					"[rsa][message][id1]" => "000329"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId189
	# line in RSA:  { <hostname> <severity> <agent>: <application> startup | <hostname> <agent>: <application> startup } succeeded
	else if [logstash][msgparser][id] == "msgParserId189" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<application>[^\s]*)[\s]+startup[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<application>[^\s]*)[\s]+startup[\s]+)[\s]+succeeded$" }
			id => "msgParserId189"
			add_field => {
				"event_description" => " syslog-ng startup succeeded"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "system_check" {
		# MESSAGE 000037
		# line in RSA:  <hostname> <agent>: <fld1>:<fld2>: Chassis fan <fld3>: status (<resultcode>) is bad.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: %{fld1}:%{fld2}: Chassis fan %{fld3}: status (%{resultcode}) is bad." }
				id => "message-000037"
				add_field => {
					"[event][id]" => "000037"
					"[rsa][message][id1]" => "000037"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000165
		# line in RSA:  <hostname> <agent>: <fld1>:<fld2>: Chassis power supply <fld3> is not supplying power (status: <resultcode>): make sure it is plugged in.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: %{fld1}:%{fld2}: Chassis power supply %{fld3} is not supplying power (status: %{resultcode}): make sure it is plugged in." }
				id => "message-000165"
				add_field => {
				"event_description" => " Chassis power supply is not supplying power: make sure it is plugged in."
					"[event][id]" => "000165"
					"[rsa][message][id1]" => "000165"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "tmm" {
		# MESSAGE 000024
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Limiting { closed | open } port RST response from <change_old> to <change_new> packets/sec 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Limiting[\s]+([\s]*closed[\s]+|[\s]*open[\s]+)[\s]+port[\s]+RST[\s]+response[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>[^\s]*)[\s]+packets/sec[\s]+$" }
				id => "message-000024"
				add_field => {
				"event_description" => " Limiting closed port RST response"
					"[event][id]" => "000024"
					"[rsa][message][id1]" => "000024"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000025
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Packet rejected remote IP <saddr> port <sport> local IP <daddr> port <dport> proto <protocol>: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Packet rejected remote IP %{saddr} port %{sport} local IP %{daddr} port %{dport} proto %{protocol}: %{result}" }
				id => "message-000025"
				add_field => {
				"event_description" => " Packet rejected. Port closed"
					"[event][id]" => "000025"
					"[rsa][message][id1]" => "000025"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000026
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>: repeated <fld2> { times | time }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):[\s]+repeated[\s]+(?<fld2>[^\s]*)[\s]+([\s]*times[\s]+|[\s]*time[\s]+)$" }
				id => "message-000026"
				add_field => {
					"[event][id]" => "000026"
					"[rsa][message][id1]" => "000026"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000031
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: TCL error: Rule <rulename> <<HTTP_REQUEST> - <result> (line <fld3>) <space> invoked from within "HTTP::redirect "<url>""
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: TCL error: Rule %{rulename} <HTTP_REQUEST> - %{result} (line %{fld3}) %{space} invoked from within \"HTTP::redirect \"%{url}\"\"" }
				id => "message-000031"
				add_field => {
				"event_description" => " TCL Error in HTTP Request - Operation not supported. Multiple redirect/respond invocations not allowed"
				"info" => "HTTP Redirect"
					"[event][id]" => "000031"
					"[rsa][message][id1]" => "000031"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000032
		# line in RSA: <hostname> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: URL: <url> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: URL: %{url}" }
				id => "message-000032"
				add_field => {
					"[event][id]" => "000032"
					"[rsa][message][id1]" => "000032"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000033
		# line in RSA: <hostname> <agent>[<process_id>]: Rule <rulename> <<CLIENT_ACCEPTED>: Bio {Remote | Local} address is <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<CLIENT_ACCEPTED>:[\s]+Bio[\s]+(Remote[\s]+|[\s]*Local)[\s]+address[\s]+is[\s]+(?<saddr>.*)$" }
				id => "message-000033"
				add_field => {
					"[event][id]" => "000033"
					"[rsa][message][id1]" => "000033"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000034
		# line in RSA: <hostname> <agent>[<process_id>]: Rule <rulename> <<CLIENT_ACCEPTED>: USING fit24tst SNAT for Destination <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Rule %{rulename} <CLIENT_ACCEPTED>: USING fit24tst SNAT for Destination %{daddr}" }
				id => "message-000034"
				add_field => {
				"event_description" => " Using fit24tst SNAT for destination"
					"[event][id]" => "000034"
					"[rsa][message][id1]" => "000034"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000035
		# line in RSA: <hostname> <agent>[<process_id>]: Rule <rulename> <<CLIENT_ACCEPTED>: USING SMTP SNAT for Destination <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Rule %{rulename} <CLIENT_ACCEPTED>: USING SMTP SNAT for Destination %{daddr}" }
				id => "message-000035"
				add_field => {
				"event_description" => " Using SMTP SNAT for destination"
					"[event][id]" => "000035"
					"[rsa][message][id1]" => "000035"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000036
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: http_process_state_prepend - <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: http_process_state_prepend - %{event_description}" }
				id => "message-000036"
				add_field => {
				"action" => " http_process_state_prepend"
					"[event][id]" => "000036"
					"[rsa][message][id1]" => "000036"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000062
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: No members available for pool <pool_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: No members available for pool %{pool_name}" }
				id => "message-000062"
				add_field => {
				"event_description" => " No members available for pool"
					"[event][id]" => "000062"
					"[rsa][message][id1]" => "000062"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000347
		# line in RSA: { <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Pool | <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Pool } <pool_name> now has available members
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Pool[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Pool[\s]+)[\s]+(?<pool_name>[^\s]*)[\s]+now[\s]+has[\s]+available[\s]+members$" }
				id => "message-000347"
				add_field => {
				"event_description" => " Pool has available members"
					"[event][id]" => "000347"
					"[rsa][message][id1]" => "000347"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000198
		# line in RSA:  { <hostname> <agent>[<process_id>]: | <hostname> <severity> <agent>[<process_id>]: } Rule <rulename> <fld1>: Client: <saddr>, Pool member <daddr>:<dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+(?<fld1>[^:]*):[\s]+Client:[\s]+(?<saddr>[^,]*),[\s]+Pool[\s]+member[\s]+(?<daddr>[^:]*):(?<dport>.*)$" }
				id => "message-000198"
				add_field => {
					"[event][id]" => "000198"
					"[rsa][message][id1]" => "000198"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000124
		# line in RSA: <hostname> <agent>[<process_id>]: Rule <rulename> <<<info>>: Unmatched redirect
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Rule %{rulename} <%{info}>: Unmatched redirect" }
				id => "message-000124"
				add_field => {
				"event_description" => " Unmatched redirect"
					"[event][id]" => "000124"
					"[rsa][message][id1]" => "000124"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000429
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: HTTP header | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: HTTP header } (<observed_val>) exceeded maximum allowed size of <expected_val>  (Client side: vip=<fld4> profile=<fld5> pool=<pool_name>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+HTTP[\s]+header[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+HTTP[\s]+header[\s]+)[\s]+\((?<observed_val>[^\)]*)\)[\s]+exceeded[\s]+maximum[\s]+allowed[\s]+size[\s]+of[\s]+(?<expected_val>[^\s]*)[\s]+\(Client[\s]+side:[\s]+vip=(?<fld4>[^\s]*)[\s]+profile=(?<fld5>[^\s]*)[\s]+pool=(?<pool_name>[^\)]*)\)$" }
				id => "message-000429"
				add_field => {
				"event_description" => " HTTP header exceeded maximum allowed size"
					"[event][id]" => "000429"
					"[rsa][message][id1]" => "000429"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000353
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Tcpdump | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Tcpdump } starting bcast on <fld3> from <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Tcpdump[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Tcpdump[\s]+)[\s]+starting[\s]+bcast[\s]+on[\s]+(?<fld3>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-000353"
				add_field => {
				"event_description" => " Tcpdump starting bcast"
					"[event][id]" => "000353"
					"[rsa][message][id1]" => "000353"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000354
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Tcpdump | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Tcpdump } stopping on <daddr>:<dport> from <saddr>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Tcpdump[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Tcpdump[\s]+)[\s]+stopping[\s]+on[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+from[\s]+(?<saddr>[^:]*):(?<sport>.*)$" }
				id => "message-000354"
				add_field => {
				"event_description" => " Tcpdump stopping"
					"[event][id]" => "000354"
					"[rsa][message][id1]" => "000354"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000356
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: GDESK-Drop | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: GDESK-Drop } (<fld3>): reject on <vlan>, len: <fld4> [IPv4 <fld5> <saddr> -> <daddr> TCP <sport> -> <dport> <fld6>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+GDESK\-Drop[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+GDESK\-Drop[\s]+)[\s]+\((?<fld3>[^\)]*)\):[\s]+reject[\s]+on[\s]+(?<vlan>[^,]*),[\s]+len:[\s]+(?<fld4>[^\s]*)[\s]+\[IPv4[\s]+(?<fld5>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+\->[\s]+(?<daddr>[^\s]*)[\s]+TCP[\s]+(?<sport>[^\s]*)[\s]+\->[\s]+(?<dport>[^\s]*)[\s]+(?<fld6>[^\]]*)\]$" }
				id => "message-000356"
				add_field => {
				"event_description" => " GDESK-Drop"
					"[event][id]" => "000356"
					"[rsa][message][id1]" => "000356"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000500
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: redirect <fld1> <network_port>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: redirect %{fld1} %{network_port}" }
				id => "message-000500"
				add_field => {
				"a" => " redirect "
				"event_description" => "%{a}%{fld1}"
					"[event][id]" => "000500"
					"[rsa][message][id1]" => "000500"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000501
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: WEBLogin login Portal Bypassed <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: WEBLogin login Portal Bypassed %{url}" }
				id => "message-000501"
				add_field => {
				"event_description" => " WEBLogin login Portal Bypassed"
					"[event][id]" => "000501"
					"[rsa][message][id1]" => "000501"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000381
		# line in RSA:  <hostname> <agent>[<process_id>]: DDoS--> <rulename> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: DDoS--> %{rulename} from %{saddr}" }
				id => "message-000381"
				add_field => {
					"[event][id]" => "000381"
					"[rsa][message][id1]" => "000381"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000370
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: RESOLVED rrtype = <fld3>, wip = <url>, LDNS(<domain>) to vs(<fld4>) using <pool_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: RESOLVED rrtype = %{fld3}, wip = %{url}, LDNS(%{domain}) to vs(%{fld4}) using %{pool_name}" }
				id => "message-000370"
				add_field => {
					"[event][id]" => "000370"
					"[rsa][message][id1]" => "000370"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_01
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: START::{Cookie value: <web_cookie>|Cookie name: <fld5>}.....
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+START::(Cookie[\s]+value:[\s]+(?<web_cookie>[^\.]*)|Cookie[\s]+name:[\s]+(?<fld5>[^\.]*))\.\.\.\.\.$" }
				id => "message-000362_01"
				add_field => {
					"[event][id]" => "000362_01"
					"[rsa][message][id1]" => "000362_01"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_02
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<SERVER_CONNECTED>: Got connection: {(<info>) Client|Client}(<saddr>:<sport>)<<->(<stransaddr>:<stransport>)LTM(<dtransaddr>:<dtransport>)<<->(<daddr>:<dport>)Server
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<SERVER_CONNECTED>:[\s]+Got[\s]+connection:[\s]+(\((?<info>[^\)]*)\)[\s]+Client|Client)\((?<saddr>[^:]*):(?<sport>[^\)]*)\)<\->\((?<stransaddr>[^:]*):(?<stransport>[^\)]*)\)LTM\((?<dtransaddr>[^:]*):(?<dtransport>[^\)]*)\)<\->\((?<daddr>[^:]*):(?<dport>[^\)]*)\)Server$" }
				id => "message-000362_02"
				add_field => {
					"[event][id]" => "000362_02"
					"[rsa][message][id1]" => "000362_02"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_03
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: Replacing cookie <fld4> with  <web_cookie>; Secure; HttpOnly
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_RESPONSE>: Replacing cookie %{fld4} with  %{web_cookie}; Secure; HttpOnly" }
				id => "message-000362_03"
				add_field => {
					"[event][id]" => "000362_03"
					"[rsa][message][id1]" => "000362_03"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_04
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: {BYPASS-Cookie found: <fld9>, cookie value: <web_cookie> Bypass persistence cookie - <fld4>|Cookie found: <fld10> = <web_cookie>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+(BYPASS\-Cookie[\s]+found:[\s]+(?<fld9>[^,]*),[\s]+cookie[\s]+value:[\s]+(?<web_cookie>[^\s]*)[\s]+Bypass[\s]+persistence[\s]+cookie[\s]+\-[\s]+(?<fld4>.*)|Cookie[\s]+found:[\s]+(?<fld10>[^\s]*)[\s]+=[\s]+(?<web_cookie>.*))$" }
				id => "message-000362_04"
				add_field => {
					"[event][id]" => "000362_04"
					"[rsa][message][id1]" => "000362_04"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_05
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: (<fld3>) <hostip> -> querystring = <web_query>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: (%{fld3}) %{hostip} -> querystring = %{web_query}" }
				id => "message-000362_05"
				add_field => {
					"[event][id]" => "000362_05"
					"[rsa][message][id1]" => "000362_05"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_06
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: } Rule <rulename> <<SERVER_CONNECTED>: <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<SERVER_CONNECTED>:[\s]+(?<hostip>.*)$" }
				id => "message-000362_06"
				add_field => {
					"[event][id]" => "000362_06"
					"[rsa][message][id1]" => "000362_06"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_07
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: Rejected request: <hostip> User-Agent:<user_agent> requested <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: Rejected request: %{hostip} User-Agent:%{user_agent} requested %{url}" }
				id => "message-000362_07"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000362_07"
					"[rsa][message][id1]" => "000362_07"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_08
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: c-ip=<hostip>^^method=<web_method>^^uri=<fld1>^^host=<dhost>^^s-ip=<saddr>^^pool-name=<pool_name>^^s-port=<sport>^^status=<resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_RESPONSE>: c-ip=%{hostip}^^method=%{web_method}^^uri=%{fld1}^^host=%{dhost}^^s-ip=%{saddr}^^pool-name=%{pool_name}^^s-port=%{sport}^^status=%{resultcode}" }
				id => "message-000362_08"
				add_field => {
					"[event][id]" => "000362_08"
					"[rsa][message][id1]" => "000362_08"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm_012
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld4>:<fld5>: reject ACL:<fld15>:<packets>packet:<protocol><saddr>:<sport>-><daddr>:<dport>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm_01
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld4>:<fld5>: allow ACL:<fld15>:<packets>packet:<protocol><saddr>:<sport>-><daddr>:<dport>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm_03
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}Rule<rulename><<CLIENT_ACCEPTED>: INFO<info>:<saddr>:<sport>-><daddr>:<dport>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE 000362_09
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: SSL Handshake failed for TCP <saddr>:<sport> -> <daddr>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SSL Handshake failed for TCP %{saddr}:%{sport} -> %{daddr}:%{dport}" }
				id => "message-000362_09"
				add_field => {
				"event_description" => "SSL Handshake failed for TCP"
					"[event][id]" => "000362_09"
					"[rsa][message][id1]" => "000362_09"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362_10
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Rule <rulename> <<HTTP_REQUEST>: {local<fld3>."<result>"|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+(local(?<fld3>[^\.]*)\.\"(?<result>[^\"]*)\"|(?<event_description>.*))$" }
				id => "message-000362_10"
				add_field => {
					"[event][id]" => "000362_10"
					"[rsa][message][id1]" => "000362_10"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000362
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: %{event_description}" }
				id => "message-000362"
				add_field => {
					"[event][id]" => "000362"
					"[rsa][message][id1]" => "000362"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000388_01
		# line in RSA: <hostname> {<severity> <agent>[<process_id>]|<agent>[<process_id>]}: Rule <rulename> <<HTTP_REQUEST>: <fld2>| IP address is <saddr> |  SSL cipher strength is <protocol> | cipher used <s_cipher> | user agent is <user_agent> | HTTP version is <version>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+((?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]|(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]):[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+(?<fld2>[^\|]*)\|[\s]+IP[\s]+address[\s]+is[\s]+(?<saddr>[^\s]*)[\s]+\|[\s]+SSL[\s]+cipher[\s]+strength[\s]+is[\s]+(?<protocol>[^\s]*)[\s]+\|[\s]+cipher[\s]+used[\s]+(?<s_cipher>[^\s]*)[\s]+\|[\s]+user[\s]+agent[\s]+is[\s]+(?<user_agent>[^\s]*)[\s]+\|[\s]+HTTP[\s]+version[\s]+is[\s]+(?<version>.*)$" }
				id => "message-000388_01"
				add_field => {
					"[event][id]" => "000388_01"
					"[rsa][message][id1]" => "000388_01"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000388
		# line in RSA: <hostname> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: <year>-<month>-<date> <hour>:<min>:<sec> <fld2> <saddr> - <daddr> <dport> <web_method> <web_query>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: %{year}-%{month}-%{date} %{hour}:%{min}:%{sec} %{fld2} %{saddr} - %{daddr} %{dport} %{web_method} %{web_query}" }
				id => "message-000388"
				add_field => {
					"[event][id]" => "000388"
					"[rsa][message][id1]" => "000388"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000388_03
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: Rejected <hostip> with {malicious SCRIPTS|SQL}, requested URL <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+Rejected[\s]+(?<hostip>[^\s]*)[\s]+with[\s]+(malicious[\s]+SCRIPTS|SQL),[\s]+requested[\s]+URL[\s]+(?<url>.*)$" }
				id => "message-000388_03"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000388_03"
					"[rsa][message][id1]" => "000388_03"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000388_02
		# line in RSA: <hostname> {<severity> <agent>[<process_id>]|<agent>[<process_id>]}: Rule <rulename> <<HTTP_REQUEST>: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+((?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]|(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]):[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+(?<event_description>.*)$" }
				id => "message-000388_02"
				add_field => {
					"[event][id]" => "000388_02"
					"[rsa][message][id1]" => "000388_02"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000441
		# line in RSA: <hostname> <agent>[<process_id>]: Cert authentification success: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Cert authentification success: %{info}" }
				id => "message-000441"
				add_field => {
				"event_description" => "Cert authentification success"
					"[event][id]" => "000441"
					"[rsa][message][id1]" => "000441"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm_07
		# line in RSA: <hostname><agent>[<process_id>]:<fld1>:<fld2>:<fld3>:<fld4>: Initializing Access profile<event_description>:<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}%{agent}[%{process_id}]:%{fld1}:%{fld2}:%{fld3}:%{fld4}: Initializing Access profile%{event_description}:%{fld5}" }
				id => "message-tmm_07"
				add_field => {
					"[event][id]" => "tmm_07"
					"[rsa][message][id1]" => "tmm_07"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm_08
		# line in RSA: <hostname><agent>[<process_id>]: Rule<rulename><<ACCESS_POLICY_COMPLETED>: INFO<info>, ctx_push_status:<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}%{agent}[%{process_id}]: Rule%{rulename}<ACCESS_POLICY_COMPLETED>: INFO%{info}, ctx_push_status:%{result}" }
				id => "message-tmm_08"
				add_field => {
					"[event][id]" => "tmm_08"
					"[rsa][message][id1]" => "tmm_08"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm_10
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}<fld1><fld2>,<fld3>,<fld4>,<fld5>,<saddr>,<username>,<url>,<fld6>,<fld7>,<fld8>,<fld9>,<fld10>,<fld11>,<fld12>,<disposition>,<fld13>,<domain>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm_06
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld4>: New session from client IP<saddr>(<fld5>) at VIP<hostip>Listener<fld16>(Reputation=<fld6>)
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm_09
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld4>:<fld5>Session statistics - bytes in:<rbytes>, bytes out:<sbytes>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm_11
		# line in RSA: <hostname><agent>[<process_id>]:<fld1>:<fld2>:<fld3>:<fld4>:<fld5>: Request classification returned<fld6>categories: [<fld7>] for URL:<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}%{agent}[%{process_id}]:%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}: Request classification returned%{fld6}categories: [%{fld7}] for URL:%{url}" }
				id => "message-tmm_11"
				add_field => {
					"[event][id]" => "tmm_11"
					"[rsa][message][id1]" => "tmm_11"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm_12
		# line in RSA: <hostname><agent>[<process_id>]:<fld1>:<fld2>:<fld3>:<fld4>:<fld5>:<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}%{agent}[%{process_id}]:%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{event_description}" }
				id => "message-tmm_12"
				add_field => {
					"[event][id]" => "tmm_12"
					"[rsa][message][id1]" => "tmm_12"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "tmm1" {
		# MESSAGE 000197
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: No members available for pool <pool_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: No members available for pool %{pool_name}" }
				id => "message-000197"
				add_field => {
				"event_description" => " No members available for pool"
					"[event][id]" => "000197"
					"[rsa][message][id1]" => "000197"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000196
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Pool <pool_name> now has available members
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Pool %{pool_name} now has available members" }
				id => "message-000196"
				add_field => {
				"event_description" => " Pool has available members"
					"[event][id]" => "000196"
					"[rsa][message][id1]" => "000196"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000199
		# line in RSA:  { <hostname> <agent>[<process_id>]: | <hostname> <severity> <agent>[<process_id>]: } Rule <rulename> <fld1>: Client: <saddr>, Pool member <daddr>:<dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+(?<fld1>[^:]*):[\s]+Client:[\s]+(?<saddr>[^,]*),[\s]+Pool[\s]+member[\s]+(?<daddr>[^:]*):(?<dport>.*)$" }
				id => "message-000199"
				add_field => {
					"[event][id]" => "000199"
					"[rsa][message][id1]" => "000199"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000224
		# line in RSA:  { <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Interface | <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Interface } <interface>: link is <disposition>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Interface[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Interface[\s]+)[\s]+(?<interface>[^:]*):[\s]+link[\s]+is[\s]+(?<disposition>.*)$" }
				id => "message-000224"
				add_field => {
					"[event][id]" => "000224"
					"[rsa][message][id1]" => "000224"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000282
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Limiting { closed | open } port RST response from <change_old> to <change_new> packets/sec 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Limiting[\s]+([\s]*closed[\s]+|[\s]*open[\s]+)[\s]+port[\s]+RST[\s]+response[\s]+from[\s]+(?<change_old>[^\s]*)[\s]+to[\s]+(?<change_new>[^\s]*)[\s]+packets/sec[\s]+$" }
				id => "message-000282"
				add_field => {
				"event_description" => " Limiting closed port RST response"
					"[event][id]" => "000282"
					"[rsa][message][id1]" => "000282"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000283
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: http_process_state_prepend | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: http_process_state_prepend } - Invalid action <action> during <fld3> (Server side: vip=<fld4> profile=<fld5> pool=<pool_name>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+http_process_state_prepend[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+http_process_state_prepend[\s]+)[\s]+\-[\s]+Invalid[\s]+action[\s]+(?<action>[^\s]*)[\s]+during[\s]+(?<fld3>[^\s]*)[\s]+\(Server[\s]+side:[\s]+vip=(?<fld4>[^\s]*)[\s]+profile=(?<fld5>[^\s]*)[\s]+pool=(?<pool_name>[^\)]*)\)$" }
				id => "message-000283"
				add_field => {
				"event_description" => " Invalid action"
					"[event][id]" => "000283"
					"[rsa][message][id1]" => "000283"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000286
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: HTTP header | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: HTTP header } (<observed_val>) exceeded maximum allowed size of <expected_val>  (Client side: vip=<fld4> profile=<fld5> pool=<pool_name>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+HTTP[\s]+header[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+HTTP[\s]+header[\s]+)[\s]+\((?<observed_val>[^\)]*)\)[\s]+exceeded[\s]+maximum[\s]+allowed[\s]+size[\s]+of[\s]+(?<expected_val>[^\s]*)[\s]+\(Client[\s]+side:[\s]+vip=(?<fld4>[^\s]*)[\s]+profile=(?<fld5>[^\s]*)[\s]+pool=(?<pool_name>[^\)]*)\)$" }
				id => "message-000286"
				add_field => {
				"event_description" => " HTTP header exceeded maximum allowed size"
					"[event][id]" => "000286"
					"[rsa][message][id1]" => "000286"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000382
		# line in RSA:  <hostname> <agent>[<process_id>]: DDoS--> <rulename> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: DDoS--> %{rulename} from %{saddr}" }
				id => "message-000382"
				add_field => {
					"[event][id]" => "000382"
					"[rsa][message][id1]" => "000382"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000395
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Request {(<web_method> <web_query>)|<web_method> <web_query>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Request[\s]+(\((?<web_method>[^\s]*)[\s]+(?<web_query>[^\)]*)\)|(?<web_method>[^\s]*)[\s]+(?<web_query>.*))$" }
				id => "message-000395"
				add_field => {
					"[event][id]" => "000395"
					"[rsa][message][id1]" => "000395"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_01
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: START::{Cookie value: <web_cookie>|Cookie name: <fld10>}.....
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+START::(Cookie[\s]+value:[\s]+(?<web_cookie>[^\.]*)|Cookie[\s]+name:[\s]+(?<fld10>[^\.]*))\.\.\.\.\.$" }
				id => "message-000396_01"
				add_field => {
					"[event][id]" => "000396_01"
					"[rsa][message][id1]" => "000396_01"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_02
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<SERVER_CONNECTED>: Got connection: {(<info>) Client|Client}(<saddr>:<sport>)<<->(<stransaddr>:<stransport>)LTM(<dtransaddr>:<dtransport>)<<->(<daddr>:<dport>)Server
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<SERVER_CONNECTED>:[\s]+Got[\s]+connection:[\s]+(\((?<info>[^\)]*)\)[\s]+Client|Client)\((?<saddr>[^:]*):(?<sport>[^\)]*)\)<\->\((?<stransaddr>[^:]*):(?<stransport>[^\)]*)\)LTM\((?<dtransaddr>[^:]*):(?<dtransport>[^\)]*)\)<\->\((?<daddr>[^:]*):(?<dport>[^\)]*)\)Server$" }
				id => "message-000396_02"
				add_field => {
					"[event][id]" => "000396_02"
					"[rsa][message][id1]" => "000396_02"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_03
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: Replacing cookie <fld7> with  <web_cookie>; Secure; HttpOnly
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_RESPONSE>: Replacing cookie %{fld7} with  %{web_cookie}; Secure; HttpOnly" }
				id => "message-000396_03"
				add_field => {
					"[event][id]" => "000396_03"
					"[rsa][message][id1]" => "000396_03"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_04
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: {BYPASS-Cookie found: <fld5>, cookie value: <web_cookie> Bypass persistence cookie - <fld4>|Cookie found: <fld8> = <web_cookie>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+(BYPASS\-Cookie[\s]+found:[\s]+(?<fld5>[^,]*),[\s]+cookie[\s]+value:[\s]+(?<web_cookie>[^\s]*)[\s]+Bypass[\s]+persistence[\s]+cookie[\s]+\-[\s]+(?<fld4>.*)|Cookie[\s]+found:[\s]+(?<fld8>[^\s]*)[\s]+=[\s]+(?<web_cookie>.*))$" }
				id => "message-000396_04"
				add_field => {
					"[event][id]" => "000396_04"
					"[rsa][message][id1]" => "000396_04"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_05
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: (<fld3>) <hostip> -> querystring = <web_query>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: (%{fld3}) %{hostip} -> querystring = %{web_query}" }
				id => "message-000396_05"
				add_field => {
					"[event][id]" => "000396_05"
					"[rsa][message][id1]" => "000396_05"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_06
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: } Rule <rulename> <<SERVER_CONNECTED>: <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<SERVER_CONNECTED>:[\s]+(?<hostip>.*)$" }
				id => "message-000396_06"
				add_field => {
					"[event][id]" => "000396_06"
					"[rsa][message][id1]" => "000396_06"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm1_04
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}Rule<rulename><<ACCESS_SESSION_STARTED>: INFO<info>, ctx_load_status:<result>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE 000396_07
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: Rejected request: <hostip> User-Agent:<user_agent> requested <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: Rejected request: %{hostip} User-Agent:%{user_agent} requested %{url}" }
				id => "message-000396_07"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000396_07"
					"[rsa][message][id1]" => "000396_07"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_08
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: Rejected <hostip> with SQL, requested URL <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: Rejected %{hostip} with SQL, requested URL %{url}" }
				id => "message-000396_08"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000396_08"
					"[rsa][message][id1]" => "000396_08"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_09
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: c-ip=<hostip>^^method=<web_method>^^{uri=<fld1>url=<url>|uri=<fld1>}^^host=<dhost>^^s-ip=<saddr>^^pool-name=<pool_name>^^s-port=<sport>^^status=<resultcode>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+c\-ip=(?<hostip>[^\^]*)\^\^method=(?<web_method>[^\^]*)\^\^(uri=(?<fld1>[^u]*)url=(?<url>[^\^]*)|uri=(?<fld1>[^\^]*))\^\^host=(?<dhost>[^\^]*)\^\^s\-ip=(?<saddr>[^\^]*)\^\^pool\-name=(?<pool_name>[^\^]*)\^\^s\-port=(?<sport>[^\^]*)\^\^status=(?<resultcode>.*)$" }
				id => "message-000396_09"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000396_09"
					"[rsa][message][id1]" => "000396_09"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_10
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: SSL Handshake failed for TCP <saddr>:<sport> -> <daddr>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SSL Handshake failed for TCP %{saddr}:%{sport} -> %{daddr}:%{dport}" }
				id => "message-000396_10"
				add_field => {
				"event_description" => "SSL Handshake failed for TCP"
					"[event][id]" => "000396_10"
					"[rsa][message][id1]" => "000396_10"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_11
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: %{event_description}" }
				id => "message-000396_11"
				add_field => {
					"[event][id]" => "000396_11"
					"[rsa][message][id1]" => "000396_11"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396_12
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Rule <rulename> <<HTTP_REQUEST>: {local<fld3>."<result>"|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+(local(?<fld3>[^\.]*)\.\"(?<result>[^\"]*)\"|(?<event_description>.*))$" }
				id => "message-000396_12"
				add_field => {
					"[event][id]" => "000396_12"
					"[rsa][message][id1]" => "000396_12"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000396
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{event_description}" }
				id => "message-000396"
				add_field => {
					"[event][id]" => "000396"
					"[rsa][message][id1]" => "000396"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm1_021
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld4>:<fld15>: reject ACL:<fld5>:<packets>packet:<protocol><saddr>:<sport>-><daddr>:<dport>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm1_02
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld4>:<fld15>: allow ACL:<fld5>:<packets>packet:<protocol><saddr>:<sport>-><daddr>:<dport>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm1_03
		# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}Rule<rulename><<ACCESS_POLICY_COMPLETED>: INFO<info>, ctx_push_status:<result>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm1_01
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld14>: Initializing Access profile<event_description>:<fld4>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm1_06
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld4>: Assigned PPP Static IPv4:<hostip>Tunnel Type:<fld6><fld7>Resource:<fld8>Client IP:<saddr>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE tmm1_07
		# line in RSA: {<hostname><severity><agent>[<process_id>]|<hostname><agent>[<process_id>]}:<fld1>:<fld2>:<fld3>:<fld4>:<fld5>:<event_description>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	}
	else if [logstash][msgparser][id] == "tmm4" {
		# MESSAGE 000383
		# line in RSA:  <hostname> <agent>[<process_id>]: DDoS--> <rulename> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: DDoS--> %{rulename} from %{saddr}" }
				id => "message-000383"
				add_field => {
					"[event][id]" => "000383"
					"[rsa][message][id1]" => "000383"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000412
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: Pool <group> now has available members
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Pool[\s]+(?<group>[^\s]*)[\s]+now[\s]+has[\s]+available[\s]+members$" }
				id => "message-000412"
				add_field => {
					"[event][id]" => "000412"
					"[rsa][message][id1]" => "000412"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000424
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: No members available for pool <group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+No[\s]+members[\s]+available[\s]+for[\s]+pool[\s]+(?<group>.*)$" }
				id => "message-000424"
				add_field => {
					"[event][id]" => "000424"
					"[rsa][message][id1]" => "000424"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "tmm5" {
		# MESSAGE 000384
		# line in RSA:  <hostname> <agent>[<process_id>]: DDoS--> <rulename> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: DDoS--> %{rulename} from %{saddr}" }
				id => "message-000384"
				add_field => {
					"[event][id]" => "000384"
					"[rsa][message][id1]" => "000384"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000413
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: Pool <group> now has available members
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Pool[\s]+(?<group>[^\s]*)[\s]+now[\s]+has[\s]+available[\s]+members$" }
				id => "message-000413"
				add_field => {
					"[event][id]" => "000413"
					"[rsa][message][id1]" => "000413"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000425
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: No members available for pool <group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+No[\s]+members[\s]+available[\s]+for[\s]+pool[\s]+(?<group>.*)$" }
				id => "message-000425"
				add_field => {
					"[event][id]" => "000425"
					"[rsa][message][id1]" => "000425"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "tmm7" {
		# MESSAGE 000385
		# line in RSA:  <hostname> <agent>[<process_id>]: DDoS--> <rulename> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: DDoS--> %{rulename} from %{saddr}" }
				id => "message-000385"
				add_field => {
					"[event][id]" => "000385"
					"[rsa][message][id1]" => "000385"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000426
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: No members available for pool <group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+No[\s]+members[\s]+available[\s]+for[\s]+pool[\s]+(?<group>.*)$" }
				id => "message-000426"
				add_field => {
					"[event][id]" => "000426"
					"[rsa][message][id1]" => "000426"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000436
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>: <fld1>: HTTP header <fld1> exceeded maximum allowed size of <fld2> (<fld3> client_ip=<hostip>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^:]*):[\s]+(?<fld1>[^:]*):[\s]+HTTP[\s]+header[\s]+(?<fld1>[^\s]*)[\s]+exceeded[\s]+maximum[\s]+allowed[\s]+size[\s]+of[\s]+(?<fld2>[^\s]*)[\s]+\((?<fld3>[^\s]*)[\s]+client_ip=(?<hostip>[^\)]*)\)$" }
				id => "message-000436"
				add_field => {
					"[event][id]" => "000436"
					"[rsa][message][id1]" => "000436"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000437
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: Pool <group> now has available members
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Pool[\s]+(?<group>[^\s]*)[\s]+now[\s]+has[\s]+available[\s]+members$" }
				id => "message-000437"
				add_field => {
					"[event][id]" => "000437"
					"[rsa][message][id1]" => "000437"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "tmm2" {
		# MESSAGE 000195
		# line in RSA:  { <hostname> <agent>[<process_id>]: | <hostname> <severity> <agent>[<process_id>]: } Rule <rulename> <fld1>: Client: <saddr>, Pool member <daddr>:<dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+(?<fld1>[^:]*):[\s]+Client:[\s]+(?<saddr>[^,]*),[\s]+Pool[\s]+member[\s]+(?<daddr>[^:]*):(?<dport>.*)$" }
				id => "message-000195"
				add_field => {
					"[event][id]" => "000195"
					"[rsa][message][id1]" => "000195"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000392
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Request {(<web_method> <web_query>)|<web_method> <web_query>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Request[\s]+(\((?<web_method>[^\s]*)[\s]+(?<web_query>[^\)]*)\)|(?<web_method>[^\s]*)[\s]+(?<web_query>.*))$" }
				id => "message-000392"
				add_field => {
					"[event][id]" => "000392"
					"[rsa][message][id1]" => "000392"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_01
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: START::{Cookie value: <web_cookie>|Cookie name: <fld10>}.....
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+START::(Cookie[\s]+value:[\s]+(?<web_cookie>[^\.]*)|Cookie[\s]+name:[\s]+(?<fld10>[^\.]*))\.\.\.\.\.$" }
				id => "message-000394_01"
				add_field => {
					"[event][id]" => "000394_01"
					"[rsa][message][id1]" => "000394_01"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_02
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<SERVER_CONNECTED>: Got connection: {(<info>) Client|Client}(<saddr>:<sport>)<<->(<stransaddr>:<stransport>)LTM(<dtransaddr>:<dtransport>)<<->(<daddr>:<dport>)Server
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<SERVER_CONNECTED>:[\s]+Got[\s]+connection:[\s]+(\((?<info>[^\)]*)\)[\s]+Client|Client)\((?<saddr>[^:]*):(?<sport>[^\)]*)\)<\->\((?<stransaddr>[^:]*):(?<stransport>[^\)]*)\)LTM\((?<dtransaddr>[^:]*):(?<dtransport>[^\)]*)\)<\->\((?<daddr>[^:]*):(?<dport>[^\)]*)\)Server$" }
				id => "message-000394_02"
				add_field => {
					"[event][id]" => "000394_02"
					"[rsa][message][id1]" => "000394_02"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_03
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: Replacing cookie <fld5> with  <web_cookie>; Secure; HttpOnly
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_RESPONSE>: Replacing cookie %{fld5} with  %{web_cookie}; Secure; HttpOnly" }
				id => "message-000394_03"
				add_field => {
					"[event][id]" => "000394_03"
					"[rsa][message][id1]" => "000394_03"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_04
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: {BYPASS-Cookie found: <fld7>, cookie value: <web_cookie> Bypass persistence cookie - <fld4>|Cookie found: <fld11> = <web_cookie>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+(BYPASS\-Cookie[\s]+found:[\s]+(?<fld7>[^,]*),[\s]+cookie[\s]+value:[\s]+(?<web_cookie>[^\s]*)[\s]+Bypass[\s]+persistence[\s]+cookie[\s]+\-[\s]+(?<fld4>.*)|Cookie[\s]+found:[\s]+(?<fld11>[^\s]*)[\s]+=[\s]+(?<web_cookie>.*))$" }
				id => "message-000394_04"
				add_field => {
					"[event][id]" => "000394_04"
					"[rsa][message][id1]" => "000394_04"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_05
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: (<fld3>) <hostip> -> querystring = <web_query>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: (%{fld3}) %{hostip} -> querystring = %{web_query}" }
				id => "message-000394_05"
				add_field => {
					"[event][id]" => "000394_05"
					"[rsa][message][id1]" => "000394_05"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_06
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: } Rule <rulename> <<SERVER_CONNECTED>: <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<SERVER_CONNECTED>:[\s]+(?<hostip>.*)$" }
				id => "message-000394_06"
				add_field => {
					"[event][id]" => "000394_06"
					"[rsa][message][id1]" => "000394_06"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_07
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: Rejected request: <hostip> User-Agent:<user_agent> requested <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: Rejected request: %{hostip} User-Agent:%{user_agent} requested %{url}" }
				id => "message-000394_07"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000394_07"
					"[rsa][message][id1]" => "000394_07"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_11
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: Rejected <hostip> with {malicious file extensions|SQL}, requested URL <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+Rejected[\s]+(?<hostip>[^\s]*)[\s]+with[\s]+(malicious[\s]+file[\s]+extensions|SQL),[\s]+requested[\s]+URL[\s]+(?<url>.*)$" }
				id => "message-000394_11"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000394_11"
					"[rsa][message][id1]" => "000394_11"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_08
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: No members available for pool <pool_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: No members available for pool %{pool_name}" }
				id => "message-000394_08"
				add_field => {
					"[event][id]" => "000394_08"
					"[rsa][message][id1]" => "000394_08"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_09
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Pool <pool_name> now has available members
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Pool %{pool_name} now has available members" }
				id => "message-000394_09"
				add_field => {
					"[event][id]" => "000394_09"
					"[rsa][message][id1]" => "000394_09"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_12
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: SSL Handshake failed for TCP <saddr>:<sport> -> <daddr>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SSL Handshake failed for TCP %{saddr}:%{sport} -> %{daddr}:%{dport}" }
				id => "message-000394_12"
				add_field => {
				"event_description" => "SSL Handshake failed for TCP"
					"[event][id]" => "000394_12"
					"[rsa][message][id1]" => "000394_12"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_13
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: %{event_description}" }
				id => "message-000394_13"
				add_field => {
					"[event][id]" => "000394_13"
					"[rsa][message][id1]" => "000394_13"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394_14
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Rule <rulename> <<HTTP_REQUEST>: {local<fld3>."<result>"|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+(local(?<fld3>[^\.]*)\.\"(?<result>[^\"]*)\"|(?<event_description>.*))$" }
				id => "message-000394_14"
				add_field => {
					"[event][id]" => "000394_14"
					"[rsa][message][id1]" => "000394_14"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000394
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{event_description}" }
				id => "message-000394"
				add_field => {
					"[event][id]" => "000394"
					"[rsa][message][id1]" => "000394"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000499
		# line in RSA: <hostname> <agent>[<process_id>]: DDoS--> <rulename> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: DDoS--> %{rulename} from %{saddr}" }
				id => "message-000499"
				add_field => {
					"[event][id]" => "000499"
					"[rsa][message][id1]" => "000499"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm2
		# line in RSA: <hostname> <agent>[<process_id>]: DDoS--> <saddr> {version="<version>"|BK_REMOTE_PROTOCOL=<version>|/} <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+DDoS\-\->[\s]+(?<saddr>[^\s]*)[\s]+(version=\"(?<version>[^\"]*)\"|BK_REMOTE_PROTOCOL=(?<version>[^\s]*)|/)[\s]+(?<event_description>.*)$" }
				id => "message-tmm2"
				add_field => {
					"[event][id]" => "tmm2"
					"[rsa][message][id1]" => "tmm2"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "tmm3" {
		# MESSAGE 000200
		# line in RSA:  { <hostname> <agent>[<process_id>]: | <hostname> <severity> <agent>[<process_id>]: } Rule <rulename> <fld1>: Client: <saddr>, Pool member <daddr>:<dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+(?<fld1>[^:]*):[\s]+Client:[\s]+(?<saddr>[^,]*),[\s]+Pool[\s]+member[\s]+(?<daddr>[^:]*):(?<dport>.*)$" }
				id => "message-000200"
				add_field => {
					"[event][id]" => "000200"
					"[rsa][message][id1]" => "000200"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000599
		# line in RSA: <hostname> <agent>[<process_id>]: DDoS--> <rulename> from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: DDoS--> %{rulename} from %{saddr}" }
				id => "message-000599"
				add_field => {
					"[event][id]" => "000599"
					"[rsa][message][id1]" => "000599"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000389
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Pool <pool_name> now has available members
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Pool %{pool_name} now has available members" }
				id => "message-000389"
				add_field => {
					"[event][id]" => "000389"
					"[rsa][message][id1]" => "000389"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000390
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: No members available for pool <pool_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: No members available for pool %{pool_name}" }
				id => "message-000390"
				add_field => {
					"[event][id]" => "000390"
					"[rsa][message][id1]" => "000390"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000391
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Request (<web_method> <web_query>) <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Request (%{web_method} %{web_query}) %{fld3}" }
				id => "message-000391"
				add_field => {
					"[event][id]" => "000391"
					"[rsa][message][id1]" => "000391"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_01
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: START::{Cookie name: <fld10>|Cookie value: <web_cookie>}.....
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+START::(Cookie[\s]+name:[\s]+(?<fld10>[^\.]*)|Cookie[\s]+value:[\s]+(?<web_cookie>[^\.]*))\.\.\.\.\.$" }
				id => "message-000393_01"
				add_field => {
					"[event][id]" => "000393_01"
					"[rsa][message][id1]" => "000393_01"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_02
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<SERVER_CONNECTED>: Got connection: {(<info>) Client|Client}(<saddr>:<sport>)<<->(<stransaddr>:<stransport>)LTM(<dtransaddr>:<dtransport>)<<->(<daddr>:<dport>)Server
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<SERVER_CONNECTED>:[\s]+Got[\s]+connection:[\s]+(\((?<info>[^\)]*)\)[\s]+Client|Client)\((?<saddr>[^:]*):(?<sport>[^\)]*)\)<\->\((?<stransaddr>[^:]*):(?<stransport>[^\)]*)\)LTM\((?<dtransaddr>[^:]*):(?<dtransport>[^\)]*)\)<\->\((?<daddr>[^:]*):(?<dport>[^\)]*)\)Server$" }
				id => "message-000393_02"
				add_field => {
					"[event][id]" => "000393_02"
					"[rsa][message][id1]" => "000393_02"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_03
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: Replacing cookie <fld10> with  <web_cookie>; Secure; HttpOnly
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_RESPONSE>: Replacing cookie %{fld10} with  %{web_cookie}; Secure; HttpOnly" }
				id => "message-000393_03"
				add_field => {
					"[event][id]" => "000393_03"
					"[rsa][message][id1]" => "000393_03"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_04
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_RESPONSE>: {BYPASS-Cookie found: <fld5>, cookie value: <web_cookie> Bypass persistence cookie - <fld4>|Cookie found: <fld8> = <web_cookie>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_RESPONSE>:[\s]+(BYPASS\-Cookie[\s]+found:[\s]+(?<fld5>[^,]*),[\s]+cookie[\s]+value:[\s]+(?<web_cookie>[^\s]*)[\s]+Bypass[\s]+persistence[\s]+cookie[\s]+\-[\s]+(?<fld4>.*)|Cookie[\s]+found:[\s]+(?<fld8>[^\s]*)[\s]+=[\s]+(?<web_cookie>.*))$" }
				id => "message-000393_04"
				add_field => {
					"[event][id]" => "000393_04"
					"[rsa][message][id1]" => "000393_04"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_05
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: (<fld3>) <hostip> -> querystring = <web_query>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: (%{fld3}) %{hostip} -> querystring = %{web_query}" }
				id => "message-000393_05"
				add_field => {
					"[event][id]" => "000393_05"
					"[rsa][message][id1]" => "000393_05"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_06
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: } Rule <rulename> <<SERVER_CONNECTED>: <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<SERVER_CONNECTED>:[\s]+(?<hostip>.*)$" }
				id => "message-000393_06"
				add_field => {
					"[event][id]" => "000393_06"
					"[rsa][message][id1]" => "000393_06"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_07
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: Rejected request: <hostip> User-Agent:<user_agent> requested <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: Rejected request: %{hostip} User-Agent:%{user_agent} requested %{url}" }
				id => "message-000393_07"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000393_07"
					"[rsa][message][id1]" => "000393_07"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_08
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: Rejected <hostip> with {malicious file extensions|SQL}, requested URL <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+Rejected[\s]+(?<hostip>[^\s]*)[\s]+with[\s]+(malicious[\s]+file[\s]+extensions|SQL),[\s]+requested[\s]+URL[\s]+(?<url>.*)$" }
				id => "message-000393_08"
				add_field => {
				"result" => "Rejected request"
					"[event][id]" => "000393_08"
					"[rsa][message][id1]" => "000393_08"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_09
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: SSL Handshake failed for TCP <saddr>:<sport> -> <daddr>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SSL Handshake failed for TCP %{saddr}:%{sport} -> %{daddr}:%{dport}" }
				id => "message-000393_09"
				add_field => {
				"event_description" => "SSL Handshake failed for TCP"
					"[event][id]" => "000393_09"
					"[rsa][message][id1]" => "000393_09"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_10
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: Rule <rulename> <<HTTP_REQUEST>: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: Rule %{rulename} <HTTP_REQUEST>: %{event_description}" }
				id => "message-000393_10"
				add_field => {
					"[event][id]" => "000393_10"
					"[rsa][message][id1]" => "000393_10"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393_11
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Rule <rulename> <<HTTP_REQUEST>: {local<fld3>."<result>"|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Rule[\s]+(?<rulename>[^\s]*)[\s]+<HTTP_REQUEST>:[\s]+(local(?<fld3>[^\.]*)\.\"(?<result>[^\"]*)\"|(?<event_description>.*))$" }
				id => "message-000393_11"
				add_field => {
					"[event][id]" => "000393_11"
					"[rsa][message][id1]" => "000393_11"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000393
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{event_description}" }
				id => "message-000393"
				add_field => {
					"[event][id]" => "000393"
					"[rsa][message][id1]" => "000393"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE tmm3
		# line in RSA: <hostname> <agent>[<process_id>]: DDoS--> <saddr> {sip:<fld1> | version="<version>"|BK_REMOTE_PROTOCOL=<version>|/} <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+DDoS\-\->[\s]+(?<saddr>[^\s]*)[\s]+(sip:(?<fld1>[^\s]*)[\s]+|[\s]*version=\"(?<version>[^\"]*)\"|BK_REMOTE_PROTOCOL=(?<version>[^\s]*)|/)[\s]+(?<event_description>.*)$" }
				id => "message-tmm3"
				add_field => {
					"[event][id]" => "tmm3"
					"[rsa][message][id1]" => "tmm3"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId238
	# line in RSA:  { <hostname> <agent>[<process_id>]: | <hostname> <severity> <agent>[<process_id>]: } <fld1>:<fld2>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId238" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+(?<event_description>.*)$" }
			id => "msgParserId238"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "ntpd" {
		# MESSAGE 000074
		# line in RSA: <hostname> <agent>[<process_id>]: kernel time discipline status change <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: kernel time discipline status change %{fld1}" }
				id => "message-000074"
				add_field => {
				"event_description" => " Kernel time discipline status change"
					"[event][id]" => "000074"
					"[rsa][message][id1]" => "000074"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000108
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } frequency initialized <info> from <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+frequency[\s]+initialized[\s]+(?<info>[^\s]*)[\s]+from[\s]+(?<filename>.*)$" }
				id => "message-000108"
				add_field => {
					"[event][id]" => "000108"
					"[rsa][message][id1]" => "000108"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000109
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } precision = <fld1> usec
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+precision[\s]+=[\s]+(?<fld1>[^\s]*)[\s]+usec$" }
				id => "message-000109"
				add_field => {
					"[event][id]" => "000109"
					"[rsa][message][id1]" => "000109"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000112
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } ntpd exiting on signal <resultcode>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+ntpd[\s]+exiting[\s]+on[\s]+signal[\s]+(?<resultcode>.*)$" }
				id => "message-000112"
				add_field => {
				"event_description" => " ntpd exiting"
					"[event][id]" => "000112"
					"[rsa][message][id1]" => "000112"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000113
		# line in RSA: <hostname> <agent>[<process_id>]: synchronisation lost
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: synchronisation lost" }
				id => "message-000113"
				add_field => {
				"event_description" => " Synchronization lost"
					"[event][id]" => "000113"
					"[rsa][message][id1]" => "000113"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000114
		# line in RSA: <hostname> <agent>[<process_id>]: running as uid(<uid>)/<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: running as uid(%{uid})/%{fld1}" }
				id => "message-000114"
				add_field => {
					"[event][id]" => "000114"
					"[rsa][message][id1]" => "000114"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000115
		# line in RSA: {<hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]:} kernel time <fld1> status <resultcode>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:)[\s]+kernel[\s]+time[\s]+(?<fld1>[^\s]*)[\s]+status[\s]+(?<resultcode>.*)$" }
				id => "message-000115"
				add_field => {
				"event_description" => " Kernel time status"
					"[event][id]" => "000115"
					"[rsa][message][id1]" => "000115"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000116
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } ntpd <fld1> <fld2> <fld4> <fld5> <fld7> <timezone> <fld6> (<fld3>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+ntpd[\s]+(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<timezone>[^\s]*)[\s]+(?<fld6>[^\s]*)[\s]+\((?<fld3>[^\)]*)\)$" }
				id => "message-000116"
				add_field => {
					"[event][id]" => "000116"
					"[rsa][message][id1]" => "000116"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld4} %{fld5} %{fld6} %{fld7}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE 000110
		# line in RSA: <hostname> <agent>: ntpd shutdown succeeded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: ntpd shutdown succeeded" }
				id => "message-000110"
				add_field => {
				"event_description" => " ntpd shutdown succeeded"
					"[event][id]" => "000110"
					"[rsa][message][id1]" => "000110"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000253
		# line in RSA: <hostname> <agent>: ntpd startup succeeded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: ntpd startup succeeded" }
				id => "message-000253"
				add_field => {
				"event_description" => " ntpd startup succeeded"
					"[event][id]" => "000253"
					"[rsa][message][id1]" => "000253"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000111
		# line in RSA: <hostname> <agent>[<process_id>]: signal_no_reset: signal <fld1> had flags <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: signal_no_reset: signal %{fld1} had flags %{fld2}" }
				id => "message-000111"
				add_field => {
				"action" => "signal_no_reset"
					"[event][id]" => "000111"
					"[rsa][message][id1]" => "000111"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000187
		# line in RSA:  { <hostname> <agent>[<process_id>]: | <hostname> <severity> <agent>[<process_id>]: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000187"
				add_field => {
					"[event][id]" => "000187"
					"[rsa][message][id1]" => "000187"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId251
	# line in RSA: <hostname> <agent>[<process_id>]: Can't connect to database '<db_name>': Can't connect to local MySQL server through socket '<portname>' (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId251" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Can't connect to database '%{db_name}': Can't connect to local MySQL server through socket '%{portname}' (%{fld1})" }
			id => "msgParserId251"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "bigpipe" {
		# MESSAGE 000378
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT - user <username> - <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: AUDIT - user %{username} - %{info}" }
				id => "message-000378"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Execute"
					"[event][id]" => "000378"
					"[rsa][message][id1]" => "000378"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000255
		# line in RSA:  { <hostname> <severity> <agent>: Begin | <hostname> <agent>: Begin } config install operation: <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+Begin[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+Begin[\s]+)[\s]+config[\s]+install[\s]+operation:[\s]+(?<filename>.*)$" }
				id => "message-000255"
				add_field => {
				"event_description" => " Begin config install operation"
					"[event][id]" => "000255"
					"[rsa][message][id1]" => "000255"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000076
		# line in RSA: <hostname> <agent>: Completed config install operation
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: Completed config install operation" }
				id => "message-000076"
				add_field => {
				"event_description" => " Completed config install operation"
					"[event][id]" => "000076"
					"[rsa][message][id1]" => "000076"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000216
		# line in RSA: <hostname> <severity> <agent>: <fld1>: <fld2>: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}: %{fld1}: %{fld2}: %{result}" }
				id => "message-000216"
				add_field => {
					"[event][id]" => "000216"
					"[rsa][message][id1]" => "000216"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000256
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: The | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: The } configuration was successfully loaded.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+The[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+The[\s]+)[\s]+configuration[\s]+was[\s]+successfully[\s]+loaded\.$" }
				id => "message-000256"
				add_field => {
				"event_description" => " The configuration was successfully loaded."
					"[event][id]" => "000256"
					"[rsa][message][id1]" => "000256"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000266
		# line in RSA:  { <hostname> <severity> <agent>: Completed | <hostname> <agent>: Completed } config sync all operation
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+Completed[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+Completed[\s]+)[\s]+config[\s]+sync[\s]+all[\s]+operation$" }
				id => "message-000266"
				add_field => {
				"event_description" => " Completed config sync all operation"
					"[event][id]" => "000266"
					"[rsa][message][id1]" => "000266"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "event_backup.pl" {
		# MESSAGE 000078
		# line in RSA: <hostname> <agent>[<process_id>]: ASM support is not enabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: ASM support is not enabled" }
				id => "message-000078"
				add_field => {
				"event_description" => " ASM support is not enabled"
					"[event][id]" => "000078"
					"[rsa][message][id1]" => "000078"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000086
		# line in RSA: <hostname> <agent>[<process_id>]: ASM events saved to <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: ASM events saved to %{filename}" }
				id => "message-000086"
				add_field => {
				"event_description" => " ASM events saved"
					"[event][id]" => "000086"
					"[rsa][message][id1]" => "000086"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "ts_configsync.pl" {
		# MESSAGE 000079
		# line in RSA: <hostname> <agent>[<process_id>]: ASM is not licensed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: ASM is not licensed." }
				id => "message-000079"
				add_field => {
				"event_description" => " ASM is not licensed."
					"[event][id]" => "000079"
					"[rsa][message][id1]" => "000079"
					"[event][categoryid]" => "1608010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000126
		# line in RSA: <hostname> <agent>[<process_id>]: ASM config loaded from <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: ASM config loaded from %{info}" }
				id => "message-000126"
				add_field => {
				"event_description" => " ASM config loaded"
					"[event][id]" => "000126"
					"[rsa][message][id1]" => "000126"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000344
		# line in RSA: <hostname> <agent>[<process_id>]: ASM config loaded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: ASM config loaded" }
				id => "message-000344"
				add_field => {
				"event_description" => " ASM config loaded"
					"[event][id]" => "000344"
					"[rsa][message][id1]" => "000344"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000125
		# line in RSA: <hostname> <agent>[<process_id>]: ASM config saved to <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: ASM config saved to %{filename}" }
				id => "message-000125"
				add_field => {
				"event_description" => " ASM config saved to specified location"
					"[event][id]" => "000125"
					"[rsa][message][id1]" => "000125"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000323
		# line in RSA: { <hostname> <severity> <agent>[<process_id>]: ASM | <hostname> <agent>[<process_id>]: ASM } config saved
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+ASM[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+ASM[\s]+)[\s]+config[\s]+saved$" }
				id => "message-000323"
				add_field => {
				"event_description" => " ASM config saved"
					"[event][id]" => "000323"
					"[rsa][message][id1]" => "000323"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "named" {
		# MESSAGE 000081
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } command channel listening on <hostip>#<network_port>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+command[\s]+channel[\s]+listening[\s]+on[\s]+(?<hostip>[^#]*)#(?<network_port>.*)$" }
				id => "message-000081"
				add_field => {
				"event_description" => " Command channel listening"
					"[event][id]" => "000081"
					"[rsa][message][id1]" => "000081"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000105
		# line in RSA: { <hostname> <severity> <agent>[<process_id>]: listening | <hostname> <agent>[<process_id>]: listening } on { IPv6 | IPv4 } interface <fld1>, <fld2>#<network_port>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+listening[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+listening[\s]+)[\s]+on[\s]+([\s]*IPv6[\s]+|[\s]*IPv4[\s]+)[\s]+interface[\s]+(?<fld1>[^,]*),[\s]+(?<fld2>[^#]*)#(?<network_port>.*)$" }
				id => "message-000105"
				add_field => {
				"event_description" => " listening on IPv6 interface"
					"[event][id]" => "000105"
					"[rsa][message][id1]" => "000105"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000106
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } loading configuration from '<filename>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+loading[\s]+configuration[\s]+from[\s]+'(?<filename>[^']*)'$" }
				id => "message-000106"
				add_field => {
				"event_description" => " Loading configuration from file"
					"[event][id]" => "000106"
					"[rsa][message][id1]" => "000106"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000107
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } starting BIND <version> -f -t <directory> -u <username> -c <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+starting[\s]+BIND[\s]+(?<version>[^\s]*)[\s]+\-f[\s]+\-t[\s]+(?<directory>[^\s]*)[\s]+\-u[\s]+(?<username>[^\s]*)[\s]+\-c[\s]+(?<filename>.*)$" }
				id => "message-000107"
				add_field => {
				"event_description" => " Starting Bind"
					"[event][id]" => "000107"
					"[rsa][message][id1]" => "000107"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000167
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } using up to <fld1> sockets
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+using[\s]+up[\s]+to[\s]+(?<fld1>[^\s]*)[\s]+sockets$" }
				id => "message-000167"
				add_field => {
				"event_description" => " Using upto 'n' sockets"
					"[event][id]" => "000167"
					"[rsa][message][id1]" => "000167"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000223
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: using default { UDP/IPv4 | UDP/IPv6 } port range: [1024, 65535]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+using[\s]+default[\s]+([\s]*UDP/IPv4[\s]+|[\s]*UDP/IPv6[\s]+)[\s]+port[\s]+range:[\s]+\[1024,[\s]+65535\]$" }
				id => "message-000223"
				add_field => {
				"event_description" => " using default UDP/IPv6 port range: [1024, 65535]"
					"[event][id]" => "000223"
					"[rsa][message][id1]" => "000223"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000268
		# line in RSA: <hostname> <agent>[<process_id>]: using default { UDP/IPv4 | UDP/IPv6 } port range: [1024, 65535]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+using[\s]+default[\s]+([\s]*UDP/IPv4[\s]+|[\s]*UDP/IPv6[\s]+)[\s]+port[\s]+range:[\s]+\[1024,[\s]+65535\]$" }
				id => "message-000268"
				add_field => {
				"event_description" => " using default UDP/IPv6 port range: [1024, 65535]"
					"[event][id]" => "000268"
					"[rsa][message][id1]" => "000268"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000188
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } built with <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+built[\s]+with[\s]+(?<info>.*)$" }
				id => "message-000188"
				add_field => {
					"[event][id]" => "000188"
					"[rsa][message][id1]" => "000188"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000433
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1> <fld2> <fld3>: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^:]*):[\s]+(?<event_description>.*)$" }
				id => "message-000433"
				add_field => {
					"[event][id]" => "000433"
					"[rsa][message][id1]" => "000433"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000439
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_description>.*)$" }
				id => "message-000439"
				add_field => {
					"[event][id]" => "000439"
					"[rsa][message][id1]" => "000439"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId273
	# line in RSA: <hostname> <agent>[<process_id>]: can't read sid for pid <info>
	else if [logstash][msgparser][id] == "msgParserId273" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: can't read sid for pid %{info}" }
			id => "msgParserId273"
			add_field => {
				"event_description" => " Can't read sid for pid"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "dcc" {
		# MESSAGE 000083
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: [<fld5>] <result> support id: <operation_id>, source ip: <saddr>, xff ip: <fld3>, HTTP classifier:<fld4>, scheme <network_service>, request: <<<web_query>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: [%{fld5}] %{result} support id: %{operation_id}, source ip: %{saddr}, xff ip: %{fld3}, HTTP classifier:%{fld4}, scheme %{network_service}, request: <%{web_query}>" }
				id => "message-000083"
				add_field => {
					"[event][id]" => "000083"
					"[rsa][message][id1]" => "000083"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000371
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: [<fld5>] <result> HTTP protocol compliance sub violations: <fld6> Evasion techniques sub violations:<fld7> Web services security sub violations:<fld8> Support id: <operation_id>, source ip: <saddr>, xff ip: <fld3>, HTTP classifier:<fld4>, scheme <network_service>, request: <<<web_query>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: [%{fld5}] %{result} HTTP protocol compliance sub violations: %{fld6} Evasion techniques sub violations:%{fld7} Web services security sub violations:%{fld8} Support id: %{operation_id}, source ip: %{saddr}, xff ip: %{fld3}, HTTP classifier:%{fld4}, scheme %{network_service}, request: <%{web_query}>" }
				id => "message-000371"
				add_field => {
					"[event][id]" => "000371"
					"[rsa][message][id1]" => "000371"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000372
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: [<fld5>] <result> HTTP protocol compliance sub violations: <fld6> Evasion techniques sub violations:<fld7> Web services security sub violations:<fld8> Support id: <operation_id>, source ip: <saddr>, xff_ip: <fld3>, source port: <sport>, destination ip: <daddr>, destination port: <dport>, HTTP classifier:<fld4>, scheme <network_service>, geographic location: <<<fld20>>, request: <<<web_query>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: [%{fld5}] %{result} HTTP protocol compliance sub violations: %{fld6} Evasion techniques sub violations:%{fld7} Web services security sub violations:%{fld8} Support id: %{operation_id}, source ip: %{saddr}, xff_ip: %{fld3}, source port: %{sport}, destination ip: %{daddr}, destination port: %{dport}, HTTP classifier:%{fld4}, scheme %{network_service}, geographic location: <%{fld20}>, request: <%{web_query}>" }
				id => "message-000372"
				add_field => {
					"[event][id]" => "000372"
					"[rsa][message][id1]" => "000372"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000404
		# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: ASM configuration error: event code <fld1> Failed to <result> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: ASM configuration error: event code %{fld1} Failed to %{result}" }
				id => "message-000404"
				add_field => {
					"[event][id]" => "000404"
					"[rsa][message][id1]" => "000404"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "log_manager" {
		# MESSAGE 000084
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: [<event_type>] User <username> created history version for <policyname> policy that is associated with <application>. <fld3>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: [%{event_type}] User %{username} created history version for %{policyname} policy that is associated with %{application}. %{fld3}." }
				id => "message-000084"
				add_field => {
					"[event][id]" => "000084"
					"[rsa][message][id1]" => "000084"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000337
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: [<event_type>] User <username> performed Apply Policy operation on <policyname> policy that is associated with <application>. <fld3>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: [%{event_type}] User %{username} performed Apply Policy operation on %{policyname} policy that is associated with %{application}. %{fld3}." }
				id => "message-000337"
				add_field => {
					"[event][id]" => "000337"
					"[rsa][message][id1]" => "000337"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId279
	# line in RSA: <hostname> <agent>[<process_id>]: ASM Disable virtual server: '<info>' has been deleted successfully ...
	else if [logstash][msgparser][id] == "msgParserId279" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: ASM Disable virtual server: '%{info}' has been deleted successfully ..." }
			id => "msgParserId279"
			add_field => {
				"event_description" => " ASM Disable virtual server - has been deleted successfully ..."
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId280
	# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } change user `<username>' GID from `<change_old>' to `<change_new>'
	else if [logstash][msgparser][id] == "msgParserId280" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+change[\s]+user[\s]+`(?<username>[^']*)'[\s]+GID[\s]+from[\s]+`(?<change_old>[^']*)'[\s]+to[\s]+`(?<change_new>[^']*)'$" }
			id => "msgParserId280"
			add_field => {
				"event_description" => " Change user GID"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "perl" {
		# MESSAGE 000130
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: ASM subsystem error (<filename>,<action>):<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: ASM subsystem error (%{filename},%{action}):%{fld3}" }
				id => "message-000130"
				add_field => {
				"event_description" => " ASM Subsystem error - Replication reported that slave is down"
					"[event][id]" => "000130"
					"[rsa][message][id1]" => "000130"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000401
		# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: ASMConfig change: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: ASMConfig change: %{event_description}" }
				id => "message-000401"
				add_field => {
					"[event][id]" => "000401"
					"[rsa][message][id1]" => "000401"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId282
	# line in RSA: <hostname> <agent>[<process_id>]: <fld1>: message-id=<<<fld2>>
	else if [logstash][msgparser][id] == "msgParserId282" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}: message-id=<%{fld2}>" }
			id => "msgParserId282"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId283
	# line in RSA: <hostname> <agent>[<process_id>]: <fld1>: uid=<uid> from=<<<username>
	else if [logstash][msgparser][id] == "msgParserId283" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}: uid=%{uid} from=<%{username}" }
			id => "msgParserId283"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId284
	# line in RSA: <hostname> <agent>[<process_id>]: <fld1>: to=<<<to>>, relay=<fld2>[<daddr>], delay=<fld3>, status=<info>
	else if [logstash][msgparser][id] == "msgParserId284" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}: to=<%{to}>, relay=%{fld2}[%{daddr}], delay=%{fld3}, status=%{info}" }
			id => "msgParserId284"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId285
	# line in RSA: <hostname> <agent>[<process_id>]: <fld1>: from=<<<username>@<fqdn>>, size=<fld2>, nrcpt=<fld3> (queue active)
	else if [logstash][msgparser][id] == "msgParserId285" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}: from=<%{username}@%{fqdn}>, size=%{fld2}, nrcpt=%{fld3} (queue active)" }
			id => "msgParserId285"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId286
	# line in RSA: <hostname> <agent>: <severity>: the Postfix mail system is not running
	else if [logstash][msgparser][id] == "msgParserId286" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}: %{severity}: the Postfix mail system is not running" }
			id => "msgParserId286"
			add_field => {
				"event_description" => " the Postfix mail system is not running"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId287
	# line in RSA: <hostname> <agent>: no valid journal superblock found
	else if [logstash][msgparser][id] == "msgParserId287" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}: no valid journal superblock found" }
			id => "msgParserId287"
			add_field => {
				"event_description" => " no valid journal superblock found"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId288
	# line in RSA: <hostname> <agent> starting.  Commit interval <fld1> seconds
	else if [logstash][msgparser][id] == "msgParserId288" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent} starting.  Commit interval %{fld1} seconds" }
			id => "msgParserId288"
			add_field => {
				"event_description" => " kjournald starting."
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId301
	# line in RSA: <hostname> <agent>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId301" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}: %{event_description}" }
			id => "msgParserId301"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId302
	# line in RSA: <hostname> <agent>(<service>)[<process_id>]: password changed for <username> 
	else if [logstash][msgparser][id] == "msgParserId302" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}(%{service})[%{process_id}]: password changed for %{username}" }
			id => "msgParserId302"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "device" {
		# MESSAGE 000218
		# line in RSA:  <hostname> device <interface> entered promiscuous mode
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} device %{interface} entered promiscuous mode" }
				id => "message-000218"
				add_field => {
				"ec_activity" => "Enable"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "device entered promiscuous mode"
					"[event][id]" => "000218"
					"[rsa][message][id1]" => "000218"
					"[event][categoryid]" => "1701060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000375
		# line in RSA: <hostname> device <interface> left promiscuous mode 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} device %{interface} left promiscuous mode" }
				id => "message-000375"
				add_field => {
				"ec_activity" => "Disable"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "device left promiscuous mode"
					"[event][id]" => "000375"
					"[rsa][message][id1]" => "000375"
					"[event][categoryid]" => "1701070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000478
		# line in RSA: <hostname><agent>[<process_id>]:<action>'<node>', devnum=<fld2>, mode=<fld3>, uid=<uid>, gid=<groupid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}%{agent}[%{process_id}]:%{action}'%{node}', devnum=%{fld2}, mode=%{fld3}, uid=%{uid}, gid=%{groupid}" }
				id => "message-000478"
				add_field => {
					"[event][id]" => "000478"
					"[rsa][message][id1]" => "000478"
					"[event][categoryid]" => "1701070000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "devmgmtd" {
		# MESSAGE 000387
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>(<fld2>): AUDIT - user <username> - RAW: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}(%{fld2}): AUDIT - user %{username} - RAW: %{event_description}" }
				id => "message-000387"
				add_field => {
					"[event][id]" => "000387"
					"[rsa][message][id1]" => "000387"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000387:01
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: AUDIT : %{event_description}" }
				id => "message-000387:01"
				add_field => {
					"[event][id]" => "000387:01"
					"[rsa][message][id1]" => "000387:01"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId308
	# line in RSA: <hostname> <severity> <action>: <info>
	else if [logstash][msgparser][id] == "msgParserId308" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{action}: %{info}" }
			id => "msgParserId308"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId309
	# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>: <info>
	else if [logstash][msgparser][id] == "msgParserId309" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}: %{info}" }
			id => "msgParserId309"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId311
	# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: <info> 
	else if [logstash][msgparser][id] == "msgParserId311" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}:%{fld2}: %{info}" }
			id => "msgParserId311"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "sSMTP" {
		# MESSAGE 000406
		# line in RSA:  <hostname> <agent>[<process_id>]: Unable to locate <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Unable to locate %{fld1}" }
				id => "message-000406"
				add_field => {
				"event_description" => " Unable to locate mail"
					"[event][id]" => "000406"
					"[rsa][message][id1]" => "000406"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000407
		# line in RSA:  <hostname> <agent>[<process_id>]: Cannot open mail:<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: Cannot open mail:%{fld1}" }
				id => "message-000407"
				add_field => {
				"event_description" => " Cannot open mail:25"
					"[event][id]" => "000407"
					"[rsa][message][id1]" => "000407"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000406_01
		# line in RSA:  {<hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: }Unable to connect to "<shost>" port <sport>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)Unable[\s]+to[\s]+connect[\s]+to[\s]+\"(?<shost>[^\"]*)\"[\s]+port[\s]+(?<sport>[^\.]*)\.$" }
				id => "message-000406_01"
				add_field => {
				"event_description" => " Unable to connect"
					"[event][id]" => "000406_01"
					"[rsa][message][id1]" => "000406_01"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000406_02
		# line in RSA:  {<hostname> <severity> <agent>[<process_id>]: |<hostname> <agent>[<process_id>]: }Cannot open <shost>:<sport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)Cannot[\s]+open[\s]+(?<shost>[^:]*):(?<sport>.*)$" }
				id => "message-000406_02"
				add_field => {
					"[event][id]" => "000406_02"
					"[rsa][message][id1]" => "000406_02"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId314
	# line in RSA: <hostname> <severity> <agent>[<process_id>]: <fld1>: user <username> broadcasted <fld2> lines (<fld3>)
	else if [logstash][msgparser][id] == "msgParserId314" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld1}: user %{username} broadcasted %{fld2} lines (%{fld3})" }
			id => "msgParserId314"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "diskmonitor" {
		# MESSAGE 000409
		# line in RSA: <hostname> <severity> <agent>: <fld1>: Disk partition <fld2> has only <fld3> free
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}: %{fld1}: Disk partition %{fld2} has only %{fld3} free" }
				id => "message-000409"
				add_field => {
					"[event][id]" => "000409"
					"[rsa][message][id1]" => "000409"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000435
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>: <fld1>: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^:]*):[\s]+(?<fld1>[^:]*):[\s]+(?<event_description>.*)$" }
				id => "message-000435"
				add_field => {
					"[event][id]" => "000435"
					"[rsa][message][id1]" => "000435"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId316
	# line in RSA:   <fld1> last message repeated <fld2> times
	else if [logstash][msgparser][id] == "msgParserId316" {
		dissect {
			mapping => { "message" => "%{fld1} last message repeated %{fld2} times" }
			id => "msgParserId316"
			add_field => {
				"event_description" => "last message repeated"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "emdeviced" {
		# MESSAGE 000257
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Error | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Error } found on device <hostip> (UID: <fld3>): Management port is configured as half duplex. Full duplex is recommended.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+)[\s]+found[\s]+on[\s]+device[\s]+(?<hostip>[^\s]*)[\s]+\(UID:[\s]+(?<fld3>[^\)]*)\):[\s]+Management[\s]+port[\s]+is[\s]+configured[\s]+as[\s]+half[\s]+duplex\.[\s]+Full[\s]+duplex[\s]+is[\s]+recommended\.$" }
				id => "message-000257"
				add_field => {
				"event_description" => " Management port is configured as half duplex. Full duplex is recommended."
					"[event][id]" => "000257"
					"[rsa][message][id1]" => "000257"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000258
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Error | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Error } found on device <hostip> (UID: <fld3>): getUsersInfo: iControl error: 'iControl::OperationFailed - primary code:<fld4> secondary code: <fld5> string: <fld6>: The requested userdb_entry (<fld7>) was not found.'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+)[\s]+found[\s]+on[\s]+device[\s]+(?<hostip>[^\s]*)[\s]+\(UID:[\s]+(?<fld3>[^\)]*)\):[\s]+getUsersInfo:[\s]+iControl[\s]+error:[\s]+'iControl::OperationFailed[\s]+\-[\s]+primary[\s]+code:(?<fld4>[^\s]*)[\s]+secondary[\s]+code:[\s]+(?<fld5>[^\s]*)[\s]+string:[\s]+(?<fld6>[^:]*):[\s]+The[\s]+requested[\s]+userdb_entry[\s]+\((?<fld7>[^\)]*)\)[\s]+was[\s]+not[\s]+found\.'$" }
				id => "message-000258"
				add_field => {
				"event_description" => " The requested userdb entry was not found."
					"[event][id]" => "000258"
					"[rsa][message][id1]" => "000258"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000342
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Error | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Error } found on device <hostip> (UID: <fld3>): get change control info: iControl error: 'iControl::OperationFailed - primary code:<fld4> secondary code: <fld5> string: Parsing error: <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+)[\s]+found[\s]+on[\s]+device[\s]+(?<hostip>[^\s]*)[\s]+\(UID:[\s]+(?<fld3>[^\)]*)\):[\s]+get[\s]+change[\s]+control[\s]+info:[\s]+iControl[\s]+error:[\s]+'iControl::OperationFailed[\s]+\-[\s]+primary[\s]+code:(?<fld4>[^\s]*)[\s]+secondary[\s]+code:[\s]+(?<fld5>[^\s]*)[\s]+string:[\s]+Parsing[\s]+error:[\s]+(?<info>.*)$" }
				id => "message-000342"
				add_field => {
				"event_description" => " Parsing error."
					"[event][id]" => "000342"
					"[rsa][message][id1]" => "000342"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000343
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Error | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Error } found on device <hostip> (UID: <fld3>): get change control info: iControl error: 'iControl::char*:SOAPException: 'Could not negotiate SSL with endpoint''
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+)[\s]+found[\s]+on[\s]+device[\s]+(?<hostip>[^\s]*)[\s]+\(UID:[\s]+(?<fld3>[^\)]*)\):[\s]+get[\s]+change[\s]+control[\s]+info:[\s]+iControl[\s]+error:[\s]+'iControl::char\*:SOAPException:[\s]+'Could[\s]+not[\s]+negotiate[\s]+SSL[\s]+with[\s]+endpoint''$" }
				id => "message-000343"
				add_field => {
				"event_description" => " Parsing error."
					"[event][id]" => "000343"
					"[rsa][message][id1]" => "000343"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000341
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Device | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Device } uid <fld3> failed refresh: getUsersInfo: iControl error: 'iControl::OperationFailed - primary code:<fld4> secondary code: <fld5> string: <fld6>: The requested userdb_entry (<fld7>) was not found.'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Device[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Device[\s]+)[\s]+uid[\s]+(?<fld3>[^\s]*)[\s]+failed[\s]+refresh:[\s]+getUsersInfo:[\s]+iControl[\s]+error:[\s]+'iControl::OperationFailed[\s]+\-[\s]+primary[\s]+code:(?<fld4>[^\s]*)[\s]+secondary[\s]+code:[\s]+(?<fld5>[^\s]*)[\s]+string:[\s]+(?<fld6>[^:]*):[\s]+The[\s]+requested[\s]+userdb_entry[\s]+\((?<fld7>[^\)]*)\)[\s]+was[\s]+not[\s]+found\.'$" }
				id => "message-000341"
				add_field => {
				"event_description" => " The requested userdb entry was not found."
					"[event][id]" => "000341"
					"[rsa][message][id1]" => "000341"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000259
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Could | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Could } not release iControl lock for device with uid <fld3>: unlockDevice: iControl error: 'iControl::char*:SOAPException: 'Failed to connect to host <hostip>, port <network_port>: Connection refused''
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Could[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Could[\s]+)[\s]+not[\s]+release[\s]+iControl[\s]+lock[\s]+for[\s]+device[\s]+with[\s]+uid[\s]+(?<fld3>[^:]*):[\s]+unlockDevice:[\s]+iControl[\s]+error:[\s]+'iControl::char\*:SOAPException:[\s]+'Failed[\s]+to[\s]+connect[\s]+to[\s]+host[\s]+(?<hostip>[^,]*),[\s]+port[\s]+(?<network_port>[^:]*):[\s]+Connection[\s]+refused''$" }
				id => "message-000259"
				add_field => {
				"event_description" => " Could not release iControl lock for device. Failed to connect to host. Connection refused."
					"[event][id]" => "000259"
					"[rsa][message][id1]" => "000259"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000260
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Connection | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Connection } test failed (device to em) for device with access address <hostip>: testConnection: iControl error: 'iControl::char*:SOAPException: 'Timed out waiting for socket read.''
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Connection[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Connection[\s]+)[\s]+test[\s]+failed[\s]+\(device[\s]+to[\s]+em\)[\s]+for[\s]+device[\s]+with[\s]+access[\s]+address[\s]+(?<hostip>[^:]*):[\s]+testConnection:[\s]+iControl[\s]+error:[\s]+'iControl::char\*:SOAPException:[\s]+'Timed[\s]+out[\s]+waiting[\s]+for[\s]+socket[\s]+read\.''$" }
				id => "message-000260"
				add_field => {
				"event_description" => " Connection test failed. Timed out waiting for socket read."
					"[event][id]" => "000260"
					"[rsa][message][id1]" => "000260"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000261
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Could | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Could } not get local config time for device with UID <fld3>: iControl error: 'iControl::char*:SOAPException: 'Failed to connect to host <hostip>, port <network_port>: Connection refused''
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Could[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Could[\s]+)[\s]+not[\s]+get[\s]+local[\s]+config[\s]+time[\s]+for[\s]+device[\s]+with[\s]+UID[\s]+(?<fld3>[^:]*):[\s]+iControl[\s]+error:[\s]+'iControl::char\*:SOAPException:[\s]+'Failed[\s]+to[\s]+connect[\s]+to[\s]+host[\s]+(?<hostip>[^,]*),[\s]+port[\s]+(?<network_port>[^:]*):[\s]+Connection[\s]+refused''$" }
				id => "message-000261"
				add_field => {
				"event_description" => " Could not get local config time for device. Failed to connect to host. Connection refused."
					"[event][id]" => "000261"
					"[rsa][message][id1]" => "000261"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000262
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Error | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Error } found on device <hostip> (UID: <fld3>): iControl error: 'iControl::char*:SOAPException: 'Timed out waiting for socket read.''
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Error[\s]+)[\s]+found[\s]+on[\s]+device[\s]+(?<hostip>[^\s]*)[\s]+\(UID:[\s]+(?<fld3>[^\)]*)\):[\s]+iControl[\s]+error:[\s]+'iControl::char\*:SOAPException:[\s]+'Timed[\s]+out[\s]+waiting[\s]+for[\s]+socket[\s]+read\.''$" }
				id => "message-000262"
				add_field => {
				"event_description" => " Error found on device. Timed out waiting for socket read."
					"[event][id]" => "000262"
					"[rsa][message][id1]" => "000262"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000263
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Device | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Device } uid <fld3> failed refresh: iControl error: 'iControl::char*:SOAPException: 'Timed out waiting for socket read.''
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Device[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Device[\s]+)[\s]+uid[\s]+(?<fld3>[^\s]*)[\s]+failed[\s]+refresh:[\s]+iControl[\s]+error:[\s]+'iControl::char\*:SOAPException:[\s]+'Timed[\s]+out[\s]+waiting[\s]+for[\s]+socket[\s]+read\.''$" }
				id => "message-000263"
				add_field => {
				"event_description" => " Device failed refresh. Timed out waiting for socket read."
					"[event][id]" => "000263"
					"[rsa][message][id1]" => "000263"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000263:01
		# line in RSA: <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT - user <username> - <fld3> - <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: AUDIT - user %{username} - %{fld3} - %{event_description}" }
				id => "message-000263:01"
				add_field => {
					"[event][id]" => "000263:01"
					"[rsa][message][id1]" => "000263:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "emfiled" {
		# MESSAGE 000267
		# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Archive | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Archive } file missing: <filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Archive[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Archive[\s]+)[\s]+file[\s]+missing:[\s]+(?<filename>.*)$" }
				id => "message-000267"
				add_field => {
				"event_description" => " Archive file missing."
					"[event][id]" => "000267"
					"[rsa][message][id1]" => "000267"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 011267
		# line in RSA:   <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT - user <username> - object <fld3> - <action> {{ <obj_type> {{<info> } } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+\-[\s]+user[\s]+(?<username>[^\s]*)[\s]+\-[\s]+object[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+(?<action>[^\s]*)[\s]+\{[\s]+(?<obj_type>[^\s]*)[\s]+\{(?<info>[^\s]*)[\s]+\}[\s]+\}[\s]+$" }
				id => "message-011267"
				add_field => {
				"event_description" => " Archive deleted"
					"[event][id]" => "011267"
					"[rsa][message][id1]" => "011267"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId330
	# line in RSA:    { <hostname> <severity> <agent>[<process_id>]: f5km_list_next DONE | <hostname> <agent>[<process_id>]: f5km_list_next DONE }
	else if [logstash][msgparser][id] == "msgParserId330" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+f5km_list_next[\s]+DONE[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+f5km_list_next[\s]+DONE[\s]+)$" }
			id => "msgParserId330"
			add_field => {
				"action" => " f5km_list_next"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId331
	# line in RSA:   <hostname> <agent>[<process_id>]: (<fld1>) LIST (<fld2>)
	else if [logstash][msgparser][id] == "msgParserId331" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: (%{fld1}) LIST (%{fld2})" }
			id => "msgParserId331"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId332
	# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Unable to transfer data to peer - (No child processes)
	else if [logstash][msgparser][id] == "msgParserId332" {
		dissect {
			mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Unable to transfer data to peer - (No child processes)" }
			id => "msgParserId332"
			add_field => {
				"event_description" => " Unable to transfer data to peer - (No child processes)"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "gtmd" {
		# MESSAGE 000252
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Connection in progress to <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Connection in progress to %{daddr}" }
				id => "message-000252"
				add_field => {
					"[event][id]" => "000252"
					"[rsa][message][id1]" => "000252"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000279
		# line in RSA:   { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Connection  | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Connection } complete to <daddr>. Starting SSL handshake
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Connection[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Connection[\s]+)[\s]+complete[\s]+to[\s]+(?<daddr>[^\.]*)\.[\s]+Starting[\s]+SSL[\s]+handshake$" }
				id => "message-000279"
				add_field => {
				"event_description" => " Connection complete. Starting SSL handshake"
					"[event][id]" => "000279"
					"[rsa][message][id1]" => "000279"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000234
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Monitor instance <fld6> <fld3>:<fld4> <change_old> --> <change_new> from <fld5> (state: <disposition>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: Monitor instance %{fld6} %{fld3}:%{fld4} %{change_old} --> %{change_new} from %{fld5} (state: %{disposition})" }
				id => "message-000234"
				add_field => {
					"[event][id]" => "000234"
					"[rsa][message][id1]" => "000234"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000280
		# line in RSA:   { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Monitor | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Monitor } instance <fld6> <fld3>:<fld4> <change_old> --> <change_new> from <fld5> (<fld7>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Monitor[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Monitor[\s]+)[\s]+instance[\s]+(?<fld6>[^\s]*)[\s]+(?<fld3>[^:]*):(?<fld4>[^\s]*)[\s]+(?<change_old>[^\s]*)[\s]+\-\->[\s]+(?<change_new>[^\s]*)[\s]+from[\s]+(?<fld5>[^\s]*)[\s]+\((?<fld7>[^\)]*)\)$" }
				id => "message-000280"
				add_field => {
					"[event][id]" => "000280"
					"[rsa][message][id1]" => "000280"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000235
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: VS <fld3> (Server <fld4>) state change <change_old> --> <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SNMP_TRAP: VS %{fld3} (Server %{fld4}) state change %{change_old} --> %{change_new}" }
				id => "message-000235"
				add_field => {
					"[event][id]" => "000235"
					"[rsa][message][id1]" => "000235"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000236
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: Server <fld3> (ip=<fld4>) state change <change_old> --> <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SNMP_TRAP: Server %{fld3} (ip=%{fld4}) state change %{change_old} --> %{change_new}" }
				id => "message-000236"
				add_field => {
					"[event][id]" => "000236"
					"[rsa][message][id1]" => "000236"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000237
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: Pool (<pool_name>) member <fld4> state change <change_old> --> <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SNMP_TRAP: Pool (%{pool_name}) member %{fld4} state change %{change_old} --> %{change_new}" }
				id => "message-000237"
				add_field => {
					"[event][id]" => "000237"
					"[rsa][message][id1]" => "000237"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000285
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: Pool <pool_name> state change <change_old> <change_new> (Pool <fld3> No enabled pool members available)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SNMP_TRAP: Pool %{pool_name} state change %{change_old} %{change_new} (Pool %{fld3} No enabled pool members available)" }
				id => "message-000285"
				add_field => {
					"[event][id]" => "000285"
					"[rsa][message][id1]" => "000285"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000284
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: Pool <pool_name> state change <change_old> <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SNMP_TRAP: Pool %{pool_name} state change %{change_old} %{change_new}" }
				id => "message-000284"
				add_field => {
					"[event][id]" => "000284"
					"[rsa][message][id1]" => "000284"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000238
		# line in RSA:  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: Wide IP <fld3> state change <change_old> --> <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}[%{process_id}]: %{fld1}:%{fld2}: SNMP_TRAP: Wide IP %{fld3} state change %{change_old} --> %{change_new}" }
				id => "message-000238"
				add_field => {
					"[event][id]" => "000238"
					"[rsa][message][id1]" => "000238"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000281
		# line in RSA:   { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: <fld3> SSL | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: <fld3> SSL } cert <fld4> at IP <fld5>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SNMP_TRAP:[\s]+(?<fld3>[^\s]*)[\s]+SSL[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SNMP_TRAP:[\s]+(?<fld3>[^\s]*)[\s]+SSL[\s]+)[\s]+cert[\s]+(?<fld4>[^\s]*)[\s]+at[\s]+IP[\s]+(?<fld5>.*)$" }
				id => "message-000281"
				add_field => {
					"[event][id]" => "000281"
					"[rsa][message][id1]" => "000281"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000410
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: Time difference between <fld6> and me is <fld3> seconds -- <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Time[\s]+difference[\s]+between[\s]+(?<fld6>[^\s]*)[\s]+and[\s]+me[\s]+is[\s]+(?<fld3>[^\s]*)[\s]+seconds[\s]+\-\-[\s]+(?<result>.*)$" }
				id => "message-000410"
				add_field => {
					"[event][id]" => "000410"
					"[rsa][message][id1]" => "000410"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000420
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: Box <hostip> {<event_description> (<fld1>)|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SNMP_TRAP:[\s]+Box[\s]+(?<hostip>[^\s]*)[\s]+((?<event_description>[^\s]*)[\s]+\((?<fld1>[^\)]*)\)|(?<event_description>.*))$" }
				id => "message-000420"
				add_field => {
					"[event][id]" => "000420"
					"[rsa][message][id1]" => "000420"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000421
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: SNMP_TRAP: {Prober Pool|Data center} {<event_description> (<result>)|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SNMP_TRAP:[\s]+(Prober[\s]+Pool|Data[\s]+center)[\s]+((?<event_description>[^\s]*)[\s]+\((?<result>[^\)]*)\)|(?<event_description>.*))$" }
				id => "message-000421"
				add_field => {
					"[event][id]" => "000421"
					"[rsa][message][id1]" => "000421"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000422
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: SYNC loading from: <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SYNC[\s]+loading[\s]+from:[\s]+(?<hostip>.*)$" }
				id => "message-000422"
				add_field => {
					"[event][id]" => "000422"
					"[rsa][message][id1]" => "000422"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000423
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: SSL handshake complete to <hostip>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SSL[\s]+handshake[\s]+complete[\s]+to[\s]+(?<hostip>.*)$" }
				id => "message-000423"
				add_field => {
					"[event][id]" => "000423"
					"[rsa][message][id1]" => "000423"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000428
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: SYNC_ZONES from <saddr> skipped. Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SYNC_ZONES[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+skipped\.[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-000428"
				add_field => {
					"[event][id]" => "000428"
					"[rsa][message][id1]" => "000428"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000432
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: SYNC_ZONES attempting to sync from {<saddr>.|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SYNC_ZONES[\s]+attempting[\s]+to[\s]+sync[\s]+from[\s]+((?<saddr>[^\.]*)\.|(?<saddr>.*))$" }
				id => "message-000432"
				add_field => {
					"[event][id]" => "000432"
					"[rsa][message][id1]" => "000432"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000430
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: SYNC_ZONES completed from {<saddr>.|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+SYNC_ZONES[\s]+completed[\s]+from[\s]+((?<saddr>[^\.]*)\.|(?<saddr>.*))$" }
				id => "message-000430"
				add_field => {
					"[event][id]" => "000430"
					"[rsa][message][id1]" => "000430"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000431
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+(?<event_description>.*)$" }
				id => "message-000431"
				add_field => {
					"[event][id]" => "000431"
					"[rsa][message][id1]" => "000431"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "passwd" {
		# MESSAGE 000269
		# line in RSA:  <hostname> <severity> <agent> (<service>)[<process_id>]: password changed for <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent} (%{service})[%{process_id}]: password changed for %{username}" }
				id => "message-000269"
				add_field => {
					"[event][id]" => "000269"
					"[rsa][message][id1]" => "000269"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000254
		# line in RSA:  <hostname> <agent> (<service>)[<process_id>]: password changed for <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent} (%{service})[%{process_id}]: password changed for %{username}" }
				id => "message-000254"
				add_field => {
					"[event][id]" => "000254"
					"[rsa][message][id1]" => "000254"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId346
	# line in RSA:   { <hostname> <severity> <agent>: <service>(<fld2>): password |  <hostname> <agent>: <service>(<fld2>): password } changed for <username>
	else if [logstash][msgparser][id] == "msgParserId346" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<service>[^\(]*)\((?<fld2>[^\)]*)\):[\s]+password[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<service>[^\(]*)\((?<fld2>[^\)]*)\):[\s]+password[\s]+)[\s]+changed[\s]+for[\s]+(?<username>.*)$" }
			id => "msgParserId346"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "tmsh" {
		# MESSAGE 000288
		# line in RSA:   { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: the |  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: the } <info> environment variable is not set : <filename>, line <fld3>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+the[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+the[\s]+)[\s]+(?<info>[^\s]*)[\s]+environment[\s]+variable[\s]+is[\s]+not[\s]+set[\s]+:[\s]+(?<filename>[^,]*),[\s]+line[\s]+(?<fld3>.*)$" }
				id => "message-000288"
				add_field => {
					"[event][id]" => "000288"
					"[rsa][message][id1]" => "000288"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000348
		# line in RSA:   { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT |  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT }  - pid=<fld3> user=<username> folder=<directory> module=(<info>)# status=[<result>] cmd_data=<action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+)[\s]+\-[\s]+pid=(?<fld3>[^\s]*)[\s]+user=(?<username>[^\s]*)[\s]+folder=(?<directory>[^\s]*)[\s]+module=\((?<info>[^\)]*)\)#[\s]+status=\[(?<result>[^\]]*)\][\s]+cmd_data=(?<action>.*)$" }
				id => "message-000348"
				add_field => {
					"[event][id]" => "000348"
					"[rsa][message][id1]" => "000348"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000355
		# line in RSA:   { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT |  <hostname> <agent>[<process_id>]: <fld1>:<fld2>: AUDIT }  - pid=<fld3> user=<username> query_partitions=<fld4> update_partition=<fld5> module=(<info>)# status=[<result>] cmd_data=<action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+AUDIT[\s]+)[\s]+\-[\s]+pid=(?<fld3>[^\s]*)[\s]+user=(?<username>[^\s]*)[\s]+query_partitions=(?<fld4>[^\s]*)[\s]+update_partition=(?<fld5>[^\s]*)[\s]+module=\((?<info>[^\)]*)\)#[\s]+status=\[(?<result>[^\]]*)\][\s]+cmd_data=(?<action>.*)$" }
				id => "message-000355"
				add_field => {
					"[event][id]" => "000355"
					"[rsa][message][id1]" => "000355"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "TCL_error" {
		# MESSAGE 000290
		# line in RSA:   { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: TCL error: <fld3> <<HTTP_REQUEST> | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: TCL error: <fld3> <<HTTP_REQUEST> } - {<result> (line <fld4>) <space> invoked from within "HTTP::redirect <url>"|<result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+TCL[\s]+error:[\s]+(?<fld3>[^\s]*)[\s]+<HTTP_REQUEST>[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+TCL[\s]+error:[\s]+(?<fld3>[^\s]*)[\s]+<HTTP_REQUEST>[\s]+)[\s]+\-[\s]+((?<result>[^\s]*)[\s]+\(line[\s]+(?<fld4>[^\)]*)\)[\s]+(?<space>[^\s]*)[\s]+invoked[\s]+from[\s]+within[\s]+\"HTTP::redirect[\s]+(?<url>[^\"]*)\"|(?<result>.*))$" }
				id => "message-000290"
				add_field => {
				"event_description" => " TCL Error in HTTP Request - Operation not supported. Multiple redirect/respond invocations not allowed"
				"info" => "HTTP Redirect"
					"[event][id]" => "000290"
					"[rsa][message][id1]" => "000290"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000291
		# line in RSA: { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: TCL error: | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: TCL error: } LDAP_Connection_Limit <fld3> - <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+TCL[\s]+error:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+TCL[\s]+error:[\s]+)[\s]+LDAP_Connection_Limit[\s]+(?<fld3>[^\s]*)[\s]+\-[\s]+(?<event_description>.*)$" }
				id => "message-000291"
				add_field => {
					"[event][id]" => "000291"
					"[rsa][message][id1]" => "000291"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000427
		# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: TCL error: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+TCL[\s]+error:[\s]+(?<event_description>.*)$" }
				id => "message-000427"
				add_field => {
					"[event][id]" => "000427"
					"[rsa][message][id1]" => "000427"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId352
	# line in RSA:   { <hostname> <severity> <agent>[<process_id>]: [warn] FastCGI: |  <hostname> <agent>[<process_id>]: [warn] FastCGI: } server "<fld1>" started (pid <child_pid>)
	else if [logstash][msgparser][id] == "msgParserId352" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[warn\][\s]+FastCGI:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[warn\][\s]+FastCGI:[\s]+)[\s]+server[\s]+\"(?<fld1>[^\"]*)\"[\s]+started[\s]+\(pid[\s]+(?<child_pid>[^\)]*)\)$" }
			id => "msgParserId352"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "smartd" {
		# MESSAGE 000297
		# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000297"
				add_field => {
					"[event][id]" => "000297"
					"[rsa][message][id1]" => "000297"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000326
		# line in RSA:  { <hostname> <severity> <agent>: | <hostname> <agent>: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000326"
				add_field => {
					"[event][id]" => "000326"
					"[rsa][message][id1]" => "000326"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "kernel" {
		# MESSAGE 000302:01
		# line in RSA: <hostname> <agent>: <fld1> Registered protocol family <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: %{fld1} Registered protocol family %{fld2}" }
				id => "message-000302:01"
				add_field => {
				"event_description" => "Registered protocol family"
					"[event][id]" => "000302:01"
					"[rsa][message][id1]" => "000302:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000302:02
		# line in RSA: <hostname> <agent>: <fld1> Unregistered protocol family <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{agent}: %{fld1} Unregistered protocol family %{fld2}" }
				id => "message-000302:02"
				add_field => {
				"event_description" => "Unregistered protocol family"
					"[event][id]" => "000302:02"
					"[rsa][message][id1]" => "000302:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000302
		# line in RSA:  { <hostname> <severity> <agent>: | <hostname> <agent>: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000302"
				add_field => {
					"[event][id]" => "000302"
					"[rsa][message][id1]" => "000302"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA:  { <hostname> <severity> <agent>: | <hostname> <agent>: } <event_description>
	else if [logstash][msgparser][id] == "msgParserId5" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
			id => "msgParserId5"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId355
	# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: session | <hostname> <agent>[<process_id>]: session } close; writing summary
	else if [logstash][msgparser][id] == "msgParserId355" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+session[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+session[\s]+)[\s]+close;[\s]+writing[\s]+summary$" }
			id => "msgParserId355"
			add_field => {
				"event_description" => " session close, writing summary"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId356
	# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Mcp method | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Mcp method } <action> returned error <resultcode>
	else if [logstash][msgparser][id] == "msgParserId356" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Mcp[\s]+method[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Mcp[\s]+method[\s]+)[\s]+(?<action>[^\s]*)[\s]+returned[\s]+error[\s]+(?<resultcode>.*)$" }
			id => "msgParserId356"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId357
	# line in RSA:  { <hostname> <severity> <agent>: shutting | <hostname> <agent>: shutting } down for system reboot
	else if [logstash][msgparser][id] == "msgParserId357" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+shutting[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+shutting[\s]+)[\s]+down[\s]+for[\s]+system[\s]+reboot$" }
			id => "msgParserId357"
			add_field => {
				"event_description" => " shutting down for system reboot"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId358
	# line in RSA:  { <hostname> <severity> <agent>: Switching | <hostname> <agent>: Switching } to runlevel: <fld1>
	else if [logstash][msgparser][id] == "msgParserId358" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+Switching[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+Switching[\s]+)[\s]+to[\s]+runlevel:[\s]+(?<fld1>.*)$" }
			id => "msgParserId358"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId359
	# line in RSA:  { <hostname> <severity> <agent>: Stopping | <hostname> <agent>: Stopping } <fld1>:  { succeded | succeeded } 
	else if [logstash][msgparser][id] == "msgParserId359" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+Stopping[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+Stopping[\s]+)[\s]+(?<fld1>[^:]*):[\s]+([\s]*succeded[\s]+|[\s]*succeeded[\s]+)[\s]+$" }
			id => "msgParserId359"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "sccp_bridge_mode" {
		# MESSAGE 000314
		# line in RSA:  { <hostname> <severity> <agent>: <fld1>:<fld2>: Connecting | <hostname> <agent>: <fld1>:<fld2>: Connecting } to MCP failed.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Connecting[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Connecting[\s]+)[\s]+to[\s]+MCP[\s]+failed\.$" }
				id => "message-000314"
				add_field => {
				"event_description" => " Connecting to MCP failed."
					"[event][id]" => "000314"
					"[rsa][message][id1]" => "000314"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000315
		# line in RSA:  { <hostname> <severity> <agent>: | <hostname> <agent>: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-000315"
				add_field => {
					"[event][id]" => "000315"
					"[rsa][message][id1]" => "000315"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId362
	# line in RSA:  { <hostname> <agent>[<process_id>]: <fld1>:<fld2>: | <hostname> <agent>[<process_id>]: <fld1>:<fld2>:  } <event_description>
	else if [logstash][msgparser][id] == "msgParserId362" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
			id => "msgParserId362"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId363
	# line in RSA:  { <hostname> <severity> <agent>: no IPv6 | <hostname> <agent>: no IPv6 } routers present
	else if [logstash][msgparser][id] == "msgParserId363" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+no[\s]+IPv6[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+no[\s]+IPv6[\s]+)[\s]+routers[\s]+present$" }
			id => "msgParserId363"
			add_field => {
				"event_description" => " No IPv6 routers present"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId364
	# line in RSA:  { <hostname> <severity> <agent>: | <hostname> <agent>: } <event_description> 
	else if [logstash][msgparser][id] == "msgParserId364" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^:]*):[\s]+)[\s]+(?<event_description>[^\s]*)[\s]+$" }
			id => "msgParserId364"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId365
	# line in RSA: <hostname> <fld1> <fld2> <fld3>: RRIP_1991A
	else if [logstash][msgparser][id] == "msgParserId365" {
		dissect {
			mapping => { "message" => "%{hostname} %{fld1} %{fld2} %{fld3}: RRIP_1991A" }
			id => "msgParserId365"
			add_field => {
				"event_description" => " RRIP_1991A"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId366
	# line in RSA: { <hostname> <severity> <agent>[<process_id>]: <fld1>:<fld2>: Resuming | <hostname> <agent>[<process_id>]: <fld1>:<fld2>: Resuming } log processing at this invocation; held <fld3> messages.
	else if [logstash][msgparser][id] == "msgParserId366" {
		grok {
			match => { "message" => "^([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Resuming[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Resuming[\s]+)[\s]+log[\s]+processing[\s]+at[\s]+this[\s]+invocation;[\s]+held[\s]+(?<fld3>[^\s]*)[\s]+messages\.$" }
			id => "msgParserId366"
			add_field => {
				"event_description" => " Resuming log processing"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: | <hostname> <agent>[<process_id>]: } <event_description>
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId367
	# line in RSA:  { <hostname> <severity> big3dshim[<process_id>]: <fld1>:<fld2>: | <hostname> big3dshim[<process_id>]: <fld1>:<fld2>: } <event_description>
	else if [logstash][msgparser][id] == "msgParserId367" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+big3dshim\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+big3dshim\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+)[\s]+(?<event_description>.*)$" }
			id => "msgParserId367"
			add_field => {
				"agent" => "tmm"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId368
	# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: DIALUP | <hostname> <agent>[<process_id>]: DIALUP } AT <terminal> BY <username>
	else if [logstash][msgparser][id] == "msgParserId368" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+DIALUP[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+DIALUP[\s]+)[\s]+AT[\s]+(?<terminal>[^\s]*)[\s]+BY[\s]+(?<username>.*)$" }
			id => "msgParserId368"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId369
	# line in RSA:  { <hostname> <severity> <agent>[<process_id>]: <username> LOGIN | <hostname> <agent>[<process_id>]: <username> LOGIN } ON <terminal>
	else if [logstash][msgparser][id] == "msgParserId369" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<username>[^\s]*)[\s]+LOGIN[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<username>[^\s]*)[\s]+LOGIN[\s]+)[\s]+ON[\s]+(?<terminal>.*)$" }
			id => "msgParserId369"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId370
	# line in RSA:  <hostname> <severity> <agent>: <info>
	else if [logstash][msgparser][id] == "msgParserId370" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}: %{info}" }
			id => "msgParserId370"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId371
	# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <info>
	else if [logstash][msgparser][id] == "msgParserId371" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{info}" }
			id => "msgParserId371"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId385
	# line in RSA: <hostname> <severity> <agent>[<process_id>]: <event_description>
	else if [logstash][msgparser][id] == "msgParserId385" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{event_description}" }
			id => "msgParserId385"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId399
	# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: Sync Zones starting from ip '<hostip>' with timeout <fld3>
	else if [logstash][msgparser][id] == "msgParserId399" {
		grok {
			match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+Sync[\s]+Zones[\s]+starting[\s]+from[\s]+ip[\s]+'(?<hostip>[^']*)'[\s]+with[\s]+timeout[\s]+(?<fld3>.*)$" }
			id => "msgParserId399"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId420
	# line in RSA:   -- <fld1>[<process_id>]: <service>(<event_type>): session closed for user <username>
	else if [logstash][msgparser][id] == "msgParserId420" {
		dissect {
			mapping => { "message" => "-- %{fld1}[%{process_id}]: %{service}(%{event_type}): session closed for user %{username}" }
			id => "msgParserId420"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "OSPF" {
		# MESSAGE 000444
		# line in RSA:   <hostname> <severity> <agent>[<process_id>]: <protocol>: Detected router with duplicaterouter ID <fld1> in area <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{protocol}: Detected router with duplicaterouter ID %{fld1} in area %{fld2}" }
				id => "message-000444"
				add_field => {
				"event_description" => "Detected router with duplicaterouter ID"
					"[event][id]" => "000444"
					"[rsa][message][id1]" => "000444"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 000443
		# line in RSA:   <fld1> <severity> <fld2>[<process_id>]: <protocol>: {<agent>: <event_description>|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld1>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<protocol>[^:]*):[\s]+((?<agent>[^:]*):[\s]+(?<event_description>.*)|(?<event_description>.*))$" }
				id => "message-000443"
				add_field => {
					"[event][id]" => "000443"
					"[rsa][message][id1]" => "000443"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "AUDIT" {
		# MESSAGE AUDIT
		# line in RSA: <hostname> [<process_id>]: <fld1>:<fld2>: AUDIT :<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{process_id}]: %{fld1}:%{fld2}: AUDIT :%{event_description}" }
				id => "message-AUDIT"
				add_field => {
				"agent" => "AUDIT"
					"[event][id]" => "AUDIT"
					"[rsa][message][id1]" => "AUDIT"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 020187
		# line in RSA: <hostname> [<process_id>]: <fld1>:<fld2>: AUDIT - pid=<fld3> user=<username> folder=<directory> module=(<info>)# status=[<result>] cmd_data=<action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{process_id}]: %{fld1}:%{fld2}: AUDIT - pid=%{fld3} user=%{username} folder=%{directory} module=(%{info})# status=[%{result}] cmd_data=%{action}" }
				id => "message-020187"
				add_field => {
				"agent" => "AUDIT"
					"[event][id]" => "020187"
					"[rsa][message][id1]" => "020187"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE 030187
		# line in RSA: <hostname>{<agent>[<process_id>] | <agent>}:<fld2>:<fld3>: AUDIT - user<username>- object<fld4>-<action>{{<obj_type>{{<info>} }
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
		# MESSAGE 040187
		# line in RSA: <hostname> <fld1>: :: AUDIT - user <username> - <event_description> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{fld1}: :: AUDIT - user %{username} - %{event_description} %{info}" }
				id => "message-040187"
				add_field => {
				"agent" => "AUDIT"
					"[event][id]" => "040187"
					"[rsa][message][id1]" => "040187"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId427
	# line in RSA: <hostname> <severity> <agent> [<process_id>]: <fld2>
	else if [logstash][msgparser][id] == "msgParserId427" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent} [%{process_id}]: %{fld2}" }
			id => "msgParserId427"
			add_field => {
				"agent" => "AUDIT"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId428
	# line in RSA: <hostname> <severity> <agent>(<fld1>)[<process_id>]: {starting|finished} <fld2>
	else if [logstash][msgparser][id] == "msgParserId428" {
		grok {
			match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<agent>[^\(]*)\((?<fld1>[^\)]*)\)\[(?<process_id>[^\]]*)\]:[\s]+(starting|finished)[\s]+(?<fld2>.*)$" }
			id => "msgParserId428"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId431
	# line in RSA:  <hostname> <severity> <agent>[<process_id>]: <fld3>:<fld4>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId431" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}[%{process_id}]: %{fld3}:%{fld4}: %{event_description}" }
			id => "msgParserId431"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId433
	# line in RSA: <hostname> <severity> <agent>:<event_description>
	else if [logstash][msgparser][id] == "msgParserId433" {
		dissect {
			mapping => { "message" => "%{hostname} %{severity} %{agent}:%{event_description}" }
			id => "msgParserId433"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId447
	# line in RSA: {<hostname><severity><agent>[<process_id>]:|<hostname><agent>[<process_id>]:}<fld1>:<fld2>:{AUDIT - Cannot|Cannot}load user credentials for user "<username>" Current session has been terminated.
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId448
	# line in RSA:  {<hostname> <severity>|<hostname>} <agent>[<process_id>]: <fld1>:<fld2>: ICSA: {non-session protocol number: <fld3> packet <disposition>,|non-session <protocol> packet <disposition>,} {source: <saddr> port <sport>,|source: <saddr>,} {destination: <daddr> port:<dport>|destination: <daddr>, type code:<info>|destination: <daddr>}
	else if [logstash][msgparser][id] == "msgParserId448" {
		grok {
			match => { "message" => "^[\s]*((?<hostname>[^\s]*)[\s]+(?<severity>[^\s]*)|(?<hostname>[^\s]*))[\s]+(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<fld1>[^:]*):(?<fld2>[^:]*):[\s]+ICSA:[\s]+(non\-session[\s]+protocol[\s]+number:[\s]+(?<fld3>[^\s]*)[\s]+packet[\s]+(?<disposition>[^,]*),|non\-session[\s]+(?<protocol>[^\s]*)[\s]+packet[\s]+(?<disposition>[^,]*),)[\s]+(source:[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^,]*),|source:[\s]+(?<saddr>[^,]*),)[\s]+(destination:[\s]+(?<daddr>[^\s]*)[\s]+port:(?<dport>.*)|destination:[\s]+(?<daddr>[^,]*),[\s]+type[\s]+code:(?<info>.*)|destination:[\s]+(?<daddr>.*))$" }
			id => "msgParserId448"
			add_field => {
				"vid" => "%{agent}"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[event_cat]"
		destination => "[event_cat_name]"
		dictionary => {
			"1801020000" => "Network.Connections.Successful"
			"1803000000" => "Network.Denied.Connections"
		}
		fallback => "Other.Default"
		override => true
	}
}
filter {
	translate {
		field => "[disposition]"
		destination => "[event_cat]"
		dictionary => {
			"accepted" => "1801020000"
			"rejected" => "1803000000"
		}
		fallback => "1901000000"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_bigipmsg.json"
#			template_name => "bigip_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

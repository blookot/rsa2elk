# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "symantecdlp"
			"[observer][name]" => "Symantec DLP (Vontu)"
			"[observer][type]" => "DLP"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0002
	# line in RSA: <hmonth> <hday> <htime> Vontu System Event: [<hostname>] <msgIdPart1> <msgIdPart2> <msgIdPart3> <msgIdPart4> - <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+Vontu[\s]+System[\s]+Event:[\s]+\[(?<hostname>[^\]]*)\][\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<msgIdPart3>[^\s]*)[\s]+(?<msgIdPart4>[^\s]*)[\s]+\-[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}_%{msgIdPart4}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth> <hday> <htime> Vontu System Event: [<hostname>] <msgIdPart1> <msgIdPart2> <msgIdPart3> - <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+Vontu[\s]+System[\s]+Event:[\s]+\[(?<hostname>[^\]]*)\][\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<msgIdPart3>[^\s]*)[\s]+\-[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hmonth> <hday> <htime> Vontu System { Event: [ | Event [ } <hostname>] No <hfld1> Traffic Captured - <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+Vontu[\s]+System[\s]+([\s]*Event:[\s]+\[[\s]+|[\s]*Event[\s]+\[[\s]+)[\s]+(?<hostname>[^\]]*)\][\s]+No[\s]+(?<hfld1>[^\s]*)[\s]+Traffic[\s]+Captured[\s]+\-[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "No_Traffic_Captured"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hdatetime> Vontu System Event: [<hostname>] <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hdatetime} Vontu System Event: [%{hostname}] %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "System_Event"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <hmonth> <hday> <htime> <hostname> Vontu <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} %{hostname} Vontu %{messageid}: %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: <hmonth> <hday> <htime> Vontu <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} Vontu %{messageid}: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <hmonth> <hday> <htime> <hhostname> <hfld1>^^<hfld2>^^<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<hfld1>[^\^]*)\^\^(?<hfld2>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "INCIDENT_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-symantecdlpmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Incident" {
		# MESSAGE Incident:04
		# line in RSA: <action>^^<id>^^<url>^^<policyname>^^<to>^^<from>^^<severity>:<fld21>^^<context>^^<filename>^^<fld22>^^<dclass_counter1>^^<directory>^^<fld23>^^<fld24>^^<fld25>^^<fld26>^^<fld27>^^<fld28>^^<protocol>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{action}^^%{id}^^%{url}^^%{policyname}^^%{to}^^%{from}^^%{severity}:%{fld21}^^%{context}^^%{filename}^^%{fld22}^^%{dclass_counter1}^^%{directory}^^%{fld23}^^%{fld24}^^%{fld25}^^%{fld26}^^%{fld27}^^%{fld28}^^%{protocol}" }
				id => "message-Incident:04"
				add_field => {
					"[event][id]" => "Incident:04"
					"[rsa][message][id1]" => "Incident:04"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Incident:01
		# line in RSA: <policyname>^^<id>^^<context>^^<fld21>:<severity>^^<dclass_counter1>^^<rulename>^^<from>^^<to>^^Passed^^<filename>^^<directory>^^{N/A|<fld1>}^^<hostname>^^<network_service>^^<url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<policyname>[^\^]*)\^\^(?<id>[^\^]*)\^\^(?<context>[^\^]*)\^\^(?<fld21>[^:]*):(?<severity>[^\^]*)\^\^(?<dclass_counter1>[^\^]*)\^\^(?<rulename>[^\^]*)\^\^(?<from>[^\^]*)\^\^(?<to>[^\^]*)\^\^Passed\^\^(?<filename>[^\^]*)\^\^(?<directory>[^\^]*)\^\^(N/A|(?<fld1>[^\^]*))\^\^(?<hostname>[^\^]*)\^\^(?<network_service>[^\^]*)\^\^(?<url>.*)$" }
				id => "message-Incident:01"
				add_field => {
				"event_source" => "%{hostname}"
				"action" => "Passed"
				"event_time_string" => "%{fld2}%{fld3}%{fld4}"
					"[event][id]" => "Incident:01"
					"[rsa][message][id1]" => "Incident:01"
					"[event][categoryid]" => "1502020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMM d, yyyy H:m:s a" ] }
			}
		}
		# MESSAGE Incident:02
		# line in RSA: <policyname>^^<id>^^<context>^^<fld21>:<severity>^^<dclass_counter1>^^<rulename>^^<from>^^<to>^^Blocked^^<filename>^^<directory>^^{N/A|<fld1>}^^<hostname>^^<network_service>^^<url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<policyname>[^\^]*)\^\^(?<id>[^\^]*)\^\^(?<context>[^\^]*)\^\^(?<fld21>[^:]*):(?<severity>[^\^]*)\^\^(?<dclass_counter1>[^\^]*)\^\^(?<rulename>[^\^]*)\^\^(?<from>[^\^]*)\^\^(?<to>[^\^]*)\^\^Blocked\^\^(?<filename>[^\^]*)\^\^(?<directory>[^\^]*)\^\^(N/A|(?<fld1>[^\^]*))\^\^(?<hostname>[^\^]*)\^\^(?<network_service>[^\^]*)\^\^(?<url>.*)$" }
				id => "message-Incident:02"
				add_field => {
				"event_source" => "%{hostname}"
				"action" => "Blocked"
				"event_time_string" => "%{fld2}%{fld3}%{fld4}"
					"[event][id]" => "Incident:02"
					"[rsa][message][id1]" => "Incident:02"
					"[event][categoryid]" => "1502010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMM d, yyyy H:m:s a" ] }
			}
		}
		# MESSAGE Incident:03
		# line in RSA: <policyname>^^<id>^^<context>^^<fld21>:<severity>^^<dclass_counter1>^^<rulename>^^<from>^^<to>^^Modified^^<filename>^^<directory>^^{N/A|<fld1>}^^<hostname>^^<network_service>^^<url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<policyname>[^\^]*)\^\^(?<id>[^\^]*)\^\^(?<context>[^\^]*)\^\^(?<fld21>[^:]*):(?<severity>[^\^]*)\^\^(?<dclass_counter1>[^\^]*)\^\^(?<rulename>[^\^]*)\^\^(?<from>[^\^]*)\^\^(?<to>[^\^]*)\^\^Modified\^\^(?<filename>[^\^]*)\^\^(?<directory>[^\^]*)\^\^(N/A|(?<fld1>[^\^]*))\^\^(?<hostname>[^\^]*)\^\^(?<network_service>[^\^]*)\^\^(?<url>.*)$" }
				id => "message-Incident:03"
				add_field => {
				"event_source" => "%{hostname}"
				"action" => "Modified"
				"event_time_string" => "%{fld2}%{fld3}%{fld4}"
					"[event][id]" => "Incident:03"
					"[rsa][message][id1]" => "Incident:03"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMM d, yyyy H:m:s a" ] }
			}
		}
		# MESSAGE Incident
		# line in RSA: <policyname>^^<id>^^<context>^^<fld21>:<severity>^^<dclass_counter1>^^<rulename>^^<from>^^<to>^^<action>^^<filename>^^<directory>^^{N/A|<fld1>}^^<hostname>^^<network_service>^^<url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<policyname>[^\^]*)\^\^(?<id>[^\^]*)\^\^(?<context>[^\^]*)\^\^(?<fld21>[^:]*):(?<severity>[^\^]*)\^\^(?<dclass_counter1>[^\^]*)\^\^(?<rulename>[^\^]*)\^\^(?<from>[^\^]*)\^\^(?<to>[^\^]*)\^\^(?<action>[^\^]*)\^\^(?<filename>[^\^]*)\^\^(?<directory>[^\^]*)\^\^(N/A|(?<fld1>[^\^]*))\^\^(?<hostname>[^\^]*)\^\^(?<network_service>[^\^]*)\^\^(?<url>.*)$" }
				id => "message-Incident"
				add_field => {
				"event_source" => "%{hostname}"
				"event_time_string" => "%{fld2}%{fld3}%{fld4}"
					"[event][id]" => "Incident"
					"[rsa][message][id1]" => "Incident"
					"[event][categoryid]" => "1502000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMM d, yyyy H:m:s a" ] }
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA: <action>^^<id>^^<url>^^<policyname>^^<to>^^<from>^^<severity>:<fld21>^^<context>^^<filename>^^<fld22>^^<dclass_counter1>^^<directory>^^<fld23>^^<fld24>^^<fld25>^^<fld26>^^<fld27>^^<fld28>^^<rulename>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{action}^^%{id}^^%{url}^^%{policyname}^^%{to}^^%{from}^^%{severity}:%{fld21}^^%{context}^^%{filename}^^%{fld22}^^%{dclass_counter1}^^%{directory}^^%{fld23}^^%{fld24}^^%{fld25}^^%{fld26}^^%{fld27}^^%{fld28}^^%{rulename}" }
			id => "msgParserId5"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA:  <action> - <event_description>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{action} - %{event_description}" }
			id => "msgParserId6"
			add_field => {
				"event_source" => "%{hostname}"
				"event_time_string" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA:  <event_time_string> Vontu System Event: [<hostname>] Tablespace is almost full - Oracle tablespace <obj_name> is over <dclass_ratio1> full.
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{event_time_string} Vontu System Event: [%{hostname}] Tablespace is almost full - Oracle tablespace %{obj_name} is over %{dclass_ratio1} full." }
			id => "msgParserId7"
			add_field => {
				"obj_type" => "Database Table"
				"action" => "Tablespace is almost full"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA:  <event_time_string> Vontu System Event: [<hostname>] Incident queue backlogged - There are <dclass_counter1> incidents in this server's queue.
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{event_time_string} Vontu System Event: [%{hostname}] Incident queue backlogged - There are %{dclass_counter1} incidents in this server's queue." }
			id => "msgParserId8"
			add_field => {
				"action" => "Incident queue backlogged"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA:  <event_time_string> Vontu System { Event: [ | Event [ } <hostname>] No <network_service> Traffic Captured - <event_description>
	else if [logstash][msgparser][id] == "msgParserId9" {
		grok {
			match => { "message" => "^[\s]*(?<event_time_string>[^\s]*)[\s]+Vontu[\s]+System[\s]+([\s]*Event:[\s]+\[[\s]+|[\s]*Event[\s]+\[[\s]+)[\s]+(?<hostname>[^\]]*)\][\s]+No[\s]+(?<network_service>[^\s]*)[\s]+Traffic[\s]+Captured[\s]+\-[\s]+(?<event_description>.*)$" }
			id => "msgParserId9"
			add_field => {
				"action" => "No Traffic Captured"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-symantecdlpmsg.json"
#			template_name => "symantecdlp_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "perforce"
			"[observer][name]" => "Perforce"
			"[observer][type]" => "Content Management System"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %PERFORCE-4: <hfld1>||<hfld2>||<hfld3>||<hfld4>||<messageid>||<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%PERFORCE\-4:[\s]+(?<message>(?<hfld1>[^\|]*)\|\|(?<hfld2>[^\|]*)\|\|(?<hfld3>[^\|]*)\|\|(?<hfld4>[^\|]*)\|\|(?<messageid>[^\|]*)\|\|(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %P4D-4: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%P4D-4: %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "P4D"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %PERFORCE_AL-4: <messageid>,<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%PERFORCE_AL\-4:[\s]+(?<message>(?<messageid>[^,]*),(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-perforcemsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<username>,<workspace_desc>,<action>,<saddr>,<application>,<version>,<fld4>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{username},%{workspace_desc},%{action},%{saddr},%{application},%{version},%{fld4}" }
			id => "msgParserId0"
			add_field => {
				"event_description" => "Command Start"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<username>,<workspace_desc>,<action>,<saddr>,<application>,<version>,<fld4>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{username},%{workspace_desc},%{action},%{saddr},%{application},%{version},%{fld4}" }
			id => "msgParserId1"
			add_field => {
				"event_description" => "Command Compute"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<username>,<workspace_desc>,<action>,<saddr>,<application>,<version>,<fld4>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{username},%{workspace_desc},%{action},%{saddr},%{application},%{version},%{fld4}" }
			id => "msgParserId2"
			add_field => {
				"event_description" => "Command End"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<username>,<workspace_desc>,<action>,<saddr>,<application>,<version>,<fld4>,<severity>,<fld8>,<fld9>,<result>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{username},%{workspace_desc},%{action},%{saddr},%{application},%{version},%{fld4},%{severity},%{fld8},%{fld9},%{result}" }
			id => "msgParserId3"
			add_field => {
				"ec_outcome" => "Error"
				"event_description" => "Failed errors"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<action>,<filename>,<fld9>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{action},%{filename},%{fld9}" }
			id => "msgParserId4"
			add_field => {
				"event_description" => "purge"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<username>,<workspace_desc>,<fld10>,<saddr>,<application>,<version>,<fld4>,<action>,<filename>,<fld9>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{username},%{workspace_desc},%{fld10},%{saddr},%{application},%{version},%{fld4},%{action},%{filename},%{fld9}" }
			id => "msgParserId5"
			add_field => {
				"event_description" => "Audit Events"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<username>,<workspace_desc>,<action>,<saddr>,<application>,<version>,<fld4>,<info>,<fld9>,<fld10>,<rbytes>,<sbytes>,<fld13>,<fld14>,<fld15>,<fld16>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{username},%{workspace_desc},%{action},%{saddr},%{application},%{version},%{fld4},%{info},%{fld9},%{fld10},%{rbytes},%{sbytes},%{fld13},%{fld14},%{fld15},%{fld16}" }
			id => "msgParserId6"
			add_field => {
				"event_description" => "Tracking-rpc"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<username>,<workspace_desc>,<action>,<saddr>,<application>,<version>,<fld4>,<info>,<fld9>,<fld10>,<fld11>,<fld12>,<fld13>,<fld14>,<fld15>,<fld16>,<fld17>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{username},%{workspace_desc},%{action},%{saddr},%{application},%{version},%{fld4},%{info},%{fld9},%{fld10},%{fld11},%{fld12},%{fld13},%{fld14},%{fld15},%{fld16},%{fld17}" }
			id => "msgParserId7"
			add_field => {
				"event_description" => "Tracking-rusage"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<username>,<workspace_desc>,<action>,<saddr>,<application>,<version>,<fld4>,<info>,<tbl_name>,<fld10>,<fld11>,<fld12>,<fld13>,<fld14>,<fld15>,<fld16>,<fld17>,<fld18>,<fld19>,<fld20>,<fld21>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{username},%{workspace_desc},%{action},%{saddr},%{application},%{version},%{fld4},%{info},%{tbl_name},%{fld10},%{fld11},%{fld12},%{fld13},%{fld14},%{fld15},%{fld16},%{fld17},%{fld18},%{fld19},%{fld20},%{fld21}" }
			id => "msgParserId8"
			add_field => {
				"event_description" => "Tracking-db"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: <event_type>,<fld5>,<fld6>,<fld1> <fld2> <fld3>,<process>,<fld7>,<info>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{event_type},%{fld5},%{fld6},%{fld1} %{fld2} %{fld3},%{process},%{fld7},%{info}" }
			id => "msgParserId9"
			add_field => {
				"event_description" => "System Events"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "P4D" {
		# MESSAGE P4D
		# line in RSA: Perforce server info:
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Perforce server info:" }
				id => "message-P4D"
				add_field => {
					"[event][id]" => "P4D"
					"[rsa][message][id1]" => "P4D"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE P4D:01
		# line in RSA: <fld1> pid <process> <username> <daddr>/<saddr> [<version>] '<action> <param>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} pid %{process} %{username} %{daddr}/%{saddr} [%{version}] '%{action} %{param}'" }
				id => "message-P4D:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Execute"
					"[event][id]" => "P4D:01"
					"[rsa][message][id1]" => "P4D:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
			}
		}
		# MESSAGE P4D:02
		# line in RSA: <fld1> pid <process> <username> <daddr>/<saddr> [<version>] '<action>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} pid %{process} %{username} %{daddr}/%{saddr} [%{version}] '%{action}'" }
				id => "message-P4D:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Execute"
					"[event][id]" => "P4D:02"
					"[rsa][message][id1]" => "P4D:02"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
			}
		}
		# MESSAGE P4D:03
		# line in RSA: <fld1> pid <process> <username> <saddr> [<version>] '<action> <param>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} pid %{process} %{username} %{saddr} [%{version}] '%{action} %{param}'" }
				id => "message-P4D:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Execute"
					"[event][id]" => "P4D:03"
					"[rsa][message][id1]" => "P4D:03"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
			}
		}
		# MESSAGE P4D:04
		# line in RSA: <fld1> pid <process> <username> <saddr> [<version>] '<action>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} pid %{process} %{username} %{saddr} [%{version}] '%{action}'" }
				id => "message-P4D:04"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Execute"
					"[event][id]" => "P4D:04"
					"[rsa][message][id1]" => "P4D:04"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
			}
		}
		# MESSAGE P4D:05
		# line in RSA: Forwarder set trusted client address <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Forwarder set trusted client address %{saddr}" }
				id => "message-P4D:05"
				add_field => {
					"[event][id]" => "P4D:05"
					"[rsa][message][id1]" => "P4D:05"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE P4D:06
		# line in RSA: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}" }
				id => "message-P4D:06"
				add_field => {
					"[event][id]" => "P4D:06"
					"[rsa][message][id1]" => "P4D:06"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA: <fld6>||<fld7>||<username>@<workspace_desc>||<saddr>||<action>||<filename>#<content_version>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{fld6}||%{fld7}||%{username}@%{workspace_desc}||%{saddr}||%{action}||%{filename}#%{content_version}" }
			id => "msgParserId17"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld6} %{fld7}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy/M/d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-perforcemsg.json"
#			template_name => "perforce_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "mazuprofiler"
			"[observer][name]" => "Mazu Profiler"
			"[observer][type]" => "IPS"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %MAZUPROFILER event<messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MAZUPROFILER event%{messageid} %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_mazuprofilermsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, { SRC= | SRC = }{ N/A | <saddr> }, { DST= | DST = }{ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventSourceIndex=<fld6>,eventSourceName=[<shost>],eventSourceIpaddr=[<fld7>],eventDestCount=<fld8>,eventDestIndex=<fld9>,eventDestName=[<dhost>],eventDestIpaddr=[<fld10>],eventRuleName=[<rulename>],eventRuleDescription=[<event_description>],eventUpperLowerBound=<fld11>,eventThresholdValue=<fld12>,eventThresholdUnits=[<fld13>]
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+([\s]*SRC=[\s]+|[\s]*SRC[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+([\s]*DST=[\s]+|[\s]*DST[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventSourceIndex=(?<fld6>[^,]*),eventSourceName=\[(?<shost>[^\]]*)\],eventSourceIpaddr=\[(?<fld7>[^\]]*)\],eventDestCount=(?<fld8>[^,]*),eventDestIndex=(?<fld9>[^,]*),eventDestName=\[(?<dhost>[^\]]*)\],eventDestIpaddr=\[(?<fld10>[^\]]*)\],eventRuleName=\[(?<rulename>[^\]]*)\],eventRuleDescription=\[(?<event_description>[^\]]*)\],eventUpperLowerBound=(?<fld11>[^,]*),eventThresholdValue=(?<fld12>[^,]*),eventThresholdUnits=\[(?<fld13>[^\]]*)\]$" }
			id => "msgParserId0"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, SRC <space> ={ N/A | <saddr> }, DST <space> ={ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventSourceIndex=<fld6>,eventSourceName=[<shost>],eventSourceIpaddr=[<fld7>],eventDestCount=<fld8>,eventDestIndex=<fld9>,eventDestName=[<dhost>],eventDestIpaddr=[<fld10>],eventRuleName=[<rulename>],eventRuleDescription=[<event_description>],eventUpperLowerBound=<fld11>,eventThresholdValue=<fld12>,eventThresholdUnits=[<fld13>]
	else if [logstash][msgparser][id] == "msgParserId1" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+SRC[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+DST[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventSourceIndex=(?<fld6>[^,]*),eventSourceName=\[(?<shost>[^\]]*)\],eventSourceIpaddr=\[(?<fld7>[^\]]*)\],eventDestCount=(?<fld8>[^,]*),eventDestIndex=(?<fld9>[^,]*),eventDestName=\[(?<dhost>[^\]]*)\],eventDestIpaddr=\[(?<fld10>[^\]]*)\],eventRuleName=\[(?<rulename>[^\]]*)\],eventRuleDescription=\[(?<event_description>[^\]]*)\],eventUpperLowerBound=(?<fld11>[^,]*),eventThresholdValue=(?<fld12>[^,]*),eventThresholdUnits=\[(?<fld13>[^\]]*)\]$" }
			id => "msgParserId1"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, { SRC= | SRC = }{ N/A | <saddr> }, { DST= | DST = }{ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventSourceIndex=<fld6>,eventSourceName=[<shost>],eventSourceIpaddr=[<fld7>],eventDestCount=<fld8>,eventDestIndex=<fld9>,eventDestName=[<dhost>],eventDestIpaddr=[<fld10>],eventProtocolCount=<fld11>,eventProtocolIndex=<fld12>,eventProtocolName=[<protocol>],eventProtocolId=<fld13>,eventServiceCount=<fld14>,eventServiceIndex=<fld15>,eventServiceName=[<network_service>],eventServiceProto=[<fld16>],eventServicePort=<fld17>,eventNormalBPS=<fld18>,eventCurrentBPS=<bytes>,eventNormalPPS=<fld19>,eventCurrentPPS=<packets>
	else if [logstash][msgparser][id] == "msgParserId2" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+([\s]*SRC=[\s]+|[\s]*SRC[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+([\s]*DST=[\s]+|[\s]*DST[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventSourceIndex=(?<fld6>[^,]*),eventSourceName=\[(?<shost>[^\]]*)\],eventSourceIpaddr=\[(?<fld7>[^\]]*)\],eventDestCount=(?<fld8>[^,]*),eventDestIndex=(?<fld9>[^,]*),eventDestName=\[(?<dhost>[^\]]*)\],eventDestIpaddr=\[(?<fld10>[^\]]*)\],eventProtocolCount=(?<fld11>[^,]*),eventProtocolIndex=(?<fld12>[^,]*),eventProtocolName=\[(?<protocol>[^\]]*)\],eventProtocolId=(?<fld13>[^,]*),eventServiceCount=(?<fld14>[^,]*),eventServiceIndex=(?<fld15>[^,]*),eventServiceName=\[(?<network_service>[^\]]*)\],eventServiceProto=\[(?<fld16>[^\]]*)\],eventServicePort=(?<fld17>[^,]*),eventNormalBPS=(?<fld18>[^,]*),eventCurrentBPS=(?<bytes>[^,]*),eventNormalPPS=(?<fld19>[^,]*),eventCurrentPPS=(?<packets>.*)$" }
			id => "msgParserId2"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, SRC <space> ={ N/A | <saddr> }, DST <space> ={ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventProtocolCount=<fld6>,eventServiceCount=<fld7>,eventNormalConns=<fld8>,eventCurrentConns=<fld9>
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+SRC[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+DST[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventProtocolCount=(?<fld6>[^,]*),eventServiceCount=(?<fld7>[^,]*),eventNormalConns=(?<fld8>[^,]*),eventCurrentConns=(?<fld9>.*)$" }
			id => "msgParserId3"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, { SRC= | SRC = }{ N/A | <saddr> }, { DST= | DST = }{ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventProtocolCount=<fld6>,eventServiceCount=<fld7>,eventNormalConns=<fld8>,eventCurrentConns=<fld9>
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+([\s]*SRC=[\s]+|[\s]*SRC[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+([\s]*DST=[\s]+|[\s]*DST[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventProtocolCount=(?<fld6>[^,]*),eventServiceCount=(?<fld7>[^,]*),eventNormalConns=(?<fld8>[^,]*),eventCurrentConns=(?<fld9>.*)$" }
			id => "msgParserId4"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, { SRC= | SRC = }{ N/A | <saddr> }, { DST= | DST = }{ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventSourceIndex=<fld6>,eventSourceName=[<shost>],eventSourceIpaddr=[<fld7>]
	else if [logstash][msgparser][id] == "msgParserId5" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+([\s]*SRC=[\s]+|[\s]*SRC[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+([\s]*DST=[\s]+|[\s]*DST[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventSourceIndex=(?<fld6>[^,]*),eventSourceName=\[(?<shost>[^\]]*)\],eventSourceIpaddr=\[(?<fld7>[^\]]*)\]$" }
			id => "msgParserId5"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, SRC <space> ={ N/A | <saddr> }, DST <space> ={ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventSourceIndex=<fld6>,eventSourceName=[<shost>],eventSourceIpaddr=[<fld7>]
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+SRC[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+DST[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventSourceIndex=(?<fld6>[^,]*),eventSourceName=\[(?<shost>[^\]]*)\],eventSourceIpaddr=\[(?<fld7>[^\]]*)\]$" }
			id => "msgParserId6"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, { SRC= | SRC = }{ N/A | <saddr> }, { DST= | DST = }{ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventProtocolCount=<fld5>,eventProtocolIndex=<fld6>,eventProtocolName=[<protocol>],eventProtocolId=<fld7>,eventServiceCount=<fld8>,eventServiceIndex=<fld9>,eventServiceName=[<network_service>],eventServiceProto=[<fld10>],eventServicePort=<fld11>,hostOrGroupSwitch=<fld12>,hostOrGroupHostName=[<fld23>],hostOrGroupHostIpaddr=[<fld22>],eventRuleDescription="<event_description>"
	else if [logstash][msgparser][id] == "msgParserId7" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+([\s]*SRC=[\s]+|[\s]*SRC[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+([\s]*DST=[\s]+|[\s]*DST[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventProtocolCount=(?<fld5>[^,]*),eventProtocolIndex=(?<fld6>[^,]*),eventProtocolName=\[(?<protocol>[^\]]*)\],eventProtocolId=(?<fld7>[^,]*),eventServiceCount=(?<fld8>[^,]*),eventServiceIndex=(?<fld9>[^,]*),eventServiceName=\[(?<network_service>[^\]]*)\],eventServiceProto=\[(?<fld10>[^\]]*)\],eventServicePort=(?<fld11>[^,]*),hostOrGroupSwitch=(?<fld12>[^,]*),hostOrGroupHostName=\[(?<fld23>[^\]]*)\],hostOrGroupHostIpaddr=\[(?<fld22>[^\]]*)\],eventRuleDescription=\"(?<event_description>[^\"]*)\"$" }
			id => "msgParserId7"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, { SRC= | SRC = }{ N/A | <saddr> }, { DST= | DST = }{ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventDestCount=<fld6>,eventProtocolCount=<fld7>,eventServiceCount=<fld8>
	else if [logstash][msgparser][id] == "msgParserId8" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+([\s]*SRC=[\s]+|[\s]*SRC[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+([\s]*DST=[\s]+|[\s]*DST[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventDestCount=(?<fld6>[^,]*),eventProtocolCount=(?<fld7>[^,]*),eventServiceCount=(?<fld8>.*)$" }
			id => "msgParserId8"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"protocol" => "TCP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, SRC <space> ={ N/A | <saddr> }, DST <space> ={ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventDestCount=<fld6>,eventProtocolCount=<fld7>,eventServiceCount=<fld8>
	else if [logstash][msgparser][id] == "msgParserId9" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+SRC[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+DST[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventDestCount=(?<fld6>[^,]*),eventProtocolCount=(?<fld7>[^,]*),eventServiceCount=(?<fld8>.*)$" }
			id => "msgParserId9"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"protocol" => "TCP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, { SRC= | SRC = }{ N/A | <saddr> }, { DST= | DST = }{ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventSourceIndex=<fld6>,eventSourceName=[<shost>],eventSourceIpaddr=[<fld7>],eventDestCount=<fld8>,eventDestIndex=<fld9>,eventDestName=[<dhost>],eventDestIpaddr=[<fld10>],eventProtocolCount=<fld11>,eventProtocolIndex=<fld12>,eventProtocolName=[<protocol>],eventProtocolId=<fld13>,eventServiceCount=<fld14>,eventServiceIndex=<fld15>,eventServiceName=[<network_service>],eventServiceProto=[<fld16>],eventServicePort=<fld17>,eventMeanConns=<fld18>
	else if [logstash][msgparser][id] == "msgParserId10" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+([\s]*SRC=[\s]+|[\s]*SRC[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+([\s]*DST=[\s]+|[\s]*DST[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventSourceIndex=(?<fld6>[^,]*),eventSourceName=\[(?<shost>[^\]]*)\],eventSourceIpaddr=\[(?<fld7>[^\]]*)\],eventDestCount=(?<fld8>[^,]*),eventDestIndex=(?<fld9>[^,]*),eventDestName=\[(?<dhost>[^\]]*)\],eventDestIpaddr=\[(?<fld10>[^\]]*)\],eventProtocolCount=(?<fld11>[^,]*),eventProtocolIndex=(?<fld12>[^,]*),eventProtocolName=\[(?<protocol>[^\]]*)\],eventProtocolId=(?<fld13>[^,]*),eventServiceCount=(?<fld14>[^,]*),eventServiceIndex=(?<fld15>[^,]*),eventServiceName=\[(?<network_service>[^\]]*)\],eventServiceProto=\[(?<fld16>[^\]]*)\],eventServicePort=(?<fld17>[^,]*),eventMeanConns=(?<fld18>.*)$" }
			id => "msgParserId10"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, SRC <space> ={ N/A | <saddr> }, DST <space> ={ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventDestCount=<fld6>,eventProtocolCount=<fld7>,eventServiceCount=<fld8>
	else if [logstash][msgparser][id] == "msgParserId11" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+SRC[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+DST[\s]+(?<space>[^\s]*)[\s]+=([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventDestCount=(?<fld6>[^,]*),eventProtocolCount=(?<fld7>[^,]*),eventServiceCount=(?<fld8>.*)$" }
			id => "msgParserId11"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA: severity=<threat_val>,description=[TYPE = <fld20>, SEVERITY = <fld1>, START = <fld2>, END = <fld3>, { SRC= | SRC = }{ N/A | <saddr> }, { DST= | DST = }{ N/A | <daddr> }],eventID=<id>,eventURL=[<url>],alertLevel=<fld21>,eventStart=<fld4>,eventSourceCount=<fld5>,eventDestCount=<fld6>,eventProtocolCount=<fld7>,eventServiceCount=<fld8>
	else if [logstash][msgparser][id] == "msgParserId12" {
		grok {
			match => { "message" => "^severity=(?<threat_val>[^,]*),description=\[TYPE[\s]+=[\s]+(?<fld20>[^,]*),[\s]+SEVERITY[\s]+=[\s]+(?<fld1>[^,]*),[\s]+START[\s]+=[\s]+(?<fld2>[^,]*),[\s]+END[\s]+=[\s]+(?<fld3>[^,]*),[\s]+([\s]*SRC=[\s]+|[\s]*SRC[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+),[\s]+([\s]*DST=[\s]+|[\s]*DST[\s]+=[\s]+)([\s]*N/A[\s]+|[\s]*(?<daddr>[^\s]*)[\s]+)\],eventID=(?<id>[^,]*),eventURL=\[(?<url>[^\]]*)\],alertLevel=(?<fld21>[^,]*),eventStart=(?<fld4>[^,]*),eventSourceCount=(?<fld5>[^,]*),eventDestCount=(?<fld6>[^,]*),eventProtocolCount=(?<fld7>[^,]*),eventServiceCount=(?<fld8>.*)$" }
			id => "msgParserId12"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_mazuprofilermsg.json"
#			template_name => "mazuprofiler_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

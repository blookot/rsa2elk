# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "rsaviaaccess"
			"[observer][name]" => "RSA Via / SID Access"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1> <hfld2>T<hfld3>Z <hhostip> <hproduct> <hfld4> <messageid> [<hfld5>@<hobj_name> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hfld2}T%{hfld3}Z %{hhostip} %{hproduct} %{hfld4} %{messageid} [%{hfld5}@%{hobj_name} %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1> <hfld2>T<hfld3>Z <hhostip> <hproduct> <hfld4> <messageid> [<hfld5>@<hobj_name>] <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hfld2}T%{hfld3}Z %{hhostip} %{hproduct} %{hfld4} %{messageid} [%{hfld5}@%{hobj_name}] %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-rsaviaaccessmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: TARGET=<fld1> DURATION=<duration> TYPE=<context>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "TARGET=%{fld1} DURATION=%{duration} TYPE=%{context}" }
			id => "msgParserId0"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"event_description" => "Performing backup"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId1"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: CONNECTION_METHOD=<network_service> NETWORK=<mask> PORT_RANGE=<fld1> TYPE=<protocol>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "CONNECTION_METHOD=%{network_service} NETWORK=%{mask} PORT_RANGE=%{fld1} TYPE=%{protocol}" }
			id => "msgParserId2"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: ALIASES=<hostname> HOST_IP=<hostip>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "ALIASES=%{hostname} HOST_IP=%{hostip}" }
			id => "msgParserId3"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: RULE=<rulename>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "RULE=%{rulename}" }
			id => "msgParserId4"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: CODE=<resultcode>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "CODE=%{resultcode}" }
			id => "msgParserId5"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: HOSTNAME=<hostname> PUBLIC_IP=<saddr> PUBLIC_GATEWAY=<gateway> MANAGEMENT_GATEWAY=<fld1> MANAGEMENT_IP=<fld2> PRODUCTS=<application> NAMESERVERS=<fld3> SERVER_TYPE=<fld4>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "HOSTNAME=%{hostname} PUBLIC_IP=%{saddr} PUBLIC_GATEWAY=%{gateway} MANAGEMENT_GATEWAY=%{fld1} MANAGEMENT_IP=%{fld2} PRODUCTS=%{application} NAMESERVERS=%{fld3} SERVER_TYPE=%{fld4}" }
			id => "msgParserId6"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: RESULT=<result> USER_AGENT=<user_agent> REMOTE_IP=<saddr> SESSION_ID=<sessionid> AUTHN_SOURCE=<fld2> USERNAME=<username> USERID=<uid> AUTHN_TYPE=<authmethod> FORWARDED_FOR_IP=<fld4> NOT_AUTHNED_REASON=<info>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "RESULT=%{result} USER_AGENT=%{user_agent} REMOTE_IP=%{saddr} SESSION_ID=%{sessionid} AUTHN_SOURCE=%{fld2} USERNAME=%{username} USERID=%{uid} AUTHN_TYPE=%{authmethod} FORWARDED_FOR_IP=%{fld4} NOT_AUTHNED_REASON=%{info}" }
			id => "msgParserId7"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA: REASON=<result> USER_AGENT=<user_agent> REMOTE_IP=<saddr> SESSION_ID=<sessionid> AUTHN_SOURCE=<fld2> USERNAME=<username> USERID=<uid> AUTHN_TYPE=<authmethod> FORWARDED_FOR_IP=<fld4> SESSION_INACTIVITY_TIMEOUT=<fld5>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "REASON=%{result} USER_AGENT=%{user_agent} REMOTE_IP=%{saddr} SESSION_ID=%{sessionid} AUTHN_SOURCE=%{fld2} USERNAME=%{username} USERID=%{uid} AUTHN_TYPE=%{authmethod} FORWARDED_FOR_IP=%{fld4} SESSION_INACTIVITY_TIMEOUT=%{fld5}" }
			id => "msgParserId8"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: RESULT=<result> USERNAME=<username> POLICY=<policyname> PROPERTIES=<info> RESOURCE=<application> POLICY_RULE_SETS=<fld1> DECIDING_RULE_SET=<authmethod>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "RESULT=%{result} USERNAME=%{username} POLICY=%{policyname} PROPERTIES=%{info} RESOURCE=%{application} POLICY_RULE_SETS=%{fld1} DECIDING_RULE_SET=%{authmethod}" }
			id => "msgParserId9"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: RESULT=<result> SESSION_ID=<sessionid> PROTECTED_APP_USERNAME=<fld1> USERNAME=<username> APPLICATION=<application> TYPE=<protocol>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "RESULT=%{result} SESSION_ID=%{sessionid} PROTECTED_APP_USERNAME=%{fld1} USERNAME=%{username} APPLICATION=%{application} TYPE=%{protocol}" }
			id => "msgParserId10"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: APPLICATION=<application> PORTAL_USERNAME=<username> PASSWORD_MESSAGE=<info> NEW_USERNAME=<change_new> USERNAME_MESSAGE=<event_description> OLD_USERNAME=<change_old> PASSWORD_CHANGED=<result> 
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "APPLICATION=%{application} PORTAL_USERNAME=%{username} PASSWORD_MESSAGE=%{info} NEW_USERNAME=%{change_new} USERNAME_MESSAGE=%{event_description} OLD_USERNAME=%{change_old} PASSWORD_CHANGED=%{result}" }
			id => "msgParserId11"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: USERNAME=<username> REMOTE_IP=<saddr> REQUESTED_URL=<url> RESULT=<result> DENY_REASON=<event_description> USER_AGENT=<user_agent> SESSION_ID=<sessionid> RESOURCE=<application>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "USERNAME=%{username} REMOTE_IP=%{saddr} REQUESTED_URL=%{url} RESULT=%{result} DENY_REASON=%{event_description} USER_AGENT=%{user_agent} SESSION_ID=%{sessionid} RESOURCE=%{application}" }
			id => "msgParserId12"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: APP_NAME=<application> REQUEST_CONTEXT_ID=<id> AUTH_SCHEME=<authmethod> USERNAME=<username> PROTECTED_RESOURCE=<url> TYPE=<fld2> SENSITIVITY_LEVEL=<severity> TENANT=<fld3> RESULT=<result>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "APP_NAME=%{application} REQUEST_CONTEXT_ID=%{id} AUTH_SCHEME=%{authmethod} USERNAME=%{username} PROTECTED_RESOURCE=%{url} TYPE=%{fld2} SENSITIVITY_LEVEL=%{severity} TENANT=%{fld3} RESULT=%{result}" }
			id => "msgParserId13"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: ACCOUNT_ID=<uid> REMOTE_IP=<saddr> RESOURCE_ID=<fld1> RESOURCE_TYPE=<application> FORWARDED_FOR_IP=<fld2>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "ACCOUNT_ID=%{uid} REMOTE_IP=%{saddr} RESOURCE_ID=%{fld1} RESOURCE_TYPE=%{application} FORWARDED_FOR_IP=%{fld2}" }
			id => "msgParserId14"
			add_field => {
				"hostip" => "%{hhostip}"
				"product" => "%{hproduct}"
				"event_type" => "%{messageid}"
				"[logstash][fullDateTimeString]" => "%{hfld2} %{hfld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:ss" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[result]"
		destination => "[ec_outcome]"
		dictionary => {
			"AUTHENTICATED" => "Success"
			"NOT_AUTHENTICATED" => "Failure"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-rsaviaaccessmsg.json"
#			template_name => "rsaviaaccess_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

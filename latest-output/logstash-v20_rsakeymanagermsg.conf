# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "rsakeymanager"
			"[observer][name]" => "RSA Key Manager"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %RSARKMS ^ <hdate>,<hfld1> <htzone> ^ <messageid> ^ <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%RSARKMS[\s]+\^[\s]+(?<hdate>[^,]*),(?<hfld1>[^\s]*)[\s]+(?<htzone>[^\s]*)[\s]+\^[\s]+(?<message>(?<messageid>[^\s]*)[\s]+\^[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hdate>,<hfld1> - [<messageid>] <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hdate>[^,]*),(?<hfld1>[^\s]*)[\s]+\-[\s]+\[(?<message>(?<messageid>[^\]]*)\][\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_rsakeymanagermsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  RKMA_MONITORING_EVENT]HostName=<hostname>,<info>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "RKMA_MONITORING_EVENT]HostName=%{hostname},%{info}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:  VIEW_MONITORING_EVENT] User <username> viewed the monitoring screen.
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "VIEW_MONITORING_EVENT] User %{username} viewed the monitoring screen." }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA:  DefaultSecurityProviders ^ <fld1> ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} <info>
	else if [logstash][msgparser][id] == "msgParserId2" {
		grok {
			match => { "message" => "^[\s]*DefaultSecurityProviders[\s]+\^[\s]+(?<fld1>[^\s]*)[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<info>.*)$" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA:  DefaultProviderEnforcer ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} <info>
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^[\s]*DefaultProviderEnforcer[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<info>.*)$" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:  DefaultRandomAssembler ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : Internal|<saddr>,|<fld3> ^} <event_description>, algorithm: <fld4>, provider: <fld5> 
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^[\s]*DefaultRandomAssembler[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+Internal|(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<event_description>[^,]*),[\s]+algorithm:[\s]+(?<fld4>[^,]*),[\s]+provider:[\s]+(?<fld5>[^\s]*)[\s]+$" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "DefaultSecretKeyAssembler" {
		# MESSAGE DefaultSecretKeyAssembler:01
		# line in RSA:  DefaultSecretKeyAssembler ^ <fld1> <username> (<fld2>) ^ <severity> ^ <fld3> ^ <action> - <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DefaultSecretKeyAssembler ^ %{fld1} %{username} (%{fld2}) ^ %{severity} ^ %{fld3} ^ %{action} - %{info}" }
				id => "message-DefaultSecretKeyAssembler:01"
				add_field => {
					"[event][id]" => "DefaultSecretKeyAssembler:01"
					"[rsa][message][id1]" => "DefaultSecretKeyAssembler:01"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE DefaultSecretKeyAssembler
		# line in RSA:  DefaultSecretKeyAssembler ^ <fld1> ^ <severity> ^ <fld3> ^ <action> - <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DefaultSecretKeyAssembler ^ %{fld1} ^ %{severity} ^ %{fld3} ^ %{action} - %{info}" }
				id => "message-DefaultSecretKeyAssembler"
				add_field => {
					"[event][id]" => "DefaultSecretKeyAssembler"
					"[rsa][message][id1]" => "DefaultSecretKeyAssembler"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "LoginAction" {
		# MESSAGE LoginAction:01
		# line in RSA:  LoginAction ^ <fld1> <username> (<fld2>) ^ <severity> ^ <fld3> ^ Client : <saddr>, Logged in :<fld10> (<fld12>) as <user_role> using <authmethod>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LoginAction ^ %{fld1} %{username} (%{fld2}) ^ %{severity} ^ %{fld3} ^ Client : %{saddr}, Logged in :%{fld10} (%{fld12}) as %{user_role} using %{authmethod}" }
				id => "message-LoginAction:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "LoginAction:01"
					"[rsa][message][id1]" => "LoginAction:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE LoginAction
		# line in RSA:  LoginAction ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Logged in: <fld10> (<fld12>) as <user_role> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*LoginAction[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Logged[\s]+in:[\s]+(?<fld10>[^\s]*)[\s]+\((?<fld12>[^\)]*)\)[\s]+as[\s]+(?<user_role>[^\s]*)[\s]+$" }
				id => "message-LoginAction"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "LoginAction"
					"[rsa][message][id1]" => "LoginAction"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA:  AuthenticationServletFilter ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} <fld6> 
	else if [logstash][msgparser][id] == "msgParserId9" {
		grok {
			match => { "message" => "^[\s]*AuthenticationServletFilter[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<fld6>[^\s]*)[\s]+$" }
			id => "msgParserId9"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA:  LogKeyClassNatural ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} <obj_type> <obj_name> generated in class <fld7> 
	else if [logstash][msgparser][id] == "msgParserId10" {
		grok {
			match => { "message" => "^[\s]*LogKeyClassNatural[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<obj_type>[^\s]*)[\s]+(?<obj_name>[^\s]*)[\s]+generated[\s]+in[\s]+class[\s]+(?<fld7>[^\s]*)[\s]+$" }
			id => "msgParserId10"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA:  DefaultKeyClassNatural ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} <obj_type> <obj_name> generated in class <fld7> 
	else if [logstash][msgparser][id] == "msgParserId11" {
		grok {
			match => { "message" => "^[\s]*DefaultKeyClassNatural[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<obj_type>[^\s]*)[\s]+(?<obj_name>[^\s]*)[\s]+generated[\s]+in[\s]+class[\s]+(?<fld7>[^\s]*)[\s]+$" }
			id => "msgParserId11"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "AuditSimple" {
		# MESSAGE AuditSimple
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Get security objects with uuids [ <obj_name> ] from class <fld7>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Get[\s]+security[\s]+objects[\s]+with[\s]+uuids[\s]+\[[\s]+(?<obj_name>[^\s]*)[\s]+\][\s]+from[\s]+class[\s]+(?<fld7>.*)$" }
				id => "message-AuditSimple"
				add_field => {
					"[event][id]" => "AuditSimple"
					"[rsa][message][id1]" => "AuditSimple"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:01
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Returned security object with uuids <obj_name>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Returned[\s]+security[\s]+object[\s]+with[\s]+uuids[\s]+(?<obj_name>.*)$" }
				id => "message-AuditSimple:01"
				add_field => {
					"[event][id]" => "AuditSimple:01"
					"[rsa][message][id1]" => "AuditSimple:01"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:02
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Returned key <obj_name>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Returned[\s]+key[\s]+(?<obj_name>.*)$" }
				id => "message-AuditSimple:02"
				add_field => {
					"[event][id]" => "AuditSimple:02"
					"[rsa][message][id1]" => "AuditSimple:02"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:03
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Created identity group <group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Created[\s]+identity[\s]+group[\s]+(?<group>.*)$" }
				id => "message-AuditSimple:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
					"[event][id]" => "AuditSimple:03"
					"[rsa][message][id1]" => "AuditSimple:03"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:04
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Created identity <fld8>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Created[\s]+identity[\s]+(?<fld8>.*)$" }
				id => "message-AuditSimple:04"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
					"[event][id]" => "AuditSimple:04"
					"[rsa][message][id1]" => "AuditSimple:04"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:05
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Created security class <fld6> with group <group> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Created[\s]+security[\s]+class[\s]+(?<fld6>[^\s]*)[\s]+with[\s]+group[\s]+(?<group>[^\s]*)[\s]+$" }
				id => "message-AuditSimple:05"
				add_field => {
					"[event][id]" => "AuditSimple:05"
					"[rsa][message][id1]" => "AuditSimple:05"
					"[event][categoryid]" => "1502030000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:06
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Created crypto policy <policy_id>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Created[\s]+crypto[\s]+policy[\s]+(?<policy_id>.*)$" }
				id => "message-AuditSimple:06"
				add_field => {
					"[event][id]" => "AuditSimple:06"
					"[rsa][message][id1]" => "AuditSimple:06"
					"[event][categoryid]" => "1502030000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:07
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} {Bound|Unbound} groups [ <group> ] to identity <c_username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(Bound|Unbound)[\s]+groups[\s]+\[[\s]+(?<group>[^\s]*)[\s]+\][\s]+to[\s]+identity[\s]+(?<c_username>.*)$" }
				id => "message-AuditSimple:07"
				add_field => {
					"[event][id]" => "AuditSimple:07"
					"[rsa][message][id1]" => "AuditSimple:07"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:08
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} {Bound|Unbound} role <user_role> to identity <c_username>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(Bound|Unbound)[\s]+role[\s]+(?<user_role>[^\s]*)[\s]+to[\s]+identity[\s]+(?<c_username>.*)$" }
				id => "message-AuditSimple:08"
				add_field => {
					"[event][id]" => "AuditSimple:08"
					"[rsa][message][id1]" => "AuditSimple:08"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:10
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Deleted Identity Group <group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Deleted[\s]+Identity[\s]+Group[\s]+(?<group>.*)$" }
				id => "message-AuditSimple:10"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
					"[event][id]" => "AuditSimple:10"
					"[rsa][message][id1]" => "AuditSimple:10"
					"[event][categoryid]" => "1402010100"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:11
		# line in RSA:  AuditSimple ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Deleted Identity <c_username>  
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Deleted[\s]+Identity[\s]+(?<c_username>[^\s]*)[\s]+$" }
				id => "message-AuditSimple:11"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
					"[event][id]" => "AuditSimple:11"
					"[rsa][message][id1]" => "AuditSimple:11"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE AuditSimple:09
		# line in RSA:  AuditSimple ^ { <fld1> <username> (<fld2>) | <connectionid>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} <fld7>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*AuditSimple[\s]+\^[\s]+([\s]*(?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)[\s]+|[\s]*(?<connectionid>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<fld7>.*)$" }
				id => "message-AuditSimple:09"
				add_field => {
					"[event][id]" => "AuditSimple:09"
					"[rsa][message][id1]" => "AuditSimple:09"
					"[event][categoryid]" => "1401040000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA:  LogoutAction ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Logged out: <fld11> (<fld12>)
	else if [logstash][msgparser][id] == "msgParserId24" {
		grok {
			match => { "message" => "^[\s]*LogoutAction[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Logged[\s]+out:[\s]+(?<fld11>[^\s]*)[\s]+\((?<fld12>[^\)]*)\)$" }
			id => "msgParserId24"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "DefaultAuditStatements" {
		# MESSAGE DefaultAuditStatements
		# line in RSA:  DefaultAuditStatements ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} State changed to <disposition> for security object with {muid|uuid} <obj_name>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DefaultAuditStatements[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+State[\s]+changed[\s]+to[\s]+(?<disposition>[^\s]*)[\s]+for[\s]+security[\s]+object[\s]+with[\s]+(muid|uuid)[\s]+(?<obj_name>.*)$" }
				id => "message-DefaultAuditStatements"
				add_field => {
					"[event][id]" => "DefaultAuditStatements"
					"[rsa][message][id1]" => "DefaultAuditStatements"
					"[event][categoryid]" => "1613040200"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE DefaultAuditStatements:01
		# line in RSA:  DefaultAuditStatements ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} {Bound|Unbound} <authmethod> authentication to identity <fld8> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DefaultAuditStatements[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(Bound|Unbound)[\s]+(?<authmethod>[^\s]*)[\s]+authentication[\s]+to[\s]+identity[\s]+(?<fld8>[^\s]*)[\s]+$" }
				id => "message-DefaultAuditStatements:01"
				add_field => {
					"[event][id]" => "DefaultAuditStatements:01"
					"[rsa][message][id1]" => "DefaultAuditStatements:01"
					"[event][categoryid]" => "1402040100"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
		# MESSAGE DefaultAuditStatements:02
		# line in RSA:  DefaultAuditStatements ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} Created key class <fld7> with group <group> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DefaultAuditStatements[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+Created[\s]+key[\s]+class[\s]+(?<fld7>[^\s]*)[\s]+with[\s]+group[\s]+(?<group>[^\s]*)[\s]+$" }
				id => "message-DefaultAuditStatements:02"
				add_field => {
					"[event][id]" => "DefaultAuditStatements:02"
					"[rsa][message][id1]" => "DefaultAuditStatements:02"
					"[event][categoryid]" => "1502030000"
					"[logstash][fullDateTimeString]" => "%{hdate}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
			}
		}
	}
	# PARSER msgParserId28
	# line in RSA:  TransactionLayer ^ {<fld1> <username> (<fld2>)|<fld1>} ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} <fld9>
	else if [logstash][msgparser][id] == "msgParserId28" {
		grok {
			match => { "message" => "^[\s]*TransactionLayer[\s]+\^[\s]+((?<fld1>[^\s]*)[\s]+(?<username>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)|(?<fld1>[^\s]*))[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<fld9>.*)$" }
			id => "msgParserId28"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA:  DefaultUpgradeService ^ <fld1> ^ <severity> ^ {<fld3> ^ Client : <saddr>,|<fld3> ^} <info>
	else if [logstash][msgparser][id] == "msgParserId29" {
		grok {
			match => { "message" => "^[\s]*DefaultUpgradeService[\s]+\^[\s]+(?<fld1>[^\s]*)[\s]+\^[\s]+(?<severity>[^\s]*)[\s]+\^[\s]+((?<fld3>[^\s]*)[\s]+\^[\s]+Client[\s]+:[\s]+(?<saddr>[^,]*),|(?<fld3>[^\s]*)[\s]+\^)[\s]+(?<info>.*)$" }
			id => "msgParserId29"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:mm:ss" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_rsakeymanagermsg.json"
#			template_name => "rsakeymanager_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

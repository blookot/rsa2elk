# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "cyberoamutm"
			"[observer][name]" => "Cyberoam UTM"
			"[observer][type]" => "Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: date=<hfld15> time=<hfld14> timezone=<hfld13> device_name=<hfld12> device_id=<hfld16> log_id=<hfld1> log_type=<hfld17> <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^date=(?<hfld15>[^\s]*)[\s]+time=(?<hfld14>[^\s]*)[\s]+timezone=(?<hfld13>[^\s]*)[\s]+device_name=(?<hfld12>[^\s]*)[\s]+device_id=(?<hfld16>[^\s]*)[\s]+log_id=(?<hfld1>[^\s]*)[\s]+log_type=(?<hfld17>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "Cyberoam_log"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-cyberoamutmmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Cyberoam_log" {
		# MESSAGE Cyberoam_log:Authentication
		# line in RSA:  accesstimepolicy=<policyname> auth_client=<federated_idp> auth_mechanism=<authmethod> datatransferpolicy=<policyname> date=<fld1> device_id=<hostid> device_name=<hostname> log_component=<event_source> log_id=<id> log_subtype=<event_type> log_type=<vendor_event_cat> message=<event_description> priority=<severity> reason=<result> source_ip=<saddr> sslvpnpolicyname=<policyname> status=<disposition> surfingquotapolicy=<policyname> time=<fld2> timezone=<timezone> usergroupname=<group> username=<username> vpntype=<scheme> src_ip=<saddr> user_name=<username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "accesstimepolicy=%{policyname} auth_client=%{federated_idp} auth_mechanism=%{authmethod} datatransferpolicy=%{policyname} date=%{fld1} device_id=%{hostid} device_name=%{hostname} log_component=%{event_source} log_id=%{id} log_subtype=%{event_type} log_type=%{vendor_event_cat} message=%{event_description} priority=%{severity} reason=%{result} source_ip=%{saddr} sslvpnpolicyname=%{policyname} status=%{disposition} surfingquotapolicy=%{policyname} time=%{fld2} timezone=%{timezone} usergroupname=%{group} username=%{username} vpntype=%{scheme} src_ip=%{saddr} user_name=%{username}" }
				id => "message-Cyberoam_log:Authentication"
				add_field => {
					"[event][id]" => "Cyberoam_log:Authentication"
					"[rsa][message][id1]" => "Cyberoam_log:Authentication"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE Cyberoam_log:AntiVirus
		# line in RSA:  av_policy_name=<policy_id> date=<fld1> device_id=<hostid> device_name=<hostname> domainname=<domain> dst_country_code=<fld> dst_domainname=<ddomain> dstdomain=<ddomain> dst_ip=<daddr> dst_port=<dport> filename=<filename> file_path=<directory> file_size=<filename_size> from_email_address=<from> FTP_direction=<direction> FTP_url=<url> ftpcommand=<info> fw_rule_id=<rule_uid> iap=<policy_id> log_component=<event_source> log_id=<id> log_subtype=<event_type> log_type=<vendor_event_cat> mailid=<mail_id> mailsize=<filename_size> priority=<severity> protocol=<protocol> quarantine=<info> recv_bytes=<rbytes> sent_bytes=<sbytes> src_country_code=<fld> src_domainname=<sdomain> src_ip=<saddr> src_port=<sport> status=<disposition> subject=<subject> time=<fld2> timezone=<timezone> to_email_address=<to> url=<url> user_name=<username> virus=<threat_name> oldversion=<fld> updatefrom=<fld> updatetype=<fld> message=<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "av_policy_name=%{policy_id} date=%{fld1} device_id=%{hostid} device_name=%{hostname} domainname=%{domain} dst_country_code=%{fld} dst_domainname=%{ddomain} dstdomain=%{ddomain} dst_ip=%{daddr} dst_port=%{dport} filename=%{filename} file_path=%{directory} file_size=%{filename_size} from_email_address=%{from} FTP_direction=%{direction} FTP_url=%{url} ftpcommand=%{info} fw_rule_id=%{rule_uid} iap=%{policy_id} log_component=%{event_source} log_id=%{id} log_subtype=%{event_type} log_type=%{vendor_event_cat} mailid=%{mail_id} mailsize=%{filename_size} priority=%{severity} protocol=%{protocol} quarantine=%{info} recv_bytes=%{rbytes} sent_bytes=%{sbytes} src_country_code=%{fld} src_domainname=%{sdomain} src_ip=%{saddr} src_port=%{sport} status=%{disposition} subject=%{subject} time=%{fld2} timezone=%{timezone} to_email_address=%{to} url=%{url} user_name=%{username} virus=%{threat_name} oldversion=%{fld} updatefrom=%{fld} updatetype=%{fld} message=%{event_description}" }
				id => "message-Cyberoam_log:AntiVirus"
				add_field => {
					"[event][id]" => "Cyberoam_log:AntiVirus"
					"[rsa][message][id1]" => "Cyberoam_log:AntiVirus"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE Cyberoam_log:AntiSpam
		# line in RSA:  av_policy_name=<policy_id> date=<fld1> device_id=<hostid> device_name=<hostname> dst_country_code=<fld> dst_domainname=<ddomain> dst_ip=<daddr> dst_port=<dport> email_subject=<subject> from_email_address=<from> fw_rule_id=<rule_uid> log_component=<event_source> log_id=<id> log_subtype=<event_type> log_type=<vendor_event_cat> mailid=<mail_id> mailsize=<filename_size> priority=<severity> protocol=<protocol> reason=<result> recv_bytes=<rbytes> sent_bytes=<sbytes> spamaction=<action> src_country_code=<fld> src_domainname=<sdomain> src_ip=<saddr> src_port=<sport> status=<disposition> time=<fld2> timezone=<timezone> to_email_address=<to> user_name=<username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "av_policy_name=%{policy_id} date=%{fld1} device_id=%{hostid} device_name=%{hostname} dst_country_code=%{fld} dst_domainname=%{ddomain} dst_ip=%{daddr} dst_port=%{dport} email_subject=%{subject} from_email_address=%{from} fw_rule_id=%{rule_uid} log_component=%{event_source} log_id=%{id} log_subtype=%{event_type} log_type=%{vendor_event_cat} mailid=%{mail_id} mailsize=%{filename_size} priority=%{severity} protocol=%{protocol} reason=%{result} recv_bytes=%{rbytes} sent_bytes=%{sbytes} spamaction=%{action} src_country_code=%{fld} src_domainname=%{sdomain} src_ip=%{saddr} src_port=%{sport} status=%{disposition} time=%{fld2} timezone=%{timezone} to_email_address=%{to} user_name=%{username}" }
				id => "message-Cyberoam_log:AntiSpam"
				add_field => {
					"[event][id]" => "Cyberoam_log:AntiSpam"
					"[rsa][message][id1]" => "Cyberoam_log:AntiSpam"
					"[event][categoryid]" => "1207040000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE Cyberoam_log:WebFilter
		# line in RSA:  category=<product> category_type=<info> contenttype=<info> date=<fld1> device_id=<hostid> device_name=<hostname> domain=<web_domain> dst_ip=<daddr> dst_port=<dport> fw_rule_id=<rule_uid> httpresponsecode=<resultcode> iap=<policy_id> log_component=<event_source> log_id=<id> log_subtype=<event_type> log_type=<vendor_event_cat> priority=<severity> protocol=<protocol> recv_bytes=<rbytes> sent_bytes=<sbytes> src_ip=<saddr> src_port=<sport> status=<disposition> time=<fld2> timezone=<timezone> url=<url> user_gp=<group> user_name=<username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "category=%{product} category_type=%{info} contenttype=%{info} date=%{fld1} device_id=%{hostid} device_name=%{hostname} domain=%{web_domain} dst_ip=%{daddr} dst_port=%{dport} fw_rule_id=%{rule_uid} httpresponsecode=%{resultcode} iap=%{policy_id} log_component=%{event_source} log_id=%{id} log_subtype=%{event_type} log_type=%{vendor_event_cat} priority=%{severity} protocol=%{protocol} recv_bytes=%{rbytes} sent_bytes=%{sbytes} src_ip=%{saddr} src_port=%{sport} status=%{disposition} time=%{fld2} timezone=%{timezone} url=%{url} user_gp=%{group} user_name=%{username}" }
				id => "message-Cyberoam_log:WebFilter"
				add_field => {
					"[event][id]" => "Cyberoam_log:WebFilter"
					"[rsa][message][id1]" => "Cyberoam_log:WebFilter"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE Cyberoam_log:Firewall
		# line in RSA:  appfilter_policy_id=<policy_id> application=<application> connevent=<fld> connid=<connectionid> date=<fld1> device_id=<hostid> device_name=<hostname> dir_disp=<fld> dst_country_code=<fld> dst_ip=<daddr> dst_port=<dport> dstzonetype=<fld> duration=<duration> fw_rule_id=<rule_uid> iap=<policy_id> icmp_code=<icmpcode> icmp_type=<icmptype> in_interface=<dinterface> ips_policy_id=<policy_id> log_component=<event_source> log_id=<id> log_subtype=<event_type> log_type=<vendor_event_cat> out_interface=<sinterface> priority=<severity> protocol=<protocol> recv_pkts=<fld> recv_bytes=<rbytes> sent_bytes=<sbytes> sent_pkts=<fld> src_country_code=<fld> src_ip=<saddr> src_mac=<smacaddr> src_port=<sport> srczonetype=<fld> status=<disposition> time=<fld2> timezone=<timezone> tran_dst_ip=<dtransaddr> tran_dst_port=<dtransport> tran_src_ip=<stransaddr> tran_src_port=<stransport> user_gp=<group> user_name=<username> vconnid=<connectionid> application_risk=<risk_num> application_technology=<info> application_category=<category> srczone=<src_zone> dstzone=<dst_zone>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "appfilter_policy_id=%{policy_id} application=%{application} connevent=%{fld} connid=%{connectionid} date=%{fld1} device_id=%{hostid} device_name=%{hostname} dir_disp=%{fld} dst_country_code=%{fld} dst_ip=%{daddr} dst_port=%{dport} dstzonetype=%{fld} duration=%{duration} fw_rule_id=%{rule_uid} iap=%{policy_id} icmp_code=%{icmpcode} icmp_type=%{icmptype} in_interface=%{dinterface} ips_policy_id=%{policy_id} log_component=%{event_source} log_id=%{id} log_subtype=%{event_type} log_type=%{vendor_event_cat} out_interface=%{sinterface} priority=%{severity} protocol=%{protocol} recv_pkts=%{fld} recv_bytes=%{rbytes} sent_bytes=%{sbytes} sent_pkts=%{fld} src_country_code=%{fld} src_ip=%{saddr} src_mac=%{smacaddr} src_port=%{sport} srczonetype=%{fld} status=%{disposition} time=%{fld2} timezone=%{timezone} tran_dst_ip=%{dtransaddr} tran_dst_port=%{dtransport} tran_src_ip=%{stransaddr} tran_src_port=%{stransport} user_gp=%{group} user_name=%{username} vconnid=%{connectionid} application_risk=%{risk_num} application_technology=%{info} application_category=%{category} srczone=%{src_zone} dstzone=%{dst_zone}" }
				id => "message-Cyberoam_log:Firewall"
				add_field => {
					"[event][id]" => "Cyberoam_log:Firewall"
					"[rsa][message][id1]" => "Cyberoam_log:Firewall"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE Cyberoam_log:ApplicationFilter
		# line in RSA:  application_filter_policy=<policy_id> application_name=<application> category=<product> date=<fld1> device_id=<hostid> device_name=<hostname> dst_country_code=<fld> dst_ip=<daddr> dst_port=<dport> fw_rule_id=<rule_uid> log_component=<event_source> log_id=<id> log_subtype=<event_type> log_type=<vendor_event_cat> message=<event_description> priority=<severity> protocol=<protocol> recv_bytes=<rbytes> sent_bytes=<sbytes> src_country_code=<fld> src_ip=<saddr> src_port=<sport> status=<disposition> time=<fld2> timezone=<timezone> user_gp=<group> user_name=<username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "application_filter_policy=%{policy_id} application_name=%{application} category=%{product} date=%{fld1} device_id=%{hostid} device_name=%{hostname} dst_country_code=%{fld} dst_ip=%{daddr} dst_port=%{dport} fw_rule_id=%{rule_uid} log_component=%{event_source} log_id=%{id} log_subtype=%{event_type} log_type=%{vendor_event_cat} message=%{event_description} priority=%{severity} protocol=%{protocol} recv_bytes=%{rbytes} sent_bytes=%{sbytes} src_country_code=%{fld} src_ip=%{saddr} src_port=%{sport} status=%{disposition} time=%{fld2} timezone=%{timezone} user_gp=%{group} user_name=%{username}" }
				id => "message-Cyberoam_log:ApplicationFilter"
				add_field => {
					"[event][id]" => "Cyberoam_log:ApplicationFilter"
					"[rsa][message][id1]" => "Cyberoam_log:ApplicationFilter"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE Cyberoam_log:SystemEvent
		# line in RSA:  client_host_name=<dhost> client_physical_address=<daddr> connectionname=<info> connectiontype=<fld> date=<fld1> device_id=<hostid> device_name=<hostname> ipaddress=<hostip> ipsec=<fld> isakmp=<fld> localgateway=<gateway> localinterfaceip=<sinterface> localnetwork=<smask> log_component=<event_source> log_id=<id> log_subtype=<event_type> log_type=<vendor_event_cat> message=<event_description> messageid=<operation_id> peerid=<peer_id> policybits=<policy_value> priority=<severity> raw_data=<fld> remoteinterfaceip=<dinterface> remotenetwork=<dmask> state=<disposition> State=<disposition> status=<disposition> time=<fld2> timezone=<timezone>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "client_host_name=%{dhost} client_physical_address=%{daddr} connectionname=%{info} connectiontype=%{fld} date=%{fld1} device_id=%{hostid} device_name=%{hostname} ipaddress=%{hostip} ipsec=%{fld} isakmp=%{fld} localgateway=%{gateway} localinterfaceip=%{sinterface} localnetwork=%{smask} log_component=%{event_source} log_id=%{id} log_subtype=%{event_type} log_type=%{vendor_event_cat} message=%{event_description} messageid=%{operation_id} peerid=%{peer_id} policybits=%{policy_value} priority=%{severity} raw_data=%{fld} remoteinterfaceip=%{dinterface} remotenetwork=%{dmask} state=%{disposition} State=%{disposition} status=%{disposition} time=%{fld2} timezone=%{timezone}" }
				id => "message-Cyberoam_log:SystemEvent"
				add_field => {
					"[event][id]" => "Cyberoam_log:SystemEvent"
					"[rsa][message][id1]" => "Cyberoam_log:SystemEvent"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[vendor_event_cat]"
		destination => "[ec_theme]"
		dictionary => {
			"Firewall" => "AccessControl"
			"Anti-Virus" => "TEV"
			"Anti-Spam" => "TEV"
			"WAF" => "AccessControl"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[disposition]"
		destination => "[ec_outcome]"
		dictionary => {
			"successful" => "Success"
			"Successful" => "Success"
			"failed" => "Failure"
			"Failed" => "Failure"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[event_type]"
		destination => "[ec_activity]"
		dictionary => {
			"Allowed" => "Enable"
			"Denied" => "Deny"
			"Detect" => "Detect"
			"Drop" => "Deny"
			"Virus" => "Detect"
			"Spam" => "Detect"
			"Probable Spam" => "Detect"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-cyberoamutmmsg.json"
#			template_name => "cyberoamutm_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "microdasys_xsg"
			"[observer][name]" => "Microdasys XML Security Gateway"
			"[observer][type]" => "Application Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %MicrodasysXSG-<hfld1> [<hfld2> <hfld3>]IP: <hfld4>: Result:<hfld5>, <messageid> <!payload:$START>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MicrodasysXSG\-(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\]]*)\]IP:[\s]+(?<hfld4>[^:]*):[\s]+Result:(?<hfld5>[^,]*),[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-microdasys_xsgmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Web-Feed" {
		# MESSAGE Web-Feed:Blocked
		# line in RSA: %MicrodasysXSG-<fld1>: [<fld2> <fld3>]IP: <saddr>: Result:Blocked by XSG, Web-Feed <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%MicrodasysXSG-%{fld1}: [%{fld2} %{fld3}]IP: %{saddr}: Result:Blocked by XSG, Web-Feed %{url}" }
				id => "message-Web-Feed:Blocked"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "ALM"
				"result" => "Blocked by XSG"
					"[event][id]" => "Web-Feed:Blocked"
					"[rsa][message][id1]" => "Web-Feed:Blocked"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy.M.d H:m:s" ] }
			}
		}
		# MESSAGE Web-Feed:Passed
		# line in RSA: %MicrodasysXSG-<fld1>: [<fld2> <fld3>]IP: <saddr>: Result:Passed by XSG, Web-Feed <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%MicrodasysXSG-%{fld1}: [%{fld2} %{fld3}]IP: %{saddr}: Result:Passed by XSG, Web-Feed %{url}" }
				id => "message-Web-Feed:Passed"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"result" => "Passed by XSG"
					"[event][id]" => "Web-Feed:Passed"
					"[rsa][message][id1]" => "Web-Feed:Passed"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy.M.d H:m:s" ] }
			}
		}
		# MESSAGE Web-Feed:Not_Scanned
		# line in RSA: %MicrodasysXSG-<fld1>: [<fld2> <fld3>]IP: <saddr>: Result:Not scanned, Web-Feed <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%MicrodasysXSG-%{fld1}: [%{fld2} %{fld3}]IP: %{saddr}: Result:Not scanned, Web-Feed %{url}" }
				id => "message-Web-Feed:Not_Scanned"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "ALM"
				"result" => "Not scanned"
					"[event][id]" => "Web-Feed:Not_Scanned"
					"[rsa][message][id1]" => "Web-Feed:Not_Scanned"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy.M.d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Web-Service" {
		# MESSAGE Web-Service:Blocked
		# line in RSA: %MicrodasysXSG-<fld1>: [<fld2> <fld3>]IP: <saddr>: Result:Blocked by XSG, Web-Service <url>, Method <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%MicrodasysXSG-%{fld1}: [%{fld2} %{fld3}]IP: %{saddr}: Result:Blocked by XSG, Web-Service %{url}, Method %{fld4}" }
				id => "message-Web-Service:Blocked"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "ALM"
				"result" => "Blocked by XSG"
					"[event][id]" => "Web-Service:Blocked"
					"[rsa][message][id1]" => "Web-Service:Blocked"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy.M.d H:m:s" ] }
			}
		}
		# MESSAGE Web-Service:Scanned_OK
		# line in RSA: %MicrodasysXSG-<fld1>: [<fld2> <fld3>]IP: <saddr>: Result:Scanned OK, Web-Service <url>, Method <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%MicrodasysXSG-%{fld1}: [%{fld2} %{fld3}]IP: %{saddr}: Result:Scanned OK, Web-Service %{url}, Method %{fld4}" }
				id => "message-Web-Service:Scanned_OK"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"result" => "Scanned OK"
					"[event][id]" => "Web-Service:Scanned_OK"
					"[rsa][message][id1]" => "Web-Service:Scanned_OK"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy.M.d H:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-microdasys_xsgmsg.json"
#			template_name => "microdasys_xsg_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

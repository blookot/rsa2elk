# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "arborpeakflowsp"
			"[observer][name]" => "Arbor Peakflow SP"
			"[observer][type]" => "IPS"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hmonth> <hday> <htime> <hdata>: { TMS | Third party | Blackhole | Flowspec } <messageid> <!payload:hdata>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hdata>[^:]*):[\s]+([\s]*TMS[\s]+|[\s]*Third[\s]+party[\s]+|[\s]*Blackhole[\s]+|[\s]*Flowspec[\s]+)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hday> <htime> <hdata>: { high | low } interface <msgIdPart1> <msgIdPart2> <!payload:hdata>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hdata>[^:]*):[\s]+([\s]*high[\s]+|[\s]*low[\s]+)[\s]+interface[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <hmonth> <hday> <htime> <hdata>: { high | low } { jitter | loss | bps | pps } <msgIdPart1> <hfld1> for service <!payload:hdata>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hdata>[^:]*):[\s]+([\s]*high[\s]+|[\s]*low[\s]+)[\s]+([\s]*jitter[\s]+|[\s]*loss[\s]+|[\s]*bps[\s]+|[\s]*pps[\s]+)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+for[\s]+service[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "usage_%{msgIdPart1}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth> <hday> <htime> <hdata>: { high | low } { jitter | loss | bps | pps } <msgIdPart1> <msgIdPart2> <!payload:hdata>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hdata>[^:]*):[\s]+([\s]*high[\s]+|[\s]*low[\s]+)[\s]+([\s]*jitter[\s]+|[\s]*loss[\s]+|[\s]*bps[\s]+|[\s]*pps[\s]+)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hmonth> <hday> <htime> <hdata>: { high | low | High } <msgIdPart1> <msgIdPart2> <!payload:hdata>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hdata>[^:]*):[\s]+([\s]*high[\s]+|[\s]*low[\s]+|[\s]*High[\s]+)[\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hmonth> <hday> <htime> pfsp: The <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+pfsp:[\s]+The[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <hmonth> <hday> <htime> pfsp: Alert <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+pfsp:[\s]+Alert[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <hmonth> <hday> <htime> pfsp: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+pfsp:[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <hmonth> <hday> <htime> <hfld1>: <msgIdPart1> <msgIdPart2>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} %{hfld1}: %{msgIdPart1} %{msgIdPart2}: %{message}" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <hmonth> <hday> <htime> <hfld1>: <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hday} %{htime} %{hfld1}: %{messageid}: %{message}" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_arborpeakflowspmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Flow" {
		# MESSAGE Flow:Down
		# line in RSA: Flow down for router <node>, leader <parent_node> since <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Flow down for router %{node}, leader %{parent_node} since %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-Flow:Down"
				add_field => {
					"[event][id]" => "Flow:Down"
					"[rsa][message][id1]" => "Flow:Down"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Flow:Restored
		# line in RSA: Flow restored for router <node>, leader <parent_node> at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Flow restored for router %{node}, leader %{parent_node} at %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-Flow:Restored"
				add_field => {
					"[event][id]" => "Flow:Restored"
					"[rsa][message][id1]" => "Flow:Restored"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "BGP" {
		# MESSAGE BGP:Down
		# line in RSA: <protocol> down for router <node>, leader <parent_node> since <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} down for router %{node}, leader %{parent_node} since %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-BGP:Down"
				add_field => {
					"[event][id]" => "BGP:Down"
					"[rsa][message][id1]" => "BGP:Down"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE BGP:Restored
		# line in RSA: <protocol> restored for router <node>, leader <parent_node> at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} restored for router %{node}, leader %{parent_node} at %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-BGP:Restored"
				add_field => {
					"[event][id]" => "BGP:Restored"
					"[rsa][message][id1]" => "BGP:Restored"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE BGP:Instability
		# line in RSA: <protocol> instability router <node> threshold <fld25> (<fld1>) observed <trigger_val> (<fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} instability router %{node} threshold %{fld25} (%{fld1}) observed %{trigger_val} (%{fld2})" }
				id => "message-BGP:Instability"
				add_field => {
					"[event][id]" => "BGP:Instability"
					"[rsa][message][id1]" => "BGP:Instability"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE BGP:Instability_Ended
		# line in RSA: <protocol> Instability for router <node> ended
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} Instability for router %{node} ended" }
				id => "message-BGP:Instability_Ended"
				add_field => {
					"[event][id]" => "BGP:Instability_Ended"
					"[rsa][message][id1]" => "BGP:Instability_Ended"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE BGP:Hijack
		# line in RSA: <protocol> Hijack local_prefix <fld26> router <node> bgp_prefix <fld27> bgp_attributes <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} Hijack local_prefix %{fld26} router %{node} bgp_prefix %{fld27} bgp_attributes %{event_description}" }
				id => "message-BGP:Hijack"
				add_field => {
					"[event][id]" => "BGP:Hijack"
					"[rsa][message][id1]" => "BGP:Hijack"
					"[event][categoryid]" => "1002050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE BGP:Hijack_Done
		# line in RSA: <protocol> Hijack for prefix <fld26> router <node> done
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} Hijack for prefix %{fld26} router %{node} done" }
				id => "message-BGP:Hijack_Done"
				add_field => {
					"[event][id]" => "BGP:Hijack_Done"
					"[rsa][message][id1]" => "BGP:Hijack_Done"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE BGP:Trap
		# line in RSA: <protocol> Trap <node>: Prefix <fld5> <fld6> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} Trap %{node}: Prefix %{fld5} %{fld6} %{event_description}" }
				id => "message-BGP:Trap"
				add_field => {
					"[event][id]" => "BGP:Trap"
					"[rsa][message][id1]" => "BGP:Trap"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Device" {
		# MESSAGE Device:Unreachable
		# line in RSA: Device <node> unreachable by controller <parent_node> since <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Device %{node} unreachable by controller %{parent_node} since %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20}" }
				id => "message-Device:Unreachable"
				add_field => {
					"[event][id]" => "Device:Unreachable"
					"[rsa][message][id1]" => "Device:Unreachable"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:Reachable
		# line in RSA: Device <node> reachable again by controller <parent_node> at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Device %{node} reachable again by controller %{parent_node} at %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-Device:Reachable"
				add_field => {
					"[event][id]" => "Device:Reachable"
					"[rsa][message][id1]" => "Device:Reachable"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Hardware" {
		# MESSAGE Hardware:Failure
		# line in RSA: Hardware failure on <node> since <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> GMT: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Hardware failure on %{node} since %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} GMT: %{event_description}" }
				id => "message-Hardware:Failure"
				add_field => {
					"[event][id]" => "Hardware:Failure"
					"[rsa][message][id1]" => "Hardware:Failure"
					"[event][categoryid]" => "1603010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Hardware:Failure_Done
		# line in RSA: Hardware failure on <node> done at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21> GMT: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Hardware failure on %{node} done at %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21} GMT: %{event_description}" }
				id => "message-Hardware:Failure_Done"
				add_field => {
					"[event][id]" => "Hardware:Failure_Done"
					"[rsa][message][id1]" => "Hardware:Failure_Done"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "SNMP" {
		# MESSAGE SNMP:Down
		# line in RSA: <protocol> down for router <node>, leader <parent_node> since <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} down for router %{node}, leader %{parent_node} since %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-SNMP:Down"
				add_field => {
					"[event][id]" => "SNMP:Down"
					"[rsa][message][id1]" => "SNMP:Down"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SNMP:Restored
		# line in RSA: <protocol> restored for router <node>, leader <parent_node> at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{protocol} restored for router %{node}, leader %{parent_node} at %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-SNMP:Restored"
				add_field => {
					"[event][id]" => "SNMP:Restored"
					"[rsa][message][id1]" => "SNMP:Restored"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA: configuration was changed on leader <parent_node> to version <version> by <administrator>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "configuration was changed on leader %{parent_node} to version %{version} by %{administrator}" }
			id => "msgParserId13"
			add_field => {
				"event_description" => "Configuration changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId14
	# line in RSA: Autoclassification was restarted on <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21> by <administrator>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "Autoclassification was restarted on %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21} by %{administrator}" }
			id => "msgParserId14"
			add_field => {
				"event_description" => "Autoclassification restarted"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "GRE" {
		# MESSAGE GRE:Down
		# line in RSA: GRE tunnel down for destination <daddr>, leader <parent_node> since <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "GRE tunnel down for destination %{daddr}, leader %{parent_node} since %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-GRE:Down"
				add_field => {
					"[event][id]" => "GRE:Down"
					"[rsa][message][id1]" => "GRE:Down"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE GRE:Restored
		# line in RSA: GRE tunnel restored for destination <daddr>, leader <parent_node> at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "GRE tunnel restored for destination %{daddr}, leader %{parent_node} at %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-GRE:Restored"
				add_field => {
					"[event][id]" => "GRE:Restored"
					"[rsa][message][id1]" => "GRE:Restored"
					"[event][categoryid]" => "1801020100"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "mitigation" {
		# MESSAGE mitigation:TMS_Start
		# line in RSA: pfsp: TMS mitigation <policyname> started at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^pfsp:[\s]+TMS[\s]+mitigation[\s]+(?<policyname>[^\s]*)[\s]+started[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
				id => "message-mitigation:TMS_Start"
				add_field => {
				"event_type" => "TMS mitigation"
				"disposition" => "ongoing"
					"[event][id]" => "mitigation:TMS_Start"
					"[rsa][message][id1]" => "mitigation:TMS_Start"
					"[event][categoryid]" => "1502020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mitigation:TMS_Stop
		# line in RSA: pfsp: TMS mitigation <policyname> stopped at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^pfsp:[\s]+TMS[\s]+mitigation[\s]+(?<policyname>[^\s]*)[\s]+stopped[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
				id => "message-mitigation:TMS_Stop"
				add_field => {
				"event_type" => "TMS mitigation"
				"disposition" => "done"
					"[event][id]" => "mitigation:TMS_Stop"
					"[rsa][message][id1]" => "mitigation:TMS_Stop"
					"[event][categoryid]" => "1502020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mitigation:Thirdparty_Start
		# line in RSA: pfsp: Third party mitigation <node> started at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^pfsp:[\s]+Third[\s]+party[\s]+mitigation[\s]+(?<node>[^\s]*)[\s]+started[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
				id => "message-mitigation:Thirdparty_Start"
				add_field => {
				"event_type" => "Third party mitigation"
				"disposition" => "ongoing"
					"[event][id]" => "mitigation:Thirdparty_Start"
					"[rsa][message][id1]" => "mitigation:Thirdparty_Start"
					"[event][categoryid]" => "1502020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mitigation:Thirdparty_Stop
		# line in RSA: pfsp: Third party mitigation <node> stopped at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^pfsp:[\s]+Third[\s]+party[\s]+mitigation[\s]+(?<node>[^\s]*)[\s]+stopped[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
				id => "message-mitigation:Thirdparty_Stop"
				add_field => {
				"event_type" => "Third party mitigation"
				"disposition" => "done"
					"[event][id]" => "mitigation:Thirdparty_Stop"
					"[rsa][message][id1]" => "mitigation:Thirdparty_Stop"
					"[event][categoryid]" => "1502020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mitigation:Blackhole_Start
		# line in RSA: pfsp: Blackhole mitigation <node> started at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^pfsp:[\s]+Blackhole[\s]+mitigation[\s]+(?<node>[^\s]*)[\s]+started[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
				id => "message-mitigation:Blackhole_Start"
				add_field => {
				"event_type" => "Blackhole mitigation"
				"disposition" => "ongoing"
					"[event][id]" => "mitigation:Blackhole_Start"
					"[rsa][message][id1]" => "mitigation:Blackhole_Start"
					"[event][categoryid]" => "1502020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mitigation:Blackhole_Stop
		# line in RSA: pfsp: Blackhole mitigation <node> stopped at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^pfsp:[\s]+Blackhole[\s]+mitigation[\s]+(?<node>[^\s]*)[\s]+stopped[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
				id => "message-mitigation:Blackhole_Stop"
				add_field => {
				"event_type" => "Blackhole mitigation"
				"disposition" => "done"
					"[event][id]" => "mitigation:Blackhole_Stop"
					"[rsa][message][id1]" => "mitigation:Blackhole_Stop"
					"[event][categoryid]" => "1502020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mitigation:Flowspec_Start
		# line in RSA: pfsp: Flowspec mitigation <node> started at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^pfsp:[\s]+Flowspec[\s]+mitigation[\s]+(?<node>[^\s]*)[\s]+started[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
				id => "message-mitigation:Flowspec_Start"
				add_field => {
				"event_type" => "Flowspec mitigation"
				"disposition" => "ongoing"
					"[event][id]" => "mitigation:Flowspec_Start"
					"[rsa][message][id1]" => "mitigation:Flowspec_Start"
					"[event][categoryid]" => "1502020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mitigation:Flowspec_Stop
		# line in RSA: pfsp: Flowspec mitigation <node> stopped at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^pfsp:[\s]+Flowspec[\s]+mitigation[\s]+(?<node>[^\s]*)[\s]+stopped[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
				id => "message-mitigation:Flowspec_Stop"
				add_field => {
				"event_type" => "Flowspec mitigation"
				"disposition" => "done"
					"[event][id]" => "mitigation:Flowspec_Stop"
					"[rsa][message][id1]" => "mitigation:Flowspec_Stop"
					"[event][categoryid]" => "1502020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "TMS" {
		# MESSAGE TMS:Fault_Cleared
		# line in RSA: TMS '<event_description>' fault for resource '<resource>' on TMS <node> cleared
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TMS '%{event_description}' fault for resource '%{resource}' on TMS %{node} cleared" }
				id => "message-TMS:Fault_Cleared"
				add_field => {
				"event_type" => "Fault Cleared"
					"[event][id]" => "TMS:Fault_Cleared"
					"[rsa][message][id1]" => "TMS:Fault_Cleared"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE TMS:Fault
		# line in RSA: TMS '<event_description>' fault for resource '<resource>' on TMS <node>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TMS '%{event_description}' fault for resource '%{resource}' on TMS %{node}" }
				id => "message-TMS:Fault"
				add_field => {
				"event_type" => "Fault Occured"
					"[event][id]" => "TMS:Fault"
					"[rsa][message][id1]" => "TMS:Fault"
					"[event][categoryid]" => "1603010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "usage_alert" {
		# MESSAGE usage_alert:Interface
		# line in RSA: pfsp: <trigger_desc> interface usage alert <fld1> for router <node> interface "<interface>" speed <fld2> threshold <fld25> observed <trigger_val> pct <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "pfsp: %{trigger_desc} interface usage alert %{fld1} for router %{node} interface \"%{interface}\" speed %{fld2} threshold %{fld25} observed %{trigger_val} pct %{fld3}" }
				id => "message-usage_alert:Interface"
				add_field => {
					"[event][id]" => "usage_alert:Interface"
					"[rsa][message][id1]" => "usage_alert:Interface"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE usage_alert:Interface_Done
		# line in RSA: pfsp: <trigger_desc> interface usage alert <fld1> done for router <node> interface "<interface>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "pfsp: %{trigger_desc} interface usage alert %{fld1} done for router %{node} interface \"%{interface}\"" }
				id => "message-usage_alert:Interface_Done"
				add_field => {
					"[event][id]" => "usage_alert:Interface_Done"
					"[rsa][message][id1]" => "usage_alert:Interface_Done"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE usage_alert:Fingerprint_Threshold
		# line in RSA: pfsp: <trigger_desc> usage alert <fld1> for fingerprint <policyname> threshold <fld25> observed <trigger_val>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "pfsp: %{trigger_desc} usage alert %{fld1} for fingerprint %{policyname} threshold %{fld25} observed %{trigger_val}" }
				id => "message-usage_alert:Fingerprint_Threshold"
				add_field => {
					"[event][id]" => "usage_alert:Fingerprint_Threshold"
					"[rsa][message][id1]" => "usage_alert:Fingerprint_Threshold"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE usage_alert:Fingerprint_Threshold_Done
		# line in RSA: pfsp: <trigger_desc> usage alert <fld1> for fingerprint <policyname> done
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "pfsp: %{trigger_desc} usage alert %{fld1} for fingerprint %{policyname} done" }
				id => "message-usage_alert:Fingerprint_Threshold_Done"
				add_field => {
					"[event][id]" => "usage_alert:Fingerprint_Threshold_Done"
					"[rsa][message][id1]" => "usage_alert:Fingerprint_Threshold_Done"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE usage_alert:Service_Threshold
		# line in RSA: pfsp: <trigger_desc> <fld1> usage alert <fld2> for service <service>, <application> threshold <fld25> observed <trigger_val>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "pfsp: %{trigger_desc} %{fld1} usage alert %{fld2} for service %{service}, %{application} threshold %{fld25} observed %{trigger_val}" }
				id => "message-usage_alert:Service_Threshold"
				add_field => {
					"[event][id]" => "usage_alert:Service_Threshold"
					"[rsa][message][id1]" => "usage_alert:Service_Threshold"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE usage_alert:Service_Threshold_Done
		# line in RSA: pfsp: <trigger_desc> <fld1> alert <fld2> for service <service> done
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "pfsp: %{trigger_desc} %{fld1} alert %{fld2} for service %{service} done" }
				id => "message-usage_alert:Service_Threshold_Done"
				add_field => {
					"[event][id]" => "usage_alert:Service_Threshold_Done"
					"[rsa][message][id1]" => "usage_alert:Service_Threshold_Done"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE usage_alert:ManagedObject_Threshold
		# line in RSA: pfsp: <trigger_desc> usage alert <fld1> for <category> <fld2> threshold <fld25> observed <trigger_val>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "pfsp: %{trigger_desc} usage alert %{fld1} for %{category} %{fld2} threshold %{fld25} observed %{trigger_val}" }
				id => "message-usage_alert:ManagedObject_Threshold"
				add_field => {
					"[event][id]" => "usage_alert:ManagedObject_Threshold"
					"[rsa][message][id1]" => "usage_alert:ManagedObject_Threshold"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE usage_alert:ManagedObject_Threshold_Done
		# line in RSA: pfsp: <trigger_desc> usage alert <fld1> for <fld3> <fld4> done
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "pfsp: %{trigger_desc} usage alert %{fld1} for %{fld3} %{fld4} done" }
				id => "message-usage_alert:ManagedObject_Threshold_Done"
				add_field => {
					"[event][id]" => "usage_alert:ManagedObject_Threshold_Done"
					"[rsa][message][id1]" => "usage_alert:ManagedObject_Threshold_Done"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA: Test syslog message
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "Test syslog message" }
			id => "msgParserId35"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId36
	# line in RSA: script <node> ran at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21>, | , } leader <parent_node>
	else if [logstash][msgparser][id] == "msgParserId36" {
		grok {
			match => { "message" => "^script[\s]+(?<node>[^\s]*)[\s]+ran[\s]+at[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^,]*),[\s]+|[\s]*,[\s]+)[\s]+leader[\s]+(?<parent_node>.*)$" }
			id => "msgParserId36"
			add_field => {
				"event_type" => "Script mitigation"
				"disposition" => "ongoing"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "anomaly" {
		# MESSAGE anomaly:Resource_Info:01
		# line in RSA: anomaly Bandwidth id <event_id> status <disposition> severity <severity> classification <category> impact <fld10> src <daddr>/<dport> <fld1> dst <saddr>/<sport> <fld2> start <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21> duration | duration } <duration> percent <fld3> rate <fld4> rateUnit <fld5> protocol <protocol> flags <fld6> url <url>, <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^anomaly[\s]+Bandwidth[\s]+id[\s]+(?<event_id>[^\s]*)[\s]+status[\s]+(?<disposition>[^\s]*)[\s]+severity[\s]+(?<severity>[^\s]*)[\s]+classification[\s]+(?<category>[^\s]*)[\s]+impact[\s]+(?<fld10>[^\s]*)[\s]+src[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+dst[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+start[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^\s]*)[\s]+duration[\s]+|[\s]*duration[\s]+)[\s]+(?<duration>[^\s]*)[\s]+percent[\s]+(?<fld3>[^\s]*)[\s]+rate[\s]+(?<fld4>[^\s]*)[\s]+rateUnit[\s]+(?<fld5>[^\s]*)[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+flags[\s]+(?<fld6>[^\s]*)[\s]+url[\s]+(?<url>[^,]*),[\s]+(?<info>.*)$" }
				id => "message-anomaly:Resource_Info:01"
				add_field => {
				"signame" => "Bandwidth"
					"[event][id]" => "anomaly:Resource_Info:01"
					"[rsa][message][id1]" => "anomaly:Resource_Info:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE anomaly:Resource_Info:02
		# line in RSA: anomaly Bandwidth id <event_id> status <disposition> severity <severity> classification <category> src <daddr>/<dport> <fld1> dst <saddr>/<sport> <fld2> start <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21> duration | duration } <duration> percent <fld3> rate <fld4> rateUnit <fld5> protocol <protocol> flags <fld6> url <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^anomaly[\s]+Bandwidth[\s]+id[\s]+(?<event_id>[^\s]*)[\s]+status[\s]+(?<disposition>[^\s]*)[\s]+severity[\s]+(?<severity>[^\s]*)[\s]+classification[\s]+(?<category>[^\s]*)[\s]+src[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+dst[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+start[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^\s]*)[\s]+duration[\s]+|[\s]*duration[\s]+)[\s]+(?<duration>[^\s]*)[\s]+percent[\s]+(?<fld3>[^\s]*)[\s]+rate[\s]+(?<fld4>[^\s]*)[\s]+rateUnit[\s]+(?<fld5>[^\s]*)[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+flags[\s]+(?<fld6>[^\s]*)[\s]+url[\s]+(?<url>.*)$" }
				id => "message-anomaly:Resource_Info:02"
				add_field => {
				"signame" => "Bandwidth"
					"[event][id]" => "anomaly:Resource_Info:02"
					"[rsa][message][id1]" => "anomaly:Resource_Info:02"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE anomaly:Resource_Info:03
		# line in RSA: anomaly <signame> id <event_id> status <disposition> severity <severity> classification <category> impact <fld10> src <daddr>/<dport> <fld1> dst <saddr>/<sport> <fld2> start <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21> duration | duration } <duration> percent <fld3> rate <fld4> rateUnit <fld5> protocol <protocol> flags <fld6>  url <url>, <info> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^anomaly[\s]+(?<signame>[^\s]*)[\s]+id[\s]+(?<event_id>[^\s]*)[\s]+status[\s]+(?<disposition>[^\s]*)[\s]+severity[\s]+(?<severity>[^\s]*)[\s]+classification[\s]+(?<category>[^\s]*)[\s]+impact[\s]+(?<fld10>[^\s]*)[\s]+src[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+dst[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+start[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^\s]*)[\s]+duration[\s]+|[\s]*duration[\s]+)[\s]+(?<duration>[^\s]*)[\s]+percent[\s]+(?<fld3>[^\s]*)[\s]+rate[\s]+(?<fld4>[^\s]*)[\s]+rateUnit[\s]+(?<fld5>[^\s]*)[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+flags[\s]+(?<fld6>[^\s]*)[\s]+url[\s]+(?<url>[^,]*),[\s]+(?<info>[^\s]*)[\s]+$" }
				id => "message-anomaly:Resource_Info:03"
				add_field => {
					"[event][id]" => "anomaly:Resource_Info:03"
					"[rsa][message][id1]" => "anomaly:Resource_Info:03"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE anomaly:Resource_Info:04
		# line in RSA: anomaly <signame> id <event_id> status <disposition> severity <severity> classification <category> src <daddr>/<dport> <fld1> dst <saddr>/<sport> <fld2> start <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> { <fld21> duration | duration } <duration> percent <fld3> rate <fld4> rateUnit <fld5> protocol <protocol> flags <fld6> url <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^anomaly[\s]+(?<signame>[^\s]*)[\s]+id[\s]+(?<event_id>[^\s]*)[\s]+status[\s]+(?<disposition>[^\s]*)[\s]+severity[\s]+(?<severity>[^\s]*)[\s]+classification[\s]+(?<category>[^\s]*)[\s]+src[\s]+(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+dst[\s]+(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+start[\s]+(?<fld15>[^\-]*)\-(?<fld16>[^\-]*)\-(?<fld17>[^\s]*)[\s]+(?<fld18>[^:]*):(?<fld19>[^:]*):(?<fld20>[^\s]*)[\s]+([\s]*(?<fld21>[^\s]*)[\s]+duration[\s]+|[\s]*duration[\s]+)[\s]+(?<duration>[^\s]*)[\s]+percent[\s]+(?<fld3>[^\s]*)[\s]+rate[\s]+(?<fld4>[^\s]*)[\s]+rateUnit[\s]+(?<fld5>[^\s]*)[\s]+protocol[\s]+(?<protocol>[^\s]*)[\s]+flags[\s]+(?<fld6>[^\s]*)[\s]+url[\s]+(?<url>.*)$" }
				id => "message-anomaly:Resource_Info:04"
				add_field => {
					"[event][id]" => "anomaly:Resource_Info:04"
					"[rsa][message][id1]" => "anomaly:Resource_Info:04"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE anomaly:Router_Info:01
		# line in RSA: anomaly Bandwidth id <sigid> status <disposition> severity <severity> classification <category> router <fld6> router_name <node> interface <fld4> interface_name "<interface>" <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "anomaly Bandwidth id %{sigid} status %{disposition} severity %{severity} classification %{category} router %{fld6} router_name %{node} interface %{fld4} interface_name \"%{interface}\" %{fld5}" }
				id => "message-anomaly:Router_Info:01"
				add_field => {
				"signame" => "Bandwidth"
					"[event][id]" => "anomaly:Router_Info:01"
					"[rsa][message][id1]" => "anomaly:Router_Info:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE anomaly:Router_Info:02
		# line in RSA: anomaly <signame> id <sigid> status <disposition> severity <severity> classification <category> router <fld6> router_name <node> interface <fld4> interface_name "<interface>" <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "anomaly %{signame} id %{sigid} status %{disposition} severity %{severity} classification %{category} router %{fld6} router_name %{node} interface %{fld4} interface_name \"%{interface}\" %{fld5}" }
				id => "message-anomaly:Router_Info:02"
				add_field => {
					"[event][id]" => "anomaly:Router_Info:02"
					"[rsa][message][id1]" => "anomaly:Router_Info:02"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Peakflow" {
		# MESSAGE Peakflow:Unreachable
		# line in RSA: Peakflow device <node> unreachable by <parent_node> since <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Peakflow device %{node} unreachable by %{parent_node} since %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20}" }
				id => "message-Peakflow:Unreachable"
				add_field => {
					"[event][id]" => "Peakflow:Unreachable"
					"[rsa][message][id1]" => "Peakflow:Unreachable"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Peakflow:Reachable
		# line in RSA: Peakflow device <node> reachable again by <parent_node> at <fld15>-<fld16>-<fld17> <fld18>:<fld19>:<fld20> <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Peakflow device %{node} reachable again by %{parent_node} at %{fld15}-%{fld16}-%{fld17} %{fld18}:%{fld19}:%{fld20} %{fld21}" }
				id => "message-Peakflow:Reachable"
				add_field => {
					"[event][id]" => "Peakflow:Reachable"
					"[rsa][message][id1]" => "Peakflow:Reachable"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Host" {
		# MESSAGE Host:Detection
		# line in RSA:  Host Detection alert <fld1>, start <fld2> <fld3> <fld4>, duration <duration>, stop <fld5> <fld6> <fld7>, , importance <severity>, managed_objects (<fld8>), is now <result>, (parent managed object <fld9>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Host Detection alert %{fld1}, start %{fld2} %{fld3} %{fld4}, duration %{duration}, stop %{fld5} %{fld6} %{fld7}, , importance %{severity}, managed_objects (%{fld8}), is now %{result}, (parent managed object %{fld9})" }
				id => "message-Host:Detection"
				add_field => {
					"[event][id]" => "Host:Detection"
					"[rsa][message][id1]" => "Host:Detection"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Host:Detection:01
		# line in RSA:  Host Detection alert <fld1>, start <fld2> <fld3> <fld4>, duration <duration>, direction <direction>, host <saddr>, signatures (<signame>), impact <fld5>, importance <severity>, managed_objects (<fld6>), (parent managed object <fld7>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Host Detection alert %{fld1}, start %{fld2} %{fld3} %{fld4}, duration %{duration}, direction %{direction}, host %{saddr}, signatures (%{signame}), impact %{fld5}, importance %{severity}, managed_objects (%{fld6}), (parent managed object %{fld7})" }
				id => "message-Host:Detection:01"
				add_field => {
					"[event][id]" => "Host:Detection:01"
					"[rsa][message][id1]" => "Host:Detection:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Infrastructure" {
		# MESSAGE Infrastructure
		# line in RSA:  AIF license expiring cleared,URL: <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AIF license expiring cleared,URL: %{url}" }
				id => "message-Infrastructure"
				add_field => {
				"event_description" => "AIF license expiring cleared"
					"[event][id]" => "Infrastructure"
					"[rsa][message][id1]" => "Infrastructure"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Infrastructure:02
		# line in RSA: Hardware sensor detected a critical state.  System Fan<fld1>:<fld2>Triggering value:<fld3>,URL:<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Hardware sensor detected a critical state.  System Fan%{fld1}:%{fld2}Triggering value:%{fld3},URL:%{url}" }
				id => "message-Infrastructure:02"
				add_field => {
				"event_description" => "Hardware sensor detected a critical state"
					"[event][id]" => "Infrastructure:02"
					"[rsa][message][id1]" => "Infrastructure:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Infrastructure:01
		# line in RSA:  AIF license expired cleared,URL: <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AIF license expired cleared,URL: %{url}" }
				id => "message-Infrastructure:01"
				add_field => {
				"event_description" => "AIF license expired cleared"
					"[event][id]" => "Infrastructure:01"
					"[rsa][message][id1]" => "Infrastructure:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId50
	# line in RSA: Blocked host<saddr>at<fld1>by Blocked Countries using<protocol>destination<daddr>,URL:<url>
	else if [logstash][msgparser][id] == "msgParserId50" {
		dissect {
			mapping => { "message" => "Blocked host%{saddr}at%{fld1}by Blocked Countries using%{protocol}destination%{daddr},URL:%{url}" }
			id => "msgParserId50"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId51
	# line in RSA: Username:<username>, Subsystem:<fld1>, Setting Type:<fld2>, Message:<fld3>
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "Username:%{username}, Subsystem:%{fld1}, Setting Type:%{fld2}, Message:%{fld3}" }
			id => "msgParserId51"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA: Changed protection mode to active for protection group<group>,URL:<url>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "Changed protection mode to active for protection group%{group},URL:%{url}" }
			id => "msgParserId52"
			add_field => {
				"event_description" => "Changed protection mode to active for protection group"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_arborpeakflowspmsg.json"
#			template_name => "arborpeakflowsp_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

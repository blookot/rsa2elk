# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "airdefense"
			"[observer][name]" => "Airdefense Enterprise"
			"[observer][type]" => "Wireless Devices"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hmonth> <hdate> <htime> { Cleared or Expired Alarm: ClearOrExpiredTime= | Time= } <hdatetime>,Category=<msgIdPart1> <msgIdPart2>,CriticalityLevel=<hlevel>, <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+([\s]*Cleared[\s]+or[\s]+Expired[\s]+Alarm:[\s]+ClearOrExpiredTime=[\s]+|[\s]*Time=[\s]+)[\s]+(?<hdatetime>[^,]*),Category=(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^,]*),CriticalityLevel=(?<hlevel>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hdate> <htime> { Cleared or Expired Alarm: ClearOrExpiredTime= | Time= } <hdatetime>,Category=<messageid>,CriticalityLevel=<hlevel>, <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+([\s]*Cleared[\s]+or[\s]+Expired[\s]+Alarm:[\s]+ClearOrExpiredTime=[\s]+|[\s]*Time=[\s]+)[\s]+(?<hdatetime>[^,]*),Category=(?<message>(?<messageid>[^,]*),CriticalityLevel=(?<hlevel>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth> <hdate> <htime> <hostid> { Cleared or Expired Alarm: ClearOrExpiredTime= | Time= } <hdatetime>,Category=<msgIdPart1> <msgIdPart2>,CriticalityLevel=<hlevel>, <!payload:msgIdPart1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hostid>[^\s]*)[\s]+([\s]*Cleared[\s]+or[\s]+Expired[\s]+Alarm:[\s]+ClearOrExpiredTime=[\s]+|[\s]*Time=[\s]+)[\s]+(?<hdatetime>[^,]*),Category=(?<message>(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^,]*),CriticalityLevel=(?<hlevel>[^,]*),[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_airdefensemsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Rogue_Activity" {
		# MESSAGE Rogue_AP_on_Sensor_Segment
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue AP on Sensor Segment,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+AP[\s]+on[\s]+Sensor[\s]+Segment,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_AP_on_Sensor_Segment"
				add_field => {
				"signame" => "Rogue AP on Sensor Segment"
					"[event][id]" => "Rogue_AP_on_Sensor_Segment"
					"[rsa][message][id1]" => "Rogue_AP_on_Sensor_Segment"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Wireless_Client_Accidental_Association
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Wireless Client Accidental Association,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Wireless[\s]+Client[\s]+Accidental[\s]+Association,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Wireless_Client_Accidental_Association"
				add_field => {
				"signame" => "Wireless Client Accidental Association"
					"[event][id]" => "Wireless_Client_Accidental_Association"
					"[rsa][message][id1]" => "Wireless_Client_Accidental_Association"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Rogue_Client_on_Switch
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue Client on Switch,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+Client[\s]+on[\s]+Switch,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_Client_on_Switch"
				add_field => {
				"signame" => "Rogue Client on Switch"
					"[event][id]" => "Rogue_Client_on_Switch"
					"[rsa][message][id1]" => "Rogue_Client_on_Switch"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sanctioned_Client_Association_to_Unsanctioned_Virtual_WIFI
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Sanctioned Client Association to Unsanctioned Virtual WIFI,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Sanctioned[\s]+Client[\s]+Association[\s]+to[\s]+Unsanctioned[\s]+Virtual[\s]+WIFI,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sanctioned_Client_Association_to_Unsanctioned_Virtual_WIFI"
				add_field => {
				"signame" => "Sanctioned Client Association to Unsanctioned Virtual WIFI"
					"[event][id]" => "Sanctioned_Client_Association_to_Unsanctioned_Virtual_WIFI"
					"[rsa][message][id1]" => "Sanctioned_Client_Association_to_Unsanctioned_Virtual_WIFI"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unsanctioned_Bridge
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unsanctioned Bridge,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unsanctioned[\s]+Bridge,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unsanctioned_Bridge"
				add_field => {
				"signame" => "Unsanctioned Bridge"
					"[event][id]" => "Unsanctioned_Bridge"
					"[rsa][message][id1]" => "Unsanctioned_Bridge"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Rogue_Client
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue Client,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+Client,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_Client"
				add_field => {
				"signame" => "Rogue Client"
					"[event][id]" => "Rogue_Client"
					"[rsa][message][id1]" => "Rogue_Client"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Rogue_Bridge
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue Bridge,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+Bridge,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_Bridge"
				add_field => {
				"signame" => "Rogue Bridge"
					"[event][id]" => "Rogue_Bridge"
					"[rsa][message][id1]" => "Rogue_Bridge"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Rogue_Station
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue Station,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+Station,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_Station"
				add_field => {
				"signame" => "Rogue Station"
					"[event][id]" => "Rogue_Station"
					"[rsa][message][id1]" => "Rogue_Station"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sanctioned_Client_with_Rogue_Virtual_WiFi_on_Network
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Sanctioned Client with Rogue Virtual WiFi on Network,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Sanctioned[\s]+Client[\s]+with[\s]+Rogue[\s]+Virtual[\s]+WiFi[\s]+on[\s]+Network,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sanctioned_Client_with_Rogue_Virtual_WiFi_on_Network"
				add_field => {
				"signame" => "Sanctioned Client with Rogue Virtual WiFi on Network"
					"[event][id]" => "Sanctioned_Client_with_Rogue_Virtual_WiFi_on_Network"
					"[rsa][message][id1]" => "Sanctioned_Client_with_Rogue_Virtual_WiFi_on_Network"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Rogue_AP_on_Wired_Network
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue AP on Wired Network,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+AP[\s]+on[\s]+Wired[\s]+Network,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_AP_on_Wired_Network"
				add_field => {
				"signame" => "Rogue AP on Wired Network"
					"[event][id]" => "Rogue_AP_on_Wired_Network"
					"[rsa][message][id1]" => "Rogue_AP_on_Wired_Network"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Station_Accidental_Association
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Station Accidental Association,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Station[\s]+Accidental[\s]+Association,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Station_Accidental_Association"
				add_field => {
				"signame" => "Station Accidental Association"
					"[event][id]" => "Station_Accidental_Association"
					"[rsa][message][id1]" => "Station_Accidental_Association"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unauthorized_AP
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unauthorized AP,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unauthorized[\s]+AP,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unauthorized_AP"
				add_field => {
				"signame" => "Unauthorized AP"
					"[event][id]" => "Unauthorized_AP"
					"[rsa][message][id1]" => "Unauthorized_AP"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unauthorized_Station
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unauthorized Station,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unauthorized[\s]+Station,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unauthorized_Station"
				add_field => {
				"signame" => "Unauthorized Station"
					"[event][id]" => "Unauthorized_Station"
					"[rsa][message][id1]" => "Unauthorized_Station"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Suspected_Wireless_Device_on_Wired_Network
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Suspected Wireless Device on Wired Network,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Suspected[\s]+Wireless[\s]+Device[\s]+on[\s]+Wired[\s]+Network,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Suspected_Wireless_Device_on_Wired_Network"
				add_field => {
				"signame" => "Suspected Wireless Device on Wired Network"
					"[event][id]" => "Suspected_Wireless_Device_on_Wired_Network"
					"[rsa][message][id1]" => "Suspected_Wireless_Device_on_Wired_Network"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Rogue_Station_on_Switch
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue Station on Switch,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+Station[\s]+on[\s]+Switch,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_Station_on_Switch"
				add_field => {
				"signame" => "Rogue Station on Switch"
					"[event][id]" => "Rogue_Station_on_Switch"
					"[rsa][message][id1]" => "Rogue_Station_on_Switch"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unsanctioned_BSS
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unsanctioned BSS,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unsanctioned[\s]+BSS,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unsanctioned_BSS"
				add_field => {
				"signame" => "Unsanctioned BSS"
					"[event][id]" => "Unsanctioned_BSS"
					"[rsa][message][id1]" => "Unsanctioned_BSS"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Virtual_Wifi_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Virtual Wifi Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Virtual[\s]+Wifi[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Virtual_Wifi_Detected"
				add_field => {
				"signame" => "Virtual Wifi Detected"
					"[event][id]" => "Virtual_Wifi_Detected"
					"[rsa][message][id1]" => "Virtual_Wifi_Detected"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unauthorized_Roaming
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unauthorized Roaming,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unauthorized[\s]+Roaming,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unauthorized_Roaming"
				add_field => {
				"signame" => "Unauthorized Roaming"
					"[event][id]" => "Unauthorized_Roaming"
					"[rsa][message][id1]" => "Unauthorized_Roaming"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Rogue_Client_on_Sensor_Segment
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue Client on Sensor Segment,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+Client[\s]+on[\s]+Sensor[\s]+Segment,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_Client_on_Sensor_Segment"
				add_field => {
				"signame" => "Rogue Client on Sensor Segment"
					"[event][id]" => "Rogue_Client_on_Sensor_Segment"
					"[rsa][message][id1]" => "Rogue_Client_on_Sensor_Segment"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unsanctioned_Wireless_Client_Probing_for_Sanctioned_SSID
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unsanctioned Wireless Client Probing for Sanctioned SSID,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unsanctioned[\s]+Wireless[\s]+Client[\s]+Probing[\s]+for[\s]+Sanctioned[\s]+SSID,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unsanctioned_Wireless_Client_Probing_for_Sanctioned_SSID"
				add_field => {
				"signame" => "Unsanctioned Wireless Client Probing for Sanctioned SSID"
					"[event][id]" => "Unsanctioned_Wireless_Client_Probing_for_Sanctioned_SSID"
					"[rsa][message][id1]" => "Unsanctioned_Wireless_Client_Probing_for_Sanctioned_SSID"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Rogue_AP_on_Switch
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Rogue AP on Switch,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Rogue[\s]+AP[\s]+on[\s]+Switch,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Rogue_AP_on_Switch"
				add_field => {
				"signame" => "Rogue AP on Switch"
					"[event][id]" => "Rogue_AP_on_Switch"
					"[rsa][message][id1]" => "Rogue_AP_on_Switch"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Exploits" {
		# MESSAGE Ad-Hoc_Advertising_Sanctioned_SSID
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Ad-Hoc Advertising Sanctioned SSID,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) },AlarmLocation:<location_desc>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Ad\-Hoc[\s]+Advertising[\s]+Sanctioned[\s]+SSID,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+),AlarmLocation:(?<location_desc>.*)$" }
				id => "message-Ad-Hoc_Advertising_Sanctioned_SSID"
				add_field => {
				"signame" => "Ad-Hoc Advertising Sanctioned SSID"
					"[event][id]" => "Ad-Hoc_Advertising_Sanctioned_SSID"
					"[rsa][message][id1]" => "Ad-Hoc_Advertising_Sanctioned_SSID"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unsanctioned_BSS_Using_Sanctioned_SSID
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unsanctioned BSS Using Sanctioned SSID,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unsanctioned[\s]+BSS[\s]+Using[\s]+Sanctioned[\s]+SSID,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unsanctioned_BSS_Using_Sanctioned_SSID"
				add_field => {
				"signame" => "Unsanctioned BSS Using Sanctioned SSID"
					"[event][id]" => "Unsanctioned_BSS_Using_Sanctioned_SSID"
					"[rsa][message][id1]" => "Unsanctioned_BSS_Using_Sanctioned_SSID"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sanctioned_BSS_Using_Unsanctioned_SSID
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Sanctioned BSS Using Unsanctioned SSID,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Sanctioned[\s]+BSS[\s]+Using[\s]+Unsanctioned[\s]+SSID,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sanctioned_BSS_Using_Unsanctioned_SSID"
				add_field => {
				"signame" => "Sanctioned BSS Using Unsanctioned SSID"
					"[event][id]" => "Sanctioned_BSS_Using_Unsanctioned_SSID"
					"[rsa][message][id1]" => "Sanctioned_BSS_Using_Unsanctioned_SSID"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE EAP_Authentication_Flood
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=EAP Authentication Flood,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=EAP[\s]+Authentication[\s]+Flood,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-EAP_Authentication_Flood"
				add_field => {
				"signame" => "EAP Authentication Flood"
					"[event][id]" => "EAP_Authentication_Flood"
					"[rsa][message][id1]" => "EAP_Authentication_Flood"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE 802.11_Authentication_Flood
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=802.11 Authentication Flood,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=802\.11[\s]+Authentication[\s]+Flood,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-802.11_Authentication_Flood"
				add_field => {
				"signame" => "802.11 Authentication Flood"
					"[event][id]" => "802.11_Authentication_Flood"
					"[rsa][message][id1]" => "802.11_Authentication_Flood"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Device_Observed_in_Geographically_Different_Locations
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Device Observed in Geographically Different Locations,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Device[\s]+Observed[\s]+in[\s]+Geographically[\s]+Different[\s]+Locations,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Device_Observed_in_Geographically_Different_Locations"
				add_field => {
				"signame" => "Device Observed in Geographically Different Locations"
					"[event][id]" => "Device_Observed_in_Geographically_Different_Locations"
					"[rsa][message][id1]" => "Device_Observed_in_Geographically_Different_Locations"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE SSID_SQL_Injection_Attack
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=SSID SQL Injection Attack,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=SSID[\s]+SQL[\s]+Injection[\s]+Attack,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-SSID_SQL_Injection_Attack"
				add_field => {
				"signame" => "SSID SQL Injection Attack"
					"[event][id]" => "SSID_SQL_Injection_Attack"
					"[rsa][message][id1]" => "SSID_SQL_Injection_Attack"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE MAC_Observed_On_Different_Device_Types
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=MAC Observed On Different Device Types,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=MAC[\s]+Observed[\s]+On[\s]+Different[\s]+Device[\s]+Types,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-MAC_Observed_On_Different_Device_Types"
				add_field => {
				"signame" => "MAC Observed On Different Device Types"
					"[event][id]" => "MAC_Observed_On_Different_Device_Types"
					"[rsa][message][id1]" => "MAC_Observed_On_Different_Device_Types"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE DoS_CTS_Flood
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=DoS CTS Flood,<space>device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=DoS[\s]+CTS[\s]+Flood,(?<space>[^d]*)device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-DoS_CTS_Flood"
				add_field => {
				"signame" => "DoS CTS Flood"
					"[event][id]" => "DoS_CTS_Flood"
					"[rsa][message][id1]" => "DoS_CTS_Flood"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Honeypot_AP_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Honeypot AP Detected,device= <macaddr>(<fld1>),<space>sensor=<sensor>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{category},CriticalityLevel=%{severity},Desc=Honeypot AP Detected,device= %{macaddr}(%{fld1}),%{space}sensor=%{sensor}" }
				id => "message-Honeypot_AP_Detected"
				add_field => {
				"signame" => "Honeypot AP Detected"
					"[event][id]" => "Honeypot_AP_Detected"
					"[rsa][message][id1]" => "Honeypot_AP_Detected"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Fake-AP_Flood_Attack
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Fake-AP Flood Attack,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Fake\-AP[\s]+Flood[\s]+Attack,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Fake-AP_Flood_Attack"
				add_field => {
				"signame" => "Fake-AP Flood Attack"
					"[event][id]" => "Fake-AP_Flood_Attack"
					"[rsa][message][id1]" => "Fake-AP_Flood_Attack"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE DoS_Deauthentication
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=DoS Deauthentication,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=DoS[\s]+Deauthentication,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-DoS_Deauthentication"
				add_field => {
				"signame" => "DoS Deauthentication"
					"[event][id]" => "DoS_Deauthentication"
					"[rsa][message][id1]" => "DoS_Deauthentication"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE DoS_Disassociation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=DoS Disassociation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=DoS[\s]+Disassociation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-DoS_Disassociation"
				add_field => {
				"signame" => "DoS Disassociation"
					"[event][id]" => "DoS_Disassociation"
					"[rsa][message][id1]" => "DoS_Disassociation"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Replay_Injection_Attack
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Replay Injection Attack,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Replay[\s]+Injection[\s]+Attack,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Replay_Injection_Attack"
				add_field => {
				"signame" => "Replay Injection Attack"
					"[event][id]" => "Replay_Injection_Attack"
					"[rsa][message][id1]" => "Replay_Injection_Attack"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Fake-DHCP_Server_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Fake-DHCP Server Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Fake\-DHCP[\s]+Server[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Fake-DHCP_Server_Detected"
				add_field => {
				"signame" => "Desc=Fake-DHCP Server Detected"
					"[event][id]" => "Fake-DHCP_Server_Detected"
					"[rsa][message][id1]" => "Fake-DHCP_Server_Detected"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Hunter-Killer_Tool_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Hunter-Killer Tool Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Hunter\-Killer[\s]+Tool[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Hunter-Killer_Tool_Detected"
				add_field => {
				"signame" => "Hunter-Killer Tool Detected"
					"[event][id]" => "Hunter-Killer_Tool_Detected"
					"[rsa][message][id1]" => "Hunter-Killer_Tool_Detected"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Monkey-Jack_Tool_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Monkey-Jack Tool Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Monkey\-Jack[\s]+Tool[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Monkey-Jack_Tool_Detected"
				add_field => {
				"signame" => "Monkey-Jack Tool Detected"
					"[event][id]" => "Monkey-Jack_Tool_Detected"
					"[rsa][message][id1]" => "Monkey-Jack_Tool_Detected"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Multipot_Attack_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Multipot Attack Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Multipot[\s]+Attack[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Multipot_Attack_Detected"
				add_field => {
				"signame" => "Multipot Attack Detected"
					"[event][id]" => "Multipot_Attack_Detected"
					"[rsa][message][id1]" => "Multipot_Attack_Detected"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unauthorized_AP_Using_Authorized_SSID
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unauthorized AP Using Authorized SSID,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unauthorized[\s]+AP[\s]+Using[\s]+Authorized[\s]+SSID,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unauthorized_AP_Using_Authorized_SSID"
				add_field => {
				"signame" => "Unauthorized AP Using Authorized SSID"
					"[event][id]" => "Unauthorized_AP_Using_Authorized_SSID"
					"[rsa][message][id1]" => "Unauthorized_AP_Using_Authorized_SSID"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE DoS_Excessive_Station_MACs
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=DoS Excessive Station MACs,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=DoS[\s]+Excessive[\s]+Station[\s]+MACs,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-DoS_Excessive_Station_MACs"
				add_field => {
				"signame" => "DoS Excessive Station MACs"
					"[event][id]" => "DoS_Excessive_Station_MACs"
					"[rsa][message][id1]" => "DoS_Excessive_Station_MACs"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE DoS_EAP_Authentication_Flood
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=DoS EAP Authentication Flood,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=DoS[\s]+EAP[\s]+Authentication[\s]+Flood,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-DoS_EAP_Authentication_Flood"
				add_field => {
				"signame" => "DoS EAP Authentication Flood"
					"[event][id]" => "DoS_EAP_Authentication_Flood"
					"[rsa][message][id1]" => "DoS_EAP_Authentication_Flood"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE DoS_EAPOL-Start_Storm
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=DoS EAPOL-Start Storm,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=DoS[\s]+EAPOL\-Start[\s]+Storm,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-DoS_EAPOL-Start_Storm"
				add_field => {
				"signame" => "DoS EAPOL-Start Storm"
					"[event][id]" => "DoS_EAPOL-Start_Storm"
					"[rsa][message][id1]" => "DoS_EAPOL-Start_Storm"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE EAP_Dictionary_Attack
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=EAP Dictionary Attack,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=EAP[\s]+Dictionary[\s]+Attack,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-EAP_Dictionary_Attack"
				add_field => {
				"signame" => "EAP Dictionary Attack"
					"[event][id]" => "EAP_Dictionary_Attack"
					"[rsa][message][id1]" => "EAP_Dictionary_Attack"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE ID_Theft:_Out_of_Sequence
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=ID Theft: Out of Sequence,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=ID[\s]+Theft:[\s]+Out[\s]+of[\s]+Sequence,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-ID_Theft:_Out_of_Sequence"
				add_field => {
				"signame" => "ID Theft: Out of Sequence"
					"[event][id]" => "ID_Theft:_Out_of_Sequence"
					"[rsa][message][id1]" => "ID_Theft:_Out_of_Sequence"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE DoS_RF_Jamming
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=DoS RF Jamming,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=DoS[\s]+RF[\s]+Jamming,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-DoS_RF_Jamming"
				add_field => {
				"signame" => "DoS RF Jamming"
					"[event][id]" => "DoS_RF_Jamming"
					"[rsa][message][id1]" => "DoS_RF_Jamming"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Hotspotter_Tool_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Hotspotter Tool Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Hotspotter[\s]+Tool[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Hotspotter_Tool_Detected"
				add_field => {
				"signame" => "Hotspotter Tool Detected"
					"[event][id]" => "Hotspotter_Tool_Detected"
					"[rsa][message][id1]" => "Hotspotter_Tool_Detected"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE ASLeap_Attack
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=ASLeap Attack,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=ASLeap[\s]+Attack,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-ASLeap_Attack"
				add_field => {
				"signame" => "ASLeap Attack"
					"[event][id]" => "ASLeap_Attack"
					"[rsa][message][id1]" => "ASLeap_Attack"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE EAP_Handshake_Flood
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=EAP Handshake Flood,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=EAP[\s]+Handshake[\s]+Flood,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-EAP_Handshake_Flood"
				add_field => {
				"signame" => "EAP Handshake Flood"
					"[event][id]" => "EAP_Handshake_Flood"
					"[rsa][message][id1]" => "EAP_Handshake_Flood"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS_and_Wireless_Client_Using_the_Same_Address
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS and Wireless Client Using the Same Address,<result>,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS[\s]+and[\s]+Wireless[\s]+Client[\s]+Using[\s]+the[\s]+Same[\s]+Address,(?<result>[^,]*),device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS_and_Wireless_Client_Using_the_Same_Address"
				add_field => {
				"signame" => "BSS and Wireless Client Using the Same Address,Possible Virtual WIFI"
					"[event][id]" => "BSS_and_Wireless_Client_Using_the_Same_Address"
					"[rsa][message][id1]" => "BSS_and_Wireless_Client_Using_the_Same_Address"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE RF_Jamming
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=RF Jamming,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=RF[\s]+Jamming,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-RF_Jamming"
				add_field => {
				"signame" => "RF Jamming"
					"[event][id]" => "RF_Jamming"
					"[rsa][message][id1]" => "RF_Jamming"
					"[event][categoryid]" => "1001010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE CTS_Flood
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=CTS Flood,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=CTS[\s]+Flood,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-CTS_Flood"
				add_field => {
				"signame" => "CTS Flood"
					"[event][id]" => "CTS_Flood"
					"[rsa][message][id1]" => "CTS_Flood"
					"[event][categoryid]" => "1002020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE EAPOL-Start_Storm
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=EAPOL-Start Storm,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=EAPOL\-Start[\s]+Storm,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-EAPOL-Start_Storm"
				add_field => {
				"signame" => "EAPOL-Start Storm"
					"[event][id]" => "EAPOL-Start_Storm"
					"[rsa][message][id1]" => "EAPOL-Start_Storm"
					"[event][categoryid]" => "1002020000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Association_Table_Overflow
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Association Table Overflow,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Association[\s]+Table[\s]+Overflow,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Association_Table_Overflow"
				add_field => {
				"signame" => "Association Table Overflow"
					"[event][id]" => "Association_Table_Overflow"
					"[rsa][message][id1]" => "Association_Table_Overflow"
					"[event][categoryid]" => "1001020206"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Wired_Device_Shows_Wireless_Activity
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Wired Device Shows Wireless Activity,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Wired[\s]+Device[\s]+Shows[\s]+Wireless[\s]+Activity,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Wired_Device_Shows_Wireless_Activity"
				add_field => {
				"signame" => "Wired Device Shows Wireless Activity"
					"[event][id]" => "Wired_Device_Shows_Wireless_Activity"
					"[rsa][message][id1]" => "Wired_Device_Shows_Wireless_Activity"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE NAV_Attack_CTS
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=NAV Attack - CTS,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=NAV[\s]+Attack[\s]+\-[\s]+CTS,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-NAV_Attack_CTS"
				add_field => {
				"signame" => "NAV Attack - CTS"
					"[event][id]" => "NAV_Attack_CTS"
					"[rsa][message][id1]" => "NAV_Attack_CTS"
					"[event][categoryid]" => "1001030000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Vulnerabilities" {
		# MESSAGE Invalid_Management_Frame
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Invalid Management Frame,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Invalid[\s]+Management[\s]+Frame,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Invalid_Management_Frame"
				add_field => {
				"signame" => "Invalid Management Frame"
					"[event][id]" => "Invalid_Management_Frame"
					"[rsa][message][id1]" => "Invalid_Management_Frame"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS_Rate_Change
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS Rate Change,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS[\s]+Rate[\s]+Change,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS_Rate_Change"
				add_field => {
				"signame" => "BSS Rate Change"
					"[event][id]" => "BSS_Rate_Change"
					"[rsa][message][id1]" => "BSS_Rate_Change"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS_ESSID_Change
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS ESSID Change,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS[\s]+ESSID[\s]+Change,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS_ESSID_Change"
				add_field => {
				"signame" => "BSS ESSID Change"
					"[event][id]" => "BSS_ESSID_Change"
					"[rsa][message][id1]" => "BSS_ESSID_Change"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Wireless_Client_Vulnerable_to_HotSpotter_Attack
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Wireless Client Vulnerable to HotSpotter Attack,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Wireless[\s]+Client[\s]+Vulnerable[\s]+to[\s]+HotSpotter[\s]+Attack,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Wireless_Client_Vulnerable_to_HotSpotter_Attack"
				add_field => {
				"signame" => "Wireless Client Vulnerable to HotSpotter Attack"
					"[event][id]" => "Wireless_Client_Vulnerable_to_HotSpotter_Attack"
					"[rsa][message][id1]" => "Wireless_Client_Vulnerable_to_HotSpotter_Attack"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AD-HOC_Advertising_Authorized_SSID
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AD-HOC Advertising Authorized SSID,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AD\-HOC[\s]+Advertising[\s]+Authorized[\s]+SSID,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AD-HOC_Advertising_Authorized_SSID"
				add_field => {
				"signame" => "AD-HOC Advertising Authorized SSID"
					"[event][id]" => "AD-HOC_Advertising_Authorized_SSID"
					"[rsa][message][id1]" => "AD-HOC_Advertising_Authorized_SSID"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Random_MAC_Address_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Random MAC Address Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Random[\s]+MAC[\s]+Address[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Random_MAC_Address_Detected"
				add_field => {
				"signame" => "Random MAC Address Detected"
					"[event][id]" => "Random_MAC_Address_Detected"
					"[rsa][message][id1]" => "Random_MAC_Address_Detected"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unencrypted_Broadcast_or_Multicast_Traffic_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unencrypted Broadcast or Multicast Traffic Detected in Encrypted Environment,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unencrypted[\s]+Broadcast[\s]+or[\s]+Multicast[\s]+Traffic[\s]+Detected[\s]+in[\s]+Encrypted[\s]+Environment,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unencrypted_Broadcast_or_Multicast_Traffic_Detected"
				add_field => {
				"signame" => "Unencrypted Broadcast or Multicast Traffic Detected in Encrypted Environment"
					"[event][id]" => "Unencrypted_Broadcast_or_Multicast_Traffic_Detected"
					"[rsa][message][id1]" => "Unencrypted_Broadcast_or_Multicast_Traffic_Detected"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Station_Vulnerable_to_HotSpotter_Attack
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Station Vulnerable to HotSpotter Attack,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Station[\s]+Vulnerable[\s]+to[\s]+HotSpotter[\s]+Attack,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Station_Vulnerable_to_HotSpotter_Attack"
				add_field => {
				"signame" => "Station Vulnerable to HotSpotter Attack"
					"[event][id]" => "Station_Vulnerable_to_HotSpotter_Attack"
					"[rsa][message][id1]" => "Station_Vulnerable_to_HotSpotter_Attack"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Unassociated_Station_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Unassociated Station Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Unassociated[\s]+Station[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Unassociated_Station_Detected"
				add_field => {
				"signame" => "Unassociated Station Detected"
					"[event][id]" => "Unassociated_Station_Detected"
					"[rsa][message][id1]" => "Unassociated_Station_Detected"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE NetBIOS_Traffic
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=NetBIOS Traffic,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=NetBIOS[\s]+Traffic,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-NetBIOS_Traffic"
				add_field => {
				"signame" => "NetBIOS Traffic"
					"[event][id]" => "NetBIOS_Traffic"
					"[rsa][message][id1]" => "NetBIOS_Traffic"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Soft_AP
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Soft AP,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Soft[\s]+AP,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Soft_AP"
				add_field => {
				"signame" => "Soft AP"
					"[event][id]" => "Soft_AP"
					"[rsa][message][id1]" => "Soft_AP"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Rate_Change
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Rate Change,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Rate[\s]+Change,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Rate_Change"
				add_field => {
				"signame" => "AP Rate Change"
					"[event][id]" => "AP_Rate_Change"
					"[rsa][message][id1]" => "AP_Rate_Change"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Crackable_WEP_IV_Key_Used
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Crackable WEP IV Key Used,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Crackable[\s]+WEP[\s]+IV[\s]+Key[\s]+Used,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Crackable_WEP_IV_Key_Used"
				add_field => {
				"signame" => "Crackable WEP IV Key Used"
					"[event][id]" => "Crackable_WEP_IV_Key_Used"
					"[rsa][message][id1]" => "Crackable_WEP_IV_Key_Used"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Channel_Change
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Channel Change,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Channel[\s]+Change,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Channel_Change"
				add_field => {
				"signame" => "AP Channel Change"
					"[event][id]" => "AP_Channel_Change"
					"[rsa][message][id1]" => "AP_Channel_Change"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_ESSID_Change
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP ESSID Change,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+ESSID[\s]+Change,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_ESSID_Change"
				add_field => {
				"signame" => "AP ESSID Change"
					"[event][id]" => "AP_ESSID_Change"
					"[rsa][message][id1]" => "AP_ESSID_Change"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Conversation_Loop
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Conversation Loop,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Conversation[\s]+Loop,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Conversation_Loop"
				add_field => {
				"signame" => "Conversation Loop"
					"[event][id]" => "Conversation_Loop"
					"[rsa][message][id1]" => "Conversation_Loop"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Fuzzing:_Invalid_Management_Frame
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Fuzzing: Invalid Management Frame,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Fuzzing:[\s]+Invalid[\s]+Management[\s]+Frame,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Fuzzing:_Invalid_Management_Frame"
				add_field => {
				"signame" => "Fuzzing: Invalid Management Frame"
					"[event][id]" => "Fuzzing:_Invalid_Management_Frame"
					"[rsa][message][id1]" => "Fuzzing:_Invalid_Management_Frame"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE IGMP_Multicast_Traffic
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=IGMP Multicast Traffic,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=IGMP[\s]+Multicast[\s]+Traffic,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-IGMP_Multicast_Traffic"
				add_field => {
				"signame" => "IGMP Multicast Traffic"
					"[event][id]" => "IGMP_Multicast_Traffic"
					"[rsa][message][id1]" => "IGMP_Multicast_Traffic"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE STP_Traffic
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=STP Traffic,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=STP[\s]+Traffic,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-STP_Traffic"
				add_field => {
				"signame" => "STP Traffic"
					"[event][id]" => "STP_Traffic"
					"[rsa][message][id1]" => "STP_Traffic"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Transmitting_Device_Using_Invalid_MAC
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Transmitting Device Using Invalid MAC,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Transmitting[\s]+Device[\s]+Using[\s]+Invalid[\s]+MAC,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Transmitting_Device_Using_Invalid_MAC"
				add_field => {
				"signame" => "Transmitting Device Using Invalid MAC"
					"[event][id]" => "Transmitting_Device_Using_Invalid_MAC"
					"[rsa][message][id1]" => "Transmitting_Device_Using_Invalid_MAC"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Watched_Station_Active
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Watched Station Active,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Watched[\s]+Station[\s]+Active,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Watched_Station_Active"
				add_field => {
				"signame" => "Watched Station Active"
					"[event][id]" => "Watched_Station_Active"
					"[rsa][message][id1]" => "Watched_Station_Active"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Fuzzing:_Invalid_Channel_Advertisement
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Fuzzing: Invalid Channel Advertisement,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Fuzzing:[\s]+Invalid[\s]+Channel[\s]+Advertisement,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Fuzzing:_Invalid_Channel_Advertisement"
				add_field => {
				"signame" => "Fuzzing: Invalid Channel Advertisement"
					"[event][id]" => "Fuzzing:_Invalid_Channel_Advertisement"
					"[rsa][message][id1]" => "Fuzzing:_Invalid_Channel_Advertisement"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE IGRP_Multicast_Traffic
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=IGRP Multicast Traffic,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=IGRP[\s]+Multicast[\s]+Traffic,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-IGRP_Multicast_Traffic"
				add_field => {
				"signame" => "IGRP Multicast Traffic"
					"[event][id]" => "IGRP_Multicast_Traffic"
					"[rsa][message][id1]" => "IGRP_Multicast_Traffic"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Multicast_All_Systems_On_This_Subnet
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Multicast All Systems On This Subnet,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Multicast[\s]+All[\s]+Systems[\s]+On[\s]+This[\s]+Subnet,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Multicast_All_Systems_On_This_Subnet"
				add_field => {
				"signame" => "Multicast All Systems On This Subnet"
					"[event][id]" => "Multicast_All_Systems_On_This_Subnet"
					"[rsa][message][id1]" => "Multicast_All_Systems_On_This_Subnet"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE IPX_Traffic
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=IPX Traffic,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=IPX[\s]+Traffic,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-IPX_Traffic"
				add_field => {
				"signame" => "IPX Traffic"
					"[event][id]" => "IPX_Traffic"
					"[rsa][message][id1]" => "IPX_Traffic"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Duplicate_Information_Elements
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Duplicate Information Elements,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Duplicate[\s]+Information[\s]+Elements,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Duplicate_Information_Elements"
				add_field => {
				"signame" => "Duplicate Information Elements"
					"[event][id]" => "Duplicate_Information_Elements"
					"[rsa][message][id1]" => "Duplicate_Information_Elements"
					"[event][categoryid]" => "1805010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Invalid_Channel_Advertisement
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Invalid Channel Advertisement,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Invalid[\s]+Channel[\s]+Advertisement,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Invalid_Channel_Advertisement"
				add_field => {
				"signame" => "Invalid Channel Advertisement"
					"[event][id]" => "Invalid_Channel_Advertisement"
					"[rsa][message][id1]" => "Invalid_Channel_Advertisement"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "System_Health" {
		# MESSAGE Sensor_Offline
		# line in RSA:  System Health,CriticalityLevel=<severity>,Desc=Sensor Offline,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*System[\s]+Health,CriticalityLevel=(?<severity>[^,]*),Desc=Sensor[\s]+Offline,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sensor_Offline"
				add_field => {
				"signame" => "Sensor Offline"
				"category" => "System Health"
					"[event][id]" => "Sensor_Offline"
					"[rsa][message][id1]" => "Sensor_Offline"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sensor_Active_Termination_Initiated
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Sensor Active Termination Initiated,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Sensor[\s]+Active[\s]+Termination[\s]+Initiated,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sensor_Active_Termination_Initiated"
				add_field => {
				"signame" => "Sensor Active Termination Initiated"
					"[event][id]" => "Sensor_Active_Termination_Initiated"
					"[rsa][message][id1]" => "Sensor_Active_Termination_Initiated"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sensor_Disabled_for_WIPS
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Sensor Disabled for WIPS,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Sensor[\s]+Disabled[\s]+for[\s]+WIPS,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sensor_Disabled_for_WIPS"
				add_field => {
				"signame" => "Sensor Disabled for WIPS"
					"[event][id]" => "Sensor_Disabled_for_WIPS"
					"[rsa][message][id1]" => "Sensor_Disabled_for_WIPS"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sensor_Active_Termination_Cancelled
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Sensor Active Termination Cancelled,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Sensor[\s]+Active[\s]+Termination[\s]+Cancelled,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sensor_Active_Termination_Cancelled"
				add_field => {
				"signame" => "Sensor Active Termination Cancelled"
					"[event][id]" => "Sensor_Active_Termination_Cancelled"
					"[rsa][message][id1]" => "Sensor_Active_Termination_Cancelled"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Appliance_Synchronization_Failed
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Appliance Synchronization Failed,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Appliance[\s]+Synchronization[\s]+Failed,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Appliance_Synchronization_Failed"
				add_field => {
				"signame" => "Appliance Synchronization Failed"
					"[event][id]" => "Appliance_Synchronization_Failed"
					"[rsa][message][id1]" => "Appliance_Synchronization_Failed"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Platform_Health" {
		# MESSAGE Sensor_Offline:01
		# line in RSA:  Platform Health,CriticalityLevel=<severity>,Desc=Sensor Offline,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Platform[\s]+Health,CriticalityLevel=(?<severity>[^,]*),Desc=Sensor[\s]+Offline,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sensor_Offline:01"
				add_field => {
				"signame" => "Sensor Offline"
				"category" => "Platform Health"
					"[event][id]" => "Sensor_Offline:01"
					"[rsa][message][id1]" => "Sensor_Offline:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sensor_Offline:02
		# line in RSA:  Platform Health,CriticalityLevel=<severity>,Desc=Sensor Offline,State=<event_state>,device=<macaddr>[<fld1>],Location=<location_desc>,Alarm Details=<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Platform Health,CriticalityLevel=%{severity},Desc=Sensor Offline,State=%{event_state},device=%{macaddr}[%{fld1}],Location=%{location_desc},Alarm Details=%{event_description}" }
				id => "message-Sensor_Offline:02"
				add_field => {
				"signame" => "Sensor Offline"
				"category" => "Platform Health"
					"[event][id]" => "Sensor_Offline:02"
					"[rsa][message][id1]" => "Sensor_Offline:02"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Platform_Health
		# line in RSA:  Platform Health,CriticalityLevel=<severity>,Desc=License Pool Fully Utilized,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Platform[\s]+Health,CriticalityLevel=(?<severity>[^,]*),Desc=License[\s]+Pool[\s]+Fully[\s]+Utilized,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Platform_Health"
				add_field => {
				"signame" => "License Pool Fully Utilized"
				"category" => "Platform Health"
					"[event][id]" => "Platform_Health"
					"[rsa][message][id1]" => "Platform_Health"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Platform_Health:01
		# line in RSA:  Platform Health,CriticalityLevel=<severity>,Desc=New Device Added,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Platform[\s]+Health,CriticalityLevel=(?<severity>[^,]*),Desc=New[\s]+Device[\s]+Added,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Platform_Health:01"
				add_field => {
				"signame" => "New Device Added"
				"category" => "Platform Health"
					"[event][id]" => "Platform_Health:01"
					"[rsa][message][id1]" => "Platform_Health:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Policy_Compliance" {
		# MESSAGE Ad-Hoc_Network_Violation_Sanctioned_Client
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Ad-Hoc Network Violation Sanctioned Client,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Ad\-Hoc[\s]+Network[\s]+Violation[\s]+Sanctioned[\s]+Client,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Ad-Hoc_Network_Violation_Sanctioned_Client"
				add_field => {
				"signame" => "Ad-Hoc Network Violation Sanctioned Client"
					"[event][id]" => "Ad-Hoc_Network_Violation_Sanctioned_Client"
					"[rsa][message][id1]" => "Ad-Hoc_Network_Violation_Sanctioned_Client"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Data_Rates_Advertised
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Data Rates Advertised,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Data[\s]+Rates[\s]+Advertised,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Data_Rates_Advertised"
				add_field => {
				"signame" => "AP Data Rates Advertised"
					"[event][id]" => "AP_Data_Rates_Advertised"
					"[rsa][message][id1]" => "AP_Data_Rates_Advertised"
					"[event][categoryid]" => "1602010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AirFortress_Encryption_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AirFortress Encryption Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AirFortress[\s]+Encryption[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AirFortress_Encryption_Violation"
				add_field => {
				"signame" => "AirFortress Encryption Violation"
					"[event][id]" => "AirFortress_Encryption_Violation"
					"[rsa][message][id1]" => "AirFortress_Encryption_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Cranite_Encryption_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Cranite Encryption Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Cranite[\s]+Encryption[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Cranite_Encryption_Violation"
				add_field => {
				"signame" => "Cranite Encryption Violation"
					"[event][id]" => "Cranite_Encryption_Violation"
					"[rsa][message][id1]" => "Cranite_Encryption_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Ad-Hoc_Network_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Ad-Hoc Network Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Ad\-Hoc[\s]+Network[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Ad-Hoc_Network_Violation"
				add_field => {
				"signame" => "Ad-Hoc Network Violation"
					"[event][id]" => "Ad-Hoc_Network_Violation"
					"[rsa][message][id1]" => "Ad-Hoc_Network_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Station_Vendor_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Station Vendor Violation,<space>device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Station[\s]+Vendor[\s]+Violation,(?<space>[^d]*)device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Station_Vendor_Violation"
				add_field => {
				"signame" => "Station Vendor Violation"
					"[event][id]" => "Station_Vendor_Violation"
					"[rsa][message][id1]" => "Station_Vendor_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Authentication_Mode_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Authentication Mode Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Authentication[\s]+Mode[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Authentication_Mode_Violation"
				add_field => {
				"signame" => "AP Authentication Mode Violation"
					"[event][id]" => "AP_Authentication_Mode_Violation"
					"[rsa][message][id1]" => "AP_Authentication_Mode_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Device_Unprotected_by_TKIP
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Device Unprotected by TKIP,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Device[\s]+Unprotected[\s]+by[\s]+TKIP,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Device_Unprotected_by_TKIP"
				add_field => {
				"signame" => "Device Unprotected by TKIP"
					"[event][id]" => "Device_Unprotected_by_TKIP"
					"[rsa][message][id1]" => "Device_Unprotected_by_TKIP"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Stations_Communicating_Through_AP
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Stations Communicating Through AP,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Stations[\s]+Communicating[\s]+Through[\s]+AP,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Stations_Communicating_Through_AP"
				add_field => {
				"signame" => "Stations Communicating Through AP"
					"[event][id]" => "Stations_Communicating_Through_AP"
					"[rsa][message][id1]" => "Stations_Communicating_Through_AP"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Encryption_Mode_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Encryption Mode Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Encryption[\s]+Mode[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Encryption_Mode_Violation"
				add_field => {
				"signame" => "AP Encryption Mode Violation"
					"[event][id]" => "AP_Encryption_Mode_Violation"
					"[rsa][message][id1]" => "AP_Encryption_Mode_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sears_Service_Van_Nearby
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Sears Service Van Nearby,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Sears[\s]+Service[\s]+Van[\s]+Nearby,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sears_Service_Van_Nearby"
				add_field => {
				"signame" => "Sears Service Van Nearby"
					"[event][id]" => "Sears_Service_Van_Nearby"
					"[rsa][message][id1]" => "Sears_Service_Van_Nearby"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Ad-Hoc_Network_Violation_Authorized_Device
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Ad-Hoc Network Violation Authorized Device,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Ad\-Hoc[\s]+Network[\s]+Violation[\s]+Authorized[\s]+Device,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Ad-Hoc_Network_Violation_Authorized_Device"
				add_field => {
				"signame" => "Ad-Hoc Network Violation Authorized Device"
					"[event][id]" => "Ad-Hoc_Network_Violation_Authorized_Device"
					"[rsa][message][id1]" => "Ad-Hoc_Network_Violation_Authorized_Device"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Symbol_Keyguard_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Symbol Keyguard Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Symbol[\s]+Keyguard[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Symbol_Keyguard_Violation"
				add_field => {
				"signame" => "AP Symbol Keyguard Violation"
					"[event][id]" => "AP_Symbol_Keyguard_Violation"
					"[rsa][message][id1]" => "AP_Symbol_Keyguard_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Ad-Hoc_Network_Violation_Unauthorized_Device
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Ad-Hoc Network Violation Unauthorized Device,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Ad\-Hoc[\s]+Network[\s]+Violation[\s]+Unauthorized[\s]+Device,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Ad-Hoc_Network_Violation_Unauthorized_Device"
				add_field => {
				"signame" => "Ad-Hoc Network Violation Unauthorized Device"
					"[event][id]" => "Ad-Hoc_Network_Violation_Unauthorized_Device"
					"[rsa][message][id1]" => "Ad-Hoc_Network_Violation_Unauthorized_Device"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE 80211_Encryption_Modes_Violated
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=80211 Encryption Modes Violated,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=80211[\s]+Encryption[\s]+Modes[\s]+Violated,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-80211_Encryption_Modes_Violated"
				add_field => {
				"signame" => "80211 Encryption Modes Violated"
					"[event][id]" => "80211_Encryption_Modes_Violated"
					"[rsa][message][id1]" => "80211_Encryption_Modes_Violated"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_SSID_Broadcast_in_Beacon
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP SSID Broadcast in Beacon,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+SSID[\s]+Broadcast[\s]+in[\s]+Beacon,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_SSID_Broadcast_in_Beacon"
				add_field => {
				"signame" => "AP SSID Broadcast in Beacon"
					"[event][id]" => "AP_SSID_Broadcast_in_Beacon"
					"[rsa][message][id1]" => "AP_SSID_Broadcast_in_Beacon"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Advertised_Data_Rate_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Advertised Data Rate Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Advertised[\s]+Data[\s]+Rate[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Advertised_Data_Rate_Violation"
				add_field => {
				"signame" => "AP Advertised Data Rate Violation"
					"[event][id]" => "AP_Advertised_Data_Rate_Violation"
					"[rsa][message][id1]" => "AP_Advertised_Data_Rate_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Advanced_Key_Generation_Modes_Violated
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Advanced Key Generation Modes Violated,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Advanced[\s]+Key[\s]+Generation[\s]+Modes[\s]+Violated,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Advanced_Key_Generation_Modes_Violated"
				add_field => {
				"signame" => "Advanced Key Generation Modes Violated"
					"[event][id]" => "Advanced_Key_Generation_Modes_Violated"
					"[rsa][message][id1]" => "Advanced_Key_Generation_Modes_Violated"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Extended_Authentication_Modes_Violated
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Extended Authentication Modes Violated,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Extended[\s]+Authentication[\s]+Modes[\s]+Violated,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Extended_Authentication_Modes_Violated"
				add_field => {
				"signame" => "Extended Authentication Modes Violated"
					"[event][id]" => "Extended_Authentication_Modes_Violated"
					"[rsa][message][id1]" => "Extended_Authentication_Modes_Violated"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Missing_AP
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Missing AP,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Missing[\s]+AP,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Missing_AP"
				add_field => {
				"signame" => "Missing AP"
					"[event][id]" => "Missing_AP"
					"[rsa][message][id1]" => "Missing_AP"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Personal_Policy_Alarm
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Personal Policy Alarm,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Personal[\s]+Policy[\s]+Alarm,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Personal_Policy_Alarm"
				add_field => {
				"signame" => "Personal Policy Alarm"
					"[event][id]" => "Personal_Policy_Alarm"
					"[rsa][message][id1]" => "Personal_Policy_Alarm"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Device_Unprotected_by_802.1x
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Device Unprotected by 802.1x,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Device[\s]+Unprotected[\s]+by[\s]+802\.1x,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Device_Unprotected_by_802.1x"
				add_field => {
				"signame" => "Device Unprotected by 802.1x"
					"[event][id]" => "Device_Unprotected_by_802.1x"
					"[rsa][message][id1]" => "Device_Unprotected_by_802.1x"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Wireless_Client_Isolation_Communication_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Wireless Client Isolation Communication Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Wireless[\s]+Client[\s]+Isolation[\s]+Communication[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Wireless_Client_Isolation_Communication_Violation"
				add_field => {
				"signame" => "Wireless Client Isolation Communication Violation"
					"[event][id]" => "Wireless_Client_Isolation_Communication_Violation"
					"[rsa][message][id1]" => "Wireless_Client_Isolation_Communication_Violation"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Wi-Fi_Direct_Network_Violation_Sanctioned_Client
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Wi-Fi Direct Network Violation Sanctioned Client,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Wi\-Fi[\s]+Direct[\s]+Network[\s]+Violation[\s]+Sanctioned[\s]+Client,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Wi-Fi_Direct_Network_Violation_Sanctioned_Client"
				add_field => {
				"signame" => "Wi-Fi Direct Network Violation Sanctioned Client"
					"[event][id]" => "Wi-Fi_Direct_Network_Violation_Sanctioned_Client"
					"[rsa][message][id1]" => "Wi-Fi_Direct_Network_Violation_Sanctioned_Client"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Wireless_Bridging_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Wireless Bridging Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Wireless[\s]+Bridging[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Wireless_Bridging_Detected"
				add_field => {
				"signame" => "Wireless Bridging Detected"
					"[event][id]" => "Wireless_Bridging_Detected"
					"[rsa][message][id1]" => "Wireless_Bridging_Detected"
					"[event][categoryid]" => "1603060000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Infrastructure" {
		# MESSAGE Device_Offline
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Device Offline,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Device[\s]+Offline,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Device_Offline"
				add_field => {
				"signame" => "Device Offline"
					"[event][id]" => "Device_Offline"
					"[rsa][message][id1]" => "Device_Offline"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Device_Compliance_Check_Failed
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Device Compliance Check Failed,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Device[\s]+Compliance[\s]+Check[\s]+Failed,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Device_Compliance_Check_Failed"
				add_field => {
				"signame" => "Device Compliance Check Failed"
					"[event][id]" => "Device_Compliance_Check_Failed"
					"[rsa][message][id1]" => "Device_Compliance_Check_Failed"
					"[event][categoryid]" => "1603010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Performance" {
		# MESSAGE Association_Frames_Sent_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Association Frames Sent Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Association[\s]+Frames[\s]+Sent[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Association_Frames_Sent_Threshold_Exceeded"
				add_field => {
				"signame" => "Association Frames Sent Threshold Exceeded"
					"[event][id]" => "Association_Frames_Sent_Threshold_Exceeded"
					"[rsa][message][id1]" => "Association_Frames_Sent_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Base_802.11_Connection_Failure
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Base 802.11 Connection Failure,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Base[\s]+802\.11[\s]+Connection[\s]+Failure,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Base_802.11_Connection_Failure"
				add_field => {
				"signame" => "Base 802.11 Connection Failure"
					"[event][id]" => "Base_802.11_Connection_Failure"
					"[rsa][message][id1]" => "Base_802.11_Connection_Failure"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Wireless_Application_Coverage_Issue
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Wireless Application Coverage Issue,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Wireless[\s]+Application[\s]+Coverage[\s]+Issue,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Wireless_Application_Coverage_Issue"
				add_field => {
				"signame" => "Wireless Application Coverage Issue"
					"[event][id]" => "Wireless_Application_Coverage_Issue"
					"[rsa][message][id1]" => "Wireless_Application_Coverage_Issue"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Insufficient_Coverage_Overlap_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Insufficient Coverage Overlap Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Insufficient[\s]+Coverage[\s]+Overlap[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Insufficient_Coverage_Overlap_Detected"
				add_field => {
				"signame" => "Insufficient Coverage Overlap Detected"
					"[event][id]" => "Insufficient_Coverage_Overlap_Detected"
					"[rsa][message][id1]" => "Insufficient_Coverage_Overlap_Detected"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS:_Total_Associations_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS: Total Associations Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS:[\s]+Total[\s]+Associations[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS:_Total_Associations_Threshold_Exceeded"
				add_field => {
				"signame" => "BSS: Total Associations Threshold Exceeded"
					"[event][id]" => "BSS:_Total_Associations_Threshold_Exceeded"
					"[rsa][message][id1]" => "BSS:_Total_Associations_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Sensor_Selection_Failure
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Sensor Selection Failure,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Sensor[\s]+Selection[\s]+Failure,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Sensor_Selection_Failure"
				add_field => {
				"signame" => "Sensor Selection Failure"
					"[event][id]" => "Sensor_Selection_Failure"
					"[rsa][message][id1]" => "Sensor_Selection_Failure"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Co-Channel_Interference_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Co-Channel Interference Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Co\-Channel[\s]+Interference[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Co-Channel_Interference_Detected"
				add_field => {
				"signame" => "Co-Channel Interference Detected"
					"[event][id]" => "Co-Channel_Interference_Detected"
					"[rsa][message][id1]" => "Co-Channel_Interference_Detected"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Hidden_Station_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Hidden Station Detected,<space>device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Hidden[\s]+Station[\s]+Detected,(?<space>[^d]*)device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Hidden_Station_Detected"
				add_field => {
				"signame" => "Hidden Station Detected"
					"[event][id]" => "Hidden_Station_Detected"
					"[rsa][message][id1]" => "Hidden_Station_Detected"
					"[event][categoryid]" => "1804010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Rejected_Station_Association
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Rejected Station Association,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Rejected[\s]+Station[\s]+Association,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Rejected_Station_Association"
				add_field => {
				"signame" => "AP Rejected Station Association"
					"[event][id]" => "AP_Rejected_Station_Association"
					"[rsa][message][id1]" => "AP_Rejected_Station_Association"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AP_Short_Slot_Time_Violation
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AP Short Slot Time Violation,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AP[\s]+Short[\s]+Slot[\s]+Time[\s]+Violation,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AP_Short_Slot_Time_Violation"
				add_field => {
				"signame" => "AP Short Slot Time Violation"
					"[event][id]" => "AP_Short_Slot_Time_Violation"
					"[rsa][message][id1]" => "AP_Short_Slot_Time_Violation"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Station_Authentication_Failure
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Station Authentication Failure,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Station[\s]+Authentication[\s]+Failure,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Station_Authentication_Failure"
				add_field => {
				"signame" => "Station Authentication Failure"
					"[event][id]" => "Station_Authentication_Failure"
					"[rsa][message][id1]" => "Station_Authentication_Failure"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Traffic_Sent_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Traffic Sent Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Traffic[\s]+Sent[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Traffic_Sent_Threshold_Exceeded"
				add_field => {
				"signame" => "Traffic Sent Threshold Exceeded"
					"[event][id]" => "Traffic_Sent_Threshold_Exceeded"
					"[rsa][message][id1]" => "Traffic_Sent_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS:_Wireless_Station_to_Station_Traffic_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS: Wireless Station to Station Traffic Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS:[\s]+Wireless[\s]+Station[\s]+to[\s]+Station[\s]+Traffic[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS:_Wireless_Station_to_Station_Traffic_Threshold_Exceeded"
				add_field => {
				"signame" => "BSS: Wireless Station to Station Traffic Threshold Exceeded"
					"[event][id]" => "BSS:_Wireless_Station_to_Station_Traffic_Threshold_Exceeded"
					"[rsa][message][id1]" => "BSS:_Wireless_Station_to_Station_Traffic_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS:_Wired_to_Wireless_Traffic_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS: Wired to Wireless Traffic Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS:[\s]+Wired[\s]+to[\s]+Wireless[\s]+Traffic[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS:_Wired_to_Wireless_Traffic_Threshold_Exceeded"
				add_field => {
				"signame" => "BSS: Wired to Wireless Traffic Threshold Exceeded"
					"[event][id]" => "BSS:_Wired_to_Wireless_Traffic_Threshold_Exceeded"
					"[rsa][message][id1]" => "BSS:_Wired_to_Wireless_Traffic_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Traffic_Received_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Traffic Received Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Traffic[\s]+Received[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Traffic_Received_Threshold_Exceeded"
				add_field => {
				"signame" => "Traffic Received Threshold Exceeded"
					"[event][id]" => "Traffic_Received_Threshold_Exceeded"
					"[rsa][message][id1]" => "Traffic_Received_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Station_Excessive_Roaming_or_Reassociations
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Station Excessive Roaming or Reassociations,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Station[\s]+Excessive[\s]+Roaming[\s]+or[\s]+Reassociations,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Station_Excessive_Roaming_or_Reassociations"
				add_field => {
				"signame" => "Station Excessive Roaming or Reassociations"
					"[event][id]" => "Station_Excessive_Roaming_or_Reassociations"
					"[rsa][message][id1]" => "Station_Excessive_Roaming_or_Reassociations"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS:_Wireless_to_Wired_Traffic_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS: Wireless to Wired Traffic Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS:[\s]+Wireless[\s]+to[\s]+Wired[\s]+Traffic[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS:_Wireless_to_Wired_Traffic_Threshold_Exceeded"
				add_field => {
				"signame" => "BSS: Wireless to Wired Traffic Threshold Exceeded"
					"[event][id]" => "BSS:_Wireless_to_Wired_Traffic_Threshold_Exceeded"
					"[rsa][message][id1]" => "BSS:_Wireless_to_Wired_Traffic_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Device_Streaming_Traffic
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Device Streaming Traffic,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Device[\s]+Streaming[\s]+Traffic,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Device_Streaming_Traffic"
				add_field => {
				"signame" => "Device Streaming Traffic"
					"[event][id]" => "Device_Streaming_Traffic"
					"[rsa][message][id1]" => "Device_Streaming_Traffic"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Fragment_Frames_Sent_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Fragment Frames Sent Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Fragment[\s]+Frames[\s]+Sent[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Fragment_Frames_Sent_Threshold_Exceeded"
				add_field => {
				"signame" => "Fragment Frames Sent Threshold Exceeded"
					"[event][id]" => "Fragment_Frames_Sent_Threshold_Exceeded"
					"[rsa][message][id1]" => "Fragment_Frames_Sent_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS:_New_Associations_Threshold_Exceeded
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS: New Associations Threshold Exceeded,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS:[\s]+New[\s]+Associations[\s]+Threshold[\s]+Exceeded,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS:_New_Associations_Threshold_Exceeded"
				add_field => {
				"signame" => "BSS: New Associations Threshold Exceeded"
					"[event][id]" => "BSS:_New_Associations_Threshold_Exceeded"
					"[rsa][message][id1]" => "BSS:_New_Associations_Threshold_Exceeded"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Wireless_Client_Authentication_Failure
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Wireless Client Authentication Failure,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Wireless[\s]+Client[\s]+Authentication[\s]+Failure,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Wireless_Client_Authentication_Failure"
				add_field => {
				"signame" => "Wireless Client Authentication Failure"
					"[event][id]" => "Wireless_Client_Authentication_Failure"
					"[rsa][message][id1]" => "Wireless_Client_Authentication_Failure"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE BSS_Rejected_Station_Association
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=BSS Rejected Station Association,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=BSS[\s]+Rejected[\s]+Station[\s]+Association,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-BSS_Rejected_Station_Association"
				add_field => {
				"signame" => "BSS Rejected Station Association"
					"[event][id]" => "BSS_Rejected_Station_Association"
					"[rsa][message][id1]" => "BSS_Rejected_Station_Association"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Reconnaissance" {
		# MESSAGE Null_Probe_Response
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Null Probe Response,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Null[\s]+Probe[\s]+Response,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Null_Probe_Response"
				add_field => {
				"signame" => "Null Probe Response"
					"[event][id]" => "Null_Probe_Response"
					"[rsa][message][id1]" => "Null_Probe_Response"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE NetStumbler_Victim_Found
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=NetStumbler Victim Found,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=NetStumbler[\s]+Victim[\s]+Found,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-NetStumbler_Victim_Found"
				add_field => {
				"signame" => "NetStumbler Victim Found"
					"[event][id]" => "NetStumbler_Victim_Found"
					"[rsa][message][id1]" => "NetStumbler_Victim_Found"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE NetStumbler_Scanning
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=NetStumbler Scanning,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=NetStumbler[\s]+Scanning,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-NetStumbler_Scanning"
				add_field => {
				"signame" => "NetStumbler Scanning"
					"[event][id]" => "NetStumbler_Scanning"
					"[rsa][message][id1]" => "NetStumbler_Scanning"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE AirMagnet_Handheld_ScanningNet
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=AirMagnet Handheld Scanning,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=AirMagnet[\s]+Handheld[\s]+Scanning,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-AirMagnet_Handheld_ScanningNet"
				add_field => {
				"signame" => "AirMagnet Handheld ScanningNet"
					"[event][id]" => "AirMagnet_Handheld_ScanningNet"
					"[rsa][message][id1]" => "AirMagnet_Handheld_ScanningNet"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE Aggressive_Scanning
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=Aggressive Scanning,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=Aggressive[\s]+Scanning,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-Aggressive_Scanning"
				add_field => {
				"signame" => "Aggressive Scanning"
					"[event][id]" => "Aggressive_Scanning"
					"[rsa][message][id1]" => "Aggressive_Scanning"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE WEP_Chop_Chop_Attack_Detected
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=WEP Chop Chop Attack Detected,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=WEP[\s]+Chop[\s]+Chop[\s]+Attack[\s]+Detected,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-WEP_Chop_Chop_Attack_Detected"
				add_field => {
				"signame" => "WEP Chop Chop Attack Detected"
					"[event][id]" => "WEP_Chop_Chop_Attack_Detected"
					"[rsa][message][id1]" => "WEP_Chop_Chop_Attack_Detected"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
		# MESSAGE MDK3_Dissociation_Deauth_Attack
		# line in RSA:  <category>,CriticalityLevel=<severity>,Desc=MDK3 Dissociation/Deauth Attack,device={ (), | <macaddr>(<node> <fld2>[<protocol>]<ssid>), | <macaddr>(<node>[<protocol>]<ssid>), | <macaddr>(<fld1>), } sensor={ <sensor>(<access_point>[<protocol>],OffenderSSID=<ssid>) | <sensor>(<access_point>[<protocol>]) | <sensor>(<fld4>) }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<category>[^,]*),CriticalityLevel=(?<severity>[^,]*),Desc=MDK3[\s]+Dissociation/Deauth[\s]+Attack,device=([\s]*\(\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\s]*)[\s]+(?<fld2>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<node>[^\[]*)\[(?<protocol>[^\]]*)\](?<ssid>[^\)]*)\),[\s]+|[\s]*(?<macaddr>[^\(]*)\((?<fld1>[^\)]*)\),[\s]+)[\s]+sensor=([\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\],OffenderSSID=(?<ssid>[^\)]*)\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<access_point>[^\[]*)\[(?<protocol>[^\]]*)\]\)[\s]+|[\s]*(?<sensor>[^\(]*)\((?<fld4>[^\)]*)\)[\s]+)$" }
				id => "message-MDK3_Dissociation_Deauth_Attack"
				add_field => {
				"signame" => "MDK3 Dissociation/Deauth Attack"
					"[event][id]" => "MDK3_Dissociation_Deauth_Attack"
					"[rsa][message][id1]" => "MDK3_Dissociation_Deauth_Attack"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{hdatetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'HH:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_airdefensemsg.json"
#			template_name => "airdefense_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "trendmicroiwss"
			"[observer][name]" => "Trend Micro IWSS"
			"[observer][type]" => "Web Logs"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %TMIWSS: <hserver>^^<hsite>^^<hdate> <htime>^^<hnetwork_service>^^<messageid>^^<!payload:hserver>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TMIWSS:[\s]+(?<message>(?<hserver>[^\^]*)\^\^(?<hsite>[^\^]*)\^\^(?<hdate>[^\s]*)[\s]+(?<htime>[^\^]*)\^\^(?<hnetwork_service>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %TMIWSS-<hlevel>: <space> Date: <hdate> <htime>  <hfld1>  Method: <hnetwork_service>  Url: <hurl>  Rule: <hrulename>  Opp_id: <hfld2>  User_id: <hfld25>  Scan_type: <hfld3>  Content category: <messageid> Connections: <happlication>  Category: <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TMIWSS\-(?<hlevel>[^:]*):[\s]+(?<space>[^\s]*)[\s]+Date:[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+Method:[\s]+(?<hnetwork_service>[^\s]*)[\s]+Url:[\s]+(?<hurl>[^\s]*)[\s]+Rule:[\s]+(?<hrulename>[^\s]*)[\s]+Opp_id:[\s]+(?<hfld2>[^\s]*)[\s]+User_id:[\s]+(?<hfld25>[^\s]*)[\s]+Scan_type:[\s]+(?<hfld3>[^\s]*)[\s]+Content[\s]+category:[\s]+(?<messageid>[^\s]*)[\s]+Connections:[\s]+(?<happlication>[^\s]*)[\s]+Category:[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %TMIWSS-<hlevel>: <space> Date: <hdate> <htime>  <hfld1>  Method: <hnetwork_service>  Url: <hurl>  Rule: <hrulename>  Opp_id: <hfld2>  User_id: <hfld25>  Scan_type: <hfld3>  Content category: <messageid> <hfld4>  Category:<!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TMIWSS\-(?<hlevel>[^:]*):[\s]+(?<space>[^\s]*)[\s]+Date:[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+Method:[\s]+(?<hnetwork_service>[^\s]*)[\s]+Url:[\s]+(?<hurl>[^\s]*)[\s]+Rule:[\s]+(?<hrulename>[^\s]*)[\s]+Opp_id:[\s]+(?<hfld2>[^\s]*)[\s]+User_id:[\s]+(?<hfld25>[^\s]*)[\s]+Scan_type:[\s]+(?<hfld3>[^\s]*)[\s]+Content[\s]+category:[\s]+(?<messageid>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Category:(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %TMIWSS-<hlevel>: <hday> <hmonth> <hdate> <htime> <htimezone> <hyear>^^<husername>^^<messageid><!payload:husername>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0006
	# line in RSA: %TMIWSS-<hlevel>: <hday> <hmonth> <hdate> <htime> <hfld1> <hyear>^^<husername>^^<hfld2> imp2p <messageid><!payload:husername>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0007
	# line in RSA: %TMIWSS-<hlevel>: <hday> <hmonth> <hdate> <htime> <hfld1> <hyear>^^<husername>^^<hfld2> now <messageid><!payload:husername>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0008
	# line in RSA: %TMIWSS-<hlevel>: <hday> <hmonth> <hdate> <htime> <hfld1> <hyear>^^<husername>^^<hfld2> <messageid> now <!payload:husername>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%TMIWSS\-(?<hlevel>[^:]*):[\s]+(?<hday>[^\s]*)[\s]+(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hyear>[^\^]*)\^\^(?<message>(?<husername>[^\^]*)\^\^(?<hfld2>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+now[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <hhost>: <<<hday>, <hdate> <hmonth> <hyear> <htime>,<htimezone>> [<htype>|<messageid>] <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hhost>[^:]*):[\s]+<(?<hday>[^,]*),[\s]+(?<hdate>[^\s]*)[\s]+(?<hmonth>[^\s]*)[\s]+(?<hyear>[^\s]*)[\s]+(?<htime>[^,]*),(?<htimezone>[^>]*)>[\s]+\[(?<htype>[^\|]*)\|(?<messageid>[^\]]*)\][\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %TMIWSS-<hlevel>: <space> Date: <hdate> <htime> <hfld1>  Method: <network_service>  Server: <hostname>  User: <obj_name>  ClientIP: <saddr>  ServerIP: <daddr>  Domain: <web_domain>  Content-Type: <content_type>  Content-Length: <bytes> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%TMIWSS-%{hlevel}: %{space} Date: %{hdate} %{htime} %{hfld1}  Method: %{network_service}  Server: %{hostname}  User: %{obj_name}  ClientIP: %{saddr}  ServerIP: %{daddr}  Domain: %{web_domain}  Content-Type: %{content_type}  Content-Length: %{bytes} %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "GENERIC_TRENDMICROIWSS"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_trendmicroiwssmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <username>^^activate certificate:<info>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{username}^^activate certificate:%{info}" }
			id => "msgParserId0"
			add_field => {
				"action" => "activate certificate"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <username>^^Add <policyname>:<info>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{username}^^Add %{policyname}:%{info}" }
			id => "msgParserId1"
			add_field => {
				"action" => "Add"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <username>^^Added user: <info>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{username}^^Added user: %{info}" }
			id => "msgParserId2"
			add_field => {
				"action" => "Added user"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <username>^^Approved URL list now contains:<info>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{username}^^Approved URL list now contains:%{info}" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"action" => "Approved"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <fld1> <fld2> <fld3> Method: <network_service>  Url: <url>  Rule: <rulename> Opp_id: <fld2> User_id: <obj_name>  Scan_type: <fld3>  Content category: <policyname>  Connections: <fld5>  Category: <fld4>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} Method: %{network_service}  Url: %{url}  Rule: %{rulename} Opp_id: %{fld2} User_id: %{obj_name}  Scan_type: %{fld3}  Content category: %{policyname}  Connections: %{fld5}  Category: %{fld4}" }
			id => "msgParserId4"
			add_field => {
				"obj_type" => "IP"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yy H:m:s a" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <username>^^blacklist certificate:<info>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{username}^^blacklist certificate:%{info}" }
			id => "msgParserId5"
			add_field => {
				"action" => "blacklist certificate"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <username>^^blacklistremove certificate:<info>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{username}^^blacklistremove certificate:%{info}" }
			id => "msgParserId6"
			add_field => {
				"action" => "blacklistremove certificate"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: <username>^^Change <info>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{username}^^Change %{info}" }
			id => "msgParserId7"
			add_field => {
				"action" => "Change"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA: <username>^^changed <info>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{username}^^changed %{info}" }
			id => "msgParserId8"
			add_field => {
				"action" => "changed"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: <username>^^Changed <info>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{username}^^Changed %{info}" }
			id => "msgParserId9"
			add_field => {
				"action" => "changed"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: <username>^^clear <info>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{username}^^clear %{info}" }
			id => "msgParserId10"
			add_field => {
				"action" => "clear cache"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: <hostname>^^<web_domain>^^<event_time>.<fld1>^^<network_service>^^<web_method>^^<obj_name>^^<daddr>^^<saddr>^^<fld2>^^<rulename>^^<policyname>^^<fld11>^^<fld12>^^<fld13>^^<content_type>^^<fld14>^^<fld15>^^<url>^^<fld16>^^<fld17>^^<fld18>^^<fld19>^^<fld20>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{hostname}^^%{web_domain}^^%{event_time}.%{fld1}^^%{network_service}^^%{web_method}^^%{obj_name}^^%{daddr}^^%{saddr}^^%{fld2}^^%{rulename}^^%{policyname}^^%{fld11}^^%{fld12}^^%{fld13}^^%{content_type}^^%{fld14}^^%{fld15}^^%{url}^^%{fld16}^^%{fld17}^^%{fld18}^^%{fld19}^^%{fld20}" }
			id => "msgParserId11"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "ALM"
				"obj_type" => "IP"
				"[logstash][fullDateTimeString]" => "%{event_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: <username>^^<rulename> now contains account: <info>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{username}^^%{rulename} now contains account: %{info}" }
			id => "msgParserId12"
			add_field => {
				"action" => "now contains account"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: <username>^^<filename> now contains: <info>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{username}^^%{filename} now contains: %{info}" }
			id => "msgParserId13"
			add_field => {
				"action" => "now contains"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: <username>^^Delete policy:<policyname> account:<info>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{username}^^Delete policy:%{policyname} account:%{info}" }
			id => "msgParserId14"
			add_field => {
				"action" => "Delete"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA: <username>^^<info>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "%{username}^^%{info}" }
			id => "msgParserId15"
			add_field => {
				"action" => "DoBeforeApply"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: <username>^^DisableIPv6 <info>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{username}^^DisableIPv6 %{info}" }
			id => "msgParserId16"
			add_field => {
				"action" => "DisableIPv6"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: <username>^^Disable <info>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{username}^^Disable %{info}" }
			id => "msgParserId17"
			add_field => {
				"action" => "Disable"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: <username>^^EnableNTP <info>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "%{username}^^EnableNTP %{info}" }
			id => "msgParserId18"
			add_field => {
				"action" => "Enable NTP"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <username>^^Enable <info>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{username}^^Enable %{info}" }
			id => "msgParserId19"
			add_field => {
				"action" => "Enable"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Exceptions" {
		# MESSAGE Exceptions
		# line in RSA: <username>^^Exceptions to trusted URL list now contains: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}^^Exceptions to trusted URL list now contains: %{info}" }
				id => "message-Exceptions"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"action" => "Exceptions"
					"[event][id]" => "Exceptions"
					"[rsa][message][id1]" => "Exceptions"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Exceptions:01
		# line in RSA: <username>^^Exceptions to URL block list now contains: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}^^Exceptions to URL block list now contains: %{info}" }
				id => "message-Exceptions:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "ALM"
				"action" => "Exceptions to URL block list now contains"
					"[event][id]" => "Exceptions:01"
					"[rsa][message][id1]" => "Exceptions:01"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId22
	# line in RSA: <username>^^<info>
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{username}^^%{info}" }
			id => "msgParserId22"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA: <username>^^Modify <info>
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{username}^^Modify %{info}" }
			id => "msgParserId23"
			add_field => {
				"action" => "Modify"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: <hostname>^^<web_domain>^^<event_time>.<fld1>^^<network_service>^^<web_method>^^<obj_name>^^<daddr>^^<saddr>^^<fld2>^^<rulename>^^<policyname>^^<fld11>^^<fld12>^^<fld13>^^<content_type>^^<fld14>^^<fld15>^^<url>^^<fld16>^^<fld17>^^<fld18>^^<fld19>^^<fld20>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{hostname}^^%{web_domain}^^%{event_time}.%{fld1}^^%{network_service}^^%{web_method}^^%{obj_name}^^%{daddr}^^%{saddr}^^%{fld2}^^%{rulename}^^%{policyname}^^%{fld11}^^%{fld12}^^%{fld13}^^%{content_type}^^%{fld14}^^%{fld15}^^%{url}^^%{fld16}^^%{fld17}^^%{fld18}^^%{fld19}^^%{fld20}" }
			id => "msgParserId24"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Request"
				"ec_theme" => "ALM"
				"obj_type" => "IP"
				"[logstash][fullDateTimeString]" => "%{event_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: <hostname>^^<web_domain>^^<event_time>.<fld1>^^<network_service>^^<web_method>^^<obj_name>^^<daddr>^^<saddr>^^<fld2>^^<rulename>^^<policyname>^^<fld11>^^<fld12>^^<fld13>^^<content_type>^^<fld14>^^<fld15>^^<url>^^<fld16>^^<fld17>^^<fld18>^^<fld19>^^<fld20>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "%{hostname}^^%{web_domain}^^%{event_time}.%{fld1}^^%{network_service}^^%{web_method}^^%{obj_name}^^%{daddr}^^%{saddr}^^%{fld2}^^%{rulename}^^%{policyname}^^%{fld11}^^%{fld12}^^%{fld13}^^%{content_type}^^%{fld14}^^%{fld15}^^%{url}^^%{fld16}^^%{fld17}^^%{fld18}^^%{fld19}^^%{fld20}" }
			id => "msgParserId25"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "ALM"
				"obj_type" => "IP"
				"[logstash][fullDateTimeString]" => "%{event_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA: <username>^^<rulename> imp2p setting is now: <info>
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "%{username}^^%{rulename} imp2p setting is now: %{info}" }
			id => "msgParserId26"
			add_field => {
				"action" => "imp2p setting is now"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: <username>^^Trusted URL list now contains: <info>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{username}^^Trusted URL list now contains: %{info}" }
			id => "msgParserId27"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"action" => "Trusted"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: <username>^^user log on
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "%{username}^^user log on" }
			id => "msgParserId28"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "user log on"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "URL" {
		# MESSAGE URL
		# line in RSA: <username>^^URL block list now contains: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{username}^^URL block list now contains: %{info}" }
				id => "message-URL"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "ALM"
				"action" => "URL"
					"[event][id]" => "URL"
					"[rsa][message][id1]" => "URL"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime} %{hyear}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE URL:01
		# line in RSA: <fld1> <fld2> <fld3>  Method: <network_service>  Url: <url>  Rule: <rulename>  Opp_id: <fld2>  User_id: <obj_name>  Scan_type: <fld3>  Content category: <policyname>  Category: <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3}  Method: %{network_service}  Url: %{url}  Rule: %{rulename}  Opp_id: %{fld2}  User_id: %{obj_name}  Scan_type: %{fld3}  Content category: %{policyname}  Category: %{fld4}" }
				id => "message-URL:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "ALM"
				"obj_type" => "IP"
					"[event][id]" => "URL:01"
					"[rsa][message][id1]" => "URL:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yy H:m:s a" ] }
			}
		}
	}
	# PARSER msgParserId30
	# line in RSA: <fld1> <fld2> <fld3>  Method: <network_service>  Url: <url>  Rule: <rulename>  Opp_id: <fld2>  User_id: <obj_name>  Scan_type: <fld3>  Content category: <policyname>  Category: <fld4>
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3}  Method: %{network_service}  Url: %{url}  Rule: %{rulename}  Opp_id: %{fld2}  User_id: %{obj_name}  Scan_type: %{fld3}  Content category: %{policyname}  Category: %{fld4}" }
			id => "msgParserId30"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "ALM"
				"obj_type" => "IP"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yy H:m:s a" ] }
		}
	}
	else if [logstash][msgparser][id] == "LOG_CRIT" {
		# MESSAGE LOG_CRIT
		# line in RSA: <hostname>: <<<fld6>, <fld7> <fld8> <fld9> <fld10>,<fld11>> [<event_type>|LOG_CRIT] <event_log> tk_username=<obj_name>,tk_date_field=<fld12>,tk_protocol=<network_service>,tk_url=<url>,tk_malicious_entity=<threat_name>,tk_file_name=<filename>,tk_entity_name=<fld13>,tk_action=<action>,tk_scan_type=<fld3>,tk_blocked_by=<fld14>,tk_rule_name=<rulename>,tk_opp_id=<fld2>,tk_group_name=<fld15>,tk_category=<policyname>,{tk_uid=<fld16>,tk_filter_action=<fld17>|tk_uid=<fld16>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^:]*):[\s]+<(?<fld6>[^,]*),[\s]+(?<fld7>[^\s]*)[\s]+(?<fld8>[^\s]*)[\s]+(?<fld9>[^\s]*)[\s]+(?<fld10>[^,]*),(?<fld11>[^>]*)>[\s]+\[(?<event_type>[^\|]*)\|LOG_CRIT\][\s]+(?<event_log>[^\s]*)[\s]+tk_username=(?<obj_name>[^,]*),tk_date_field=(?<fld12>[^,]*),tk_protocol=(?<network_service>[^,]*),tk_url=(?<url>[^,]*),tk_malicious_entity=(?<threat_name>[^,]*),tk_file_name=(?<filename>[^,]*),tk_entity_name=(?<fld13>[^,]*),tk_action=(?<action>[^,]*),tk_scan_type=(?<fld3>[^,]*),tk_blocked_by=(?<fld14>[^,]*),tk_rule_name=(?<rulename>[^,]*),tk_opp_id=(?<fld2>[^,]*),tk_group_name=(?<fld15>[^,]*),tk_category=(?<policyname>[^,]*),(tk_uid=(?<fld16>[^,]*),tk_filter_action=(?<fld17>.*)|tk_uid=(?<fld16>.*))$" }
				id => "message-LOG_CRIT"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "ALM"
				"obj_type" => "IP"
					"[event][id]" => "LOG_CRIT"
					"[rsa][message][id1]" => "LOG_CRIT"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld7} %{fld8} %{fld9} %{fld10}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d MMM yyyy H:m:s" ] }
			}
		}
		# MESSAGE LOG_CRIT:01
		# line in RSA: <hostname>: <<<fld6>, <fld7> <fld8> <fld9> <fld10>,<fld11>> [<event_type>|LOG_CRIT] <event_log> tk_username=<obj_name>,tk_date_field=<fld12>,tk_entity_name=<fld13>,tk_rule_name=<rulename>,tk_group_name=<group>,tk_scan_type=<filter>,tk_action=<action>,tk_protocol=<network_service>,tk_url=<url>,tk_malicious_entity=<info>,tk_file_name=<filename>,tk_uid=<uid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}: <%{fld6}, %{fld7} %{fld8} %{fld9} %{fld10},%{fld11}> [%{event_type}|LOG_CRIT] %{event_log} tk_username=%{obj_name},tk_date_field=%{fld12},tk_entity_name=%{fld13},tk_rule_name=%{rulename},tk_group_name=%{group},tk_scan_type=%{filter},tk_action=%{action},tk_protocol=%{network_service},tk_url=%{url},tk_malicious_entity=%{info},tk_file_name=%{filename},tk_uid=%{uid}" }
				id => "message-LOG_CRIT:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "ALM"
				"obj_type" => "IP"
					"[event][id]" => "LOG_CRIT:01"
					"[rsa][message][id1]" => "LOG_CRIT:01"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{fld7} %{fld8} %{fld9} %{fld10}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d MMM yyyy H:m:s" ] }
			}
		}
		# MESSAGE LOG_CRIT:02
		# line in RSA: <hostname>: <<<fld6>, <fld7> <fld8> <fld9> <fld10>,<fld11>> [<event_type>|LOG_CRIT] <event_log> tk_username=<obj_name>,tk_date_field=<fld12>,tk_protocol=<network_service>,tk_url=<url>,tk_domain=<web_domain>,tk_device_name=<device>,tk_rule_name=<rulename>,tk_group_name=<group>,tk_client_ip=<saddr>,tk_server_ip=<daddr>,tk_destination_port=<dport>,tk_ccca_source=<fld18>,tk_risk_level=<risk_num>,tk_filter_action=<fld17>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}: <%{fld6}, %{fld7} %{fld8} %{fld9} %{fld10},%{fld11}> [%{event_type}|LOG_CRIT] %{event_log} tk_username=%{obj_name},tk_date_field=%{fld12},tk_protocol=%{network_service},tk_url=%{url},tk_domain=%{web_domain},tk_device_name=%{device},tk_rule_name=%{rulename},tk_group_name=%{group},tk_client_ip=%{saddr},tk_server_ip=%{daddr},tk_destination_port=%{dport},tk_ccca_source=%{fld18},tk_risk_level=%{risk_num},tk_filter_action=%{fld17}" }
				id => "message-LOG_CRIT:02"
				add_field => {
				"ec_subject" => "NetworkComm"
					"[event][id]" => "LOG_CRIT:02"
					"[rsa][message][id1]" => "LOG_CRIT:02"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{fld7} %{fld8} %{fld9} %{fld10}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d MMM yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "LOG_WARNING" {
		# MESSAGE LOG_WARNING:01
		# line in RSA: <hostname>: <<<fld6>, <fld7> <fld8> <fld9> <fld10>,<fld11>> [<event_type>|LOG_WARNING] <event_log> tk_user=<username>;tk_date_field=<fld12>;tk_description=<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}: <%{fld6}, %{fld7} %{fld8} %{fld9} %{fld10},%{fld11}> [%{event_type}|LOG_WARNING] %{event_log} tk_user=%{username};tk_date_field=%{fld12};tk_description=%{event_description}" }
				id => "message-LOG_WARNING:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
					"[event][id]" => "LOG_WARNING:01"
					"[rsa][message][id1]" => "LOG_WARNING:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld7} %{fld8} %{fld9} %{fld10}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d MMM yyyy H:m:s" ] }
			}
		}
		# MESSAGE LOG_WARNING:02
		# line in RSA: <hostname>: <<<fld6>, <fld7> <fld8> <fld9> <fld10>,<fld11>> [<event_type>|LOG_WARNING] <event_log> tk_server=<fld18>,tk_date_field=<fld12>,tk_source=<event_source>,tk_description=<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}: <%{fld6}, %{fld7} %{fld8} %{fld9} %{fld10},%{fld11}> [%{event_type}|LOG_WARNING] %{event_log} tk_server=%{fld18},tk_date_field=%{fld12},tk_source=%{event_source},tk_description=%{event_description}" }
				id => "message-LOG_WARNING:02"
				add_field => {
				"ec_subject" => "OS"
				"ec_theme" => "ALM"
					"[event][id]" => "LOG_WARNING:02"
					"[rsa][message][id1]" => "LOG_WARNING:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld7} %{fld8} %{fld9} %{fld10}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d MMM yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId36
	# line in RSA: <hostname>: <<<fld6>, <fld7> <fld8> <fld9> <fld10>,<fld11>> [<event_type>|LOG_NOTICE] <event_log> tk_server=<fld18>,tk_date_field=<fld12>,tk_source=<event_source>,tk_description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "%{hostname}: <%{fld6}, %{fld7} %{fld8} %{fld9} %{fld10},%{fld11}> [%{event_type}|LOG_NOTICE] %{event_log} tk_server=%{fld18},tk_date_field=%{fld12},tk_source=%{event_source},tk_description=%{event_description}" }
			id => "msgParserId36"
			add_field => {
				"ec_subject" => "OS"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{fld7} %{fld8} %{fld9} %{fld10}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d MMM yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "LOG_INFO" {
		# MESSAGE LOG_INFO
		# line in RSA: <hostname>: <<<fld6>, <fld7> <fld8> <fld9> <fld10>,<fld11>> [<event_type>|LOG_INFO] <event_log> tk_server=<fld13>,tk_date_field=<fld12>,tk_metric_id=<fld19>,tk_metric_value=<fld20>,
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}: <%{fld6}, %{fld7} %{fld8} %{fld9} %{fld10},%{fld11}> [%{event_type}|LOG_INFO] %{event_log} tk_server=%{fld13},tk_date_field=%{fld12},tk_metric_id=%{fld19},tk_metric_value=%{fld20}," }
				id => "message-LOG_INFO"
				add_field => {
				"ec_subject" => "OS"
				"ec_theme" => "ALM"
					"[event][id]" => "LOG_INFO"
					"[rsa][message][id1]" => "LOG_INFO"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld7} %{fld8} %{fld9} %{fld10}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d MMM yyyy H:m:s" ] }
			}
		}
		# MESSAGE LOG_INFO:01
		# line in RSA: <hostname>: <<<fld6>, <fld7> <fld8> <fld9> <fld10>,<fld11>> [<event_type>|LOG_INFO] <event_log> tk_username=<obj_name>,tk_url=<url>,tk_size=<filename_size>,tk_date_field=<fld12>,tk_protocol=<network_service>,tk_mime_content=<fld13>,tk_server=<fld14>,tk_client_ip=<saddr>,tk_server_ip=<daddr>,tk_domain=<web_domain>,tk_path=<fld18>,tk_file_name=<filename>,tk_operation=<web_method>,tk_uid=<fld21>,tk_category=<fld22>,tk_category_type=<fld23>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname}: <%{fld6}, %{fld7} %{fld8} %{fld9} %{fld10},%{fld11}> [%{event_type}|LOG_INFO] %{event_log} tk_username=%{obj_name},tk_url=%{url},tk_size=%{filename_size},tk_date_field=%{fld12},tk_protocol=%{network_service},tk_mime_content=%{fld13},tk_server=%{fld14},tk_client_ip=%{saddr},tk_server_ip=%{daddr},tk_domain=%{web_domain},tk_path=%{fld18},tk_file_name=%{filename},tk_operation=%{web_method},tk_uid=%{fld21},tk_category=%{fld22},tk_category_type=%{fld23}" }
				id => "message-LOG_INFO:01"
				add_field => {
				"ec_subject" => "OS"
				"ec_theme" => "ALM"
					"[event][id]" => "LOG_INFO:01"
					"[rsa][message][id1]" => "LOG_INFO:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld7} %{fld8} %{fld9} %{fld10}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d MMM yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: Path: <fld8>  Operation: <web_method>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "Path: %{fld8}  Operation: %{web_method}" }
			id => "msgParserId39"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "ALM"
				"obj_type" => "IP"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime} %{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yy H:m:s a" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_trendmicroiwssmsg.json"
#			template_name => "trendmicroiwss_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

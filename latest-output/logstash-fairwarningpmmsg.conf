# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "fairwarningpm"
			"[observer][name]" => "FairWarning Privacy Monitoring"
			"[observer][type]" => "Analysis"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %FAIRWARNING-4: <hdatetime>~<hrule>~<hrulename>~<hsource>~<msgIdPart1> <msgIdPart2> <msgIdPart3>~<!payload:hdatetime>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%FAIRWARNING\-4:[\s]+(?<message>(?<hdatetime>[^~]*)~(?<hrule>[^~]*)~(?<hrulename>[^~]*)~(?<hsource>[^~]*)~(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<msgIdPart3>[^~]*)~(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %FAIRWARNING-4: <hdatetime>~<hrule>~<hrulename>~<hsource>~<msgIdPart1> <msgIdPart2>~<!payload:hdatetime>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%FAIRWARNING\-4:[\s]+(?<message>(?<hdatetime>[^~]*)~(?<hrule>[^~]*)~(?<hrulename>[^~]*)~(?<hsource>[^~]*)~(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^~]*)~(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %FAIRWARNING-4: <hdatetime>~<hrule>~<hrulename>~<hsource>~~~<!payload:hdatetime>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%FAIRWARNING\-4:[\s]+(?<message>(?<hdatetime>[^~]*)~(?<hrule>[^~]*)~(?<hrulename>[^~]*)~(?<hsource>[^~]*)~~~(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "FAIRWARNING"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-fairwarningpmmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "HIPAA_Best" {
		# MESSAGE HIPAA_Best_Practice:01
		# line in RSA:  <event_time_string>~<operation_id>~<rulename>~<event_source>~ HIPAA Best Practice~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>|<network_port>~{<saddr>~<fld3>|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~[\s]+HIPAA[\s]+Best[\s]+Practice~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^\|]*)\|(?<network_port>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
				id => "message-HIPAA_Best_Practice:01"
				add_field => {
				"category" => "HIPAA Best Practice"
				"logon_id" => "%{username}"
					"[event][id]" => "HIPAA_Best_Practice:01"
					"[rsa][message][id1]" => "HIPAA_Best_Practice:01"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{event_time_string}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE HIPAA_Best_Practice
		# line in RSA:  <event_time_string>~<operation_id>~<rulename>~<event_source>~ HIPAA Best Practice~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>~{<saddr>~<fld3>|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~[\s]+HIPAA[\s]+Best[\s]+Practice~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
				id => "message-HIPAA_Best_Practice"
				add_field => {
				"category" => "HIPAA Best Practice"
				"logon_id" => "%{username}"
					"[event][id]" => "HIPAA_Best_Practice"
					"[rsa][message][id1]" => "HIPAA_Best_Practice"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{event_time_string}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Medical_Identity" {
		# MESSAGE Medical_Identity_Theft:01
		# line in RSA: <event_time_string>~<operation_id>~<rulename>~<event_source>~Medical Identity Theft~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>|<network_port>~{<saddr>~<fld3>|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~Medical[\s]+Identity[\s]+Theft~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^\|]*)\|(?<network_port>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
				id => "message-Medical_Identity_Theft:01"
				add_field => {
				"category" => "Medical Identity Theft"
				"logon_id" => "%{username}"
					"[event][id]" => "Medical_Identity_Theft:01"
					"[rsa][message][id1]" => "Medical_Identity_Theft:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{event_time_string}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Medical_Identity_Theft
		# line in RSA: <event_time_string>~<operation_id>~<rulename>~<event_source>~Medical Identity Theft~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>~{<saddr>~<fld3>|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~Medical[\s]+Identity[\s]+Theft~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
				id => "message-Medical_Identity_Theft"
				add_field => {
				"category" => "Medical Identity Theft"
				"logon_id" => "%{username}"
					"[event][id]" => "Medical_Identity_Theft"
					"[rsa][message][id1]" => "Medical_Identity_Theft"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{event_time_string}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Policy_Compliance" {
		# MESSAGE Policy_Compliance:01
		# line in RSA: <event_time_string>~<operation_id>~<rulename>~<event_source>~<category>~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>|<network_port>~{<saddr>~<fld3>|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~(?<category>[^~]*)~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^\|]*)\|(?<network_port>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
				id => "message-Policy_Compliance:01"
				add_field => {
				"logon_id" => "%{username}"
					"[event][id]" => "Policy_Compliance:01"
					"[rsa][message][id1]" => "Policy_Compliance:01"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{event_time_string}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Policy_Compliance
		# line in RSA: <event_time_string>~<operation_id>~<rulename>~<event_source>~<category>~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>~{<saddr>~<fld3>|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~(?<category>[^~]*)~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
				id => "message-Policy_Compliance"
				add_field => {
				"logon_id" => "%{username}"
					"[event][id]" => "Policy_Compliance"
					"[rsa][message][id1]" => "Policy_Compliance"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{event_time_string}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Identity_Theft" {
		# MESSAGE Identity_Theft:01
		# line in RSA: <event_time_string>~<operation_id>~<rulename>~<event_source>~<category>~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>|<network_port>~{<saddr>~<fld3>|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~(?<category>[^~]*)~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^\|]*)\|(?<network_port>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
				id => "message-Identity_Theft:01"
				add_field => {
				"logon_id" => "%{username}"
					"[event][id]" => "Identity_Theft:01"
					"[rsa][message][id1]" => "Identity_Theft:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{event_time_string}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Identity_Theft
		# line in RSA: <event_time_string>~<operation_id>~<rulename>~<event_source>~<category>~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>~{<saddr>~<fld3>|<saddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~(?<category>[^~]*)~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
				id => "message-Identity_Theft"
				add_field => {
				"logon_id" => "%{username}"
					"[event][id]" => "Identity_Theft"
					"[rsa][message][id1]" => "Identity_Theft"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{event_time_string}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA: <event_time_string>~<operation_id>~<rulename>~<event_source>~<category>~<severity>~<fld2>~<fld1>~<username>~<user_fullname>~<user_fname>~<user_mname>~<user_lname>~<user_dept>~<patient_id>~<patient_fullname>~<patient_fname>~<patient_mname>~<patient_lname>~<application>~<event_type>~<event_description>~<hostname>~<hostip>~{<saddr>~<fld3>|<saddr>}
	else if [logstash][msgparser][id] == "msgParserId5" {
		grok {
			match => { "message" => "^(?<event_time_string>[^~]*)~(?<operation_id>[^~]*)~(?<rulename>[^~]*)~(?<event_source>[^~]*)~(?<category>[^~]*)~(?<severity>[^~]*)~(?<fld2>[^~]*)~(?<fld1>[^~]*)~(?<username>[^~]*)~(?<user_fullname>[^~]*)~(?<user_fname>[^~]*)~(?<user_mname>[^~]*)~(?<user_lname>[^~]*)~(?<user_dept>[^~]*)~(?<patient_id>[^~]*)~(?<patient_fullname>[^~]*)~(?<patient_fname>[^~]*)~(?<patient_mname>[^~]*)~(?<patient_lname>[^~]*)~(?<application>[^~]*)~(?<event_type>[^~]*)~(?<event_description>[^~]*)~(?<hostname>[^~]*)~(?<hostip>[^~]*)~((?<saddr>[^~]*)~(?<fld3>.*)|(?<saddr>.*))$" }
			id => "msgParserId5"
			add_field => {
				"logon_id" => "%{username}"
				"[logstash][fullDateTimeString]" => "%{event_time_string}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-fairwarningpmmsg.json"
#			template_name => "fairwarningpm_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

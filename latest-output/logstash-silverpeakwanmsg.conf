# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "silverpeakwan"
			"[observer][name]" => "SilverPeak WAN"
			"[observer][type]" => "Router"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1>[<hfld2>]: TID <hfld3>: [<messageid>.<hfld4>]: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+TID[\s]+(?<hfld3>[^:]*):[\s]+\[(?<messageid>[^\.]*)\.(?<hfld4>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1>[<hfld2>]: [<messageid>.<hfld4>]: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+\[(?<messageid>[^\.]*)\.(?<hfld4>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hfld1>[<hfld2>]: [<hfld3>] <hfld4> <messageid> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+\[(?<hfld3>[^\]]*)\][\s]+(?<hfld4>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-silverpeakwanmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "action" {
		# MESSAGE action:01
		# line in RSA: <agent>[<process_id>]: [<event_source>] <username>@<saddr> <action> <obj_type> <obj_name> <disposition> params:<param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{event_source}] %{username}@%{saddr} %{action} %{obj_type} %{obj_name} %{disposition} params:%{param}" }
				id => "message-action:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
					"[event][id]" => "action:01"
					"[rsa][message][id1]" => "action:01"
					"[event][categoryid]" => "1401040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE action:02
		# line in RSA: <agent>[<process_id>]: [<event_source>] <username>@<saddr> <action> <obj_type> <obj_name> <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{event_source}] %{username}@%{saddr} %{action} %{obj_type} %{obj_name} %{disposition}" }
				id => "message-action:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
					"[event][id]" => "action:02"
					"[rsa][message][id1]" => "action:02"
					"[event][categoryid]" => "1401040000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: <agent>[<process_id>]: [<event_source>] <username>@<saddr> <action> <obj_type> <obj_name> <disposition> params:<param>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{agent}[%{process_id}]: [%{event_source}] %{username}@%{saddr} %{action} %{obj_type} %{obj_name} %{disposition} params:%{param}" }
			id => "msgParserId2"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: <agent>[<process_id>]: [<event_source>] <username>@<saddr> <action> <obj_type> <obj_name> <disposition> params:<param>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{agent}[%{process_id}]: [%{event_source}] %{username}@%{saddr} %{action} %{obj_type} %{obj_name} %{disposition} params:%{param}" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: <agent>[<process_id>]: [<event_source>] <username>@<saddr> <action> <obj_type> <obj_name> <disposition> params:<param>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{agent}[%{process_id}]: [%{event_source}] %{username}@%{saddr} %{action} %{obj_type} %{obj_name} %{disposition} params:%{param}" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "mgmtd" {
		# MESSAGE mgmtd:01
		# line in RSA: <agent>[<process_id>]: TID <fld1>: [<fld2>.<severity>]: <action>: <fld3> equipment_gateway_connect,<event_description>,gw:<fld4> Next-Hop Reachability Test <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: TID %{fld1}: [%{fld2}.%{severity}]: %{action}: %{fld3} equipment_gateway_connect,%{event_description},gw:%{fld4} Next-Hop Reachability Test %{result}" }
				id => "message-mgmtd:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
					"[event][id]" => "mgmtd:01"
					"[rsa][message][id1]" => "mgmtd:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mgmtd:02
		# line in RSA: <agent>[<process_id>]: TID <fld1>: [<fld2>.<severity>]: <fld3>: Unexpected System shutdown has been detected
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: TID %{fld1}: [%{fld2}.%{severity}]: %{fld3}: Unexpected System shutdown has been detected" }
				id => "message-mgmtd:02"
				add_field => {
				"event_description" => "Unexpected System shutdown has been detected"
					"[event][id]" => "mgmtd:02"
					"[rsa][message][id1]" => "mgmtd:02"
					"[event][categoryid]" => "1611000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mgmtd:03
		# line in RSA: <agent>[<process_id>]: TID <fld1>: [<fld2>.<severity>]: <action>: <fld3> tunnel_down,<event_description>,<fld4> No reply packet from remote end
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: TID %{fld1}: [%{fld2}.%{severity}]: %{action}: %{fld3} tunnel_down,%{event_description},%{fld4} No reply packet from remote end" }
				id => "message-mgmtd:03"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"info" => "No reply packet from remote end"
					"[event][id]" => "mgmtd:03"
					"[rsa][message][id1]" => "mgmtd:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mgmtd:04
		# line in RSA: <agent>[<process_id>]: TID <fld1>: [<fld2>.<severity>]: <action>: <fld3> tunnel_down,<event_description>,<fld4> Cleared down alarm
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: TID %{fld1}: [%{fld2}.%{severity}]: %{action}: %{fld3} tunnel_down,%{event_description},%{fld4} Cleared down alarm" }
				id => "message-mgmtd:04"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"info" => "Cleared down alarm"
					"[event][id]" => "mgmtd:04"
					"[rsa][message][id1]" => "mgmtd:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mgmtd:05
		# line in RSA: <agent>[<process_id>]: TID <fld1>: [<fld2>.<severity>]: <action>: <fld3> duplicate_license_detected,<event_description>,<fld4> Recoverable duplicate license detected
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: TID %{fld1}: [%{fld2}.%{severity}]: %{action}: %{fld3} duplicate_license_detected,%{event_description},%{fld4} Recoverable duplicate license detected" }
				id => "message-mgmtd:05"
				add_field => {
				"ec_subject" => "License"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Error"
				"info" => "Recoverable duplicate license detected"
					"[event][id]" => "mgmtd:05"
					"[rsa][message][id1]" => "mgmtd:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mgmtd:06
		# line in RSA: <agent>[<process_id>]: TID <fld1>: [<fld2>.<severity>]: <action>: <fld3> duplicate_license_detected,<event_description>,<fld4> Cleared duplicate license detected
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: TID %{fld1}: [%{fld2}.%{severity}]: %{action}: %{fld3} duplicate_license_detected,%{event_description},%{fld4} Cleared duplicate license detected" }
				id => "message-mgmtd:06"
				add_field => {
				"ec_subject" => "License"
				"ec_theme" => "Configuration"
				"info" => "Cleared duplicate license detected"
					"[event][id]" => "mgmtd:06"
					"[rsa][message][id1]" => "mgmtd:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mgmtd:07
		# line in RSA: <agent>[<process_id>]: TID <fld1>: [<fld2>.<severity>]: <action>: <fld3> equipment_system,<event_description>,<fld4> Unexpected system restart
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: TID %{fld1}: [%{fld2}.%{severity}]: %{action}: %{fld3} equipment_system,%{event_description},%{fld4} Unexpected system restart" }
				id => "message-mgmtd:07"
				add_field => {
				"info" => "Unexpected system restart"
					"[event][id]" => "mgmtd:07"
					"[rsa][message][id1]" => "mgmtd:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "pm" {
		# MESSAGE pm:01
		# line in RSA: <agent>[<process_id>]: [<fld2>.<severity>]: <fld3>: Software process snmpd has been restarted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{fld2}.%{severity}]: %{fld3}: Software process snmpd has been restarted" }
				id => "message-pm:01"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Start"
				"ec_theme" => "Configuration"
				"event_description" => "Software process snmpd has been restarted"
					"[event][id]" => "pm:01"
					"[rsa][message][id1]" => "pm:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE pm:02
		# line in RSA: <agent>[<process_id>]: [<fld2>.<severity>]: <fld3>: System shutdown has been initiated
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{fld2}.%{severity}]: %{fld3}: System shutdown has been initiated" }
				id => "message-pm:02"
				add_field => {
				"event_description" => "System shutdown has been initiated"
					"[event][id]" => "pm:02"
					"[rsa][message][id1]" => "pm:02"
					"[event][categoryid]" => "1611000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-silverpeakwanmsg.json"
#			template_name => "silverpeakwan_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

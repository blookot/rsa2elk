# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "citrixxa"
			"[observer][name]" => "Citrix XenApp"
			"[observer][type]" => "Virtualization"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %citrixxa: <hdatetime>^^<messageid>^^<!payload:hdatetime>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%citrixxa:[\s]+(?<message>(?<hdatetime>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %citrixxa: <hdatetime>^^<msgIdPart1> <msgIdPart2>^^<!payload:hdatetime>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%citrixxa:[\s]+(?<message>(?<hdatetime>[^\^]*)\^\^(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-citrixxamsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld1> <fld2>.<fld3>^^<event_type>^^<administrator>^^<shost>^^<hostname>^^<operation_id>^^<obj_type>^^<obj_name>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2}.%{fld3}^^%{event_type}^^%{administrator}^^%{shost}^^%{hostname}^^%{operation_id}^^%{obj_type}^^%{obj_name}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <fld1> <fld2>.<fld3>^^<event_type>^^<username>^^<hostname>^^<saddr>^^<application>^^<fld4> <fld5>.<fld6>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2}.%{fld3}^^%{event_type}^^%{username}^^%{hostname}^^%{saddr}^^%{application}^^%{fld4} %{fld5}.%{fld6}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: <fld1> <fld2>.<fld3>^^<event_type>^^<domain>^^<group_object>^^<hostname>^^<application>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2}.%{fld3}^^%{event_type}^^%{domain}^^%{group_object}^^%{hostname}^^%{application}" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld1> <fld2>.<fld3>^^<event_type>^^<saddr>^^<event_description>^^<application>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2}.%{fld3}^^%{event_type}^^%{saddr}^^%{event_description}^^%{application}" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[operation_id]"
		destination => "[operation_id]"
		dictionary => {
			"0" => "NONE"
			"1" => "Created"
			"2" => "Modified"
			"3" => "Removed"
		}
		fallback => "0"
		override => true
	}
}
filter {
	translate {
		field => "[obj_type]"
		destination => "[obj_type]"
		dictionary => {
			"0" => "Application"
			"1" => "Application Isolation Environment"
			"2" => "AIE Application"
			"4" => "Farm"
			"5" => "File Type Association"
			"6" => "Folder"
			"7" => "Installation Manager Application"
			"8" => "Printer"
			"9" => "Server"
			"10" => "Server Group"
			"11" => "User"
			"12" => "Policy"
			"13" => "Monitoring Profile"
			"14" => "Load Manager"
			"15" => "Virtual IP Farm Range"
			"16" => "Virtual IP Server Range"
			"17" => "Print Driver"
			"18" => "Database"
			"19" => "Zone"
		}
		fallback => "0"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-citrixxamsg.json"
#			template_name => "citrixxa_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "solarwindsipam"
			"[observer][name]" => "solarwindsipam"
			"[observer][type]" => "Configuration Management"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1><hfld2><htime><hhost>%<messageid>:<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1}%{hfld2}%{htime}%{hhost}%%{messageid}:%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-solarwindsipammsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "OrionAlertEngine" {
		# MESSAGE OrionAlertEngine
		# line in RSA: <fld1>,<fld2><fld3>,<fld4><fld5><fld51>|<fld6><severity>DHCP Scope Usage Monitoring${{N=<fld7>;M=<fld8>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE OrionAlertEngine:01
		# line in RSA: <severity>Alert - Node is down-<fld1>,<fld2><fld3>,<fld4><fld5><fld6>${{N=<fld7>;M=<fld8>} ${{N=<fld9>;M=<fld10>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE OrionAlertEngine:02
		# line in RSA: <severity>DHCP Scope Usage Monitoring<fld1>,<fld2><fld3>,<fld4><fld5><fld6>${{N=<fld7>;M=<fld8>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE OrionAlertEngine:03
		# line in RSA: <fld1>,<fld2><fld3>,<fld4><fld5><fld6>|<fld7><severity>: Recursive macro variable usage detected${{N=<fld8>;M=<fld9>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE OrionAlertEngine:04
		# line in RSA: <fld1>,<fld2><fld3>,<fld4><fld5><fld6>|<fld7>Node is down${{N=<fld8>;M=<fld9>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE OrionAlertEngine:05
		# line in RSA: Node is down<fld1>,<fld2><fld3>,<fld4><fld5><fld6><hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Node is down%{fld1},%{fld2}%{fld3},%{fld4}%{fld5}%{fld6}%{hostip}" }
				id => "message-OrionAlertEngine:05"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "Node is down"
					"[event][id]" => "OrionAlertEngine:05"
					"[rsa][message][id1]" => "OrionAlertEngine:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld2} %{fld3} %{fld4} %{fld5}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMM d yyyy H:m" ] }
			}
		}
		# MESSAGE OrionAlertEngine:06
		# line in RSA: <severity>Alert - Node is down-<fld1>,<fld2><fld3>,<fld4><fld5><fld6>,<product>, Version <version> Technical Support: <fld22>,<fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}Alert - Node is down-%{fld1},%{fld2}%{fld3},%{fld4}%{fld5}%{fld6},%{product}, Version %{version} Technical Support: %{fld22},%{fld21}" }
				id => "message-OrionAlertEngine:06"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "Node is down"
					"[event][id]" => "OrionAlertEngine:06"
					"[rsa][message][id1]" => "OrionAlertEngine:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld2} %{fld3} %{fld4} %{fld5}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMMM d yyyy H:m" ] }
			}
		}
		# MESSAGE OrionAlertEngine:07
		# line in RSA: <fld1>,<fld2><fld3>,<fld4><fld5><fld6>|<fld7>Node polling failed on last<fld8>tries${{N=<fld9>;M=<fld10>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE OrionAlertEngine:08
		# line in RSA: Router Reboot
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Router Reboot" }
				id => "message-OrionAlertEngine:08"
				add_field => {
				"hostname" => "%{hhost}"
				"event_description" => "Router Reboot"
					"[event][id]" => "OrionAlertEngine:08"
					"[rsa][message][id1]" => "OrionAlertEngine:08"
					"[event][categoryid]" => "1601020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE OrionAlertEngine:09
		# line in RSA: <fld1>,<fld2><fld3>,<fld4><fld5><fld6>|<fld7>Hardware component is in warning or critical state${{N=<fld8>;M=<fld9>}${{N=<fld10>;M=<fld11>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE OrionAlertEngine:10
		# line in RSA: <fld1>,<fld2><fld3>,<fld4><fld5><fld6>${{N=<fld7>;M=<fld8>} ${{N=<fld9>;M=<fld10>}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-solarwindsipammsg.json"
#			template_name => "solarwindsipam_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

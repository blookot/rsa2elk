# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "trendmicroossec"
			"[observer][name]" => "Trend Micro OSSEC"
			"[observer][type]" => "Intrusion"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1> <hdate> <htime> <hfld2> <messageid>: Alert Level: <hfld3>; Rule:<!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+Alert[\s]+Level:[\s]+(?<hfld3>[^;]*);[\s]+Rule:(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-trendmicroossecmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "ossec" {
		# MESSAGE ossec:01
		# line in RSA: <hostname> ossec: Alert Level: <severity>; Rule: <rule> - <event_description>; Location: {(<shost>) <saddr>->|<shost>->}<fld1>/ossec/logs/active-responses.log;  <fld2> <fld3> <fld4> <fld5> <timezone> <fld7> <action> <param>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+ossec:[\s]+Alert[\s]+Level:[\s]+(?<severity>[^;]*);[\s]+Rule:[\s]+(?<rule>[^\s]*)[\s]+\-[\s]+(?<event_description>[^;]*);[\s]+Location:[\s]+(\((?<shost>[^\)]*)\)[\s]+(?<saddr>[^\-]*)\->|(?<shost>[^\-]*)\->)(?<fld1>[^/]*)/ossec/logs/active\-responses\.log;[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<timezone>[^\s]*)[\s]+(?<fld7>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<param>.*)$" }
				id => "message-ossec:01"
				add_field => {
				"event_log" => "/ossec/logs/active-responses.log"
					"[event][id]" => "ossec:01"
					"[rsa][message][id1]" => "ossec:01"
					"[event][categoryid]" => "1001020200"
					"[logstash][fullDateTimeString]" => "%{fld3} %{fld4} %{fld7} %{fld5}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
			}
		}
		# MESSAGE ossec:02
		# line in RSA: <hostname> ossec: Alert Level: <severity>; Rule: <rule> - <event_description>; Location: {(<shost>) <saddr>->|<shost>->}<fld1>\ossec-agent\active-response\active-responses.log; <event_time_string> "<action>" <param>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+ossec:[\s]+Alert[\s]+Level:[\s]+(?<severity>[^;]*);[\s]+Rule:[\s]+(?<rule>[^\s]*)[\s]+\-[\s]+(?<event_description>[^;]*);[\s]+Location:[\s]+(\((?<shost>[^\)]*)\)[\s]+(?<saddr>[^\-]*)\->|(?<shost>[^\-]*)\->)(?<fld1>[^\\]*)\\ossec\-agent\\active\-response\\active\-responses\.log;[\s]+(?<event_time_string>[^\s]*)[\s]+\"(?<action>[^\"]*)\"[\s]+(?<param>.*)$" }
				id => "message-ossec:02"
				add_field => {
				"event_log" => "\ossec-agent\active-response\active-responses.log"
					"[event][id]" => "ossec:02"
					"[rsa][message][id1]" => "ossec:02"
					"[event][categoryid]" => "1001020200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ossec:03
		# line in RSA: <hostname> ossec: Alert Level: <severity>; Rule: <rule> - <event_description>; Location: {(<shost>) <saddr>->|<shost>->}<event_log>; <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+ossec:[\s]+Alert[\s]+Level:[\s]+(?<severity>[^;]*);[\s]+Rule:[\s]+(?<rule>[^\s]*)[\s]+\-[\s]+(?<event_description>[^;]*);[\s]+Location:[\s]+(\((?<shost>[^\)]*)\)[\s]+(?<saddr>[^\-]*)\->|(?<shost>[^\-]*)\->)(?<event_log>[^;]*);[\s]+(?<info>.*)$" }
				id => "message-ossec:03"
				add_field => {
					"[event][id]" => "ossec:03"
					"[rsa][message][id1]" => "ossec:03"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-trendmicroossecmsg.json"
#			template_name => "trendmicroossec_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

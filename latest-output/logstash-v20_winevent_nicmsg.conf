# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "winevent_nic"
			"[observer][name]" => "Windows Events (NIC)"
			"[observer][type]" => "Windows Hosts"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0014
	# line in RSA: %NICWIN-<hlevel>-DNS Server_<msgIdPart2>_Microsoft-Windows-<msgIdPart1>-Server-Service:<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-DNS Server_%{msgIdPart2}_Microsoft-Windows-%{msgIdPart1}-Server-Service:%{message}" }
			id => "header-0014"
			add_field => {
				"[rsa][header][id]" => "0014"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_DNS"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0015
	# line in RSA: %NICWIN-<hlevel>-dns server_<msgIdPart2>_Microsoft-Windows-<msgIdPart1>-Server-Service:<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-dns server_%{msgIdPart2}_Microsoft-Windows-%{msgIdPart1}-Server-Service:%{message}" }
			id => "header-0015"
			add_field => {
				"[rsa][header][id]" => "0015"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_DNS"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %NICWIN-<hlevel>-<Hmessageid>: <msgIdPart1>,<Hlinenum>,<Hday> <Hdatetime>,<msgIdPart2>,Microsoft-Windows-Security-Auditing,<Hevent_user>,<Hevent_type>,<Hevent_computer>,<Hcategory>,<Hdata>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{Hmessageid}: %{msgIdPart1},%{Hlinenum},%{Hday} %{Hdatetime},%{msgIdPart2},Microsoft-Windows-Security-Auditing,%{Hevent_user},%{Hevent_type},%{Hevent_computer},%{Hcategory},%{Hdata},%{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_Microsoft-Windows-Security-Auditing"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0021
	# line in RSA: %NICWIN-<hlevel>-<Hmessageid>: <msgIdPart1>,<Hlinenum>,<Hday> <Hdatetime>,<msgIdPart2>,AD FS Auditing,<Hevent_user>,<Hevent_type>,<Hevent_computer>,<Hcategory>,<Hdata>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{Hmessageid}: %{msgIdPart1},%{Hlinenum},%{Hday} %{Hdatetime},%{msgIdPart2},AD FS Auditing,%{Hevent_user},%{Hevent_type},%{Hevent_computer},%{Hcategory},%{Hdata},%{message}" }
			id => "header-0021"
			add_field => {
				"[rsa][header][id]" => "0021"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_AD"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %HYPERV-<hlevel>-<fld1>: <event_source>,<Hlinenum>,<Hday> <Hdatetime>,<msgIdPart1>,<msgIdPart2>,<Hevent_user>,<Hc_logon_id>,<Hevent_computer>,<Hcategory>,<Hdata>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%HYPERV-%{hlevel}-%{fld1}: %{event_source},%{Hlinenum},%{Hday} %{Hdatetime},%{msgIdPart1},%{msgIdPart2},%{Hevent_user},%{Hc_logon_id},%{Hevent_computer},%{Hcategory},%{Hdata},%{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: %TSGATEWAY-<hlevel>-<fld1>: <event_source>,<Hlinenum>,<Hday> <Hdatetime>,<msgIdPart1>,<msgIdPart2>,<Hevent_user>,<Hc_logon_id>,<Hevent_computer>,<Hcategory>,<Hdata>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%TSGATEWAY-%{hlevel}-%{fld1}: %{event_source},%{Hlinenum},%{Hday} %{Hdatetime},%{msgIdPart1},%{msgIdPart2},%{Hevent_user},%{Hc_logon_id},%{Hevent_computer},%{Hcategory},%{Hdata},%{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %NICWIN-<hlevel>-<Hmessageid>: <msgIdPart1>,<Hlinenum>,<Hday> <Hdatetime>,<msgIdPart2>,Microsoft-Windows-Eventlog,<Hevent_user>,<Hevent_type>,<Hevent_computer>,<Hcategory>,<Hdata>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{Hmessageid}: %{msgIdPart1},%{Hlinenum},%{Hday} %{Hdatetime},%{msgIdPart2},Microsoft-Windows-Eventlog,%{Hevent_user},%{Hevent_type},%{Hevent_computer},%{Hcategory},%{Hdata},%{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_Microsoft-Windows-Eventlog"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0017
	# line in RSA: %NICWIN-<hlevel>-<msgIdPart1> <hfld1>_<msgIdPart2>_<msgIdPart3> <hfld2>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{msgIdPart1} %{hfld1}_%{msgIdPart2}_%{msgIdPart3} %{hfld2}: %{message}" }
			id => "header-0017"
			add_field => {
				"[rsa][header][id]" => "0017"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0013
	# line in RSA: %NICWIN-<hlevel>-<messageid> <hfld1> : <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{messageid} %{hfld1} : %{message}" }
			id => "header-0013"
			add_field => {
				"[rsa][header][id]" => "0013"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: %NICWIN-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %NICWIN-<hlevel>-<messageid>_<hnum>_<application>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{messageid}_%{hnum}_%{application}: %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: %NICWIN-<hlevel>-<hfld1>_<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{hfld1}_%{messageid}: %{message}" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: %NICWIN-<hlevel>-<hfld1>_<hfld2>_<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{hfld1}_%{hfld2}_%{messageid}: %{message}" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <month> <day> <year> <time> %NICWIN-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{year} %{time} %NICWIN-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: %WINDNS-<hlevel>: <hfld1><hfld2><hfld3><hfld4><messageid><!payload:hfld1>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0011
	# line in RSA: %WINDNS-<hlevel>: <hfld1><hfld2><hfld3><messageid><!payload:hfld1>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0009
	# line in RSA: <hfld10> <hdatetime> <hfld11> [DNSDebug.log]: <hfld1><hfld2><hfld3><messageid><!payload:hfld1>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0016
	# line in RSA: %NICWIN-<hlevel>-Microsoft-Windows-GroupPolicy/<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-Microsoft-Windows-GroupPolicy/%{messageid}: %{message}" }
			id => "header-0016"
			add_field => {
				"[rsa][header][id]" => "0016"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0018
	# line in RSA: %NICWIN-<hlevel>-<Hmessageid>: <msgIdPart1>,<Hlinenum>,<Hday> <Hdatetime>,<msgIdPart2>,<Haaplication>,<Hevent_user>,<Hevent_type>,<Hevent_computer>,<Hcategory>,<Hdata>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{Hmessageid}: %{msgIdPart1},%{Hlinenum},%{Hday} %{Hdatetime},%{msgIdPart2},%{Haaplication},%{Hevent_user},%{Hevent_type},%{Hevent_computer},%{Hcategory},%{Hdata},%{message}" }
			id => "header-0018"
			add_field => {
				"[rsa][header][id]" => "0018"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_Microsoft-Windows-Security-Auditing"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0019
	# line in RSA: %NICWIN-<hlevel>-Microsoft-Windows-PowerShell/<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-Microsoft-Windows-PowerShell/%{messageid}: %{message}" }
			id => "header-0019"
			add_field => {
				"[rsa][header][id]" => "0019"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0020
	# line in RSA: %NICWIN-<hlevel>-<hfld11>/<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{hfld11}/%{messageid}: %{message}" }
			id => "header-0020"
			add_field => {
				"[rsa][header][id]" => "0020"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: %NICWIN-<hlevel>-<p_msgid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{p_msgid}: %{message}" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "WINDOWS_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_winevent_nicmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Remote Desktop Services: <event_description>:  User: <username> Session ID: <sessionid> Source Network Address: <saddr>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},Remote Desktop Services: %{event_description}:  User: %{username} Session ID: %{sessionid} Source Network Address: %{saddr}" }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Remote Desktop Services: <event_description>:  User: <username> Session ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},Remote Desktop Services: %{event_description}:  User: %{username} Session ID: %{sessionid}" }
			id => "msgParserId1"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Remote Desktop Services: <event_description>:  User: <username> Session ID: <sessionid> Source Network Address: <saddr>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},Remote Desktop Services: %{event_description}:  User: %{username} Session ID: %{sessionid} Source Network Address: %{saddr}" }
			id => "msgParserId2"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>, <space> Document <doc_number>, { <application>-<filename> owned by | <filename> owned by } <username> on <fld33> was printed on <device> { via | through } port <portname> Size in <space> bytes: <bytes>.<fld32> { pages | Pages } printed:<dclass_counter1>. <event_description>
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),[\s]+(?<space>[^\s]*)[\s]+Document[\s]+(?<doc_number>[^,]*),[\s]+([\s]*(?<application>[^\-]*)\-(?<filename>[^\s]*)[\s]+owned[\s]+by[\s]+|[\s]*(?<filename>[^\s]*)[\s]+owned[\s]+by[\s]+)[\s]+(?<username>[^\s]*)[\s]+on[\s]+(?<fld33>[^\s]*)[\s]+was[\s]+printed[\s]+on[\s]+(?<device>[^\s]*)[\s]+([\s]*via[\s]+|[\s]*through[\s]+)[\s]+port[\s]+(?<portname>[^\s]*)[\s]+Size[\s]+in[\s]+(?<space>[^\s]*)[\s]+bytes:[\s]+(?<bytes>[^\.]*)\.(?<fld32>[^\s]*)[\s]+([\s]*pages[\s]+|[\s]*Pages[\s]+)[\s]+printed:(?<dclass_counter1>[^\.]*)\.[\s]+(?<event_description>.*)$" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>, <event_description>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2}, %{event_description}" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId5"
			add_field => {
				"id" => "%{msgIdPart1}"
				"event_source" => "%{msgIdPart2}"
				"event_user" => "%{Hevent_user}"
				"event_type" => "HYPERV"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"data" => "%{Hdata}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application_1002_Application" {
		# MESSAGE Application_1002_Application
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<fld3>The program <application> version <version> stopped interacting with Windows and was closed. <fld50> Process ID: <process_id> Start Time: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{fld3}The program %{application} version %{version} stopped interacting with Windows and was closed. %{fld50} Process ID: %{process_id} Start Time: %{info}" }
				id => "message-Application_1002_Application"
				add_field => {
					"[event][id]" => "Application_1002_Application"
					"[rsa][message][id1]" => "Application_1002_Application"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_1002_Application:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<fld3>Server farm '<obj_server>' has reached its minimum server threshold. <event_state>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{fld3}Server farm '%{obj_server}' has reached its minimum server threshold. %{event_state}" }
				id => "message-Application_1002_Application:01"
				add_field => {
				"event_description" => "Server farm has reached its minimum server threshold"
					"[event][id]" => "Application_1002_Application:01"
					"[rsa][message][id1]" => "Application_1002_Application:01"
					"[event][categoryid]" => "1603090000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId8"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product> - Update <obj_name> <event_description>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},Product: %{product} - Update %{obj_name} %{event_description}" }
			id => "msgParserId9"
			add_field => {
				"obj_type" => "Update Patch"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product>. The file <filename>is being {used | held in use} by the following { process: | process }Name: <process> <fld50>
	else if [logstash][msgparser][id] == "msgParserId10" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld2>[^,]*),Product:[\s]+(?<product>[^\.]*)\.[\s]+The[\s]+file[\s]+(?<filename>[^i]*)is[\s]+being[\s]+(used[\s]+|[\s]*held[\s]+in[\s]+use)[\s]+by[\s]+the[\s]+following[\s]+([\s]*process:[\s]+|[\s]*process[\s]+)Name:[\s]+(?<process>[^\s]*)[\s]+(?<fld50>.*)$" }
			id => "msgParserId10"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product>.<event_description>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},Product: %{product}.%{event_description}" }
			id => "msgParserId11"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Application_1033_MsiInstaller" {
		# MESSAGE Application_1033_MsiInstaller:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,<event_description> Product Name: <product> Product Version: <version> Product Language: <fld29> Installation success or error status: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},%{event_description} Product Name: %{product} Product Version: %{version} Product Language: %{fld29} Installation success or error status: %{resultcode}" }
				id => "message-Application_1033_MsiInstaller:01"
				add_field => {
					"[event][id]" => "Application_1033_MsiInstaller:01"
					"[rsa][message][id1]" => "Application_1033_MsiInstaller:01"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_1033_MsiInstaller
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product> Version: <version> Language: <fld29> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},Product: %{product} Version: %{version} Language: %{fld29} %{event_description}" }
				id => "message-Application_1033_MsiInstaller"
				add_field => {
					"[event][id]" => "Application_1033_MsiInstaller"
					"[rsa][message][id1]" => "Application_1033_MsiInstaller"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_1034_MsiInstaller" {
		# MESSAGE Application_1034_MsiInstaller:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,<event_description> Product Name: <product> Product Version: <version> Product Language: <fld29> Removal success or error status: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},%{event_description} Product Name: %{product} Product Version: %{version} Product Language: %{fld29} Removal success or error status: %{resultcode}" }
				id => "message-Application_1034_MsiInstaller:01"
				add_field => {
					"[event][id]" => "Application_1034_MsiInstaller:01"
					"[rsa][message][id1]" => "Application_1034_MsiInstaller:01"
					"[event][categoryid]" => "1704020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_1034_MsiInstaller
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product> Version: <version> Language: <fld29> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},Product: %{product} Version: %{version} Language: %{fld29} %{event_description}" }
				id => "message-Application_1034_MsiInstaller"
				add_field => {
					"[event][id]" => "Application_1034_MsiInstaller"
					"[rsa][message][id1]" => "Application_1034_MsiInstaller"
					"[event][categoryid]" => "1704020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_1035_MsiInstaller" {
		# MESSAGE Application_1035_MsiInstaller:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,<event_description> Product Name: <product> Product Version: <version> Product Language: <fld29> Reconfiguration success or error status: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},%{event_description} Product Name: %{product} Product Version: %{version} Product Language: %{fld29} Reconfiguration success or error status: %{resultcode}" }
				id => "message-Application_1035_MsiInstaller:01"
				add_field => {
					"[event][id]" => "Application_1035_MsiInstaller:01"
					"[rsa][message][id1]" => "Application_1035_MsiInstaller:01"
					"[event][categoryid]" => "1704030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_1035_MsiInstaller
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product> Version: <version> Language: <fld29> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},Product: %{product} Version: %{version} Language: %{fld29} %{event_description}" }
				id => "message-Application_1035_MsiInstaller"
				add_field => {
					"[event][id]" => "Application_1035_MsiInstaller"
					"[rsa][message][id1]" => "Application_1035_MsiInstaller"
					"[event][categoryid]" => "1704030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_1035_MsiInstaller:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-Application_1035_MsiInstaller:02"
				add_field => {
					"[event][id]" => "Application_1035_MsiInstaller:02"
					"[rsa][message][id1]" => "Application_1035_MsiInstaller:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_1036_MsiInstaller" {
		# MESSAGE Application_1036_MsiInstaller:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,<event_description> Product Name: <product> Product Version: <version> Product Language: <fld29> Installation success or error status: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},%{event_description} Product Name: %{product} Product Version: %{version} Product Language: %{fld29} Installation success or error status: %{resultcode}" }
				id => "message-Application_1036_MsiInstaller:01"
				add_field => {
					"[event][id]" => "Application_1036_MsiInstaller:01"
					"[rsa][message][id1]" => "Application_1036_MsiInstaller:01"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_1036_MsiInstaller
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product> Version: <version> Language: <fld16> Update: <obj_name> <fld50>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},Product: %{product} Version: %{version} Language: %{fld16} Update: %{obj_name} %{fld50}" }
				id => "message-Application_1036_MsiInstaller"
				add_field => {
				"obj_type" => "Update Patch"
					"[event][id]" => "Application_1036_MsiInstaller"
					"[rsa][message][id1]" => "Application_1036_MsiInstaller"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_1037_MsiInstaller" {
		# MESSAGE Application_1037_MsiInstaller:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,<event_description> Product Name: <product> Product Version: <version> Product Language: <fld29> Update Name: <obj_name> Removal success or error status: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},%{event_description} Product Name: %{product} Product Version: %{version} Product Language: %{fld29} Update Name: %{obj_name} Removal success or error status: %{resultcode}" }
				id => "message-Application_1037_MsiInstaller:01"
				add_field => {
				"obj_type" => "Update Patch"
					"[event][id]" => "Application_1037_MsiInstaller:01"
					"[rsa][message][id1]" => "Application_1037_MsiInstaller:01"
					"[event][categoryid]" => "1704020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_1037_MsiInstaller
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product> Version: <version> Language: <fld29> Update:<obj_name> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},Product: %{product} Version: %{version} Language: %{fld29} Update:%{obj_name} %{event_description}" }
				id => "message-Application_1037_MsiInstaller"
				add_field => {
				"obj_type" => "Update Patch"
					"[event][id]" => "Application_1037_MsiInstaller"
					"[rsa][message][id1]" => "Application_1037_MsiInstaller"
					"[event][categoryid]" => "1704020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_1038_MsiInstaller" {
		# MESSAGE Application_1038_MsiInstaller:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,<event_description> Product Name: <product> Product Version: <version> Product Language: <fld29> Type of System Restart: <fld21> Reason for Restart: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},%{event_description} Product Name: %{product} Product Version: %{version} Product Language: %{fld29} Type of System Restart: %{fld21} Reason for Restart: %{resultcode}" }
				id => "message-Application_1038_MsiInstaller:01"
				add_field => {
					"[event][id]" => "Application_1038_MsiInstaller:01"
					"[rsa][message][id1]" => "Application_1038_MsiInstaller:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_1038_MsiInstaller
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld2>,Product: <product> Version: <version> Language: <fld29> <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld2},Product: %{product} Version: %{version} Language: %{fld29} %{event_description}" }
				id => "message-Application_1038_MsiInstaller"
				add_field => {
					"[event][id]" => "Application_1038_MsiInstaller"
					"[rsa][message][id1]" => "Application_1038_MsiInstaller"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Application_3002_AntigenInternet" {
		# MESSAGE Application_3002_AntigenInternet
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Folder: SMTP Messages\{ Inbound And Outbound | Inbound } <space> Message: <info> File: <filename> Incident: <virusname> State: <disposition>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+Folder:[\s]+SMTP[\s]+Messages\\([\s]*Inbound[\s]+And[\s]+Outbound[\s]+|[\s]*Inbound[\s]+)[\s]+(?<space>[^\s]*)[\s]+Message:[\s]+(?<info>[^\s]*)[\s]+File:[\s]+(?<filename>[^\s]*)[\s]+Incident:[\s]+(?<virusname>[^\s]*)[\s]+State:[\s]+(?<disposition>[^\.]*)\.$" }
				id => "message-Application_3002_AntigenInternet"
				add_field => {
					"[event][id]" => "Application_3002_AntigenInternet"
					"[rsa][message][id1]" => "Application_3002_AntigenInternet"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Application_3002_AntigenInternet:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-Application_3002_AntigenInternet:01"
				add_field => {
					"[event][id]" => "Application_3002_AntigenInternet:01"
					"[rsa][message][id1]" => "Application_3002_AntigenInternet:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId22
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId22"
			add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId23"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> for '<policyname>' because it failed with error code '<result>' <fld25>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} for '%{policyname}' because it failed with error code '%{result}' %{fld25}" }
			id => "msgParserId24"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: Service_8003_FRS File Replication Service_8003_FRS <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "Service_8003_FRS File Replication Service_8003_FRS %{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId25"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId26"
			add_field => {
				"ec_subject" => "OS"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId27"
			add_field => {
				"ec_subject" => "OS"
				"ec_activity" => "Stop"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId16"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Authentication Package Name: <authmethod>
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Authentication Package Name: %{authmethod}" }
			id => "msgParserId28"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Logon Process Name: <process>
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Logon Process Name: %{process}" }
			id => "msgParserId29"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Number of audit messages discarded: <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Number of audit messages discarded: %{dclass_counter1}" }
			id => "msgParserId30"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId31
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <fld41> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId31" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Primary User Name: %{username} Primary Domain: %{domain} Primary Logon ID: %{fld41} Client User Name: %{c_username} Client Domain: %{c_domain} Client Logon ID: %{sessionid}" }
			id => "msgParserId31"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId32
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Notification Package Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId32" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Notification Package Name: %{obj_name}" }
			id => "msgParserId32"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId33
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Process ID: <process_id> Process Name: <process> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <sessionid> Client User Name: <c_username> Client Domain: <c_domain>  Client Logon ID: <sessionid1> Previous Time: <change_old> New Time: <change_new>
	else if [logstash][msgparser][id] == "msgParserId33" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Process ID: %{process_id} Process Name: %{process} Primary User Name: %{username} Primary Domain: %{domain} Primary Logon ID: %{sessionid} Client User Name: %{c_username} Client Domain: %{c_domain}  Client Logon ID: %{sessionid1} Previous Time: %{change_old} New Time: %{change_new}" }
			id => "msgParserId33"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "Time"
				"ec_activity" => "Modify"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId34
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Value of CrashOnAuditFail: <resultcode> Number of failed audits: <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId34" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Value of CrashOnAuditFail: %{resultcode} Number of failed audits: %{dclass_counter1}" }
			id => "msgParserId34"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "Time"
				"ec_activity" => "Modify"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_528_Security" {
		# MESSAGE Security_528_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Domain: <domain>Logon ID: <sessionid>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Logon GUID: <fld66>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Logon GUID: %{fld66}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_528_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_528_Security:01"
					"[rsa][message][id1]" => "Security_528_Security:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_528_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Domain: <domain>Logon ID: <sessionid>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_528_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_528_Security"
					"[rsa][message][id1]" => "Security_528_Security"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_529_Security" {
		# MESSAGE Security_529_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_529_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_529_Security:01"
					"[rsa][message][id1]" => "Security_529_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_529_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_529_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_529_Security"
					"[rsa][message][id1]" => "Security_529_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_530_Security" {
		# MESSAGE Security_530_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_530_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_530_Security:01"
					"[rsa][message][id1]" => "Security_530_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_530_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_530_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_530_Security"
					"[rsa][message][id1]" => "Security_530_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_531_Security" {
		# MESSAGE Security_531_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_531_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_531_Security:01"
					"[rsa][message][id1]" => "Security_531_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_531_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_531_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_531_Security"
					"[rsa][message][id1]" => "Security_531_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_532_Security" {
		# MESSAGE Security_532_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod> Workstation Name: <hostname>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod} Workstation Name: %{hostname}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_532_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_532_Security:01"
					"[rsa][message][id1]" => "Security_532_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_532_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod> Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod} Workstation Name: %{hostname}" }
				id => "message-Security_532_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_532_Security"
					"[rsa][message][id1]" => "Security_532_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_533_Security" {
		# MESSAGE Security_533_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username> Domain: <domain> Logon Type: <logon_type> Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username} Domain: %{domain} Logon Type: %{logon_type} Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_533_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_533_Security:01"
					"[rsa][message][id1]" => "Security_533_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_533_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username> Domain: <domain> Logon Type: <logon_type> Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username} Domain: %{domain} Logon Type: %{logon_type} Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_533_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_533_Security"
					"[rsa][message][id1]" => "Security_533_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_534_Security" {
		# MESSAGE Security_534_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_534_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_534_Security:01"
					"[rsa][message][id1]" => "Security_534_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_534_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_534_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_534_Security"
					"[rsa][message][id1]" => "Security_534_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_535_Security" {
		# MESSAGE Security_535_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result> User Name: <username> Domain: <domain> Logon Type: <logon_type> Logon Process: <process> Authentication Package: <authmethod> Workstation Name: <hostname> Caller User Name: <fld39> Caller Domain: <c_domain> Caller Logon ID: <sessionid1> Caller Process ID: <process_id> Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result} User Name: %{username} Domain: %{domain} Logon Type: %{logon_type} Logon Process: %{process} Authentication Package: %{authmethod} Workstation Name: %{hostname} Caller User Name: %{fld39} Caller Domain: %{c_domain} Caller Logon ID: %{sessionid1} Caller Process ID: %{process_id} Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_535_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_535_Security:01"
					"[rsa][message][id1]" => "Security_535_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_535_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result> User Name: <username> Domain: <domain> Logon Type: <logon_type> Logon Process: <process> Authentication Package: <authmethod> Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result} User Name: %{username} Domain: %{domain} Logon Type: %{logon_type} Logon Process: %{process} Authentication Package: %{authmethod} Workstation Name: %{hostname}" }
				id => "message-Security_535_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_535_Security"
					"[rsa][message][id1]" => "Security_535_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_536_Security" {
		# MESSAGE Security_536_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_536_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_536_Security:01"
					"[rsa][message][id1]" => "Security_536_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_536_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_536_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_536_Security"
					"[rsa][message][id1]" => "Security_536_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_537_Security" {
		# MESSAGE Security_537_Security:01
		# line in RSA: <event_log>,<fld1>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Status code: <disposition>Substatus code: <resultcode>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Status code: %{disposition}Substatus code: %{resultcode}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_537_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_537_Security:01"
					"[rsa][message][id1]" => "Security_537_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_537_Security
		# line in RSA: <event_log>,<fld1>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_537_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_537_Security"
					"[rsa][message][id1]" => "Security_537_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username> Domain: <domain> Logon ID: <sessionid> Logon Type: <logon_type>
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username} Domain: %{domain} Logon ID: %{sessionid} Logon Type: %{logon_type}" }
			id => "msgParserId49"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_539_Security" {
		# MESSAGE Security_539_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}Caller User Name: %{fld39}Caller Domain: %{fld40}Caller Logon ID: %{fld41}Caller Process ID: %{fld3}Transited Services: %{service} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_539_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_539_Security:01"
					"[rsa][message][id1]" => "Security_539_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_539_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Reason: <result>User Name: <username>Domain: <domain>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Reason: %{result}User Name: %{username}Domain: %{domain}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_539_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_539_Security"
					"[rsa][message][id1]" => "Security_539_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_540_Security" {
		# MESSAGE Security_540_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Domain: <domain>Logon ID: <sessionid>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>Logon GUID:<fld66>Caller User Name: <fld39>Caller Domain: <fld40>Caller Logon ID: <fld41>Caller Process ID: <fld3>Transited Services: <service> Source Network Address: <saddr> {Source Port: <sport>	<fld42> | Source Port: <sport>,<fld42> | Source Port: <sport>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+User[\s]+Name:[\s]+(?<username>[^D]*)Domain:[\s]+(?<domain>[^L]*)Logon[\s]+ID:[\s]+(?<sessionid>[^L]*)Logon[\s]+Type:[\s]+(?<logon_type>[^L]*)Logon[\s]+Process:[\s]+(?<process>[^A]*)Authentication[\s]+Package:[\s]+(?<authmethod>[^W]*)Workstation[\s]+Name:[\s]+(?<hostname>[^L]*)Logon[\s]+GUID:(?<fld66>[^C]*)Caller[\s]+User[\s]+Name:[\s]+(?<fld39>[^C]*)Caller[\s]+Domain:[\s]+(?<fld40>[^C]*)Caller[\s]+Logon[\s]+ID:[\s]+(?<fld41>[^C]*)Caller[\s]+Process[\s]+ID:[\s]+(?<fld3>[^T]*)Transited[\s]+Services:[\s]+(?<service>[^\s]*)[\s]+Source[\s]+Network[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+(Source[\s]+Port:[\s]+(?<sport>[^\t]*)\t(?<fld42>[^\s]*)[\s]+|[\s]*Source[\s]+Port:[\s]+(?<sport>[^,]*),(?<fld42>[^\s]*)[\s]+|[\s]*Source[\s]+Port:[\s]+(?<sport>.*))$" }
				id => "message-Security_540_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_540_Security:01"
					"[rsa][message][id1]" => "Security_540_Security:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_540_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Domain: <domain>Logon ID: <sessionid>Logon Type: <logon_type>Logon Process: <process>Authentication Package: <authmethod>Workstation Name: <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}Logon Type: %{logon_type}Logon Process: %{process}Authentication Package: %{authmethod}Workstation Name: %{hostname}" }
				id => "message-Security_540_Security"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_540_Security"
					"[rsa][message][id1]" => "Security_540_Security"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId51
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Mode: <ike> Peer Identity: <peer_id>Filter: <filter>Parameters: <param>
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Mode: %{ike} Peer Identity: %{peer_id}Filter: %{filter}Parameters: %{param}" }
			id => "msgParserId51"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Start"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId52
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> <space>Mode: <ike> Filter: <filter>Inbound SPI: <fld14>Outbound SPI: <fld13>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} %{space}Mode: %{ike} Filter: %{filter}Inbound SPI: %{fld14}Outbound SPI: %{fld13}" }
			id => "msgParserId52"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId53
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> <space>Mode: <ike> Filter: <filter>
	else if [logstash][msgparser][id] == "msgParserId53" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} %{space}Mode: %{ike} Filter: %{filter}" }
			id => "msgParserId53"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId54
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Peer Identity: <peer_id>Filter: <filter>
	else if [logstash][msgparser][id] == "msgParserId54" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Peer Identity: %{peer_id}Filter: %{filter}" }
			id => "msgParserId54"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId55
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Peer Identity: <peer_id>Filter: <filter>
	else if [logstash][msgparser][id] == "msgParserId55" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Peer Identity: %{peer_id}Filter: %{filter}" }
			id => "msgParserId55"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"ec_subject" => "User"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId56
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Mode: <ike>Filter: <filter>Attribute: <param>Expected value: <expected_val>Received value: <observed_val>
	else if [logstash][msgparser][id] == "msgParserId56" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Mode: %{ike}Filter: %{filter}Attribute: %{param}Expected value: %{expected_val}Received value: %{observed_val}" }
			id => "msgParserId56"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_547_Security" {
		# MESSAGE Security_547_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Mode: <ike>Filter: <filter>Peer Identity: <peer_id>Failure Point: <fld19> Failure Reason: <result> Extra Status: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Mode: %{ike}Filter: %{filter}Peer Identity: %{peer_id}Failure Point: %{fld19} Failure Reason: %{result} Extra Status: %{fld3}" }
				id => "message-Security_547_Security:02"
				add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_547_Security:02"
					"[rsa][message][id1]" => "Security_547_Security:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_547_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Mode: <ike> Filter: <filter> Failure Point: <fld19> Failure Reason: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Mode: %{ike} Filter: %{filter} Failure Point: %{fld19} Failure Reason: %{result}" }
				id => "message-Security_547_Security"
				add_field => {
				"ec_theme" => "Encryption"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_547_Security"
					"[rsa][message][id1]" => "Security_547_Security"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId59
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId59" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId59"
			add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId60
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId60"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Detect"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId61
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username> Domain: <domain> Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username} Domain: %{domain} Logon ID: %{sessionid}" }
			id => "msgParserId61"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_552_Security" {
		# MESSAGE Security_552_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Logged on user: <space> User Name: <username> Domain: <domain> Logon ID: <sessionid> Logon GUID: <fld66> User whose credentials were used: <fld51> Target User Name: <c_username> Target Domain: <c_domain> Target Logon GUID: <fld32> Target Server Name: <dhost> Target Server Info: <fld33> Caller Process ID: <process_id> Source Network Address: <saddr> Source Port: <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Logged on user: %{space} User Name: %{username} Domain: %{domain} Logon ID: %{sessionid} Logon GUID: %{fld66} User whose credentials were used: %{fld51} Target User Name: %{c_username} Target Domain: %{c_domain} Target Logon GUID: %{fld32} Target Server Name: %{dhost} Target Server Info: %{fld33} Caller Process ID: %{process_id} Source Network Address: %{saddr} Source Port: %{sport}" }
				id => "message-Security_552_Security"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_552_Security"
					"[rsa][message][id1]" => "Security_552_Security"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_552_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Logged on user: <space> User Name: <username> Domain: <domain> Logon ID: <sessionid> Logon GUID: <fld66> User whose credentials were used: <space> User Name: <c_username> Domain: <c_domain> Logon GUID: <fld32>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Logged on user: %{space} User Name: %{username} Domain: %{domain} Logon ID: %{sessionid} Logon GUID: %{fld66} User whose credentials were used: %{space} User Name: %{c_username} Domain: %{c_domain} Logon GUID: %{fld32}" }
				id => "message-Security_552_Security:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_552_Security:01"
					"[rsa][message][id1]" => "Security_552_Security:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId64
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,User Name: <username> Domain: <domain> Request Type: <fld34> Logon Process: <process>  Authentication Package: <authmethod> Workstation Name: <shost> Caller User Name: <c_username> Caller Domain: <c_domain> Caller Logon ID: <sessionid1> Caller Process ID: <fld44> Transited Services: <fld43>
	else if [logstash][msgparser][id] == "msgParserId64" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},User Name: %{username} Domain: %{domain} Request Type: %{fld34} Logon Process: %{process}  Authentication Package: %{authmethod} Workstation Name: %{shost} Caller User Name: %{c_username} Caller Domain: %{c_domain} Caller Logon ID: %{sessionid1} Caller Process ID: %{fld44} Transited Services: %{fld43}" }
			id => "msgParserId64"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_560_Security" {
		# MESSAGE Security_560_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> <space>Object Server: <obj_server>Object Type: <obj_type>Object Name: <obj_name>Handle ID: <id1>Operation ID: <id2>Process ID: <process_id>Image File Name: <process>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain: <c_domain>Client Logon ID: <sessionid1>Accesses: <accesses> { Privileges: |  Privileges } <privilege>Restricted Sid Count: <fld53>Access Mask: <fld52>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+(?<space>[^O]*)Object[\s]+Server:[\s]+(?<obj_server>[^O]*)Object[\s]+Type:[\s]+(?<obj_type>[^O]*)Object[\s]+Name:[\s]+(?<obj_name>[^H]*)Handle[\s]+ID:[\s]+(?<id1>[^O]*)Operation[\s]+ID:[\s]+(?<id2>[^P]*)Process[\s]+ID:[\s]+(?<process_id>[^I]*)Image[\s]+File[\s]+Name:[\s]+(?<process>[^P]*)Primary[\s]+User[\s]+Name:[\s]+(?<username>[^P]*)Primary[\s]+Domain:[\s]+(?<domain>[^P]*)Primary[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^C]*)Client[\s]+User[\s]+Name:[\s]+(?<c_username>[^C]*)Client[\s]+Domain:[\s]+(?<c_domain>[^C]*)Client[\s]+Logon[\s]+ID:[\s]+(?<sessionid1>[^A]*)Accesses:[\s]+(?<accesses>[^\s]*)[\s]+([\s]*Privileges:[\s]+|[\s]*Privileges[\s]+)[\s]+(?<privilege>[^R]*)Restricted[\s]+Sid[\s]+Count:[\s]+(?<fld53>[^A]*)Access[\s]+Mask:[\s]+(?<fld52>.*)$" }
				id => "message-Security_560_Security:02"
				add_field => {
				"ec_theme" => "ALM"
					"[event][id]" => "Security_560_Security:02"
					"[rsa][message][id1]" => "Security_560_Security:02"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_560_Security:03
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> <space> Object Server: <obj_server> Object Type: <obj_type> Object Name: <obj_name> Handle ID: <id1> Operation ID: <id2> Process ID: <process_id> Image File Name: <process> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <sessionid> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid1> Accesses: <accesses> { Privileges: |  Privileges } <privilege> Restricted Sid Count: <fld53>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+(?<space>[^\s]*)[\s]+Object[\s]+Server:[\s]+(?<obj_server>[^\s]*)[\s]+Object[\s]+Type:[\s]+(?<obj_type>[^\s]*)[\s]+Object[\s]+Name:[\s]+(?<obj_name>[^\s]*)[\s]+Handle[\s]+ID:[\s]+(?<id1>[^\s]*)[\s]+Operation[\s]+ID:[\s]+(?<id2>[^\s]*)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Image[\s]+File[\s]+Name:[\s]+(?<process>[^\s]*)[\s]+Primary[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Primary[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Primary[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Client[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Client[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Client[\s]+Logon[\s]+ID:[\s]+(?<sessionid1>[^\s]*)[\s]+Accesses:[\s]+(?<accesses>[^\s]*)[\s]+([\s]*Privileges:[\s]+|[\s]*Privileges[\s]+)[\s]+(?<privilege>[^\s]*)[\s]+Restricted[\s]+Sid[\s]+Count:[\s]+(?<fld53>.*)$" }
				id => "message-Security_560_Security:03"
				add_field => {
				"ec_theme" => "ALM"
					"[event][id]" => "Security_560_Security:03"
					"[rsa][message][id1]" => "Security_560_Security:03"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_560_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> <space>Object Server: <obj_server> Object Type: <obj_type> Object Name: <obj_name> New Handle ID: <id1> Operation ID: <id2> Process ID: <process_id> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <sessionid> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid1> Accesses<accesses> { Privileges: |  Privileges } <privilege>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+(?<space>[^O]*)Object[\s]+Server:[\s]+(?<obj_server>[^\s]*)[\s]+Object[\s]+Type:[\s]+(?<obj_type>[^\s]*)[\s]+Object[\s]+Name:[\s]+(?<obj_name>[^\s]*)[\s]+New[\s]+Handle[\s]+ID:[\s]+(?<id1>[^\s]*)[\s]+Operation[\s]+ID:[\s]+(?<id2>[^\s]*)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Primary[\s]+User[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Primary[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Primary[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Client[\s]+User[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Client[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Client[\s]+Logon[\s]+ID:[\s]+(?<sessionid1>[^\s]*)[\s]+Accesses(?<accesses>[^\s]*)[\s]+([\s]*Privileges:[\s]+|[\s]*Privileges[\s]+)[\s]+(?<privilege>.*)$" }
				id => "message-Security_560_Security"
				add_field => {
				"ec_theme" => "ALM"
					"[event][id]" => "Security_560_Security"
					"[rsa][message][id1]" => "Security_560_Security"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId68
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Handle ID: <id1>Operation ID: <id2>Process ID: <process_id>
	else if [logstash][msgparser][id] == "msgParserId68" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Handle ID: %{id1}Operation ID: %{id2}Process ID: %{process_id}" }
			id => "msgParserId68"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_562_Security" {
		# MESSAGE Security_562_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server>Handle ID: <id1>Process ID: <process_id>Image File Name: <process>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server}Handle ID: %{id1}Process ID: %{process_id}Image File Name: %{process}" }
				id => "message-Security_562_Security:02"
				add_field => {
					"[event][id]" => "Security_562_Security:02"
					"[rsa][message][id1]" => "Security_562_Security:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_562_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server> Handle ID: <id1> Process ID: <process_id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server} Handle ID: %{id1} Process ID: %{process_id}" }
				id => "message-Security_562_Security"
				add_field => {
					"[event][id]" => "Security_562_Security"
					"[rsa][message][id1]" => "Security_562_Security"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_563_Security" {
		# MESSAGE Security_563_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server>Object Type: <obj_type>Object Name: <obj_name>Handle ID: <id1>Operation ID: <id2>Process ID: <process_id>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain: <c_domain>Client Logon ID: <sessionid1>Accesses: <accesses>Privileges: <privilege>Access Mask: <fld52>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server}Object Type: %{obj_type}Object Name: %{obj_name}Handle ID: %{id1}Operation ID: %{id2}Process ID: %{process_id}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain: %{c_domain}Client Logon ID: %{sessionid1}Accesses: %{accesses}Privileges: %{privilege}Access Mask: %{fld52}" }
				id => "message-Security_563_Security:02"
				add_field => {
					"[event][id]" => "Security_563_Security:02"
					"[rsa][message][id1]" => "Security_563_Security:02"
					"[event][categoryid]" => "1206020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_563_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server>Object Type: <obj_type>Object Name: <obj_name>New Handle ID: <id1>Operation ID: <id2>Process ID: <process_id>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain: <c_domain>Client Logon ID: <sessionid1> Accesses <accesses> Privileges <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server}Object Type: %{obj_type}Object Name: %{obj_name}New Handle ID: %{id1}Operation ID: %{id2}Process ID: %{process_id}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain: %{c_domain}Client Logon ID: %{sessionid1} Accesses %{accesses} Privileges %{privilege}" }
				id => "message-Security_563_Security"
				add_field => {
					"[event][id]" => "Security_563_Security"
					"[rsa][message][id1]" => "Security_563_Security"
					"[event][categoryid]" => "1206020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_564_Security" {
		# MESSAGE Security_564_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server>Handle ID: <id1>Process ID: <process_id>Image File Name: <process>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server}Handle ID: %{id1}Process ID: %{process_id}Image File Name: %{process}" }
				id => "message-Security_564_Security:02"
				add_field => {
					"[event][id]" => "Security_564_Security:02"
					"[rsa][message][id1]" => "Security_564_Security:02"
					"[event][categoryid]" => "1206020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_564_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server>Handle ID: <id1>Process ID: <process_id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server}Handle ID: %{id1}Process ID: %{process_id}" }
				id => "message-Security_564_Security"
				add_field => {
					"[event][id]" => "Security_564_Security"
					"[rsa][message][id1]" => "Security_564_Security"
					"[event][categoryid]" => "1206020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_565_Security" {
		# MESSAGE Security_565_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server>Object Type: <obj_type>Object Name: <obj_name>Handle ID: <id1>Operation ID: <id2>Process ID:<process_id>Process Name:<process>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain:<c_domain>Client Logon ID: <sessionid1>Accesses: <accesses> Privileges: <privilege> Properties: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server}Object Type: %{obj_type}Object Name: %{obj_name}Handle ID: %{id1}Operation ID: %{id2}Process ID:%{process_id}Process Name:%{process}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain:%{c_domain}Client Logon ID: %{sessionid1}Accesses: %{accesses} Privileges: %{privilege} Properties: %{param}" }
				id => "message-Security_565_Security:02"
				add_field => {
					"[event][id]" => "Security_565_Security:02"
					"[rsa][message][id1]" => "Security_565_Security:02"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_565_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server>Object Type: <obj_type>Object Name: <obj_name>New Handle ID: <id1>Operation ID: <id2>Process ID:<process_id>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain:<c_domain>Client Logon ID: <sessionid1>Accesses<accesses>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server}Object Type: %{obj_type}Object Name: %{obj_name}New Handle ID: %{id1}Operation ID: %{id2}Process ID:%{process_id}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain:%{c_domain}Client Logon ID: %{sessionid1}Accesses%{accesses}" }
				id => "message-Security_565_Security"
				add_field => {
					"[event][id]" => "Security_565_Security"
					"[rsa][message][id1]" => "Security_565_Security"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_566_Security" {
		# MESSAGE Security_566_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Operation Type: <action>Object Type: <obj_type>Object Name: <obj_name>Handle ID: <id1>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain: <c_domain>Client Logon ID: <sessionid1>Accesses: <accesses>{Properties: <param>Additional Info: <info> Access Mask: <fld52> | Properties: <param>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+Operation[\s]+Type:[\s]+(?<action>[^O]*)Object[\s]+Type:[\s]+(?<obj_type>[^O]*)Object[\s]+Name:[\s]+(?<obj_name>[^H]*)Handle[\s]+ID:[\s]+(?<id1>[^P]*)Primary[\s]+User[\s]+Name:[\s]+(?<username>[^P]*)Primary[\s]+Domain:[\s]+(?<domain>[^P]*)Primary[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^C]*)Client[\s]+User[\s]+Name:[\s]+(?<c_username>[^C]*)Client[\s]+Domain:[\s]+(?<c_domain>[^C]*)Client[\s]+Logon[\s]+ID:[\s]+(?<sessionid1>[^A]*)Accesses:[\s]+(?<accesses>[^P\s]*)(Properties:[\s]+(?<param>[^A]*)Additional[\s]+Info:[\s]+(?<info>[^\s]*)[\s]+Access[\s]+Mask:[\s]+(?<fld52>[^\s]*)[\s]+|[\s]*Properties:[\s]+(?<param>.*))$" }
				id => "message-Security_566_Security:02"
				add_field => {
					"[event][id]" => "Security_566_Security:02"
					"[rsa][message][id1]" => "Security_566_Security:02"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_566_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Operation Type: <action> Object Type: <obj_type> Object Name: <obj_name> Handle ID: <id1> Operation ID: <id2> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <sessionid> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid1> Requested Accesses <accesses>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Operation Type: %{action} Object Type: %{obj_type} Object Name: %{obj_name} Handle ID: %{id1} Operation ID: %{id2} Primary User Name: %{username} Primary Domain: %{domain} Primary Logon ID: %{sessionid} Client User Name: %{c_username} Client Domain: %{c_domain} Client Logon ID: %{sessionid1} Requested Accesses %{accesses}" }
				id => "message-Security_566_Security"
				add_field => {
					"[event][id]" => "Security_566_Security"
					"[rsa][message][id1]" => "Security_566_Security"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_566_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Operation Type <action>Object Type: <obj_type>Object Name: <obj_name>Handle ID: <id1> Operation ID:<id2>Primary User Name: <domain>Primary Domain: <sessionid>Primary Logon ID: <username>Client User Name: <c_domain>Client Domain: <sessionid1>Client Logon ID: <c_username>       Requested Accesses <accesses>      <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Operation Type %{action}Object Type: %{obj_type}Object Name: %{obj_name}Handle ID: %{id1} Operation ID:%{id2}Primary User Name: %{domain}Primary Domain: %{sessionid}Primary Logon ID: %{username}Client User Name: %{c_domain}Client Domain: %{sessionid1}Client Logon ID: %{c_username}       Requested Accesses %{accesses}      %{info}" }
				id => "message-Security_566_Security:01"
				add_field => {
					"[event][id]" => "Security_566_Security:01"
					"[rsa][message][id1]" => "Security_566_Security:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_567_Security" {
		# MESSAGE Security_567_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server> Handle ID: <id1> Object Type: <obj_type> Process ID: <process_id> Image File Name: <process> Accesses: <accesses> Access Mask: <fld52>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server} Handle ID: %{id1} Object Type: %{obj_type} Process ID: %{process_id} Image File Name: %{process} Accesses: %{accesses} Access Mask: %{fld52}" }
				id => "message-Security_567_Security:02"
				add_field => {
					"[event][id]" => "Security_567_Security:02"
					"[rsa][message][id1]" => "Security_567_Security:02"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_567_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server> Handle ID: <id1> Object Type: <obj_type> Process ID: <process_id> Image File Name: <process> Access Mask: <fld52>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server} Handle ID: %{id1} Object Type: %{obj_type} Process ID: %{process_id} Image File Name: %{process} Access Mask: %{fld52}" }
				id => "message-Security_567_Security:01"
				add_field => {
					"[event][id]" => "Security_567_Security:01"
					"[rsa][message][id1]" => "Security_567_Security:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId80
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Domain: <domain>Logon ID: <sessionid>{Assigned|Privileges}: <privilege>
	else if [logstash][msgparser][id] == "msgParserId80" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+User[\s]+Name:[\s]+(?<username>[^D]*)Domain:[\s]+(?<domain>[^L]*)Logon[\s]+ID:[\s]+(?<sessionid>[^AP]*)(Assigned|Privileges):[\s]+(?<privilege>.*)$" }
			id => "msgParserId80"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_577_Security" {
		# MESSAGE Security_577_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,Success Audit,<event_computer>,<category>,<fld2>,<event_description> Server: <obj_server>Service: <service>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain: <c_domain>Client Logon ID: <sessionid1>Privileges:<privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},Success Audit,%{event_computer},%{category},%{fld2},%{event_description} Server: %{obj_server}Service: %{service}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain: %{c_domain}Client Logon ID: %{sessionid1}Privileges:%{privilege}" }
				id => "message-Security_577_Security:02"
				add_field => {
				"event_type" => "Success Audit"
					"[event][id]" => "Security_577_Security:02"
					"[rsa][message][id1]" => "Security_577_Security:02"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_577_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,Failure Audit,<event_computer>,<category>,<fld2>,<event_description> Server: <obj_server>Service: <service>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain: <c_domain>Client Logon ID: <sessionid1>Privileges:<privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},Failure Audit,%{event_computer},%{category},%{fld2},%{event_description} Server: %{obj_server}Service: %{service}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain: %{c_domain}Client Logon ID: %{sessionid1}Privileges:%{privilege}" }
				id => "message-Security_577_Security:01"
				add_field => {
				"event_type" => "Failure Audit"
					"[event][id]" => "Security_577_Security:01"
					"[rsa][message][id1]" => "Security_577_Security:01"
					"[event][categoryid]" => "1401050200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_577_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Server: <obj_server>Service: <service>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain: <c_domain>Client Logon ID: <sessionid1>Privileges:<privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Server: %{obj_server}Service: %{service}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain: %{c_domain}Client Logon ID: %{sessionid1}Privileges:%{privilege}" }
				id => "message-Security_577_Security"
				add_field => {
					"[event][id]" => "Security_577_Security"
					"[rsa][message][id1]" => "Security_577_Security"
					"[event][categoryid]" => "1401050100"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId84
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Server: <obj_server>Object Handle: <id1>Process ID: <process>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain: <c_domain>Client Logon ID:<sessionid1>Privileges:<privilege>
	else if [logstash][msgparser][id] == "msgParserId84" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Server: %{obj_server}Object Handle: %{id1}Process ID: %{process}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain: %{c_domain}Client Logon ID:%{sessionid1}Privileges:%{privilege}" }
			id => "msgParserId84"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId85
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Process ID: <process_id>Image File Name: <process>Creator Process ID: <parent_pid>User Name: <username>Domain: <domain>Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId85" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Process ID: %{process_id}Image File Name: %{process}Creator Process ID: %{parent_pid}User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}" }
			id => "msgParserId85"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_593_Security" {
		# MESSAGE Security_593_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Process ID: <process_id>Image File Name: <process>User Name: <username>Domain: <domain>Logon ID: <sessionid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Process ID: %{process_id}Image File Name: %{process}User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}" }
				id => "message-Security_593_Security"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Stop"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_593_Security"
					"[rsa][message][id1]" => "Security_593_Security"
					"[event][categoryid]" => "1205020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_593_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Process ID: <process_id>User Name: <username>Domain: <domain>Logon ID: <sessionid>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Process ID: %{process_id}User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}" }
				id => "message-Security_593_Security:01"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Stop"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_593_Security:01"
					"[rsa][message][id1]" => "Security_593_Security:01"
					"[event][categoryid]" => "1205020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId88
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Source Handle ID: <id1>Source Process ID: <parent_pid>Target Handle ID: <id2>Target Process ID: <process_id>
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Source Handle ID: %{id1}Source Process ID: %{parent_pid}Target Handle ID: %{id2}Target Process ID: %{process_id}" }
			id => "msgParserId88"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_595_Security" {
		# MESSAGE Security_595_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Type: <obj_type>Object Name: <obj_name>Process ID: <process_id>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain:<c_domain>Client Logon ID:<sessionid1>Accesses:<accesses>Access Mask:<fld52>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Type: %{obj_type}Object Name: %{obj_name}Process ID: %{process_id}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain:%{c_domain}Client Logon ID:%{sessionid1}Accesses:%{accesses}Access Mask:%{fld52}" }
				id => "message-Security_595_Security"
				add_field => {
					"[event][id]" => "Security_595_Security"
					"[rsa][message][id1]" => "Security_595_Security"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_595_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Object Type: <obj_type>Object Name: <obj_name>Process ID: <process_id>Primary User Name: <username>Primary Domain: <domain>Primary Logon ID: <sessionid>Client User Name: <c_username>Client Domain:<c_domain>Client Logon ID:<sessionid1>Accesses:<accesses>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Object Type: %{obj_type}Object Name: %{obj_name}Process ID: %{process_id}Primary User Name: %{username}Primary Domain: %{domain}Primary Logon ID: %{sessionid}Client User Name: %{c_username}Client Domain:%{c_domain}Client Logon ID:%{sessionid1}Accesses:%{accesses}" }
				id => "message-Security_595_Security:01"
				add_field => {
					"[event][id]" => "Security_595_Security:01"
					"[rsa][message][id1]" => "Security_595_Security:01"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_600_Security" {
		# MESSAGE Security_600_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Assigning Process Information: <space> Process ID: <parent_pid>  Image File Name: <process_src>  Primary User Name: <username>  Primary Domain: <domain>  Primary Logon ID: <sessionid> New Process Information: <space> Process ID: <process_id>  Image File Name: <process>  Target User Name: <c_username>  Target Domain: <c_domain>  Target Logon ID: <sessionid1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Assigning Process Information: %{space} Process ID: %{parent_pid}  Image File Name: %{process_src}  Primary User Name: %{username}  Primary Domain: %{domain}  Primary Logon ID: %{sessionid} New Process Information: %{space} Process ID: %{process_id}  Image File Name: %{process}  Target User Name: %{c_username}  Target Domain: %{c_domain}  Target Logon ID: %{sessionid1}" }
				id => "message-Security_600_Security"
				add_field => {
					"[event][id]" => "Security_600_Security"
					"[rsa][message][id1]" => "Security_600_Security"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_600_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Assigning Process Information: <space> Process ID: <parent_pid>  Image File Name: <process_src> User Name: <username> Domain: <domain>  Logon ID: <sessionid> New Process Information: <space> Process ID: <process_id>  Image File Name: <process>  User Name: <c_username>  Domain: <c_domain>  Logon ID: <sessionid1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Assigning Process Information: %{space} Process ID: %{parent_pid}  Image File Name: %{process_src} User Name: %{username} Domain: %{domain}  Logon ID: %{sessionid} New Process Information: %{space} Process ID: %{process_id}  Image File Name: %{process}  User Name: %{c_username}  Domain: %{c_domain}  Logon ID: %{sessionid1}" }
				id => "message-Security_600_Security:01"
				add_field => {
					"[event][id]" => "Security_600_Security:01"
					"[rsa][message][id1]" => "Security_600_Security:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId93
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Service Name:<service> Service File Name:<filename> Service Type:<fld56> Service Start Type:<fld57> Service Account:<service_account> By: <space> User Name:<username> Domain:<domain> Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId93" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Service Name:%{service} Service File Name:%{filename} Service Type:%{fld56} Service Start Type:%{fld57} Service Account:%{service_account} By: %{space} User Name:%{username} Domain:%{domain} Logon ID: %{sessionid}" }
			id => "msgParserId93"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId94
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> File Name:<filename> Command:<action> Triggers:<trigger_val> Time:<fld58> Flags:<fld52> Target User:<service_account> By: <space> User:<username> Domain:<domain> Logon ID:<sessionid>
	else if [logstash][msgparser][id] == "msgParserId94" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} File Name:%{filename} Command:%{action} Triggers:%{trigger_val} Time:%{fld58} Flags:%{fld52} Target User:%{service_account} By: %{space} User:%{username} Domain:%{domain} Logon ID:%{sessionid}" }
			id => "msgParserId94"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId95
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Right: <privilege> Assigned To: <realm> Assigned By: <space> User Name: <username> Domain: <domain> Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId95" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Right: %{privilege} Assigned To: %{realm} Assigned By: %{space} User Name: %{username} Domain: %{domain} Logon ID: %{sessionid}" }
			id => "msgParserId95"
			add_field => {
				"ec_subject" => "Permission"
				"ec_activity" => "Modify"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId96
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Right: <privilege> Removed From: <realm> Removed By: <space> User Name: <username> Domain: <domain> Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId96" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Right: %{privilege} Removed From: %{realm} Removed By: %{space} User Name: %{username} Domain: %{domain} Logon ID: %{sessionid}" }
			id => "msgParserId96"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_subject" => "Permission"
				"ec_activity" => "Delete"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId97
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Trusted Domain: Domain Name: <remote_domain>Domain ID: <remote_domain_id>Established By: <space> User Name: <username>Domain: <domain>Logon ID: <sessionid> <info>
	else if [logstash][msgparser][id] == "msgParserId97" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Trusted Domain: Domain Name: %{remote_domain}Domain ID: %{remote_domain_id}Established By: %{space} User Name: %{username}Domain: %{domain}Logon ID: %{sessionid} %{info}" }
			id => "msgParserId97"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId98
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Domain Name: <remote_domain>Domain ID: <remote_domain_id>Removed By: User Name: <username>Domain: <domain>Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId98" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Domain Name: %{remote_domain}Domain ID: %{remote_domain_id}Removed By: User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}" }
			id => "msgParserId98"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId99
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Policy: <policy_value> Changed By: User Name: <username>Domain Name: <domain>Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId99" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Policy: %{policy_value} Changed By: User Name: %{username}Domain Name: %{domain}Logon ID: %{sessionid}" }
			id => "msgParserId99"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId100
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy Source: <info>
	else if [logstash][msgparser][id] == "msgParserId100" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy Source: %{info}" }
			id => "msgParserId100"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId101
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>: <info>
	else if [logstash][msgparser][id] == "msgParserId101" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}: %{info}" }
			id => "msgParserId101"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId102
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Changed By:<space>User Name:<username>Domain Name:<domain>Logon ID:<sessionid>Changes made:<policy_value>
	else if [logstash][msgparser][id] == "msgParserId102" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Changed By:%{space}User Name:%{username}Domain Name:%{domain}Logon ID:%{sessionid}Changes made:%{policy_value}" }
			id => "msgParserId102"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId103
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Changed By: <space>  User Name: <username>Domain Name: <domain>Logon ID: <sessionid>Changes Made:<policy_value>
	else if [logstash][msgparser][id] == "msgParserId103" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Changed By: %{space}  User Name: %{username}Domain Name: %{domain}Logon ID: %{sessionid}Changes Made:%{policy_value}" }
			id => "msgParserId103"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId104
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Changed By: User Name: <username>Domain Name: <domain>Logon ID: <sessionid>Changes Made:<policy_value>
	else if [logstash][msgparser][id] == "msgParserId104" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Changed By: User Name: %{username}Domain Name: %{domain}Logon ID: %{sessionid}Changes Made:%{policy_value}" }
			id => "msgParserId104"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId105
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Domain Name: <remote_domain>Domain ID: <remote_domain_id>Modified By: <space> User Name: <username>Domain: <domain>Logon ID: <sessionid> <info>
	else if [logstash][msgparser][id] == "msgParserId105" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Domain Name: %{remote_domain}Domain ID: %{remote_domain_id}Modified By: %{space} User Name: %{username}Domain: %{domain}Logon ID: %{sessionid} %{info}" }
			id => "msgParserId105"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId106
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Access Granted: <accesses> Account Modified: <realm> Assigned By: User Name: <username> Domain: <domain> Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId106" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Access Granted: %{accesses} Account Modified: %{realm} Assigned By: User Name: %{username} Domain: %{domain} Logon ID: %{sessionid}" }
			id => "msgParserId106"
			add_field => {
				"ec_subject" => "Permission"
				"ec_activity" => "Modify"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId107
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Access Removed: <accesses> Account Modified: <realm> Removed By: User Name: <username> Domain: <domain> Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId107" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Access Removed: %{accesses} Account Modified: %{realm} Removed By: User Name: %{username} Domain: %{domain} Logon ID: %{sessionid}" }
			id => "msgParserId107"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_subject" => "Permission"
				"ec_activity" => "Delete"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId108
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId108" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId108"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_624_Security" {
		# MESSAGE Security_624_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <c_username>New Domain: <c_domain>New Account ID: <fld39>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>{Privileges:|Privileges} <privilege> Attributes: Sam Account Name: <user_fullname> Home Directory: <param>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+New[\s]+Account[\s]+Name:[\s]+(?<c_username>[^N]*)New[\s]+Domain:[\s]+(?<c_domain>[^N]*)New[\s]+Account[\s]+ID:[\s]+(?<fld39>[^C]*)Caller[\s]+User[\s]+Name:[\s]+(?<username>[^C]*)Caller[\s]+Domain:[\s]+(?<domain>[^C]*)Caller[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^PP]*)(Privileges:|Privileges)[\s]+(?<privilege>[^\s]*)[\s]+Attributes:[\s]+Sam[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Home[\s]+Directory:[\s]+(?<param>.*)$" }
				id => "message-Security_624_Security:02"
				add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_624_Security:02"
					"[rsa][message][id1]" => "Security_624_Security:02"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_624_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <c_username>New Domain: <c_domain>New Account ID: <fld39>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{c_username}New Domain: %{c_domain}New Account ID: %{fld39}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges %{privilege}" }
				id => "message-Security_624_Security"
				add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_624_Security"
					"[rsa][message][id1]" => "Security_624_Security"
					"[event][categoryid]" => "1402020200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId111
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID:<c_sid>New Type: <change_new>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId111" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID:%{c_sid}New Type: %{change_new}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}" }
			id => "msgParserId111"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId112
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID:<fld39>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId112" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID:%{fld39}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}" }
			id => "msgParserId112"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId113
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID:<sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId113" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID:%{sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId113"
			add_field => {
				"ec_theme" => "Password"
				"ec_subject" => "Password"
				"ec_activity" => "Modify"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId114
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID:<sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId114" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID:%{sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}" }
			id => "msgParserId114"
			add_field => {
				"ec_theme" => "Password"
				"ec_subject" => "Password"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId115
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID:<c_sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId115" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID:%{c_sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}" }
			id => "msgParserId115"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId116
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID:<c_sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId116" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID:%{c_sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId116"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_631_Security" {
		# MESSAGE Security_631_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}Attributes: %{param}" }
				id => "message-Security_631_Security:02"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_631_Security:02"
					"[rsa][message][id1]" => "Security_631_Security:02"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_631_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_631_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_631_Security"
					"[rsa][message][id1]" => "Security_631_Security"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId119
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Member Name: <c_username> Member ID: <c_sid> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId119" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Member Name: %{c_username} Member ID: %{c_sid} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{groupid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID %{sessionid} Privileges: %{privilege}" }
			id => "msgParserId119"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId120
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Member Name: <c_username> Member ID: <c_sid> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <username> Caller Domain:<domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId120" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Member Name: %{c_username} Member ID: %{c_sid} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{groupid} Caller User Name: %{username} Caller Domain:%{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
			id => "msgParserId120"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId121
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID:<groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId121" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID:%{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId121"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_635_Security" {
		# MESSAGE Security_635_Security:03
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID:<groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID:%{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}Attributes: %{param}" }
				id => "message-Security_635_Security:03"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_635_Security:03"
					"[rsa][message][id1]" => "Security_635_Security:03"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_635_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group> New Domain: <remote_domain> New Account ID:<groupid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group} New Domain: %{remote_domain} New Account ID:%{groupid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
				id => "message-Security_635_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_635_Security"
					"[rsa][message][id1]" => "Security_635_Security"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_635_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID:<groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID:%{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_635_Security:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_635_Security:01"
					"[rsa][message][id1]" => "Security_635_Security:01"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId125
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Member Name: <c_username>Member ID: <c_sid>Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId125" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Member Name: %{c_username}Member ID: %{c_sid}Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId125"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId126
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>  Member Name: <c_username>Member ID: <c_sid>Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId126" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}  Member Name: %{c_username}Member ID: %{c_sid}Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId126"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId127
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId127" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId127"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"username" => "%{group}"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_639_Security" {
		# MESSAGE Security_639_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Changed Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}Changed Attributes: %{param}" }
				id => "message-Security_639_Security:02"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_639_Security:02"
					"[rsa][message][id1]" => "Security_639_Security:02"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_639_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_639_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_639_Security"
					"[rsa][message][id1]" => "Security_639_Security"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId130
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Type of change: <fld15>Object Type: <obj_type>Object Name: <obj_name>Object ID: <id1>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId130" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Type of change: %{fld15}Object Type: %{obj_type}Object Name: %{obj_name}Object ID: %{id1}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}" }
			id => "msgParserId130"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_641_Security" {
		# MESSAGE Security_641_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Changed Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}Changed Attributes: %{param}" }
				id => "message-Security_641_Security:02"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_641_Security:02"
					"[rsa][message][id1]" => "Security_641_Security:02"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_641_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_641_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_641_Security"
					"[rsa][message][id1]" => "Security_641_Security"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_642_Security" {
		# MESSAGE Security_642_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID: <fld39>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Changed Attributes: Sam Account Name: <user_fullname> Home Directory: <directory>User Workstations: <hostname> Password Last Set: { <space>-<space> Account | <<never> Account | <fld7> Account } Expires: { <space>-<space> Primary | <<never> Primary | <fld86> Primary } Group ID: <groupid> AllowedToDelegateTo: <fld88>Old UAC Value: <change_old>New UAC Value: <change_new>User Account Control: <info>User Parameters: <param>Sid History: <fld50>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+Target[\s]+Account[\s]+Name:[\s]+(?<c_username>[^T]*)Target[\s]+Domain:[\s]+(?<c_domain>[^T]*)Target[\s]+Account[\s]+ID:[\s]+(?<fld39>[^C]*)Caller[\s]+User[\s]+Name:[\s]+(?<username>[^C]*)Caller[\s]+Domain:[\s]+(?<domain>[^C]*)Caller[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^P]*)Privileges:[\s]+(?<privilege>[^C]*)Changed[\s]+Attributes:[\s]+Sam[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Home[\s]+Directory:[\s]+(?<directory>[^U]*)User[\s]+Workstations:[\s]+(?<hostname>[^\s]*)[\s]+Password[\s]+Last[\s]+Set:[\s]+([\s]*(?<space>[^\-]*)\-(?<space>[^\s]*)[\s]+Account[\s]+|[\s]*<never>[\s]+Account[\s]+|[\s]*(?<fld7>[^\s]*)[\s]+Account[\s]+)[\s]+Expires:[\s]+([\s]*(?<space>[^\-]*)\-(?<space>[^\s]*)[\s]+Primary[\s]+|[\s]*<never>[\s]+Primary[\s]+|[\s]*(?<fld86>[^\s]*)[\s]+Primary[\s]+)[\s]+Group[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+AllowedToDelegateTo:[\s]+(?<fld88>[^O]*)Old[\s]+UAC[\s]+Value:[\s]+(?<change_old>[^N]*)New[\s]+UAC[\s]+Value:[\s]+(?<change_new>[^U]*)User[\s]+Account[\s]+Control:[\s]+(?<info>[^U]*)User[\s]+Parameters:[\s]+(?<param>[^S]*)Sid[\s]+History:[\s]+(?<fld50>.*)$" }
				id => "message-Security_642_Security:02"
				add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_642_Security:02"
					"[rsa][message][id1]" => "Security_642_Security:02"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_642_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID: <fld39>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID: %{fld39}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_642_Security"
				add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_642_Security"
					"[rsa][message][id1]" => "Security_642_Security"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_643_Security" {
		# MESSAGE Security_643_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Domain Name: <c_domain>Domain ID: <domain_id>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Changed Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Domain Name: %{c_domain}Domain ID: %{domain_id}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}Changed Attributes: %{param}" }
				id => "message-Security_643_Security:02"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_643_Security:02"
					"[rsa][message][id1]" => "Security_643_Security:02"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_643_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Domain: <c_domain> Domain ID: <domain_id> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Domain: %{c_domain} Domain ID: %{domain_id} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
				id => "message-Security_643_Security"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_643_Security"
					"[rsa][message][id1]" => "Security_643_Security"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId135
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<fld25>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <username>Target Account ID: <sid>Caller Machine Name: <hostname>Caller User Name: <event_user>Caller Domain: <fld40>Caller Logon ID: <fld41>
	else if [logstash][msgparser][id] == "msgParserId135" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{fld25},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{username}Target Account ID: %{sid}Caller Machine Name: %{hostname}Caller User Name: %{event_user}Caller Domain: %{fld40}Caller Logon ID: %{fld41}" }
			id => "msgParserId135"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Lockout"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_645_Security" {
		# MESSAGE Security_645_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <c_username>New Domain: <c_domain>New Account ID: <c_sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges <privilege>Attributes: Sam Account Name: <user_fullname> <info> Home Directory: <directory> Home Drive: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{c_username}New Domain: %{c_domain}New Account ID: %{c_sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges %{privilege}Attributes: Sam Account Name: %{user_fullname} %{info} Home Directory: %{directory} Home Drive: %{param}" }
				id => "message-Security_645_Security:02"
				add_field => {
					"[event][id]" => "Security_645_Security:02"
					"[rsa][message][id1]" => "Security_645_Security:02"
					"[event][categoryid]" => "1503020200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_645_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <c_username>New Domain: <c_domain>New Account ID: <c_sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{c_username}New Domain: %{c_domain}New Account ID: %{c_sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges %{privilege}" }
				id => "message-Security_645_Security"
				add_field => {
					"[event][id]" => "Security_645_Security"
					"[rsa][message][id1]" => "Security_645_Security"
					"[event][categoryid]" => "1503020200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_646_Security" {
		# MESSAGE Security_646_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID: <fld39>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Changed Attributes: Sam Account Name: <user_fullname>Home Directory: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID: %{fld39}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}Changed Attributes: Sam Account Name: %{user_fullname}Home Directory: %{param}" }
				id => "message-Security_646_Security:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_646_Security:02"
					"[rsa][message][id1]" => "Security_646_Security:02"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_646_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID: <fld39>Caller User Name: <username>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID: %{fld39}Caller User Name: %{username}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_646_Security"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_646_Security"
					"[rsa][message][id1]" => "Security_646_Security"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_647_Security" {
		# MESSAGE Security_647_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID: <c_sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID: %{c_sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_647_Security:02"
				add_field => {
					"[event][id]" => "Security_647_Security:02"
					"[rsa][message][id1]" => "Security_647_Security:02"
					"[event][categoryid]" => "1503020200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_647_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID: <c_sid>Caller User Name: <username>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID: %{c_sid}Caller User Name: %{username}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_647_Security"
				add_field => {
					"[event][id]" => "Security_647_Security"
					"[rsa][message][id1]" => "Security_647_Security"
					"[event][categoryid]" => "1503020200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_648_Security" {
		# MESSAGE Security_648_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group> Target Domain:<remote_domain> Target Account ID:<groupid> Caller User Name:<username> Caller Domain:<domain> Caller Logon ID:<sessionid> Privileges: <privilege> Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group} Target Domain:%{remote_domain} Target Account ID:%{groupid} Caller User Name:%{username} Caller Domain:%{domain} Caller Logon ID:%{sessionid} Privileges: %{privilege} Attributes: %{param}" }
				id => "message-Security_648_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_648_Security"
					"[rsa][message][id1]" => "Security_648_Security"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_648_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group> Target Domain:<remote_domain> Target Account ID:<groupid> Caller User Name:<username> Caller Domain:<domain> Caller Logon ID:<sessionid> Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group} Target Domain:%{remote_domain} Target Account ID:%{groupid} Caller User Name:%{username} Caller Domain:%{domain} Caller Logon ID:%{sessionid} Privileges: %{privilege}" }
				id => "message-Security_648_Security:02"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_648_Security:02"
					"[rsa][message][id1]" => "Security_648_Security:02"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId144
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group> Target Domain:<remote_domain> Target Account ID:<groupid> Caller User Name:<username> Caller Domain:<domain> Caller Logon ID:<sessionid> Privileges: <privilege> { Changed Attributes: <param> | <param>}
	else if [logstash][msgparser][id] == "msgParserId144" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<day>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(?<event_description>[^\s]*)[\s]+Target[\s]+Account[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Target[\s]+Domain:(?<remote_domain>[^\s]*)[\s]+Target[\s]+Account[\s]+ID:(?<groupid>[^\s]*)[\s]+Caller[\s]+User[\s]+Name:(?<username>[^\s]*)[\s]+Caller[\s]+Domain:(?<domain>[^\s]*)[\s]+Caller[\s]+Logon[\s]+ID:(?<sessionid>[^\s]*)[\s]+Privileges:[\s]+(?<privilege>[^\s]*)[\s]+([\s]*Changed[\s]+Attributes:[\s]+(?<param>[^\s]*)[\s]+|[\s]*(?<param>.*))$" }
			id => "msgParserId144"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId145
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Member Name: <c_username> Member ID:<fld39> Target Account Name:<group> Target Domain:<remote_domain> Target Account ID:<fld40> Caller User Name:<username> Caller Domain:<domain> Caller Logon ID:<sessionid> Privileges:<privilege>
	else if [logstash][msgparser][id] == "msgParserId145" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Member Name: %{c_username} Member ID:%{fld39} Target Account Name:%{group} Target Domain:%{remote_domain} Target Account ID:%{fld40} Caller User Name:%{username} Caller Domain:%{domain} Caller Logon ID:%{sessionid} Privileges:%{privilege}" }
			id => "msgParserId145"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId146
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name:<group> Target Domain:<remote_domain> Target Account ID:<fld40> Caller User Name:<username> Caller Domain:<domain> Caller Logon ID:<sessionid> Privileges:<privilege>
	else if [logstash][msgparser][id] == "msgParserId146" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name:%{group} Target Domain:%{remote_domain} Target Account ID:%{fld40} Caller User Name:%{username} Caller Domain:%{domain} Caller Logon ID:%{sessionid} Privileges:%{privilege}" }
			id => "msgParserId146"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_653_Security" {
		# MESSAGE Security_653_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege> Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege} Attributes: %{param}" }
				id => "message-Security_653_Security:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_653_Security:01"
					"[rsa][message][id1]" => "Security_653_Security:01"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_653_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_653_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_653_Security"
					"[rsa][message][id1]" => "Security_653_Security"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_654_Security" {
		# MESSAGE Security_654_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege> Changed Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{groupid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege} Changed Attributes: %{param}" }
				id => "message-Security_654_Security:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_654_Security:01"
					"[rsa][message][id1]" => "Security_654_Security:01"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_654_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{groupid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
				id => "message-Security_654_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_654_Security"
					"[rsa][message][id1]" => "Security_654_Security"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId150
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Member Name: <c_username> Member ID: <c_sid> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId150" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Member Name: %{c_username} Member ID: %{c_sid} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{groupid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
			id => "msgParserId150"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId151
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId151" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{groupid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
			id => "msgParserId151"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_658_Security" {
		# MESSAGE Security_658_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}Attributes: %{param}" }
				id => "message-Security_658_Security:02"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_658_Security:02"
					"[rsa][message][id1]" => "Security_658_Security:02"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_658_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_658_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_658_Security"
					"[rsa][message][id1]" => "Security_658_Security"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_659_Security" {
		# MESSAGE Security_659_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>Changed Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}Changed Attributes: %{param}" }
				id => "message-Security_659_Security:02"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_659_Security:02"
					"[rsa][message][id1]" => "Security_659_Security:02"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_659_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_659_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_659_Security"
					"[rsa][message][id1]" => "Security_659_Security"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId154
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId154" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId154"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_663_Security" {
		# MESSAGE Security_663_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege> Attributes:<param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege} Attributes:%{param}" }
				id => "message-Security_663_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_663_Security"
					"[rsa][message][id1]" => "Security_663_Security"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_663_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_663_Security:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_663_Security:01"
					"[rsa][message][id1]" => "Security_663_Security:01"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_664_Security" {
		# MESSAGE Security_664_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <c_sid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege> Changed Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{c_sid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege} Changed Attributes: %{param}" }
				id => "message-Security_664_Security:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_664_Security:01"
					"[rsa][message][id1]" => "Security_664_Security:01"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_664_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <c_sid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{c_sid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
				id => "message-Security_664_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_664_Security"
					"[rsa][message][id1]" => "Security_664_Security"
					"[event][categoryid]" => "1402010300"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId158
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name:<group> Target Domain:<remote_domain> Target Account ID:<groupid> Caller User Name:<username> Caller Domain:<domain> Caller Logon ID:<sessionid> Privileges:<privilege>
	else if [logstash][msgparser][id] == "msgParserId158" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name:%{group} Target Domain:%{remote_domain} Target Account ID:%{groupid} Caller User Name:%{username} Caller Domain:%{domain} Caller Logon ID:%{sessionid} Privileges:%{privilege}" }
			id => "msgParserId158"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId159
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>Target Account Name: <group>Target Domain: <remote_domain>Target Account ID: <c_sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId159" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}Target Account Name: %{group}Target Domain: %{remote_domain}Target Account ID: %{c_sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId159"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId160
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>  Target Account Name: <c_username> Target Domain: <c_domain> Target Account ID: <c_sid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId160" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}  Target Account Name: %{c_username} Target Domain: %{c_domain} Target Account ID: %{c_sid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid}" }
			id => "msgParserId160"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_672_Security" {
		# MESSAGE Security_672_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Supplied Realm Name: <domain>User ID: <sid>Service Name: <service>Service ID: <fld60> Ticket Options: <fld26>  Result Code: -  Ticket Encryption Type: <encryption_type>Pre-Authentication Type: <fld92>Client Address: <saddr>Certificate Issuer Name: <cert_issuer> Certificate Serial Number: <fld93> Certificate Thumbprint: <fld94>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Supplied Realm Name: %{domain}User ID: %{sid}Service Name: %{service}Service ID: %{fld60} Ticket Options: %{fld26}  Result Code: -  Ticket Encryption Type: %{encryption_type}Pre-Authentication Type: %{fld92}Client Address: %{saddr}Certificate Issuer Name: %{cert_issuer} Certificate Serial Number: %{fld93} Certificate Thumbprint: %{fld94}" }
				id => "message-Security_672_Security:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"resultcode" => " - "
					"[event][id]" => "Security_672_Security:02"
					"[rsa][message][id1]" => "Security_672_Security:02"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_672_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Supplied Realm Name: <domain>User ID: <sid>Service Name: <service>Service ID: <fld60>  Ticket Options: <fld26>  Result Code: <resultcode>  Ticket Encryption Type: <encryption_type>Pre-Authentication Type: <fld92>Client Address: <saddr>Certificate Issuer Name: <cert_issuer> Certificate Serial Number: <fld93> Certificate Thumbprint: <fld94>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Supplied Realm Name: %{domain}User ID: %{sid}Service Name: %{service}Service ID: %{fld60}  Ticket Options: %{fld26}  Result Code: %{resultcode}  Ticket Encryption Type: %{encryption_type}Pre-Authentication Type: %{fld92}Client Address: %{saddr}Certificate Issuer Name: %{cert_issuer} Certificate Serial Number: %{fld93} Certificate Thumbprint: %{fld94}" }
				id => "message-Security_672_Security:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_672_Security:01"
					"[rsa][message][id1]" => "Security_672_Security:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_672_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Supplied Realm Name: <domain>User ID: <sid>Service Name: <service>Service ID: <fld60>Ticket Options: <fld26>Ticket Encryption Type: <encryption_type>Pre-Authentication Type: <fld92>Client Address: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Supplied Realm Name: %{domain}User ID: %{sid}Service Name: %{service}Service ID: %{fld60}Ticket Options: %{fld26}Ticket Encryption Type: %{encryption_type}Pre-Authentication Type: %{fld92}Client Address: %{saddr}" }
				id => "message-Security_672_Security"
				add_field => {
					"[event][id]" => "Security_672_Security"
					"[rsa][message][id1]" => "Security_672_Security"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_673_Security" {
		# MESSAGE Security_673_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>User Domain: <domain>Service Name: <service>Service ID: <fld60>Ticket Options: <fld26>Ticket Encryption Type: <encryption_type>Client Address: <saddr> Failure Code: <resultcode> Logon GUID: <sessionid> Transited Services: <fld43>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}User Domain: %{domain}Service Name: %{service}Service ID: %{fld60}Ticket Options: %{fld26}Ticket Encryption Type: %{encryption_type}Client Address: %{saddr} Failure Code: %{resultcode} Logon GUID: %{sessionid} Transited Services: %{fld43}" }
				id => "message-Security_673_Security:02"
				add_field => {
					"[event][id]" => "Security_673_Security:02"
					"[rsa][message][id1]" => "Security_673_Security:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_673_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>User Domain: <domain>Service Name: <service>Service ID: <fld60>Ticket Options: <fld26>Ticket Encryption Type: <encryption_type>Client Address: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}User Domain: %{domain}Service Name: %{service}Service ID: %{fld60}Ticket Options: %{fld26}Ticket Encryption Type: %{encryption_type}Client Address: %{saddr}" }
				id => "message-Security_673_Security"
				add_field => {
					"[event][id]" => "Security_673_Security"
					"[rsa][message][id1]" => "Security_673_Security"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId165
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>User Domain: <domain>Service Name: <service>Service ID: <fld60>Ticket Options: <fld26>Ticket Encryption Type: <encryption_type>Client Address: <saddr>
	else if [logstash][msgparser][id] == "msgParserId165" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}User Domain: %{domain}Service Name: %{service}Service ID: %{fld60}Ticket Options: %{fld26}Ticket Encryption Type: %{encryption_type}Client Address: %{saddr}" }
			id => "msgParserId165"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId166
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>User ID: <sid>Service Name: <service>Pre-Authentication Type: <fld92> Failure Code: <resultcode> Client Address: <saddr>
	else if [logstash][msgparser][id] == "msgParserId166" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}User ID: %{sid}Service Name: %{service}Pre-Authentication Type: %{fld92} Failure Code: %{resultcode} Client Address: %{saddr}" }
			id => "msgParserId166"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId167
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Supplied Realm Name: <domain>Service Name: <service>Ticket Options: <fld26> Failure Code: <resultcode> Client Address: <saddr>
	else if [logstash][msgparser][id] == "msgParserId167" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Supplied Realm Name: %{domain}Service Name: %{service}Ticket Options: %{fld26} Failure Code: %{resultcode} Client Address: %{saddr}" }
			id => "msgParserId167"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId168
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>User Domain: <domain>Service Name: <service>Ticket Options: <fld26>Failure Code: <resultcode> Client Address: <saddr>
	else if [logstash][msgparser][id] == "msgParserId168" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}User Domain: %{domain}Service Name: %{service}Ticket Options: %{fld26}Failure Code: %{resultcode} Client Address: %{saddr}" }
			id => "msgParserId168"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId169
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Mapping Attempted By: <fld22>Client Name: <fld23>Mapped Name: <fld24>
	else if [logstash][msgparser][id] == "msgParserId169" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Mapping Attempted By: %{fld22}Client Name: %{fld23}Mapped Name: %{fld24}" }
			id => "msgParserId169"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId170
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,The name:<c_username>could not be mapped for logon by: <fld22>
	else if [logstash][msgparser][id] == "msgParserId170" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},The name:%{c_username}could not be mapped for logon by: %{fld22}" }
			id => "msgParserId170"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_680_Security" {
		# MESSAGE Security_680_Security:05
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,Success Audit,<event_computer>,<category>,<fld2>,<event_description> Logon attempt by: <authmethod> Logon account: <username> Source Workstation: <shost>Error Code: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},Success Audit,%{event_computer},%{category},%{fld2},%{event_description} Logon attempt by: %{authmethod} Logon account: %{username} Source Workstation: %{shost}Error Code: %{resultcode}" }
				id => "message-Security_680_Security:05"
				add_field => {
				"event_type" => "Success Audit"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_680_Security:05"
					"[rsa][message][id1]" => "Security_680_Security:05"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_680_Security:04
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,Success Audit,<event_computer>,<category>,<fld2>,<event_description> Account Used for Logon by: <authmethod> Account Name: <username> Workstation: <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},Success Audit,%{event_computer},%{category},%{fld2},%{event_description} Account Used for Logon by: %{authmethod} Account Name: %{username} Workstation: %{shost}" }
				id => "message-Security_680_Security:04"
				add_field => {
				"event_type" => "Success Audit"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_680_Security:04"
					"[rsa][message][id1]" => "Security_680_Security:04"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_680_Security:03
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,Failure Audit,<event_computer>,<category>,<fld2>,<event_description> Logon attempt by: <authmethod> Logon account: <username> Source Workstation: <shost>Error Code: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},Failure Audit,%{event_computer},%{category},%{fld2},%{event_description} Logon attempt by: %{authmethod} Logon account: %{username} Source Workstation: %{shost}Error Code: %{resultcode}" }
				id => "message-Security_680_Security:03"
				add_field => {
				"event_type" => "Failure Audit"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_680_Security:03"
					"[rsa][message][id1]" => "Security_680_Security:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_680_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,Failure Audit,<event_computer>,<category>,<fld2>,<event_description> Account Used for Logon by: <authmethod> Account Name: <username> Workstation: <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},Failure Audit,%{event_computer},%{category},%{fld2},%{event_description} Account Used for Logon by: %{authmethod} Account Name: %{username} Workstation: %{shost}" }
				id => "message-Security_680_Security:01"
				add_field => {
				"event_type" => "Failure Audit"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_680_Security:01"
					"[rsa][message][id1]" => "Security_680_Security:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_680_Security:02
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Logon attempt by: <authmethod> Logon account: <username> Source Workstation: <shost>Error Code: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Logon attempt by: %{authmethod} Logon account: %{username} Source Workstation: %{shost}Error Code: %{resultcode}" }
				id => "message-Security_680_Security:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_680_Security:02"
					"[rsa][message][id1]" => "Security_680_Security:02"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_680_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Account Used for Logon by: <authmethod> Account Name: <username> Workstation: <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Account Used for Logon by: %{authmethod} Account Name: %{username} Workstation: %{shost}" }
				id => "message-Security_680_Security"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_680_Security"
					"[rsa][message][id1]" => "Security_680_Security"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId177
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,The logon to account:<username>by: <authmethod>from workstation: <shost>failed. The error code was: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId177" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},The logon to account:%{username}by: %{authmethod}from workstation: %{shost}failed. The error code was: %{resultcode}" }
			id => "msgParserId177"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId178
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Domain: <domain>Logon ID: <sessionid>Session Name: <sessionid1>Client Name: <shost>Client Address: <saddr>
	else if [logstash][msgparser][id] == "msgParserId178" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}Session Name: %{sessionid1}Client Name: %{shost}Client Address: %{saddr}" }
			id => "msgParserId178"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId179
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User Name: <username>Domain: <domain>Logon ID: <sessionid>Session Name: <sessionid1>Client Name: <shost>Client Address: <saddr>
	else if [logstash][msgparser][id] == "msgParserId179" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}Session Name: %{sessionid1}Client Name: %{shost}Client Address: %{saddr}" }
			id => "msgParserId179"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId140
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target Account Name: <c_username>Target Domain: <c_domain>Target Account ID: <c_sid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId140" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target Account Name: %{c_username}Target Domain: %{c_domain}Target Account ID: %{c_sid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
			id => "msgParserId140"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId180
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Old Account Name: <change_old> New Account Name: <change_new> Target Domain: <c_domain> Target Account ID: <c_sid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId180" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Old Account Name: %{change_old} New Account Name: %{change_new} Target Domain: %{c_domain} Target Account ID: %{c_sid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
			id => "msgParserId180"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId181
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Member Name: <c_username> Member ID: <c_sid> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId181" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Member Name: %{c_username} Member ID: %{c_sid} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{groupid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
			id => "msgParserId181"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId182
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Member Name: <c_username> Member ID: <c_sid> Target Account Name: <group> Target Domain: <remote_domain> Target Account ID: <groupid> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId182" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Member Name: %{c_username} Member ID: %{c_sid} Target Account Name: %{group} Target Domain: %{remote_domain} Target Account ID: %{groupid} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid} Privileges: %{privilege}" }
			id => "msgParserId182"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId183
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Target User Name: <c_username> Target User Domain: <c_domain> By user: <space> Caller User Name: <username> Caller Domain: <domain> Caller Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId183" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Target User Name: %{c_username} Target User Domain: %{c_domain} By user: %{space} Caller User Name: %{username} Caller Domain: %{domain} Caller Logon ID: %{sessionid}" }
			id => "msgParserId183"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_687_Security" {
		# MESSAGE Security_687_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege> Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege} Attributes: %{param}" }
				id => "message-Security_687_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_687_Security"
					"[rsa][message][id1]" => "Security_687_Security"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_687_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_687_Security:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_687_Security:01"
					"[rsa][message][id1]" => "Security_687_Security:01"
					"[event][categoryid]" => "1402010200"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_688_Security" {
		# MESSAGE Security_688_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege> Changed Attributes: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege} Changed Attributes: %{param}" }
				id => "message-Security_688_Security"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_688_Security"
					"[rsa][message][id1]" => "Security_688_Security"
					"[event][categoryid]" => "1402010301"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_688_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege}" }
				id => "message-Security_688_Security:01"
				add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
					"[event][id]" => "Security_688_Security:01"
					"[rsa][message][id1]" => "Security_688_Security:01"
					"[event][categoryid]" => "1402010301"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId147
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege> Attributes: <param>
	else if [logstash][msgparser][id] == "msgParserId147" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege} Attributes: %{param}" }
			id => "msgParserId147"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId185
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> New Account Name: <group>New Domain: <remote_domain>New Account ID: <groupid>Caller User Name: <username>Caller Domain: <domain>Caller Logon ID: <sessionid>Privileges: <privilege> Changed Attributes: <param>
	else if [logstash][msgparser][id] == "msgParserId185" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} New Account Name: %{group}New Domain: %{remote_domain}New Account ID: %{groupid}Caller User Name: %{username}Caller Domain: %{domain}Caller Logon ID: %{sessionid}Privileges: %{privilege} Changed Attributes: %{param}" }
			id => "msgParserId185"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId186
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Caller Username: <username> Caller Domain: <domain> Caller Logon ID: <space> (<sessionid>) <space> Caller Workstation: <hostname> Provided User Name (unauthenticated): <c_username> Status Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId186" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Caller Username: %{username} Caller Domain: %{domain} Caller Logon ID: %{space} (%{sessionid}) %{space} Caller Workstation: %{hostname} Provided User Name (unauthenticated): %{c_username} Status Code: %{resultcode}" }
			id => "msgParserId186"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId187
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId187" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId187"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId188
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId188" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId188"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_808_Security" {
		# MESSAGE Security_808_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <sessionid> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid1> Source Name: <application> Process Id: <process_id> Event Source Id: <id1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Primary User Name: %{username} Primary Domain: %{domain} Primary Logon ID: %{sessionid} Client User Name: %{c_username} Client Domain: %{c_domain} Client Logon ID: %{sessionid1} Source Name: %{application} Process Id: %{process_id} Event Source Id: %{id1}" }
				id => "message-Security_808_Security"
				add_field => {
					"[event][id]" => "Security_808_Security"
					"[rsa][message][id1]" => "Security_808_Security"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_808_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-Security_808_Security:01"
				add_field => {
					"[event][id]" => "Security_808_Security:01"
					"[rsa][message][id1]" => "Security_808_Security:01"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_809_Security" {
		# MESSAGE Security_809_Security
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Primary User Name: <username> Primary Domain: <domain> Primary Logon ID: <sessionid> Client User Name: <c_username> Client Domain: <c_domain> Client Logon ID: <sessionid1> Source Name: <application> Process Id: <process_id> Event Source Id: <id1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Primary User Name: %{username} Primary Domain: %{domain} Primary Logon ID: %{sessionid} Client User Name: %{c_username} Client Domain: %{c_domain} Client Logon ID: %{sessionid1} Source Name: %{application} Process Id: %{process_id} Event Source Id: %{id1}" }
				id => "message-Security_809_Security"
				add_field => {
					"[event][id]" => "Security_809_Security"
					"[rsa][message][id1]" => "Security_809_Security"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_809_Security:01
		# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-Security_809_Security:01"
				add_field => {
					"[event][id]" => "Security_809_Security:01"
					"[rsa][message][id1]" => "Security_809_Security:01"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId190
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Group Policy applied: <policyname> Profile used: <profile> Interface: <info>
	else if [logstash][msgparser][id] == "msgParserId190" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Group Policy applied: %{policyname} Profile used: %{profile} Interface: %{info}" }
			id => "msgParserId190"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId191
	# line in RSA: <event_log>,<fld1>,<fld4> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy origin: <policyname> Profile used: <profile> Name: <fld15> Path: <directory> State: <disposition> Scope: <fld16>
	else if [logstash][msgparser][id] == "msgParserId191" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{fld4} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy origin: %{policyname} Profile used: %{profile} Name: %{fld15} Path: %{directory} State: %{disposition} Scope: %{fld16}" }
			id => "msgParserId191"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId192
	# line in RSA: <event_log>,<fld1>,<fld4> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy origin: <policyname> Profile used: <profile> Interface: <fld14> Name: <fld15> Port number: <network_port> Protocol: <protocol> State: <disposition> Scope: <fld16>
	else if [logstash][msgparser][id] == "msgParserId192" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{fld4} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy origin: %{policyname} Profile used: %{profile} Interface: %{fld14} Name: %{fld15} Port number: %{network_port} Protocol: %{protocol} State: %{disposition} Scope: %{fld16}" }
			id => "msgParserId192"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId193
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy origin: <policyname> Profile changed: <profile> Change type: <fld13> New Settings: <change_new> Old Settings: <change_old>
	else if [logstash][msgparser][id] == "msgParserId193" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy origin: %{policyname} Profile changed: %{profile} Change type: %{fld13} New Settings: %{change_new} Old Settings: %{change_old}" }
			id => "msgParserId193"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId194
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy origin: <policyname> Profile changed: <profile> Interface: <fld14> Change type: <fld13> New Settings: <change_new> Old Settings: <change_old>
	else if [logstash][msgparser][id] == "msgParserId194" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy origin: %{policyname} Profile changed: %{profile} Interface: %{fld14} Change type: %{fld13} New Settings: %{change_new} Old Settings: %{change_old}" }
			id => "msgParserId194"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId195
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy origin: <policyname> Profile changed: <profile> Interface: <fld14> New Setting: Operation mode: <change_new> Old Setting: Operation mode: <change_old>
	else if [logstash][msgparser][id] == "msgParserId195" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy origin: %{policyname} Profile changed: %{profile} Interface: %{fld14} New Setting: Operation mode: %{change_new} Old Setting: Operation mode: %{change_old}" }
			id => "msgParserId195"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId196
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy origin: <policyname> Profile changed: <profile> New Settings: <change_new> Old Settings: <change_old>
	else if [logstash][msgparser][id] == "msgParserId196" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy origin: %{policyname} Profile changed: %{profile} New Settings: %{change_new} Old Settings: %{change_old}" }
			id => "msgParserId196"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId197
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy origin: <policyname> Profile changed: <profile> Interface: <fld14> New Setting: <change_new> Old Setting: <change_old>
	else if [logstash][msgparser][id] == "msgParserId197" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy origin: %{policyname} Profile changed: %{profile} Interface: %{fld14} New Setting: %{change_new} Old Setting: %{change_old}" }
			id => "msgParserId197"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId198
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Policy origin: <policyname> Profile changed: <profile> New Setting: <change_new> Old Setting: <change_old>
	else if [logstash][msgparser][id] == "msgParserId198" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Policy origin: %{policyname} Profile changed: %{profile} New Setting: %{change_new} Old Setting: %{change_old}" }
			id => "msgParserId198"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId199
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Active profile: <profile>
	else if [logstash][msgparser][id] == "msgParserId199" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Active profile: %{profile}" }
			id => "msgParserId199"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId200
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Name: <application> Path: <filename> Process identifier: <process_id> User account: <username> User domain: <domain> Service: <service> RPC server: <fld17> IP version: <version> IP protocol: <protocol> Port number: <network_port> Allowed: <fld18> User notified: <fld19>
	else if [logstash][msgparser][id] == "msgParserId200" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Name: %{application} Path: %{filename} Process identifier: %{process_id} User account: %{username} User domain: %{domain} Service: %{service} RPC server: %{fld17} IP version: %{version} IP protocol: %{protocol} Port number: %{network_port} Allowed: %{fld18} User notified: %{fld19}" }
			id => "msgParserId200"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId201
	# line in RSA: <event_log>,<fld1>,<day> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> User SID: <sid> User name: <username> Process ID: <fld84>  Shadow Set ID: <fld85> Shadow ID: <fld86> Provider ID: <fld87> Original Machine: <shost> Original Volume: <device> Shadow device name: <filename>
	else if [logstash][msgparser][id] == "msgParserId201" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{day} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} User SID: %{sid} User name: %{username} Process ID: %{fld84}  Shadow Set ID: %{fld85} Shadow ID: %{fld86} Provider ID: %{fld87} Original Machine: %{shost} Original Volume: %{device} Shadow device name: %{filename}" }
			id => "msgParserId201"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId202
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<space>The process <process> has initiated the <fld14> of computer <hostname> on behalf of user <username> for the following reason: <result> Reason Code: <resultcode> Shutdown Type: <fld13> Comment: <info>
	else if [logstash][msgparser][id] == "msgParserId202" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{space}The process %{process} has initiated the %{fld14} of computer %{hostname} on behalf of user %{username} for the following reason: %{result} Reason Code: %{resultcode} Shutdown Type: %{fld13} Comment: %{info}" }
			id => "msgParserId202"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "System_10_Print" {
		# MESSAGE System_10_Print
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>, <space> Document <doc_number>, <application>-<filename> owned by <username> was printed on <device> { via | through } port <portname> Size in <space> bytes: <bytes><fld32> { pages | Pages } printed: { <dclass_counter1> <event_description> | <dclass_counter1> }
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE System_10_Print:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>, <space> Document <doc_number>, <filename> owned by <username> was printed on <device> { via | through } port <portname> Size in <space> bytes: <bytes><fld32> { pages | Pages } printed: { <dclass_counter1> <event_description> | <dclass_counter1> }
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE System_10_Print:02
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-System_10_Print:02"
				add_field => {
					"[event][id]" => "System_10_Print:02"
					"[rsa][message][id1]" => "System_10_Print:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId205
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId205" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId205"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "System_1_IAS" {
		# MESSAGE System_1_IAS
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> Fully-Qualified-User-Name = <username> NAS-IP-Address = <daddr> NAS-Identifier = <fld9> Client-Friendly-Name = <c_username> Client-IP-Address = <saddr> NAS-Port-Type = <fld17> NAS-Port = <dport> Policy-Name = <policyname> Authentication-Type = <authmethod> EAP-Type = <fld18>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} Fully-Qualified-User-Name = %{username} NAS-IP-Address = %{daddr} NAS-Identifier = %{fld9} Client-Friendly-Name = %{c_username} Client-IP-Address = %{saddr} NAS-Port-Type = %{fld17} NAS-Port = %{dport} Policy-Name = %{policyname} Authentication-Type = %{authmethod} EAP-Type = %{fld18}" }
				id => "message-System_1_IAS"
				add_field => {
					"[event][id]" => "System_1_IAS"
					"[rsa][message][id1]" => "System_1_IAS"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE System_1_IAS:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-System_1_IAS:01"
				add_field => {
					"[event][id]" => "System_1_IAS:01"
					"[rsa][message][id1]" => "System_1_IAS:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "System_26_ApplicationPopup" {
		# MESSAGE System_26_ApplicationPopup
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld1>,Application popup: <application> { - | :} <fld15>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld1>[^,]*),Application[\s]+popup:[\s]+(?<application>[^\s]*)[\s]+([\s]*\-[\s]+|[\s]*:)[\s]+(?<fld15>.*)$" }
				id => "message-System_26_ApplicationPopup"
				add_field => {
					"[event][id]" => "System_26_ApplicationPopup"
					"[rsa][message][id1]" => "System_26_ApplicationPopup"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE System_26_ApplicationPopup:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-System_26_ApplicationPopup:01"
				add_field => {
					"[event][id]" => "System_26_ApplicationPopup:01"
					"[rsa][message][id1]" => "System_26_ApplicationPopup:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "System_2_IAS" {
		# MESSAGE System_2_IAS
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld1>,<event_description> Fully-Qualified-User-Name = <username> NAS-IP-Address = <daddr> NAS-Identifier = <fld9> Called-Station-Identifier = <fld19> Calling-Station-Identifier = <fld20> Client-Friendly-Name = <c_username> Client-IP-Address = <saddr> NAS-Port-Type = <fld17> NAS-Port = <dport> Policy-Name = <policyname> Authentication-Type = <authmethod> EAP-Type = <fld18> Reason-Code = <resultcode> Reason = <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld1},%{event_description} Fully-Qualified-User-Name = %{username} NAS-IP-Address = %{daddr} NAS-Identifier = %{fld9} Called-Station-Identifier = %{fld19} Calling-Station-Identifier = %{fld20} Client-Friendly-Name = %{c_username} Client-IP-Address = %{saddr} NAS-Port-Type = %{fld17} NAS-Port = %{dport} Policy-Name = %{policyname} Authentication-Type = %{authmethod} EAP-Type = %{fld18} Reason-Code = %{resultcode} Reason = %{result}" }
				id => "message-System_2_IAS"
				add_field => {
					"[event][id]" => "System_2_IAS"
					"[rsa][message][id1]" => "System_2_IAS"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE System_2_IAS:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-System_2_IAS:01"
				add_field => {
					"[event][id]" => "System_2_IAS:01"
					"[rsa][message][id1]" => "System_2_IAS:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId209
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,The <service> service terminated with {service-specific error | the following service-specific error:} {<result>.<fld50>|<result>.|<result>}
	else if [logstash][msgparser][id] == "msgParserId209" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),The[\s]+(?<service>[^\s]*)[\s]+service[\s]+terminated[\s]+with[\s]+(service\-specific[\s]+error[\s]+|[\s]*the[\s]+following[\s]+service\-specific[\s]+error:)[\s]+((?<result>[^\.]*)\.(?<fld50>.*)|(?<result>[^\.]*)\.|(?<result>.*))$" }
			id => "msgParserId209"
			add_field => {
				"disposition" => "service terminated"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId210
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,The <service> service entered the <disposition> state.
	else if [logstash][msgparser][id] == "msgParserId210" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},The %{service} service entered the %{disposition} state." }
			id => "msgParserId210"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId211
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,The start type of the <service> service was changed from <change_old> to <change_new>
	else if [logstash][msgparser][id] == "msgParserId211" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},The start type of the %{service} service was changed from %{change_old} to %{change_new}" }
			id => "msgParserId211"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "System_15300_Microsoft-Windows-HttpEvent" {
		# MESSAGE System_15300_Microsoft-Windows-HttpEvent
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,SSL Certificate Settings deleted for Port :{<saddr>:<network_port>.|<saddr>:<network_port>|<network_port>>.|<network_port>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),SSL[\s]+Certificate[\s]+Settings[\s]+deleted[\s]+for[\s]+Port[\s]+:((?<saddr>[^:]*):(?<network_port>[^\.]*)\.|(?<saddr>[^:]*):(?<network_port>.*)|(?<network_port>[^>]*)>\.|(?<network_port>.*))$" }
				id => "message-System_15300_Microsoft-Windows-HttpEvent"
				add_field => {
					"[event][id]" => "System_15300_Microsoft-Windows-HttpEvent"
					"[rsa][message][id1]" => "System_15300_Microsoft-Windows-HttpEvent"
					"[event][categoryid]" => "1502040000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE System_15300_Microsoft-Windows-HttpEvent:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,SSL Certificate Settings deleted for endpoint : <saddr>:<network_port> .
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},SSL Certificate Settings deleted for endpoint : %{saddr}:%{network_port} ." }
				id => "message-System_15300_Microsoft-Windows-HttpEvent:01"
				add_field => {
					"[event][id]" => "System_15300_Microsoft-Windows-HttpEvent:01"
					"[rsa][message][id1]" => "System_15300_Microsoft-Windows-HttpEvent:01"
					"[event][categoryid]" => "1502040000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "System_15301_Microsoft-Windows-HttpEvent" {
		# MESSAGE System_15301_Microsoft-Windows-HttpEvent
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,SSL Certificate Settings created by an admin process for Port :{<saddr>:<network_port>.|<saddr>:<network_port>|<network_port>>.|<network_port>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),SSL[\s]+Certificate[\s]+Settings[\s]+created[\s]+by[\s]+an[\s]+admin[\s]+process[\s]+for[\s]+Port[\s]+:((?<saddr>[^:]*):(?<network_port>[^\.]*)\.|(?<saddr>[^:]*):(?<network_port>.*)|(?<network_port>[^>]*)>\.|(?<network_port>.*))$" }
				id => "message-System_15301_Microsoft-Windows-HttpEvent"
				add_field => {
					"[event][id]" => "System_15301_Microsoft-Windows-HttpEvent"
					"[rsa][message][id1]" => "System_15301_Microsoft-Windows-HttpEvent"
					"[event][categoryid]" => "1502030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE System_15301_Microsoft-Windows-HttpEvent:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,SSL Certificate Settings created by an admin process for endpoint : <saddr>:<network_port> .
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},SSL Certificate Settings created by an admin process for endpoint : %{saddr}:%{network_port} ." }
				id => "message-System_15301_Microsoft-Windows-HttpEvent:01"
				add_field => {
					"[event][id]" => "System_15301_Microsoft-Windows-HttpEvent:01"
					"[rsa][message][id1]" => "System_15301_Microsoft-Windows-HttpEvent:01"
					"[event][categoryid]" => "1502030000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId216
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId216" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId216"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "System_19_Microsoft-Windows-WindowsUpdateClient" {
		# MESSAGE System_19_Microsoft-Windows-WindowsUpdateClient
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Installation Successful: Windows successfully installed the following update:<obj_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},Installation Successful: Windows successfully installed the following update:%{obj_name}" }
				id => "message-System_19_Microsoft-Windows-WindowsUpdateClient"
				add_field => {
				"obj_type" => "Update Patch"
					"[event][id]" => "System_19_Microsoft-Windows-WindowsUpdateClient"
					"[rsa][message][id1]" => "System_19_Microsoft-Windows-WindowsUpdateClient"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE System_19_Microsoft-Windows-WindowsUpdateClient:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
				id => "message-System_19_Microsoft-Windows-WindowsUpdateClient:01"
				add_field => {
					"[event][id]" => "System_19_Microsoft-Windows-WindowsUpdateClient:01"
					"[rsa][message][id1]" => "System_19_Microsoft-Windows-WindowsUpdateClient:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId218
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId218" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId218"
			add_field => {
				"ec_subject" => "Service"
				"ec_outcome" => "Error"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId219
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Service <service> started.
	else if [logstash][msgparser][id] == "msgParserId219" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},Service %{service} started." }
			id => "msgParserId219"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId220
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,A worker process with process id of <process_id> serving application pool <application> has requested a recycle because the worker process reached its allowed processing time limit.
	else if [logstash][msgparser][id] == "msgParserId220" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},A worker process with process id of %{process_id} serving application pool %{application} has requested a recycle because the worker process reached its allowed processing time limit." }
			id => "msgParserId220"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId221
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,CoID={{<fld3>} : The user <domain>\<fld5>  connected on port <fld4>  has been assigned address <saddr>
	else if [logstash][msgparser][id] == "msgParserId221" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),CoID=\{(?<fld3>[^\}]*)\}[\s]+:[\s]+The[\s]+user[\s]+(?<domain>[^\\]*)\\(?<fld5>[^\s]*)[\s]+connected[\s]+on[\s]+port[\s]+(?<fld4>[^\s]*)[\s]+has[\s]+been[\s]+assigned[\s]+address[\s]+(?<saddr>.*)$" }
			id => "msgParserId221"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId222
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId222" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId222"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Stop"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId223
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId223" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId223"
			add_field => {
				"ec_subject" => "Configuration"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId224
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId224" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId224"
			add_field => {
				"ec_subject" => "OS"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId225
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId225" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId225"
			add_field => {
				"ec_subject" => "OS"
				"ec_activity" => "Stop"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId226
	# line in RSA: <event_description>   Authentication Package Name: <authmethod>
	else if [logstash][msgparser][id] == "msgParserId226" {
		dissect {
			mapping => { "message" => "%{event_description}   Authentication Package Name: %{authmethod}" }
			id => "msgParserId226"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId227
	# line in RSA: <event_description>   Subject:  <space> Security ID: <sid> Account Name: <username>   Account Domain: <domain> Logon ID: <sessionid> Logon Process Name: <process>
	else if [logstash][msgparser][id] == "msgParserId227" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  %{space} Security ID: %{sid} Account Name: %{username}   Account Domain: %{domain} Logon ID: %{sessionid} Logon Process Name: %{process}" }
			id => "msgParserId227"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId228
	# line in RSA: <event_description>   Number of audit messages discarded: <dclass_counter1> <fld50>
	else if [logstash][msgparser][id] == "msgParserId228" {
		dissect {
			mapping => { "message" => "%{event_description}   Number of audit messages discarded: %{dclass_counter1} %{fld50}" }
			id => "msgParserId228"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId229
	# line in RSA: <event_description>   Notification Package Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId229" {
		dissect {
			mapping => { "message" => "%{event_description}   Notification Package Name: %{obj_name}" }
			id => "msgParserId229"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId230
	# line in RSA: <event_description> Subject: <fld4> Security ID:  <sid>  Account Name:  <username>  Account Domain:  <domain>  Logon ID:  <sessionid>  Process Information: <fld5> PID:   <process_id>  Name:   <process>  Invalid Use:  <fld1>  LPC Server Port Name: <fld2> <fld50>
	else if [logstash][msgparser][id] == "msgParserId230" {
		dissect {
			mapping => { "message" => "%{event_description} Subject: %{fld4} Security ID:  %{sid}  Account Name:  %{username}  Account Domain:  %{domain}  Logon ID:  %{sessionid}  Process Information: %{fld5} PID:   %{process_id}  Name:   %{process}  Invalid Use:  %{fld1}  LPC Server Port Name: %{fld2} %{fld50}" }
			id => "msgParserId230"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId231
	# line in RSA: <event_description>   Subject: <space> Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Process Information:  Process ID: <process_id>  Name: <process>  Previous Time:  <change_old> New Time:  <change_new> This event is generated <fld50>
	else if [logstash][msgparser][id] == "msgParserId231" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject: %{space} Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Process Information:  Process ID: %{process_id}  Name: %{process}  Previous Time:  %{change_old} New Time:  %{change_new} This event is generated %{fld50}" }
			id => "msgParserId231"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "Time"
				"ec_activity" => "Modify"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId232
	# line in RSA: <event_description>   Subject: <space> Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid> Alert Information: <fld4> Computer:  <hostname>  Event ID:  <fld1>  Number of Events: <dclass_counter1>  Duration:  <fld2>  This event is generated when <fld50>
	else if [logstash][msgparser][id] == "msgParserId232" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject: %{space} Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid} Alert Information: %{fld4} Computer:  %{hostname}  Event ID:  %{fld1}  Number of Events: %{dclass_counter1}  Duration:  %{fld2}  This event is generated when %{fld50}" }
			id => "msgParserId232"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId233
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId233" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId233"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId234
	# line in RSA: <event_description> Security Package Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId234" {
		dissect {
			mapping => { "message" => "%{event_description} Security Package Name: %{obj_name}" }
			id => "msgParserId234"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId235
	# line in RSA: <event_description>   Subject:<space>Security ID: <fld39> Account Name: <event_user>   Account Domain: <c_domain> Logon ID: <fld41> { Logon Information:<space>Logon Type: <logon_type> Restricted Admin Mode: <fld51> Virtual Account: <fld52> Elevated Token: <fld53> Impersonation Level:  <obj_name> New Logon:|Logon Type: <logon_type> Impersonation Level:  <obj_name> New Logon:| Logon Type: <logon_type> New Logon:}<space>Security ID: <sid> Account Name: <username> Account Domain: <domain> {Logon ID: <sessionid> Linked Logon ID: <fld54> Network Account Name: <fld55> Network Account Domain: <fld56> |Logon ID: <sessionid>} Logon GUID: <fld66> Process Information:<space>Process ID: <parent_pid> Process Name: <process_src> Network Information:<space>Workstation Name: <shost> Source Network Address: <saddr> Source Port: <sport> Detailed Authentication Information:<space>Logon Process: <process> Authentication Package: <authmethod> Transited Services: <fld43>  Package Name (NTLM only): <service>  Key Length: <info> This event is generated <fld50>
	else if [logstash][msgparser][id] == "msgParserId235" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<fld39>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<event_user>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<fld41>[^\s]*)[\s]+([\s]*Logon[\s]+Information:(?<space>[^L]*)Logon[\s]+Type:[\s]+(?<logon_type>[^\s]*)[\s]+Restricted[\s]+Admin[\s]+Mode:[\s]+(?<fld51>[^\s]*)[\s]+Virtual[\s]+Account:[\s]+(?<fld52>[^\s]*)[\s]+Elevated[\s]+Token:[\s]+(?<fld53>[^\s]*)[\s]+Impersonation[\s]+Level:[\s]+(?<obj_name>[^\s]*)[\s]+New[\s]+Logon:|Logon[\s]+Type:[\s]+(?<logon_type>[^\s]*)[\s]+Impersonation[\s]+Level:[\s]+(?<obj_name>[^\s]*)[\s]+New[\s]+Logon:|[\s]*Logon[\s]+Type:[\s]+(?<logon_type>[^\s]*)[\s]+New[\s]+Logon:)(?<space>[^S]*)Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+(Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Linked[\s]+Logon[\s]+ID:[\s]+(?<fld54>[^\s]*)[\s]+Network[\s]+Account[\s]+Name:[\s]+(?<fld55>[^\s]*)[\s]+Network[\s]+Account[\s]+Domain:[\s]+(?<fld56>[^\s]*)[\s]+|Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*))[\s]+Logon[\s]+GUID:[\s]+(?<fld66>[^\s]*)[\s]+Process[\s]+Information:(?<space>[^P]*)Process[\s]+ID:[\s]+(?<parent_pid>[^\s]*)[\s]+Process[\s]+Name:[\s]+(?<process_src>[^\s]*)[\s]+Network[\s]+Information:(?<space>[^W]*)Workstation[\s]+Name:[\s]+(?<shost>[^\s]*)[\s]+Source[\s]+Network[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+Source[\s]+Port:[\s]+(?<sport>[^\s]*)[\s]+Detailed[\s]+Authentication[\s]+Information:(?<space>[^L]*)Logon[\s]+Process:[\s]+(?<process>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Transited[\s]+Services:[\s]+(?<fld43>[^\s]*)[\s]+Package[\s]+Name[\s]+\(NTLM[\s]+only\):[\s]+(?<service>[^\s]*)[\s]+Key[\s]+Length:[\s]+(?<info>[^\s]*)[\s]+This[\s]+event[\s]+is[\s]+generated[\s]+(?<fld50>.*)$" }
			id => "msgParserId235"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"obj_type" => "Impersonation Level"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId236
	# line in RSA: <event_description>   Subject: <space> Security ID: <fld39> Account Name: <event_user>   Account Domain: <c_domain> Logon ID: <fld41> Logon Type: <logon_type> Account For Which Logon Failed: <space> Security ID: <sid> Account Name: <username> Account Domain: <domain> Failure Information: <space> Failure Reason: <result> Status: <resultcode> Sub Status: <context> Process Information: <space> Caller Process ID: <parent_pid> Caller Process Name: <process_src> Network Information: <space> Workstation Name: <shost> Source Network Address: <saddr> Source Port: <sport> Detailed Authentication Information: <space> Logon Process: <process>   Authentication Package: <authmethod>   Transited Services: <fld43>  Package Name (NTLM only): <fld44>  Key Length: <info> {This event is generated <fld50>|<fld50>}
	else if [logstash][msgparser][id] == "msgParserId236" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<fld39>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<event_user>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<fld41>[^\s]*)[\s]+Logon[\s]+Type:[\s]+(?<logon_type>[^\s]*)[\s]+Account[\s]+For[\s]+Which[\s]+Logon[\s]+Failed:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Failure[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Failure[\s]+Reason:[\s]+(?<result>[^\s]*)[\s]+Status:[\s]+(?<resultcode>[^\s]*)[\s]+Sub[\s]+Status:[\s]+(?<context>[^\s]*)[\s]+Process[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Caller[\s]+Process[\s]+ID:[\s]+(?<parent_pid>[^\s]*)[\s]+Caller[\s]+Process[\s]+Name:[\s]+(?<process_src>[^\s]*)[\s]+Network[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Workstation[\s]+Name:[\s]+(?<shost>[^\s]*)[\s]+Source[\s]+Network[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+Source[\s]+Port:[\s]+(?<sport>[^\s]*)[\s]+Detailed[\s]+Authentication[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Logon[\s]+Process:[\s]+(?<process>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Transited[\s]+Services:[\s]+(?<fld43>[^\s]*)[\s]+Package[\s]+Name[\s]+\(NTLM[\s]+only\):[\s]+(?<fld44>[^\s]*)[\s]+Key[\s]+Length:[\s]+(?<info>[^\s]*)[\s]+(This[\s]+event[\s]+is[\s]+generated[\s]+(?<fld50>.*)|(?<fld50>.*))$" }
			id => "msgParserId236"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId237
	# line in RSA: <event_description>   Subject: <space> Security ID: <fld39> Account Name: <event_user>   Account Domain: <c_domain> Logon ID: <fld41> Logon Type: <logon_type> New Logon: <space> Security ID: <sid> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid> Event in sequence: <fld45> Group Membership:<fld46>
	else if [logstash][msgparser][id] == "msgParserId237" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject: %{space} Security ID: %{fld39} Account Name: %{event_user}   Account Domain: %{c_domain} Logon ID: %{fld41} Logon Type: %{logon_type} New Logon: %{space} Security ID: %{sid} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid} Event in sequence: %{fld45} Group Membership:%{fld46}" }
			id => "msgParserId237"
			add_field => {
				"ec_subject" => "Group"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId238
	# line in RSA: <event_description>   Subject: <space> Security ID: <sid> Account Name: <username>   Account Domain: <domain> Logon ID: <sessionid> Logon Type: <logon_type> This event is generated <fld50>
	else if [logstash][msgparser][id] == "msgParserId238" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject: %{space} Security ID: %{sid} Account Name: %{username}   Account Domain: %{domain} Logon ID: %{sessionid} Logon Type: %{logon_type} This event is generated %{fld50}" }
			id => "msgParserId238"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId239
	# line in RSA: <event_description> Subject: <space> Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid> {This event is generated <fld50>|<fld50>}
	else if [logstash][msgparser][id] == "msgParserId239" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+(This[\s]+event[\s]+is[\s]+generated[\s]+(?<fld50>.*)|(?<fld50>.*))$" }
			id => "msgParserId239"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId240
	# line in RSA: <event_description>   Subject: <space> Security ID:  <sid> Account Name:  <username>   Account Domain:  <domain> Logon ID:  <sessionid> Logon GUID:  <fld66> Account Whose Credentials Were Used: <space> Account Name:  <c_username>  Account Domain:  <c_domain>  Logon GUID:  <fld32>  Target Server: <space> Target Server Name: <dhost>  Additional Information: <fld33> Process Information: <space> Process ID:  <process_id>  Process Name:  <process>  Network Information: <space> Network Address: <saddr>  Port: <sport> {This event is generated <fld50>|<fld50>}
	else if [logstash][msgparser][id] == "msgParserId240" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Logon[\s]+GUID:[\s]+(?<fld66>[^\s]*)[\s]+Account[\s]+Whose[\s]+Credentials[\s]+Were[\s]+Used:[\s]+(?<space>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Logon[\s]+GUID:[\s]+(?<fld32>[^\s]*)[\s]+Target[\s]+Server:[\s]+(?<space>[^\s]*)[\s]+Target[\s]+Server[\s]+Name:[\s]+(?<dhost>[^\s]*)[\s]+Additional[\s]+Information:[\s]+(?<fld33>[^\s]*)[\s]+Process[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Process[\s]+Name:[\s]+(?<process>[^\s]*)[\s]+Network[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Network[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+Port:[\s]+(?<sport>[^\s]*)[\s]+(This[\s]+event[\s]+is[\s]+generated[\s]+(?<fld50>.*)|(?<fld50>.*))$" }
			id => "msgParserId240"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId241
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Credentials Which Were Replayed:  Account Name:  <c_username>  Account Domain:  <c_domain>  Process Information:  Process ID:  <process_id>  Process Name:  <process> Network Information:  Workstation Name: <hostname>  Detailed Authentication Information:  Request Type: <fld34> Logon Process: <fld35>  Authentication Package: <authmethod>  Transited Services: <service>  This event indicates that a <fld50>
	else if [logstash][msgparser][id] == "msgParserId241" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Credentials Which Were Replayed:  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Process Information:  Process ID:  %{process_id}  Process Name:  %{process} Network Information:  Workstation Name: %{hostname}  Detailed Authentication Information:  Request Type: %{fld34} Logon Process: %{fld35}  Authentication Package: %{authmethod}  Transited Services: %{service}  This event indicates that a %{fld50}" }
			id => "msgParserId241"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId242
	# line in RSA: <event_description> Local Endpoint:  Principal Name: <shost>  Network Address: <saddr>  Keying Module Port: <sport>  Remote Endpoint:  Principal Name: <dhost>  Network Address: <daddr>  Keying Module Port: <dport>  Security Association Information:  Lifetime (minutes): <duration>  Quick Mode Limit: <fld35>  Main Mode SA ID: <fld13>  Cryptographic Information:  Cipher Algorithm: <encryption_type>  Integrity Algorithm: <fld36>  Diffie-Hellman Group: <fld37>  Additional Information:  Keying Module Name: <fld38>  Authentication Method: <authmethod>  Role: <fld39>  Impersonation State: <fld40>  Main Mode Filter ID: <filter>
	else if [logstash][msgparser][id] == "msgParserId242" {
		dissect {
			mapping => { "message" => "%{event_description} Local Endpoint:  Principal Name: %{shost}  Network Address: %{saddr}  Keying Module Port: %{sport}  Remote Endpoint:  Principal Name: %{dhost}  Network Address: %{daddr}  Keying Module Port: %{dport}  Security Association Information:  Lifetime (minutes): %{duration}  Quick Mode Limit: %{fld35}  Main Mode SA ID: %{fld13}  Cryptographic Information:  Cipher Algorithm: %{encryption_type}  Integrity Algorithm: %{fld36}  Diffie-Hellman Group: %{fld37}  Additional Information:  Keying Module Name: %{fld38}  Authentication Method: %{authmethod}  Role: %{fld39}  Impersonation State: %{fld40}  Main Mode Filter ID: %{filter}" }
			id => "msgParserId242"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId243
	# line in RSA: <event_description>   Local Endpoint:  Principal Name: <shost> Network Address: <saddr>  Keying Module Port: <sport>  Local Certificate:  SHA Thumbprint: <fld41>  Issuing CA:  <s_certauth>  Root CA:  <fld42>  Remote Endpoint:  Principal Name: <dhost>  Network Address: <daddr>  Keying Module Port: <dport>  Remote Certificate:  SHA thumbprint:  <fld43>  Issuing CA:  <d_certauth>  Root CA:  <fld44>  Cryptographic Information:  Cipher Algorithm: <encryption_type>  Integrity Algorithm: <fld36>  Diffie-Hellman Group: <fld37>  Security Association Information:  Lifetime (minutes): <duration>  Quick Mode Limit: <fld35>  Main Mode SA ID: <fld13>  Additional Information:  Keying Module Name: <fld38>  Authentication Method: <authmethod>  Role: <fld39>  Impersonation State: <fld40>  Main Mode Filter ID: <filter>
	else if [logstash][msgparser][id] == "msgParserId243" {
		dissect {
			mapping => { "message" => "%{event_description}   Local Endpoint:  Principal Name: %{shost} Network Address: %{saddr}  Keying Module Port: %{sport}  Local Certificate:  SHA Thumbprint: %{fld41}  Issuing CA:  %{s_certauth}  Root CA:  %{fld42}  Remote Endpoint:  Principal Name: %{dhost}  Network Address: %{daddr}  Keying Module Port: %{dport}  Remote Certificate:  SHA thumbprint:  %{fld43}  Issuing CA:  %{d_certauth}  Root CA:  %{fld44}  Cryptographic Information:  Cipher Algorithm: %{encryption_type}  Integrity Algorithm: %{fld36}  Diffie-Hellman Group: %{fld37}  Security Association Information:  Lifetime (minutes): %{duration}  Quick Mode Limit: %{fld35}  Main Mode SA ID: %{fld13}  Additional Information:  Keying Module Name: %{fld38}  Authentication Method: %{authmethod}  Role: %{fld39}  Impersonation State: %{fld40}  Main Mode Filter ID: %{filter}" }
			id => "msgParserId243"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId244
	# line in RSA: <event_description>    Local Endpoint:  Principal Name: <shost> Network Address: <saddr>  Keying Module Port: <sport>  Local Certificate:  SHA Thumbprint: <fld41>  Issuing CA:  <s_certauth>  Root CA:  <fld42> Remote Endpoint:  Principal Name: <dhost>  Network Address: <daddr>  Keying Module Port: <dport>  Remote Certificate:  SHA thumbprint:  <fld43>  Issuing CA:  <d_certauth>  Root CA:  <fld44>  Additional Information:  Keying Module Name: <fld38>  Authentication Method: <authmethod>  Role: <fld39>  Impersonation State: <fld40>  Main Mode Filter ID: <filter> Failure Information:  Failure Point:  <fld19>  Failure Reason:  <result>  State: <disposition>  Initiator Cookie:  <fld46>  Responder Cookie: <fld47>
	else if [logstash][msgparser][id] == "msgParserId244" {
		dissect {
			mapping => { "message" => "%{event_description}    Local Endpoint:  Principal Name: %{shost} Network Address: %{saddr}  Keying Module Port: %{sport}  Local Certificate:  SHA Thumbprint: %{fld41}  Issuing CA:  %{s_certauth}  Root CA:  %{fld42} Remote Endpoint:  Principal Name: %{dhost}  Network Address: %{daddr}  Keying Module Port: %{dport}  Remote Certificate:  SHA thumbprint:  %{fld43}  Issuing CA:  %{d_certauth}  Root CA:  %{fld44}  Additional Information:  Keying Module Name: %{fld38}  Authentication Method: %{authmethod}  Role: %{fld39}  Impersonation State: %{fld40}  Main Mode Filter ID: %{filter} Failure Information:  Failure Point:  %{fld19}  Failure Reason:  %{result}  State: %{disposition}  Initiator Cookie:  %{fld46}  Responder Cookie: %{fld47}" }
			id => "msgParserId244"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId245
	# line in RSA: <event_description> Local Endpoint:  Local Principal Name: <shost> Network Address: <saddr>  Keying Module Port: <sport>  Remote Endpoint:  Principal Name: <dhost>  Network Address: <daddr>  Keying Module Port: <dport> Additional Information:  Keying Module Name: <fld38>  Authentication Method: <authmethod>  Role: <fld39>  Impersonation State: <fld40>  Main Mode Filter ID: <filter> Failure Information:  Failure Point:  <fld19>  Failure Reason:  <result>  State: <disposition>  Initiator Cookie:  <fld46>  Responder Cookie: <fld47>
	else if [logstash][msgparser][id] == "msgParserId245" {
		dissect {
			mapping => { "message" => "%{event_description} Local Endpoint:  Local Principal Name: %{shost} Network Address: %{saddr}  Keying Module Port: %{sport}  Remote Endpoint:  Principal Name: %{dhost}  Network Address: %{daddr}  Keying Module Port: %{dport} Additional Information:  Keying Module Name: %{fld38}  Authentication Method: %{authmethod}  Role: %{fld39}  Impersonation State: %{fld40}  Main Mode Filter ID: %{filter} Failure Information:  Failure Point:  %{fld19}  Failure Reason:  %{result}  State: %{disposition}  Initiator Cookie:  %{fld46}  Responder Cookie: %{fld47}" }
			id => "msgParserId245"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId246
	# line in RSA: <event_description> Local Endpoint:  Network Address: <saddr>  Network Address mask: <fld15> Port: <sport>  Tunnel Endpoint:  <fld48> Remote Endpoint:  Network Address: <daddr>  Address Mask: <fld16> Port: <dport>  Tunnel Endpoint: <fld49> Private Address: <dtransaddr> Additional Information:  Protocol:  <protocol>  Keying Module Name: <fld38>  Mode: <ike>  Role: <fld39>  Quick Mode Filter ID: <filter> Main Mode SA ID: <fld13>  Failure Information:  State: <disposition>  Message ID: <id1>  Failure Point: <fld19>  Failure Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId246" {
		dissect {
			mapping => { "message" => "%{event_description} Local Endpoint:  Network Address: %{saddr}  Network Address mask: %{fld15} Port: %{sport}  Tunnel Endpoint:  %{fld48} Remote Endpoint:  Network Address: %{daddr}  Address Mask: %{fld16} Port: %{dport}  Tunnel Endpoint: %{fld49} Private Address: %{dtransaddr} Additional Information:  Protocol:  %{protocol}  Keying Module Name: %{fld38}  Mode: %{ike}  Role: %{fld39}  Quick Mode Filter ID: %{filter} Main Mode SA ID: %{fld13}  Failure Information:  State: %{disposition}  Message ID: %{id1}  Failure Point: %{fld19}  Failure Reason: %{result}" }
			id => "msgParserId246"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId247
	# line in RSA: <event_description>   Local Network Address:  <saddr> Remote Network Address: <daddr> Keying Module Name:  <fld38>
	else if [logstash][msgparser][id] == "msgParserId247" {
		dissect {
			mapping => { "message" => "%{event_description}   Local Network Address:  %{saddr} Remote Network Address: %{daddr} Keying Module Name:  %{fld38}" }
			id => "msgParserId247"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"ec_theme" => "Encryption"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4656_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4656_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject: <space> Security ID: <sid> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid> Object:  Object Server:  <obj_server>  Object Type:  <obj_type>  Object Name:  <obj_name>  Handle ID:  <id1>  Process Information:  Process ID:  <process_id>  Process Name: <process> Access Request Information:  Transaction ID: <id2>   Accesses:  <accesses>   Access Mask:  <fld52>   Privileges Used for Access Check: <privilege>   Restricted SID Count: <fld53>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject: %{space} Security ID: %{sid} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid} Object:  Object Server:  %{obj_server}  Object Type:  %{obj_type}  Object Name:  %{obj_name}  Handle ID:  %{id1}  Process Information:  Process ID:  %{process_id}  Process Name: %{process} Access Request Information:  Transaction ID: %{id2}   Accesses:  %{accesses}   Access Mask:  %{fld52}   Privileges Used for Access Check: %{privilege}   Restricted SID Count: %{fld53}" }
				id => "message-Security_4656_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4656_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4656_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4656_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-Security_4656_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4656_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4656_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1206010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId249
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  Object Name:  <obj_name>  Object Value Name: <obj_value>  Handle ID: <id1>  Operation Type:  <action> Process Information:  Process ID:  <process_id>  Process Name: <process>  Change Information:  Old Value Type:  <change_old>  New Value Type: <change_new>
	else if [logstash][msgparser][id] == "msgParserId249" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  Object Name:  %{obj_name}  Object Value Name: %{obj_value}  Handle ID: %{id1}  Operation Type:  %{action} Process Information:  Process ID:  %{process_id}  Process Name: %{process}  Change Information:  Old Value Type:  %{change_old}  New Value Type: %{change_new}" }
			id => "msgParserId249"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId250
	# line in RSA: <event_description>   Subject<space>:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  Object Server:  <obj_server>  Handle ID:  <id1>  Process Information:  Process ID:  <process_id>  Process Name:  <process>
	else if [logstash][msgparser][id] == "msgParserId250" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject%{space}:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  Object Server:  %{obj_server}  Handle ID:  %{id1}  Process Information:  Process ID:  %{process_id}  Process Name:  %{process}" }
			id => "msgParserId250"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId251
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  Object Server: <obj_server>  Object Type: <obj_type>  Object Name: <obj_name>  Handle ID: <id1>  Process Information:  Process ID: <process_id>  Access Request Information:  Transaction ID: <id2>  Accesses: <accesses>  Access Mask: <fld52>  Privileges Used for Access Check: <privilege>
	else if [logstash][msgparser][id] == "msgParserId251" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  Object Server: %{obj_server}  Object Type: %{obj_type}  Object Name: %{obj_name}  Handle ID: %{id1}  Process Information:  Process ID: %{process_id}  Access Request Information:  Transaction ID: %{id2}  Accesses: %{accesses}  Access Mask: %{fld52}  Privileges Used for Access Check: %{privilege}" }
			id => "msgParserId251"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId252
	# line in RSA: <event_description> Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  Object Server: <obj_server>  Handle ID:  <id1>  Process Information:  Process ID:  <process_id>  Process Name:  <process> Transaction ID: <id2>
	else if [logstash][msgparser][id] == "msgParserId252" {
		dissect {
			mapping => { "message" => "%{event_description} Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  Object Server: %{obj_server}  Handle ID:  %{id1}  Process Information:  Process ID:  %{process_id}  Process Name:  %{process} Transaction ID: %{id2}" }
			id => "msgParserId252"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId253
	# line in RSA: <event_description>   Subject<space>: <space> Security ID: <sid> Account Name: <username>   Account Domain: <domain> Logon ID: <sessionid> Object:  Object Server:  <obj_server>  Object Type:  <obj_type>  Object Name: <obj_name>  Handle ID:  <id1>  Process Information:  Process ID:  <process_id>  Process Name:   <process>  Access Request Information:  Transaction ID: <id2>   Accesses: <accesses>   Access Mask: <fld52>   Privileges Used for Access Check: <privilege> { Properties: <param> Restricted SID Count: <fld53> | Properties: <param> }
	else if [logstash][msgparser][id] == "msgParserId253" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject(?<space>[^:]*):[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Object:[\s]+Object[\s]+Server:[\s]+(?<obj_server>[^\s]*)[\s]+Object[\s]+Type:[\s]+(?<obj_type>[^\s]*)[\s]+Object[\s]+Name:[\s]+(?<obj_name>[^\s]*)[\s]+Handle[\s]+ID:[\s]+(?<id1>[^\s]*)[\s]+Process[\s]+Information:[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Process[\s]+Name:[\s]+(?<process>[^\s]*)[\s]+Access[\s]+Request[\s]+Information:[\s]+Transaction[\s]+ID:[\s]+(?<id2>[^\s]*)[\s]+Accesses:[\s]+(?<accesses>[^\s]*)[\s]+Access[\s]+Mask:[\s]+(?<fld52>[^\s]*)[\s]+Privileges[\s]+Used[\s]+for[\s]+Access[\s]+Check:[\s]+(?<privilege>[^\s]*)[\s]+([\s]*Properties:[\s]+(?<param>[^\s]*)[\s]+Restricted[\s]+SID[\s]+Count:[\s]+(?<fld53>[^\s]*)[\s]+|[\s]*Properties:[\s]+(?<param>[^\s]*)[\s]+)$" }
			id => "msgParserId253"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4662_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4662_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>  Subject : <space> Security ID:  <sid>  Account Name:  <username>  Account Domain:  <domain>  Logon ID:  <sessionid>  Object: <space> Object Server:  <obj_server>  Object Type:  <obj_type>  Object Name:  <obj_name>  Handle ID:  <id1>  Operation: <space> Operation Type:  <action>  Accesses:  <accesses>  Access Mask:  <fld52>  Properties:  <fld54>  Additional Information:  <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}  Subject : %{space} Security ID:  %{sid}  Account Name:  %{username}  Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object: %{space} Object Server:  %{obj_server}  Object Type:  %{obj_type}  Object Name:  %{obj_name}  Handle ID:  %{id1}  Operation: %{space} Operation Type:  %{action}  Accesses:  %{accesses}  Access Mask:  %{fld52}  Properties:  %{fld54}  Additional Information:  %{param}" }
				id => "message-Security_4662_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4662_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4662_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4662_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>  Subject : <space> Security ID:  <sid>  Account Name:  <username>  Account Domain:  <domain>  Logon ID:  <sessionid>  Object: <space> Object Server:  <obj_server>  Object Type:  <obj_type>  Object Name:  <obj_name>  Handle ID:  <id1>  Operation: <space> Operation Type:  <action>  Accesses:  <accesses>  Access Mask:  <fld52>  Properties:  <fld54>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}  Subject : %{space} Security ID:  %{sid}  Account Name:  %{username}  Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object: %{space} Object Server:  %{obj_server}  Object Type:  %{obj_type}  Object Name:  %{obj_name}  Handle ID:  %{id1}  Operation: %{space} Operation Type:  %{action}  Accesses:  %{accesses}  Access Mask:  %{fld52}  Properties:  %{fld54}" }
				id => "message-Security_4662_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4662_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4662_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId256
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  Object Server: <obj_server>  Object Type: <obj_type>  Object Name: <obj_name>  Handle ID:  <id1>  {Resource Attributes: <info> Process Information: | Process Information: }  Process ID:  <process_id>  Process Name:  <process> Access Request Information:  Accesses: <accesses>  Access Mask: <fld52>
	else if [logstash][msgparser][id] == "msgParserId256" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Object:[\s]+Object[\s]+Server:[\s]+(?<obj_server>[^\s]*)[\s]+Object[\s]+Type:[\s]+(?<obj_type>[^\s]*)[\s]+Object[\s]+Name:[\s]+(?<obj_name>[^\s]*)[\s]+Handle[\s]+ID:[\s]+(?<id1>[^\s]*)[\s]+(Resource[\s]+Attributes:[\s]+(?<info>[^\s]*)[\s]+Process[\s]+Information:[\s]+|[\s]*Process[\s]+Information:[\s]+)[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Process[\s]+Name:[\s]+(?<process>[^\s]*)[\s]+Access[\s]+Request[\s]+Information:[\s]+Accesses:[\s]+(?<accesses>[^\s]*)[\s]+Access[\s]+Mask:[\s]+(?<fld52>.*)$" }
			id => "msgParserId256"
			add_field => {
				"ec_theme" => "ALM"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId257
	# line in RSA: <event_description>   Subject:  Account Name:  <sid>    Account Name:  <username> Account Domain:  <domain>  Logon ID:  <sessionid>  Link Information:  File Name: <filename>  Link Name: <fld13>  Transaction ID: <id1>
	else if [logstash][msgparser][id] == "msgParserId257" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Account Name:  %{sid}    Account Name:  %{username} Account Domain:  %{domain}  Logon ID:  %{sessionid}  Link Information:  File Name: %{filename}  Link Name: %{fld13}  Transaction ID: %{id1}" }
			id => "msgParserId257"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId258
	# line in RSA: <event_description>   Subject:  Client Name:  <c_username>  Client Domain:  <domain> Client Context ID:  <id1>  Application Information: <space> Application Name: <application> Application Instance ID: <fld13>
	else if [logstash][msgparser][id] == "msgParserId258" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Client Name:  %{c_username}  Client Domain:  %{domain} Client Context ID:  %{id1}  Application Information: %{space} Application Name: %{application} Application Instance ID: %{fld13}" }
			id => "msgParserId258"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId259
	# line in RSA: <event_description>   Subject:  Client Name:  <username>  Client Domain:  <domain> Client Context ID:  <id1>  Object:  Object Name:  <obj_name>  Scope Names:  <fld53>  Application Information: <space> Application Name: <application> Application Instance ID: <fld13> Access Request Information:  Role:  <fld39>  Groups: <group>  Operation Name: <action>
	else if [logstash][msgparser][id] == "msgParserId259" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Client Name:  %{username}  Client Domain:  %{domain} Client Context ID:  %{id1}  Object:  Object Name:  %{obj_name}  Scope Names:  %{fld53}  Application Information: %{space} Application Name: %{application} Application Instance ID: %{fld13} Access Request Information:  Role:  %{fld39}  Groups: %{group}  Operation Name: %{action}" }
			id => "msgParserId259"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId260
	# line in RSA: <event_description>   Subject:  Client Name:  <username>  Client Domain:  <domain> Client Context ID:  <id1>  Application Information:  Application Name: <application>  Application Instance ID: <fld13>
	else if [logstash][msgparser][id] == "msgParserId260" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Client Name:  %{username}  Client Domain:  %{domain} Client Context ID:  %{id1}  Application Information:  Application Name: %{application}  Application Instance ID: %{fld13}" }
			id => "msgParserId260"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId261
	# line in RSA: <event_description>   Subject:  Client Name: <username>  Client Domain: <domain> Client ID:  <id1>  Application Information:  Application Name: <application>  Application Instance ID: <fld13> Additional Information:  Policy Store URL: <url>
	else if [logstash][msgparser][id] == "msgParserId261" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Client Name: %{username}  Client Domain: %{domain} Client ID:  %{id1}  Application Information:  Application Name: %{application}  Application Instance ID: %{fld13} Additional Information:  Policy Store URL: %{url}" }
			id => "msgParserId261"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4670_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4670_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  Object Server: <obj_server>  Object Type: <obj_type>  Object Name: <obj_name>  Handle ID:  <id1>  Process:  Process ID:  <process_id>  Process Name:  <process> Permissions Change:  Original Security Descriptor: <change_old>  New Security Descriptor: <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  Object Server: %{obj_server}  Object Type: %{obj_type}  Object Name: %{obj_name}  Handle ID:  %{id1}  Process:  Process ID:  %{process_id}  Process Name:  %{process} Permissions Change:  Original Security Descriptor: %{change_old}  New Security Descriptor: %{change_new}" }
				id => "message-Security_4670_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4670_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4670_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4670_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-Security_4670_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4670_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4670_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId264
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Ordinal: <info>
	else if [logstash][msgparser][id] == "msgParserId264" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Ordinal: %{info}" }
			id => "msgParserId264"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId265
	# line in RSA: <event_description>   Subject: <space> Security ID: <sid> Account Name: <username>   Account Domain: <domain> Logon ID: <sessionid> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId265" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject: %{space} Security ID: %{sid} Account Name: %{username}   Account Domain: %{domain} Logon ID: %{sessionid} Privileges: %{privilege}" }
			id => "msgParserId265"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId266
	# line in RSA: <event_description>   Subject:<space>Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Service:<space>Server: <obj_server>    Service Name:<service>    Process:<space>Process ID:  <process_id>  Process Name:  <process>    Service Request Information:<space>Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId266" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:%{space}Security ID:  %{sid}   Account Name:  %{username}     Account Domain:  %{domain}   Logon ID:  %{sessionid}    Service:%{space}Server: %{obj_server}    Service Name:%{service}    Process:%{space}Process ID:  %{process_id}  Process Name:  %{process}    Service Request Information:%{space}Privileges:  %{privilege}" }
			id => "msgParserId266"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId267
	# line in RSA: <event_description>   Subject: <space> Security ID: <sid> Account Name: <username>   Account Domain: <domain> Logon ID: <sessionid> Object: <space> Object Server: <obj_server> Object Type: <obj_type> Object Name: <obj_name> Object Handle: <id1> Process Information: <space> Process ID: <process_id> Process Name: <process> Requested Operation: <space> Desired Access: <accesses> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId267" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject: %{space} Security ID: %{sid} Account Name: %{username}   Account Domain: %{domain} Logon ID: %{sessionid} Object: %{space} Object Server: %{obj_server} Object Type: %{obj_type} Object Name: %{obj_name} Object Handle: %{id1} Process Information: %{space} Process ID: %{process_id} Process Name: %{process} Requested Operation: %{space} Desired Access: %{accesses} Privileges: %{privilege}" }
			id => "msgParserId267"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4688_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4688_Microsoft-Windows-Security-Auditing:02
		# line in RSA: <event_description>   Creator Subject:<space>Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>  Target Subject:<space>Security ID:  <c_sid>  Account Name:  <c_username>  Account Domain:  <c_domain>  Logon ID:  <sessionid1>  Process Information: <space>New Process ID:  <process_id>  New Process Name: <process>  Token Elevation Type: <fld55>   {Creator Process ID: <parent_pid> Creator Process Name: <process_src>|Creator Process ID: <parent_pid>}  {Process Command Line:     Token Elevation Type indicates <fld56>|Process Command Line:   Token Elevation Type indicates <fld56>|Process Command Line: "<filename>"<param>Token Elevation Type indicates <fld56>|Process Command Line:<filename> <param> Token Elevation Type indicates <fld56>|Process Command Line:<filename> <param>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Creator[\s]+Subject:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Target[\s]+Subject:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid1>[^\s]*)[\s]+Process[\s]+Information:[\s]+(?<space>[^N]*)New[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+New[\s]+Process[\s]+Name:[\s]+(?<process>[^\s]*)[\s]+Token[\s]+Elevation[\s]+Type:[\s]+(?<fld55>[^\s]*)[\s]+(Creator[\s]+Process[\s]+ID:[\s]+(?<parent_pid>[^\s]*)[\s]+Creator[\s]+Process[\s]+Name:[\s]+(?<process_src>[^\s]*)|Creator[\s]+Process[\s]+ID:[\s]+(?<parent_pid>[^\s]*))[\s]+(Process[\s]+Command[\s]+Line:[\s]+Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)|Process[\s]+Command[\s]+Line:[\s]+Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)|Process[\s]+Command[\s]+Line:[\s]+\"(?<filename>[^\"]*)\"(?<param>[^T]*)Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)|Process[\s]+Command[\s]+Line:(?<filename>[^\s]*)[\s]+(?<param>[^\s]*)[\s]+Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)|Process[\s]+Command[\s]+Line:(?<filename>[^\s]*)[\s]+(?<param>.*))$" }
				id => "message-Security_4688_Microsoft-Windows-Security-Auditing:02"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"fld_cmdline" => "%{filename}"
				"info" => "%{filename}\t%{param}"
					"[event][id]" => "Security_4688_Microsoft-Windows-Security-Auditing:02"
					"[rsa][message][id1]" => "Security_4688_Microsoft-Windows-Security-Auditing:02"
					"[event][categoryid]" => "1205010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4688_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>   Subject:<space>Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Process Information: <space>New Process ID:  <process_id>  New Process Name: <process>  Token Elevation Type: <fld55>   {Creator Process ID: <parent_pid> Creator Process Name: <process_src>|Creator Process ID: <parent_pid>}  {Process Command Line:     Token Elevation Type indicates <fld56>|Process Command Line:   Token Elevation Type indicates <fld56>|Process Command Line: "<filename>"<param>Token Elevation Type indicates <fld56>|Process Command Line:<filename> <param> Token Elevation Type indicates <fld56>|Process Command Line:<filename> <param>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Process[\s]+Information:[\s]+(?<space>[^N]*)New[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+New[\s]+Process[\s]+Name:[\s]+(?<process>[^\s]*)[\s]+Token[\s]+Elevation[\s]+Type:[\s]+(?<fld55>[^\s]*)[\s]+(Creator[\s]+Process[\s]+ID:[\s]+(?<parent_pid>[^\s]*)[\s]+Creator[\s]+Process[\s]+Name:[\s]+(?<process_src>[^\s]*)|Creator[\s]+Process[\s]+ID:[\s]+(?<parent_pid>[^\s]*))[\s]+(Process[\s]+Command[\s]+Line:[\s]+Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)|Process[\s]+Command[\s]+Line:[\s]+Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)|Process[\s]+Command[\s]+Line:[\s]+\"(?<filename>[^\"]*)\"(?<param>[^T]*)Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)|Process[\s]+Command[\s]+Line:(?<filename>[^\s]*)[\s]+(?<param>[^\s]*)[\s]+Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)|Process[\s]+Command[\s]+Line:(?<filename>[^\s]*)[\s]+(?<param>.*))$" }
				id => "message-Security_4688_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"fld_cmdline" => "%{filename}"
				"info" => "%{filename}\t%{param}"
					"[event][id]" => "Security_4688_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4688_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1205010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4688_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject:<space>Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Process Information: <space>New Process ID:  <process_id> {New Process Name: <process> Token Elevation Type: <fld55>| Token Elevation Type: <fld55>}   {Creator Process ID: <parent_pid> Creator Process Name: <process_src>|Creator Process ID: <parent_pid>} <info> Token Elevation Type indicates <fld56>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Process[\s]+Information:[\s]+(?<space>[^N]*)New[\s]+Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+(New[\s]+Process[\s]+Name:[\s]+(?<process>[^\s]*)[\s]+Token[\s]+Elevation[\s]+Type:[\s]+(?<fld55>[^\s]*)|[\s]*Token[\s]+Elevation[\s]+Type:[\s]+(?<fld55>[^\s]*))[\s]+(Creator[\s]+Process[\s]+ID:[\s]+(?<parent_pid>[^\s]*)[\s]+Creator[\s]+Process[\s]+Name:[\s]+(?<process_src>[^\s]*)|Creator[\s]+Process[\s]+ID:[\s]+(?<parent_pid>[^\s]*))[\s]+(?<info>[^\s]*)[\s]+Token[\s]+Elevation[\s]+Type[\s]+indicates[\s]+(?<fld56>.*)$" }
				id => "message-Security_4688_Microsoft-Windows-Security-Auditing"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4688_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4688_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1205010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId271
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Process Information:  Process ID:  <process_id>  Process Name:  <process>    Exit Status: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId271" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}   Account Name:  %{username}     Account Domain:  %{domain}   Logon ID:  %{sessionid}    Process Information:  Process ID:  %{process_id}  Process Name:  %{process}    Exit Status: %{resultcode}" }
			id => "msgParserId271"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Stop"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId272
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Source Handle Information:  Source Handle ID: <id1>  Source Process ID: <parent_pid>  New Handle Information:  Target Handle ID: <id2>  Target Process ID: <process_id>
	else if [logstash][msgparser][id] == "msgParserId272" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Source Handle Information:  Source Handle ID: %{id1}  Source Process ID: %{parent_pid}  New Handle Information:  Target Handle ID: %{id2}  Target Process ID: %{process_id}" }
			id => "msgParserId272"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId273
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  Object Type: <obj_type>  Object Name: <obj_name>  Process Information:  Process ID:  <process_id> Access Request Information:  Accesses: <accesses> Access Mask: <fld52>
	else if [logstash][msgparser][id] == "msgParserId273" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  Object Type: %{obj_type}  Object Name: %{obj_name}  Process Information:  Process ID:  %{process_id} Access Request Information:  Accesses: %{accesses} Access Mask: %{fld52}" }
			id => "msgParserId273"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId274
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Key Information:  <info> Status Information:  Status Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId274" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Key Information:  %{info} Status Information:  Status Code: %{resultcode}" }
			id => "msgParserId274"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId275
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Protected Data:  <info>  Status Information:  Status Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId275" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Protected Data:  %{info}  Status Information:  Status Code: %{resultcode}" }
			id => "msgParserId275"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId276
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Protected Data:  <fld52>  Protection Algorithms: <encryption_type>  Status Information:  Status Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId276" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Protected Data:  %{fld52}  Protection Algorithms: %{encryption_type}  Status Information:  Status Code: %{resultcode}" }
			id => "msgParserId276"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId277
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Process Information:  Process ID:  <parent_pid>  Process Name: <process_src>  Target Process:  Target Process ID: <process_id>  Target Process Name: <process>  New Token Information:  Security ID:  <fld39>  Account Name:  <c_username>  Account Domain:  <c_domain>  Logon ID:  <sessionid1>
	else if [logstash][msgparser][id] == "msgParserId277" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Process Information:  Process ID:  %{parent_pid}  Process Name: %{process_src}  Target Process:  Target Process ID: %{process_id}  Target Process Name: %{process}  New Token Information:  Security ID:  %{fld39}  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Logon ID:  %{sessionid1}" }
			id => "msgParserId277"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId278
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Service Information:  Service Name: <service> Service File Name: <filename>  Service Type:  <fld56> Service Start Type: <fld57>  Service Account: <service_account>
	else if [logstash][msgparser][id] == "msgParserId278" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Service Information:  Service Name: %{service} Service File Name: %{filename}  Service Type:  %{fld56} Service Start Type: %{fld57}  Service Account: %{service_account}" }
			id => "msgParserId278"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4698_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4698_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Task Information:  Task Name: <service>  Task Content:  <info> Command><filename><<<fld31>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Task Information:  Task Name: %{service}  Task Content:  %{info} Command>%{filename}<%{fld31}" }
				id => "message-Security_4698_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4698_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4698_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4698_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Task Information:  Task Name: <service>  Task Content:  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Task Information:  Task Name: %{service}  Task Content:  %{info}" }
				id => "message-Security_4698_Microsoft-Windows-Security-Auditing"
				add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4698_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4698_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_1200_AD" {
		# MESSAGE Security_1200_AD:01
		# line in RSA: <event_description> See XML for details.<fld15>Activity ID:<process_id> Additional Data<fld16>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld1> <<ErrorCode> <resultcode> <</ErrorCode> <fld2> <<RelyingParty><federated_sp><</RelyingParty> <fld43> <<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId><fld3> <<SsoBindingValidationLevel><fld22><</SsoBindingValidationLevel> <fld44> <<Server><application><</Server><fld8><<AuthProtocol><protocol><</AuthProtocol><fld9><<NetworkLocation><netname><</NetworkLocation><fld10><<IpAddress><saddr><</IpAddress><fld7> {<<ForwardedIpAddress><ip.orig><</ForwardedIpAddress>|<<ForwardedIpAddress />} <fld50> <<ProxyIpAddress><fld88><</ProxyIpAddress> <fld51> <<NetworkIpAddress><hostip><</NetworkIpAddress> <fld11><<ProxyServer><hostname><</ProxyServer> <fld81><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+details\.(?<fld15>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld16>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld1>[^\s]*)[\s]+<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>[\s]+(?<fld2>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld43>[^\s]*)[\s]+<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>(?<fld3>[^\s]*)[\s]+<SsoBindingValidationLevel>(?<fld22>[^<]*)</SsoBindingValidationLevel>[\s]+(?<fld44>[^\s]*)[\s]+<Server>(?<application>[^<]*)</Server>(?<fld8>[^<]*)<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>(?<fld9>[^<]*)<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>(?<fld10>[^<]*)<IpAddress>(?<saddr>[^<]*)</IpAddress>(?<fld7>[^\s]*)[\s]+(<ForwardedIpAddress>(?<ip.orig>[^<]*)</ForwardedIpAddress>|<ForwardedIpAddress[\s]+/>)[\s]+(?<fld50>[^\s]*)[\s]+<ProxyIpAddress>(?<fld88>[^<]*)</ProxyIpAddress>[\s]+(?<fld51>[^\s]*)[\s]+<NetworkIpAddress>(?<hostip>[^<]*)</NetworkIpAddress>[\s]+(?<fld11>[^<]*)<ProxyServer>(?<hostname>[^<]*)</ProxyServer>[\s]+(?<fld81>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Security_1200_AD:01"
				add_field => {
				"ec_activity" => "Service issued a valid token"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1200_AD:01"
					"[rsa][message][id1]" => "Security_1200_AD:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_1200_AD
		# line in RSA: <event_description> See XML for details.<fld15>Activity ID:<process_id> Additional Data<fld16>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld1> <<ErrorCode> <resultcode> <</ErrorCode> <fld2> <<RelyingParty><federated_sp><</RelyingParty> <fld43> <<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId><fld3> <<SsoBindingValidationLevel><fld22><</SsoBindingValidationLevel> <fld44> <<Server><application><</Server><fld8><<AuthProtocol><protocol><</AuthProtocol><fld9><<NetworkLocation><netname><</NetworkLocation><fld10><<IpAddress><saddr><</IpAddress><fld11><<ProxyServer><hostname><</ProxyServer> <fld81><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+details\.(?<fld15>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld16>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld1>[^\s]*)[\s]+<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>[\s]+(?<fld2>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld43>[^\s]*)[\s]+<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>(?<fld3>[^\s]*)[\s]+<SsoBindingValidationLevel>(?<fld22>[^<]*)</SsoBindingValidationLevel>[\s]+(?<fld44>[^\s]*)[\s]+<Server>(?<application>[^<]*)</Server>(?<fld8>[^<]*)<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>(?<fld9>[^<]*)<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>(?<fld10>[^<]*)<IpAddress>(?<saddr>[^<]*)</IpAddress>(?<fld11>[^<]*)<ProxyServer>(?<hostname>[^<]*)</ProxyServer>[\s]+(?<fld81>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Security_1200_AD"
				add_field => {
				"ec_activity" => "Service issued a valid token"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1200_AD"
					"[rsa][message][id1]" => "Security_1200_AD"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_1201_AD" {
		# MESSAGE Security_1201_AD:01
		# line in RSA: <event_description> See XML for failure details.<fld1>Activity ID:<process_id> Additional Data<fld5>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld22> <<ErrorCode> <resultcode> <</ErrorCode><fld2> <<RelyingParty><federated_sp><</RelyingParty> <fld43> <<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId><fld3> <<SsoBindingValidationLevel><fld81><</SsoBindingValidationLevel> <fld44> <<Server><application><</Server><fld82><<AuthProtocol><protocol><</AuthProtocol><fld9><<NetworkLocation><netname><</NetworkLocation><fld10><<IpAddress><saddr><</IpAddress> {<<ForwardedIpAddress><ip.orig><</ForwardedIpAddress>|<<ForwardedIpAddress />} <fld50> <<ProxyIpAddress><fld88><</ProxyIpAddress> <fld51> <<NetworkIpAddress><hostip><</NetworkIpAddress> <fld11><<ProxyServer><hostname><</ProxyServer> <fld8><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+failure[\s]+details\.(?<fld1>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld5>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld22>[^\s]*)[\s]+<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>(?<fld2>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld43>[^\s]*)[\s]+<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>(?<fld3>[^\s]*)[\s]+<SsoBindingValidationLevel>(?<fld81>[^<]*)</SsoBindingValidationLevel>[\s]+(?<fld44>[^\s]*)[\s]+<Server>(?<application>[^<]*)</Server>(?<fld82>[^<]*)<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>(?<fld9>[^<]*)<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>(?<fld10>[^<]*)<IpAddress>(?<saddr>[^<]*)</IpAddress>[\s]+(<ForwardedIpAddress>(?<ip.orig>[^<]*)</ForwardedIpAddress>|<ForwardedIpAddress[\s]+/>)[\s]+(?<fld50>[^\s]*)[\s]+<ProxyIpAddress>(?<fld88>[^<]*)</ProxyIpAddress>[\s]+(?<fld51>[^\s]*)[\s]+<NetworkIpAddress>(?<hostip>[^<]*)</NetworkIpAddress>[\s]+(?<fld11>[^<]*)<ProxyServer>(?<hostname>[^<]*)</ProxyServer>[\s]+(?<fld8>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Security_1201_AD:01"
				add_field => {
				"ec_activity" => "Service failed"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1201_AD:01"
					"[rsa][message][id1]" => "Security_1201_AD:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_1201_AD
		# line in RSA: <event_description> See XML for failure details.<fld1>Activity ID:<process_id> Additional Data<fld5>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld22> <<ErrorCode> <resultcode> <</ErrorCode><fld2> <<RelyingParty><federated_sp><</RelyingParty> <fld43> <<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId><fld3> <<SsoBindingValidationLevel><fld81><</SsoBindingValidationLevel> <fld44> <<Server><application><</Server><fld82><<AuthProtocol><protocol><</AuthProtocol><fld9><<NetworkLocation><netname><</NetworkLocation><fld10><<IpAddress><saddr><</IpAddress> <fld11><<ProxyServer><hostname><</ProxyServer> <fld8><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+failure[\s]+details\.(?<fld1>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld5>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld22>[^\s]*)[\s]+<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>(?<fld2>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld43>[^\s]*)[\s]+<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>(?<fld3>[^\s]*)[\s]+<SsoBindingValidationLevel>(?<fld81>[^<]*)</SsoBindingValidationLevel>[\s]+(?<fld44>[^\s]*)[\s]+<Server>(?<application>[^<]*)</Server>(?<fld82>[^<]*)<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>(?<fld9>[^<]*)<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>(?<fld10>[^<]*)<IpAddress>(?<saddr>[^<]*)</IpAddress>[\s]+(?<fld11>[^<]*)<ProxyServer>(?<hostname>[^<]*)</ProxyServer>[\s]+(?<fld8>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Security_1201_AD"
				add_field => {
				"ec_activity" => "Service failed"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1201_AD"
					"[rsa][message][id1]" => "Security_1201_AD"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_1202_AD" {
		# MESSAGE Security_1202_AD:01
		# line in RSA: <event_description> See XML for details.<fld18>Activity ID:<process_id> Additional Data<fld5>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld1> <<ErrorCode> <resultcode> <</ErrorCode> <fld2> <<RelyingParty><federated_sp><</RelyingParty> <fld43> <<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId> <fld3> <<SsoBindingValidationLevel><fld22><</SsoBindingValidationLevel> <fld44> <<Server><application><</Server> <fld81> <<AuthProtocol><protocol><</AuthProtocol> <fld9> <<NetworkLocation><netname><</NetworkLocation> <fld10> <<IpAddress><saddr><</IpAddress> {<<ForwardedIpAddress><ip.orig><</ForwardedIpAddress>|<<ForwardedIpAddress />} <fld50> <<ProxyIpAddress><fld88><</ProxyIpAddress> <fld51> <<NetworkIpAddress><hostip><</NetworkIpAddress> <fld11> <<ProxyServer><hostname><</ProxyServer> <fld8><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+details\.(?<fld18>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld5>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld1>[^\s]*)[\s]+<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>[\s]+(?<fld2>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld43>[^\s]*)[\s]+<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>[\s]+(?<fld3>[^\s]*)[\s]+<SsoBindingValidationLevel>(?<fld22>[^<]*)</SsoBindingValidationLevel>[\s]+(?<fld44>[^\s]*)[\s]+<Server>(?<application>[^<]*)</Server>[\s]+(?<fld81>[^\s]*)[\s]+<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>[\s]+(?<fld9>[^\s]*)[\s]+<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>[\s]+(?<fld10>[^\s]*)[\s]+<IpAddress>(?<saddr>[^<]*)</IpAddress>[\s]+(<ForwardedIpAddress>(?<ip.orig>[^<]*)</ForwardedIpAddress>|<ForwardedIpAddress[\s]+/>)[\s]+(?<fld50>[^\s]*)[\s]+<ProxyIpAddress>(?<fld88>[^<]*)</ProxyIpAddress>[\s]+(?<fld51>[^\s]*)[\s]+<NetworkIpAddress>(?<hostip>[^<]*)</NetworkIpAddress>[\s]+(?<fld11>[^\s]*)[\s]+<ProxyServer>(?<hostname>[^<]*)</ProxyServer>[\s]+(?<fld8>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Security_1202_AD:01"
				add_field => {
				"ec_activity" => "Service validated a new credential"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1202_AD:01"
					"[rsa][message][id1]" => "Security_1202_AD:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_1202_AD
		# line in RSA: <event_description> See XML for details.<fld18>Activity ID:<process_id> Additional Data<fld5>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld1> <<ErrorCode> <resultcode> <</ErrorCode> <fld2> <<RelyingParty><federated_sp><</RelyingParty> <fld43> <<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId> <fld3> <<SsoBindingValidationLevel><fld22><</SsoBindingValidationLevel> <fld44> <<Server><application><</Server> <fld81> <<AuthProtocol><protocol><</AuthProtocol> <fld9> <<NetworkLocation><netname><</NetworkLocation> <fld10> <<IpAddress><saddr><</IpAddress> <fld11> <<ProxyServer><hostname><</ProxyServer> <fld8><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+details\.(?<fld18>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld5>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld1>[^\s]*)[\s]+<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>[\s]+(?<fld2>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld43>[^\s]*)[\s]+<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>[\s]+(?<fld3>[^\s]*)[\s]+<SsoBindingValidationLevel>(?<fld22>[^<]*)</SsoBindingValidationLevel>[\s]+(?<fld44>[^\s]*)[\s]+<Server>(?<application>[^<]*)</Server>[\s]+(?<fld81>[^\s]*)[\s]+<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>[\s]+(?<fld9>[^\s]*)[\s]+<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>[\s]+(?<fld10>[^\s]*)[\s]+<IpAddress>(?<saddr>[^<]*)</IpAddress>[\s]+(?<fld11>[^\s]*)[\s]+<ProxyServer>(?<hostname>[^<]*)</ProxyServer>[\s]+(?<fld8>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Security_1202_AD"
				add_field => {
				"ec_activity" => "Service validated a new credential"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1202_AD"
					"[rsa][message][id1]" => "Security_1202_AD"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_1203_AD" {
		# MESSAGE Security_1203_AD:01
		# line in RSA: <event_description> See XML for failure details.<fld1>Activity ID:<process_id> Additional Data<fld9>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld23><<ErrorCode> <resultcode> <</ErrorCode><fld2> <<RelyingParty><federated_sp><</RelyingParty> <fld43> <<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId><fld3> <<SsoBindingValidationLevel><fld22><</SsoBindingValidationLevel> <fld44> <<Server><application><</Server><fld10><<AuthProtocol><protocol><</AuthProtocol><fld5><<NetworkLocation><netname><</NetworkLocation><fld6><<IpAddress><saddr><</IpAddress><fld7> {<<ForwardedIpAddress><ip.orig><</ForwardedIpAddress>|<<ForwardedIpAddress />} <fld50> <<ProxyIpAddress><fld88><</ProxyIpAddress> <fld51> <<NetworkIpAddress><hostip><</NetworkIpAddress> <fld52> <<ProxyServer><hostname><</ProxyServer><fld8><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+failure[\s]+details\.(?<fld1>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld9>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld23>[^<]*)<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>(?<fld2>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld43>[^\s]*)[\s]+<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>(?<fld3>[^\s]*)[\s]+<SsoBindingValidationLevel>(?<fld22>[^<]*)</SsoBindingValidationLevel>[\s]+(?<fld44>[^\s]*)[\s]+<Server>(?<application>[^<]*)</Server>(?<fld10>[^<]*)<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>(?<fld5>[^<]*)<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>(?<fld6>[^<]*)<IpAddress>(?<saddr>[^<]*)</IpAddress>(?<fld7>[^\s]*)[\s]+(<ForwardedIpAddress>(?<ip.orig>[^<]*)</ForwardedIpAddress>|<ForwardedIpAddress[\s]+/>)[\s]+(?<fld50>[^\s]*)[\s]+<ProxyIpAddress>(?<fld88>[^<]*)</ProxyIpAddress>[\s]+(?<fld51>[^\s]*)[\s]+<NetworkIpAddress>(?<hostip>[^<]*)</NetworkIpAddress>[\s]+(?<fld52>[^\s]*)[\s]+<ProxyServer>(?<hostname>[^<]*)</ProxyServer>(?<fld8>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Security_1203_AD:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1203_AD:01"
					"[rsa][message][id1]" => "Security_1203_AD:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_1203_AD
		# line in RSA: <event_description> See XML for failure details.<fld1>Activity ID:<process_id> Additional Data<fld9>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld81><<ErrorCode> <resultcode> <</ErrorCode><fld2> <<RelyingParty><federated_sp><</RelyingParty> <fld43> <<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId><fld3> <<SsoBindingValidationLevel><fld22><</SsoBindingValidationLevel> <fld44> <<Server><application><</Server><fld10><<AuthProtocol><protocol><</AuthProtocol><fld5><<NetworkLocation><netname><</NetworkLocation><fld6><<IpAddress><saddr><</IpAddress><fld7><<ProxyServer><hostname><</ProxyServer><fld8><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+failure[\s]+details\.(?<fld1>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld9>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld81>[^<]*)<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>(?<fld2>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld43>[^\s]*)[\s]+<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>(?<fld3>[^\s]*)[\s]+<SsoBindingValidationLevel>(?<fld22>[^<]*)</SsoBindingValidationLevel>[\s]+(?<fld44>[^\s]*)[\s]+<Server>(?<application>[^<]*)</Server>(?<fld10>[^<]*)<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>(?<fld5>[^<]*)<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>(?<fld6>[^<]*)<IpAddress>(?<saddr>[^<]*)</IpAddress>(?<fld7>[^<]*)<ProxyServer>(?<hostname>[^<]*)</ProxyServer>(?<fld8>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+$" }
				id => "message-Security_1203_AD"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1203_AD"
					"[rsa][message][id1]" => "Security_1203_AD"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_1206_AD" {
		# MESSAGE Security_1206_AD:01
		# line in RSA: <event_description> See XML for failure details.<fld1>Activity ID:<process_id> Additional Data<fld8>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld22><<ErrorCode> <resultcode> <</ErrorCode><fld2><<Server><application><</Server><fld3><<AuthProtocol><protocol><</AuthProtocol><fld10><<NetworkLocation><netname><</NetworkLocation><fld5><<IpAddress><saddr><</IpAddress><fld6> {<<ForwardedIpAddress><ip.orig><</ForwardedIpAddress>|<<ForwardedIpAddress />}<fld66><<ProxyIpAddress><fld88><</ProxyIpAddress><fld64><<NetworkIpAddress><hostip><</NetworkIpAddress><fld65><<ProxyServer><hostname><</ProxyServer><fld7><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> <<SignedInRPs><fld60><<SignedInRPs><federated_sp><</SignedInRPs><fld61><</SignedInRPs><fld70>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+failure[\s]+details\.(?<fld1>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld8>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld22>[^<]*)<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>(?<fld2>[^<]*)<Server>(?<application>[^<]*)</Server>(?<fld3>[^<]*)<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>(?<fld10>[^<]*)<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>(?<fld5>[^<]*)<IpAddress>(?<saddr>[^<]*)</IpAddress>(?<fld6>[^\s]*)[\s]+(<ForwardedIpAddress>(?<ip.orig>[^<]*)</ForwardedIpAddress>|<ForwardedIpAddress[\s]+/>)(?<fld66>[^<]*)<ProxyIpAddress>(?<fld88>[^<]*)</ProxyIpAddress>(?<fld64>[^<]*)<NetworkIpAddress>(?<hostip>[^<]*)</NetworkIpAddress>(?<fld65>[^<]*)<ProxyServer>(?<hostname>[^<]*)</ProxyServer>(?<fld7>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld45>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+<SignedInRPs>(?<fld60>[^<]*)<SignedInRPs>(?<federated_sp>[^<]*)</SignedInRPs>(?<fld61>[^<]*)</SignedInRPs>(?<fld70>.*)$" }
				id => "message-Security_1206_AD:01"
				add_field => {
				"ec_activity" => "Logoff"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1206_AD:01"
					"[rsa][message][id1]" => "Security_1206_AD:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_1206_AD
		# line in RSA: <event_description> See XML for failure details.<fld1>Activity ID:<process_id> Additional Data<fld8>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld22><<ErrorCode> <resultcode> <</ErrorCode><fld2><<Server><application><</Server><fld3><<AuthProtocol><protocol><</AuthProtocol><fld10><<NetworkLocation><netname><</NetworkLocation><fld5><<IpAddress><saddr><</IpAddress><fld6><<ProxyServer><hostname><</ProxyServer><fld7><<UserAgentString><user_agent><</UserAgentString> <fld45> <<Endpoint><url><</Endpoint> <fld4> <<SignedInRPs><fld60><<SignedInRPs><federated_sp><</SignedInRPs><fld61><</SignedInRPs> <fld62>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} See XML for failure details.%{fld1}Activity ID:%{process_id} Additional Data%{fld8}XML: %{info} <AuditType>%{event_type}</AuditType> %{fld41} <AuditResult> %{disposition} </AuditResult> %{fld42} <FailureType>%{result}</FailureType> %{fld22}<ErrorCode> %{resultcode} </ErrorCode>%{fld2}<Server>%{application}</Server>%{fld3}<AuthProtocol>%{protocol}</AuthProtocol>%{fld10}<NetworkLocation>%{netname}</NetworkLocation>%{fld5}<IpAddress>%{saddr}</IpAddress>%{fld6}<ProxyServer>%{hostname}</ProxyServer>%{fld7}<UserAgentString>%{user_agent}</UserAgentString> %{fld45} <Endpoint>%{url}</Endpoint> %{fld4} <SignedInRPs>%{fld60}<SignedInRPs>%{federated_sp}</SignedInRPs>%{fld61}</SignedInRPs> %{fld62}" }
				id => "message-Security_1206_AD"
				add_field => {
				"ec_activity" => "Logoff"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1206_AD"
					"[rsa][message][id1]" => "Security_1206_AD"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_1210_AD" {
		# MESSAGE Security_1210_AD:01
		# line in RSA: <event_description> See XML for failure details.<fld1>Activity ID:<process_id> Additional Data<fld8>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld22><<ErrorCode> <resultcode> <</ErrorCode> <fld67> <<RelyingParty><federated_sp><</RelyingParty> <fld2><<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId><fld3><<Server><application><</Server><fld9><<AuthProtocol><protocol><</AuthProtocol><fld10><<NetworkLocation><netname><</NetworkLocation><fld5><<IpAddress><saddr><</IpAddress><fld6>{<<ForwardedIpAddress><ip.orig><</ForwardedIpAddress>|<<ForwardedIpAddress />}<fld66><<ProxyIpAddress><fld88><</ProxyIpAddress><fld64><<NetworkIpAddress><hostip><</NetworkIpAddress><fld65><<ProxyServer><hostname><</ProxyServer><fld7><<UserAgentString><user_agent><</UserAgentString> <fld77> <<Endpoint><url><</Endpoint> <fld4> <<CurrentBadPasswordCount><dclass_counter1><</CurrentBadPasswordCount><fld70><<ConfigBadPasswordCount><dclass_counter2><</ConfigBadPasswordCount><fld71><<LastBadAttempt><event_time_string><</LastBadAttempt><fld72><<LockoutWindowConfig><duration_string><</LockoutWindowConfig> <fld73>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
		# MESSAGE Security_1210_AD
		# line in RSA: <event_description> See XML for failure details.<fld1>Activity ID:<process_id> Additional Data<fld8>XML: <info> <<AuditType><event_type><</AuditType> <fld41> <<AuditResult> <disposition> <</AuditResult> <fld42> <<FailureType><result><</FailureType> <fld22><<ErrorCode> <resultcode> <</ErrorCode> <fld67> <<RelyingParty><federated_sp><</RelyingParty> <fld2><<UserId>{<domain>\<username>|<username>@<domain>|<username>}<</UserId><fld3><<Server><application><</Server><fld9><<AuthProtocol><protocol><</AuthProtocol><fld10><<NetworkLocation><netname><</NetworkLocation><fld5><<IpAddress><saddr><</IpAddress><fld6><<ProxyServer><hostname><</ProxyServer><fld7><<UserAgentString><user_agent><</UserAgentString> <fld77> <<Endpoint><url><</Endpoint> <fld4> <<CurrentBadPasswordCount><dclass_counter1><</CurrentBadPasswordCount><fld70><<ConfigBadPasswordCount><dclass_counter2><</ConfigBadPasswordCount><fld71><<LastBadAttempt><event_time_string><</LastBadAttempt><fld72><<LockoutWindowConfig><duration_string><</LockoutWindowConfig> <fld73>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+See[\s]+XML[\s]+for[\s]+failure[\s]+details\.(?<fld1>[^A]*)Activity[\s]+ID:(?<process_id>[^\s]*)[\s]+Additional[\s]+Data(?<fld8>[^X]*)XML:[\s]+(?<info>[^\s]*)[\s]+<AuditType>(?<event_type>[^<]*)</AuditType>[\s]+(?<fld41>[^\s]*)[\s]+<AuditResult>[\s]+(?<disposition>[^\s]*)[\s]+</AuditResult>[\s]+(?<fld42>[^\s]*)[\s]+<FailureType>(?<result>[^<]*)</FailureType>[\s]+(?<fld22>[^<]*)<ErrorCode>[\s]+(?<resultcode>[^\s]*)[\s]+</ErrorCode>[\s]+(?<fld67>[^\s]*)[\s]+<RelyingParty>(?<federated_sp>[^<]*)</RelyingParty>[\s]+(?<fld2>[^<]*)<UserId>((?<domain>[^\\]*)\\(?<username>[^<]*)|(?<username>[^@]*)@(?<domain>[^<]*)|(?<username>[^<]*))</UserId>(?<fld3>[^<]*)<Server>(?<application>[^<]*)</Server>(?<fld9>[^<]*)<AuthProtocol>(?<protocol>[^<]*)</AuthProtocol>(?<fld10>[^<]*)<NetworkLocation>(?<netname>[^<]*)</NetworkLocation>(?<fld5>[^<]*)<IpAddress>(?<saddr>[^<]*)</IpAddress>(?<fld6>[^<]*)<ProxyServer>(?<hostname>[^<]*)</ProxyServer>(?<fld7>[^<]*)<UserAgentString>(?<user_agent>[^<]*)</UserAgentString>[\s]+(?<fld77>[^\s]*)[\s]+<Endpoint>(?<url>[^<]*)</Endpoint>[\s]+(?<fld4>[^\s]*)[\s]+<CurrentBadPasswordCount>(?<dclass_counter1>[^<]*)</CurrentBadPasswordCount>(?<fld70>[^<]*)<ConfigBadPasswordCount>(?<dclass_counter2>[^<]*)</ConfigBadPasswordCount>(?<fld71>[^<]*)<LastBadAttempt>(?<event_time_string>[^<]*)</LastBadAttempt>(?<fld72>[^<]*)<LockoutWindowConfig>(?<duration_string>[^<]*)</LockoutWindowConfig>[\s]+(?<fld73>.*)$" }
				id => "message-Security_1210_AD"
				add_field => {
				"ec_activity" => "Lockout"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_1210_AD"
					"[rsa][message][id1]" => "Security_1210_AD"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId293
	# line in RSA: <event_description> See inner exception for more details. <fld1> Additional Data <fld2> Activity ID:<process_id> Token Type: <fld3> Client IP: <saddr> Error message: <username>-<info> Exception details:<fld4>
	else if [logstash][msgparser][id] == "msgParserId293" {
		dissect {
			mapping => { "message" => "%{event_description} See inner exception for more details. %{fld1} Additional Data %{fld2} Activity ID:%{process_id} Token Type: %{fld3} Client IP: %{saddr} Error message: %{username}-%{info} Exception details:%{fld4}" }
			id => "msgParserId293"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "AD FS Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId294
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Task Information:  Task Name: <service>  Task Content:  <info>
	else if [logstash][msgparser][id] == "msgParserId294" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Task Information:  Task Name: %{service}  Task Content:  %{info}" }
			id => "msgParserId294"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId295
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Task Information:  Task Name: <service>  Task Content:  <info>
	else if [logstash][msgparser][id] == "msgParserId295" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Task Information:  Task Name: %{service}  Task Content:  %{info}" }
			id => "msgParserId295"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId296
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Task Information:  Task Name: <service>  Task New Content:  <info>
	else if [logstash][msgparser][id] == "msgParserId296" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Task Information:  Task Name: %{service}  Task New Content:  %{info}" }
			id => "msgParserId296"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId297
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Target Account:  Account Name:  <realm>    New Right:  User Right:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId297" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Target Account:  Account Name:  %{realm}    New Right:  User Right:  %{privilege}" }
			id => "msgParserId297"
			add_field => {
				"ec_subject" => "Permission"
				"ec_activity" => "Modify"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId298
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Target Account:  Account Name:  <realm>    Removed Right:  User Right:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId298" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Target Account:  Account Name:  %{realm}    Removed Right:  User Right:  %{privilege}" }
			id => "msgParserId298"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_subject" => "Permission"
				"ec_activity" => "Delete"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId299
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Trusted Domain:  Domain Name:  <remote_domain>  Domain ID:  <remote_domain_id>  Trust Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId299" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Trusted Domain:  Domain Name:  %{remote_domain}  Domain ID:  %{remote_domain_id}  Trust Information:  %{info}" }
			id => "msgParserId299"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId300
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Domain Information:  Domain Name:  <remote_domain>  Domain ID:  <remote_domain_id>
	else if [logstash][msgparser][id] == "msgParserId300" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Domain Information:  Domain Name:  %{remote_domain}  Domain ID:  %{remote_domain_id}" }
			id => "msgParserId300"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId301
	# line in RSA: <event_description>   Policy Source:  <info>
	else if [logstash][msgparser][id] == "msgParserId301" {
		dissect {
			mapping => { "message" => "%{event_description}   Policy Source:  %{info}" }
			id => "msgParserId301"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId302
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Changes Made:  <policy_value>
	else if [logstash][msgparser][id] == "msgParserId302" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Changes Made:  %{policy_value}" }
			id => "msgParserId302"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4714_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4714_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Changes Made:  <policy_value>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Changes Made:  %{policy_value}" }
				id => "message-Security_4714_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4714_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4714_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4714_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-Security_4714_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4714_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4714_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId303
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Audit Policy Change:  Original Security Descriptor: <change_old> New Security Descriptor: <change_new>
	else if [logstash][msgparser][id] == "msgParserId303" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Audit Policy Change:  Original Security Descriptor: %{change_old} New Security Descriptor: %{change_new}" }
			id => "msgParserId303"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId304
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Trusted Domain:  Domain Name:  <remote_domain>  Domain ID:  <remote_domain_id>  New Trust Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId304" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Trusted Domain:  Domain Name:  %{remote_domain}  Domain ID:  %{remote_domain_id}  New Trust Information:  %{info}" }
			id => "msgParserId304"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId305
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Account Modified:  Account Name:  <realm>  Access Granted:  Access Right:  <accesses>
	else if [logstash][msgparser][id] == "msgParserId305" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Account Modified:  Account Name:  %{realm}  Access Granted:  Access Right:  %{accesses}" }
			id => "msgParserId305"
			add_field => {
				"ec_subject" => "Permission"
				"ec_activity" => "Modify"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"c_username" => "%{realm}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId306
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Account Modified:  Account Name:  <realm>  Access Removed:  Access Right:  <accesses>
	else if [logstash][msgparser][id] == "msgParserId306" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Account Modified:  Account Name:  %{realm}  Access Removed:  Access Right:  %{accesses}" }
			id => "msgParserId306"
			add_field => {
				"ec_theme" => "AccessControl"
				"ec_subject" => "Permission"
				"ec_activity" => "Delete"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"c_username" => "%{realm}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId307
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Audit Policy Change:  Category:  <category>  Subcategory: <subcategory>  Subcategory GUID: <fld66>  Changes: <policy_value>
	else if [logstash][msgparser][id] == "msgParserId307" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}   Account Name:  %{username}     Account Domain:  %{domain}   Logon ID:  %{sessionid}    Audit Policy Change:  Category:  %{category}  Subcategory: %{subcategory}  Subcategory GUID: %{fld66}  Changes: %{policy_value}" }
			id => "msgParserId307"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId308
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    New Account:  Security ID:  <fld39>   Account Name:  <c_username>   Account Domain:  <c_domain>    Attributes:  SAM Account Name: <user_fullname>  Display Name:  {-|<fld1>} User Principal Name: {-|<fld2>} Home Directory: {-|<fld3>} Home Drive: {-|<fld4>} Script Path: {-|<fld5>} Profile Path: {-|<fld6>} User Workstations: {-|<fld7>} Password Last Set: {-|<fld8>} Account Expires: {-|<fld9>} Primary Group ID: {-|<groupid>} Allowed To Delegate To: {-|<fld11>} Old UAC Value:{-|<change_old>} New UAC Value: {-|<change_new>} User Account Control: {-|<fld14>} User Parameters: {-|<fld15>} SID History: {-|<fld16>} Logon Hours: {-|<fld17>} Additional Information: <info> Privileges <privilege>
	else if [logstash][msgparser][id] == "msgParserId308" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+New[\s]+Account:[\s]+Security[\s]+ID:[\s]+(?<fld39>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Attributes:[\s]+SAM[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Display[\s]+Name:[\s]+(\-|(?<fld1>[^\s]*))[\s]+User[\s]+Principal[\s]+Name:[\s]+(\-|(?<fld2>[^\s]*))[\s]+Home[\s]+Directory:[\s]+(\-|(?<fld3>[^\s]*))[\s]+Home[\s]+Drive:[\s]+(\-|(?<fld4>[^\s]*))[\s]+Script[\s]+Path:[\s]+(\-|(?<fld5>[^\s]*))[\s]+Profile[\s]+Path:[\s]+(\-|(?<fld6>[^\s]*))[\s]+User[\s]+Workstations:[\s]+(\-|(?<fld7>[^\s]*))[\s]+Password[\s]+Last[\s]+Set:[\s]+(\-|(?<fld8>[^\s]*))[\s]+Account[\s]+Expires:[\s]+(\-|(?<fld9>[^\s]*))[\s]+Primary[\s]+Group[\s]+ID:[\s]+(\-|(?<groupid>[^\s]*))[\s]+Allowed[\s]+To[\s]+Delegate[\s]+To:[\s]+(\-|(?<fld11>[^\s]*))[\s]+Old[\s]+UAC[\s]+Value:(\-|(?<change_old>[^\s]*))[\s]+New[\s]+UAC[\s]+Value:[\s]+(\-|(?<change_new>[^\s]*))[\s]+User[\s]+Account[\s]+Control:[\s]+(\-|(?<fld14>[^\s]*))[\s]+User[\s]+Parameters:[\s]+(\-|(?<fld15>[^\s]*))[\s]+SID[\s]+History:[\s]+(\-|(?<fld16>[^\s]*))[\s]+Logon[\s]+Hours:[\s]+(\-|(?<fld17>[^\s]*))[\s]+Additional[\s]+Information:[\s]+(?<info>[^\s]*)[\s]+Privileges[\s]+(?<privilege>.*)$" }
			id => "msgParserId308"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId309
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Target Account:  Security ID:  <fld39>   Account Name:  <c_username>   Account Domain:  <c_domain>
	else if [logstash][msgparser][id] == "msgParserId309" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}   Account Name:  %{username}     Account Domain:  %{domain}   Logon ID:  %{sessionid}    Target Account:  Security ID:  %{fld39}   Account Name:  %{c_username}   Account Domain:  %{c_domain}" }
			id => "msgParserId309"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId310
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Target Account:  Security ID:  <fld39>  Account Name:  <c_username>  Account Domain:  <c_domain>  Additional Information:  Privileges  <privilege>
	else if [logstash][msgparser][id] == "msgParserId310" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Target Account:  Security ID:  %{fld39}  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Additional Information:  Privileges  %{privilege}" }
			id => "msgParserId310"
			add_field => {
				"ec_theme" => "Password"
				"ec_subject" => "Password"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId311
	# line in RSA: <event_description>   Subject:  Security ID: <sid> Account Name: <username>   Account Domain: <domain> Logon ID: <sessionid> Target Account:  Security ID: <fld39> Account Name: <c_username> Account Domain: <c_domain>
	else if [logstash][msgparser][id] == "msgParserId311" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid} Account Name: %{username}   Account Domain: %{domain} Logon ID: %{sessionid} Target Account:  Security ID: %{fld39} Account Name: %{c_username} Account Domain: %{c_domain}" }
			id => "msgParserId311"
			add_field => {
				"ec_theme" => "Password"
				"ec_subject" => "Password"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId312
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Deleted Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId312" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Deleted Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId312"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId313
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId313" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId313"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId314
	# line in RSA: <event_description>   Subject:  Security ID: <sid> Account Name: <username>   Account Domain: <domain> Logon ID: <sessionid> Group:  Security ID: <groupid> Group Name: <group> Group Domain:  <remote_domain>    Changed Attributes:  <param>    Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId314" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid} Account Name: %{username}   Account Domain: %{domain} Logon ID: %{sessionid} Group:  Security ID: %{groupid} Group Name: %{group} Group Domain:  %{remote_domain}    Changed Attributes:  %{param}    Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId314"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4738_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4738_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>   Subject:  Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Target Account:  Security ID:  <fld39>   Account Name:  <c_username>   Account Domain:  <c_domain>    Changed Attributes: <space>  SAM Account Name: <user_fullname>  Display Name:  <param> User Workstations: <hostid> Password Last Set: { <space>-<space> Account | <<never> <space> Account | <fld7> Account } Expires: { <space>-<space> Primary | <<never> <fld89> Primary | <fld8> Primary } Group ID: <groupid> AllowedToDelegateTo: <fld88> Old UAC Value:  <change_old>   New UAC Value:  <change_new>  { User Account Control: <info> 'Password Not Required' - <fld91> 'Don't Expire Password' - <action> | User Account Control:<info> 'Password Not Required' - <fld91> |User Account Control:<info> 'Don't Expire Password' - <action> |User Account Control: <info>} User Parameters: <fld92> SID History: <fld93> Logon Hours: <fld94> Additional Information: <fld95> Privileges <privilege>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Target[\s]+Account:[\s]+Security[\s]+ID:[\s]+(?<fld39>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Changed[\s]+Attributes:[\s]+(?<space>[^\s]*)[\s]+SAM[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Display[\s]+Name:[\s]+(?<param>[^\s]*)[\s]+User[\s]+Workstations:[\s]+(?<hostid>[^\s]*)[\s]+Password[\s]+Last[\s]+Set:[\s]+([\s]*(?<space>[^\-]*)\-(?<space>[^\s]*)[\s]+Account[\s]+|[\s]*<never>[\s]+(?<space>[^\s]*)[\s]+Account[\s]+|[\s]*(?<fld7>[^\s]*)[\s]+Account[\s]+)[\s]+Expires:[\s]+([\s]*(?<space>[^\-]*)\-(?<space>[^\s]*)[\s]+Primary[\s]+|[\s]*<never>[\s]+(?<fld89>[^\s]*)[\s]+Primary[\s]+|[\s]*(?<fld8>[^\s]*)[\s]+Primary[\s]+)[\s]+Group[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+AllowedToDelegateTo:[\s]+(?<fld88>[^\s]*)[\s]+Old[\s]+UAC[\s]+Value:[\s]+(?<change_old>[^\s]*)[\s]+New[\s]+UAC[\s]+Value:[\s]+(?<change_new>[^\s]*)[\s]+([\s]*User[\s]+Account[\s]+Control:[\s]+(?<info>[^\s]*)[\s]+'Password[\s]+Not[\s]+Required'[\s]+\-[\s]+(?<fld91>[^\s]*)[\s]+'Don't[\s]+Expire[\s]+Password'[\s]+\-[\s]+(?<action>[^\s]*)[\s]+|[\s]*User[\s]+Account[\s]+Control:(?<info>[^\s]*)[\s]+'Password[\s]+Not[\s]+Required'[\s]+\-[\s]+(?<fld91>[^\s]*)[\s]+|User[\s]+Account[\s]+Control:(?<info>[^\s]*)[\s]+'Don't[\s]+Expire[\s]+Password'[\s]+\-[\s]+(?<action>[^\s]*)[\s]+|User[\s]+Account[\s]+Control:[\s]+(?<info>[^\s]*))[\s]+User[\s]+Parameters:[\s]+(?<fld92>[^\s]*)[\s]+SID[\s]+History:[\s]+(?<fld93>[^\s]*)[\s]+Logon[\s]+Hours:[\s]+(?<fld94>[^\s]*)[\s]+Additional[\s]+Information:[\s]+(?<fld95>[^\s]*)[\s]+Privileges[\s]+(?<privilege>.*)$" }
				id => "message-Security_4738_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4738_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4738_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4738_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject:  Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Target Account:  Security ID:  <fld39>   Account Name:  <c_username>   Account Domain:  <c_domain>    Changed Attributes: <space>  SAM Account Name: <user_fullname>  Display Name:  <param> Additional Information:  Privileges <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}   Account Name:  %{username}     Account Domain:  %{domain}   Logon ID:  %{sessionid}    Target Account:  Security ID:  %{fld39}   Account Name:  %{c_username}   Account Domain:  %{c_domain}    Changed Attributes: %{space}  SAM Account Name: %{user_fullname}  Display Name:  %{param} Additional Information:  Privileges %{privilege}" }
				id => "message-Security_4738_Microsoft-Windows-Security-Auditing"
				add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4738_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4738_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId317
	# line in RSA: <event_description>   Subject:<space>Security ID:  <fld39>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <fld41>  Account That Was Locked Out:<space>Security ID:  <sid>  Account Name:  <c_username>  Additional Information:<space>Caller Computer Name: <shost>
	else if [logstash][msgparser][id] == "msgParserId317" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:%{space}Security ID:  %{fld39}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{fld41}  Account That Was Locked Out:%{space}Security ID:  %{sid}  Account Name:  %{c_username}  Additional Information:%{space}Caller Computer Name: %{shost}" }
			id => "msgParserId317"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Lockout"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4742_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4742_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>   Subject: <space> Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Computer Account That Was Changed: <space> Security ID:  <fld39>   Account Name:  <c_username>   Account Domain:  <c_domain>    Changed Attributes: <space>  SAM Account Name: {-|<user_fullname>}  Display Name:{-|<fld1>} User Principal Name: {-|<fld2>} Home Directory: {-|<fld3>} Home Drive: {-|<fld4>} Script Path: {-|<fld5>} Profile Path: {-|<fld6>} User Workstations: {-|<fld7>} Password Last Set: {-|<fld8>} Account Expires: {-|<fld9>} Primary Group ID: {-|<groupid>} AllowedToDelegateTo: {-|<fld11>} Old UAC Value:{-|<change_old>} New UAC Value: {-|<change_new>} User Account Control: {-|<fld14>} User Parameters: {-|<fld15>} SID History: {-|<fld16>} Logon Hours: {-|<fld17>} DNS Host Name: {-|<fqdn>} Service Principal Names: {-|<fld20>} Additional Information: <space> Privileges: <privilege>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Computer[\s]+Account[\s]+That[\s]+Was[\s]+Changed:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<fld39>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<c_domain>[^\s]*)[\s]+Changed[\s]+Attributes:[\s]+(?<space>[^\s]*)[\s]+SAM[\s]+Account[\s]+Name:[\s]+(\-|(?<user_fullname>[^\s]*))[\s]+Display[\s]+Name:(\-|(?<fld1>[^\s]*))[\s]+User[\s]+Principal[\s]+Name:[\s]+(\-|(?<fld2>[^\s]*))[\s]+Home[\s]+Directory:[\s]+(\-|(?<fld3>[^\s]*))[\s]+Home[\s]+Drive:[\s]+(\-|(?<fld4>[^\s]*))[\s]+Script[\s]+Path:[\s]+(\-|(?<fld5>[^\s]*))[\s]+Profile[\s]+Path:[\s]+(\-|(?<fld6>[^\s]*))[\s]+User[\s]+Workstations:[\s]+(\-|(?<fld7>[^\s]*))[\s]+Password[\s]+Last[\s]+Set:[\s]+(\-|(?<fld8>[^\s]*))[\s]+Account[\s]+Expires:[\s]+(\-|(?<fld9>[^\s]*))[\s]+Primary[\s]+Group[\s]+ID:[\s]+(\-|(?<groupid>[^\s]*))[\s]+AllowedToDelegateTo:[\s]+(\-|(?<fld11>[^\s]*))[\s]+Old[\s]+UAC[\s]+Value:(\-|(?<change_old>[^\s]*))[\s]+New[\s]+UAC[\s]+Value:[\s]+(\-|(?<change_new>[^\s]*))[\s]+User[\s]+Account[\s]+Control:[\s]+(\-|(?<fld14>[^\s]*))[\s]+User[\s]+Parameters:[\s]+(\-|(?<fld15>[^\s]*))[\s]+SID[\s]+History:[\s]+(\-|(?<fld16>[^\s]*))[\s]+Logon[\s]+Hours:[\s]+(\-|(?<fld17>[^\s]*))[\s]+DNS[\s]+Host[\s]+Name:[\s]+(\-|(?<fqdn>[^\s]*))[\s]+Service[\s]+Principal[\s]+Names:[\s]+(\-|(?<fld20>[^\s]*))[\s]+Additional[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Privileges:[\s]+(?<privilege>.*)$" }
				id => "message-Security_4742_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"change_attribute" => "UAC value"
					"[event][id]" => "Security_4742_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4742_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4742_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject: <space> Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Computer Account That Was Changed: <space> Security ID:  <fld39>   Account Name:  <c_username>   Account Domain:  <c_domain>    Changed Attributes: <space>  SAM Account Name: <user_fullname>  Display Name:  <param> Additional Information: <space> Privileges: <privilege>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject: %{space} Security ID:  %{sid}   Account Name:  %{username}     Account Domain:  %{domain}   Logon ID:  %{sessionid}    Computer Account That Was Changed: %{space} Security ID:  %{fld39}   Account Name:  %{c_username}   Account Domain:  %{c_domain}    Changed Attributes: %{space}  SAM Account Name: %{user_fullname}  Display Name:  %{param} Additional Information: %{space} Privileges: %{privilege}" }
				id => "message-Security_4742_Microsoft-Windows-Security-Auditing"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4742_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4742_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1402020300"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId320
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  New Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Attributes:  <param> Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId320" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  New Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Attributes:  %{param} Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId320"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId321
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Changed Attributes:  <param> Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId321" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Changed Attributes:  %{param} Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId321"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId322
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Member:  Security ID:  <fld39>  Account Name:  <c_username>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information: <space> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId322" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Member:  Security ID:  %{fld39}  Account Name:  %{c_username}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information: %{space} Privileges: %{privilege}" }
			id => "msgParserId322"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId323
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Member:  Security ID:  <fld39>  Account Name:  <c_username>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information: <space> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId323" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Member:  Security ID:  %{fld39}  Account Name:  %{c_username}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information: %{space} Privileges: %{privilege}" }
			id => "msgParserId323"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId324
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information: <space> Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId324" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information: %{space} Privileges: %{privilege}" }
			id => "msgParserId324"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId325
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Attributes: <param> Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId325" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Attributes: %{param} Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId325"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId326
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Changed Attributes: <param> Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId326" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Changed Attributes: %{param} Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId326"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId327
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid> Group Name:  <group>  Group Domain:  <remote_domain> Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId327" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid} Group Name:  %{group}  Group Domain:  %{remote_domain} Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId327"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId328
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Attributes: <param>    Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId328" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Attributes: %{param}    Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId328"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId329
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Changed Attributes:   <param>    Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId329" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Changed Attributes:   %{param}    Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId329"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId330
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Member:  Security ID:  <c_sid>  Account Name:{<fld15>cn=<c_username>,ou=<fld16>|<fld15>CN=<c_username>,OU=<fld16>|<fld15>CN=<c_username> <fld16>|<c_username>}  Group:  Security ID:  <groupid>  {Account Name: | Group Name:} <group>  {Account Domain: | Group Domain: } <remote_domain>  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId330" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Member:[\s]+Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:((?<fld15>[^c]*)cn=(?<c_username>[^,]*),ou=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^,]*),OU=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^\s]*)[\s]+(?<fld16>[^\s]*)|(?<c_username>[^\s]*))[\s]+Group:[\s]+Security[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+(Account[\s]+Name:[\s]+|[\s]*Group[\s]+Name:)[\s]+(?<group>[^\s]*)[\s]+(Account[\s]+Domain:[\s]+|[\s]*Group[\s]+Domain:[\s]+)[\s]+(?<remote_domain>[^\s]*)[\s]+Additional[\s]+Information:[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId330"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId331
	# line in RSA: <event_description>   Subject:<space>Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Member:<space>Security ID:  <c_sid>  Account Name: {<fld15>cn=<c_username>,ou=<fld16>|<fld15>CN=<c_username>,OU=<fld16>|<fld15>CN=<c_username> <fld16>|<c_username>}  Group:<space>Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:<space>Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId331" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Member:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+((?<fld15>[^c]*)cn=(?<c_username>[^,]*),ou=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^,]*),OU=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^\s]*)[\s]+(?<fld16>[^\s]*)|(?<c_username>[^\s]*))[\s]+Group:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+Group[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Group[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+Additional[\s]+Information:(?<space>[^P]*)Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId331"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId332
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId332" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId332"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId333
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Attributes:  <param>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId333" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Attributes:  %{param}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId333"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId334
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Changed Attributes:  <param>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId334" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Changed Attributes:  %{param}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId334"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId335
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Member:  Security ID:  <c_sid>  Account Name:  <c_username>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId335" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Member:  Security ID:  %{c_sid}  Account Name:  %{c_username}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId335"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId336
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId336" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId336"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId337
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Target Account:  Security ID:  <fld39>  Account Name:  <c_username>  Account Domain:  <c_domain>  Source Account:  <info>  Additional Information:  Privileges: <privilege>  SID List:   <fld89>
	else if [logstash][msgparser][id] == "msgParserId337" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Target Account:  Security ID:  %{fld39}  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Source Account:  %{info}  Additional Information:  Privileges: %{privilege}  SID List:   %{fld89}" }
			id => "msgParserId337"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId338
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Target Account:  Security ID:  <fld39>  Account Name:  <c_username>  Account Domain:  <c_domain>  Source Account  <info>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId338" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Target Account:  Security ID:  %{fld39}  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Source Account  %{info}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId338"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"ec_outcome" => "Error"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId339
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Target Account:  Security ID:  <fld39>  Account Name:  <c_username>  Account Domain:  <c_domain>
	else if [logstash][msgparser][id] == "msgParserId339" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Target Account:  Security ID:  %{fld39}  Account Name:  %{c_username}  Account Domain:  %{c_domain}" }
			id => "msgParserId339"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId340
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Target Account:  Security ID:  <fld39>  Account Name:  <c_username>  Account Domain:  <c_domain>
	else if [logstash][msgparser][id] == "msgParserId340" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Target Account:  Security ID:  %{fld39}  Account Name:  %{c_username}  Account Domain:  %{c_domain}" }
			id => "msgParserId340"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId341
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Target Account:  Security ID:  <fld39>  Account Name:  <c_username>  Account Domain:  <c_domain>  Additional Information:  Privileges <privilege>
	else if [logstash][msgparser][id] == "msgParserId341" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Target Account:  Security ID:  %{fld39}  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Additional Information:  Privileges %{privilege}" }
			id => "msgParserId341"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId342
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  New Group:  Security ID:  <groupid>   Group Name:  <group>  Group Domain:  <remote_domain>  Attributes:   <param>    Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId342" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  New Group:  Security ID:  %{groupid}   Group Name:  %{group}  Group Domain:  %{remote_domain}  Attributes:   %{param}    Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId342"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId343
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Member:  Security ID:  <c_sid>  Account Name:{<fld15>cn=<c_username>,ou=<fld16>|<fld15>cn=<c_username>,OU=<fld16>|<fld15>CN=<c_username>,OU=<fld16>|<fld15>CN=<c_username>,CN=<fld16>|<fld15>CN=<c_username> <fld16>|<c_username>}  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId343" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Member:[\s]+Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:((?<fld15>[^c]*)cn=(?<c_username>[^,]*),ou=(?<fld16>[^\s]*)|(?<fld15>[^c]*)cn=(?<c_username>[^,]*),OU=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^,]*),OU=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^,]*),CN=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^\s]*)[\s]+(?<fld16>[^\s]*)|(?<c_username>[^\s]*))[\s]+Group:[\s]+Security[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+Group[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Group[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+Additional[\s]+Information:[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId343"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId344
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Member:  Security ID:  <c_sid>  Account Name:{<fld15>cn=<c_username>,ou=<fld16>|<fld15>CN=<c_username>,OU=<fld16>|<fld15>CN=<c_username> <fld16>|<c_username>}  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId344" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Member:[\s]+Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:((?<fld15>[^c]*)cn=(?<c_username>[^,]*),ou=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^,]*),OU=(?<fld16>[^\s]*)|(?<fld15>[^C]*)CN=(?<c_username>[^\s]*)[\s]+(?<fld16>[^\s]*)|(?<c_username>[^\s]*))[\s]+Group:[\s]+Security[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+Group[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Group[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+Additional[\s]+Information:[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId344"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId345
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  New Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Attributes:   <param>    Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId345" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  New Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Attributes:   %{param}    Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId345"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId346
	# line in RSA: <event_description>   Subject:<space>Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Member:<space>Security ID:  <c_sid>  Account Name:  <c_username>  Group:<space>Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:<space>Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId346" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:%{space}Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Member:%{space}Security ID:  %{c_sid}  Account Name:  %{c_username}  Group:%{space}Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:%{space}Privileges:  %{privilege}" }
			id => "msgParserId346"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId347
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Member:  Security ID:  <c_sid>  Account Name:  <c_username>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId347" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Member:  Security ID:  %{c_sid}  Account Name:  %{c_username}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId347"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId348
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Changed Attributes: <param>
	else if [logstash][msgparser][id] == "msgParserId348" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Changed Attributes: %{param}" }
			id => "msgParserId348"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId349
	# line in RSA: <event_description>   Change Type: <change_attribute> Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Domain:  Domain Name:  <c_domain>  Domain ID:  <domain_id> Changed Attributes:  <param> Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId349" {
		dissect {
			mapping => { "message" => "%{event_description}   Change Type: %{change_attribute} Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Domain:  Domain Name:  %{c_domain}  Domain ID:  %{domain_id} Changed Attributes:  %{param} Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId349"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId350
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    New Computer Account:  Security ID:  <c_sid>   Account Name:  <c_username>   Account Domain:  <c_domain>    Attributes:   <param>  Additional Information:  Privileges  <privilege>
	else if [logstash][msgparser][id] == "msgParserId350" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}   Account Name:  %{username}     Account Domain:  %{domain}   Logon ID:  %{sessionid}    New Computer Account:  Security ID:  %{c_sid}   Account Name:  %{c_username}   Account Domain:  %{c_domain}    Attributes:   %{param}  Additional Information:  Privileges  %{privilege}" }
			id => "msgParserId350"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId351
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>   Account Name:  <username>     Account Domain:  <domain>   Logon ID:  <sessionid>    Target Computer:  Security ID:  <c_sid>   Account Name:  <c_username>   Account Domain:  <c_domain>    Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId351" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}   Account Name:  %{username}     Account Domain:  %{domain}   Logon ID:  %{sessionid}    Target Computer:  Security ID:  %{c_sid}   Account Name:  %{c_username}   Account Domain:  %{c_domain}    Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId351"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId352
	# line in RSA: <event_description>   Account Information: <space> Account Name:  <username>    Supplied Realm Name: <domain> User ID: <sid> Service Information: <space> Service Name: <service> Service ID: <fld60>  Network Information: <space> Client Address: { ::ffff:<saddr> | <saddr> } Client Port: <sport>  Additional Information: <space> Ticket Options: <fld26> Result Code: <resultcode> Ticket Encryption Type: <encryption_type> Pre-Authentication Type: <logon_type>  Certificate Information: <space> Certificate Issuer Name:  <cert_issuer>  Certificate Serial Number: <fld93>  Certificate Thumbprint: <fld94> Certificate information <fld50>
	else if [logstash][msgparser][id] == "msgParserId352" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Account[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Supplied[\s]+Realm[\s]+Name:[\s]+(?<domain>[^\s]*)[\s]+User[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Service[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Service[\s]+Name:[\s]+(?<service>[^\s]*)[\s]+Service[\s]+ID:[\s]+(?<fld60>[^\s]*)[\s]+Network[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Client[\s]+Address:[\s]+([\s]*::ffff:(?<saddr>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+Client[\s]+Port:[\s]+(?<sport>[^\s]*)[\s]+Additional[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Ticket[\s]+Options:[\s]+(?<fld26>[^\s]*)[\s]+Result[\s]+Code:[\s]+(?<resultcode>[^\s]*)[\s]+Ticket[\s]+Encryption[\s]+Type:[\s]+(?<encryption_type>[^\s]*)[\s]+Pre\-Authentication[\s]+Type:[\s]+(?<logon_type>[^\s]*)[\s]+Certificate[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Certificate[\s]+Issuer[\s]+Name:[\s]+(?<cert_issuer>[^\s]*)[\s]+Certificate[\s]+Serial[\s]+Number:[\s]+(?<fld93>[^\s]*)[\s]+Certificate[\s]+Thumbprint:[\s]+(?<fld94>[^\s]*)[\s]+Certificate[\s]+information[\s]+(?<fld50>.*)$" }
			id => "msgParserId352"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId353
	# line in RSA: <event_description>   Account Information: <space> Account Name:  <username>    Account Domain:  <domain>  Logon GUID:  <sessionid>  Service Information: <space> Service Name:  <service>  Service ID:  <fld60>  Network Information: <space> Client Address:  { ::ffff:<saddr> | <saddr> }  Client Port:  <sport>  Additional Information: <space> Ticket Options: <fld26>   Ticket Encryption Type: <encryption_type> Failure Code:  <resultcode>  Transited Services: <fld43> This event is generated <fld50>
	else if [logstash][msgparser][id] == "msgParserId353" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Account[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+GUID:[\s]+(?<sessionid>[^\s]*)[\s]+Service[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Service[\s]+Name:[\s]+(?<service>[^\s]*)[\s]+Service[\s]+ID:[\s]+(?<fld60>[^\s]*)[\s]+Network[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Client[\s]+Address:[\s]+([\s]*::ffff:(?<saddr>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+Client[\s]+Port:[\s]+(?<sport>[^\s]*)[\s]+Additional[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Ticket[\s]+Options:[\s]+(?<fld26>[^\s]*)[\s]+Ticket[\s]+Encryption[\s]+Type:[\s]+(?<encryption_type>[^\s]*)[\s]+Failure[\s]+Code:[\s]+(?<resultcode>[^\s]*)[\s]+Transited[\s]+Services:[\s]+(?<fld43>[^\s]*)[\s]+This[\s]+event[\s]+is[\s]+generated[\s]+(?<fld50>.*)$" }
			id => "msgParserId353"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId354
	# line in RSA: <event_description>   Account Information: <space> Account Name:  <username>    Account Domain:  <domain>  Service Information: <space> Service Name:  <service>  Service ID:  <fld60>  Network Information: <space> Client Address:  { ::ffff:<saddr> | <saddr> }  Client Port:  <sport> Additional Information: <space> Ticket Options: <fld26>   Ticket Encryption Type: <encryption_type> Ticket options and encryption types are defined in RFC 4120.
	else if [logstash][msgparser][id] == "msgParserId354" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Account[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Service[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Service[\s]+Name:[\s]+(?<service>[^\s]*)[\s]+Service[\s]+ID:[\s]+(?<fld60>[^\s]*)[\s]+Network[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Client[\s]+Address:[\s]+([\s]*::ffff:(?<saddr>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+Client[\s]+Port:[\s]+(?<sport>[^\s]*)[\s]+Additional[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Ticket[\s]+Options:[\s]+(?<fld26>[^\s]*)[\s]+Ticket[\s]+Encryption[\s]+Type:[\s]+(?<encryption_type>[^\s]*)[\s]+Ticket[\s]+options[\s]+and[\s]+encryption[\s]+types[\s]+are[\s]+defined[\s]+in[\s]+RFC[\s]+4120\.$" }
			id => "msgParserId354"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId355
	# line in RSA: <event_description>   Account Information: <space> Security ID:  <sid>  Account Name:  <username>    Service Information: <space> Service Name:  <service>  Network Information: <space> Client Address:  { ::ffff:<saddr> | <saddr> }  Client Port:  <sport>  Additional Information: <space> Ticket Options: <fld26>   Failure Code:  <resultcode> Pre-Authentication Type: <logon_type> Certificate Information: <space>{ Certificate Issuer Name: <user_fullname> Certificate Serial Number: <fld50> Certificate Thumbprint: <fld51> <fld52>| <fld52> }
	else if [logstash][msgparser][id] == "msgParserId355" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Account[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Service[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Service[\s]+Name:[\s]+(?<service>[^\s]*)[\s]+Network[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Client[\s]+Address:[\s]+([\s]*::ffff:(?<saddr>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+Client[\s]+Port:[\s]+(?<sport>[^\s]*)[\s]+Additional[\s]+Information:[\s]+(?<space>[^\s]*)[\s]+Ticket[\s]+Options:[\s]+(?<fld26>[^\s]*)[\s]+Failure[\s]+Code:[\s]+(?<resultcode>[^\s]*)[\s]+Pre\-Authentication[\s]+Type:[\s]+(?<logon_type>[^\s]*)[\s]+Certificate[\s]+Information:[\s]+(?<space>[^\s\s]*)([\s]*Certificate[\s]+Issuer[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Certificate[\s]+Serial[\s]+Number:[\s]+(?<fld50>[^\s]*)[\s]+Certificate[\s]+Thumbprint:[\s]+(?<fld51>[^\s]*)[\s]+(?<fld52>.*)|[\s]*(?<fld52>[^\s]*)[\s]+)$" }
			id => "msgParserId355"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId356
	# line in RSA: <event_description>   Account Information:  Account Name:  <username>    Supplied Realm Name: <domain>  Service Information:  Service Name: <service>  Network Information:  Client Address: <daddr>  Client Port: <dport>  Additional Information:  Ticket Options: <fld26>   Failure Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId356" {
		dissect {
			mapping => { "message" => "%{event_description}   Account Information:  Account Name:  %{username}    Supplied Realm Name: %{domain}  Service Information:  Service Name: %{service}  Network Information:  Client Address: %{daddr}  Client Port: %{dport}  Additional Information:  Ticket Options: %{fld26}   Failure Code: %{resultcode}" }
			id => "msgParserId356"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId357
	# line in RSA: <event_description>   Account Information:  Account Name:  <username>    Account Domain:  <domain>  Service Information:  Service Name: <service>  Network Information:  Client Address: <saddr>  Client Port: <sport>  Additional Information:  Ticket Options: <fld26>  Failure Code: <resultcode>  Ticket options and failure codes are defined in RFC 4120.
	else if [logstash][msgparser][id] == "msgParserId357" {
		dissect {
			mapping => { "message" => "%{event_description}   Account Information:  Account Name:  %{username}    Account Domain:  %{domain}  Service Information:  Service Name: %{service}  Network Information:  Client Address: %{saddr}  Client Port: %{sport}  Additional Information:  Ticket Options: %{fld26}  Failure Code: %{resultcode}  Ticket options and failure codes are defined in RFC 4120." }
			id => "msgParserId357"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId358
	# line in RSA: <event_description>   Authentication Package: <authmethod> Account UPN: <fld23> Mapped Name: <fld24>
	else if [logstash][msgparser][id] == "msgParserId358" {
		dissect {
			mapping => { "message" => "%{event_description}   Authentication Package: %{authmethod} Account UPN: %{fld23} Mapped Name: %{fld24}" }
			id => "msgParserId358"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId359
	# line in RSA: <event_description>   Authentication Package:  <authmethod> Account Name:  <c_username>
	else if [logstash][msgparser][id] == "msgParserId359" {
		dissect {
			mapping => { "message" => "%{event_description}   Authentication Package:  %{authmethod} Account Name:  %{c_username}" }
			id => "msgParserId359"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4776_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: { 0xc0000064 | 0xC0000064 }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+([\s]*0xc0000064[\s]+|[\s]*0xC0000064[\s]+)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "User name does not exist"
				"resultcode" => "0xc0000064"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:02
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: { 0xc000006a | 0xc000006A | 0xC000006A}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+([\s]*0xc000006a[\s]+|[\s]*0xc000006A[\s]+|[\s]*0xC000006A)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "User name is correct but the password is wrong"
				"resultcode" => "0xc000006A"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:02"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:03
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: { 0xc0000234 | 0xC0000234 }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+([\s]*0xc0000234[\s]+|[\s]*0xC0000234[\s]+)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Lockout"
				"ec_theme" => "Authentication"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "User is currently locked out"
				"resultcode" => "0xc0000234"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:03"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:04
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: {0xc0000072|0xC0000072}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+(0xc0000072|0xC0000072)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:04"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "Account is currently disabled"
				"resultcode" => "0xc0000072"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:04"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:05
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: { 0xc000006f | 0xc000006F }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+([\s]*0xc000006f[\s]+|[\s]*0xc000006F[\s]+)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:05"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "User tried to logon outside his day of week or time of day restrictions"
				"resultcode" => "0xc000006F"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:05"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:05"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:06
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: {0xc0000070|0xC0000070}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+(0xc0000070|0xC0000070)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:06"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "workstation restriction"
				"resultcode" => "0xc0000070"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:06"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:06"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:07
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: {0xc0000193|0xC0000193}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+(0xc0000193|0xC0000193)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:07"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "account expiration"
				"resultcode" => "0xc0000193"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:07"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:07"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:08
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: {0xc0000071|0xC0000071}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+(0xc0000071|0xC0000071)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:08"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "expired password"
				"resultcode" => "0xc0000071"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:08"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:08"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:09
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: {0xc0000224|0xC0000224}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+(0xc0000224|0xC0000224)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:09"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "user is required to change password at next logon"
				"resultcode" => "0xc0000224"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:09"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:09"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:10
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: {0xc0000225|0xC0000225}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+Authentication[\s]+Package:[\s]+(?<authmethod>[^\s]*)[\s]+Logon[\s]+Account:[\s]+(?<username>[^\s]*)[\s]+Source[\s]+Workstation:[\s]+(?<shost>[^\s]*)[\s]+Error[\s]+Code:[\s]+(0xc0000225|0xC0000225)$" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:10"
				add_field => {
				"ec_subject" => "OS"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "evidently a bug in Windows and not a risk"
				"resultcode" => "0xc0000225"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:10"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:10"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing:11
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: 0x0
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Authentication Package: %{authmethod} Logon Account: %{username}   Source Workstation: %{shost} Error Code: 0x0" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing:11"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"resultcode" => "0x0"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing:11"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing:11"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4776_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Authentication Package: %{authmethod} Logon Account: %{username}   Source Workstation: %{shost} Error Code: %{resultcode}" }
				id => "message-Security_4776_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"result" => "%{resultcode}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_4776_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4776_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId372
	# line in RSA: <event_description>   Authentication Package: <authmethod> Logon Account: <username>   Source Workstation: <shost> Error Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId372" {
		dissect {
			mapping => { "message" => "%{event_description}   Authentication Package: %{authmethod} Logon Account: %{username}   Source Workstation: %{shost} Error Code: %{resultcode}" }
			id => "msgParserId372"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId373
	# line in RSA: <event_description>   Subject:  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Session:  Session Name:  <sessionid1>  Additional Information:  Client Name: <shost> Client Address: <saddr> This event is generated <fld50>
	else if [logstash][msgparser][id] == "msgParserId373" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Session:  Session Name:  %{sessionid1}  Additional Information:  Client Name: %{shost} Client Address: %{saddr} This event is generated %{fld50}" }
			id => "msgParserId373"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId374
	# line in RSA: <event_description>   Subject:  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Session:  Session Name:  <sessionid1>  Additional Information:  Client Name: <shost> Client Address: <saddr> This event is generated <fld50>
	else if [logstash][msgparser][id] == "msgParserId374" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Session:  Session Name:  %{sessionid1}  Additional Information:  Client Name: %{shost} Client Address: %{saddr} This event is generated %{fld50}" }
			id => "msgParserId374"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId375
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Target Account:  Security ID:  <c_sid>  Account Name:  <c_username>  Account Domain:  <c_domain>  Additional Information:  Privileges:  <privilege>    Every hour,<fld50>
	else if [logstash][msgparser][id] == "msgParserId375" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Target Account:  Security ID:  %{c_sid}  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Additional Information:  Privileges:  %{privilege}    Every hour,%{fld50}" }
			id => "msgParserId375"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId376
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Target Account:  Security ID:  <c_sid>  Account Domain:  <c_domain>  Old Account Name: <change_old>  New Account Name: <change_new>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId376" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Target Account:  Security ID:  %{c_sid}  Account Domain:  %{c_domain}  Old Account Name: %{change_old}  New Account Name: %{change_new}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId376"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId377
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Target Account:  Account Name:  <c_username>  Account Domain:  <c_domain>
	else if [logstash][msgparser][id] == "msgParserId377" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Target Account:  Account Name:  %{c_username}  Account Domain:  %{c_domain}" }
			id => "msgParserId377"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId378
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Group:  Security ID:  <groupid>  Account Name:  <group>  Account Domain:  <remote_domain>  Attributes:  <param>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId378" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Group:  Security ID:  %{groupid}  Account Name:  %{group}  Account Domain:  %{remote_domain}  Attributes:  %{param}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId378"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId379
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Group:  Security ID:  <groupid>  Account Name:  <group>  Account Domain:  <remote_domain>  Attributes:  <param>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId379" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Group:  Security ID:  %{groupid}  Account Name:  %{group}  Account Domain:  %{remote_domain}  Attributes:  %{param}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId379"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId380
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Member:  Security ID:  <c_sid>  Account Name:  <c_username>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId380" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Member:  Security ID:  %{c_sid}  Account Name:  %{c_username}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId380"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId381
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Member:  Security ID:  <c_sid>  Account Name:  <c_username>  Group:  Security ID:  <groupid>  Account Name:  <group>  Account Domain:  <remote_domain>  Additional Information:  Privileges: <privilege> <fld50>
	else if [logstash][msgparser][id] == "msgParserId381" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Member:  Security ID:  %{c_sid}  Account Name:  %{c_username}  Group:  Security ID:  %{groupid}  Account Name:  %{group}  Account Domain:  %{remote_domain}  Additional Information:  Privileges: %{privilege} %{fld50}" }
			id => "msgParserId381"
			add_field => {
				"ec_theme" => "UserGroup"
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId382
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Group:  Security ID:  <groupid>  Account Name:  <group>  Account Domain:  <remote_domain>  Additional Information:  Privileges: <privilege>
	else if [logstash][msgparser][id] == "msgParserId382" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Group:  Security ID:  %{groupid}  Account Name:  %{group}  Account Domain:  %{remote_domain}  Additional Information:  Privileges: %{privilege}" }
			id => "msgParserId382"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId383
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Additional Information:  Caller Workstation: <hostname>  Provided Account Name (unauthenticated): <c_username>  Status Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId383" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Additional Information:  Caller Workstation: %{hostname}  Provided Account Name (unauthenticated): %{c_username}  Status Code: %{resultcode}" }
			id => "msgParserId383"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId384
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Additional Information:  Caller Workstation: <hostname>  Status Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId384" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Additional Information:  Caller Workstation: %{hostname}  Status Code: %{resultcode}" }
			id => "msgParserId384"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId385
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  User:  Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Process Information:  Process ID: <process_id>  Process Name: <process>
	else if [logstash][msgparser][id] == "msgParserId385" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  User:  Security ID:   %{sid}  Account Name:   %{username}    Account Domain:   %{domain}  Process Information:  Process ID: %{process_id}  Process Name: %{process}" }
			id => "msgParserId385"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId386
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:   <sid>  Group Name:  <group>  Group Domain:  <remote_domain>  Process Information:  Process ID: <process_id>  Process Name: <process>
	else if [logstash][msgparser][id] == "msgParserId386" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:   %{sid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Process Information:  Process ID: %{process_id}  Process Name: %{process}" }
			id => "msgParserId386"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId387
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Session ID: <sessionid1>
	else if [logstash][msgparser][id] == "msgParserId387" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Session ID: %{sessionid1}" }
			id => "msgParserId387"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId388
	# line in RSA: <event_description>   Peer Name: <peer> Protocol Sequence: <protocol> Security Error: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId388" {
		dissect {
			mapping => { "message" => "%{event_description}   Peer Name: %{peer} Protocol Sequence: %{protocol} Security Error: %{resultcode}" }
			id => "msgParserId388"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId389
	# line in RSA: <event_description>Subject:<space>User Name: <username>Domain: <domain>Logon ID: <sessionid>Additional Information:<space>Client Address: <saddr><space>This event is generated <fld50>
	else if [logstash][msgparser][id] == "msgParserId389" {
		dissect {
			mapping => { "message" => "%{event_description}Subject:%{space}User Name: %{username}Domain: %{domain}Logon ID: %{sessionid}Additional Information:%{space}Client Address: %{saddr}%{space}This event is generated %{fld50}" }
			id => "msgParserId389"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId390
	# line in RSA: <event_description> Subject:<space>Security ID: <sid> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid> General Settings: <param>
	else if [logstash][msgparser][id] == "msgParserId390" {
		dissect {
			mapping => { "message" => "%{event_description} Subject:%{space}Security ID: %{sid} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid} General Settings: %{param}" }
			id => "msgParserId390"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId391
	# line in RSA: <event_description>. <info>
	else if [logstash][msgparser][id] == "msgParserId391" {
		dissect {
			mapping => { "message" => "%{event_description}. %{info}" }
			id => "msgParserId391"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId392
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>0  Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Trust Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId392" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}0  Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Trust Information:  %{info}" }
			id => "msgParserId392"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId393
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Trust Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId393" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Trust Information:  %{info}" }
			id => "msgParserId393"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId394
	# line in RSA: <event_description>    Request ID: <id1>
	else if [logstash][msgparser][id] == "msgParserId394" {
		dissect {
			mapping => { "message" => "%{event_description}    Request ID: %{id1}" }
			id => "msgParserId394"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId395
	# line in RSA: <event_description>    Serial Number: <fld94> Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId395" {
		dissect {
			mapping => { "message" => "%{event_description}    Serial Number: %{fld94} Reason: %{result}" }
			id => "msgParserId395"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId396
	# line in RSA: <event_description> Request ID: <id1> Name: <info>
	else if [logstash][msgparser][id] == "msgParserId396" {
		dissect {
			mapping => { "message" => "%{event_description} Request ID: %{id1} Name: %{info}" }
			id => "msgParserId396"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId397
	# line in RSA: <event_description>    Request ID: <id1> Attributes: <param>
	else if [logstash][msgparser][id] == "msgParserId397" {
		dissect {
			mapping => { "message" => "%{event_description}    Request ID: %{id1} Attributes: %{param}" }
			id => "msgParserId397"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId398
	# line in RSA: <event_description>    Certificate Database <info>
	else if [logstash][msgparser][id] == "msgParserId398" {
		dissect {
			mapping => { "message" => "%{event_description}    Certificate Database %{info}" }
			id => "msgParserId398"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId399
	# line in RSA: <event_description> Request ID: <id1>
	else if [logstash][msgparser][id] == "msgParserId399" {
		dissect {
			mapping => { "message" => "%{event_description} Request ID: %{id1}" }
			id => "msgParserId399"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId400
	# line in RSA: <event_description> Certificate: <info> Request ID: <id1>
	else if [logstash][msgparser][id] == "msgParserId400" {
		dissect {
			mapping => { "message" => "%{event_description} Certificate: %{info} Request ID: %{id1}" }
			id => "msgParserId400"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId401
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId401" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId401"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId402
	# line in RSA: <event_description>    Request ID: <id1> Requester: <c_username> Attributes:<param>
	else if [logstash][msgparser][id] == "msgParserId402" {
		dissect {
			mapping => { "message" => "%{event_description}    Request ID: %{id1} Requester: %{c_username} Attributes:%{param}" }
			id => "msgParserId402"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId403
	# line in RSA: <event_description>    Request ID: <id1> Requester: <c_username> Attributes: <param> Disposition: <disposition> SKI: <info>
	else if [logstash][msgparser][id] == "msgParserId403" {
		dissect {
			mapping => { "message" => "%{event_description}    Request ID: %{id1} Requester: %{c_username} Attributes: %{param} Disposition: %{disposition} SKI: %{info}" }
			id => "msgParserId403"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId404
	# line in RSA: <event_description>    Request ID: <id1> Requester: <c_username> <info>
	else if [logstash][msgparser][id] == "msgParserId404" {
		dissect {
			mapping => { "message" => "%{event_description}    Request ID: %{id1} Requester: %{c_username} %{info}" }
			id => "msgParserId404"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId405
	# line in RSA: <event_description>   Number of Elements: <dclass_counter1> Policy ID: <policy_id>
	else if [logstash][msgparser][id] == "msgParserId405" {
		dissect {
			mapping => { "message" => "%{event_description}   Number of Elements: %{dclass_counter1} Policy ID: %{policy_id}" }
			id => "msgParserId405"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId406
	# line in RSA: <event_description>   Subject :  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Process:  Process ID: <process_id>  Process Name: <process>  Event Source:  <space> Source Name: <application> Event Source ID:<id1>
	else if [logstash][msgparser][id] == "msgParserId406" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject :  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Process:  Process ID: %{process_id}  Process Name: %{process}  Event Source:  %{space} Source Name: %{application} Event Source ID:%{id1}" }
			id => "msgParserId406"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId407
	# line in RSA: <event_description>   Subject  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Process:  Process ID: <process_id>  Process Name: <process>  Event Source:  <space> Source Name: <application> Event Source ID:<id1>
	else if [logstash][msgparser][id] == "msgParserId407" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Process:  Process ID: %{process_id}  Process Name: %{process}  Event Source:  %{space} Source Name: %{application} Event Source ID:%{id1}" }
			id => "msgParserId407"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId408
	# line in RSA: <event_description> New Value of CrashOnAuditFail: <change_new>
	else if [logstash][msgparser][id] == "msgParserId408" {
		dissect {
			mapping => { "message" => "%{event_description} New Value of CrashOnAuditFail: %{change_new}" }
			id => "msgParserId408"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId409
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Object:  Object Server: <obj_server>  Object Type: <obj_type>  Object Name: <obj_name>  Handle ID: <id1>  Process Information:  Process ID: <process_id>  Process Name: <process>  Auditing Settings:  Original Security Descriptor: <change_old>  New Security Descriptor:  <change_new>
	else if [logstash][msgparser][id] == "msgParserId409" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Object:  Object Server: %{obj_server}  Object Type: %{obj_type}  Object Name: %{obj_name}  Handle ID: %{id1}  Process Information:  Process ID: %{process_id}  Process Name: %{process}  Auditing Settings:  Original Security Descriptor: %{change_old}  New Security Descriptor:  %{change_new}" }
			id => "msgParserId409"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId410
	# line in RSA: <event_description> Special Groups: <group>
	else if [logstash][msgparser][id] == "msgParserId410" {
		dissect {
			mapping => { "message" => "%{event_description} Special Groups: %{group}" }
			id => "msgParserId410"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId411
	# line in RSA: <event_description> Old Blocked Ordinals:<change_old> New Blocked Ordinals:<change_new>
	else if [logstash][msgparser][id] == "msgParserId411" {
		dissect {
			mapping => { "message" => "%{event_description} Old Blocked Ordinals:%{change_old} New Blocked Ordinals:%{change_new}" }
			id => "msgParserId411"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId412
	# line in RSA: <event_description> Group Policy Setting:  Ignore Default Settings  Old Value: <fld95>  New Value:  <fld66>  Group Policy Setting:  Ignore Local Settings  Old Value: <fld67>  New Value: <fld68> Old Blocked Ordinals: <change_old> New Blocked Ordinals: <change_new>
	else if [logstash][msgparser][id] == "msgParserId412" {
		dissect {
			mapping => { "message" => "%{event_description} Group Policy Setting:  Ignore Default Settings  Old Value: %{fld95}  New Value:  %{fld66}  Group Policy Setting:  Ignore Local Settings  Old Value: %{fld67}  New Value: %{fld68} Old Blocked Ordinals: %{change_old} New Blocked Ordinals: %{change_new}" }
			id => "msgParserId412"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId413
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Object:  Object Server: <obj_server>  Object Type: <obj_type>  Object Name: <obj_name>  Handle ID: <id1>  Process Information:  Process ID: <process_id>  Process Name: <process>  Resource Attributes:  Original Security Descriptor: <change_old>  New Security Descriptor:  <change_new>
	else if [logstash][msgparser][id] == "msgParserId413" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Object:  Object Server: %{obj_server}  Object Type: %{obj_type}  Object Name: %{obj_name}  Handle ID: %{id1}  Process Information:  Process ID: %{process_id}  Process Name: %{process}  Resource Attributes:  Original Security Descriptor: %{change_old}  New Security Descriptor:  %{change_new}" }
			id => "msgParserId413"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId414
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Policy For Account:  Security ID:  <c_sid> Policy Change Details:  Category: <category>  Subcategory: <subcategory>  Subcategory GUID: <fld70>  Changes: <policy_value>
	else if [logstash][msgparser][id] == "msgParserId414" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Policy For Account:  Security ID:  %{c_sid} Policy Change Details:  Category: %{category}  Subcategory: %{subcategory}  Subcategory GUID: %{fld70}  Changes: %{policy_value}" }
			id => "msgParserId414"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId415
	# line in RSA: <event_description>   Subject:  Security ID: <sid>   Account Name: <username>    Account Domain: <domain>  Logon ID: <sessionid>  Object:  Object Server: <obj_server>  Object Type: <obj_type>  Object Name: <obj_name>  Handle ID: <id1>  Process Information:  Process ID: <process_id>  Process Name: <process> Central Policy ID:  Original Security Descriptor: <change_old>  New Security Descriptor:  <change_new>
	else if [logstash][msgparser][id] == "msgParserId415" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID: %{sid}   Account Name: %{username}    Account Domain: %{domain}  Logon ID: %{sessionid}  Object:  Object Server: %{obj_server}  Object Type: %{obj_type}  Object Name: %{obj_name}  Handle ID: %{id1}  Process Information:  Process ID: %{process_id}  Process Name: %{process} Central Policy ID:  Original Security Descriptor: %{change_old}  New Security Descriptor:  %{change_new}" }
			id => "msgParserId415"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId416
	# line in RSA: <event_description> .  <info>
	else if [logstash][msgparser][id] == "msgParserId416" {
		dissect {
			mapping => { "message" => "%{event_description} .  %{info}" }
			id => "msgParserId416"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId417
	# line in RSA: <event_description>   Session ID: <sessionid> Object:  <obj_name> Attribute: <param> Type of change: <fld76> New Value: <fld77> USN: <fld78> Status Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId417" {
		dissect {
			mapping => { "message" => "%{event_description}   Session ID: %{sessionid} Object:  %{obj_name} Attribute: %{param} Type of change: %{fld76} New Value: %{fld77} USN: %{fld78} Status Code: %{resultcode}" }
			id => "msgParserId417"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId418
	# line in RSA: <event_description>.  <info>
	else if [logstash][msgparser][id] == "msgParserId418" {
		dissect {
			mapping => { "message" => "%{event_description}.  %{info}" }
			id => "msgParserId418"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId419
	# line in RSA: <event_description>   Group Policy Applied: <fld1> Profile Used: <profile> Operational mode: <fld78> Allow Remote Administration: <fld77> Allow Unicast Responses to Multicast/Broadcast Traffic: <fld76> <info>
	else if [logstash][msgparser][id] == "msgParserId419" {
		dissect {
			mapping => { "message" => "%{event_description}   Group Policy Applied: %{fld1} Profile Used: %{profile} Operational mode: %{fld78} Allow Remote Administration: %{fld77} Allow Unicast Responses to Multicast/Broadcast Traffic: %{fld76} %{info}" }
			id => "msgParserId419"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId420
	# line in RSA: <event_description>    Profile used: <profile>  Rule:  Rule ID: <rule>  Rule Name: <rulename>
	else if [logstash][msgparser][id] == "msgParserId420" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile used: %{profile}  Rule:  Rule ID: %{rule}  Rule Name: %{rulename}" }
			id => "msgParserId420"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId421
	# line in RSA: <event_description>    Profile Changed: <profile>  Added Rule:  Rule ID: <rule>  Rule Name: <rulename>
	else if [logstash][msgparser][id] == "msgParserId421" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Added Rule:  Rule ID: %{rule}  Rule Name: %{rulename}" }
			id => "msgParserId421"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId422
	# line in RSA: <event_description>    Profile Changed: <profile>  Modified Rule:  Rule ID: <rule>  Rule Name: <rulename>
	else if [logstash][msgparser][id] == "msgParserId422" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Modified Rule:  Rule ID: %{rule}  Rule Name: %{rulename}" }
			id => "msgParserId422"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId423
	# line in RSA: <event_description>    Profile Changed: <profile>  Deleted Rule:  Rule ID: <rule>  Rule Name: <rulename>
	else if [logstash][msgparser][id] == "msgParserId423" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Deleted Rule:  Rule ID: %{rule}  Rule Name: %{rulename}" }
			id => "msgParserId423"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_4950_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_4950_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description> Profile That Was Changed: <profile>  New Setting: <space> Type: <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} Profile That Was Changed: %{profile}  New Setting: %{space} Type: %{change_new}" }
				id => "message-Security_4950_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4950_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_4950_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_4950_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>  Changed Profile: <profile>  New Setting:  Type: <change_new>  Value: <fld21>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}  Changed Profile: %{profile}  New Setting:  Type: %{change_new}  Value: %{fld21}" }
				id => "message-Security_4950_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_4950_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_4950_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1502050000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId426
	# line in RSA: <event_description>    Profile: <profile>  Ignored Rule:  ID: <rule>  Name: <rulename>
	else if [logstash][msgparser][id] == "msgParserId426" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile: %{profile}  Ignored Rule:  ID: %{rule}  Name: %{rulename}" }
			id => "msgParserId426"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId427
	# line in RSA: <event_description>    Profile: <profile>  Partially Ignored Rule:  ID: <rule>  Name: <rulename>
	else if [logstash][msgparser][id] == "msgParserId427" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile: %{profile}  Partially Ignored Rule:  ID: %{rule}  Name: %{rulename}" }
			id => "msgParserId427"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId428
	# line in RSA: <event_description>    Profile: <profile>  Reason for Rejection:  <result>  Rule:  ID: <rule>  Name: <rulename>
	else if [logstash][msgparser][id] == "msgParserId428" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile: %{profile}  Reason for Rejection:  %{result}  Rule:  ID: %{rule}  Name: %{rulename}" }
			id => "msgParserId428"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId429
	# line in RSA: <event_description>   New Active Profile: <profile>
	else if [logstash][msgparser][id] == "msgParserId429" {
		dissect {
			mapping => { "message" => "%{event_description}   New Active Profile: %{profile}" }
			id => "msgParserId429"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId430
	# line in RSA: <event_description>   Rule Information:  ID: <rule>  Name: <rulename>  Error Information:  Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId430" {
		dissect {
			mapping => { "message" => "%{event_description}   Rule Information:  ID: %{rule}  Name: %{rulename}  Error Information:  Reason: %{result}" }
			id => "msgParserId430"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId431
	# line in RSA: <event_description>   Rule Information:  ID: <rule>  Name: <rulename>  Error Information:  Error: <fld15>  Reason: <result>
	else if [logstash][msgparser][id] == "msgParserId431" {
		dissect {
			mapping => { "message" => "%{event_description}   Rule Information:  ID: %{rule}  Name: %{rulename}  Error Information:  Error: %{fld15}  Reason: %{result}" }
			id => "msgParserId431"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId432
	# line in RSA: <event_description>   Remote Network Address: <saddr> Inbound SA SPI:  <fld13>
	else if [logstash][msgparser][id] == "msgParserId432" {
		dissect {
			mapping => { "message" => "%{event_description}   Remote Network Address: %{saddr} Inbound SA SPI:  %{fld13}" }
			id => "msgParserId432"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId433
	# line in RSA: <event_description>  Remote Network Address: <saddr> Inbound SA SPI:  <fld13>
	else if [logstash][msgparser][id] == "msgParserId433" {
		dissect {
			mapping => { "message" => "%{event_description}  Remote Network Address: %{saddr} Inbound SA SPI:  %{fld13}" }
			id => "msgParserId433"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId434
	# line in RSA: <event_description>   Subject:  Security ID:  <fld39>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <fld41>  Logon GUID: <fld42>  New Logon:  Security ID:  <sid>  Account Name:  <c_username>  Account Domain:  <c_domain>  Logon ID:  <sessionid>  Logon GUID: <fld66>  Special Groups Assigned: <group>
	else if [logstash][msgparser][id] == "msgParserId434" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{fld39}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{fld41}  Logon GUID: %{fld42}  New Logon:  Security ID:  %{sid}  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Logon ID:  %{sessionid}  Logon GUID: %{fld66}  Special Groups Assigned: %{group}" }
			id => "msgParserId434"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId435
	# line in RSA: <event_description>   Local Network Address: <daddr> Remote Network Address: <saddr> Keying Module Name: <fld38>
	else if [logstash][msgparser][id] == "msgParserId435" {
		dissect {
			mapping => { "message" => "%{event_description}   Local Network Address: %{daddr} Remote Network Address: %{saddr} Keying Module Name: %{fld38}" }
			id => "msgParserId435"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Error"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId436
	# line in RSA: <event_description>  Main Mode Local Endpoint:  Principal Name:  <dhost>  Network Address: <daddr>  Keying Module Port: <dport>  Main Mode Remote Endpoint:  Principal Name: <shost>  Network Address: <saddr>  Keying Module Port: <sport>  Main Mode Cryptographic Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId436" {
		dissect {
			mapping => { "message" => "%{event_description}  Main Mode Local Endpoint:  Principal Name:  %{dhost}  Network Address: %{daddr}  Keying Module Port: %{dport}  Main Mode Remote Endpoint:  Principal Name: %{shost}  Network Address: %{saddr}  Keying Module Port: %{sport}  Main Mode Cryptographic Information:  %{info}" }
			id => "msgParserId436"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId437
	# line in RSA: <event_description>  Local Endpoint:  Principal Name:  <shost>  Network Address: <saddr>  Keying Module Port: <sport>  Local Certificate:  SHA Thumbprint: <fld41>  Issuing CA:  <s_certauth>  Root CA:  <fld42>  Remote Endpoint:  Principal Name:  <dhost>  Network Address: <daddr>  Keying Module Port: <dport>  Remote Certificate:  SHA Thumbprint:  <fld43>  Issuing CA:  <d_certauth>  Root CA:  <fld44> Cryptographic Information: <info>
	else if [logstash][msgparser][id] == "msgParserId437" {
		dissect {
			mapping => { "message" => "%{event_description}  Local Endpoint:  Principal Name:  %{shost}  Network Address: %{saddr}  Keying Module Port: %{sport}  Local Certificate:  SHA Thumbprint: %{fld41}  Issuing CA:  %{s_certauth}  Root CA:  %{fld42}  Remote Endpoint:  Principal Name:  %{dhost}  Network Address: %{daddr}  Keying Module Port: %{dport}  Remote Certificate:  SHA Thumbprint:  %{fld43}  Issuing CA:  %{d_certauth}  Root CA:  %{fld44} Cryptographic Information: %{info}" }
			id => "msgParserId437"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId438
	# line in RSA: <event_description>  Local Endpoint:  Principal Name:  <shost>  Network Address: <saddr>  Keying Module Port: <sport>  Local Certificate:  SHA Thumbprint: <fld41>  Issuing CA:  <s_certauth>  Root CA:  <fld42>  Remote Endpoint:  Principal Name:  <dhost>  Network Address: <daddr>  Keying Module Port: <dport>  Remote Certificate:  SHA Thumbprint:  <fld43>  Issuing CA:  <d_certauth>  Root CA:  <fld44> Additional Information: <info> Failure Reason:  <result>  State:   <disposition>
	else if [logstash][msgparser][id] == "msgParserId438" {
		dissect {
			mapping => { "message" => "%{event_description}  Local Endpoint:  Principal Name:  %{shost}  Network Address: %{saddr}  Keying Module Port: %{sport}  Local Certificate:  SHA Thumbprint: %{fld41}  Issuing CA:  %{s_certauth}  Root CA:  %{fld42}  Remote Endpoint:  Principal Name:  %{dhost}  Network Address: %{daddr}  Keying Module Port: %{dport}  Remote Certificate:  SHA Thumbprint:  %{fld43}  Issuing CA:  %{d_certauth}  Root CA:  %{fld44} Additional Information: %{info} Failure Reason:  %{result}  State:   %{disposition}" }
			id => "msgParserId438"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId439
	# line in RSA: <event_description>  Local Endpoint:  Principal Name:  <dhost>  Network Address: <daddr>  Keying Module Port: <dport>  Remote Endpoint:  Principal Name:  <shost>  Network Address: <saddr>  Keying Module Port: <sport>  Additional Information:  <info> Failure Reason:  <result>  State:   <disposition>
	else if [logstash][msgparser][id] == "msgParserId439" {
		dissect {
			mapping => { "message" => "%{event_description}  Local Endpoint:  Principal Name:  %{dhost}  Network Address: %{daddr}  Keying Module Port: %{dport}  Remote Endpoint:  Principal Name:  %{shost}  Network Address: %{saddr}  Keying Module Port: %{sport}  Additional Information:  %{info} Failure Reason:  %{result}  State:   %{disposition}" }
			id => "msgParserId439"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId440
	# line in RSA: <event_description>  Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Transaction Information:  RM Transaction ID: <id1>  New State: <fld78>  Resource Manager: <fld79>  Process Information:  Process ID:  <process_id>  Process Name:  <process>
	else if [logstash][msgparser][id] == "msgParserId440" {
		dissect {
			mapping => { "message" => "%{event_description}  Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Transaction Information:  RM Transaction ID: %{id1}  New State: %{fld78}  Resource Manager: %{fld79}  Process Information:  Process ID:  %{process_id}  Process Name:  %{process}" }
			id => "msgParserId440"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId441
	# line in RSA: <event_description>   Error Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId441" {
		dissect {
			mapping => { "message" => "%{event_description}   Error Code: %{resultcode}" }
			id => "msgParserId441"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId442
	# line in RSA: <event_description>   Profiles:  <profile> Application:  <process>
	else if [logstash][msgparser][id] == "msgParserId442" {
		dissect {
			mapping => { "message" => "%{event_description}   Profiles:  %{profile} Application:  %{process}" }
			id => "msgParserId442"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId443
	# line in RSA: <event_description>   File Name: <filename>
	else if [logstash][msgparser][id] == "msgParserId443" {
		dissect {
			mapping => { "message" => "%{event_description}   File Name: %{filename}" }
			id => "msgParserId443"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId444
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  Key Name:  <obj_name>  Virtual Key Name: <fld18> Process Information:  Process ID:  <process_id>  Process Name:  <process>
	else if [logstash][msgparser][id] == "msgParserId444" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  Key Name:  %{obj_name}  Virtual Key Name: %{fld18} Process Information:  Process ID:  %{process_id}  Process Name:  %{process}" }
			id => "msgParserId444"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId445
	# line in RSA: <event_description>    Profile Changed:  <profile>  Added Authentication Set:  ID:  <fld79>  Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId445" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed:  %{profile}  Added Authentication Set:  ID:  %{fld79}  Name: %{obj_name}" }
			id => "msgParserId445"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId446
	# line in RSA: <event_description>    Profile Changed:  <profile>  Modified Authentication Set:  ID:  <fld79>  Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId446" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed:  %{profile}  Modified Authentication Set:  ID:  %{fld79}  Name: %{obj_name}" }
			id => "msgParserId446"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId447
	# line in RSA: <event_description>    Profile Changed:  <profile>  Deleted Authentication Set:  ID:  <fld79>  Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId447" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed:  %{profile}  Deleted Authentication Set:  ID:  %{fld79}  Name: %{obj_name}" }
			id => "msgParserId447"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId448
	# line in RSA: <event_description>    Profile Changed:  <profile>  Added Connection Security Rule:  ID:   <rule>  Name:   <rulename>
	else if [logstash][msgparser][id] == "msgParserId448" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed:  %{profile}  Added Connection Security Rule:  ID:   %{rule}  Name:   %{rulename}" }
			id => "msgParserId448"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId449
	# line in RSA: <event_description>    Profile Changed: <profile>  Modified Connection Security Rule:  ID:   <rule>  Name:   <rulename>
	else if [logstash][msgparser][id] == "msgParserId449" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Modified Connection Security Rule:  ID:   %{rule}  Name:   %{rulename}" }
			id => "msgParserId449"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId450
	# line in RSA: <event_description>    Profile Changed: <profile>  Deleted Connection Security Rule:  ID:   <rule>  Name:   <rulename>
	else if [logstash][msgparser][id] == "msgParserId450" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Deleted Connection Security Rule:  ID:   %{rule}  Name:   %{rulename}" }
			id => "msgParserId450"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId451
	# line in RSA: <event_description>    Profile Changed: <profile>  Added Crypto Set:  ID:  <fld79>  Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId451" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Added Crypto Set:  ID:  %{fld79}  Name: %{obj_name}" }
			id => "msgParserId451"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId452
	# line in RSA: <event_description>    Profile Changed: <profile>  Modified Crypto Set:  ID:  <fld79>  Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId452" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Modified Crypto Set:  ID:  %{fld79}  Name: %{obj_name}" }
			id => "msgParserId452"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId453
	# line in RSA: <event_description>    Profile Changed: <profile>  Deleted Crypto Set:  ID:  <fld79>  Name: <obj_name>
	else if [logstash][msgparser][id] == "msgParserId453" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Deleted Crypto Set:  ID:  %{fld79}  Name: %{obj_name}" }
			id => "msgParserId453"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId454
	# line in RSA: <event_description>    Profile Changed: <profile>  Deleted SA:  ID: <fld13>  Name: <fld14>
	else if [logstash][msgparser][id] == "msgParserId454" {
		dissect {
			mapping => { "message" => "%{event_description}    Profile Changed: %{profile}  Deleted SA:  ID: %{fld13}  Name: %{fld14}" }
			id => "msgParserId454"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId455
	# line in RSA: <event_description>   Error Code:  <resultcode> Caller Process Name:  <process> Process Id:  <process_id> Publisher:  <fld81>
	else if [logstash][msgparser][id] == "msgParserId455" {
		dissect {
			mapping => { "message" => "%{event_description}   Error Code:  %{resultcode} Caller Process Name:  %{process} Process Id:  %{process_id} Publisher:  %{fld81}" }
			id => "msgParserId455"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId456
	# line in RSA: <event_description>   Subject:  Security ID:   <sid>  Account Name:   <username>    Account Domain:  <domain>  Logon ID:   <sessionid>  Object:  File Name:   <filename>  Virtual File Name: <fld82>  Process Information:  Process ID:   <process_id>  Process Name:   <process>
	else if [logstash][msgparser][id] == "msgParserId456" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:   %{sid}  Account Name:   %{username}    Account Domain:  %{domain}  Logon ID:   %{sessionid}  Object:  File Name:   %{filename}  Virtual File Name: %{fld82}  Process Information:  Process ID:   %{process_id}  Process Name:   %{process}" }
			id => "msgParserId456"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId457
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Module:  <obj_name>  Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId457" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Module:  %{obj_name}  Return Code: %{resultcode}" }
			id => "msgParserId457"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId458
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Cryptographic Parameters:  <param> Failure Information:  Reason:   <result>  Return Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId458" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Cryptographic Parameters:  %{param} Failure Information:  Reason:   %{result}  Return Code:  %{resultcode}" }
			id => "msgParserId458"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId459
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Cryptographic Parameters:  <param> Key File Operation Information:  File Path: <directory>  Operation: <action> Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId459" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Cryptographic Parameters:  %{param} Key File Operation Information:  File Path: %{directory}  Operation: %{action} Return Code: %{resultcode}" }
			id => "msgParserId459"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId460
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Cryptographic Parameters:  <param> Additional Information:  Operation: <action> Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId460" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Cryptographic Parameters:  %{param} Additional Information:  Operation: %{action} Return Code: %{resultcode}" }
			id => "msgParserId460"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId461
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Cryptographic Parameters: <param>  Failure Information:  Reason: <result>  Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId461" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Cryptographic Parameters: %{param}  Failure Information:  Reason: %{result}  Return Code: %{resultcode}" }
			id => "msgParserId461"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId462
	# line in RSA: <event_description>   Subject: <space> Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Cryptographic Parameters: <param>  Cryptographic Operation: <space> Operation: <action> Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId462" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject: %{space} Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Cryptographic Parameters: %{param}  Cryptographic Operation: %{space} Operation: %{action} Return Code: %{resultcode}" }
			id => "msgParserId462"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId463
	# line in RSA: <event_description>  Module: <obj_name>  Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId463" {
		dissect {
			mapping => { "message" => "%{event_description}  Module: %{obj_name}  Return Code: %{resultcode}" }
			id => "msgParserId463"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId464
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Cryptographic Provider:  Name: <fld83>  Module: <obj_name>  Operation: <action>  Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId464" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Cryptographic Provider:  Name: %{fld83}  Module: %{obj_name}  Operation: %{action}  Return Code: %{resultcode}" }
			id => "msgParserId464"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId465
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Configuration Parameters:  <param> Operation: <action> Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId465" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Configuration Parameters:  %{param} Operation: %{action} Return Code: %{resultcode}" }
			id => "msgParserId465"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId466
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Configuration Parameters:  <param>  Change Information:  Old Value: <change_old>  New Value: <change_new>  Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId466" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Configuration Parameters:  %{param}  Change Information:  Old Value: %{change_old}  New Value: %{change_new}  Return Code: %{resultcode}" }
			id => "msgParserId466"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId467
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Configuration Parameters:  <param>  Operation: <action> Return Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId467" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Configuration Parameters:  %{param}  Operation: %{action} Return Code: %{resultcode}" }
			id => "msgParserId467"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId468
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Configuration Parameters:  <param>  Change Information:  Old Value: <change_old>  New Value: <change_new> Return Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId468" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Configuration Parameters:  %{param}  Change Information:  Old Value: %{change_old}  New Value: %{change_new} Return Code:  %{resultcode}" }
			id => "msgParserId468"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId469
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Configuration Parameters:  <param>  Operation:  <action>  Return Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId469" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Configuration Parameters:  %{param}  Operation:  %{action}  Return Code:  %{resultcode}" }
			id => "msgParserId469"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId470
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Configuration Parameters:  <param> Operation:  <action>  Return Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId470" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Configuration Parameters:  %{param} Operation:  %{action}  Return Code:  %{resultcode}" }
			id => "msgParserId470"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId471
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Configuration Parameters:  <param>  Change Information:  Old Value: <change_old>  New Value: <change_new>  Return Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId471" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Configuration Parameters:  %{param}  Change Information:  Old Value: %{change_old}  New Value: %{change_new}  Return Code:  %{resultcode}" }
			id => "msgParserId471"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_5136_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_5136_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject:<space>Security ID:  <sid>  Account Name:  <username>  Account Domain:  <domain>  Logon ID:  <sessionid>  Directory Service:<space>Name: <fld85>  Type: <fld86>   Object:<space>DN: <obj_name>  GUID: <sessionid1>  Class: <obj_type>   Attribute:<space>LDAP Display Name:<change_attribute>Syntax (OID): <fld89>  Value: <param>  Operation:<space>Type:<action>   Correlation ID: <fld87>  Application Correlation ID: <fld88>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject:%{space}Security ID:  %{sid}  Account Name:  %{username}  Account Domain:  %{domain}  Logon ID:  %{sessionid}  Directory Service:%{space}Name: %{fld85}  Type: %{fld86}   Object:%{space}DN: %{obj_name}  GUID: %{sessionid1}  Class: %{obj_type}   Attribute:%{space}LDAP Display Name:%{change_attribute}Syntax (OID): %{fld89}  Value: %{param}  Operation:%{space}Type:%{action}   Correlation ID: %{fld87}  Application Correlation ID: %{fld88}" }
				id => "message-Security_5136_Microsoft-Windows-Security-Auditing"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"dn" => "%{obj_name}"
				"change_new" => "%{param}"
					"[event][id]" => "Security_5136_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_5136_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_5136_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>   Subject:<space>Security ID:  <sid>  Account Name:  <username>  Account Domain:  <domain>  Logon ID:  <sessionid>  Directory Service:<space>Name: <fld85>  Type: <fld86>   Object:<space>DN: <obj_name>  GUID: <sessionid1>  Class: <obj_type>   Attribute:<space>LDAP Display Name:<change_attribute> Syntax (OID): <fld89>  Value: <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject:%{space}Security ID:  %{sid}  Account Name:  %{username}  Account Domain:  %{domain}  Logon ID:  %{sessionid}  Directory Service:%{space}Name: %{fld85}  Type: %{fld86}   Object:%{space}DN: %{obj_name}  GUID: %{sessionid1}  Class: %{obj_type}   Attribute:%{space}LDAP Display Name:%{change_attribute} Syntax (OID): %{fld89}  Value: %{param}" }
				id => "message-Security_5136_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"dn" => "%{obj_name}"
				"change_new" => "%{param}"
					"[event][id]" => "Security_5136_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_5136_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId474
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>  Account Domain:  <domain>  Logon ID:  <sessionid>   Directory Service:  Name: <fld85>  Type: <fld86>   Object:  DN: <obj_name>  GUID: <fld66>  Class: <obj_type>   Operation:  <info>
	else if [logstash][msgparser][id] == "msgParserId474" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}  Account Domain:  %{domain}  Logon ID:  %{sessionid}   Directory Service:  Name: %{fld85}  Type: %{fld86}   Object:  DN: %{obj_name}  GUID: %{fld66}  Class: %{obj_type}   Operation:  %{info}" }
			id => "msgParserId474"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId475
	# line in RSA: <event_description>    Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>   Directory Service:  <info>
	else if [logstash][msgparser][id] == "msgParserId475" {
		dissect {
			mapping => { "message" => "%{event_description}    Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}   Directory Service:  %{info}" }
			id => "msgParserId475"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId476
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>  Account Domain:  <domain>  Logon ID:  <sessionid>   Directory Service:  Name:  <fld85>  Type:  <fld86>   Object:  Old DN:  <change_old>  New DN: <change_new>  GUID:  <fld66>  Class:  <obj_type>   Operation:  <info>
	else if [logstash][msgparser][id] == "msgParserId476" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}  Account Domain:  %{domain}  Logon ID:  %{sessionid}   Directory Service:  Name:  %{fld85}  Type:  %{fld86}   Object:  Old DN:  %{change_old}  New DN: %{change_new}  GUID:  %{fld66}  Class:  %{obj_type}   Operation:  %{info}" }
			id => "msgParserId476"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"change_attribute" => "%{fld86}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_5140_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_5140_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>    Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Network Information: <space> Object Type: <obj_type> Source Address:  <saddr>  Source Port:  <sport>  Share Information: <space> Share Name: <obj_name> Share Path: <directory> Access Request Information: <space> Access Mask: <fld52> Accesses: <accesses>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}    Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Network Information: %{space} Object Type: %{obj_type} Source Address:  %{saddr}  Source Port:  %{sport}  Share Information: %{space} Share Name: %{obj_name} Share Path: %{directory} Access Request Information: %{space} Access Mask: %{fld52} Accesses: %{accesses}" }
				id => "message-Security_5140_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_5140_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_5140_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_5140_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>    Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Network Information:   Source Address:  <saddr>  Source Port:  <sport>   Share Name:   <obj_name>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}    Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Network Information:   Source Address:  %{saddr}  Source Port:  %{sport}   Share Name:   %{obj_name}" }
				id => "message-Security_5140_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_5140_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_5140_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1401010000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId479
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>  Account Domain:  <domain>  Logon ID:  <sessionid>   Directory Service:  Name: <fld85>  Type: <fld86>   Object:  DN: <obj_name>  GUID: <fld66>  Class: <obj_type>   Operation:  <action>  Correlation ID: <fld87>  Application Correlation ID: <fld88>
	else if [logstash][msgparser][id] == "msgParserId479" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}  Account Domain:  %{domain}  Logon ID:  %{sessionid}   Directory Service:  Name: %{fld85}  Type: %{fld86}   Object:  DN: %{obj_name}  GUID: %{fld66}  Class: %{obj_type}   Operation:  %{action}  Correlation ID: %{fld87}  Application Correlation ID: %{fld88}" }
			id => "msgParserId479"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"dn" => "%{obj_name}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId480
	# line in RSA: <event_description>   Application Information:  Process ID:  <process_id>  Application Name: <process>  Network Information:  Direction:  <direction>  Source Address:  <saddr>  Source Port:  <sport>  Destination Address: <daddr>  Destination Port:  <dport>  Protocol:  <protocol>  Filter Information:  <filter>
	else if [logstash][msgparser][id] == "msgParserId480" {
		dissect {
			mapping => { "message" => "%{event_description}   Application Information:  Process ID:  %{process_id}  Application Name: %{process}  Network Information:  Direction:  %{direction}  Source Address:  %{saddr}  Source Port:  %{sport}  Destination Address: %{daddr}  Destination Port:  %{dport}  Protocol:  %{protocol}  Filter Information:  %{filter}" }
			id => "msgParserId480"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId481
	# line in RSA: <event_description>   Application Information:  Process ID:  <process_id>  Application Name: <process>  Network Information:  Source Address:  <saddr>  Source Port:  <sport>  Protocol:  <protocol>  Filter Information:  <filter>
	else if [logstash][msgparser][id] == "msgParserId481" {
		dissect {
			mapping => { "message" => "%{event_description}   Application Information:  Process ID:  %{process_id}  Application Name: %{process}  Network Information:  Source Address:  %{saddr}  Source Port:  %{sport}  Protocol:  %{protocol}  Filter Information:  %{filter}" }
			id => "msgParserId481"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId482
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid> This <fld50>
	else if [logstash][msgparser][id] == "msgParserId482" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid} This %{fld50}" }
			id => "msgParserId482"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId483
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  This <fld50>
	else if [logstash][msgparser][id] == "msgParserId483" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  This %{fld50}" }
			id => "msgParserId483"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId484
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Credential Delegation Information:  Security Package: <obj_type>  User's UPN: <fld89>  Target Server: <dhost>  Credential Type: <fld90>
	else if [logstash][msgparser][id] == "msgParserId484" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Credential Delegation Information:  Security Package: %{obj_type}  User's UPN: %{fld89}  Target Server: %{dhost}  Credential Type: %{fld90}" }
			id => "msgParserId484"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId485
	# line in RSA: <event_description> .<info>
	else if [logstash][msgparser][id] == "msgParserId485" {
		dissect {
			mapping => { "message" => "%{event_description} .%{info}" }
			id => "msgParserId485"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId486
	# line in RSA: <event_description>    Subject:  Security ID:  <sid>  Account Name:  <username>    Process Information:  Process ID: <process_id>  Provider Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId486" {
		dissect {
			mapping => { "message" => "%{event_description}    Subject:  Security ID:  %{sid}  Account Name:  %{username}    Process Information:  Process ID: %{process_id}  Provider Information:  %{info}" }
			id => "msgParserId486"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId487
	# line in RSA: <event_description>    Subject:  Security ID:  <sid>  Account Name:  <username>    Process Information:  Process ID: <process_id>  Provider Information:<info>
	else if [logstash][msgparser][id] == "msgParserId487" {
		dissect {
			mapping => { "message" => "%{event_description}    Subject:  Security ID:  %{sid}  Account Name:  %{username}    Process Information:  Process ID: %{process_id}  Provider Information:%{info}" }
			id => "msgParserId487"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId488
	# line in RSA: <event_description>    Subject:  Security ID:  <sid>  Account Name:  <username>    Process Information:  Process ID: <process_id>  Change Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId488" {
		dissect {
			mapping => { "message" => "%{event_description}    Subject:  Security ID:  %{sid}  Account Name:  %{username}    Process Information:  Process ID: %{process_id}  Change Information:  %{info}" }
			id => "msgParserId488"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId489
	# line in RSA: <event_description>    Local Endpoint:  Network Address: <daddr>  Network Address mask: <fld15>  Port:   <dport>  Tunnel Endpoint:  <fld11>  Remote Endpoint:  Network Address: <saddr>  Network Address Mask: <fld16>  Port:   <sport>  Private Address:  <stransaddr>  Tunnel Endpoint:  <fld12>   Protocol:  <protocol>  Keying Module Name: <fld38>  Cryptographic Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId489" {
		dissect {
			mapping => { "message" => "%{event_description}    Local Endpoint:  Network Address: %{daddr}  Network Address mask: %{fld15}  Port:   %{dport}  Tunnel Endpoint:  %{fld11}  Remote Endpoint:  Network Address: %{saddr}  Network Address Mask: %{fld16}  Port:   %{sport}  Private Address:  %{stransaddr}  Tunnel Endpoint:  %{fld12}   Protocol:  %{protocol}  Keying Module Name: %{fld38}  Cryptographic Information:  %{info}" }
			id => "msgParserId489"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId490
	# line in RSA: <event_description>    Local Endpoint:  Network Address: <daddr>  Port:   <dport>  Tunnel Endpoint:  <fld11>  Remote Endpoint:  Network Address: <saddr>  Port:   <sport>  Tunnel Endpoint:  <fld12>  Additional Information:  Protocol:  <protocol>  Quick Mode SA ID: <fld13>
	else if [logstash][msgparser][id] == "msgParserId490" {
		dissect {
			mapping => { "message" => "%{event_description}    Local Endpoint:  Network Address: %{daddr}  Port:   %{dport}  Tunnel Endpoint:  %{fld11}  Remote Endpoint:  Network Address: %{saddr}  Port:   %{sport}  Tunnel Endpoint:  %{fld12}  Additional Information:  Protocol:  %{protocol}  Quick Mode SA ID: %{fld13}" }
			id => "msgParserId490"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_activity" => "Stop"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId491
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId491" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId491"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Encryption"
				"ec_outcome" => "Failure"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId492
	# line in RSA: <event_description>   Policy:  <policyname>
	else if [logstash][msgparser][id] == "msgParserId492" {
		dissect {
			mapping => { "message" => "%{event_description}   Policy:  %{policyname}" }
			id => "msgParserId492"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId493
	# line in RSA: <event_description>   DN:  <fld91> Error code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId493" {
		dissect {
			mapping => { "message" => "%{event_description}   DN:  %{fld91} Error code:  %{resultcode}" }
			id => "msgParserId493"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId494
	# line in RSA: <event_description>   Policy:  <policyname> Error Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId494" {
		dissect {
			mapping => { "message" => "%{event_description}   Policy:  %{policyname} Error Code:  %{resultcode}" }
			id => "msgParserId494"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId495
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId495" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId495"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Policy"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId496
	# line in RSA: <event_description>   Quick Mode Filter:  <filter> Error Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId496" {
		dissect {
			mapping => { "message" => "%{event_description}   Quick Mode Filter:  %{filter} Error Code:  %{resultcode}" }
			id => "msgParserId496"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId497
	# line in RSA: <event_description>   Error Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId497" {
		dissect {
			mapping => { "message" => "%{event_description}   Error Code:  %{resultcode}" }
			id => "msgParserId497"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId498
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Network Information:  Name (SSID):  <ssid>  Interface GUID:  <sinterface>  Local MAC Address: <smacaddr>  Peer MAC Address: <dmacaddr>  Additional Information:  Reason Code:  <result>  Error Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId498" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Network Information:  Name (SSID):  %{ssid}  Interface GUID:  %{sinterface}  Local MAC Address: %{smacaddr}  Peer MAC Address: %{dmacaddr}  Additional Information:  Reason Code:  %{result}  Error Code:  %{resultcode}" }
			id => "msgParserId498"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Authentication"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId499
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Interface:  Name:  <sinterface> Additional Information  Reason Code:  <result>  Error Code:  <resultcode>
	else if [logstash][msgparser][id] == "msgParserId499" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Interface:  Name:  %{sinterface} Additional Information  Reason Code:  %{result}  Error Code:  %{resultcode}" }
			id => "msgParserId499"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Authentication"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId500
	# line in RSA: <event_description>   Subject:  SID:   <sid>  Name:   <username>    Account Domain:  <domain>  LogonId:  <sessionid>  Process Information:  PID:   <process_id>  Name:   <process>  Network Information:  Remote IP Address: <daddr>  Remote Port:  <dport>  RPC Attributes: <param>
	else if [logstash][msgparser][id] == "msgParserId500" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  SID:   %{sid}  Name:   %{username}    Account Domain:  %{domain}  LogonId:  %{sessionid}  Process Information:  PID:   %{process_id}  Name:   %{process}  Network Information:  Remote IP Address: %{daddr}  Remote Port:  %{dport}  RPC Attributes: %{param}" }
			id => "msgParserId500"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId501
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  COM+ Catalog Collection: <fld93>  Object Name:   <obj_name>  Object Properties Modified: <param>
	else if [logstash][msgparser][id] == "msgParserId501" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  COM+ Catalog Collection: %{fld93}  Object Name:   %{obj_name}  Object Properties Modified: %{param}" }
			id => "msgParserId501"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_5889_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_5889_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  COM+ Catalog Collection: <fld93>  Object Name:   <obj_name>  Object Details: <fld94> This event occurs <fld50>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  COM+ Catalog Collection: %{fld93}  Object Name:   %{obj_name}  Object Details: %{fld94} This event occurs %{fld50}" }
				id => "message-Security_5889_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_5889_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_5889_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1206020000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_5889_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-Security_5889_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_5889_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_5889_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1206020000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId503
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Object:  COM+ Catalog Collection: <fld93>  Object Name:   <obj_name>  Object Details: <fld94>
	else if [logstash][msgparser][id] == "msgParserId503" {
		dissect {
			mapping => { "message" => "%{event_description}   Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Object:  COM+ Catalog Collection: %{fld93}  Object Name:   %{obj_name}  Object Details: %{fld94}" }
			id => "msgParserId503"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId504
	# line in RSA: <event_description>   Return Code: <resultcode>  GPO List: <fld95>
	else if [logstash][msgparser][id] == "msgParserId504" {
		dissect {
			mapping => { "message" => "%{event_description}   Return Code: %{resultcode}  GPO List: %{fld95}" }
			id => "msgParserId504"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId505
	# line in RSA: <event_description>   Error Code: <resultcode> GPO List: <fld95>
	else if [logstash][msgparser][id] == "msgParserId505" {
		dissect {
			mapping => { "message" => "%{event_description}   Error Code: %{resultcode} GPO List: %{fld95}" }
			id => "msgParserId505"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_6272_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_6272_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>  Client Machine:  Security ID:   <c_sid>  Account Name:   <c_username>  Fully Qualified Account Name: <fld96>  OS-Version: <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> RADIUS Client:  Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  <space>{Proxy Policy Name:|Connection Request Policy Name:|Policy Name:}  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  Account Session Identifier:  <sessionid1> {Logging Results: <fld95> Quarantine Information:|Quarantine Information:} <space> Result:    <disposition>  Session Identifier: <sessionid>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+User:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Client[\s]+Machine:[\s]+Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<fld96>[^\s]*)[\s]+OS\-Version:[\s]+(?<version>[^\s]*)[\s]+Called[\s]+Station[\s]+Identifier:[\s]+(?<hostid>[^\s]*)[\s]+Calling[\s]+Station[\s]+Identifier:[\s]+(?<r_hostid>[^\s]*)[\s]+NAS:[\s]+(?<info>[^\s]*)[\s]+RADIUS[\s]+Client:[\s]+Client[\s]+Friendly[\s]+Name:[\s]+(?<shost>[^\s]*)[\s]+Client[\s]+IP[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+Authentication[\s]+Details:[\s]+(?<space>[^PCP]*)(Proxy[\s]+Policy[\s]+Name:|Connection[\s]+Request[\s]+Policy[\s]+Name:|Policy[\s]+Name:)[\s]+(?<fld97>[^\s]*)[\s]+Network[\s]+Policy[\s]+Name:[\s]+(?<policyname>[^\s]*)[\s]+Authentication[\s]+Provider:[\s]+(?<fld99>[^\s]*)[\s]+Authentication[\s]+Server:[\s]+(?<fld28>[^\s]*)[\s]+Authentication[\s]+Type:[\s]+(?<authmethod>[^\s]*)[\s]+EAP[\s]+Type:[\s]+(?<fld98>[^\s]*)[\s]+Account[\s]+Session[\s]+Identifier:[\s]+(?<sessionid1>[^\s]*)[\s]+(Logging[\s]+Results:[\s]+(?<fld95>[^\s]*)[\s]+Quarantine[\s]+Information:|Quarantine[\s]+Information:)[\s]+(?<space>[^\s]*)[\s]+Result:[\s]+(?<disposition>[^\s]*)[\s]+Session[\s]+Identifier:[\s]+(?<sessionid>.*)$" }
				id => "message-Security_6272_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_6272_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_6272_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_6272_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>   User:<space>Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>  Client Machine: <space> Security ID:   <c_sid>  Account Name:   <c_username>  Fully Qualified Account Name: <fld96>  OS-Version: <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> NAS IPv4 Address: <fld1> NAS IPv6 Address: <fld2> NAS Identifier: <fld3> NAS Port-Type: <fld4> NAS Port: <fld5> RADIUS Client: <space> Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  <space>{Proxy Policy Name:|Connection Request Policy Name:|Policy Name:}  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  Account Session Identifier:  <sessionid1> {Logging Results: <fld95> Quarantine Information:|Quarantine Information:} <space> Result:    <disposition>  Session Identifier: <sessionid>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+User:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Client[\s]+Machine:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<fld96>[^\s]*)[\s]+OS\-Version:[\s]+(?<version>[^\s]*)[\s]+Called[\s]+Station[\s]+Identifier:[\s]+(?<hostid>[^\s]*)[\s]+Calling[\s]+Station[\s]+Identifier:[\s]+(?<r_hostid>[^\s]*)[\s]+NAS:[\s]+(?<info>[^\s]*)[\s]+NAS[\s]+IPv4[\s]+Address:[\s]+(?<fld1>[^\s]*)[\s]+NAS[\s]+IPv6[\s]+Address:[\s]+(?<fld2>[^\s]*)[\s]+NAS[\s]+Identifier:[\s]+(?<fld3>[^\s]*)[\s]+NAS[\s]+Port\-Type:[\s]+(?<fld4>[^\s]*)[\s]+NAS[\s]+Port:[\s]+(?<fld5>[^\s]*)[\s]+RADIUS[\s]+Client:[\s]+(?<space>[^\s]*)[\s]+Client[\s]+Friendly[\s]+Name:[\s]+(?<shost>[^\s]*)[\s]+Client[\s]+IP[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+Authentication[\s]+Details:[\s]+(?<space>[^PCP]*)(Proxy[\s]+Policy[\s]+Name:|Connection[\s]+Request[\s]+Policy[\s]+Name:|Policy[\s]+Name:)[\s]+(?<fld97>[^\s]*)[\s]+Network[\s]+Policy[\s]+Name:[\s]+(?<policyname>[^\s]*)[\s]+Authentication[\s]+Provider:[\s]+(?<fld99>[^\s]*)[\s]+Authentication[\s]+Server:[\s]+(?<fld28>[^\s]*)[\s]+Authentication[\s]+Type:[\s]+(?<authmethod>[^\s]*)[\s]+EAP[\s]+Type:[\s]+(?<fld98>[^\s]*)[\s]+Account[\s]+Session[\s]+Identifier:[\s]+(?<sessionid1>[^\s]*)[\s]+(Logging[\s]+Results:[\s]+(?<fld95>[^\s]*)[\s]+Quarantine[\s]+Information:|Quarantine[\s]+Information:)[\s]+(?<space>[^\s]*)[\s]+Result:[\s]+(?<disposition>[^\s]*)[\s]+Session[\s]+Identifier:[\s]+(?<sessionid>.*)$" }
				id => "message-Security_6272_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_6272_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_6272_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_6272_Microsoft-Windows-Security-Auditing:02
		# line in RSA: <event_description>User:<space>Security ID:<sid>Account Name:<username>Account Domain:<domain>Fully Qualified Account Name:<user_fullname>Client Machine:<space>Security ID:<c_sid>Account Name:<c_username>Fully Qualified Account Name:<fld96>Called Station Identifier:<hostid>Calling Station Identifier:<r_hostid>NAS:<info>NAS IPv4 Address:<fld1>NAS IPv6 Address:<fld2>NAS Identifier:<fld3>NAS Port-Type:<fld4>NAS Port:<fld5>RADIUS Client:<space>Client Friendly Name:<shost>Client IP Address:<saddr>Authentication Details:<space>{Proxy Policy Name:|Connection Request Policy Name:|Policy Name:}<fld97>Network Policy Name:<policyname>Authentication Provider:<fld99>Authentication Server:<fld28>Authentication Type:<authmethod>EAP Type:<fld98>Account Session Identifier:<sessionid1>Logging Results:<fld95>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^U]*)User:(?<space>[^S]*)Security[\s]+ID:(?<sid>[^A]*)Account[\s]+Name:(?<username>[^A]*)Account[\s]+Domain:(?<domain>[^F]*)Fully[\s]+Qualified[\s]+Account[\s]+Name:(?<user_fullname>[^C]*)Client[\s]+Machine:(?<space>[^S]*)Security[\s]+ID:(?<c_sid>[^A]*)Account[\s]+Name:(?<c_username>[^F]*)Fully[\s]+Qualified[\s]+Account[\s]+Name:(?<fld96>[^C]*)Called[\s]+Station[\s]+Identifier:(?<hostid>[^C]*)Calling[\s]+Station[\s]+Identifier:(?<r_hostid>[^N]*)NAS:(?<info>[^N]*)NAS[\s]+IPv4[\s]+Address:(?<fld1>[^N]*)NAS[\s]+IPv6[\s]+Address:(?<fld2>[^N]*)NAS[\s]+Identifier:(?<fld3>[^N]*)NAS[\s]+Port\-Type:(?<fld4>[^N]*)NAS[\s]+Port:(?<fld5>[^R]*)RADIUS[\s]+Client:(?<space>[^C]*)Client[\s]+Friendly[\s]+Name:(?<shost>[^C]*)Client[\s]+IP[\s]+Address:(?<saddr>[^A]*)Authentication[\s]+Details:(?<space>[^PCP]*)(Proxy[\s]+Policy[\s]+Name:|Connection[\s]+Request[\s]+Policy[\s]+Name:|Policy[\s]+Name:)(?<fld97>[^N]*)Network[\s]+Policy[\s]+Name:(?<policyname>[^A]*)Authentication[\s]+Provider:(?<fld99>[^A]*)Authentication[\s]+Server:(?<fld28>[^A]*)Authentication[\s]+Type:(?<authmethod>[^E]*)EAP[\s]+Type:(?<fld98>[^A]*)Account[\s]+Session[\s]+Identifier:(?<sessionid1>[^L]*)Logging[\s]+Results:(?<fld95>.*)$" }
				id => "message-Security_6272_Microsoft-Windows-Security-Auditing:02"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_6272_Microsoft-Windows-Security-Auditing:02"
					"[rsa][message][id1]" => "Security_6272_Microsoft-Windows-Security-Auditing:02"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_6273_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_6273_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>  Client Machine:  Security ID:   <c_sid>  Account Name:   <c_username>  Fully Qualified Account Name: <fld96>  OS-Version: <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> RADIUS Client:  Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  <space>{Proxy Policy Name:|Connection Request Policy Name:|Policy Name:}  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  {Account Session Identifier:  -  Logging Results: <fld95>|Account Session Identifier:  <sessionid1>}  Reason Code: <resultcode> {Reason: <result>. <fld94>|Reason: <result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+User:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Client[\s]+Machine:[\s]+Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<fld96>[^\s]*)[\s]+OS\-Version:[\s]+(?<version>[^\s]*)[\s]+Called[\s]+Station[\s]+Identifier:[\s]+(?<hostid>[^\s]*)[\s]+Calling[\s]+Station[\s]+Identifier:[\s]+(?<r_hostid>[^\s]*)[\s]+NAS:[\s]+(?<info>[^\s]*)[\s]+RADIUS[\s]+Client:[\s]+Client[\s]+Friendly[\s]+Name:[\s]+(?<shost>[^\s]*)[\s]+Client[\s]+IP[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+Authentication[\s]+Details:[\s]+(?<space>[^PCP]*)(Proxy[\s]+Policy[\s]+Name:|Connection[\s]+Request[\s]+Policy[\s]+Name:|Policy[\s]+Name:)[\s]+(?<fld97>[^\s]*)[\s]+Network[\s]+Policy[\s]+Name:[\s]+(?<policyname>[^\s]*)[\s]+Authentication[\s]+Provider:[\s]+(?<fld99>[^\s]*)[\s]+Authentication[\s]+Server:[\s]+(?<fld28>[^\s]*)[\s]+Authentication[\s]+Type:[\s]+(?<authmethod>[^\s]*)[\s]+EAP[\s]+Type:[\s]+(?<fld98>[^\s]*)[\s]+(Account[\s]+Session[\s]+Identifier:[\s]+\-[\s]+Logging[\s]+Results:[\s]+(?<fld95>[^\s]*)|Account[\s]+Session[\s]+Identifier:[\s]+(?<sessionid1>[^\s]*))[\s]+Reason[\s]+Code:[\s]+(?<resultcode>[^\s]*)[\s]+(Reason:[\s]+(?<result>[^\.]*)\.[\s]+(?<fld94>.*)|Reason:[\s]+(?<result>.*))$" }
				id => "message-Security_6273_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_6273_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_6273_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_6273_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>User:  Security ID:<sid>Account Name:<username>Account Domain:<domain>Fully Qualified Account Name:<user_fullname>Client Machine:  Security ID:<c_sid>Account Name:<c_username>Fully Qualified Account Name:<fld96>{OS-Version:<version>Called Station Identifier:<hostid>|Called Station Identifier:<hostid>}Calling Station Identifier:<r_hostid>{NAS:<info>NAS IPv4 Address:<fld1>NAS IPv6 Address:<fld2>NAS Identifier:<fld3>NAS Port-Type:<fld4>NAS Port:<fld5>|NAS:<info>}RADIUS Client:  Client Friendly Name:<shost>Client IP Address:<saddr>Authentication Details:{Proxy Policy Name:|Connection Request Policy Name:|Policy Name:}<fld97>Network Policy Name:<policyname>Authentication Provider:<fld99>Authentication Server:<fld28>Authentication Type:<authmethod>EAP Type:<fld98>{Account Session Identifier:<sessionid1>Logging Results:<fld95>Reason Code:<resultcode>Reason:<result>|Account Session Identifier:<sessionid1>Reason Code:<resultcode>Reason:<result>|Account Session Identifier:<sessionid1>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^U]*)User:[\s]+Security[\s]+ID:(?<sid>[^A]*)Account[\s]+Name:(?<username>[^A]*)Account[\s]+Domain:(?<domain>[^F]*)Fully[\s]+Qualified[\s]+Account[\s]+Name:(?<user_fullname>[^C]*)Client[\s]+Machine:[\s]+Security[\s]+ID:(?<c_sid>[^A]*)Account[\s]+Name:(?<c_username>[^F]*)Fully[\s]+Qualified[\s]+Account[\s]+Name:(?<fld96>[^OC]*)(OS\-Version:(?<version>[^C]*)Called[\s]+Station[\s]+Identifier:(?<hostid>[^C]*)|Called[\s]+Station[\s]+Identifier:(?<hostid>[^C]*))Calling[\s]+Station[\s]+Identifier:(?<r_hostid>[^NN]*)(NAS:(?<info>[^N]*)NAS[\s]+IPv4[\s]+Address:(?<fld1>[^N]*)NAS[\s]+IPv6[\s]+Address:(?<fld2>[^N]*)NAS[\s]+Identifier:(?<fld3>[^N]*)NAS[\s]+Port\-Type:(?<fld4>[^N]*)NAS[\s]+Port:(?<fld5>[^R]*)|NAS:(?<info>[^R]*))RADIUS[\s]+Client:[\s]+Client[\s]+Friendly[\s]+Name:(?<shost>[^C]*)Client[\s]+IP[\s]+Address:(?<saddr>[^A]*)Authentication[\s]+Details:(Proxy[\s]+Policy[\s]+Name:|Connection[\s]+Request[\s]+Policy[\s]+Name:|Policy[\s]+Name:)(?<fld97>[^N]*)Network[\s]+Policy[\s]+Name:(?<policyname>[^A]*)Authentication[\s]+Provider:(?<fld99>[^A]*)Authentication[\s]+Server:(?<fld28>[^A]*)Authentication[\s]+Type:(?<authmethod>[^E]*)EAP[\s]+Type:(?<fld98>[^AAA]*)(Account[\s]+Session[\s]+Identifier:(?<sessionid1>[^L]*)Logging[\s]+Results:(?<fld95>[^R]*)Reason[\s]+Code:(?<resultcode>[^R]*)Reason:(?<result>.*)|Account[\s]+Session[\s]+Identifier:(?<sessionid1>[^R]*)Reason[\s]+Code:(?<resultcode>[^R]*)Reason:(?<result>.*)|Account[\s]+Session[\s]+Identifier:(?<sessionid1>.*))$" }
				id => "message-Security_6273_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_6273_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_6273_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Security_6274_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_6274_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>  Client Machine:  Security ID:   <c_sid>  Account Name:   <c_username>  Fully Qualified Account Name: <fld96>  OS-Version:   <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> RADIUS Client:  Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  Proxy Policy Name:  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  Account Session Identifier:  <sessionid1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}   User:  Security ID:   %{sid}  Account Name:   %{username}    Account Domain:   %{domain}  Fully Qualified Account Name: %{user_fullname}  Client Machine:  Security ID:   %{c_sid}  Account Name:   %{c_username}  Fully Qualified Account Name: %{fld96}  OS-Version:   %{version}  Called Station Identifier:  %{hostid}  Calling Station Identifier:  %{r_hostid}  NAS:  %{info} RADIUS Client:  Client Friendly Name:  %{shost}  Client IP Address: %{saddr}  Authentication Details:  Proxy Policy Name:  %{fld97}  Network Policy Name:   %{policyname}  Authentication Provider:  %{fld99}  Authentication Server:   %{fld28}  Authentication Type:  %{authmethod}  EAP Type:  %{fld98}  Account Session Identifier:  %{sessionid1}" }
				id => "message-Security_6274_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
					"[event][id]" => "Security_6274_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_6274_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_6274_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>User:  Security ID:<sid>Account Name:<username>Account Domain:<domain>Fully Qualified Account Name:<user_fullname>Client Machine:  Security ID:<c_sid>Account Name:<c_username>Fully Qualified Account Name:<fld96>{OS-Version:<version>Called Station Identifier:<hostid>|Called Station Identifier:<hostid>}Calling Station Identifier:<r_hostid>{NAS:<info>NAS IPv4 Address:<fld1>NAS IPv6 Address:<fld2>NAS Identifier:<fld3>NAS Port-Type:<fld4>NAS Port:<fld5>|NAS:<info>}RADIUS Client:  Client Friendly Name:<shost>Client IP Address:<saddr>Authentication Details:{Proxy Policy Name:|Connection Request Policy Name:|Policy Name:}<fld97>Network Policy Name:<policyname>Authentication Provider:<fld99>Authentication Server:<fld28>Authentication Type:<authmethod>EAP Type:<fld98>{Account Session Identifier:<sessionid1>Reason Code:<resultcode>Reason:<result>|Account Session Identifier:<sessionid1>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^U]*)User:[\s]+Security[\s]+ID:(?<sid>[^A]*)Account[\s]+Name:(?<username>[^A]*)Account[\s]+Domain:(?<domain>[^F]*)Fully[\s]+Qualified[\s]+Account[\s]+Name:(?<user_fullname>[^C]*)Client[\s]+Machine:[\s]+Security[\s]+ID:(?<c_sid>[^A]*)Account[\s]+Name:(?<c_username>[^F]*)Fully[\s]+Qualified[\s]+Account[\s]+Name:(?<fld96>[^OC]*)(OS\-Version:(?<version>[^C]*)Called[\s]+Station[\s]+Identifier:(?<hostid>[^C]*)|Called[\s]+Station[\s]+Identifier:(?<hostid>[^C]*))Calling[\s]+Station[\s]+Identifier:(?<r_hostid>[^NN]*)(NAS:(?<info>[^N]*)NAS[\s]+IPv4[\s]+Address:(?<fld1>[^N]*)NAS[\s]+IPv6[\s]+Address:(?<fld2>[^N]*)NAS[\s]+Identifier:(?<fld3>[^N]*)NAS[\s]+Port\-Type:(?<fld4>[^N]*)NAS[\s]+Port:(?<fld5>[^R]*)|NAS:(?<info>[^R]*))RADIUS[\s]+Client:[\s]+Client[\s]+Friendly[\s]+Name:(?<shost>[^C]*)Client[\s]+IP[\s]+Address:(?<saddr>[^A]*)Authentication[\s]+Details:(Proxy[\s]+Policy[\s]+Name:|Connection[\s]+Request[\s]+Policy[\s]+Name:|Policy[\s]+Name:)(?<fld97>[^N]*)Network[\s]+Policy[\s]+Name:(?<policyname>[^A]*)Authentication[\s]+Provider:(?<fld99>[^A]*)Authentication[\s]+Server:(?<fld28>[^A]*)Authentication[\s]+Type:(?<authmethod>[^E]*)EAP[\s]+Type:(?<fld98>[^AA]*)(Account[\s]+Session[\s]+Identifier:(?<sessionid1>[^R]*)Reason[\s]+Code:(?<resultcode>[^R]*)Reason:(?<result>.*)|Account[\s]+Session[\s]+Identifier:(?<sessionid1>.*))$" }
				id => "message-Security_6274_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Security_6274_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_6274_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId511
	# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>  Client Machine:  Security ID:   <c_sid>  Account Name:   <c_username>  Fully Qualified Account Name: <fld96>  OS-Version:   <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> RADIUS Client:  Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  Proxy Policy Name:  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  Account Session Identifier:  <sessionid1>
	else if [logstash][msgparser][id] == "msgParserId511" {
		dissect {
			mapping => { "message" => "%{event_description}   User:  Security ID:   %{sid}  Account Name:   %{username}    Account Domain:   %{domain}  Fully Qualified Account Name: %{user_fullname}  Client Machine:  Security ID:   %{c_sid}  Account Name:   %{c_username}  Fully Qualified Account Name: %{fld96}  OS-Version:   %{version}  Called Station Identifier:  %{hostid}  Calling Station Identifier:  %{r_hostid}  NAS:  %{info} RADIUS Client:  Client Friendly Name:  %{shost}  Client IP Address: %{saddr}  Authentication Details:  Proxy Policy Name:  %{fld97}  Network Policy Name:   %{policyname}  Authentication Provider:  %{fld99}  Authentication Server:   %{fld28}  Authentication Type:  %{authmethod}  EAP Type:  %{fld98}  Account Session Identifier:  %{sessionid1}" }
			id => "msgParserId511"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId513
	# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>  Account Domain:   <domain>  Fully Qualified Account Name: <fld27>  Client Machine:  Security ID:   <c_sid>  Account Name:   <c_username>    Fully Qualified Account Name: <fld96>  OS-Version:   <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> RADIUS Client:  Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  Proxy Policy Name:  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  Account Session Identifier:  <sessionid1> Quarantine Information:  Result: <disposition> Extended-Result: <result>  Session Identifier: <fld25> Help URL: <url> System Health Validator Result(s):<fld91>
	else if [logstash][msgparser][id] == "msgParserId513" {
		dissect {
			mapping => { "message" => "%{event_description}   User:  Security ID:   %{sid}  Account Name:   %{username}  Account Domain:   %{domain}  Fully Qualified Account Name: %{fld27}  Client Machine:  Security ID:   %{c_sid}  Account Name:   %{c_username}    Fully Qualified Account Name: %{fld96}  OS-Version:   %{version}  Called Station Identifier:  %{hostid}  Calling Station Identifier:  %{r_hostid}  NAS:  %{info} RADIUS Client:  Client Friendly Name:  %{shost}  Client IP Address: %{saddr}  Authentication Details:  Proxy Policy Name:  %{fld97}  Network Policy Name:   %{policyname}  Authentication Provider:  %{fld99}  Authentication Server:   %{fld28}  Authentication Type:  %{authmethod}  EAP Type:  %{fld98}  Account Session Identifier:  %{sessionid1} Quarantine Information:  Result: %{disposition} Extended-Result: %{result}  Session Identifier: %{fld25} Help URL: %{url} System Health Validator Result(s):%{fld91}" }
			id => "msgParserId513"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId514
	# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>  Account Domain:   <domain>  Fully Qualified Account Name: <fld27>  Client Machine:  Security ID:   <c_sid>  Account Name:   <c_username>    Fully Qualified Account Name: <fld96>  OS-Version:   <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> RADIUS Client:  Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  Proxy Policy Name:  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  Account Session Identifier:  <sessionid1> Quarantine Information:  Result: <disposition> Extended-Result: <result>  Session Identifier: <fld25> Help URL: <url> System Health Validator Result(s):<fld91>
	else if [logstash][msgparser][id] == "msgParserId514" {
		dissect {
			mapping => { "message" => "%{event_description}   User:  Security ID:   %{sid}  Account Name:   %{username}  Account Domain:   %{domain}  Fully Qualified Account Name: %{fld27}  Client Machine:  Security ID:   %{c_sid}  Account Name:   %{c_username}    Fully Qualified Account Name: %{fld96}  OS-Version:   %{version}  Called Station Identifier:  %{hostid}  Calling Station Identifier:  %{r_hostid}  NAS:  %{info} RADIUS Client:  Client Friendly Name:  %{shost}  Client IP Address: %{saddr}  Authentication Details:  Proxy Policy Name:  %{fld97}  Network Policy Name:   %{policyname}  Authentication Provider:  %{fld99}  Authentication Server:   %{fld28}  Authentication Type:  %{authmethod}  EAP Type:  %{fld98}  Account Session Identifier:  %{sessionid1} Quarantine Information:  Result: %{disposition} Extended-Result: %{result}  Session Identifier: %{fld25} Help URL: %{url} System Health Validator Result(s):%{fld91}" }
			id => "msgParserId514"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Security_6278_Microsoft-Windows-Security-Auditing" {
		# MESSAGE Security_6278_Microsoft-Windows-Security-Auditing
		# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>  Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>  Client Machine:  Security ID:   <c_sid>  Account Name:   <c_username>    Fully Qualified Account Name: <fld96>  OS-Version:   <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> RADIUS Client:  Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  {Proxy Policy Name:|Connection Request Policy Name:}  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  Account Session Identifier:  <sessionid1> {Logging Results: <fld95> Quarantine Information:|Quarantine Information:} <space> Result: <disposition> Extended-Result: <result>  Session Identifier: <sessionid> Help URL: <url> System Health Validator Result(s):<fld91>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+User:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Client[\s]+Machine:[\s]+Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<fld96>[^\s]*)[\s]+OS\-Version:[\s]+(?<version>[^\s]*)[\s]+Called[\s]+Station[\s]+Identifier:[\s]+(?<hostid>[^\s]*)[\s]+Calling[\s]+Station[\s]+Identifier:[\s]+(?<r_hostid>[^\s]*)[\s]+NAS:[\s]+(?<info>[^\s]*)[\s]+RADIUS[\s]+Client:[\s]+Client[\s]+Friendly[\s]+Name:[\s]+(?<shost>[^\s]*)[\s]+Client[\s]+IP[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+Authentication[\s]+Details:[\s]+(Proxy[\s]+Policy[\s]+Name:|Connection[\s]+Request[\s]+Policy[\s]+Name:)[\s]+(?<fld97>[^\s]*)[\s]+Network[\s]+Policy[\s]+Name:[\s]+(?<policyname>[^\s]*)[\s]+Authentication[\s]+Provider:[\s]+(?<fld99>[^\s]*)[\s]+Authentication[\s]+Server:[\s]+(?<fld28>[^\s]*)[\s]+Authentication[\s]+Type:[\s]+(?<authmethod>[^\s]*)[\s]+EAP[\s]+Type:[\s]+(?<fld98>[^\s]*)[\s]+Account[\s]+Session[\s]+Identifier:[\s]+(?<sessionid1>[^\s]*)[\s]+(Logging[\s]+Results:[\s]+(?<fld95>[^\s]*)[\s]+Quarantine[\s]+Information:|Quarantine[\s]+Information:)[\s]+(?<space>[^\s]*)[\s]+Result:[\s]+(?<disposition>[^\s]*)[\s]+Extended\-Result:[\s]+(?<result>[^\s]*)[\s]+Session[\s]+Identifier:[\s]+(?<sessionid>[^\s]*)[\s]+Help[\s]+URL:[\s]+(?<url>[^\s]*)[\s]+System[\s]+Health[\s]+Validator[\s]+Result\(s\):(?<fld91>.*)$" }
				id => "message-Security_6278_Microsoft-Windows-Security-Auditing"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_6278_Microsoft-Windows-Security-Auditing"
					"[rsa][message][id1]" => "Security_6278_Microsoft-Windows-Security-Auditing"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
		# MESSAGE Security_6278_Microsoft-Windows-Security-Auditing:01
		# line in RSA: <event_description>   User:<space>Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>  Client Machine: <space> Security ID:   <c_sid>  Account Name:   <c_username>  Fully Qualified Account Name: <fld96>  OS-Version: <version>  Called Station Identifier:  <hostid>  Calling Station Identifier:  <r_hostid>  NAS:  <info> NAS IPv4 Address: <fld1> NAS IPv6 Address: <fld2> NAS Identifier: <fld3> NAS Port-Type: <fld4> NAS Port: <fld5> RADIUS Client: <space> Client Friendly Name:  <shost>  Client IP Address: <saddr>  Authentication Details:  <space>{Proxy Policy Name:|Connection Request Policy Name:|Policy Name:}  <fld97>  Network Policy Name:   <policyname>  Authentication Provider:  <fld99>  Authentication Server:   <fld28>  Authentication Type:  <authmethod>  EAP Type:  <fld98>  Account Session Identifier:  <sessionid1> {Logging Results: <fld95> Quarantine Information:|Quarantine Information:} <space> Result:    <disposition>  Extended-Result: <result> Session Identifier: <sessionid> Help URL: <url> System Health Validator Result(s): <fld12>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\s]*)[\s]+User:(?<space>[^S]*)Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<user_fullname>[^\s]*)[\s]+Client[\s]+Machine:[\s]+(?<space>[^\s]*)[\s]+Security[\s]+ID:[\s]+(?<c_sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<c_username>[^\s]*)[\s]+Fully[\s]+Qualified[\s]+Account[\s]+Name:[\s]+(?<fld96>[^\s]*)[\s]+OS\-Version:[\s]+(?<version>[^\s]*)[\s]+Called[\s]+Station[\s]+Identifier:[\s]+(?<hostid>[^\s]*)[\s]+Calling[\s]+Station[\s]+Identifier:[\s]+(?<r_hostid>[^\s]*)[\s]+NAS:[\s]+(?<info>[^\s]*)[\s]+NAS[\s]+IPv4[\s]+Address:[\s]+(?<fld1>[^\s]*)[\s]+NAS[\s]+IPv6[\s]+Address:[\s]+(?<fld2>[^\s]*)[\s]+NAS[\s]+Identifier:[\s]+(?<fld3>[^\s]*)[\s]+NAS[\s]+Port\-Type:[\s]+(?<fld4>[^\s]*)[\s]+NAS[\s]+Port:[\s]+(?<fld5>[^\s]*)[\s]+RADIUS[\s]+Client:[\s]+(?<space>[^\s]*)[\s]+Client[\s]+Friendly[\s]+Name:[\s]+(?<shost>[^\s]*)[\s]+Client[\s]+IP[\s]+Address:[\s]+(?<saddr>[^\s]*)[\s]+Authentication[\s]+Details:[\s]+(?<space>[^PCP]*)(Proxy[\s]+Policy[\s]+Name:|Connection[\s]+Request[\s]+Policy[\s]+Name:|Policy[\s]+Name:)[\s]+(?<fld97>[^\s]*)[\s]+Network[\s]+Policy[\s]+Name:[\s]+(?<policyname>[^\s]*)[\s]+Authentication[\s]+Provider:[\s]+(?<fld99>[^\s]*)[\s]+Authentication[\s]+Server:[\s]+(?<fld28>[^\s]*)[\s]+Authentication[\s]+Type:[\s]+(?<authmethod>[^\s]*)[\s]+EAP[\s]+Type:[\s]+(?<fld98>[^\s]*)[\s]+Account[\s]+Session[\s]+Identifier:[\s]+(?<sessionid1>[^\s]*)[\s]+(Logging[\s]+Results:[\s]+(?<fld95>[^\s]*)[\s]+Quarantine[\s]+Information:|Quarantine[\s]+Information:)[\s]+(?<space>[^\s]*)[\s]+Result:[\s]+(?<disposition>[^\s]*)[\s]+Extended\-Result:[\s]+(?<result>[^\s]*)[\s]+Session[\s]+Identifier:[\s]+(?<sessionid>[^\s]*)[\s]+Help[\s]+URL:[\s]+(?<url>[^\s]*)[\s]+System[\s]+Health[\s]+Validator[\s]+Result\(s\):[\s]+(?<fld12>.*)$" }
				id => "message-Security_6278_Microsoft-Windows-Security-Auditing:01"
				add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Security_6278_Microsoft-Windows-Security-Auditing:01"
					"[rsa][message][id1]" => "Security_6278_Microsoft-Windows-Security-Auditing:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId517
	# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>
	else if [logstash][msgparser][id] == "msgParserId517" {
		dissect {
			mapping => { "message" => "%{event_description}   User:  Security ID:   %{sid}  Account Name:   %{username}    Account Domain:   %{domain}  Fully Qualified Account Name: %{user_fullname}" }
			id => "msgParserId517"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Lockout"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId518
	# line in RSA: <event_description>   User:  Security ID:   <sid>  Account Name:   <username>    Account Domain:   <domain>  Fully Qualified Account Name: <user_fullname>
	else if [logstash][msgparser][id] == "msgParserId518" {
		dissect {
			mapping => { "message" => "%{event_description}   User:  Security ID:   %{sid}  Account Name:   %{username}    Account Domain:   %{domain}  Fully Qualified Account Name: %{user_fullname}" }
			id => "msgParserId518"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId519
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId519" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId519"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Eventlog"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId520
	# line in RSA: <event_description>  Subject: <space> Security ID: <sid>  Account Name: <username>    Domain Name: <domain>  Logon ID: <sessionid>
	else if [logstash][msgparser][id] == "msgParserId520" {
		dissect {
			mapping => { "message" => "%{event_description}  Subject: %{space} Security ID: %{sid}  Account Name: %{username}    Domain Name: %{domain}  Logon ID: %{sessionid}" }
			id => "msgParserId520"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Eventlog"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId521
	# line in RSA: <event_description>  The reason code is <resultcode>
	else if [logstash][msgparser][id] == "msgParserId521" {
		dissect {
			mapping => { "message" => "%{event_description}  The reason code is %{resultcode}" }
			id => "msgParserId521"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Eventlog"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId522
	# line in RSA: <event_description>   Target Account:  Security ID:  <c_sid>  Account Name:  <c_username>  Account Domain:  <c_domain>  Trust Information:  <info>
	else if [logstash][msgparser][id] == "msgParserId522" {
		dissect {
			mapping => { "message" => "%{event_description}   Target Account:  Security ID:  %{c_sid}  Account Name:  %{c_username}  Account Domain:  %{c_domain}  Trust Information:  %{info}" }
			id => "msgParserId522"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId523
	# line in RSA: <event_description> Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  Group Name:  <group>  Group Domain:  <remote_domain>  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId523" {
		dissect {
			mapping => { "message" => "%{event_description} Subject:  Security ID:  %{sid}  Account Name:  %{username}    Account Domain:  %{domain}  Logon ID:  %{sessionid}  Group:  Security ID:  %{groupid}  Group Name:  %{group}  Group Domain:  %{remote_domain}  Additional Information:  Privileges:  %{privilege}" }
			id => "msgParserId523"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId524
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid> { Account Name:  <group>  Account Domain:  <remote_domain> | Group Name:  <group>  Group Domain:  <remote_domain> } Attributes:  <param>  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId524" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Group:[\s]+Security[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+([\s]*Account[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+|[\s]*Group[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Group[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+)[\s]+Attributes:[\s]+(?<param>[^\s]*)[\s]+Additional[\s]+Information:[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId524"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId525
	# line in RSA: <event_description>   Subject:  Security ID:  <sid>  Account Name:  <username>    Account Domain:  <domain>  Logon ID:  <sessionid>  Group:  Security ID:  <groupid>  { Account Name:  <group>  Account Domain:  <remote_domain> | Group Name:  <group>  Group Domain:  <remote_domain> }  Additional Information:  Privileges:  <privilege>
	else if [logstash][msgparser][id] == "msgParserId525" {
		grok {
			match => { "message" => "^(?<event_description>[^\s]*)[\s]+Subject:[\s]+Security[\s]+ID:[\s]+(?<sid>[^\s]*)[\s]+Account[\s]+Name:[\s]+(?<username>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<domain>[^\s]*)[\s]+Logon[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Group:[\s]+Security[\s]+ID:[\s]+(?<groupid>[^\s]*)[\s]+([\s]*Account[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Account[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+|[\s]*Group[\s]+Name:[\s]+(?<group>[^\s]*)[\s]+Group[\s]+Domain:[\s]+(?<remote_domain>[^\s]*)[\s]+)[\s]+Additional[\s]+Information:[\s]+Privileges:[\s]+(?<privilege>.*)$" }
			id => "msgParserId525"
			add_field => {
				"ec_subject" => "Group"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId526
	# line in RSA: <event_description>  CA Configuration ID:  <id1> New Value:  <change_new>
	else if [logstash][msgparser][id] == "msgParserId526" {
		dissect {
			mapping => { "message" => "%{event_description}  CA Configuration ID:  %{id1} New Value:  %{change_new}" }
			id => "msgParserId526"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId527
	# line in RSA: <event_description> Property Name:  <param> New Value: <change_new>
	else if [logstash][msgparser][id] == "msgParserId527" {
		dissect {
			mapping => { "message" => "%{event_description} Property Name:  %{param} New Value: %{change_new}" }
			id => "msgParserId527"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId528
	# line in RSA: <event_description> New Value: <change_new>
	else if [logstash][msgparser][id] == "msgParserId528" {
		dissect {
			mapping => { "message" => "%{event_description} New Value: %{change_new}" }
			id => "msgParserId528"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId529
	# line in RSA: <event_description> . <info>
	else if [logstash][msgparser][id] == "msgParserId529" {
		dissect {
			mapping => { "message" => "%{event_description} . %{info}" }
			id => "msgParserId529"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId530
	# line in RSA: <event_description> Subject: Security ID: <sid> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid> Object: Object Server: <obj_server> Object Type: <obj_type> Object Name: <obj_name> Auditing Settings: Original Security Descriptor: <change_old> New Security Descriptor: <change_new>
	else if [logstash][msgparser][id] == "msgParserId530" {
		dissect {
			mapping => { "message" => "%{event_description} Subject: Security ID: %{sid} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid} Object: Object Server: %{obj_server} Object Type: %{obj_type} Object Name: %{obj_name} Auditing Settings: Original Security Descriptor: %{change_old} New Security Descriptor: %{change_new}" }
			id => "msgParserId530"
			add_field => {
				"ec_theme" => "Policy"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId531
	# line in RSA: <event_description><space>Subject:<space>Security ID: <sid> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid><space>Share Information:<space>Share Name: <obj_name> Share Path: <directory>
	else if [logstash][msgparser][id] == "msgParserId531" {
		dissect {
			mapping => { "message" => "%{event_description}%{space}Subject:%{space}Security ID: %{sid} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid}%{space}Share Information:%{space}Share Name: %{obj_name} Share Path: %{directory}" }
			id => "msgParserId531"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId532
	# line in RSA: <event_description><space>Subject:<space>Security ID: <sid> Account Name: <username><space>Account Domain: <domain><space>Logon ID: <sessionid><space>Share Information:<space>Object Type: <obj_type><space>Share Name: <obj_name><space>Share Path: <directory><space>Old Remark: <info>
	else if [logstash][msgparser][id] == "msgParserId532" {
		dissect {
			mapping => { "message" => "%{event_description}%{space}Subject:%{space}Security ID: %{sid} Account Name: %{username}%{space}Account Domain: %{domain}%{space}Logon ID: %{sessionid}%{space}Share Information:%{space}Object Type: %{obj_type}%{space}Share Name: %{obj_name}%{space}Share Path: %{directory}%{space}Old Remark: %{info}" }
			id => "msgParserId532"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId533
	# line in RSA: <event_description> Subject: <space>Security ID: <sid> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid> Share Information: <space>Share Name: <obj_name> Share Path: <directory>
	else if [logstash][msgparser][id] == "msgParserId533" {
		dissect {
			mapping => { "message" => "%{event_description} Subject: %{space}Security ID: %{sid} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid} Share Information: %{space}Share Name: %{obj_name} Share Path: %{directory}" }
			id => "msgParserId533"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId534
	# line in RSA: <event_description> Subject: <space> Security ID: <fld38> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid> Network Information: <space> Object Type: <obj_type> Source Address: <saddr> Source Port: <sport> Share Information: <space> Share Name: <obj_name> Share Path: <directory> Relative Target Name: <filename> Access Request Information: <space> Access Mask: <fld52> Accesses: <accesses> Access Check Results: <disposition>
	else if [logstash][msgparser][id] == "msgParserId534" {
		dissect {
			mapping => { "message" => "%{event_description} Subject: %{space} Security ID: %{fld38} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid} Network Information: %{space} Object Type: %{obj_type} Source Address: %{saddr} Source Port: %{sport} Share Information: %{space} Share Name: %{obj_name} Share Path: %{directory} Relative Target Name: %{filename} Access Request Information: %{space} Access Mask: %{fld52} Accesses: %{accesses} Access Check Results: %{disposition}" }
			id => "msgParserId534"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId535
	# line in RSA: <event_description> Network Information: <info>
	else if [logstash][msgparser][id] == "msgParserId535" {
		dissect {
			mapping => { "message" => "%{event_description} Network Information: %{info}" }
			id => "msgParserId535"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId536
	# line in RSA: <event_description> Network Information: <info> Packets Discarded: <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId536" {
		dissect {
			mapping => { "message" => "%{event_description} Network Information: %{info} Packets Discarded: %{dclass_counter1}" }
			id => "msgParserId536"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId537
	# line in RSA: <event_description> Network Information: Direction: <direction> Source Address: <saddr> Destination Address: <daddr> <info> Filter Information: <filter>
	else if [logstash][msgparser][id] == "msgParserId537" {
		dissect {
			mapping => { "message" => "%{event_description} Network Information: Direction: %{direction} Source Address: %{saddr} Destination Address: %{daddr} %{info} Filter Information: %{filter}" }
			id => "msgParserId537"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId538
	# line in RSA: <event_description> Subject: Security ID: <fld38> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid> SPN: SPN Name: <obj_name> Error Code: <resultcode> Server Information: <info>
	else if [logstash][msgparser][id] == "msgParserId538" {
		dissect {
			mapping => { "message" => "%{event_description} Subject: Security ID: %{fld38} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid} SPN: SPN Name: %{obj_name} Error Code: %{resultcode} Server Information: %{info}" }
			id => "msgParserId538"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId539
	# line in RSA: <event_description> File Name: <filename>
	else if [logstash][msgparser][id] == "msgParserId539" {
		dissect {
			mapping => { "message" => "%{event_description} File Name: %{filename}" }
			id => "msgParserId539"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId540
	# line in RSA: <event_description> IP address of the client that sent this response: <saddr>
	else if [logstash][msgparser][id] == "msgParserId540" {
		dissect {
			mapping => { "message" => "%{event_description} IP address of the client that sent this response: %{saddr}" }
			id => "msgParserId540"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId541
	# line in RSA: <event_description> IP address of the client that sent this data: <saddr>
	else if [logstash][msgparser][id] == "msgParserId541" {
		dissect {
			mapping => { "message" => "%{event_description} IP address of the client that sent this data: %{saddr}" }
			id => "msgParserId541"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId542
	# line in RSA: <event_description> IP address of the client that sent this message: <saddr>
	else if [logstash][msgparser][id] == "msgParserId542" {
		dissect {
			mapping => { "message" => "%{event_description} IP address of the client that sent this message: %{saddr}" }
			id => "msgParserId542"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId543
	# line in RSA: <event_description> Domain name of the hosted cache is: <domain>
	else if [logstash][msgparser][id] == "msgParserId543" {
		dissect {
			mapping => { "message" => "%{event_description} Domain name of the hosted cache is: %{domain}" }
			id => "msgParserId543"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId544
	# line in RSA: <event_description> Domain name of the hosted cache: <domain> Error Code: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId544" {
		dissect {
			mapping => { "message" => "%{event_description} Domain name of the hosted cache: %{domain} Error Code: %{resultcode}" }
			id => "msgParserId544"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"ec_activity" => "Permit"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId545
	# line in RSA: BranchCache: <dclass_counter1> instance(s) of event id <id> occurred.
	else if [logstash][msgparser][id] == "msgParserId545" {
		dissect {
			mapping => { "message" => "BranchCache: %{dclass_counter1} instance(s) of event id %{id} occurred." }
			id => "msgParserId545"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId546
	# line in RSA: <event_description> The session name is <sessionid> and the reason code is <resultcode>
	else if [logstash][msgparser][id] == "msgParserId546" {
		dissect {
			mapping => { "message" => "%{event_description} The session name is %{sessionid} and the reason code is %{resultcode}" }
			id => "msgParserId546"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Eventlog"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId547
	# line in RSA: The event logging service encountered an error <resultcode> while going through publisher configuration. <info>
	else if [logstash][msgparser][id] == "msgParserId547" {
		dissect {
			mapping => { "message" => "The event logging service encountered an error %{resultcode} while going through publisher configuration. %{info}" }
			id => "msgParserId547"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Eventlog"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId548
	# line in RSA: <event_description> Log:<space>Application  File: <filename>
	else if [logstash][msgparser][id] == "msgParserId548" {
		dissect {
			mapping => { "message" => "%{event_description} Log:%{space}Application  File: %{filename}" }
			id => "msgParserId548"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Eventlog"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId549
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId549" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId549"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId550
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId550" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId550"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId551
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId551" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId551"
			add_field => {
				"id" => "%{msgIdPart1}"
				"event_source" => "%{msgIdPart2}"
				"event_user" => "%{Hevent_user}"
				"event_type" => "TSGATEWAY"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"data" => "%{Hdata}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId552
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId552" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId552"
			add_field => {
				"ec_activity" => "Enable"
				"ec_theme" => "Configuration"
				"id" => "%{msgIdPart1}"
				"event_source" => "%{msgIdPart2}"
				"event_user" => "%{Hevent_user}"
				"event_type" => "TSGATEWAY"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"data" => "%{Hdata}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId553
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId553" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId553"
			add_field => {
				"ec_activity" => "Disable"
				"ec_theme" => "Configuration"
				"id" => "%{msgIdPart1}"
				"event_source" => "%{msgIdPart2}"
				"event_user" => "%{Hevent_user}"
				"event_type" => "TSGATEWAY"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"data" => "%{Hdata}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId554
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId554" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId554"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"id" => "%{msgIdPart1}"
				"event_source" => "%{msgIdPart2}"
				"event_user" => "%{Hevent_user}"
				"event_type" => "TSGATEWAY"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"data" => "%{Hdata}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId555
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId555" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId555"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"id" => "%{msgIdPart1}"
				"event_source" => "%{msgIdPart2}"
				"event_user" => "%{Hevent_user}"
				"event_type" => "TSGATEWAY"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"data" => "%{Hdata}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId556
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId556" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId556"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"id" => "%{msgIdPart1}"
				"event_source" => "%{msgIdPart2}"
				"event_user" => "%{Hevent_user}"
				"event_type" => "TSGATEWAY"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"data" => "%{Hdata}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "PACKET" {
		# MESSAGE PACKET:QRcv-NOERROR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> Q [<fld12> <fld13> NOERROR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOERROR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QRcv-NOERROR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
				"resultcode" => "NOERROR"
				"action" => "Rcv"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QRcv-NOERROR"
					"[rsa][message][id1]" => "PACKET:QRcv-NOERROR"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QRcv-NXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> Q [<fld12> <fld13> NXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QRcv-NXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "NXDOMAIN"
				"action" => "Rcv"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QRcv-NXDOMAIN"
					"[rsa][message][id1]" => "PACKET:QRcv-NXDOMAIN"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QRcv-NOTAUTH
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> Q [<fld12> <fld13> NOTAUTH] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTAUTH\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QRcv-NOTAUTH"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"resultcode" => "NOTAUTH"
				"action" => "Rcv"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QRcv-NOTAUTH"
					"[rsa][message][id1]" => "PACKET:QRcv-NOTAUTH"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QRcv-SERVFAIL
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> Q [<fld12> <fld13> SERVFAIL] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+SERVFAIL\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QRcv-SERVFAIL"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "SERVFAIL"
				"action" => "Rcv"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QRcv-SERVFAIL"
					"[rsa][message][id1]" => "PACKET:QRcv-SERVFAIL"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QRcv-REFUSED
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> Q [<fld12> <fld13> REFUSED] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+REFUSED\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QRcv-REFUSED"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"resultcode" => "REFUSED"
				"action" => "Rcv"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QRcv-REFUSED"
					"[rsa][message][id1]" => "PACKET:QRcv-REFUSED"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QSnd-NOERROR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> Q [<fld12> <fld13> NOERROR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOERROR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QSnd-NOERROR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
				"resultcode" => "NOERROR"
				"action" => "Snd"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QSnd-NOERROR"
					"[rsa][message][id1]" => "PACKET:QSnd-NOERROR"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QSnd-NXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> Q [<fld12> <fld13> NXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QSnd-NXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "NXDOMAIN"
				"action" => "Snd"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QSnd-NXDOMAIN"
					"[rsa][message][id1]" => "PACKET:QSnd-NXDOMAIN"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QSnd-NOTAUTH
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> Q [<fld12> <fld13> NOTAUTH] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTAUTH\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QSnd-NOTAUTH"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"resultcode" => "NOTAUTH"
				"action" => "Snd"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QSnd-NOTAUTH"
					"[rsa][message][id1]" => "PACKET:QSnd-NOTAUTH"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QSnd-SERVFAIL
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> Q [<fld12> <fld13> SERVFAIL] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+SERVFAIL\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QSnd-SERVFAIL"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "SERVFAIL"
				"action" => "Snd"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QSnd-SERVFAIL"
					"[rsa][message][id1]" => "PACKET:QSnd-SERVFAIL"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QSnd-REFUSED
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> Q [<fld12> <fld13> REFUSED] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+Q[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+REFUSED\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QSnd-REFUSED"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"ec_outcome" => "Failure"
				"resultcode" => "REFUSED"
				"action" => "Snd"
				"result" => "Standard Query"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QSnd-REFUSED"
					"[rsa][message][id1]" => "PACKET:QSnd-REFUSED"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NRcv-NOERROR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> N [<fld12> <fld13> NOERROR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOERROR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NRcv-NOERROR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
				"resultcode" => "NOERROR"
				"action" => "Rcv"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NRcv-NOERROR"
					"[rsa][message][id1]" => "PACKET:NRcv-NOERROR"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NRcv-NXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> N [<fld12> <fld13> NXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NRcv-NXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "NXDOMAIN"
				"action" => "Rcv"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NRcv-NXDOMAIN"
					"[rsa][message][id1]" => "PACKET:NRcv-NXDOMAIN"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NRcv-NOTAUTH
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> N [<fld12> <fld13> NOTAUTH] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTAUTH\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NRcv-NOTAUTH"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"resultcode" => "NOTAUTH"
				"action" => "Rcv"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NRcv-NOTAUTH"
					"[rsa][message][id1]" => "PACKET:NRcv-NOTAUTH"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NRcv-SERVFAIL
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> N [<fld12> <fld13> SERVFAIL] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+SERVFAIL\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NRcv-SERVFAIL"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "SERVFAIL"
				"action" => "Rcv"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NRcv-SERVFAIL"
					"[rsa][message][id1]" => "PACKET:NRcv-SERVFAIL"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NRcv-REFUSED
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> N [<fld12> <fld13> REFUSED] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+REFUSED\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NRcv-REFUSED"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"resultcode" => "REFUSED"
				"action" => "Rcv"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NRcv-REFUSED"
					"[rsa][message][id1]" => "PACKET:NRcv-REFUSED"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NSnd-NOERROR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> N [<fld12> <fld13> NOERROR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOERROR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NSnd-NOERROR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
				"resultcode" => "NOERROR"
				"action" => "Snd"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NSnd-NOERROR"
					"[rsa][message][id1]" => "PACKET:NSnd-NOERROR"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NSnd-NXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> N [<fld12> <fld13> NXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NSnd-NXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "NXDOMAIN"
				"action" => "Snd"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NSnd-NXDOMAIN"
					"[rsa][message][id1]" => "PACKET:NSnd-NXDOMAIN"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NSnd-NOTAUTH
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> N [<fld12> <fld13> NOTAUTH] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTAUTH\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NSnd-NOTAUTH"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"resultcode" => "NOTAUTH"
				"action" => "Snd"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NSnd-NOTAUTH"
					"[rsa][message][id1]" => "PACKET:NSnd-NOTAUTH"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NSnd-SERVFAIL
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> N [<fld12> <fld13> SERVFAIL] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+SERVFAIL\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NSnd-SERVFAIL"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "SERVFAIL"
				"action" => "Snd"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NSnd-SERVFAIL"
					"[rsa][message][id1]" => "PACKET:NSnd-SERVFAIL"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:NSnd-REFUSED
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> N [<fld12> <fld13> REFUSED] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+N[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+REFUSED\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:NSnd-REFUSED"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"resultcode" => "REFUSED"
				"action" => "Snd"
				"result" => "Notify"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:NSnd-REFUSED"
					"[rsa][message][id1]" => "PACKET:NSnd-REFUSED"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:URcv-NOERROR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> U [<fld12> <fld13> NOERROR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOERROR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:URcv-NOERROR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
				"resultcode" => "NOERROR"
				"action" => "Rcv"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:URcv-NOERROR"
					"[rsa][message][id1]" => "PACKET:URcv-NOERROR"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:URcv-NXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> U [<fld12> <fld13> NXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:URcv-NXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "NXDOMAIN"
				"action" => "Rcv"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:URcv-NXDOMAIN"
					"[rsa][message][id1]" => "PACKET:URcv-NXDOMAIN"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:URcv-NOTAUTH
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> U [<fld12> <fld13> NOTAUTH] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTAUTH\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:URcv-NOTAUTH"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"resultcode" => "NOTAUTH"
				"action" => "Rcv"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:URcv-NOTAUTH"
					"[rsa][message][id1]" => "PACKET:URcv-NOTAUTH"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:URcv-SERVFAIL
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> U [<fld12> <fld13> SERVFAIL] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+SERVFAIL\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:URcv-SERVFAIL"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "SERVFAIL"
				"action" => "Rcv"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:URcv-SERVFAIL"
					"[rsa][message][id1]" => "PACKET:URcv-SERVFAIL"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:URcv-REFUSED
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> U [<fld12> <fld13> REFUSED] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+REFUSED\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:URcv-REFUSED"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"resultcode" => "REFUSED"
				"action" => "Rcv"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:URcv-REFUSED"
					"[rsa][message][id1]" => "PACKET:URcv-REFUSED"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:USnd-NOERROR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> U [<fld12> <fld13> NOERROR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOERROR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:USnd-NOERROR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
				"resultcode" => "NOERROR"
				"action" => "Snd"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:USnd-NOERROR"
					"[rsa][message][id1]" => "PACKET:USnd-NOERROR"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:USnd-NXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> U [<fld12> <fld13> NXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:USnd-NXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "NXDOMAIN"
				"action" => "Snd"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:USnd-NXDOMAIN"
					"[rsa][message][id1]" => "PACKET:USnd-NXDOMAIN"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:USnd-NOTAUTH
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> U [<fld12> <fld13> NOTAUTH] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTAUTH\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:USnd-NOTAUTH"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"resultcode" => "NOTAUTH"
				"action" => "Snd"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:USnd-NOTAUTH"
					"[rsa][message][id1]" => "PACKET:USnd-NOTAUTH"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:USnd-SERVFAIL
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> U [<fld12> <fld13> SERVFAIL] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+SERVFAIL\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:USnd-SERVFAIL"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "SERVFAIL"
				"action" => "Snd"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:USnd-SERVFAIL"
					"[rsa][message][id1]" => "PACKET:USnd-SERVFAIL"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:USnd-REFUSED
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> U [<fld12> <fld13> REFUSED] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+U[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+REFUSED\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:USnd-REFUSED"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"resultcode" => "REFUSED"
				"action" => "Snd"
				"result" => "Update"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:USnd-REFUSED"
					"[rsa][message][id1]" => "PACKET:USnd-REFUSED"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Rcv-NOERROR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> ? [<fld12> <fld13> NOERROR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOERROR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Rcv-NOERROR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
				"resultcode" => "NOERROR"
				"action" => "Rcv"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Rcv-NOERROR"
					"[rsa][message][id1]" => "PACKET:?Rcv-NOERROR"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Rcv-NXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> ? [<fld12> <fld13> NXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Rcv-NXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "NXDOMAIN"
				"action" => "Rcv"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Rcv-NXDOMAIN"
					"[rsa][message][id1]" => "PACKET:?Rcv-NXDOMAIN"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Rcv-NOTAUTH
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> ? [<fld12> <fld13> NOTAUTH] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTAUTH\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Rcv-NOTAUTH"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"resultcode" => "NOTAUTH"
				"action" => "Rcv"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Rcv-NOTAUTH"
					"[rsa][message][id1]" => "PACKET:?Rcv-NOTAUTH"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Rcv-SERVFAIL
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> ? [<fld12> <fld13> SERVFAIL] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+SERVFAIL\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Rcv-SERVFAIL"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Receive"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "SERVFAIL"
				"action" => "Rcv"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Rcv-SERVFAIL"
					"[rsa][message][id1]" => "PACKET:?Rcv-SERVFAIL"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Rcv-REFUSED
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <saddr> <fld10> <fld11> ? [<fld12> <fld13> REFUSED] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<saddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+REFUSED\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Rcv-REFUSED"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"resultcode" => "REFUSED"
				"action" => "Rcv"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Rcv-REFUSED"
					"[rsa][message][id1]" => "PACKET:?Rcv-REFUSED"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Snd-NOERROR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> ? [<fld12> <fld13> NOERROR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOERROR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Snd-NOERROR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
				"resultcode" => "NOERROR"
				"action" => "Snd"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Snd-NOERROR"
					"[rsa][message][id1]" => "PACKET:?Snd-NOERROR"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Snd-NXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> ? [<fld12> <fld13> NXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Snd-NXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "NXDOMAIN"
				"action" => "Snd"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Snd-NXDOMAIN"
					"[rsa][message][id1]" => "PACKET:?Snd-NXDOMAIN"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Snd-NOTAUTH
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> ? [<fld12> <fld13> NOTAUTH] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTAUTH\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Snd-NOTAUTH"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"resultcode" => "NOTAUTH"
				"action" => "Snd"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Snd-NOTAUTH"
					"[rsa][message][id1]" => "PACKET:?Snd-NOTAUTH"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Snd-SERVFAIL
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> ? [<fld12> <fld13> SERVFAIL] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+SERVFAIL\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Snd-SERVFAIL"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Error"
				"resultcode" => "SERVFAIL"
				"action" => "Snd"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Snd-SERVFAIL"
					"[rsa][message][id1]" => "PACKET:?Snd-SERVFAIL"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Snd-REFUSED
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> ? [<fld12> <fld13> REFUSED] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+REFUSED\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Snd-REFUSED"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"resultcode" => "REFUSED"
				"action" => "Snd"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Snd-REFUSED"
					"[rsa][message][id1]" => "PACKET:?Snd-REFUSED"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:?Snd-NOTIMP
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld10> <fld11> ? [<fld12> <fld13> NOTIMP] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\?[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+NOTIMP\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:?Snd-NOTIMP"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"resultcode" => "NOTIMP"
				"action" => "Snd"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:?Snd-NOTIMP"
					"[rsa][message][id1]" => "PACKET:?Snd-NOTIMP"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QSnd-YXDOMAIN
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Snd <daddr> <fld15> <fld10> <fld11> [<fld12> <fld13> YXDOMAIN] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Snd[\s]+(?<daddr>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+YXDOMAIN\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QSnd-YXDOMAIN"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"resultcode" => "NOTIMP"
				"action" => "Snd"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QSnd-YXDOMAIN"
					"[rsa][message][id1]" => "PACKET:QSnd-YXDOMAIN"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE PACKET:QRcv-FORMERR
		# line in RSA: <fld1> <fld2>{ AM <process_id> PACKET | PM <process_id> PACKET | <process_id> PACKET }<fld6> <protocol> Rcv <daddr> <fld10> <fld11> [<fld12> <fld13> FORMERR] <agent> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s\s\s]*)([\s]*AM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*PM[\s]+(?<process_id>[^\s]*)[\s]+PACKET[\s]+|[\s]*(?<process_id>[^\s]*)[\s]+PACKET[\s]+)(?<fld6>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+Rcv[\s]+(?<daddr>[^\s]*)[\s]+(?<fld10>[^\s]*)[\s]+(?<fld11>[^\s]*)[\s]+\[(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+FORMERR\][\s]+(?<agent>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-PACKET:QRcv-FORMERR"
				add_field => {
				"dns_querytype" => "%{agent}"
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"resultcode" => "NOTIMP"
				"action" => "Snd"
				"result" => "Unknown"
				"event_type" => "PACKET"
					"[event][id]" => "PACKET:QRcv-FORMERR"
					"[rsa][message][id1]" => "PACKET:QRcv-FORMERR"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "EVENT" {
		# MESSAGE EVENT
		# line in RSA: <fld1> <fld2> <fld3> <process_id> <event_type> The DNS server has started
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{process_id} %{event_type} The DNS server has started" }
				id => "message-EVENT"
				add_field => {
				"event_description" => "DNS server has started"
					"[event][id]" => "EVENT"
					"[rsa][message][id1]" => "EVENT"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE EVENT:01
		# line in RSA: <fld1> <fld2> <fld3> <process_id> <event_type> The DNS server received a bad TCP-based DNS message from <saddr>.  The packet was rejected or ignored. The event data contains the DNS packet.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{process_id} %{event_type} The DNS server received a bad TCP-based DNS message from %{saddr}.  The packet was rejected or ignored. The event data contains the DNS packet." }
				id => "message-EVENT:01"
				add_field => {
				"event_description" => "DNS server received a bad TCP-based DNS message"
					"[event][id]" => "EVENT:01"
					"[rsa][message][id1]" => "EVENT:01"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE EVENT:02
		# line in RSA: <fld1> <fld2> <fld3> <process_id> <event_type> The DNS server successfully completed transfer of version <version> of zone <zone> to the DNS server at <daddr>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{process_id} %{event_type} The DNS server successfully completed transfer of version %{version} of zone %{zone} to the DNS server at %{daddr}." }
				id => "message-EVENT:02"
				add_field => {
				"event_description" => "DNS server successfully completed transfer"
					"[event][id]" => "EVENT:02"
					"[rsa][message][id1]" => "EVENT:02"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE EVENT:03
		# line in RSA: <fld1> <fld2> <fld3> <process_id> <event_type> The DNS server wrote version <version> of zone <zone> to file <filename>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{process_id} %{event_type} The DNS server wrote version %{version} of zone %{zone} to file %{filename}." }
				id => "message-EVENT:03"
				add_field => {
				"event_description" => "DNS server wrote version"
					"[event][id]" => "EVENT:03"
					"[rsa][message][id1]" => "EVENT:03"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE EVENT:04
		# line in RSA: <fld1> <fld2> <fld3> <process_id> <event_type> A more recent version, version <version> of zone <zone> was found at the DNS server at <daddr>. Zone transfer is in progress.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{process_id} %{event_type} A more recent version, version %{version} of zone %{zone} was found at the DNS server at %{daddr}. Zone transfer is in progress." }
				id => "message-EVENT:04"
				add_field => {
				"event_description" => "A more recent zone version was found"
					"[event][id]" => "EVENT:04"
					"[rsa][message][id1]" => "EVENT:04"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE EVENT:05
		# line in RSA: <fld1> <fld2> <fld3> <process_id> <event_type> The DNS server has finished the background loading of zones. All zones are now available for DNS updates and zone transfers, as allowed by their individual zone configuration.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{process_id} %{event_type} The DNS server has finished the background loading of zones. All zones are now available for DNS updates and zone transfers, as allowed by their individual zone configuration." }
				id => "message-EVENT:05"
				add_field => {
				"event_description" => "DNS server finished background loading of zones"
					"[event][id]" => "EVENT:05"
					"[rsa][message][id1]" => "EVENT:05"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
		# MESSAGE EVENT:06
		# line in RSA: <fld1> <fld2> <fld3> <process_id> <event_type> The DNS server encountered an invalid domain name in a packet from <saddr>. The packet will be rejected. The event data contains the DNS packet.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{process_id} %{event_type} The DNS server encountered an invalid domain name in a packet from %{saddr}. The packet will be rejected. The event data contains the DNS packet." }
				id => "message-EVENT:06"
				add_field => {
				"event_description" => "DNS server encountered an invalid domain name"
					"[event][id]" => "EVENT:06"
					"[rsa][message][id1]" => "EVENT:06"
					"[event][categoryid]" => "1703000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
			}
		}
	}
	# PARSER msgParserId607
	# line in RSA: <fld1> <fld2> <fld3> <process_id> <event_type> Cache locking prevented a record from being cached.
	else if [logstash][msgparser][id] == "msgParserId607" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{process_id} %{event_type} Cache locking prevented a record from being cached." }
			id => "msgParserId607"
			add_field => {
				"event_description" => "Cache locking prevented a record from being cached"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy H:mm:s", "M/d/yyyy H:mm:s", "yyyyMMdd H:mm:s" ] }
		}
	}
	# PARSER msgParserId608
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,{The WinRM service has received an unsecure HTTP connection from <saddr>.    This is not a secure configuration.<info>|The WinRM service has received an unsecure HTTP connection from <saddr>. This is not a secure configuration.<info>|<event_description>}
	else if [logstash][msgparser][id] == "msgParserId608" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld2>[^,]*),(The[\s]+WinRM[\s]+service[\s]+has[\s]+received[\s]+an[\s]+unsecure[\s]+HTTP[\s]+connection[\s]+from[\s]+(?<saddr>[^\.]*)\.[\s]+This[\s]+is[\s]+not[\s]+a[\s]+secure[\s]+configuration\.(?<info>.*)|The[\s]+WinRM[\s]+service[\s]+has[\s]+received[\s]+an[\s]+unsecure[\s]+HTTP[\s]+connection[\s]+from[\s]+(?<saddr>[^\.]*)\.[\s]+This[\s]+is[\s]+not[\s]+a[\s]+secure[\s]+configuration\.(?<info>.*)|(?<event_description>.*))$" }
			id => "msgParserId608"
			add_field => {
				"a" => "The WinRM service has received an unsecure HTTP connection from "
				"b" => ". This is not a secure configuration."
				"event_description" => "%{a}%{saddr}%{b}"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId609
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId609" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId609"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId610
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId610" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId610"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId611
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId611" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId611"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Stop"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId612
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId612" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId612"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId613
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId613" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId613"
			add_field => {
				"ec_subject" => "Service"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId614
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,ASANYs_NIC_DB_REPORT_SERVER :<event_description>
	else if [logstash][msgparser][id] == "msgParserId614" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},ASANYs_NIC_DB_REPORT_SERVER :%{event_description}" }
			id => "msgParserId614"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId615
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>. string-data=[<result> ]
	else if [logstash][msgparser][id] == "msgParserId615" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}. string-data=[%{result} ]" }
			id => "msgParserId615"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId616
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId616" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
			id => "msgParserId616"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId617
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Application '<application>' (pid <process_id>) <event_description>
	else if [logstash][msgparser][id] == "msgParserId617" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},Application '%{application}' (pid %{process_id}) %{event_description}" }
			id => "msgParserId617"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId618
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<info> Application information:<space>Application domain: <domain>      Trust level: <fld25>      Application Virtual Path: <fld26>      Application Path: <directory>      Machine name: <fld27>    Process information:<space>Process ID: <process_id>      Process name: <process>      Account name: <service_account>    Exception information:<space>Exception type: <fld28>      Exception message: <event_description>    {at <fld29>   Request information:|Request information:}<space>{Request URL: <url>     Request path: <fld30>      User host address: <hostip>      User:       <fld31>|Request URL: <url>}
	else if [logstash][msgparser][id] == "msgParserId618" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),(?<info>[^\s]*)[\s]+Application[\s]+information:(?<space>[^A]*)Application[\s]+domain:[\s]+(?<domain>[^\s]*)[\s]+Trust[\s]+level:[\s]+(?<fld25>[^\s]*)[\s]+Application[\s]+Virtual[\s]+Path:[\s]+(?<fld26>[^\s]*)[\s]+Application[\s]+Path:[\s]+(?<directory>[^\s]*)[\s]+Machine[\s]+name:[\s]+(?<fld27>[^\s]*)[\s]+Process[\s]+information:(?<space>[^P]*)Process[\s]+ID:[\s]+(?<process_id>[^\s]*)[\s]+Process[\s]+name:[\s]+(?<process>[^\s]*)[\s]+Account[\s]+name:[\s]+(?<service_account>[^\s]*)[\s]+Exception[\s]+information:(?<space>[^E]*)Exception[\s]+type:[\s]+(?<fld28>[^\s]*)[\s]+Exception[\s]+message:[\s]+(?<event_description>[^\s]*)[\s]+(at[\s]+(?<fld29>[^\s]*)[\s]+Request[\s]+information:|Request[\s]+information:)(?<space>[^RR]*)(Request[\s]+URL:[\s]+(?<url>[^\s]*)[\s]+Request[\s]+path:[\s]+(?<fld30>[^\s]*)[\s]+User[\s]+host[\s]+address:[\s]+(?<hostip>[^\s]*)[\s]+User:[\s]+(?<fld31>.*)|Request[\s]+URL:[\s]+(?<url>.*))$" }
			id => "msgParserId618"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId619
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <fld50>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description> Protocol:<protocol> CipherSuite: <s_cipher> Exchange strength: <s_ciphersize> <fld25>
	else if [logstash][msgparser][id] == "msgParserId619" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{fld50},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description} Protocol:%{protocol} CipherSuite: %{s_cipher} Exchange strength: %{s_ciphersize} %{fld25}" }
			id => "msgParserId619"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld50}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId620
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description> Service Name: <service> Service File Name: {"<filename>" <fld21>|<filename> /c start <filename> <param>|<filename> /<param>|<filename>} Service Type: <fld23> Service Start Type: <fld24> Service Account: <service_account>
	else if [logstash][msgparser][id] == "msgParserId620" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),(?<event_description>[^\s]*)[\s]+Service[\s]+Name:[\s]+(?<service>[^\s]*)[\s]+Service[\s]+File[\s]+Name:[\s]+(\"(?<filename>[^\"]*)\"[\s]+(?<fld21>[^\s]*)|(?<filename>[^\s]*)[\s]+/c[\s]+start[\s]+(?<filename>[^\s]*)[\s]+(?<param>[^\s]*)|(?<filename>[^\s]*)[\s]+/(?<param>[^\s]*)|(?<filename>[^\s]*))[\s]+Service[\s]+Type:[\s]+(?<fld23>[^\s]*)[\s]+Service[\s]+Start[\s]+Type:[\s]+(?<fld24>[^\s]*)[\s]+Service[\s]+Account:[\s]+(?<service_account>.*)$" }
			id => "msgParserId620"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId622
	# line in RSA: <event_description> Subject: <space> Security ID: <fld38> Account Name: <username> Account Domain: <domain> Logon ID: <sessionid> Additional Information: <fld33>  Caller Workstation: <hostname>  Target Account Name: <c_username>  Target Account Domain: <fld31>
	else if [logstash][msgparser][id] == "msgParserId622" {
		dissect {
			mapping => { "message" => "%{event_description} Subject: %{space} Security ID: %{fld38} Account Name: %{username} Account Domain: %{domain} Logon ID: %{sessionid} Additional Information: %{fld33}  Caller Workstation: %{hostname}  Target Account Name: %{c_username}  Target Account Domain: %{fld31}" }
			id => "msgParserId622"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId623
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld1>,<fld2>,List of applicable Group Policy objects: <event_description>
	else if [logstash][msgparser][id] == "msgParserId623" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld1},%{fld2},List of applicable Group Policy objects: %{event_description}" }
			id => "msgParserId623"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId624
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld1>,<fld2>,The following Group Policy objects were not applicable because they were filtered out : <event_description>
	else if [logstash][msgparser][id] == "msgParserId624" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld1},%{fld2},The following Group Policy objects were not applicable because they were filtered out : %{event_description}" }
			id => "msgParserId624"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId625
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld1>,<fld2>,A {fast|slow} link was detected. <event_description>
	else if [logstash][msgparser][id] == "msgParserId625" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld1>[^,]*),(?<fld2>[^,]*),A[\s]+(fast|slow)[\s]+link[\s]+was[\s]+detected\.[\s]+(?<event_description>.*)$" }
			id => "msgParserId625"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId626
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld1>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId626" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld1},%{fld2},%{event_description}" }
			id => "msgParserId626"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId627
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld1>,<fld2>,{Starting Group Policy Local Users and Groups Extension Processing|Starting Software Installation Extension Processing}.<space>List of applicable Group Policy objects: <event_description>
	else if [logstash][msgparser][id] == "msgParserId627" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),(?<fld11>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<fld1>[^,]*),(?<fld2>[^,]*),(Starting[\s]+Group[\s]+Policy[\s]+Local[\s]+Users[\s]+and[\s]+Groups[\s]+Extension[\s]+Processing|Starting[\s]+Software[\s]+Installation[\s]+Extension[\s]+Processing)\.(?<space>[^L]*)List[\s]+of[\s]+applicable[\s]+Group[\s]+Policy[\s]+objects:[\s]+(?<event_description>.*)$" }
			id => "msgParserId627"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId628
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<fld1>,<fld2>,Starting periodic policy processing for computer <fld3>.  Activity id: <process_id>
	else if [logstash][msgparser][id] == "msgParserId628" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{fld1},%{fld2},Starting periodic policy processing for computer %{fld3}.  Activity id: %{process_id}" }
			id => "msgParserId628"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId629
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId629" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
			id => "msgParserId629"
			add_field => {
				"ec_subject" => "Password"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId630
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId630" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId630"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId631
	# line in RSA: <fld1>,rn=<fld2> cid=<fld3> eid=<fld4>,<fld22> <fld11>,<fld12>,<fld13>,,<fld12>,<fld13>,,<event_description>
	else if [logstash][msgparser][id] == "msgParserId631" {
		dissect {
			mapping => { "message" => "%{fld1},rn=%{fld2} cid=%{fld3} eid=%{fld4},%{fld22} %{fld11},%{fld12},%{fld13},,%{fld12},%{fld13},,%{event_description}" }
			id => "msgParserId631"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld11}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId632
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description> Application Id=<fld25>
	else if [logstash][msgparser][id] == "msgParserId632" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description} Application Id=%{fld25}" }
			id => "msgParserId632"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId633
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description> License Title=<fld25>
	else if [logstash][msgparser][id] == "msgParserId633" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description} License Title=%{fld25}" }
			id => "msgParserId633"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId634
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description> hr=<result>
	else if [logstash][msgparser][id] == "msgParserId634" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description} hr=%{result}" }
			id => "msgParserId634"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId635
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description> ACID=<service_account> PKeyId=<fld25>
	else if [logstash][msgparser][id] == "msgParserId635" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description} ACID=%{service_account} PKeyId=%{fld25}" }
			id => "msgParserId635"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId636
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>  Policy Names=<policyname> App Id=<fld25>
	else if [logstash][msgparser][id] == "msgParserId636" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}  Policy Names=%{policyname} App Id=%{fld25}" }
			id => "msgParserId636"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId637
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description> Info:<fld25>
	else if [logstash][msgparser][id] == "msgParserId637" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description} Info:%{fld25}" }
			id => "msgParserId637"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId638
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Publishing the Key Management Service (KMS) to DNS in the '<ddomain>' domain failed. Info: hr=<result>
	else if [logstash][msgparser][id] == "msgParserId638" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},Publishing the Key Management Service (KMS) to DNS in the '%{ddomain}' domain failed. Info: hr=%{result}" }
			id => "msgParserId638"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId639
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Publishing the Key Management Service (KMS) to DNS in the '<ddomain>' domain is successful.
	else if [logstash][msgparser][id] == "msgParserId639" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},Publishing the Key Management Service (KMS) to DNS in the '%{ddomain}' domain is successful." }
			id => "msgParserId639"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId640
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description> Error code: <result>
	else if [logstash][msgparser][id] == "msgParserId640" {
		dissect {
			mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description} Error code: %{result}" }
			id => "msgParserId640"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "1_Microsoft-Windows-Sysmon" {
		# MESSAGE 1_Microsoft-Windows-Sysmon:01
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Process {Create: RuleName: <rulename>|Create: }UtcTime: <fld7> ProcessGuid: <fld23> ProcessId: <process_id> Image: <process> CommandLine: {"<filename>" <param>|<filename> <param>} CurrentDirectory: <directory> User: <username> LogonGuid: <fld24> LogonId: <sessionid> TerminalSessionId: <fld25> IntegrityLevel: <fld26> Hashes: <checksum> ParentProcessGuid: <fld27> ParentProcessId: <parent_pid> ParentImage: <process_src> ParentCommandLine: <fld28>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Process[\s]+(Create:[\s]+RuleName:[\s]+(?<rulename>[^U]*)|Create:[\s]+)UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<process>[^\s]*)[\s]+CommandLine:[\s]+(\"(?<filename>[^\"]*)\"[\s]+(?<param>[^\s]*)|(?<filename>[^\s]*)[\s]+(?<param>[^\s]*))[\s]+CurrentDirectory:[\s]+(?<directory>[^\s]*)[\s]+User:[\s]+(?<username>[^\s]*)[\s]+LogonGuid:[\s]+(?<fld24>[^\s]*)[\s]+LogonId:[\s]+(?<sessionid>[^\s]*)[\s]+TerminalSessionId:[\s]+(?<fld25>[^\s]*)[\s]+IntegrityLevel:[\s]+(?<fld26>[^\s]*)[\s]+Hashes:[\s]+(?<checksum>[^\s]*)[\s]+ParentProcessGuid:[\s]+(?<fld27>[^\s]*)[\s]+ParentProcessId:[\s]+(?<parent_pid>[^\s]*)[\s]+ParentImage:[\s]+(?<process_src>[^\s]*)[\s]+ParentCommandLine:[\s]+(?<fld28>.*)$" }
				id => "message-1_Microsoft-Windows-Sysmon:01"
				add_field => {
					"[event][id]" => "1_Microsoft-Windows-Sysmon:01"
					"[rsa][message][id1]" => "1_Microsoft-Windows-Sysmon:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 1_Microsoft-Windows-Sysmon
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
				id => "message-1_Microsoft-Windows-Sysmon"
				add_field => {
					"[event][id]" => "1_Microsoft-Windows-Sysmon"
					"[rsa][message][id1]" => "1_Microsoft-Windows-Sysmon"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "2_Microsoft-Windows-Sysmon" {
		# MESSAGE 2_Microsoft-Windows-Sysmon:01
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,File creation time {changed: RuleName: <rulename>|changed: }UtcTime: <fld7> ProcessGuid: <fld23> ProcessId: <process_id> Image: <process> TargetFilename: <filename> CreationUtcTime: <fld24> PreviousCreationUtcTime: <fld25>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),File[\s]+creation[\s]+time[\s]+(changed:[\s]+RuleName:[\s]+(?<rulename>[^U]*)|changed:[\s]+)UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<process>[^\s]*)[\s]+TargetFilename:[\s]+(?<filename>[^\s]*)[\s]+CreationUtcTime:[\s]+(?<fld24>[^\s]*)[\s]+PreviousCreationUtcTime:[\s]+(?<fld25>.*)$" }
				id => "message-2_Microsoft-Windows-Sysmon:01"
				add_field => {
				"change_attribute" => "File creation time"
					"[event][id]" => "2_Microsoft-Windows-Sysmon:01"
					"[rsa][message][id1]" => "2_Microsoft-Windows-Sysmon:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 2_Microsoft-Windows-Sysmon
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
				id => "message-2_Microsoft-Windows-Sysmon"
				add_field => {
					"[event][id]" => "2_Microsoft-Windows-Sysmon"
					"[rsa][message][id1]" => "2_Microsoft-Windows-Sysmon"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "3_Microsoft-Windows-Sysmon" {
		# MESSAGE 3_Microsoft-Windows-Sysmon:01
		# line in RSA: <event_log> ,rn=<fld1>  cid=<fld2>  eid=<fld3> ,<fld12>  <datetime> ,<id> ,<event_source> ,<event_user> ,<event_type> ,<event_computer> ,<category> ,<fld22> ,Network connection {detected: RuleName: <rulename>|detected: }UtcTime: <fld7> ProcessGuid: <fld23> ProcessId: <process_id> Image: <process> User: <username> Protocol: <protocol> Initiated: <fld24> SourceIsIpv6: <fld25> SourceIp: <saddr> SourceHostname: <shost> SourcePort: <sport> SourcePortName: <fld26> DestinationIsIpv6: <fld27> DestinationIp: <daddr> DestinationHostname: <dhost> DestinationPort: <dport> DestinationPortName: <fld28>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^\s]*)[\s]+,rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^\s]*)[\s]+,(?<fld12>[^\s]*)[\s]+(?<datetime>[^\s]*)[\s]+,(?<id>[^\s]*)[\s]+,(?<event_source>[^\s]*)[\s]+,(?<event_user>[^\s]*)[\s]+,(?<event_type>[^\s]*)[\s]+,(?<event_computer>[^\s]*)[\s]+,(?<category>[^\s]*)[\s]+,(?<fld22>[^\s]*)[\s]+,Network[\s]+connection[\s]+(detected:[\s]+RuleName:[\s]+(?<rulename>[^U]*)|detected:[\s]+)UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<process>[^\s]*)[\s]+User:[\s]+(?<username>[^\s]*)[\s]+Protocol:[\s]+(?<protocol>[^\s]*)[\s]+Initiated:[\s]+(?<fld24>[^\s]*)[\s]+SourceIsIpv6:[\s]+(?<fld25>[^\s]*)[\s]+SourceIp:[\s]+(?<saddr>[^\s]*)[\s]+SourceHostname:[\s]+(?<shost>[^\s]*)[\s]+SourcePort:[\s]+(?<sport>[^\s]*)[\s]+SourcePortName:[\s]+(?<fld26>[^\s]*)[\s]+DestinationIsIpv6:[\s]+(?<fld27>[^\s]*)[\s]+DestinationIp:[\s]+(?<daddr>[^\s]*)[\s]+DestinationHostname:[\s]+(?<dhost>[^\s]*)[\s]+DestinationPort:[\s]+(?<dport>[^\s]*)[\s]+DestinationPortName:[\s]+(?<fld28>.*)$" }
				id => "message-3_Microsoft-Windows-Sysmon:01"
				add_field => {
					"[event][id]" => "3_Microsoft-Windows-Sysmon:01"
					"[rsa][message][id1]" => "3_Microsoft-Windows-Sysmon:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 3_Microsoft-Windows-Sysmon
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
				id => "message-3_Microsoft-Windows-Sysmon"
				add_field => {
					"[event][id]" => "3_Microsoft-Windows-Sysmon"
					"[rsa][message][id1]" => "3_Microsoft-Windows-Sysmon"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId644
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Sysmon service state {changed:<space>RuleName: <rulename>|changed:<space>}UtcTime: <fld7> {State: <event_state> Version: <version>  SchemaVersion: <fld8>|State: <event_state>}
	else if [logstash][msgparser][id] == "msgParserId644" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Sysmon[\s]+service[\s]+state[\s]+(changed:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^U]*)|changed:(?<space>[^U]*))UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+(State:[\s]+(?<event_state>[^\s]*)[\s]+Version:[\s]+(?<version>[^\s]*)[\s]+SchemaVersion:[\s]+(?<fld8>.*)|State:[\s]+(?<event_state>.*))$" }
			id => "msgParserId644"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"event_description" => "Sysmon service state changed"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "5_Microsoft-Windows-Sysmon" {
		# MESSAGE 5_Microsoft-Windows-Sysmon:01
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Process {terminated: RuleName: <rulename>|terminated: }UtcTime: <fld7> ProcessGuid: <fld23> ProcessId: <process_id> Image: <process>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Process[\s]+(terminated:[\s]+RuleName:[\s]+(?<rulename>[^U]*)|terminated:[\s]+)UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<process>.*)$" }
				id => "message-5_Microsoft-Windows-Sysmon:01"
				add_field => {
					"[event][id]" => "5_Microsoft-Windows-Sysmon:01"
					"[rsa][message][id1]" => "5_Microsoft-Windows-Sysmon:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 5_Microsoft-Windows-Sysmon
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
				id => "message-5_Microsoft-Windows-Sysmon"
				add_field => {
					"[event][id]" => "5_Microsoft-Windows-Sysmon"
					"[rsa][message][id1]" => "5_Microsoft-Windows-Sysmon"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "6_Microsoft-Windows-Sysmon" {
		# MESSAGE 6_Microsoft-Windows-Sysmon:01
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Driver {loaded: RuleName: <rulename>|loaded: }UtcTime: <fld7> ImageLoaded: <filename> Hashes: <checksum> Signed: <fld23> Signature: <signame>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Driver[\s]+(loaded:[\s]+RuleName:[\s]+(?<rulename>[^U]*)|loaded:[\s]+)UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ImageLoaded:[\s]+(?<filename>[^\s]*)[\s]+Hashes:[\s]+(?<checksum>[^\s]*)[\s]+Signed:[\s]+(?<fld23>[^\s]*)[\s]+Signature:[\s]+(?<signame>.*)$" }
				id => "message-6_Microsoft-Windows-Sysmon:01"
				add_field => {
					"[event][id]" => "6_Microsoft-Windows-Sysmon:01"
					"[rsa][message][id1]" => "6_Microsoft-Windows-Sysmon:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 6_Microsoft-Windows-Sysmon
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
				id => "message-6_Microsoft-Windows-Sysmon"
				add_field => {
					"[event][id]" => "6_Microsoft-Windows-Sysmon"
					"[rsa][message][id1]" => "6_Microsoft-Windows-Sysmon"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "7_Microsoft-Windows-Sysmon" {
		# MESSAGE 7_Microsoft-Windows-Sysmon:01
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Image {loaded: RuleName: <rulename>|loaded: }UtcTime: <fld7> ProcessGuid: <fld23> ProcessId: <process_id> Image: <process> ImageLoaded: <filename> Hashes: <checksum> Signed: <fld24> Signature: <signame>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Image[\s]+(loaded:[\s]+RuleName:[\s]+(?<rulename>[^U]*)|loaded:[\s]+)UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<process>[^\s]*)[\s]+ImageLoaded:[\s]+(?<filename>[^\s]*)[\s]+Hashes:[\s]+(?<checksum>[^\s]*)[\s]+Signed:[\s]+(?<fld24>[^\s]*)[\s]+Signature:[\s]+(?<signame>.*)$" }
				id => "message-7_Microsoft-Windows-Sysmon:01"
				add_field => {
					"[event][id]" => "7_Microsoft-Windows-Sysmon:01"
					"[rsa][message][id1]" => "7_Microsoft-Windows-Sysmon:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 7_Microsoft-Windows-Sysmon
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
				id => "message-7_Microsoft-Windows-Sysmon"
				add_field => {
					"[event][id]" => "7_Microsoft-Windows-Sysmon"
					"[rsa][message][id1]" => "7_Microsoft-Windows-Sysmon"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "8_Microsoft-Windows-Sysmon" {
		# MESSAGE 8_Microsoft-Windows-Sysmon:01
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,CreateRemoteThread {detected: RuleName: <rulename>|detected: }UtcTime: <fld7> SourceProcessGuid: <fld23> SourceProcessId: <parent_pid> SourceImage: <process_src> TargetProcessGuid: <fld24> TargetProcessId: <process_id> TargetImage: <process> NewThreadId: <fld25> StartAddress: <fld26> StartModule: <fld27> StartFunction: <fld28>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),CreateRemoteThread[\s]+(detected:[\s]+RuleName:[\s]+(?<rulename>[^U]*)|detected:[\s]+)UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+SourceProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+SourceProcessId:[\s]+(?<parent_pid>[^\s]*)[\s]+SourceImage:[\s]+(?<process_src>[^\s]*)[\s]+TargetProcessGuid:[\s]+(?<fld24>[^\s]*)[\s]+TargetProcessId:[\s]+(?<process_id>[^\s]*)[\s]+TargetImage:[\s]+(?<process>[^\s]*)[\s]+NewThreadId:[\s]+(?<fld25>[^\s]*)[\s]+StartAddress:[\s]+(?<fld26>[^\s]*)[\s]+StartModule:[\s]+(?<fld27>[^\s]*)[\s]+StartFunction:[\s]+(?<fld28>.*)$" }
				id => "message-8_Microsoft-Windows-Sysmon:01"
				add_field => {
					"[event][id]" => "8_Microsoft-Windows-Sysmon:01"
					"[rsa][message][id1]" => "8_Microsoft-Windows-Sysmon:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 8_Microsoft-Windows-Sysmon
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
				id => "message-8_Microsoft-Windows-Sysmon"
				add_field => {
					"[event][id]" => "8_Microsoft-Windows-Sysmon"
					"[rsa][message][id1]" => "8_Microsoft-Windows-Sysmon"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "9_Microsoft-Windows-Sysmon" {
		# MESSAGE 9_Microsoft-Windows-Sysmon:01
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,RawAccessRead {detected: RuleName: <rulename>|detected: }UtcTime: <fld7> ProcessGuid: <fld23> ProcessId: <process_id> Image: <process> Device: <device>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),RawAccessRead[\s]+(detected:[\s]+RuleName:[\s]+(?<rulename>[^U]*)|detected:[\s]+)UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<process>[^\s]*)[\s]+Device:[\s]+(?<device>.*)$" }
				id => "message-9_Microsoft-Windows-Sysmon:01"
				add_field => {
					"[event][id]" => "9_Microsoft-Windows-Sysmon:01"
					"[rsa][message][id1]" => "9_Microsoft-Windows-Sysmon:01"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE 9_Microsoft-Windows-Sysmon
		# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},rn=%{fld1} cid=%{fld2} eid=%{fld3},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld22},%{event_description}" }
				id => "message-9_Microsoft-Windows-Sysmon"
				add_field => {
					"[event][id]" => "9_Microsoft-Windows-Sysmon"
					"[rsa][message][id1]" => "9_Microsoft-Windows-Sysmon"
					"[event][categoryid]" => "1606000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId650
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Process {accessed:<space>RuleName: <rulename>|accessed:<space>}UtcTime: <fld7>  SourceProcessGUID: <fld23>  SourceProcessId: <process_id>  SourceThreadId: <fld25>  SourceImage: <process>  TargetProcessGUID: <fld71>  TargetProcessId: <process_id_src>  TargetImage: <service>  GrantedAccess: <accesses>  CallTrace: <fld9>
	else if [logstash][msgparser][id] == "msgParserId650" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Process[\s]+(accessed:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^U]*)|accessed:(?<space>[^U]*))UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+SourceProcessGUID:[\s]+(?<fld23>[^\s]*)[\s]+SourceProcessId:[\s]+(?<process_id>[^\s]*)[\s]+SourceThreadId:[\s]+(?<fld25>[^\s]*)[\s]+SourceImage:[\s]+(?<process>[^\s]*)[\s]+TargetProcessGUID:[\s]+(?<fld71>[^\s]*)[\s]+TargetProcessId:[\s]+(?<process_id_src>[^\s]*)[\s]+TargetImage:[\s]+(?<service>[^\s]*)[\s]+GrantedAccess:[\s]+(?<accesses>[^\s]*)[\s]+CallTrace:[\s]+(?<fld9>.*)$" }
			id => "msgParserId650"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId651
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,File {created:<space>RuleName: <rulename>|created:<space>}UtcTime: <fld7> ProcessGuid: <fld8>  ProcessId: <process_id>  Image: <service>  TargetFilename: <filename>  CreationUtcTime: <fld9>
	else if [logstash][msgparser][id] == "msgParserId651" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),File[\s]+(created:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^U]*)|created:(?<space>[^U]*))UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld8>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<service>[^\s]*)[\s]+TargetFilename:[\s]+(?<filename>[^\s]*)[\s]+CreationUtcTime:[\s]+(?<fld9>.*)$" }
			id => "msgParserId651"
			add_field => {
				"ec_subject" => "File"
				"ec_activity" => "Create"
				"event_description" => "File created"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId652
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Registry object added or {deleted:<space>RuleName: <rulename>|deleted:<space>}EventType: <action> UtcTime: <fld7> ProcessGuid: <fld8> ProcessId: <process_id> Image: <service> TargetObject: <fld15>
	else if [logstash][msgparser][id] == "msgParserId652" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Registry[\s]+object[\s]+added[\s]+or[\s]+(deleted:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^E]*)|deleted:(?<space>[^E]*))EventType:[\s]+(?<action>[^\s]*)[\s]+UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld8>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<service>[^\s]*)[\s]+TargetObject:[\s]+(?<fld15>.*)$" }
			id => "msgParserId652"
			add_field => {
				"ec_subject" => "Registry"
				"ec_activity" => "Modify"
				"event_description" => "Registry object added or deleted"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId653
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Registry value {set:<space>RuleName: <rulename>|set:<space>}EventType: <action>  UtcTime: <fld7>  ProcessGuid: <fld8>  ProcessId: <process_id>  Image: <service>  TargetObject: <fld15>  Details: <fld16>
	else if [logstash][msgparser][id] == "msgParserId653" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Registry[\s]+value[\s]+(set:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^E]*)|set:(?<space>[^E]*))EventType:[\s]+(?<action>[^\s]*)[\s]+UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld8>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<service>[^\s]*)[\s]+TargetObject:[\s]+(?<fld15>[^\s]*)[\s]+Details:[\s]+(?<fld16>.*)$" }
			id => "msgParserId653"
			add_field => {
				"ec_subject" => "Registry"
				"ec_activity" => "Modify"
				"event_description" => "Registry value set"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId654
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,File stream {created:<space>RuleName: <rulename>|created:<space>}UtcTime: <fld7> ProcessGuid: <fld8>  ProcessId: <process_id>  Image: <service>  TargetFilename: <filename>  CreationUtcTime: <fld9> Hash: MD5=<fld10>,SHA256=<fld11>
	else if [logstash][msgparser][id] == "msgParserId654" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),File[\s]+stream[\s]+(created:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^U]*)|created:(?<space>[^U]*))UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld8>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+Image:[\s]+(?<service>[^\s]*)[\s]+TargetFilename:[\s]+(?<filename>[^\s]*)[\s]+CreationUtcTime:[\s]+(?<fld9>[^\s]*)[\s]+Hash:[\s]+MD5=(?<fld10>[^,]*),SHA256=(?<fld11>.*)$" }
			id => "msgParserId654"
			add_field => {
				"ec_subject" => "File"
				"ec_activity" => "Create"
				"event_description" => "File stream created"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId655
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Sysmon config state {changed:<space>RuleName: <rulename>|changed:<space>}UtcTime: <fld7> Configuration: <change_new>  ConfigurationFileHash: <fld8>
	else if [logstash][msgparser][id] == "msgParserId655" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Sysmon[\s]+config[\s]+state[\s]+(changed:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^U]*)|changed:(?<space>[^U]*))UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+Configuration:[\s]+(?<change_new>[^\s]*)[\s]+ConfigurationFileHash:[\s]+(?<fld8>.*)$" }
			id => "msgParserId655"
			add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"event_description" => "Sysmon config state changed"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId656
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Pipe {Created:<space>RuleName: <rulename>|Created:<space>}UtcTime: <fld7>  ProcessGuid: <fld23>  ProcessId: <process_id>  PipeName: <process> Image: <service>
	else if [logstash][msgparser][id] == "msgParserId656" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Pipe[\s]+(Created:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^U]*)|Created:(?<space>[^U]*))UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+PipeName:[\s]+(?<process>[^\s]*)[\s]+Image:[\s]+(?<service>.*)$" }
			id => "msgParserId656"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId657
	# line in RSA: <event_log>,rn=<fld1> cid=<fld2> eid=<fld3>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld22>,Pipe {Connected:<space>RuleName: <rulename>|Connected:<space>}UtcTime: <fld7>  ProcessGuid: <fld23>  ProcessId: <process_id>  PipeName: <process> Image: <service>
	else if [logstash][msgparser][id] == "msgParserId657" {
		grok {
			match => { "message" => "^(?<event_log>[^,]*),rn=(?<fld1>[^\s]*)[\s]+cid=(?<fld2>[^\s]*)[\s]+eid=(?<fld3>[^,]*),(?<fld12>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld22>[^,]*),Pipe[\s]+(Connected:(?<space>[^R]*)RuleName:[\s]+(?<rulename>[^U]*)|Connected:(?<space>[^U]*))UtcTime:[\s]+(?<fld7>[^\s]*)[\s]+ProcessGuid:[\s]+(?<fld23>[^\s]*)[\s]+ProcessId:[\s]+(?<process_id>[^\s]*)[\s]+PipeName:[\s]+(?<process>[^\s]*)[\s]+Image:[\s]+(?<service>.*)$" }
			id => "msgParserId657"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId658
	# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description> file <filename>
	else if [logstash][msgparser][id] == "msgParserId658" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description} file %{filename}" }
			id => "msgParserId658"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Execute"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Operational_4104_Microsoft-Windows-PowerShell" {
		# MESSAGE Operational_4104_Microsoft-Windows-PowerShell
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,Creating Scriptblock text (<fld5>):{<data> ScriptBlock ID: <sessionid> Path: <filename>|<data> ScriptBlock ID: <sessionid>|<data>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_log>[^,]*),(?<fld1>[^,]*),(?<fld2>[^\s]*)[\s]+(?<datetime>[^,]*),(?<id>[^,]*),(?<event_source>[^,]*),(?<event_user>[^,]*),(?<event_type>[^,]*),(?<event_computer>[^,]*),(?<category>[^,]*),(?<fld3>[^,]*),Creating[\s]+Scriptblock[\s]+text[\s]+\((?<fld5>[^\)]*)\):((?<data>[^\s]*)[\s]+ScriptBlock[\s]+ID:[\s]+(?<sessionid>[^\s]*)[\s]+Path:[\s]+(?<filename>.*)|(?<data>[^\s]*)[\s]+ScriptBlock[\s]+ID:[\s]+(?<sessionid>.*)|(?<data>.*))$" }
				id => "message-Operational_4104_Microsoft-Windows-PowerShell"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Execute"
				"data_type" => "Scriptblock"
					"[event][id]" => "Operational_4104_Microsoft-Windows-PowerShell"
					"[rsa][message][id1]" => "Operational_4104_Microsoft-Windows-PowerShell"
					"[event][categoryid]" => "1205000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Operational_4104_Microsoft-Windows-PowerShell:01
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{fld4}" }
				id => "message-Operational_4104_Microsoft-Windows-PowerShell:01"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Execute"
					"[event][id]" => "Operational_4104_Microsoft-Windows-PowerShell:01"
					"[rsa][message][id1]" => "Operational_4104_Microsoft-Windows-PowerShell:01"
					"[event][categoryid]" => "1205000000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId661
	# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>
	else if [logstash][msgparser][id] == "msgParserId661" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3}" }
			id => "msgParserId661"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Start"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId662
	# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>
	else if [logstash][msgparser][id] == "msgParserId662" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3}" }
			id => "msgParserId662"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Stop"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId663
	# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId663" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}" }
			id => "msgParserId663"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Start"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "600_PowerShell" {
		# MESSAGE Windows_PowerShell_600_PowerShell
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application> -File <filename>  EngineVersion=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application} -File %{filename}  EngineVersion=%{fld5}" }
				id => "message-Windows_PowerShell_600_PowerShell"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_600_PowerShell"
					"[rsa][message][id1]" => "Windows_PowerShell_600_PowerShell"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_600_PowerShell:01
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application><fld5>-Command & '<filename>'  EngineVersion=<fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application}%{fld5}-Command & '%{filename}'  EngineVersion=%{fld6}" }
				id => "message-Windows_PowerShell_600_PowerShell:01"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_600_PowerShell:01"
					"[rsa][message][id1]" => "Windows_PowerShell_600_PowerShell:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_600_PowerShell:02
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application>  EngineVersion=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application}  EngineVersion=%{fld5}" }
				id => "message-Windows_PowerShell_600_PowerShell:02"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_600_PowerShell:02"
					"[rsa][message][id1]" => "Windows_PowerShell_600_PowerShell:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_600_PowerShell:03
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}" }
				id => "message-Windows_PowerShell_600_PowerShell:03"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_600_PowerShell:03"
					"[rsa][message][id1]" => "Windows_PowerShell_600_PowerShell:03"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "400_PowerShell" {
		# MESSAGE Windows_PowerShell_400_PowerShell
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application> -File <filename>  EngineVersion=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application} -File %{filename}  EngineVersion=%{fld5}" }
				id => "message-Windows_PowerShell_400_PowerShell"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_400_PowerShell"
					"[rsa][message][id1]" => "Windows_PowerShell_400_PowerShell"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_400_PowerShell:01
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application><fld5>-Command & '<filename>'  EngineVersion=<fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application}%{fld5}-Command & '%{filename}'  EngineVersion=%{fld6}" }
				id => "message-Windows_PowerShell_400_PowerShell:01"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_400_PowerShell:01"
					"[rsa][message][id1]" => "Windows_PowerShell_400_PowerShell:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_400_PowerShell:02
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application>  EngineVersion=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application}  EngineVersion=%{fld5}" }
				id => "message-Windows_PowerShell_400_PowerShell:02"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_400_PowerShell:02"
					"[rsa][message][id1]" => "Windows_PowerShell_400_PowerShell:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_400_PowerShell:03
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}" }
				id => "message-Windows_PowerShell_400_PowerShell:03"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_400_PowerShell:03"
					"[rsa][message][id1]" => "Windows_PowerShell_400_PowerShell:03"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "403_PowerShell" {
		# MESSAGE Windows_PowerShell_403_PowerShell
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application> -File <filename>  EngineVersion=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application} -File %{filename}  EngineVersion=%{fld5}" }
				id => "message-Windows_PowerShell_403_PowerShell"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_403_PowerShell"
					"[rsa][message][id1]" => "Windows_PowerShell_403_PowerShell"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_403_PowerShell:01
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application><fld5>-Command & '<filename>'  EngineVersion=<fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application}%{fld5}-Command & '%{filename}'  EngineVersion=%{fld6}" }
				id => "message-Windows_PowerShell_403_PowerShell:01"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_403_PowerShell:01"
					"[rsa][message][id1]" => "Windows_PowerShell_403_PowerShell:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_403_PowerShell:02
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>HostApplication=<application>  EngineVersion=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}HostApplication=%{application}  EngineVersion=%{fld5}" }
				id => "message-Windows_PowerShell_403_PowerShell:02"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_403_PowerShell:02"
					"[rsa][message][id1]" => "Windows_PowerShell_403_PowerShell:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Windows_PowerShell_403_PowerShell:03
		# line in RSA: <event_log>,<fld1>,<fld2> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,<event_description>   Details:   <fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld1},%{fld2} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld3},%{event_description}   Details:   %{fld4}" }
				id => "message-Windows_PowerShell_403_PowerShell:03"
				add_field => {
				"ec_subject" => "Service"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Windows_PowerShell_403_PowerShell:03"
					"[rsa][message][id1]" => "Windows_PowerShell_403_PowerShell:03"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId668
	# line in RSA: <event_log>,<fld1>,<fld2><datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,Task Scheduler started "{{<process_id>}" instance of the "<process>" task for user "<username>".
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId669
	# line in RSA: <event_log>,<fld1>,<fld2><datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld3>,Task Scheduler successfully finished "{{<process_id>}" instance of the "<process>" task for user "<username>".
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId670
	# line in RSA: <event_log>,<fld11>,<fld12><datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,User "<username>"  registered Task Scheduler task "<process>"
	else if [logstash][msgparser][id] == "msgParserId670" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12}%{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},User \"%{username}\"  registered Task Scheduler task \"%{process}\"" }
			id => "msgParserId670"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Enable"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId671
	# line in RSA: <event_log>,<fld11>,<fld12><datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Task Scheduler launched "{{<process_id>}"  instance of task "<process>" due to a time trigger condition.
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId672
	# line in RSA: <event_log>,<fld11>,<fld12><datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Task Scheduler launch task "<process>" , instance "<application>"  with process ID <process_id>.
	else if [logstash][msgparser][id] == "msgParserId672" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12}%{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},Task Scheduler launch task \"%{process}\" , instance \"%{application}\"  with process ID %{process_id}." }
			id => "msgParserId672"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId673
	# line in RSA: <event_log>,<fld11>,<fld12><datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Task Scheduler launched action "<application>" in instance "{{<process_id>}" of task "<process>".
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId674
	# line in RSA: <event_log>,<fld11>,<fld12><datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,Task Scheduler successfully completed task "<process>" , instance "{{<process_id>}" , action "<application>" with return code <resultcode>.
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId675
	# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description>
	else if [logstash][msgparser][id] == "msgParserId675" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description}" }
			id => "msgParserId675"
			add_field => {
				"vid" => "%{p_msgid}"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[fld11]"
		destination => "[context]"
		dictionary => {
			"R" => "Response"
		}
		fallback => "Query"
		override => true
	}
}
filter {
	translate {
		field => "[obj_type]"
		destination => "[ec_subject]"
		dictionary => {
			"File" => "File"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[logon_type]"
		destination => "[logon_type_desc]"
		dictionary => {
			"2" => "Interactive"
			"3" => "network"
			"4" => "batch"
			"5" => "service"
			"7" => "unlock"
			"8" => "networkcleartext"
			"9" => "newcredentials"
			"10" => "remoteinteractive"
			"11" => "cachedinteractive"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[resultcode]"
		destination => "[result]"
		dictionary => {
			"0xC0000064" => "user name does not exist"
			"0xC000006A" => "user name is correct but the password is wrong"
			"0xC0000234" => "user is currently locked out"
			"0xC0000072" => "account is currently disabled"
			"0xC000006F" => "user tried to logon outside his day of week or time of day restrictions"
			"0xC0000070" => "workstation restriction, or Authentication Policy Silo violation (look for event ID 4820 on domain controller)"
			"0xC0000193" => "account expiration"
			"0xC0000071" => "expired password"
			"0xC0000133" => "clocks between DC and other computer too far out of sync"
			"0xC0000224" => "user is required to change password at next logon"
			"0xC0000225" => "evidently a bug in Windows and not a risk"
			"0xc000015b" => "The user has not been granted the requested logon type (aka logon right) at this machine"
			"0xE" => "KDC has no support for encryption type"
			"0xF" => "KDC has no support for checksum type"
			"0x10" => "KDC has no support for padata type"
			"0x11" => "KDC has no support for transited type"
			"0x12" => "Clients credentials have been revoked"
			"0x13" => "Credentials for server have been revoked"
			"0x14" => "TGT has been revoked"
			"0x15" => "Client not yet valid - try again later"
			"0x16" => "Server not yet valid - try again later"
			"0x17" => "Password has expired"
			"0x18" => "Pre-authentication information was invalid"
			"0x19" => "Additional pre-authentication required"
			"0x1F" => "Integrity check on decrypted field failed"
			"0x20" => "Ticket expired"
			"0x21" => "Ticket not yet valid"
			"0x22" => "Request is a replay"
			"0x23" => "The ticket is not for us"
			"0x24" => "Ticket and authenticator donot match"
			"0x25" => "Clock skew too great"
			"0x26" => "Incorrect net address"
			"0x27" => "Protocol version mismatch"
			"0x28" => "Invalid msg type"
			"0x29" => "Message stream modified"
			"0x2A" => "Message out of order"
			"0x2C" => "Specified version of key is not available"
			"0x2D" => "Service key not available"
			"0x2E" => "Mutual authentication failed"
			"0x2F" => "Incorrect message direction"
			"0x30" => "Alternative authentication method required"
			"0x31" => "Incorrect sequence number in message"
			"0x32" => "Inappropriate type of checksum in message"
			"0x3C" => "Generic error (description in e-text)"
			"0x3D" => "Field is too long for this implementation"
		}
		fallback => ""
		override => true
	}
}
filter {
	translate {
		field => "[event_type]"
		destination => "[disposition]"
		dictionary => {
			"Success Audit" => "SUCCESS"
			"Audit Success" => "SUCCESS"
			"Failure Audit" => "FAILURE"
			"Audit Failure" => "FAILURE"
		}
		fallback => ""
		override => true
	}
}

# Rename fields
filter {
	mutate {
		rename => {
			"ip.orig" => "ip_orig"
		}
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_winevent_nicmsg.json"
#			template_name => "winevent_nic_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

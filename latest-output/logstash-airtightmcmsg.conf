# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "airtightmc"
			"[observer][name]" => "Airtight Management Console"
			"[observer][type]" => "Intrusion"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0005
	# line in RSA: <<<hfld1>><<<hfld2>><hmonth> <hday> <htime> <messageid>[<hfld3>]: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "<%{hfld1}><%{hfld2}>%{hmonth} %{hday} %{htime} %{messageid}[%{hfld3}]: %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <<<hfld1>><<<hfld2>><hmonth> <hday> <htime> <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "<%{hfld1}><%{hfld2}>%{hmonth} %{hday} %{htime} %{messageid}: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: <hfld1>AirTight Management Console <hversion> : <hfld4>: <messageid> <!payload:hversion>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^A]*)AirTight[\s]+Management[\s]+Console[\s]+(?<message>(?<hversion>[^\s]*)[\s]+:[\s]+(?<hfld4>[^:]*):[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1>AirTight Management Console <hversion> : <messageid> <!payload:hversion>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^A]*)AirTight[\s]+Management[\s]+Console[\s]+(?<message>(?<hversion>[^\s]*)[\s]+:[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <fld1> <event_time_string> wifi-security-server - - EVT - <messageid>:<fld2>|AirTight|<product>|<version>|<fld4>|<event_description>|<severity>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{fld1} %{event_time_string} wifi-security-server - - EVT - %{messageid}:%{fld2}|AirTight|%{product}|%{version}|%{fld4}|%{event_description}|%{severity}|%{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-airtightmcmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "High" {
		# MESSAGE High
		# line in RSA: <version> : <action>: High non-WiFi RF Interference detected [in <fld1> band] in the vicinity of Sensor [<sensor>]. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : %{action}: High non-WiFi RF Interference detected [in %{fld1} band] in the vicinity of Sensor [%{sensor}]. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{info}" }
				id => "message-High"
				add_field => {
					"[event][id]" => "High"
					"[rsa][message][id1]" => "High"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE High:01
		# line in RSA: <version> : <action>: High percentage of auxiliary traffic in Authorized BSS [<sensor>]. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : %{action}: High percentage of auxiliary traffic in Authorized BSS [%{sensor}]. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{info}" }
				id => "message-High:01"
				add_field => {
					"[event][id]" => "High:01"
					"[rsa][message][id1]" => "High:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE High:02
		# line in RSA: <version> : <action>: High percentage of communication errors in Authorized BSS [<sensor>]. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : %{action}: High percentage of communication errors in Authorized BSS [%{sensor}]. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{info}" }
				id => "message-High:02"
				add_field => {
					"[event][id]" => "High:02"
					"[rsa][message][id1]" => "High:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Authorized" {
		# MESSAGE Authorized
		# line in RSA: <version> : Authorized Client [<dmacaddr>] probing for vulnerable SSID [<ssid>] : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: Authorized Client [<fld19>] is probing for vulnerable SSID [<fld20>]. The Client's details are: MAC address [<fld21>], user name [<username>], vendor [<fld22>], RSSI [<fld23>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : Authorized Client [%{dmacaddr}] probing for vulnerable SSID [%{ssid}] : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: Authorized Client [%{fld19}] is probing for vulnerable SSID [%{fld20}]. The Client's details are: MAC address [%{fld21}], user name [%{username}], vendor [%{fld22}], RSSI [%{fld23}] dBm." }
				id => "message-Authorized"
				add_field => {
					"[event][id]" => "Authorized"
					"[rsa][message][id1]" => "Authorized"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE Authorized:01
		# line in RSA: <version> : Authorized AP [<access_point>] configuration is not optimized for throughput. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: Authorized AP [<fld19>] is not optimized for throughput as it allows clients to connect at rates under [<fld20>] Mbps. The AP's details are: MAC address [<smacaddr>], protocol [<protocol>], channel [<wifi_channel>], SSID [<ssid>], security setting [<fld21>], vendor [<fld22>], RSSI [<fld23>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : Authorized AP [%{access_point}] configuration is not optimized for throughput. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: Authorized AP [%{fld19}] is not optimized for throughput as it allows clients to connect at rates under [%{fld20}] Mbps. The AP's details are: MAC address [%{smacaddr}], protocol [%{protocol}], channel [%{wifi_channel}], SSID [%{ssid}], security setting [%{fld21}], vendor [%{fld22}], RSSI [%{fld23}] dBm." }
				id => "message-Authorized:01"
				add_field => {
					"[event][id]" => "Authorized:01"
					"[rsa][message][id1]" => "Authorized:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE Authorized:02
		# line in RSA: <version> : Authorized AP [<access_point>] channel changed from [<fld20>] to [<fld21>] : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <info>. The AP's details are: MAC address [<macaddr>], protocol [<protocol>], channel [<fld23>], SSID [<ssid>], security setting [<fld24>], vendor [<fld25>], RSSI [<fld26>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : Authorized AP [%{access_point}] channel changed from [%{fld20}] to [%{fld21}] : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{info}. The AP's details are: MAC address [%{macaddr}], protocol [%{protocol}], channel [%{fld23}], SSID [%{ssid}], security setting [%{fld24}], vendor [%{fld25}], RSSI [%{fld26}] dBm." }
				id => "message-Authorized:02"
				add_field => {
					"[event][id]" => "Authorized:02"
					"[rsa][message][id1]" => "Authorized:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE Authorized:03
		# line in RSA: <version> : <action>: Authorized AP [<access_point>] is operating on non-allowed channel. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <info>. The AP's details are: MAC address [<macaddr>], protocol [<protocol>], channel [<fld23>], SSID [<ssid>], security setting [<fld24>], vendor [<fld25>], RSSI [<fld26>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : %{action}: Authorized AP [%{access_point}] is operating on non-allowed channel. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{info}. The AP's details are: MAC address [%{macaddr}], protocol [%{protocol}], channel [%{fld23}], SSID [%{ssid}], security setting [%{fld24}], vendor [%{fld25}], RSSI [%{fld26}] dBm." }
				id => "message-Authorized:03"
				add_field => {
					"[event][id]" => "Authorized:03"
					"[rsa][message][id1]" => "Authorized:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE Authorized:04
		# line in RSA: <version> : Authorized AP [<access_point>] is using excessive RTS/CTS [<fld27>]. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <info>. The AP's details are: MAC address [<macaddr>], protocol [<protocol>], channel [<fld23>], SSID [<ssid>], security setting [<fld24>], vendor [<fld25>], RSSI [<fld26>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : Authorized AP [%{access_point}] is using excessive RTS/CTS [%{fld27}]. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{info}. The AP's details are: MAC address [%{macaddr}], protocol [%{protocol}], channel [%{fld23}], SSID [%{ssid}], security setting [%{fld24}], vendor [%{fld25}], RSSI [%{fld26}] dBm." }
				id => "message-Authorized:04"
				add_field => {
					"[event][id]" => "Authorized:04"
					"[rsa][message][id1]" => "Authorized:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: <version> : Large NAV values detected on channel [<wifi_channel>] near Sensor [<sensor>] : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <info>.
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{version} : Large NAV values detected on channel [%{wifi_channel}] near Sensor [%{sensor}] : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{info}." }
			id => "msgParserId8"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	else if [logstash][msgparser][id] == "Unauthorized" {
		# MESSAGE Unauthorized
		# line in RSA: <version> : <action>: Unauthorized Client [<dhost>] is connected to Guest AP. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: Closest Sensor [<sensor>] : <fld24>: Unauthorized Client [<fld43>] is connected to Guest AP. The Client's details are: MAC address [<dmacaddr>], user name [<username>], vendor [<fld41>], RSSI [<fld42>] dBm. The AP's details are: MAC address [<smacaddr>], protocol [<protocol>], channel [<wifi_channel>], SSID [<ssid>], security setting [<fld21>], vendor [<fld22>], RSSI [<fld23>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : %{action}: Unauthorized Client [%{dhost}] is connected to Guest AP. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: Closest Sensor [%{sensor}] : %{fld24}: Unauthorized Client [%{fld43}] is connected to Guest AP. The Client's details are: MAC address [%{dmacaddr}], user name [%{username}], vendor [%{fld41}], RSSI [%{fld42}] dBm. The AP's details are: MAC address [%{smacaddr}], protocol [%{protocol}], channel [%{wifi_channel}], SSID [%{ssid}], security setting [%{fld21}], vendor [%{fld22}], RSSI [%{fld23}] dBm." }
				id => "message-Unauthorized"
				add_field => {
					"[event][id]" => "Unauthorized"
					"[rsa][message][id1]" => "Unauthorized"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE Unauthorized:01
		# line in RSA: <version> : <action>: Unauthorized Client [<dhost>] is connected to Guest AP. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>:<fld6>: Unauthorized Client [<fld43>] is connected to Guest AP. The Client's details are: MAC address [<dmacaddr>], user name [<username>], vendor [<fld41>], RSSI [<fld42>] dBm. The AP's details are: MAC address [<smacaddr>], protocol [<protocol>], channel [<wifi_channel>], SSID [<ssid>], security setting [<fld21>], vendor [<fld22>], RSSI [<fld23>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : %{action}: Unauthorized Client [%{dhost}] is connected to Guest AP. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}: Unauthorized Client [%{fld43}] is connected to Guest AP. The Client's details are: MAC address [%{dmacaddr}], user name [%{username}], vendor [%{fld41}], RSSI [%{fld42}] dBm. The AP's details are: MAC address [%{smacaddr}], protocol [%{protocol}], channel [%{wifi_channel}], SSID [%{ssid}], security setting [%{fld21}], vendor [%{fld22}], RSSI [%{fld23}] dBm." }
				id => "message-Unauthorized:01"
				add_field => {
					"[event][id]" => "Unauthorized:01"
					"[rsa][message][id1]" => "Unauthorized:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA: <version> : <action>: Indeterminate AP [<access_point>] is active. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <fld24>: Indeterminate AP [<fld41>] is active. The AP's details are: MAC address [<smacaddr>], protocol [<protocol>], channel [<wifi_channel>], SSID [<ssid>], security setting [<fld21>], vendor [<fld22>], RSSI [<fld23>] dBm.
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{version} : %{action}: Indeterminate AP [%{access_point}] is active. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{fld24}: Indeterminate AP [%{fld41}] is active. The AP's details are: MAC address [%{smacaddr}], protocol [%{protocol}], channel [%{wifi_channel}], SSID [%{ssid}], security setting [%{fld21}], vendor [%{fld22}], RSSI [%{fld23}] dBm." }
			id => "msgParserId11"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE User
		# line in RSA: <version> : User logged out of server. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <fld25> : <privilege> : <fld27> : User [<username>] logged out of server with IP [<fld26>].
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : User logged out of server. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{fld25} : %{privilege} : %{fld27} : User [%{username}] logged out of server with IP [%{fld26}]." }
				id => "message-User"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
					"[event][id]" => "User"
					"[rsa][message][id1]" => "User"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE User:01
		# line in RSA: <version> : User deleted. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <fld25> : <privilege> : <fld27> : User [<username>] has been deleted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : User deleted. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{fld25} : %{privilege} : %{fld27} : User [%{username}] has been deleted." }
				id => "message-User:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
					"[event][id]" => "User:01"
					"[rsa][message][id1]" => "User:01"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA: <version> : WLAN Integration Server settings modified. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <username> : <privilege> : <fld27> : [<info>] [<daddr>] settings have been modified.
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{version} : WLAN Integration Server settings modified. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{username} : %{privilege} : %{fld27} : [%{info}] [%{daddr}] settings have been modified." }
			id => "msgParserId13"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	else if [logstash][msgparser][id] == "Login" {
		# MESSAGE Login
		# line in RSA: <version> : Login succeeded for user on server. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <fld25> : <privilege> : <fld27> : Login succeeded for [<username>] user on server with IP [<fld26>].
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : Login succeeded for user on server. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{fld25} : %{privilege} : %{fld27} : Login succeeded for [%{username}] user on server with IP [%{fld26}]." }
				id => "message-Login"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Login"
					"[rsa][message][id1]" => "Login"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE Login:01
		# line in RSA: <version> : Login failed for user on server. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <fld25> : <privilege> : <fld27> : Login failed for [<username>] user on server with IP [<saddr>].
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : Login failed for user on server. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{fld25} : %{privilege} : %{fld27} : Login failed for [%{username}] user on server with IP [%{saddr}]." }
				id => "message-Login:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "Login:01"
					"[rsa][message][id1]" => "Login:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA: <version> : Syslog server added. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <username> : <privilege> : <fld27> : Syslog server [<info>] has been added.
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "%{version} : Syslog server added. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{username} : %{privilege} : %{fld27} : Syslog server [%{info}] has been added." }
			id => "msgParserId15"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: <version> : <event_description> : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <username> : <privilege> : <fld27> : <info>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{version} : %{event_description} : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{username} : %{privilege} : %{fld27} : %{info}" }
			id => "msgParserId16"
			add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: <version> : <action>: Scheduled automatic deletion job completed on Server [ID:<fld26>]. This job deletes old and inactive access points, client devices, unmonitored networks, device quarantine history, old events and user action logs as configured. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <info>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{version} : %{action}: Scheduled automatic deletion job completed on Server [ID:%{fld26}]. This job deletes old and inactive access points, client devices, unmonitored networks, device quarantine history, old events and user action logs as configured. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{info}" }
			id => "msgParserId17"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <version> : Start: Spoofing of MAC address [<smacaddr>] of Authorized AP [<fld1>] is in progress. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <fld25> : Start: <info>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{version} : Start: Spoofing of MAC address [%{smacaddr}] of Authorized AP [%{fld1}] is in progress. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{fld25} : Start: %{info}" }
			id => "msgParserId19"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	else if [logstash][msgparser][id] == "[Rogue]" {
		# MESSAGE [Rogue]
		# line in RSA: <version> : Start: [Rogue] <fld1>. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: Closest Sensor [<sensor>] :<fld25> MAC address [<dmacaddr>], user name [<username>], vendor [<fld41>], RSSI [<fld42>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : Start: [Rogue] %{fld1}. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: Closest Sensor [%{sensor}] :%{fld25} MAC address [%{dmacaddr}], user name [%{username}], vendor [%{fld41}], RSSI [%{fld42}] dBm." }
				id => "message-[Rogue]"
				add_field => {
					"[event][id]" => "[Rogue]"
					"[rsa][message][id1]" => "[Rogue]"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
		# MESSAGE [Rogue]:01
		# line in RSA: <version> : Stop: [Rogue] <fld1>. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: Stop: <info>. The Client's details are: MAC address [<dmacaddr>], user name [<username>], vendor [<fld41>], RSSI [<fld42>] dBm.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version} : Stop: [Rogue] %{fld1}. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: Stop: %{info}. The Client's details are: MAC address [%{dmacaddr}], user name [%{username}], vendor [%{fld41}], RSSI [%{fld42}] dBm." }
				id => "message-[Rogue]:01"
				add_field => {
					"[event][id]" => "[Rogue]:01"
					"[rsa][message][id1]" => "[Rogue]:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA: <version> : <info>. : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <fld25> : MAC address [<dmacaddr>], user name [<username>], vendor [<fld41>], RSSI [<fld42>] dBm.
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{version} : %{info}. : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{fld25} : MAC address [%{dmacaddr}], user name [%{username}], vendor [%{fld41}], RSSI [%{fld42}] dBm." }
			id => "msgParserId23"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: <version> : <event_description> : <hostip>:<location_desc> : <fld12>T<fld13>:<fld14>:<fld15>+<fld7>:<fld8> : <severity> :<fld2>:<fld3>:<fld4>:<fld5>: <username> : <privilege> : <fld27> : <info>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{version} : %{event_description} : %{hostip}:%{location_desc} : %{fld12}T%{fld13}:%{fld14}:%{fld15}+%{fld7}:%{fld8} : %{severity} :%{fld2}:%{fld3}:%{fld4}:%{fld5}: %{username} : %{privilege} : %{fld27} : %{info}" }
			id => "msgParserId24"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld12} %{fld13} %{fld14} %{fld15}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HHms" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: msg=<msg> cat=<category> rt=<fld1> dvc=<hostip> externalId=<hardware_id> dmac=<smacaddr> cs1Label=<cs_fld> cs1=<cs_fld> cs2Label=<cs_fld> cs2=<ssid> cs3Label=<cs_fld> cs3=<cs_fld> cn1Label=<cs_fld> cn1=<cs_fld> cn2Label=<cs_fld> cn2=<wifi_channel> cs4Label=<cs_fld> cs4=<location_desc> cs5Label=<cs_fld> cs5=<sensor>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "msg=%{msg} cat=%{category} rt=%{fld1} dvc=%{hostip} externalId=%{hardware_id} dmac=%{smacaddr} cs1Label=%{cs_fld} cs1=%{cs_fld} cs2Label=%{cs_fld} cs2=%{ssid} cs3Label=%{cs_fld} cs3=%{cs_fld} cn1Label=%{cs_fld} cn1=%{cs_fld} cn2Label=%{cs_fld} cn2=%{wifi_channel} cs4Label=%{cs_fld} cs4=%{location_desc} cs5Label=%{cs_fld} cs5=%{sensor}" }
			id => "msgParserId25"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA: SpectraGuard Sensor[<smacaddr>] disconnected from SpectraGuard Server <daddr>, hostname <dhost>, real server <fld1>, protocol <protocol>, proxied <fld2>
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "SpectraGuard Sensor[%{smacaddr}] disconnected from SpectraGuard Server %{daddr}, hostname %{dhost}, real server %{fld1}, protocol %{protocol}, proxied %{fld2}" }
			id => "msgParserId26"
			add_field => {
				"event_description" => "SpectraGuard Sensor disconnected from SpectraGuard Server"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM dd HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "config" {
		# MESSAGE config
		# line in RSA: <event_description>:[<change_old>] to:[<change_new>]<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}:[%{change_old}] to:[%{change_new}]%{fld1}" }
				id => "message-config"
				add_field => {
				"change_attribute" => "Server"
					"[event][id]" => "config"
					"[rsa][message][id1]" => "config"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd HH:m:s" ] }
			}
		}
		# MESSAGE config:01
		# line in RSA: Server IP discovery selected <fld1> is not a file or directory!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server IP discovery selected %{fld1} is not a file or directory!" }
				id => "message-config:01"
				add_field => {
				"event_description" => "Server IP discovery selected is not a file or directory"
					"[event][id]" => "config:01"
					"[rsa][message][id1]" => "config:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd HH:m:s" ] }
			}
		}
		# MESSAGE config:02
		# line in RSA: Set: Primary Server IP/Hostname = [<hostname>] Server <hostip>, hostname <fld1>, real server <fld2>, protocol <protocol>, proxied <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Set: Primary Server IP/Hostname = [%{hostname}] Server %{hostip}, hostname %{fld1}, real server %{fld2}, protocol %{protocol}, proxied %{fld3}" }
				id => "message-config:02"
				add_field => {
					"[event][id]" => "config:02"
					"[rsa][message][id1]" => "config:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "dropbear" {
		# MESSAGE dropbear
		# line in RSA: Login failed for '<fld6>' from ::ffff:<saddr>:<sport> Server <daddr>, hostname <dhost>, real server <fld4>, protocol <protocol>, proxied <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed for '%{fld6}' from ::ffff:%{saddr}:%{sport} Server %{daddr}, hostname %{dhost}, real server %{fld4}, protocol %{protocol}, proxied %{fld5}" }
				id => "message-dropbear"
				add_field => {
				"event_description" => "Login failed"
					"[event][id]" => "dropbear"
					"[rsa][message][id1]" => "dropbear"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd HH:m:s" ] }
			}
		}
		# MESSAGE dropbear:01
		# line in RSA: Login successful for '<fld6>' from ::ffff:<saddr>:<sport> Server <daddr>, hostname <dhost>, real server <fld4>, protocol <protocol>, proxied <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login successful for '%{fld6}' from ::ffff:%{saddr}:%{sport} Server %{daddr}, hostname %{dhost}, real server %{fld4}, protocol %{protocol}, proxied %{fld5}" }
				id => "message-dropbear:01"
				add_field => {
				"event_description" => "Login successful"
					"[event][id]" => "dropbear:01"
					"[rsa][message][id1]" => "dropbear:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM dd HH:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-airtightmcmsg.json"
#			template_name => "airtightmc_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

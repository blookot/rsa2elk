# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ciscoidsxml"
			"[observer][name]" => "Cisco Secure IDS XML"
			"[observer][type]" => "IDS"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %IDSSXML-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%IDSSXML-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <month> <day> <year> <time> %IDSSXML-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{year} %{time} %IDSSXML-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <month> <day> <year> <time> %CISCO_SECURE_IDS-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{year} %{time} %CISCO_SECURE_IDS-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %CISCO_SECURE_IDS-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%CISCO_SECURE_IDS-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <month> <day> <year> <time> {%CISCO_SECURE_IDS-|%IDSSXML-}<hlevel>-<hfld1>: <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<year>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(%CISCO_SECURE_IDS\-|%IDSSXML\-)(?<hlevel>[^\-]*)\-(?<hfld1>[^:]*):[\s]+(?<message>.*)$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "CiscoIDS_AlertLog"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %{CISCO_SECURE_IDS-|IDSSXML-}<hlevel>-<hfld1>: <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%(CISCO_SECURE_IDS\-|IDSSXML\-)(?<hlevel>[^\-]*)\-(?<hfld1>[^:]*):[\s]+(?<message>.*)$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "CiscoIDS_AlertLog"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_ciscoidsxmlmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  <signame>; <severity>, <saddr>, <sport>, <daddr>, <dport>, <version>, <event_time_string>, <timezone>, <vlan>, <hostid>, <fld28>, <event_description>,<fld23>, <fld24>, <fld25>, <fld26>,<fld27>,Attacker,<fld1>,<fld2>,Victim,<fld3>,<fld4>,Other,<id>,<fld5>,<application>,<fld21>,<fld22>,<fld6>,<fld7>,<category>,<sigid>,<sigid1>,<fld8>,<fld9>,<fld10>,<group_object>,<fld29>,{ <risk>,<interface>,<protocol>,<result>,Attacker_v6,<saddr_v6>,Victim_v6,<daddr_v6>,<a>,<b>,<event_source>,<id1>,<sigtype>,<comments>,<vendor_event_cat>,<src_payload>,<dst_payload>,<info> | <risk>,<interface>,<protocol>,<result>,<info> | <fld11> }
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^[\s]*(?<signame>[^;]*);[\s]+(?<severity>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<sport>[^,]*),[\s]+(?<daddr>[^,]*),[\s]+(?<dport>[^,]*),[\s]+(?<version>[^,]*),[\s]+(?<event_time_string>[^,]*),[\s]+(?<timezone>[^,]*),[\s]+(?<vlan>[^,]*),[\s]+(?<hostid>[^,]*),[\s]+(?<fld28>[^,]*),[\s]+(?<event_description>[^,]*),(?<fld23>[^,]*),[\s]+(?<fld24>[^,]*),[\s]+(?<fld25>[^,]*),[\s]+(?<fld26>[^,]*),(?<fld27>[^,]*),Attacker,(?<fld1>[^,]*),(?<fld2>[^,]*),Victim,(?<fld3>[^,]*),(?<fld4>[^,]*),Other,(?<id>[^,]*),(?<fld5>[^,]*),(?<application>[^,]*),(?<fld21>[^,]*),(?<fld22>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(?<category>[^,]*),(?<sigid>[^,]*),(?<sigid1>[^,]*),(?<fld8>[^,]*),(?<fld9>[^,]*),(?<fld10>[^,]*),(?<group_object>[^,]*),(?<fld29>[^,]*),([\s]*(?<risk>[^,]*),(?<interface>[^,]*),(?<protocol>[^,]*),(?<result>[^,]*),Attacker_v6,(?<saddr_v6>[^,]*),Victim_v6,(?<daddr_v6>[^,]*),(?<a>[^,]*),(?<b>[^,]*),(?<event_source>[^,]*),(?<id1>[^,]*),(?<sigtype>[^,]*),(?<comments>[^,]*),(?<vendor_event_cat>[^,]*),(?<src_payload>[^,]*),(?<dst_payload>[^,]*),(?<info>[^\s]*)[\s]+|[\s]*(?<risk>[^,]*),(?<interface>[^,]*),(?<protocol>[^,]*),(?<result>[^,]*),(?<info>[^\s]*)[\s]+|[\s]*(?<fld11>[^\s]*)[\s]+)$" }
			id => "msgParserId0"
			add_field => {
				"level" => "%{hlevel}"
				"risk_num" => "%{risk}"
				"threat_val" => "%{a}"
				"reputation_num" => "%{b}"
				"sensor" => "%{hostid}"
				"context" => "%{signame}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:  <signame>; <severity>, <saddr>, <sport>, <daddr>, <dport>, <version>, <event_time_string>, <timezone>, <vlan>, <hostid>, <fld28>, <event_description>,<fld23>, <fld24>, <fld25>, <fld26>,<fld27>,Attacker,<fld1>,<fld2>,Victim,<fld3>,<fld4>,Other,<id>,<fld5>,<application>,<fld21>,<fld22>,<fld6>,<fld7>,<category>,<sigid>,<sigid1>,<fld8>,<fld9>,<fld10>,<group_object>,<fld29>,{ <risk>,<interface>,<protocol>,<result>,Attacker_v6,<saddr_v6>,Victim_v6,<daddr_v6>,<a>,<b>,<event_source>,<id1>,<sigtype>,<comments>,<vendor_event_cat>,<src_payload>,<dst_payload>,<info> | <risk>,<interface>,<protocol>,<result>,<info> | <fld11> }
	else if [logstash][msgparser][id] == "msgParserId1" {
		grok {
			match => { "message" => "^[\s]*(?<signame>[^;]*);[\s]+(?<severity>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<sport>[^,]*),[\s]+(?<daddr>[^,]*),[\s]+(?<dport>[^,]*),[\s]+(?<version>[^,]*),[\s]+(?<event_time_string>[^,]*),[\s]+(?<timezone>[^,]*),[\s]+(?<vlan>[^,]*),[\s]+(?<hostid>[^,]*),[\s]+(?<fld28>[^,]*),[\s]+(?<event_description>[^,]*),(?<fld23>[^,]*),[\s]+(?<fld24>[^,]*),[\s]+(?<fld25>[^,]*),[\s]+(?<fld26>[^,]*),(?<fld27>[^,]*),Attacker,(?<fld1>[^,]*),(?<fld2>[^,]*),Victim,(?<fld3>[^,]*),(?<fld4>[^,]*),Other,(?<id>[^,]*),(?<fld5>[^,]*),(?<application>[^,]*),(?<fld21>[^,]*),(?<fld22>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(?<category>[^,]*),(?<sigid>[^,]*),(?<sigid1>[^,]*),(?<fld8>[^,]*),(?<fld9>[^,]*),(?<fld10>[^,]*),(?<group_object>[^,]*),(?<fld29>[^,]*),([\s]*(?<risk>[^,]*),(?<interface>[^,]*),(?<protocol>[^,]*),(?<result>[^,]*),Attacker_v6,(?<saddr_v6>[^,]*),Victim_v6,(?<daddr_v6>[^,]*),(?<a>[^,]*),(?<b>[^,]*),(?<event_source>[^,]*),(?<id1>[^,]*),(?<sigtype>[^,]*),(?<comments>[^,]*),(?<vendor_event_cat>[^,]*),(?<src_payload>[^,]*),(?<dst_payload>[^,]*),(?<info>[^\s]*)[\s]+|[\s]*(?<risk>[^,]*),(?<interface>[^,]*),(?<protocol>[^,]*),(?<result>[^,]*),(?<info>[^\s]*)[\s]+|[\s]*(?<fld11>[^\s]*)[\s]+)$" }
			id => "msgParserId1"
			add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"level" => "%{hlevel}"
				"risk_num" => "%{risk}"
				"threat_val" => "%{a}"
				"reputation_num" => "%{b}"
				"sensor" => "%{hostid}"
				"context" => "%{signame}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA:  <signame>; <severity>, <saddr>, <sport>, <daddr>, <dport>, <version>, <event_time_string>, <timezone>, <vlan>, <hostid>, <fld28>, <event_description>,<fld23>, <fld24>, <fld25>, <fld26>,<fld27>,Attacker,<fld1>,<fld2>,Victim,<fld3>,<fld4>,Other,<id>,<fld5>,<application>,<fld21>,<fld22>,<fld6>,<fld7>,<category>,<sigid>,<sigid1>,<fld8>,<fld9>,<fld10>,<group_object>,<fld29>,{ <risk>,<interface>,<protocol>,<result>,Attacker_v6,<saddr_v6>,Victim_v6,<daddr_v6>,<a>,<b>,<event_source>,<id1>,<sigtype>,<comments>,<vendor_event_cat>,<src_payload>,<dst_payload>,<info> | <risk>,<interface>,<protocol>,<result>,<info> | <fld11> }
	else if [logstash][msgparser][id] == "msgParserId2" {
		grok {
			match => { "message" => "^[\s]*(?<signame>[^;]*);[\s]+(?<severity>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<sport>[^,]*),[\s]+(?<daddr>[^,]*),[\s]+(?<dport>[^,]*),[\s]+(?<version>[^,]*),[\s]+(?<event_time_string>[^,]*),[\s]+(?<timezone>[^,]*),[\s]+(?<vlan>[^,]*),[\s]+(?<hostid>[^,]*),[\s]+(?<fld28>[^,]*),[\s]+(?<event_description>[^,]*),(?<fld23>[^,]*),[\s]+(?<fld24>[^,]*),[\s]+(?<fld25>[^,]*),[\s]+(?<fld26>[^,]*),(?<fld27>[^,]*),Attacker,(?<fld1>[^,]*),(?<fld2>[^,]*),Victim,(?<fld3>[^,]*),(?<fld4>[^,]*),Other,(?<id>[^,]*),(?<fld5>[^,]*),(?<application>[^,]*),(?<fld21>[^,]*),(?<fld22>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(?<category>[^,]*),(?<sigid>[^,]*),(?<sigid1>[^,]*),(?<fld8>[^,]*),(?<fld9>[^,]*),(?<fld10>[^,]*),(?<group_object>[^,]*),(?<fld29>[^,]*),([\s]*(?<risk>[^,]*),(?<interface>[^,]*),(?<protocol>[^,]*),(?<result>[^,]*),Attacker_v6,(?<saddr_v6>[^,]*),Victim_v6,(?<daddr_v6>[^,]*),(?<a>[^,]*),(?<b>[^,]*),(?<event_source>[^,]*),(?<id1>[^,]*),(?<sigtype>[^,]*),(?<comments>[^,]*),(?<vendor_event_cat>[^,]*),(?<src_payload>[^,]*),(?<dst_payload>[^,]*),(?<info>[^\s]*)[\s]+|[\s]*(?<risk>[^,]*),(?<interface>[^,]*),(?<protocol>[^,]*),(?<result>[^,]*),(?<info>[^\s]*)[\s]+|[\s]*(?<fld11>[^\s]*)[\s]+)$" }
			id => "msgParserId2"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"level" => "%{hlevel}"
				"risk_num" => "%{risk}"
				"threat_val" => "%{a}"
				"reputation_num" => "%{b}"
				"sensor" => "%{hostid}"
				"context" => "%{signame}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA:  <signame>; <severity>, <saddr>, <sport>, <daddr>, <dport>, <version>, <event_time_string>, <timezone>, <vlan>, <hostid>, <fld28>, <event_description>,<fld23>, <fld24>, <fld25>, <fld26>,<fld27>,Attacker,<fld1>,<fld2>,Victim,<fld3>,<fld4>,Other,<id>,<fld5>,<application>,<fld21>,<fld22>,<fld6>,<fld7>,<category>,<sigid>,<sigid1>,<fld8>,<fld9>,<fld10>,<group_object>,<fld29>,{ <risk>,<interface>,<protocol>,<result>,Attacker_v6,<saddr_v6>,Victim_v6,<daddr_v6>,<a>,<b>,<event_source>,<id1>,<sigtype>,<comments>,<vendor_event_cat>,<src_payload>,<dst_payload>,<info> | <risk>,<interface>,<protocol>,<result>,<info> | <fld11> }
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^[\s]*(?<signame>[^;]*);[\s]+(?<severity>[^,]*),[\s]+(?<saddr>[^,]*),[\s]+(?<sport>[^,]*),[\s]+(?<daddr>[^,]*),[\s]+(?<dport>[^,]*),[\s]+(?<version>[^,]*),[\s]+(?<event_time_string>[^,]*),[\s]+(?<timezone>[^,]*),[\s]+(?<vlan>[^,]*),[\s]+(?<hostid>[^,]*),[\s]+(?<fld28>[^,]*),[\s]+(?<event_description>[^,]*),(?<fld23>[^,]*),[\s]+(?<fld24>[^,]*),[\s]+(?<fld25>[^,]*),[\s]+(?<fld26>[^,]*),(?<fld27>[^,]*),Attacker,(?<fld1>[^,]*),(?<fld2>[^,]*),Victim,(?<fld3>[^,]*),(?<fld4>[^,]*),Other,(?<id>[^,]*),(?<fld5>[^,]*),(?<application>[^,]*),(?<fld21>[^,]*),(?<fld22>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(?<category>[^,]*),(?<sigid>[^,]*),(?<sigid1>[^,]*),(?<fld8>[^,]*),(?<fld9>[^,]*),(?<fld10>[^,]*),(?<group_object>[^,]*),(?<fld29>[^,]*),([\s]*(?<risk>[^,]*),(?<interface>[^,]*),(?<protocol>[^,]*),(?<result>[^,]*),Attacker_v6,(?<saddr_v6>[^,]*),Victim_v6,(?<daddr_v6>[^,]*),(?<a>[^,]*),(?<b>[^,]*),(?<event_source>[^,]*),(?<id1>[^,]*),(?<sigtype>[^,]*),(?<comments>[^,]*),(?<vendor_event_cat>[^,]*),(?<src_payload>[^,]*),(?<dst_payload>[^,]*),(?<info>[^\s]*)[\s]+|[\s]*(?<risk>[^,]*),(?<interface>[^,]*),(?<protocol>[^,]*),(?<result>[^,]*),(?<info>[^\s]*)[\s]+|[\s]*(?<fld11>[^\s]*)[\s]+)$" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"level" => "%{hlevel}"
				"risk_num" => "%{risk}"
				"threat_val" => "%{a}"
				"reputation_num" => "%{b}"
				"sensor" => "%{hostid}"
				"context" => "%{signame}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{year} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_ciscoidsxmlmsg.json"
#			template_name => "ciscoidsxml_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

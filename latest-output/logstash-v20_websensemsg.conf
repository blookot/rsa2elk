# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "websense"
			"[observer][name]" => "Websense Web Security"
			"[observer][type]" => "Web Logs"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %WEBSENSE <messageid> ^<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%WEBSENSE %{messageid} ^%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %WEBSENSE Date: <hdate> <htime>.Type:<messageid>.<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%WEBSENSE Date: %{hdate} %{htime}.Type:%{messageid}.%{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %WEBSENSE {Websense <messageid>:|<messageid>:}  <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%WEBSENSE[\s]+(Websense[\s]+(?<messageid>[^:]*):|(?<messageid>[^:]*):)[\s]+(?<message>.*)$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %WEBSENSE: <hfld1>^^<hfld2>^^<hfld3>^^<hfld4>^^<hfld5>^^<messageid>^^<!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%WEBSENSE:[\s]+(?<hfld1>[^\^]*)\^\^(?<message>(?<hfld2>[^\^]*)\^\^(?<hfld3>[^\^]*)\^\^(?<hfld4>[^\^]*)\^\^(?<hfld5>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hfld1> vendor={Websense|Forcepoint} product=Security product_version=<version> action=<messageid> <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+vendor=(Websense|Forcepoint)[\s]+product=Security[\s]+product_version=(?<version>[^\s]*)[\s]+action=(?<messageid>[^\s]*)[\s]+(?<message>.*)$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: %WEBSENSE <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%WEBSENSE %{message}" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "WEBSENSE_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_websensemsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld1>.<fld3>^^<hostip>^^<saddr>^^<daddr>^^<disposition>^^<event_description>^^<username>^^<category>^^<network_service>^^<dport>^^<sbytes>^^<rbytes>^^<event_state>^^<web_domain>^^<fld2>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{fld1}.%{fld3}^^%{hostip}^^%{saddr}^^%{daddr}^^%{disposition}^^%{event_description}^^%{username}^^%{category}^^%{network_service}^^%{dport}^^%{sbytes}^^%{rbytes}^^%{event_state}^^%{web_domain}^^%{fld2}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "permitted" {
		# MESSAGE permitted:01
		# line in RSA: severity=<severity> websense_category=<category> category_reason=<fld1> dynamic_category=<fld2> user=<username> src_host=<saddr> src_port=<sport> dst_host=<dhost> dst_ip=<daddr> dst_port=<dport> protocol=<protocol> protocolId=<fld10> protocol_version=<fld11> network_direction=<direction> bytes_out=<sbytes> bytes_in=<rbytes> http_response=<resultcode> http_method=<web_method> http_content_type=<content_type> http_user_agent=<user_agent> http_proxy_status_code=<fld14> reason=<result> disposition=<fld15> policy=<policyname> role=<user_role> duration=<duration> url=<url> content_stripped=<fld25> file_name=<filename> file_type_code=<fld16>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "severity=%{severity} websense_category=%{category} category_reason=%{fld1} dynamic_category=%{fld2} user=%{username} src_host=%{saddr} src_port=%{sport} dst_host=%{dhost} dst_ip=%{daddr} dst_port=%{dport} protocol=%{protocol} protocolId=%{fld10} protocol_version=%{fld11} network_direction=%{direction} bytes_out=%{sbytes} bytes_in=%{rbytes} http_response=%{resultcode} http_method=%{web_method} http_content_type=%{content_type} http_user_agent=%{user_agent} http_proxy_status_code=%{fld14} reason=%{result} disposition=%{fld15} policy=%{policyname} role=%{user_role} duration=%{duration} url=%{url} content_stripped=%{fld25} file_name=%{filename} file_type_code=%{fld16}" }
				id => "message-permitted:01"
				add_field => {
				"disposition" => "%{messageid}"
					"[event][id]" => "permitted:01"
					"[rsa][message][id1]" => "permitted:01"
					"[event][categoryid]" => "1204010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE permitted
		# line in RSA: severity=<severity> category=<category> {user=<username> loginID=<logon_id> | user=<username>} src_host=<saddr> src_port=<sport> dst_host=<dhost> dst_ip=<daddr> dst_port=<dport> bytes_out=<sbytes> bytes_in=<rbytes> http_response=<resultcode> http_method=<web_method> http_content_type=<content_type> http_user_agent=<user_agent> http_proxy_status_code=<fld45> reason=<result> disposition=<fld6> policy=<policyname> role=<user_role> duration=<duration> url=<url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^severity=(?<severity>[^\s]*)[\s]+category=(?<category>[^\s]*)[\s]+(user=(?<username>[^\s]*)[\s]+loginID=(?<logon_id>[^\s]*)[\s]+|[\s]*user=(?<username>[^\s]*))[\s]+src_host=(?<saddr>[^\s]*)[\s]+src_port=(?<sport>[^\s]*)[\s]+dst_host=(?<dhost>[^\s]*)[\s]+dst_ip=(?<daddr>[^\s]*)[\s]+dst_port=(?<dport>[^\s]*)[\s]+bytes_out=(?<sbytes>[^\s]*)[\s]+bytes_in=(?<rbytes>[^\s]*)[\s]+http_response=(?<resultcode>[^\s]*)[\s]+http_method=(?<web_method>[^\s]*)[\s]+http_content_type=(?<content_type>[^\s]*)[\s]+http_user_agent=(?<user_agent>[^\s]*)[\s]+http_proxy_status_code=(?<fld45>[^\s]*)[\s]+reason=(?<result>[^\s]*)[\s]+disposition=(?<fld6>[^\s]*)[\s]+policy=(?<policyname>[^\s]*)[\s]+role=(?<user_role>[^\s]*)[\s]+duration=(?<duration>[^\s]*)[\s]+url=(?<url>.*)$" }
				id => "message-permitted"
				add_field => {
				"disposition" => "%{messageid}"
					"[event][id]" => "permitted"
					"[rsa][message][id1]" => "permitted"
					"[event][categoryid]" => "1204010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "blocked" {
		# MESSAGE blocked:01
		# line in RSA: severity=<severity> websense_category=<category> category_reason=<fld1> dynamic_category=<fld2> user=<username> src_host=<saddr> src_port=<sport> dst_host=<dhost> dst_ip=<daddr> dst_port=<dport> protocol=<protocol> protocolId=<fld10> protocol_version=<fld11> network_direction=<direction> bytes_out=<sbytes> bytes_in=<rbytes> http_response=<resultcode> http_method=<web_method> http_content_type=<content_type> http_user_agent=<user_agent> http_proxy_status_code=<fld14> reason=<result> disposition=<fld15> policy=<policyname> role=<user_role> duration=<duration> url=<url> content_stripped=<fld25> file_name=<filename> file_type_code=<fld16>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "severity=%{severity} websense_category=%{category} category_reason=%{fld1} dynamic_category=%{fld2} user=%{username} src_host=%{saddr} src_port=%{sport} dst_host=%{dhost} dst_ip=%{daddr} dst_port=%{dport} protocol=%{protocol} protocolId=%{fld10} protocol_version=%{fld11} network_direction=%{direction} bytes_out=%{sbytes} bytes_in=%{rbytes} http_response=%{resultcode} http_method=%{web_method} http_content_type=%{content_type} http_user_agent=%{user_agent} http_proxy_status_code=%{fld14} reason=%{result} disposition=%{fld15} policy=%{policyname} role=%{user_role} duration=%{duration} url=%{url} content_stripped=%{fld25} file_name=%{filename} file_type_code=%{fld16}" }
				id => "message-blocked:01"
				add_field => {
				"disposition" => "%{messageid}"
					"[event][id]" => "blocked:01"
					"[rsa][message][id1]" => "blocked:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE blocked
		# line in RSA: severity=<severity> category=<category> user=<username> src_host=<saddr> src_port=<sport> dst_host=<dhost> dst_ip=<daddr> dst_port=<dport> bytes_out=<sbytes> bytes_in=<rbytes> http_response=<resultcode> http_method=<web_method> http_content_type=<content_type> http_user_agent=<user_agent> http_proxy_status_code=<fld45> reason=<result> disposition=<fld6> policy=<policyname> role=<user_role> duration=<duration> url=<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "severity=%{severity} category=%{category} user=%{username} src_host=%{saddr} src_port=%{sport} dst_host=%{dhost} dst_ip=%{daddr} dst_port=%{dport} bytes_out=%{sbytes} bytes_in=%{rbytes} http_response=%{resultcode} http_method=%{web_method} http_content_type=%{content_type} http_user_agent=%{user_agent} http_proxy_status_code=%{fld45} reason=%{result} disposition=%{fld6} policy=%{policyname} role=%{user_role} duration=%{duration} url=%{url}" }
				id => "message-blocked"
				add_field => {
				"disposition" => "%{messageid}"
					"[event][id]" => "blocked"
					"[rsa][message][id1]" => "blocked"
					"[event][categoryid]" => "1204020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Alert" {
		# MESSAGE Categories
		# line in RSA:  URL Categories Added..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..Subscription Key: <fld1>..<event_description>.. <info>..Note: <comments>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "URL Categories Added..Date: %{fld20} %{fld21} %{fld22}.Type: %{severity}.Source: %{agent}..Subscription Key: %{fld1}..%{event_description}.. %{info}..Note: %{comments}" }
				id => "message-Categories"
				add_field => {
				"action" => "URL Categories Added"
					"[event][id]" => "Categories"
					"[rsa][message][id1]" => "Categories"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Protocols
		# line in RSA:  Network Protocols Added..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..Subscription Key: <fld1>..<event_description>.. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network Protocols Added..Date: %{fld20} %{fld21} %{fld22}.Type: %{severity}.Source: %{agent}..Subscription Key: %{fld1}..%{event_description}.. %{info}" }
				id => "message-Protocols"
				add_field => {
				"action" => "Network Protocols Added"
					"[event][id]" => "Protocols"
					"[rsa][message][id1]" => "Protocols"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Search
		# line in RSA:  Search Filtering Update..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..Subscription Key: <fld1>..<event_description>... <info>....<comments>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Search Filtering Update..Date: %{fld20} %{fld21} %{fld22}.Type: %{severity}.Source: %{agent}..Subscription Key: %{fld1}..%{event_description}... %{info}....%{comments}" }
				id => "message-Search"
				add_field => {
				"action" => "Search Filtering Update"
					"[event][id]" => "Search"
					"[rsa][message][id1]" => "Search"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Expiration
		# line in RSA:  Approaching Subscription Expiration..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..Filtering Service: <daddr>.Subscription Key: <fld1>..<event_description>...<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Approaching Subscription Expiration..Date: %{fld20} %{fld21} %{fld22}.Type: %{severity}.Source: %{agent}..Filtering Service: %{daddr}.Subscription Key: %{fld1}..%{event_description}...%{info}" }
				id => "message-Expiration"
				add_field => {
				"action" => "Approaching Subscription Expiration"
					"[event][id]" => "Expiration"
					"[rsa][message][id1]" => "Expiration"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Limit
		# line in RSA:  Approaching Subscription Limit..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..Filtering Service: <daddr>.Subscription Key: <fld1>..<event_description>...<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Approaching Subscription Limit..Date: %{fld20} %{fld21} %{fld22}.Type: %{severity}.Source: %{agent}..Filtering Service: %{daddr}.Subscription Key: %{fld1}..%{event_description}...%{info}" }
				id => "message-Limit"
				add_field => {
				"action" => "Approaching Subscription Limit"
					"[event][id]" => "Limit"
					"[rsa][message][id1]" => "Limit"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Exceeded
		# line in RSA:  Subscription Exceeded..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..Filtering Service: <daddr>.Subscription Key: <fld1>..<event_description>...<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Subscription Exceeded..Date: %{fld20} %{fld21} %{fld22}.Type: %{severity}.Source: %{agent}..Filtering Service: %{daddr}.Subscription Key: %{fld1}..%{event_description}...%{info}" }
				id => "message-Exceeded"
				add_field => {
				"action" => "Subscription Exceeded"
					"[event][id]" => "Exceeded"
					"[rsa][message][id1]" => "Exceeded"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE PERMIT:01
		# line in RSA:  <action> - <fld1> (<fld2>)..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..<trigger_desc>...User name: <dn>.User IP address: <saddr>.Threshold (in visits): <trigger_val> { .Category: <category>.Action: Permitted | .Protocol:<protocol>.Action: Permitted } ..--Most recent request--.URL:<url>.IP address: <daddr>.Port:<dport> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<action>[^\s]*)[\s]+\-[\s]+(?<fld1>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)\.\.Date:[\s]+(?<fld20>[^\s]*)[\s]+(?<fld21>[^\s]*)[\s]+(?<fld22>[^\.]*)\.Type:[\s]+(?<severity>[^\.]*)\.Source:[\s]+(?<agent>[^\.]*)\.\.(?<trigger_desc>[^\.]*)\.\.\.User[\s]+name:[\s]+(?<dn>[^\.]*)\.User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\.]*)\.Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s]*)[\s]+([\s]*\.Category:[\s]+(?<category>[^\.]*)\.Action:[\s]+Permitted[\s]+|[\s]*\.Protocol:(?<protocol>[^\.]*)\.Action:[\s]+Permitted[\s]+)[\s]+\.\.\-\-Most[\s]+recent[\s]+request\-\-\.URL:(?<url>[^\.]*)\.IP[\s]+address:[\s]+(?<daddr>[^\.]*)\.Port:(?<dport>[^\s]*)[\s]+$" }
				id => "message-PERMIT:01"
				add_field => {
				"event_state" => "Permitted"
					"[event][id]" => "PERMIT:01"
					"[rsa][message][id1]" => "PERMIT:01"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE BLOCK:01
		# line in RSA:  <action> - <fld1> (<fld2>)..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..<trigger_desc>...User name: <dn>.User IP address: <saddr>.Threshold (in visits): <trigger_val>{ .Category: <category>.Action: Blocked | .Protocol:<protocol>.Action: Blocked } ..--Most recent request--.URL:<url>.IP address: <daddr>.Port:<dport> 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<action>[^\s]*)[\s]+\-[\s]+(?<fld1>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)\.\.Date:[\s]+(?<fld20>[^\s]*)[\s]+(?<fld21>[^\s]*)[\s]+(?<fld22>[^\.]*)\.Type:[\s]+(?<severity>[^\.]*)\.Source:[\s]+(?<agent>[^\.]*)\.\.(?<trigger_desc>[^\.]*)\.\.\.User[\s]+name:[\s]+(?<dn>[^\.]*)\.User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\.]*)\.Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s\s]*)([\s]*\.Category:[\s]+(?<category>[^\.]*)\.Action:[\s]+Blocked[\s]+|[\s]*\.Protocol:(?<protocol>[^\.]*)\.Action:[\s]+Blocked[\s]+)[\s]+\.\.\-\-Most[\s]+recent[\s]+request\-\-\.URL:(?<url>[^\.]*)\.IP[\s]+address:[\s]+(?<daddr>[^\.]*)\.Port:(?<dport>[^\s]*)[\s]+$" }
				id => "message-BLOCK:01"
				add_field => {
				"event_state" => "Blocked"
					"[event][id]" => "BLOCK:01"
					"[rsa][message][id1]" => "BLOCK:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE PERMIT:02
		# line in RSA:  <action> - <fld1> (<fld2>)..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..<trigger_desc>...User name: <dn>.User IP address: <saddr>.Threshold (in visits): <trigger_val> { .Category: <category>.Action: Permitted | .Protocol:<protocol>.Action: Permitted } ..--Most recent request--.URL:<url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<action>[^\s]*)[\s]+\-[\s]+(?<fld1>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)\.\.Date:[\s]+(?<fld20>[^\s]*)[\s]+(?<fld21>[^\s]*)[\s]+(?<fld22>[^\.]*)\.Type:[\s]+(?<severity>[^\.]*)\.Source:[\s]+(?<agent>[^\.]*)\.\.(?<trigger_desc>[^\.]*)\.\.\.User[\s]+name:[\s]+(?<dn>[^\.]*)\.User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\.]*)\.Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s]*)[\s]+([\s]*\.Category:[\s]+(?<category>[^\.]*)\.Action:[\s]+Permitted[\s]+|[\s]*\.Protocol:(?<protocol>[^\.]*)\.Action:[\s]+Permitted[\s]+)[\s]+\.\.\-\-Most[\s]+recent[\s]+request\-\-\.URL:(?<url>.*)$" }
				id => "message-PERMIT:02"
				add_field => {
				"event_state" => "Permitted"
					"[event][id]" => "PERMIT:02"
					"[rsa][message][id1]" => "PERMIT:02"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE BLOCK:02
		# line in RSA:  <action> - <fld1> (<fld2>)..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..<trigger_desc>...User name: <dn>.User IP address: <saddr>.Threshold (in visits): <trigger_val> { .Category: <category>.Action: Blocked | .Protocol:<protocol>.Action: Blocked } ..--Most recent request--.URL:<url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<action>[^\s]*)[\s]+\-[\s]+(?<fld1>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)\.\.Date:[\s]+(?<fld20>[^\s]*)[\s]+(?<fld21>[^\s]*)[\s]+(?<fld22>[^\.]*)\.Type:[\s]+(?<severity>[^\.]*)\.Source:[\s]+(?<agent>[^\.]*)\.\.(?<trigger_desc>[^\.]*)\.\.\.User[\s]+name:[\s]+(?<dn>[^\.]*)\.User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\.]*)\.Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s]*)[\s]+([\s]*\.Category:[\s]+(?<category>[^\.]*)\.Action:[\s]+Blocked[\s]+|[\s]*\.Protocol:(?<protocol>[^\.]*)\.Action:[\s]+Blocked[\s]+)[\s]+\.\.\-\-Most[\s]+recent[\s]+request\-\-\.URL:(?<url>.*)$" }
				id => "message-BLOCK:02"
				add_field => {
				"event_state" => "Blocked"
					"[event][id]" => "BLOCK:02"
					"[rsa][message][id1]" => "BLOCK:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Suspicious
		# line in RSA:  <event_description> (<fld2>)..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..<trigger_desc>...Severity:<fld32>.Category: <category>.Filtering action: Blocked.Threshold (in hits): <trigger_val>..<info>.User:<dn>.IP address: <saddr>.URL: <url>.Destination IP address: <daddr>   Port: <dport>.<fld35>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} (%{fld2})..Date: %{fld20} %{fld21} %{fld22}.Type: %{severity}.Source: %{agent}..%{trigger_desc}...Severity:%{fld32}.Category: %{category}.Filtering action: Blocked.Threshold (in hits): %{trigger_val}..%{info}.User:%{dn}.IP address: %{saddr}.URL: %{url}.Destination IP address: %{daddr}   Port: %{dport}.%{fld35}" }
				id => "message-Suspicious"
				add_field => {
				"event_state" => "Blocked"
					"[event][id]" => "Suspicious"
					"[rsa][message][id1]" => "Suspicious"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Suspicious:01
		# line in RSA:  <event_description> (<fld2>) Date: <fld20> <fld21> <fld22> Type: <severity> Source: <agent> <trigger_desc> Severity:<fld32> Category: <category> Filtering action: Blocked Threshold (in hits): <trigger_val> <info> User:<username> IP address: <saddr> URL: <url> Destination IP address: <daddr> Port: <dport> <fld35>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} (%{fld2}) Date: %{fld20} %{fld21} %{fld22} Type: %{severity} Source: %{agent} %{trigger_desc} Severity:%{fld32} Category: %{category} Filtering action: Blocked Threshold (in hits): %{trigger_val} %{info} User:%{username} IP address: %{saddr} URL: %{url} Destination IP address: %{daddr} Port: %{dport} %{fld35}" }
				id => "message-Suspicious:01"
				add_field => {
				"event_state" => "Blocked"
					"[event][id]" => "Suspicious:01"
					"[rsa][message][id1]" => "Suspicious:01"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy H:m:s" ] }
			}
		}
		# MESSAGE DownloadFailure
		# line in RSA: Database Download Failure  Date: <fld20> Type: <severity> Source: <agent>  Filtering Service: <daddr> Subscription Key: <fld11> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Database Download Failure  Date: %{fld20} Type: %{severity} Source: %{agent}  Filtering Service: %{daddr} Subscription Key: %{fld11} %{info}" }
				id => "message-DownloadFailure"
				add_field => {
				"event_description" => "Database Download Failure"
					"[event][id]" => "DownloadFailure"
					"[rsa][message][id1]" => "DownloadFailure"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld20}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Threshold_Exceeded_Permitted:01
		# line in RSA: Threshold exceeded for Permitted Category - <fld1> (<fld2>)<space>Date: <day> <month> <date> <time> <year><space>Type: <severity> Source: <agent> <info> User name: <dn> User IP address: <saddr> Threshold (in visits): <trigger_val> {Category: <category> Action: Permitted | Protocol:<protocol> Action: Permitted } --Most recent request-- URL:<url> IP address: <daddr> Port: <dport>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Threshold_Exceeded_Permitted
		# line in RSA: Threshold exceeded for Permitted Category - <fld1> (<fld2>)<space>Date: <fld20> Type: <severity> Source: <agent> <info> User name: <dn> User IP address: <saddr> Threshold (in visits): <trigger_val> {Category: <category> Action: Permitted | Protocol:<protocol> Action: Permitted } --Most recent request-- URL:<url> IP address: <daddr> Port: <dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Threshold[\s]+exceeded[\s]+for[\s]+Permitted[\s]+Category[\s]+\-[\s]+(?<fld1>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)(?<space>[^D]*)Date:[\s]+(?<fld20>[^\s]*)[\s]+Type:[\s]+(?<severity>[^\s]*)[\s]+Source:[\s]+(?<agent>[^\s]*)[\s]+(?<info>[^\s]*)[\s]+User[\s]+name:[\s]+(?<dn>[^\s]*)[\s]+User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\s]*)[\s]+Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s]*)[\s]+(Category:[\s]+(?<category>[^\s]*)[\s]+Action:[\s]+Permitted[\s]+|[\s]*Protocol:(?<protocol>[^\s]*)[\s]+Action:[\s]+Permitted[\s]+)[\s]+\-\-Most[\s]+recent[\s]+request\-\-[\s]+URL:(?<url>[^\s]*)[\s]+IP[\s]+address:[\s]+(?<daddr>[^\s]*)[\s]+Port:[\s]+(?<dport>.*)$" }
				id => "message-Threshold_Exceeded_Permitted"
				add_field => {
				"event_state" => "Permitted"
				"action" => "Threshold exceeded for Permitted Category"
				"event_description" => "Threshold exceeded for Permitted Category"
					"[event][id]" => "Threshold_Exceeded_Permitted"
					"[rsa][message][id1]" => "Threshold_Exceeded_Permitted"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{fld20}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "MMM d H:m:s yyyy", "d/M/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Threshold_Exceeded_Blocked:01
		# line in RSA: Threshold exceeded for Blocked Category - <fld1> (<fld2>)<space>Date: <day> <month> <date> <time> <year><space>Type: <severity> Source: <agent> <info> User name: <username> User IP address: <saddr> Threshold (in visits): <trigger_val> {Category: <category> Action: Blocked | Protocol:<protocol> Action: Blocked } <fld3> URL:<url> IP address:<daddr> Port: <dport>
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
		# MESSAGE Threshold_Exceeded_Blocked
		# line in RSA: Threshold exceeded for Blocked Category - <fld1> (<fld2>)<space>Date: <fld20> Type: <severity> Source: <agent> <info> User name: <username> User IP address: <saddr> Threshold (in visits): <trigger_val> {Category: <category> Action: Blocked | Protocol:<protocol> Action: Blocked } <fld3> URL:<url> IP address:<daddr> Port: <dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Threshold[\s]+exceeded[\s]+for[\s]+Blocked[\s]+Category[\s]+\-[\s]+(?<fld1>[^\s]*)[\s]+\((?<fld2>[^\)]*)\)(?<space>[^D]*)Date:[\s]+(?<fld20>[^\s]*)[\s]+Type:[\s]+(?<severity>[^\s]*)[\s]+Source:[\s]+(?<agent>[^\s]*)[\s]+(?<info>[^\s]*)[\s]+User[\s]+name:[\s]+(?<username>[^\s]*)[\s]+User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\s]*)[\s]+Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s]*)[\s]+(Category:[\s]+(?<category>[^\s]*)[\s]+Action:[\s]+Blocked[\s]+|[\s]*Protocol:(?<protocol>[^\s]*)[\s]+Action:[\s]+Blocked[\s]+)[\s]+(?<fld3>[^\s]*)[\s]+URL:(?<url>[^\s]*)[\s]+IP[\s]+address:(?<daddr>[^\s]*)[\s]+Port:[\s]+(?<dport>.*)$" }
				id => "message-Threshold_Exceeded_Blocked"
				add_field => {
				"event_state" => "Blocked"
				"action" => "Threshold exceeded for Blocked Category"
				"event_description" => "Threshold exceeded for Blocked Category"
					"[event][id]" => "Threshold_Exceeded_Blocked"
					"[rsa][message][id1]" => "Threshold_Exceeded_Blocked"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{fld20}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "MMM d H:m:s yyyy", "d/M/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Alert
		# line in RSA: <event_description>..Date: <fld20> <fld21> <fld22>.Type: <severity>.Source: <agent>..Filtering Service: <daddr>.Subscription Key: <fld11>..<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}..Date: %{fld20} %{fld21} %{fld22}.Type: %{severity}.Source: %{agent}..Filtering Service: %{daddr}.Subscription Key: %{fld11}..%{info}" }
				id => "message-Alert"
				add_field => {
					"[event][id]" => "Alert"
					"[rsa][message][id1]" => "Alert"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld20} %{fld21}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s" ] }
			}
		}
		# MESSAGE Alert:01
		# line in RSA: <event_description> Date: <fld20> Type: <severity> Source: <agent>  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} Date: %{fld20} Type: %{severity} Source: %{agent}  %{info}" }
				id => "message-Alert:01"
				add_field => {
					"[event][id]" => "Alert:01"
					"[rsa][message][id1]" => "Alert:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][fullDateTimeString]" => "%{fld20}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s", "d/M/yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA:  <category>^<dn>^<saddr>^<daddr>^<severity>^<url>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{category}^%{dn}^%{saddr}^%{daddr}^%{severity}^%{url}" }
			id => "msgParserId16"
			add_field => {
				"event_state" => "Blocked"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA:  Source: <agent>..Websense Alert: <action>..Filtering Service: <daddr>.Subscription Key:<fld1>..<event_description>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "Source: %{agent}..Websense Alert: %{action}..Filtering Service: %{daddr}.Subscription Key:%{fld1}..%{event_description}" }
			id => "msgParserId17"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
		}
	}
	else if [logstash][msgparser][id] == "Information" {
		# MESSAGE Information:01
		# line in RSA:    Source: <agent>..Websense Alert: <action> - <fld1>..A client <fld2>..For more information, <fld3>...User name: <dn>.User IP address: <saddr>.Threshold (in visits): <trigger_val>{ .Category: <category> | .Protocol: <protocol> } .Disposition: Permitted..--Most recent request--{ .URL: <url>.IP address: | .IP address: } <daddr>.Port: <dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Source:[\s]+(?<agent>[^\.]*)\.\.Websense[\s]+Alert:[\s]+(?<action>[^\s]*)[\s]+\-[\s]+(?<fld1>[^\.]*)\.\.A[\s]+client[\s]+(?<fld2>[^\.]*)\.\.For[\s]+more[\s]+information,[\s]+(?<fld3>[^\.]*)\.\.\.User[\s]+name:[\s]+(?<dn>[^\.]*)\.User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\.]*)\.Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s\s]*)([\s]*\.Category:[\s]+(?<category>[^\s]*)[\s]+|[\s]*\.Protocol:[\s]+(?<protocol>[^\s]*)[\s]+)[\s]+\.Disposition:[\s]+Permitted\.\.\-\-Most[\s]+recent[\s]+request\-\-([\s]*\.URL:[\s]+(?<url>[^\.]*)\.IP[\s]+address:[\s]+|[\s]*\.IP[\s]+address:[\s]+)[\s]+(?<daddr>[^\.]*)\.Port:[\s]+(?<dport>.*)$" }
				id => "message-Information:01"
				add_field => {
				"event_state" => "Permitted"
					"[event][id]" => "Information:01"
					"[rsa][message][id1]" => "Information:01"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
		# MESSAGE Information
		# line in RSA:   Source: <agent>..Websense Alert: <action> - <fld1>...User IP address: <saddr>.Threshold (in visits): <fld2>.Category: <filter>.Disposition: <disposition>.URL: <url>.IP address: <daddr>.Port: <dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source: %{agent}..Websense Alert: %{action} - %{fld1}...User IP address: %{saddr}.Threshold (in visits): %{fld2}.Category: %{filter}.Disposition: %{disposition}.URL: %{url}.IP address: %{daddr}.Port: %{dport}" }
				id => "message-Information"
				add_field => {
					"[event][id]" => "Information"
					"[rsa][message][id1]" => "Information"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
		# MESSAGE Information:03
		# line in RSA:    Source: <agent>..Websense Alert: <action> - <fld1>..A client <fld2>..For more information, <fld3>...User IP address: <saddr>.Threshold (in visits): <trigger_val>{ .Category: <category> | .Protocol: <protocol> } .Disposition: Permitted..--Most recent request--{ .URL: <url>.IP address: | .IP address: } <daddr>.Port: <dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Source:[\s]+(?<agent>[^\.]*)\.\.Websense[\s]+Alert:[\s]+(?<action>[^\s]*)[\s]+\-[\s]+(?<fld1>[^\.]*)\.\.A[\s]+client[\s]+(?<fld2>[^\.]*)\.\.For[\s]+more[\s]+information,[\s]+(?<fld3>[^\.]*)\.\.\.User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\.]*)\.Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s\s]*)([\s]*\.Category:[\s]+(?<category>[^\s]*)[\s]+|[\s]*\.Protocol:[\s]+(?<protocol>[^\s]*)[\s]+)[\s]+\.Disposition:[\s]+Permitted\.\.\-\-Most[\s]+recent[\s]+request\-\-([\s]*\.URL:[\s]+(?<url>[^\.]*)\.IP[\s]+address:[\s]+|[\s]*\.IP[\s]+address:[\s]+)[\s]+(?<daddr>[^\.]*)\.Port:[\s]+(?<dport>.*)$" }
				id => "message-Information:03"
				add_field => {
				"event_state" => "Permitted"
					"[event][id]" => "Information:03"
					"[rsa][message][id1]" => "Information:03"
					"[event][categoryid]" => "1204010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
		# MESSAGE Information:02
		# line in RSA:    Source: <agent>..Websense Alert: <action> - <fld1>..A client <fld2>..For more information, <fld3>...User name: <dn>.User IP address: <saddr>.Threshold (in visits): <trigger_val>{ .Category: <category> | .Protocol: <protocol> } .Disposition: Blocked..--Most recent request--{ .URL: <url>.IP address: | .IP address: } <daddr>.Port: <dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Source:[\s]+(?<agent>[^\.]*)\.\.Websense[\s]+Alert:[\s]+(?<action>[^\s]*)[\s]+\-[\s]+(?<fld1>[^\.]*)\.\.A[\s]+client[\s]+(?<fld2>[^\.]*)\.\.For[\s]+more[\s]+information,[\s]+(?<fld3>[^\.]*)\.\.\.User[\s]+name:[\s]+(?<dn>[^\.]*)\.User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\.]*)\.Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s\s]*)([\s]*\.Category:[\s]+(?<category>[^\s]*)[\s]+|[\s]*\.Protocol:[\s]+(?<protocol>[^\s]*)[\s]+)[\s]+\.Disposition:[\s]+Blocked\.\.\-\-Most[\s]+recent[\s]+request\-\-([\s]*\.URL:[\s]+(?<url>[^\.]*)\.IP[\s]+address:[\s]+|[\s]*\.IP[\s]+address:[\s]+)[\s]+(?<daddr>[^\.]*)\.Port:[\s]+(?<dport>.*)$" }
				id => "message-Information:02"
				add_field => {
				"event_state" => "Blocked"
					"[event][id]" => "Information:02"
					"[rsa][message][id1]" => "Information:02"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
		# MESSAGE Information:04
		# line in RSA:    Source: <agent>..Websense Alert: <action> - <fld1>..A client <fld2>...For more information, <fld3>...User name: <dn>.User IP address: <saddr>.Threshold (in visits): <trigger_val>{ .Category: <category> | .Protocol: <protocol> } .Disposition: Blocked..--Most recent request--.URL: <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Source:[\s]+(?<agent>[^\.]*)\.\.Websense[\s]+Alert:[\s]+(?<action>[^\s]*)[\s]+\-[\s]+(?<fld1>[^\.]*)\.\.A[\s]+client[\s]+(?<fld2>[^\.]*)\.\.\.For[\s]+more[\s]+information,[\s]+(?<fld3>[^\.]*)\.\.\.User[\s]+name:[\s]+(?<dn>[^\.]*)\.User[\s]+IP[\s]+address:[\s]+(?<saddr>[^\.]*)\.Threshold[\s]+\(in[\s]+visits\):[\s]+(?<trigger_val>[^\s\s]*)([\s]*\.Category:[\s]+(?<category>[^\s]*)[\s]+|[\s]*\.Protocol:[\s]+(?<protocol>[^\s]*)[\s]+)[\s]+\.Disposition:[\s]+Blocked\.\.\-\-Most[\s]+recent[\s]+request\-\-\.URL:[\s]+(?<url>.*)$" }
				id => "message-Information:04"
				add_field => {
				"event_state" => "Blocked"
					"[event][id]" => "Information:04"
					"[rsa][message][id1]" => "Information:04"
					"[event][categoryid]" => "1204020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA:  <category>^<dn>^<saddr>^<daddr>^<severity>^<url>
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{category}^%{dn}^%{saddr}^%{daddr}^%{severity}^%{url}" }
			id => "msgParserId23"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Warning" {
		# MESSAGE Warning
		# line in RSA:  Source: <agent>..Websense Alert: <action>..Policy Server: <daddr>.Subscription Key: <fld1>..The following URL categories have been removed from the Websense Master Database. They will no longer exist in filtering policies. Your policies may need to be changed to compensate for these removals...<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source: %{agent}..Websense Alert: %{action}..Policy Server: %{daddr}.Subscription Key: %{fld1}..The following URL categories have been removed from the Websense Master Database. They will no longer exist in filtering policies. Your policies may need to be changed to compensate for these removals...%{info}" }
				id => "message-Warning"
				add_field => {
				"event_description" => "URL categories have been removed from the Websense Master Database"
					"[event][id]" => "Warning"
					"[rsa][message][id1]" => "Warning"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
		# MESSAGE Warning:01
		# line in RSA:  Source: <agent>..Websense Alert: <action>..Policy Server: <daddr>.Subscription Key: <fld1>..The following URL categories have been added to the Websense Master Database. Their default filtering settings are as listed below. To configure different filtering settings for these URL categories, edit the category sets associated with the desired policies. (<comments>)..<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source: %{agent}..Websense Alert: %{action}..Policy Server: %{daddr}.Subscription Key: %{fld1}..The following URL categories have been added to the Websense Master Database. Their default filtering settings are as listed below. To configure different filtering settings for these URL categories, edit the category sets associated with the desired policies. (%{comments})..%{info}" }
				id => "message-Warning:01"
				add_field => {
				"event_description" => "URL categories have been added to the Websense Master Database"
					"[event][id]" => "Warning:01"
					"[rsa][message][id1]" => "Warning:01"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
		# MESSAGE Warning:02
		# line in RSA:  Source: <agent>..Websense Alert: <action>..Filtering Service: <daddr>.Subscription Key: <fld1>..Your Websense subscription provides monitoring for up to <fld2> clients. Your current Websense usage exceeds <fld3> of this limit...<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source: %{agent}..Websense Alert: %{action}..Filtering Service: %{daddr}.Subscription Key: %{fld1}..Your Websense subscription provides monitoring for up to %{fld2} clients. Your current Websense usage exceeds %{fld3} of this limit...%{info}" }
				id => "message-Warning:02"
				add_field => {
					"[event][id]" => "Warning:02"
					"[rsa][message][id1]" => "Warning:02"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
		# MESSAGE Warning:03
		# line in RSA:  Source: <agent>..Websense Alert: <action>..Policy Server: <daddr>.Subscription Key: <fld1>..The following network protocols have been added to the Websense Master Database. Their default filtering settings are as listed below. To configure different filtering settings for these protocols, edit the network protocol sets associated with the desired policies. (<comments>)..<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Source: %{agent}..Websense Alert: %{action}..Policy Server: %{daddr}.Subscription Key: %{fld1}..The following network protocols have been added to the Websense Master Database. Their default filtering settings are as listed below. To configure different filtering settings for these protocols, edit the network protocol sets associated with the desired policies. (%{comments})..%{info}" }
				id => "message-Warning:03"
				add_field => {
					"[event][id]" => "Warning:03"
					"[rsa][message][id1]" => "Warning:03"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s " ] }
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA: <fld1>
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "%{fld1}" }
			id => "msgParserId35"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_websensemsg.json"
#			template_name => "websense_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}
